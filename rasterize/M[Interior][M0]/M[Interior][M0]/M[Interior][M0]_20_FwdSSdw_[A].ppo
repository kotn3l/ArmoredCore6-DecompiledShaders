#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1038;
float _3190;
float _3191;
float _3192;
float _3193;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _395 = ((_389 * _383) + (_357 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _396 = ((_389 * _384) + (_358 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    float _416 = (_392 > 0.0) ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_397 + (-0.5)) + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_398 + (-0.5)) + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    vec4 _484 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _488 = _484.z;
    float _491 = (_484.x * 2.0) + (-1.0);
    float _492 = (_484.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3212 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _498 = sqrt(1.0 - (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))));
    float _499 = _488 * _290;
    float _506 = (cbMtdParam._m0[15u].w * ((_329 - _499) + ((_488 - _329) * _290))) + _499;
    float _510 = (cbMtdParam._m0[16u].x * _357) + _491;
    float _511 = (cbMtdParam._m0[16u].x * _358) + _492;
    float _514 = fma(_498, _199, fma(_511, _206, _510 * _192));
    float _517 = fma(_498, _200, fma(_511, _207, _510 * _193));
    float _520 = fma(_498, _201, fma(_511, _208, _510 * _194));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    float _525 = _524 * _514;
    float _526 = _524 * _517;
    float _527 = _524 * _520;
    float _3223 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _528 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    float _3234 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3245 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3256 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _551 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _552 = _263 * _551;
    float _553 = _264 * _551;
    float _554 = _265 * _551;
    vec4 _559 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _561 = _559.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _719 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _725 = (cbMatDynParam._m0[5u].x * _719) + cbMatDynParam._m0[5u].y;
        float _3267 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _730 = (cbMatDynParam._m0[5u].z * _719) + cbMatDynParam._m0[5u].w;
        float _3278 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) - _726)) + _726) < ((_561 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _574 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _575 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _594 = fma(_527, cbSceneParam._m0[5u].z, fma(_526, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _525));
    float _597 = fma(_527, cbSceneParam._m0[6u].z, fma(_526, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _525));
    float _600 = fma(_527, cbSceneParam._m0[7u].z, fma(_526, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _525));
    uint _613 = uint(roundEven(NORMAL.w)) * 13u;
    uint _615 = _613 + 9u;
    uint _616 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3289 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _3311 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _574, cbSceneParam._m0[86u].y * _575));
    float _639 = _636.x * TEXCOORD.z;
    float _640 = dot(vec3(_525, _526, _527), vec3(_552, _553, _554));
    float _643 = _640 * 2.0;
    float _647 = (_643 * _525) - _552;
    float _648 = (_643 * _526) - _553;
    float _649 = (_643 * _527) - _554;
    float _653 = abs(dot(vec3(_552, _553, _554), vec3(_525, _526, _527)));
    float _3322 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _655 = sqrt(_528);
    float _668 = exp2((_655 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_655 * 3.0));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _764 = fma(_708, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _700));
        float _768 = fma(_708, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _700));
        float _772 = fma(_708, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _700));
        float _795 = _700 + _525;
        float _796 = _704 + _526;
        float _797 = _708 + _527;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _764;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _768;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _772;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_764 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_768 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_772 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_525, _526, _527), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3370 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_525, _526, _527), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3403 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_525, _526, _527), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3436 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1039 = _867;
        _1040 = _866;
        _1041 = _878;
        _1042 = _877;
        _1043 = _876;
        _1044 = _888;
        _1045 = _887;
        _1046 = _886;
        _1047 = _901;
        _1048 = _900;
        _1049 = _899;
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _1038;
        _1039 = _1038;
        _1040 = _1038;
        _1041 = _1038;
        _1042 = _1038;
        _1043 = _1038;
        _1044 = _1038;
        _1045 = _1038;
        _1046 = _1038;
        _1047 = _1038;
        _1048 = _1038;
        _1049 = _1038;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1081 = fma(_708, cbModelParam._m0[30u].z, fma(_704, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _700));
        float _1085 = fma(_708, cbModelParam._m0[31u].z, fma(_704, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _700));
        float _1089 = fma(_708, cbModelParam._m0[32u].z, fma(_704, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _700));
        float _1112 = _700 + _525;
        float _1113 = _704 + _526;
        float _1114 = _708 + _527;
        float _1124 = fma(_1114, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1112)) - _1081;
        float _1125 = fma(_1114, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1112)) - _1085;
        float _1126 = fma(_1114, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1112)) - _1089;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1081 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1085 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[35u].z) + ((((((_1089 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1180 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1147.x + (-0.5));
        float _1182 = _1180 * (_1147.y + (-0.5));
        float _1183 = _1180 * (_1147.z + (-0.5));
        float _1190 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1154.x + (-0.5));
        float _1192 = _1190 * (_1154.y + (-0.5));
        float _1193 = _1190 * (_1154.z + (-0.5));
        float _1200 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1161.x + (-0.5));
        float _1202 = _1200 * (_1161.y + (-0.5));
        float _1203 = _1200 * (_1161.z + (-0.5));
        float _1210 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1168.x + (-0.5));
        float _1212 = _1210 * (_1168.y + (-0.5));
        float _1213 = _1210 * (_1168.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_525, _526, _527), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3499 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1244 + 1.0))) + _1249) * _1214;
        float _1259 = _1182 * 0.5;
        float _1260 = _1192 * 0.5;
        float _1261 = _1202 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_525, _526, _527), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3532 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1286 + 1.0))) + _1291) * _1215;
        float _1301 = _1183 * 0.5;
        float _1302 = _1193 * 0.5;
        float _1303 = _1203 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_525, _526, _527), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3565 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_1328 + 1.0))) + _1333) * _1216;
        _1350 = _1183;
        _1351 = _1182;
        _1352 = _1181;
        _1353 = _1193;
        _1354 = _1192;
        _1355 = _1191;
        _1356 = _1203;
        _1357 = _1202;
        _1358 = _1201;
        _1359 = _1216;
        _1360 = _1215;
        _1361 = _1214;
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1038;
        _1351 = _1038;
        _1352 = _1038;
        _1353 = _1038;
        _1354 = _1038;
        _1355 = _1038;
        _1356 = _1038;
        _1357 = _1038;
        _1358 = _1038;
        _1359 = _1038;
        _1360 = _1038;
        _1361 = _1038;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1050)) + _1050;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1051)) + _1051;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1052)) + _1052;
    float _1397 = fma(_1376, cbSceneParam._m0[89u].z, fma(_1375, cbSceneParam._m0[89u].y, _1374 * cbSceneParam._m0[89u].x));
    float _1400 = fma(_1376, cbSceneParam._m0[90u].z, fma(_1375, cbSceneParam._m0[90u].y, _1374 * cbSceneParam._m0[90u].x));
    float _1403 = fma(_1376, cbSceneParam._m0[91u].z, fma(_1375, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1374));
    float _1418 = _647 * 0.5;
    float _1419 = _648 * 0.5;
    float _1420 = _649 * 0.5;
    float _1421 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1424 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1427 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1461;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1434 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1037, _1041, _1044, _1047));
        float _1438 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1442 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1449 = dot(vec4(cbModelParam._m0[39u]), vec4(_1418, _1419, _1420, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1472;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1463 = dot(vec4(cbModelParam._m0[40u]), vec4(_1418, _1419, _1420, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1476 = (_1472 * cbModelParam._m0[1u].x) + (_1461 * (1.0 - cbModelParam._m0[1u].x));
    float _1486 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _528);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1486 : min(cbModelParam._m0[25u].z, _1486));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1535 = fma(_708, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700)) + cbModelParam._m0[13u].w;
        float _1539 = fma(_708, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700)) + cbModelParam._m0[14u].w;
        float _1543 = fma(_708, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700)) + cbModelParam._m0[15u].w;
        float _1546 = fma(_649, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _647));
        float _1549 = fma(_649, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _647));
        float _1552 = fma(_649, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _647));
        float _1580;
        if (_1546 > 0.0)
        {
            _1580 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1580 = frontier_phi_25_23_ladder;
        }
        float _1950;
        if (_1549 > 0.0)
        {
            _1950 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1950 = frontier_phi_34_30_ladder;
        }
        float _2274;
        if (_1552 > 0.0)
        {
            _2274 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2274 = frontier_phi_48_41_ladder;
        }
        float _2276 = isnan(_1950) ? _1580 : (isnan(_1580) ? _1950 : min(_1580, _1950));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1546) + _1535;
        float _2282 = (_2277 * _1549) + _1539;
        float _2283 = (_2277 * _1552) + _1543;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2284;
        float _2287 = _2284 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2283 > _2287) || ((_2283 < _2285) || ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 < _2285) || (_2281 > _2287))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2283, cbModelParam._m0[9u].z, fma(_2282, cbModelParam._m0[9u].y, _2281 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2283, cbModelParam._m0[10u].z, fma(_2282, cbModelParam._m0[10u].y, _2281 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2283, cbModelParam._m0[11u].z, fma(_2282, cbModelParam._m0[11u].y, _2281 * cbModelParam._m0[11u].x))), _1487);
            frontier_phi_24_48_ladder = _2425.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2425.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2425.x * cbModelParam._m0[1u].y;
        }
        _1568 = frontier_phi_24_48_ladder_2;
        _1570 = frontier_phi_24_48_ladder_1;
        _1572 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_647, _648, _649), _1487);
        _1568 = _1556.x * cbModelParam._m0[1u].y;
        _1570 = _1556.y * cbModelParam._m0[1u].y;
        _1572 = _1556.z * cbModelParam._m0[1u].y;
    }
    float _1576 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _528);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1576 : min(cbModelParam._m0[25u].w, _1576));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_708, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_708, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_708, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_649, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _647));
        float _1644 = fma(_649, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _647));
        float _1647 = fma(_649, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _647));
        float _1955;
        if (_1641 > 0.0)
        {
            _1955 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1955 = frontier_phi_36_32_ladder;
        }
        float _2300;
        if (_1644 > 0.0)
        {
            _2300 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2300 = frontier_phi_50_43_ladder;
        }
        float _2490;
        if (_1647 > 0.0)
        {
            _2490 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2490 = frontier_phi_68_61_ladder;
        }
        float _2492 = isnan(_2300) ? _1955 : (isnan(_1955) ? _2300 : min(_1955, _2300));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1641) + _1630;
        float _2498 = (_2493 * _1644) + _1634;
        float _2499 = (_2493 * _1647) + _1638;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1577);
            frontier_phi_33_68_ladder = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_33_68_ladder_2;
        _1668 = frontier_phi_33_68_ladder;
        _1670 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_647, _648, _649), _1577);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1682 = ((((1.0 - _668) * ((_655 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_668 * _655)) * _639;
    float _1683 = _1682 * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1684 = _1682 * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1685 = _1682 * ((cbModelParam._m0[1u].w * (_1670 - _1572)) + _1572);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    vec4 _1702 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_574, _575));
    float _1704 = _1702.w;
    float _1716 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1704);
    float _1717 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1704);
    float _1718 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1704);
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_613 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1730 = _639 + (-1.0);
    float _1733 = (cbLight._m0[_1725].x * _1730) + 1.0;
    float _1734 = (cbLight._m0[_1725].y * _1730) + 1.0;
    uint _1735 = _1724 + 5u;
    float _1741 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1745 = _1724 + 4u;
    float _1754 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1758 = _1724 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_525, _526, _527));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_525, _526, _527));
    float _3701 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _3712 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1735].x * _1741) * _1779) + (((cbLight._m0[_1745].x * _1716) * _1754) * _1777);
    float _1787 = ((_1741 * cbLight._m0[_1735].y) * _1779) + (((cbLight._m0[_1745].y * _1717) * _1754) * _1777);
    float _1788 = ((_1741 * cbLight._m0[_1735].z) * _1779) + (((cbLight._m0[_1745].z * _1718) * _1754) * _1777);
    uint _1790 = _1724 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _528) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1724].x + _552;
    float _1806 = cbLight._m0[_1724].y + _553;
    float _1807 = cbLight._m0[_1724].z + _554;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1724].xyz));
    float _3723 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _1819 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _1820 = dot(vec3(_525, _526, _527), vec3(_1812, _1813, _1814));
    float _3745 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1812, _1813, _1814));
    float _3756 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1844 = 1.0 - _1804;
    float _1855 = (0.5 / (((_1819 * ((_1818 * _1844) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1844) + _1804) * _1818))) * _1818;
    float _3767 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    uint _1871 = _1724 + 9u;
    float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _528) * 0.949999988079071044921875);
    float _1883 = _1882 * _1882;
    float _1884 = cbLight._m0[_1758].x + _552;
    float _1885 = cbLight._m0[_1758].y + _553;
    float _1886 = cbLight._m0[_1758].z + _554;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1891 = _1890 * _1884;
    float _1892 = _1890 * _1885;
    float _1893 = _1890 * _1886;
    float _1894 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1758].xyz));
    float _3778 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1898 = dot(vec3(_525, _526, _527), vec3(_1891, _1892, _1893));
    float _3789 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1891, _1892, _1893));
    float _3800 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1906 = _1883 * _1883;
    float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
    float _1919 = (exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1920 = 1.0 - _1883;
    float _1930 = (0.5 / (((_1819 * ((_1897 * _1920) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1920) + _1883) * _1897))) * _1897;
    float _3811 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
    float _1942 = (((_1919 * cbLight._m0[_1871].x) * _1932) * _1741) + ((((cbLight._m0[_1790].x * _1716) * _1843) * _1857) * _1754);
    float _1943 = (((_1919 * cbLight._m0[_1871].y) * _1932) * _1741) + ((((cbLight._m0[_1790].y * _1717) * _1843) * _1857) * _1754);
    float _1944 = (((_1919 * cbLight._m0[_1871].z) * _1932) * _1741) + ((((cbLight._m0[_1790].z * _1718) * _1843) * _1857) * _1754);
    float _2059;
    float _2061;
    float _2063;
    float _2065;
    float _2067;
    float _2069;
    if (_1722.y == 0u)
    {
        float _1999 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1999;
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1999;
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1999;
        uvec4 _2014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2015 = _2014.x;
        uint _2026 = uint((float(_2014.y) * floor(float(uint(cbSceneParam._m0[85u].y * _575) / _2015))) + floor(float(uint(cbSceneParam._m0[85u].x * _574) / _2015)));
        float _2036 = (log2(_2002 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2037 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        uint _2040 = uint(isnan(14.0) ? _2037 : (isnan(_2037) ? 14.0 : min(_2037, 14.0)));
        uvec4 _2045 = texelFetch(g_lightClusterGridBuffer, int(((_2040 << 2u) + (_2026 << 6u)) >> 2u));
        uint _2046 = _2045.x;
        uint _2047 = _2014.z;
        float _2153;
        float _2155;
        float _2157;
        float _2159;
        float _2161;
        float _2163;
        if (((((1u << ((_2047 >> 4u) & 15u)) + 4294967295u) & _2046) == 0u) || ((_2047 & 240u) == 0u))
        {
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
            _2159 = 0.0;
            _2161 = 0.0;
            _2163 = 0.0;
        }
        else
        {
            float _2154;
            float _2156;
            float _2158;
            float _2160;
            float _2162;
            float _2164;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            float _2342 = 0.0;
            uint _2343 = 0u;
            uint _2352;
            bool _2353;
            for (;;)
            {
                _2352 = texelFetch(g_lightClassification, int((((_2040 << 5u) + (_2026 << 9u)) + (_2343 << 2u)) >> 2u)).x;
                _2353 = _2352 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2353)
                {
                    frontier_phi_63_pred = _2339;
                    frontier_phi_63_pred_1 = _2342;
                    frontier_phi_63_pred_2 = _2341;
                    frontier_phi_63_pred_3 = _2340;
                    frontier_phi_63_pred_4 = _2338;
                    frontier_phi_63_pred_5 = _2337;
                }
                else
                {
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    uint _2539;
                    _2533 = _2337;
                    _2534 = _2338;
                    _2535 = _2339;
                    _2536 = _2340;
                    _2537 = _2341;
                    _2538 = _2342;
                    _2539 = _2352;
                    float _2434;
                    float _2435;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    for (;;)
                    {
                        uint _2543 = uint(findLSB(_2539)) + (_2343 << 5u);
                        uint _2540 = (_2539 + 4294967295u) & _2539;
                        uint _2545 = _2543 * 48u;
                        vec4 _2559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2545)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 3u)).x));
                        uint _2565 = (_2543 * 48u) + 4u;
                        vec4 _2578 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2565)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 3u)).x));
                        uint _2584 = (_2543 * 48u) + 8u;
                        vec3 _2595 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2584)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 2u)).x));
                        float _2599 = _2559.x - _2000;
                        float _2600 = _2559.y - _2001;
                        float _2601 = _2559.z - _2002;
                        float _2602 = dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601));
                        float _2605 = inversesqrt(_2602);
                        float _2606 = _2605 * _2599;
                        float _2607 = _2605 * _2600;
                        float _2608 = _2605 * _2601;
                        float _2609 = dot(vec3(_594, _597, _600), vec3(_2606, _2607, _2608));
                        float _2614 = 1.0 - (_2602 * _2559.w);
                        float _3832 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
                        float _2615 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
                        float _2616 = sqrt(_2602) * _2578.w;
                        float _2619 = 1.39999997615814208984375 / (_2616 + 1.39999997615814208984375);
                        float _2620 = _2619 * _2619;
                        float _2623 = ((1.0 - _2620) * _2609) + _2620;
                        float _2626 = _2616 * _2616;
                        float _2630 = ((isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))) * _2615) / ((_2626 * 0.699999988079071044921875) + 1.0);
                        float _2634 = (-0.0) - _2000;
                        float _2635 = (-0.0) - _2001;
                        float _2636 = (-0.0) - _2002;
                        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
                        float _2641 = _2640 * _2634;
                        float _2642 = _2640 * _2635;
                        float _2643 = _2640 * _2636;
                        float _2651 = exp2(log2(1.0 / ((_2626 * 3.5) + 5.0)) * 0.25);
                        float _2652 = 1.0 - _655;
                        float _2659 = sqrt(1.0 - ((1.0 - (_2652 * _2652)) * (1.0 - (_2651 * _2651))));
                        float _2660 = _2659 * _2659;
                        float _2661 = _2660 * _2660;
                        float _2662 = _2641 + _2606;
                        float _2663 = _2642 + _2607;
                        float _2664 = _2643 + _2608;
                        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
                        float _2672 = dot(vec3(_594, _597, _600), vec3(_2641, _2642, _2643));
                        float _3848 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2675 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
                        float _2676 = dot(vec3(_594, _597, _600), vec3(_2668 * _2662, _2668 * _2663, _2668 * _2664));
                        float _3859 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2679 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
                        float _2683 = ((_2679 * _2679) * (_2661 + (-1.0))) + 1.0;
                        float _2684 = _2619 * _2660;
                        float _2685 = _2684 * _2684;
                        float _2688 = ((1.0 - _2685) * _2609) + _2685;
                        float _3870 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2689 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                        float _2690 = 1.0 - _2660;
                        float _2700 = (0.5 / (((_2689 * ((_2675 * _2690) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2690) + _2660) * _2675))) * _2689;
                        float _3881 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2711 = (((_2661 * 3.1415927410125732421875) * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) / ((_2683 * _2683) * ((_2626 * 2.1991131305694580078125) + 3.141590118408203125))) * _2615;
                        _2437 = (_2630 * _2578.x) + _2536;
                        _2438 = (_2630 * _2578.y) + _2537;
                        _2439 = (_2630 * _2578.z) + _2538;
                        _2434 = (_2711 * _2595.x) + _2533;
                        _2435 = (_2711 * _2595.y) + _2534;
                        _2436 = (_2711 * _2595.z) + _2535;
                        if (_2540 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2533 = _2434;
                            _2534 = _2435;
                            _2535 = _2436;
                            _2536 = _2437;
                            _2537 = _2438;
                            _2538 = _2439;
                            _2539 = _2540;
                        }
                    }
                    frontier_phi_63_pred = _2436;
                    frontier_phi_63_pred_1 = _2439;
                    frontier_phi_63_pred_2 = _2438;
                    frontier_phi_63_pred_3 = _2437;
                    frontier_phi_63_pred_4 = _2435;
                    frontier_phi_63_pred_5 = _2434;
                }
                _2158 = frontier_phi_63_pred;
                _2164 = frontier_phi_63_pred_1;
                _2162 = frontier_phi_63_pred_2;
                _2160 = frontier_phi_63_pred_3;
                _2156 = frontier_phi_63_pred_4;
                _2154 = frontier_phi_63_pred_5;
                uint _2344 = _2343 + 1u;
                if (_2344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2337 = _2154;
                    _2338 = _2156;
                    _2339 = _2158;
                    _2340 = _2160;
                    _2341 = _2162;
                    _2342 = _2164;
                    _2343 = _2344;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
            _2159 = _2160;
            _2161 = _2162;
            _2163 = _2164;
        }
        uvec4 _2167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2168 = _2167.z;
        uint _2170 = (_2168 >> 8u) & 15u;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        if (((4294967295u << _2170) & _2046) == 0u)
        {
            _2305 = _2153;
            _2307 = _2155;
            _2309 = _2157;
            _2311 = _2159;
            _2313 = _2161;
            _2315 = _2163;
        }
        else
        {
            float _2330 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
            float _2331 = _2330 * _2000;
            float _2332 = _2330 * _2001;
            float _2333 = _2330 * _2002;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2170 < ((_2168 >> 12u) & 15u))
            {
                float _2306;
                float _2308;
                float _2310;
                float _2312;
                float _2314;
                float _2316;
                float _2516 = _2153;
                float _2517 = _2155;
                float _2518 = _2157;
                float _2519 = _2159;
                float _2520 = _2161;
                float _2521 = _2163;
                uint _2522 = _2170;
                uint _2531;
                bool _2532;
                for (;;)
                {
                    _2531 = texelFetch(g_lightClassification, int((((_2040 << 5u) + (_2026 << 9u)) + (_2522 << 2u)) >> 2u)).x;
                    _2532 = _2531 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2532)
                    {
                        frontier_phi_77_pred = _2521;
                        frontier_phi_77_pred_1 = _2520;
                        frontier_phi_77_pred_2 = _2519;
                        frontier_phi_77_pred_3 = _2518;
                        frontier_phi_77_pred_4 = _2517;
                        frontier_phi_77_pred_5 = _2516;
                    }
                    else
                    {
                        float _2746;
                        float _2747;
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _2759 = _2516;
                        float _2760 = _2517;
                        float _2761 = _2518;
                        float _2762 = _2519;
                        float _2763 = _2520;
                        float _2764 = _2521;
                        uint _2765 = _2531;
                        uint _2766;
                        vec4 _2791;
                        float _2792;
                        vec4 _2807;
                        vec3 _2819;
                        vec4 _2834;
                        vec4 _2849;
                        float _2895;
                        bool _2896;
                        for (;;)
                        {
                            uint _2776 = ((_2522 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2765));
                            _2766 = (_2765 + 4294967295u) & _2765;
                            uint _2778 = _2776 * 40u;
                            _2791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 3u)).x));
                            _2792 = _2791.w;
                            uint _2794 = (_2776 * 40u) + 4u;
                            _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            uint _2809 = (_2776 * 40u) + 8u;
                            _2819 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x));
                            uint _2821 = (_2776 * 40u) + 16u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2836 = (_2776 * 40u) + 20u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2851 = (_2776 * 40u) + 24u;
                            vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2870 = (_2776 * 40u) + 28u;
                            vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            _2895 = fma(_2002, _2883.z, fma(_2001, _2883.y, _2883.x * _2000)) + _2883.w;
                            _2896 = !((fma(_2002, _2864.z, fma(_2001, _2864.y, _2864.x * _2000)) + _2864.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2896)
                            {
                                float _2923 = _2791.x - _2000;
                                float _2924 = _2791.y - _2001;
                                float _2925 = _2791.z - _2002;
                                float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                                float _2929 = inversesqrt(_2926);
                                float _2930 = _2929 * _2923;
                                float _2931 = _2929 * _2924;
                                float _2932 = _2929 * _2925;
                                float _2936 = 1.0 - (_2926 / (_2792 * _2792));
                                float _3892 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2937 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                                float _2941 = sqrt(_2926) * _2807.w;
                                float _2943 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                                float _2944 = _2943 * _2943;
                                float _2947 = ((1.0 - _2944) * dot(vec3(_2930, _2931, _2932), vec3(_594, _597, _600))) + _2944;
                                float _2950 = _2941 * _2941;
                                float _2954 = (fma(_2002, _2834.z, fma(_2001, _2834.y, _2834.x * _2000)) + _2834.w) / _2895;
                                float _2955 = (fma(_2002, _2849.z, fma(_2001, _2849.y, _2849.x * _2000)) + _2849.w) / _2895;
                                float _2959 = 1.0 - dot(vec2(_2954, _2955), vec2(_2954, _2955));
                                float _3908 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
                                float _2961 = _2960 * (((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2937) / ((_2950 * 0.699999988079071044921875) + 1.0));
                                float _2973 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                                float _2974 = 1.0 - _655;
                                float _2981 = sqrt(1.0 - ((1.0 - (_2974 * _2974)) * (1.0 - (_2973 * _2973))));
                                float _2982 = _2981 * _2981;
                                float _2983 = _2982 * _2982;
                                float _2984 = _2930 - _2331;
                                float _2985 = _2931 - _2332;
                                float _2986 = _2932 - _2333;
                                float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                                float _2994 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2331, (-0.0) - _2332, (-0.0) - _2333));
                                float _3919 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2997 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                                float _2998 = dot(vec3(_594, _597, _600), vec3(_2990 * _2984, _2990 * _2985, _2990 * _2986));
                                float _3930 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _3001 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _3005 = ((_3001 * _3001) * (_2983 + (-1.0))) + 1.0;
                                float _3006 = _2943 * _2982;
                                float _3007 = _3006 * _3006;
                                float _3013 = ((1.0 - _3007) * dot(vec3(_594, _597, _600), vec3(_2930, _2931, _2932))) + _3007;
                                float _3941 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _3015 = 1.0 - _2982;
                                float _3025 = (0.5 / (((_3014 * ((_2997 * _3015) + _2982)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2982) * _2997))) * _3014;
                                float _3952 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3035 = (_2960 * _2937) * (((_2983 * 3.1415927410125732421875) * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) / ((_3005 * _3005) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2961 * _2807.x;
                                frontier_phi_83_pred_1 = _2961 * _2807.z;
                                frontier_phi_83_pred_2 = _2961 * _2807.y;
                                frontier_phi_83_pred_3 = _3035 * _2819.z;
                                frontier_phi_83_pred_4 = _3035 * _2819.y;
                                frontier_phi_83_pred_5 = _3035 * _2819.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3042 = frontier_phi_83_pred;
                            _3044 = frontier_phi_83_pred_1;
                            _3043 = frontier_phi_83_pred_2;
                            _3041 = frontier_phi_83_pred_3;
                            _3040 = frontier_phi_83_pred_4;
                            _3039 = frontier_phi_83_pred_5;
                            _2749 = _3042 + _2762;
                            _2750 = _3043 + _2763;
                            _2751 = _3044 + _2764;
                            _2746 = _3039 + _2759;
                            _2747 = _3040 + _2760;
                            _2748 = _3041 + _2761;
                            if (_2766 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2766;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2751;
                        frontier_phi_77_pred_1 = _2750;
                        frontier_phi_77_pred_2 = _2749;
                        frontier_phi_77_pred_3 = _2748;
                        frontier_phi_77_pred_4 = _2747;
                        frontier_phi_77_pred_5 = _2746;
                    }
                    _2316 = frontier_phi_77_pred;
                    _2314 = frontier_phi_77_pred_1;
                    _2312 = frontier_phi_77_pred_2;
                    _2310 = frontier_phi_77_pred_3;
                    _2308 = frontier_phi_77_pred_4;
                    _2306 = frontier_phi_77_pred_5;
                    uint _2523 = _2522 + 1u;
                    if (_2523 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2516 = _2306;
                        _2517 = _2308;
                        _2518 = _2310;
                        _2519 = _2312;
                        _2520 = _2314;
                        _2521 = _2316;
                        _2522 = _2523;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2308;
                frontier_phi_52_53_ladder_1 = _2316;
                frontier_phi_52_53_ladder_2 = _2314;
                frontier_phi_52_53_ladder_3 = _2312;
                frontier_phi_52_53_ladder_4 = _2310;
                frontier_phi_52_53_ladder_5 = _2306;
            }
            else
            {
                frontier_phi_52_53_ladder = _2155;
                frontier_phi_52_53_ladder_1 = _2163;
                frontier_phi_52_53_ladder_2 = _2161;
                frontier_phi_52_53_ladder_3 = _2159;
                frontier_phi_52_53_ladder_4 = _2157;
                frontier_phi_52_53_ladder_5 = _2153;
            }
            _2305 = frontier_phi_52_53_ladder_5;
            _2307 = frontier_phi_52_53_ladder;
            _2309 = frontier_phi_52_53_ladder_4;
            _2311 = frontier_phi_52_53_ladder_3;
            _2313 = frontier_phi_52_53_ladder_2;
            _2315 = frontier_phi_52_53_ladder_1;
        }
        float _2320 = isnan(1.0) ? _639 : (isnan(_639) ? 1.0 : min(_639, 1.0));
        _2059 = (_2320 * _2311) + _1786;
        _2061 = (_2320 * _2313) + _1787;
        _2063 = (_2320 * _2315) + _1788;
        _2065 = ((_2305 * 0.039999999105930328369140625) * _2320) + _1942;
        _2067 = ((_2307 * 0.039999999105930328369140625) * _2320) + _1943;
        _2069 = ((_2309 * 0.039999999105930328369140625) * _2320) + _1944;
    }
    else
    {
        _2059 = _1786;
        _2061 = _1787;
        _2063 = _1788;
        _2065 = _1942;
        _2067 = _1943;
        _2069 = _1944;
    }
    uint _2075 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _3968 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3979 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3990 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2100 = (((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2059 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _639))) + ((_2065 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + (((_456 - (_456 * _290)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2075].x);
    float _2102 = ((((_457 - (_457 * _290)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2075].y) + ((_2067 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2061 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _639)));
    float _2104 = (((cbMtdParam._m0[9u].z * (_458 - (_458 * _290))) * cbInstanceData._m0[_2075].z) + ((_2069 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2063 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _639)));
    float _2105 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2106 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    uint _2108 = _613 + 6u;
    float _2116 = _574 / cbSceneParam._m0[86u].x;
    float _2117 = _575 / cbSceneParam._m0[86u].y;
    vec4 _2131 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2116, _2117, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2133 = _2131.x;
    float _2134 = _2131.y;
    float _2135 = _2131.z;
    float _2136 = _2131.w;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2178 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2179 = _2178 / _547;
        float _2190 = _2179 * _263;
        float _2191 = _264 * _2179;
        float _2192 = (-0.0) - _2191;
        float _2193 = _2179 * _265;
        float _2195 = (cbSceneParam._m0[77u].w * _2192) / _2178;
        float _2196 = _2195 + cbSceneParam._m0[79u].w;
        float _2197 = cbSceneParam._m0[79u].w - _2191;
        float _2203 = sqrt(((_2190 * _2190) + (_2191 * _2191)) + (_2193 * _2193));
        float _2206 = (1.0 - (cbSceneParam._m0[77u].w / _2178)) * _2203;
        float _2212 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2214 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2447;
        if (abs((_2192 - _2195) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2447 = ((((_2196 > 0.0) ? exp2(_2212 * _2196) : (2.0 - exp2(_2214 * _2196))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2206;
        }
        else
        {
            float _2366 = 1.0 / cbSceneParam._m0[80u].x;
            float _2367 = isnan(_2197) ? _2196 : (isnan(_2196) ? _2197 : max(_2196, _2197));
            float _2368 = isnan(_2197) ? _2196 : (isnan(_2196) ? _2197 : min(_2196, _2197));
            float _2377 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : min(_2367, 0.0));
            float _2378 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : min(_2368, 0.0));
            _2447 = ((abs(_2203 / _2192) * cbSceneParam._m0[80u].y) * ((((_2377 - _2378) * 2.0) - ((exp2(_2212 * (isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0)))) - exp2(_2212 * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0))))) * _2366)) - ((exp2(_2214 * _2377) - exp2(_2214 * _2378)) * _2366))) + (_2206 * cbSceneParam._m0[80u].z);
        }
        vec4 _2449 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2116, _2117, 1.0), 0.0);
        float _2458 = exp2((_2447 * (-1.44269502162933349609375)) * (1.0 - _2449.w));
        float _2459 = log2(_2458);
        float _2475 = log2(_2136);
        _2216 = (exp2(_2475 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2459 * cbSceneParam._m0[78u].x)) * _2449.x) / cbSceneParam._m0[78u].x)) + _2133;
        _2218 = (exp2(_2475 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2459 * cbSceneParam._m0[78u].y)) * _2449.y) / cbSceneParam._m0[78u].y)) + _2134;
        _2220 = (exp2(_2475 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2459 * cbSceneParam._m0[78u].z)) * _2449.z) / cbSceneParam._m0[78u].z)) + _2135;
        _2222 = _2458 * _2136;
    }
    else
    {
        _2216 = _2133;
        _2218 = _2134;
        _2220 = _2135;
        _2222 = _2136;
    }
    bool _2485;
    vec4 _2232;
    vec4 _2254;
    float _2256;
    float _2260;
    float _2261;
    float _2262;
    float _2263;
    bool _2273;
    for (;;)
    {
        _2232 = cbMatDynParam._m0[0u];
        float _2234 = roundEven(_2232.y);
        bool _2235 = _2234 == 3.0;
        float _2236 = log2(_2222);
        float _2243 = exp2(_2236 * cbSceneParam._m0[78u].x) * _2105;
        float _2244 = exp2(_2236 * cbSceneParam._m0[78u].y) * _2106;
        float _2245 = exp2(_2236 * cbSceneParam._m0[78u].z) * _2107;
        float _2252 = _561 + (-0.5);
        _2254 = cbMtdParam._m0[1u];
        _2256 = _2254.y * _2252;
        float _2259 = (_2234 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2260 = _2259 * (_2235 ? _2243 : (_2243 + (cbSceneParam._m0[72u].w * _2216)));
        _2261 = _2259 * (_2235 ? _2244 : (_2244 + (cbSceneParam._m0[72u].w * _2218)));
        _2262 = _2259 * (_2235 ? _2245 : (_2245 + (cbSceneParam._m0[72u].w * _2220)));
        _2263 = _2252 * 0.999000012874603271484375;
        _2273 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2273)
        {
            if ((cbInstanceData._m0[_613 + 7u].x + _2263) < 0.5)
            {
                _2485 = true;
                break;
            }
        }
        uint _2401 = _615 + uint(_2232.w);
        if ((cbInstanceData._m0[_2401].w < 1.0) && ((cbInstanceData._m0[_2401].w + _2263) < 0.5))
        {
            _2485 = true;
            break;
        }
        if ((_2256 + 1.0) < _2254.x)
        {
            _2485 = true;
            break;
        }
        _2485 = false;
        break;
    }
    float _2716;
    if (_2485)
    {
        discard_state = true;
        _2716 = 0.0;
    }
    else
    {
        _2716 = cbInstanceData._m0[_2108].w;
    }
    SV_Target.x = _2260;
    SV_Target.y = _2261;
    SV_Target.z = _2262;
    SV_Target.w = _2716;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2108].w;
    discard_exit();
}


