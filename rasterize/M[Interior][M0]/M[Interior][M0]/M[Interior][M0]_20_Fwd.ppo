#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _991;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    vec4 _319 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _323 = _319.z;
    float _346 = (_319.x * 2.0) + (-1.0);
    float _348 = (_319.y * 2.0) + (-1.0);
    float _351 = _346 - (_346 * _284);
    float _352 = _348 - (_348 * _284);
    float _361 = cbMtdParam._m0[22u].y + _257;
    float _362 = cbMtdParam._m0[22u].z + _258;
    float _363 = cbMtdParam._m0[22u].w + _259;
    float _377 = (-0.0) - dot(vec3(_361, _362, _363), vec3(_186, _187, _188));
    float _378 = (-0.0) - dot(vec3(_361, _362, _363), vec3(_200, _201, _202));
    float _379 = (-0.0) - dot(vec3(_361, _362, _363), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _386 = _383 * _379;
    float _389 = ((_383 * _377) + (_351 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _390 = ((_383 * _378) + (_352 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _391 = fract(TEXCOORD.x);
    float _392 = fract(TEXCOORD.y);
    float _398;
    if (_389 > 0.0)
    {
        _398 = (1.0 - _391) / _389;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_389 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _391) / _389;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _398 = frontier_phi_3_2_ladder;
    }
    float _406;
    if (_390 > 0.0)
    {
        _406 = (1.0 - _392) / _390;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_390 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _392) / _390;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _406 = frontier_phi_7_6_ladder;
    }
    float _410 = (_386 > 0.0) ? (cbMtdParam._m0[15u].x / _386) : 5000.0;
    float _411 = isnan(_406) ? _398 : (isnan(_398) ? _406 : min(_398, _406));
    float _412 = isnan(_410) ? _411 : (isnan(_411) ? _410 : min(_411, _410));
    float _416 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = ((_412 * _386) + _416) / _416;
    vec4 _448 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_391 + (-0.5)) + (_412 * _389)) / _423) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_392 + (-0.5)) + (_412 * _390)) / _423) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _452 = _448.z;
    vec4 _478 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _482 = _478.z;
    float _485 = (_478.x * 2.0) + (-1.0);
    float _486 = (_478.y * 2.0) + (-1.0);
    float _487 = dot(vec2(_485, _486), vec2(_485, _486));
    float _3075 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0))));
    float _493 = _482 * _284;
    float _500 = (cbMtdParam._m0[15u].w * ((_323 - _493) + ((_482 - _323) * _284))) + _493;
    float _504 = (cbMtdParam._m0[16u].x * _351) + _485;
    float _505 = (cbMtdParam._m0[16u].x * _352) + _486;
    float _508 = fma(_492, _193, fma(_505, _200, _504 * _186));
    float _511 = fma(_492, _194, fma(_505, _201, _504 * _187));
    float _514 = fma(_492, _195, fma(_505, _202, _504 * _188));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3086 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _522 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
    float _3097 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3108 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3119 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _546 = _257 * _545;
    float _547 = _258 * _545;
    float _548 = _259 * _545;
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _575 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _578 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _581 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _594 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3130 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
    float _3141 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
    float _3152 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
    vec4 _617 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _620 = _617.x * TEXCOORD.z;
    float _621 = dot(vec3(_519, _520, _521), vec3(_546, _547, _548));
    float _624 = _621 * 2.0;
    float _628 = (_624 * _519) - _546;
    float _629 = (_624 * _520) - _547;
    float _630 = (_624 * _521) - _548;
    float _634 = abs(dot(vec3(_546, _547, _548), vec3(_519, _520, _521)));
    float _3163 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _636 = sqrt(_522);
    float _649 = exp2((_636 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_636 * 3.0));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _990;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _717 = fma(_689, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681));
        float _721 = fma(_689, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681));
        float _725 = fma(_689, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681));
        float _748 = _681 + _519;
        float _749 = _685 + _520;
        float _750 = _689 + _521;
        float _760 = fma(_750, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748)) - _717;
        float _761 = fma(_750, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748)) - _721;
        float _762 = fma(_750, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748)) - _725;
        float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
        float _779 = ((_766 * _760) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_717 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_766 * _761) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_721 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_766 * _762) / cbModelParam._m0[34u].z) + ((((((_725 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _818 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_784.x + (-0.5));
        float _820 = _818 * (_784.y + (-0.5));
        float _821 = _818 * (_784.z + (-0.5));
        float _828 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_791.x + (-0.5));
        float _830 = _828 * (_791.y + (-0.5));
        float _831 = _828 * (_791.z + (-0.5));
        float _838 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_798.x + (-0.5));
        float _840 = _838 * (_798.y + (-0.5));
        float _841 = _838 * (_798.z + (-0.5));
        float _848 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_805.x + (-0.5));
        float _850 = _848 * (_805.y + (-0.5));
        float _851 = _848 * (_805.z + (-0.5));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = _819 * 0.5;
        float _856 = _829 * 0.5;
        float _857 = _839 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _872 = (dot(vec3(_519, _520, _521), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3189 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _882 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3200 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3211 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0))) * (_884 + 1.0))) + _889) * _852;
        float _899 = _820 * 0.5;
        float _900 = _830 * 0.5;
        float _901 = _840 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_519, _520, _521), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3222 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3233 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3244 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0))) * (_926 + 1.0))) + _931) * _853;
        float _941 = _821 * 0.5;
        float _942 = _831 * 0.5;
        float _943 = _841 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_519, _520, _521), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3255 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3266 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3277 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) * (_968 + 1.0))) + _973) * _854;
        _990 = _821;
        _992 = _820;
        _993 = _819;
        _994 = _831;
        _995 = _830;
        _996 = _829;
        _997 = _841;
        _998 = _840;
        _999 = _839;
        _1000 = _854;
        _1001 = _853;
        _1002 = _852;
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
    }
    else
    {
        _990 = _991;
        _992 = _991;
        _993 = _991;
        _994 = _991;
        _995 = _991;
        _996 = _991;
        _997 = _991;
        _998 = _991;
        _999 = _991;
        _1000 = _991;
        _1001 = _991;
        _1002 = _991;
        _1003 = 0.0;
        _1004 = 0.0;
        _1005 = 0.0;
    }
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1031 = fma(_689, cbModelParam._m0[30u].z, fma(_685, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _681));
        float _1035 = fma(_689, cbModelParam._m0[31u].z, fma(_685, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _681));
        float _1039 = fma(_689, cbModelParam._m0[32u].z, fma(_685, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _681));
        float _1062 = _681 + _519;
        float _1063 = _685 + _520;
        float _1064 = _689 + _521;
        float _1074 = fma(_1064, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062)) - _1031;
        float _1075 = fma(_1064, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062)) - _1035;
        float _1076 = fma(_1064, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062)) - _1039;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1031 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1035 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[35u].z) + ((((((_1039 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1130 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1097.x + (-0.5));
        float _1132 = _1130 * (_1097.y + (-0.5));
        float _1133 = _1130 * (_1097.z + (-0.5));
        float _1140 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1104.x + (-0.5));
        float _1142 = _1140 * (_1104.y + (-0.5));
        float _1143 = _1140 * (_1104.z + (-0.5));
        float _1150 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1111.x + (-0.5));
        float _1152 = _1150 * (_1111.y + (-0.5));
        float _1153 = _1150 * (_1111.z + (-0.5));
        float _1160 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1118.x + (-0.5));
        float _1162 = _1160 * (_1118.y + (-0.5));
        float _1163 = _1160 * (_1118.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_519, _520, _521), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3340 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_1194 + 1.0))) + _1199) * _1164;
        float _1209 = _1132 * 0.5;
        float _1210 = _1142 * 0.5;
        float _1211 = _1152 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_519, _520, _521), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3373 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_1236 + 1.0))) + _1241) * _1165;
        float _1251 = _1133 * 0.5;
        float _1252 = _1143 * 0.5;
        float _1253 = _1153 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_519, _520, _521), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3406 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_1278 + 1.0))) + _1283) * _1166;
        _1300 = _1133;
        _1301 = _1132;
        _1302 = _1131;
        _1303 = _1143;
        _1304 = _1142;
        _1305 = _1141;
        _1306 = _1153;
        _1307 = _1152;
        _1308 = _1151;
        _1309 = _1166;
        _1310 = _1165;
        _1311 = _1164;
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _991;
        _1301 = _991;
        _1302 = _991;
        _1303 = _991;
        _1304 = _991;
        _1305 = _991;
        _1306 = _991;
        _1307 = _991;
        _1308 = _991;
        _1309 = _991;
        _1310 = _991;
        _1311 = _991;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1003)) + _1003;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1005)) + _1005;
    float _1347 = fma(_1326, cbSceneParam._m0[89u].z, fma(_1325, cbSceneParam._m0[89u].y, _1324 * cbSceneParam._m0[89u].x));
    float _1350 = fma(_1326, cbSceneParam._m0[90u].z, fma(_1325, cbSceneParam._m0[90u].y, _1324 * cbSceneParam._m0[90u].x));
    float _1353 = fma(_1326, cbSceneParam._m0[91u].z, fma(_1325, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1324));
    float _1368 = _628 * 0.5;
    float _1369 = _629 * 0.5;
    float _1370 = _630 * 0.5;
    float _1371 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1374 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1377 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1411;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1384 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_990, _994, _997, _1000));
        float _1388 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_992, _995, _998, _1001));
        float _1392 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_993, _996, _999, _1002));
        float _1399 = dot(vec4(cbModelParam._m0[39u]), vec4(_1368, _1369, _1370, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1399) ? 0.0 : (isnan(0.0) ? _1399 : max(0.0, _1399))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1422;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1413 = dot(vec4(cbModelParam._m0[40u]), vec4(_1368, _1369, _1370, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1426 = (_1422 * cbModelParam._m0[1u].x) + (_1411 * (1.0 - cbModelParam._m0[1u].x));
    float _1436 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1436 : min(cbModelParam._m0[25u].z, _1436));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1485 = fma(_689, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681)) + cbModelParam._m0[13u].w;
        float _1489 = fma(_689, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681)) + cbModelParam._m0[14u].w;
        float _1493 = fma(_689, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681)) + cbModelParam._m0[15u].w;
        float _1496 = fma(_630, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628));
        float _1499 = fma(_630, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628));
        float _1502 = fma(_630, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628));
        float _1530;
        if (_1496 > 0.0)
        {
            _1530 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1530 = frontier_phi_22_20_ladder;
        }
        float _1876;
        if (_1499 > 0.0)
        {
            _1876 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1876 = frontier_phi_31_27_ladder;
        }
        float _2192;
        if (_1502 > 0.0)
        {
            _2192 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2192 = frontier_phi_45_38_ladder;
        }
        float _2194 = isnan(_1876) ? _1530 : (isnan(_1530) ? _1876 : min(_1530, _1876));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1496) + _1485;
        float _2200 = (_2195 * _1499) + _1489;
        float _2201 = (_2195 * _1502) + _1493;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2202;
        float _2205 = _2202 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2201 > _2205) || ((_2201 < _2203) || ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 < _2203) || (_2199 > _2205))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2201, cbModelParam._m0[9u].z, fma(_2200, cbModelParam._m0[9u].y, _2199 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2201, cbModelParam._m0[10u].z, fma(_2200, cbModelParam._m0[10u].y, _2199 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2201, cbModelParam._m0[11u].z, fma(_2200, cbModelParam._m0[11u].y, _2199 * cbModelParam._m0[11u].x))), _1437);
            frontier_phi_21_45_ladder = _2327.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2327.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2327.x * cbModelParam._m0[1u].y;
        }
        _1518 = frontier_phi_21_45_ladder_2;
        _1520 = frontier_phi_21_45_ladder_1;
        _1522 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_628, _629, _630), _1437);
        _1518 = _1506.x * cbModelParam._m0[1u].y;
        _1520 = _1506.y * cbModelParam._m0[1u].y;
        _1522 = _1506.z * cbModelParam._m0[1u].y;
    }
    float _1526 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1526 : min(cbModelParam._m0[25u].w, _1526));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1580 = fma(_689, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681)) + cbModelParam._m0[21u].w;
        float _1584 = fma(_689, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681)) + cbModelParam._m0[22u].w;
        float _1588 = fma(_689, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681)) + cbModelParam._m0[23u].w;
        float _1591 = fma(_630, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628));
        float _1594 = fma(_630, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628));
        float _1597 = fma(_630, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628));
        float _1881;
        if (_1591 > 0.0)
        {
            _1881 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1881 = frontier_phi_33_29_ladder;
        }
        float _2218;
        if (_1594 > 0.0)
        {
            _2218 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2218 = frontier_phi_47_40_ladder;
        }
        float _2387;
        if (_1597 > 0.0)
        {
            _2387 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2387 = frontier_phi_61_56_ladder;
        }
        float _2389 = isnan(_2218) ? _1881 : (isnan(_1881) ? _2218 : min(_1881, _2218));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1591) + _1580;
        float _2395 = (_2390 * _1594) + _1584;
        float _2396 = (_2390 * _1597) + _1588;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1527);
            frontier_phi_30_61_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1616 = frontier_phi_30_61_ladder_2;
        _1618 = frontier_phi_30_61_ladder_1;
        _1620 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_628, _629, _630), _1527);
        _1616 = _1600.x * cbModelParam._m0[1u].z;
        _1618 = _1600.y * cbModelParam._m0[1u].z;
        _1620 = _1600.z * cbModelParam._m0[1u].z;
    }
    float _1632 = ((((1.0 - _649) * ((_636 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_649 * _636)) * _620;
    float _1633 = _1632 * ((cbModelParam._m0[1u].w * (_1616 - _1518)) + _1518);
    float _1634 = _1632 * ((cbModelParam._m0[1u].w * (_1618 - _1520)) + _1520);
    float _1635 = _1632 * ((cbModelParam._m0[1u].w * (_1620 - _1522)) + _1522);
    float _1638 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, _1633 * cbSceneParam._m0[91u].x));
    uvec4 _1654 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _1656 = _1654.x * 14u;
    uint _1657 = _1656 + 13u;
    float _1662 = _620 + (-1.0);
    float _1665 = (cbLight._m0[_1657].x * _1662) + 1.0;
    float _1666 = (cbLight._m0[_1657].y * _1662) + 1.0;
    uint _1667 = _1656 + 5u;
    float _1673 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
    uint _1677 = _1656 + 4u;
    float _1683 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
    uint _1687 = _1656 | 1u;
    float _1698 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_519, _520, _521));
    float _1701 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_519, _520, _521));
    float _3542 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _3553 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1706 = (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.3183098733425140380859375;
    float _1708 = (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * 0.3183098733425140380859375;
    float _1715 = ((cbLight._m0[_1667].x * _1673) * _1708) + ((cbLight._m0[_1677].x * _1683) * _1706);
    float _1716 = ((_1673 * cbLight._m0[_1667].y) * _1708) + ((_1683 * cbLight._m0[_1677].y) * _1706);
    float _1717 = ((_1673 * cbLight._m0[_1667].z) * _1708) + ((_1683 * cbLight._m0[_1677].z) * _1706);
    uint _1719 = _1656 + 8u;
    float _1732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1656].w)) * _522) * 0.949999988079071044921875);
    float _1733 = _1732 * _1732;
    float _1734 = cbLight._m0[_1656].x + _546;
    float _1735 = cbLight._m0[_1656].y + _547;
    float _1736 = cbLight._m0[_1656].z + _548;
    float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
    float _1741 = _1740 * _1734;
    float _1742 = _1740 * _1735;
    float _1743 = _1740 * _1736;
    float _1744 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1656].xyz));
    float _3564 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _1748 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _1749 = dot(vec3(_519, _520, _521), vec3(_1741, _1742, _1743));
    float _3586 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _1753 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_1741, _1742, _1743));
    float _3597 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1757 = _1733 * _1733;
    float _1761 = ((_1752 * _1752) * (_1757 + (-1.0))) + 1.0;
    float _1772 = (exp2(log2(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1773 = 1.0 - _1733;
    float _1784 = (0.5 / (((_1748 * ((_1747 * _1773) + _1733)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1773) + _1733) * _1747))) * _1747;
    float _3608 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1757 / ((_1761 * _1761) * 3.141590118408203125));
    uint _1797 = _1656 + 9u;
    float _1808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _522) * 0.949999988079071044921875);
    float _1809 = _1808 * _1808;
    float _1810 = cbLight._m0[_1687].x + _546;
    float _1811 = cbLight._m0[_1687].y + _547;
    float _1812 = cbLight._m0[_1687].z + _548;
    float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
    float _1817 = _1816 * _1810;
    float _1818 = _1816 * _1811;
    float _1819 = _1816 * _1812;
    float _1820 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1687].xyz));
    float _3619 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _1824 = dot(vec3(_519, _520, _521), vec3(_1817, _1818, _1819));
    float _3630 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1817, _1818, _1819));
    float _3641 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1809 * _1809;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1845 = (exp2(log2(1.0 - (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1846 = 1.0 - _1809;
    float _1856 = (0.5 / (((_1748 * ((_1823 * _1846) + _1809)) + 9.9999999392252902907785028219223e-09) + (((_1748 * _1846) + _1809) * _1823))) * _1823;
    float _3652 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1858 = (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    float _1868 = (((_1845 * cbLight._m0[_1797].x) * _1858) * _1673) + (((_1772 * cbLight._m0[_1719].x) * _1786) * _1683);
    float _1869 = (((_1845 * cbLight._m0[_1797].y) * _1858) * _1673) + (((_1772 * cbLight._m0[_1719].y) * _1786) * _1683);
    float _1870 = (((_1845 * cbLight._m0[_1797].z) * _1858) * _1673) + (((_1772 * cbLight._m0[_1719].z) * _1786) * _1683);
    float _1985;
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    float _1995;
    if (_1654.y == 0u)
    {
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1925;
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1925;
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1925;
        uvec4 _1940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1941 = _1940.x;
        uint _1952 = uint((float(_1940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _1941))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _1941)));
        float _1962 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1963 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        uint _1966 = uint(isnan(14.0) ? _1963 : (isnan(_1963) ? 14.0 : min(_1963, 14.0)));
        uvec4 _1971 = texelFetch(g_lightClusterGridBuffer, int(((_1966 << 2u) + (_1952 << 6u)) >> 2u));
        uint _1972 = _1971.x;
        uint _1973 = _1940.z;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        float _2087;
        float _2089;
        if (((((1u << ((_1973 >> 4u) & 15u)) + 4294967295u) & _1972) == 0u) || ((_1973 & 240u) == 0u))
        {
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
            _2087 = 0.0;
            _2089 = 0.0;
        }
        else
        {
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2088;
            float _2090;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            uint _2261 = 0u;
            uint _2270;
            bool _2271;
            for (;;)
            {
                _2270 = texelFetch(g_lightClassification, int((((_1966 << 5u) + (_1952 << 9u)) + (_2261 << 2u)) >> 2u)).x;
                _2271 = _2270 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2271)
                {
                    frontier_phi_58_pred = _2256;
                    frontier_phi_58_pred_1 = _2260;
                    frontier_phi_58_pred_2 = _2259;
                    frontier_phi_58_pred_3 = _2258;
                    frontier_phi_58_pred_4 = _2257;
                    frontier_phi_58_pred_5 = _2255;
                }
                else
                {
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    uint _2436;
                    _2430 = _2255;
                    _2431 = _2256;
                    _2432 = _2257;
                    _2433 = _2258;
                    _2434 = _2259;
                    _2435 = _2260;
                    _2436 = _2270;
                    float _2336;
                    float _2337;
                    float _2338;
                    float _2339;
                    float _2340;
                    float _2341;
                    for (;;)
                    {
                        uint _2440 = uint(findLSB(_2436)) + (_2261 << 5u);
                        uint _2437 = (_2436 + 4294967295u) & _2436;
                        uint _2442 = _2440 * 48u;
                        vec4 _2456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2442)).x, texelFetch(g_PointLightRenderingBuffer, int(_2442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2442 + 3u)).x));
                        uint _2462 = (_2440 * 48u) + 4u;
                        vec4 _2475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2462)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 3u)).x));
                        uint _2481 = (_2440 * 48u) + 8u;
                        vec3 _2492 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2481)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 2u)).x));
                        float _2496 = _2456.x - _1926;
                        float _2497 = _2456.y - _1927;
                        float _2498 = _2456.z - _1928;
                        float _2499 = dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498));
                        float _2502 = inversesqrt(_2499);
                        float _2503 = _2502 * _2496;
                        float _2504 = _2502 * _2497;
                        float _2505 = _2502 * _2498;
                        float _2506 = dot(vec3(_575, _578, _581), vec3(_2503, _2504, _2505));
                        float _2511 = 1.0 - (_2499 * _2456.w);
                        float _3673 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
                        float _2512 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                        float _2513 = sqrt(_2499) * _2475.w;
                        float _2516 = 1.39999997615814208984375 / (_2513 + 1.39999997615814208984375);
                        float _2517 = _2516 * _2516;
                        float _2520 = ((1.0 - _2517) * _2506) + _2517;
                        float _2523 = _2513 * _2513;
                        float _2527 = ((isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0))) * _2512) / ((_2523 * 0.699999988079071044921875) + 1.0);
                        float _2531 = (-0.0) - _1926;
                        float _2532 = (-0.0) - _1927;
                        float _2533 = (-0.0) - _1928;
                        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
                        float _2538 = _2537 * _2531;
                        float _2539 = _2537 * _2532;
                        float _2540 = _2537 * _2533;
                        float _2548 = exp2(log2(1.0 / ((_2523 * 3.5) + 5.0)) * 0.25);
                        float _2549 = 1.0 - _636;
                        float _2556 = sqrt(1.0 - ((1.0 - (_2549 * _2549)) * (1.0 - (_2548 * _2548))));
                        float _2557 = _2556 * _2556;
                        float _2558 = _2557 * _2557;
                        float _2559 = _2538 + _2503;
                        float _2560 = _2539 + _2504;
                        float _2561 = _2540 + _2505;
                        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
                        float _2569 = dot(vec3(_575, _578, _581), vec3(_2538, _2539, _2540));
                        float _3689 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                        float _2572 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
                        float _2573 = dot(vec3(_575, _578, _581), vec3(_2565 * _2559, _2565 * _2560, _2565 * _2561));
                        float _3700 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2576 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
                        float _2580 = ((_2576 * _2576) * (_2558 + (-1.0))) + 1.0;
                        float _2581 = _2516 * _2557;
                        float _2582 = _2581 * _2581;
                        float _2585 = ((1.0 - _2582) * _2506) + _2582;
                        float _3711 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2586 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
                        float _2587 = 1.0 - _2557;
                        float _2597 = (0.5 / (((_2586 * ((_2572 * _2587) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2587) + _2557) * _2572))) * _2586;
                        float _3722 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                        float _2608 = (((_2558 * 3.1415927410125732421875) * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) / ((_2580 * _2580) * ((_2523 * 2.1991131305694580078125) + 3.141590118408203125))) * _2512;
                        _2339 = (_2527 * _2475.x) + _2433;
                        _2340 = (_2527 * _2475.y) + _2434;
                        _2341 = (_2527 * _2475.z) + _2435;
                        _2336 = (_2608 * _2492.x) + _2430;
                        _2337 = (_2608 * _2492.y) + _2431;
                        _2338 = (_2608 * _2492.z) + _2432;
                        if (_2437 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2430 = _2336;
                            _2431 = _2337;
                            _2432 = _2338;
                            _2433 = _2339;
                            _2434 = _2340;
                            _2435 = _2341;
                            _2436 = _2437;
                        }
                    }
                    frontier_phi_58_pred = _2337;
                    frontier_phi_58_pred_1 = _2341;
                    frontier_phi_58_pred_2 = _2340;
                    frontier_phi_58_pred_3 = _2339;
                    frontier_phi_58_pred_4 = _2338;
                    frontier_phi_58_pred_5 = _2336;
                }
                _2082 = frontier_phi_58_pred;
                _2090 = frontier_phi_58_pred_1;
                _2088 = frontier_phi_58_pred_2;
                _2086 = frontier_phi_58_pred_3;
                _2084 = frontier_phi_58_pred_4;
                _2080 = frontier_phi_58_pred_5;
                uint _2262 = _2261 + 1u;
                if (_2262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2255 = _2080;
                    _2256 = _2082;
                    _2257 = _2084;
                    _2258 = _2086;
                    _2259 = _2088;
                    _2260 = _2090;
                    _2261 = _2262;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
            _2087 = _2088;
            _2089 = _2090;
        }
        uvec4 _2093 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2094 = _2093.z;
        uint _2096 = (_2094 >> 8u) & 15u;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        if (((4294967295u << _2096) & _1972) == 0u)
        {
            _2223 = _2079;
            _2225 = _2081;
            _2227 = _2083;
            _2229 = _2085;
            _2231 = _2087;
            _2233 = _2089;
        }
        else
        {
            float _2248 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float _2249 = _2248 * _1926;
            float _2250 = _2248 * _1927;
            float _2251 = _2248 * _1928;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2096 < ((_2094 >> 12u) & 15u))
            {
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2413 = _2079;
                float _2414 = _2081;
                float _2415 = _2083;
                float _2416 = _2085;
                float _2417 = _2087;
                float _2418 = _2089;
                uint _2419 = _2096;
                uint _2428;
                bool _2429;
                for (;;)
                {
                    _2428 = texelFetch(g_lightClassification, int((((_1966 << 5u) + (_1952 << 9u)) + (_2419 << 2u)) >> 2u)).x;
                    _2429 = _2428 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2429)
                    {
                        frontier_phi_67_pred = _2418;
                        frontier_phi_67_pred_1 = _2417;
                        frontier_phi_67_pred_2 = _2416;
                        frontier_phi_67_pred_3 = _2415;
                        frontier_phi_67_pred_4 = _2414;
                        frontier_phi_67_pred_5 = _2413;
                    }
                    else
                    {
                        float _2634;
                        float _2635;
                        float _2636;
                        float _2637;
                        float _2638;
                        float _2639;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2647 = _2413;
                        float _2648 = _2414;
                        float _2649 = _2415;
                        float _2650 = _2416;
                        float _2651 = _2417;
                        float _2652 = _2418;
                        uint _2653 = _2428;
                        uint _2654;
                        vec4 _2679;
                        float _2680;
                        vec4 _2695;
                        vec3 _2707;
                        vec4 _2722;
                        vec4 _2737;
                        float _2783;
                        bool _2784;
                        for (;;)
                        {
                            uint _2664 = ((_2419 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2653));
                            _2654 = (_2653 + 4294967295u) & _2653;
                            uint _2666 = _2664 * 40u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            _2680 = _2679.w;
                            uint _2682 = (_2664 * 40u) + 4u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2697 = (_2664 * 40u) + 8u;
                            _2707 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 2u)).x));
                            uint _2709 = (_2664 * 40u) + 16u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2724 = (_2664 * 40u) + 20u;
                            _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            uint _2739 = (_2664 * 40u) + 24u;
                            vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 3u)).x));
                            uint _2758 = (_2664 * 40u) + 28u;
                            vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            _2783 = fma(_1928, _2771.z, fma(_1927, _2771.y, _2771.x * _1926)) + _2771.w;
                            _2784 = !((fma(_1928, _2752.z, fma(_1927, _2752.y, _2752.x * _1926)) + _2752.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2784)
                            {
                                float _2811 = _2679.x - _1926;
                                float _2812 = _2679.y - _1927;
                                float _2813 = _2679.z - _1928;
                                float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                                float _2817 = inversesqrt(_2814);
                                float _2818 = _2817 * _2811;
                                float _2819 = _2817 * _2812;
                                float _2820 = _2817 * _2813;
                                float _2824 = 1.0 - (_2814 / (_2680 * _2680));
                                float _3733 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                                float _2825 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
                                float _2829 = sqrt(_2814) * _2695.w;
                                float _2831 = 1.39999997615814208984375 / (_2829 + 1.39999997615814208984375);
                                float _2832 = _2831 * _2831;
                                float _2835 = ((1.0 - _2832) * dot(vec3(_2818, _2819, _2820), vec3(_575, _578, _581))) + _2832;
                                float _2838 = _2829 * _2829;
                                float _2842 = (fma(_1928, _2722.z, fma(_1927, _2722.y, _2722.x * _1926)) + _2722.w) / _2783;
                                float _2843 = (fma(_1928, _2737.z, fma(_1927, _2737.y, _2737.x * _1926)) + _2737.w) / _2783;
                                float _2847 = 1.0 - dot(vec2(_2842, _2843), vec2(_2842, _2843));
                                float _3749 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                                float _2848 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
                                float _2849 = _2848 * (((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2825) / ((_2838 * 0.699999988079071044921875) + 1.0));
                                float _2861 = exp2(log2(1.0 / ((_2838 * 3.5) + 5.0)) * 0.25);
                                float _2862 = 1.0 - _636;
                                float _2869 = sqrt(1.0 - ((1.0 - (_2862 * _2862)) * (1.0 - (_2861 * _2861))));
                                float _2870 = _2869 * _2869;
                                float _2871 = _2870 * _2870;
                                float _2872 = _2818 - _2249;
                                float _2873 = _2819 - _2250;
                                float _2874 = _2820 - _2251;
                                float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
                                float _2882 = dot(vec3(_575, _578, _581), vec3((-0.0) - _2249, (-0.0) - _2250, (-0.0) - _2251));
                                float _3760 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                                float _2885 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                                float _2886 = dot(vec3(_575, _578, _581), vec3(_2878 * _2872, _2878 * _2873, _2878 * _2874));
                                float _3771 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2889 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                                float _2893 = ((_2889 * _2889) * (_2871 + (-1.0))) + 1.0;
                                float _2894 = _2831 * _2870;
                                float _2895 = _2894 * _2894;
                                float _2901 = ((1.0 - _2895) * dot(vec3(_575, _578, _581), vec3(_2818, _2819, _2820))) + _2895;
                                float _3782 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2902 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
                                float _2903 = 1.0 - _2870;
                                float _2913 = (0.5 / (((_2902 * ((_2885 * _2903) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2902 * _2903) + _2870) * _2885))) * _2902;
                                float _3793 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                                float _2923 = (_2848 * _2825) * (((_2871 * 3.1415927410125732421875) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) / ((_2893 * _2893) * ((_2838 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2849 * _2695.z;
                                frontier_phi_73_pred_1 = _2849 * _2695.y;
                                frontier_phi_73_pred_2 = _2849 * _2695.x;
                                frontier_phi_73_pred_3 = _2923 * _2707.z;
                                frontier_phi_73_pred_4 = _2923 * _2707.y;
                                frontier_phi_73_pred_5 = _2923 * _2707.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2932 = frontier_phi_73_pred;
                            _2931 = frontier_phi_73_pred_1;
                            _2930 = frontier_phi_73_pred_2;
                            _2929 = frontier_phi_73_pred_3;
                            _2928 = frontier_phi_73_pred_4;
                            _2927 = frontier_phi_73_pred_5;
                            _2637 = _2930 + _2650;
                            _2638 = _2931 + _2651;
                            _2639 = _2932 + _2652;
                            _2634 = _2927 + _2647;
                            _2635 = _2928 + _2648;
                            _2636 = _2929 + _2649;
                            if (_2654 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2647 = _2634;
                                _2648 = _2635;
                                _2649 = _2636;
                                _2650 = _2637;
                                _2651 = _2638;
                                _2652 = _2639;
                                _2653 = _2654;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2639;
                        frontier_phi_67_pred_1 = _2638;
                        frontier_phi_67_pred_2 = _2637;
                        frontier_phi_67_pred_3 = _2636;
                        frontier_phi_67_pred_4 = _2635;
                        frontier_phi_67_pred_5 = _2634;
                    }
                    _2234 = frontier_phi_67_pred;
                    _2232 = frontier_phi_67_pred_1;
                    _2230 = frontier_phi_67_pred_2;
                    _2228 = frontier_phi_67_pred_3;
                    _2226 = frontier_phi_67_pred_4;
                    _2224 = frontier_phi_67_pred_5;
                    uint _2420 = _2419 + 1u;
                    if (_2420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2413 = _2224;
                        _2414 = _2226;
                        _2415 = _2228;
                        _2416 = _2230;
                        _2417 = _2232;
                        _2418 = _2234;
                        _2419 = _2420;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2230;
                frontier_phi_49_50_ladder_1 = _2234;
                frontier_phi_49_50_ladder_2 = _2232;
                frontier_phi_49_50_ladder_3 = _2228;
                frontier_phi_49_50_ladder_4 = _2226;
                frontier_phi_49_50_ladder_5 = _2224;
            }
            else
            {
                frontier_phi_49_50_ladder = _2085;
                frontier_phi_49_50_ladder_1 = _2089;
                frontier_phi_49_50_ladder_2 = _2087;
                frontier_phi_49_50_ladder_3 = _2083;
                frontier_phi_49_50_ladder_4 = _2081;
                frontier_phi_49_50_ladder_5 = _2079;
            }
            _2223 = frontier_phi_49_50_ladder_5;
            _2225 = frontier_phi_49_50_ladder_4;
            _2227 = frontier_phi_49_50_ladder_3;
            _2229 = frontier_phi_49_50_ladder;
            _2231 = frontier_phi_49_50_ladder_2;
            _2233 = frontier_phi_49_50_ladder_1;
        }
        float _2238 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
        _1985 = (_2238 * _2229) + _1715;
        _1987 = (_2238 * _2231) + _1716;
        _1989 = (_2238 * _2233) + _1717;
        _1991 = ((_2223 * 0.039999999105930328369140625) * _2238) + _1868;
        _1993 = ((_2225 * 0.039999999105930328369140625) * _2238) + _1869;
        _1995 = ((_2227 * 0.039999999105930328369140625) * _2238) + _1870;
    }
    else
    {
        _1985 = _1715;
        _1987 = _1716;
        _1989 = _1717;
        _1991 = _1868;
        _1993 = _1869;
        _1995 = _1870;
    }
    uint _2001 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _3809 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3820 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3831 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2026 = (((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1985 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _620))) + ((_1991 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1426)) * cbPerFrame._m0[3u].x)) + (((_450 - (_450 * _284)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2001].x);
    float _2028 = ((((_451 - (_451 * _284)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2001].y) + ((_1993 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1426)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1987 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _620)));
    float _2030 = (((cbMtdParam._m0[9u].z * (_452 - (_452 * _284))) * cbInstanceData._m0[_2001].z) + ((_1995 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1426)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1989 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _620)));
    uint _2034 = _594 + 6u;
    float _2042 = _554 / cbSceneParam._m0[86u].x;
    float _2043 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2057 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2042, _2043, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2059 = _2057.x;
    float _2060 = _2057.y;
    float _2061 = _2057.z;
    float _2062 = _2057.w;
    float _2142;
    float _2144;
    float _2146;
    float _2148;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2104 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2105 = _2104 / _541;
        float _2116 = _2105 * _257;
        float _2117 = _258 * _2105;
        float _2118 = (-0.0) - _2117;
        float _2119 = _2105 * _259;
        float _2121 = (cbSceneParam._m0[77u].w * _2118) / _2104;
        float _2122 = _2121 + cbSceneParam._m0[79u].w;
        float _2123 = cbSceneParam._m0[79u].w - _2117;
        float _2129 = sqrt(((_2116 * _2116) + (_2117 * _2117)) + (_2119 * _2119));
        float _2132 = (1.0 - (cbSceneParam._m0[77u].w / _2104)) * _2129;
        float _2138 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2140 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2349;
        if (abs((_2118 - _2121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2349 = ((((_2122 > 0.0) ? exp2(_2138 * _2122) : (2.0 - exp2(_2140 * _2122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2132;
        }
        else
        {
            float _2284 = 1.0 / cbSceneParam._m0[80u].x;
            float _2285 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : max(_2122, _2123));
            float _2286 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : min(_2122, _2123));
            float _2295 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : min(_2285, 0.0));
            float _2296 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : min(_2286, 0.0));
            _2349 = ((abs(_2129 / _2118) * cbSceneParam._m0[80u].y) * ((((_2295 - _2296) * 2.0) - ((exp2(_2138 * (isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0)))) - exp2(_2138 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0))))) * _2284)) - ((exp2(_2140 * _2295) - exp2(_2140 * _2296)) * _2284))) + (_2132 * cbSceneParam._m0[80u].z);
        }
        vec4 _2351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2042, _2043, 1.0), 0.0);
        float _2360 = exp2((_2349 * (-1.44269502162933349609375)) * (1.0 - _2351.w));
        float _2361 = log2(_2360);
        float _2377 = log2(_2062);
        _2142 = (exp2(_2377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2361 * cbSceneParam._m0[78u].x)) * _2351.x) / cbSceneParam._m0[78u].x)) + _2059;
        _2144 = (exp2(_2377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2361 * cbSceneParam._m0[78u].y)) * _2351.y) / cbSceneParam._m0[78u].y)) + _2060;
        _2146 = (exp2(_2377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2361 * cbSceneParam._m0[78u].z)) * _2351.z) / cbSceneParam._m0[78u].z)) + _2061;
        _2148 = _2360 * _2062;
    }
    else
    {
        _2142 = _2059;
        _2144 = _2060;
        _2146 = _2061;
        _2148 = _2062;
    }
    float _2160 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2161 = _2160 == 3.0;
    float _2162 = log2(_2148);
    float _2169 = exp2(_2162 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
    float _2170 = exp2(_2162 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)));
    float _2171 = exp2(_2162 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)));
    float _2180 = (_2160 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2180 * (_2161 ? _2169 : (_2169 + (cbSceneParam._m0[72u].w * _2142)));
    SV_Target.y = _2180 * (_2161 ? _2170 : (_2170 + (cbSceneParam._m0[72u].w * _2144)));
    SV_Target.z = _2180 * (_2161 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2146)));
    SV_Target.w = cbInstanceData._m0[_2034].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2034].w;
}


