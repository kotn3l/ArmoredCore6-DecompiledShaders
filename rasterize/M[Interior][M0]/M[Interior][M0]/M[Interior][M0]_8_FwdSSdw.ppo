#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _340;
uint _1788;
uint _1789;
uint _1790;
uint _2024;
uint _2025;
uint _2026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _168 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _169 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _174 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _175 = _174 * _167;
    float _176 = _174 * _168;
    float _177 = _174 * _169;
    float _181 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _185 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _186 = _185 * TANGENT.x;
    float _187 = _185 * TANGENT.y;
    float _188 = _185 * TANGENT.z;
    float _233 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _243 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _233);
    float _244 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _233);
    float _245 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _233);
    float _270 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _277 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _286 = cbMtdParam._m0[23u].x + _243;
    float _287 = cbMtdParam._m0[23u].y + _244;
    float _288 = cbMtdParam._m0[23u].z + _245;
    float _305 = (-0.0) - dot(vec3(_286, _287, _288), vec3(_270 * _175, _270 * _176, _270 * _177));
    float _306 = (-0.0) - dot(vec3(_286, _287, _288), vec3(_277 * _186, _277 * _187, _277 * _188));
    float _307 = (-0.0) - dot(vec3(_286, _287, _288), vec3((-0.0) - (NORMAL.x * _181), (-0.0) - (NORMAL.y * _181), (-0.0) - (NORMAL.z * _181)));
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _311 * _307;
    float _314 = (cbMtdParam._m0[19u].w * _305) * _311;
    float _316 = (cbMtdParam._m0[20u].x * _306) * _311;
    float _319 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _320 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _338;
    float _341;
    float _343;
    if (_314 > 0.0)
    {
        float _324 = (1.0 - _319) / _314;
        _338 = _324;
        _341 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_324 * _312)) * 0.16666667163372039794921875;
        _343 = (fract((_324 * _316) + _320) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_314 < 0.0)
        {
            float _339 = ((-0.0) - _319) / _314;
            frontier_phi_3_2_ladder = (fract(_339 * _312) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _339;
            frontier_phi_3_2_ladder_2 = (fract((_339 * _316) + _320) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _340;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _338 = frontier_phi_3_2_ladder_1;
        _341 = frontier_phi_3_2_ladder;
        _343 = frontier_phi_3_2_ladder_2;
    }
    float _369;
    float _371;
    float _373;
    if (_316 > 0.0)
    {
        float _356 = (1.0 - _320) / _316;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_356 < _338)
        {
            frontier_phi_8_5_ladder = _356;
            frontier_phi_8_5_ladder_1 = (fract(_356 * _312) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_2 = (fract((_356 * _314) + _319) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_8_5_ladder = _338;
            frontier_phi_8_5_ladder_1 = _343;
            frontier_phi_8_5_ladder_2 = _341;
        }
        _369 = frontier_phi_8_5_ladder;
        _371 = frontier_phi_8_5_ladder_2;
        _373 = frontier_phi_8_5_ladder_1;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_316 < 0.0)
        {
            float _370 = ((-0.0) - _320) / _316;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_370 < _338)
            {
                frontier_phi_8_6_ladder_9_ladder = _370;
                frontier_phi_8_6_ladder_9_ladder_1 = fract(_370 * _312) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = (fract((_370 * _314) + _319) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _338;
                frontier_phi_8_6_ladder_9_ladder_1 = _343;
                frontier_phi_8_6_ladder_9_ladder_2 = _341;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _338;
            frontier_phi_8_6_ladder_1 = _343;
            frontier_phi_8_6_ladder_2 = _341;
        }
        _369 = frontier_phi_8_6_ladder;
        _371 = frontier_phi_8_6_ladder_2;
        _373 = frontier_phi_8_6_ladder_1;
    }
    float _377 = (_312 > 0.0) ? (cbMtdParam._m0[16u].w / _312) : 5000.0;
    float _390;
    float _391;
    if (_377 < _369)
    {
        _390 = ((_319 + cbMtdParam._m0[17u].x) + (_377 * _314)) * 0.16666667163372039794921875;
        _391 = (((_377 * _316) + _320) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _390 = _371;
        _391 = _373;
    }
    vec4 _394 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_390, _391));
    float _418 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _422 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _423 = _243 * _422;
    float _424 = _244 * _422;
    float _425 = _245 * _422;
    float _431 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _432 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _441 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_431 * cbSceneParam._m0[86u].x, _432 * cbSceneParam._m0[86u].y));
    float _444 = _441.x * TEXCOORD.z;
    float _445 = (-0.0) - _423;
    float _446 = (-0.0) - _424;
    float _447 = (-0.0) - _425;
    float _469 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _617;
    float _618;
    float _619;
    float _620;
    float _621;
    float _622;
    float _623;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _539 = (cbModelParam._m0[37u].x * ((((fma(_477, cbModelParam._m0[26u].z, fma(_473, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _469)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _541 = (cbModelParam._m0[37u].y * ((((fma(_477, cbModelParam._m0[27u].z, fma(_473, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _469)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _542 = (((((fma(_477, cbModelParam._m0[28u].z, fma(_473, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _469)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        float _579 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _590 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _600 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _610 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_566.x + (-0.5));
        float _612 = _610 * (_566.y + (-0.5));
        float _613 = _610 * (_566.z + (-0.5));
        _617 = _579 * (_545.z + (-0.5));
        _618 = _579 * (_545.y + (-0.5));
        _619 = _579 * (_545.x + (-0.5));
        _620 = _590 * (_552.z + (-0.5));
        _621 = _590 * (_552.y + (-0.5));
        _622 = _590 * (_552.x + (-0.5));
        _623 = _600 * (_559.z + (-0.5));
        _624 = _600 * (_559.y + (-0.5));
        _625 = _600 * (_559.x + (-0.5));
        _626 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        _627 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        _628 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    }
    else
    {
        _617 = _340;
        _618 = _340;
        _619 = _340;
        _620 = _340;
        _621 = _340;
        _622 = _340;
        _623 = _340;
        _624 = _340;
        _625 = _340;
        _626 = _340;
        _627 = _340;
        _628 = _340;
    }
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _682 = (cbModelParam._m0[38u].x * ((((fma(_477, cbModelParam._m0[30u].z, fma(_473, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _469)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _683 = (cbModelParam._m0[38u].y * ((((fma(_477, cbModelParam._m0[31u].z, fma(_473, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _469)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _684 = (((((fma(_477, cbModelParam._m0[32u].z, fma(_473, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _469)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        float _719 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _729 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _739 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _749 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_707.x + (-0.5));
        float _751 = _749 * (_707.y + (-0.5));
        float _752 = _749 * (_707.z + (-0.5));
        _756 = _719 * (_686.z + (-0.5));
        _757 = _719 * (_686.y + (-0.5));
        _758 = _719 * (_686.x + (-0.5));
        _759 = _729 * (_693.z + (-0.5));
        _760 = _729 * (_693.y + (-0.5));
        _761 = _729 * (_693.x + (-0.5));
        _762 = _739 * (_700.z + (-0.5));
        _763 = _739 * (_700.y + (-0.5));
        _764 = _739 * (_700.x + (-0.5));
        _765 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        _766 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        _767 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    }
    else
    {
        _756 = _340;
        _757 = _340;
        _758 = _340;
        _759 = _340;
        _760 = _340;
        _761 = _340;
        _762 = _340;
        _763 = _340;
        _764 = _340;
        _765 = _340;
        _766 = _340;
        _767 = _340;
    }
    float _782 = _423 * (-0.5);
    float _783 = _424 * (-0.5);
    float _784 = _425 * (-0.5);
    float _785 = dot(vec4(_782, _783, _784, 1.0), vec4(_758, _761, _764, _767));
    float _788 = dot(vec4(_782, _783, _784, 1.0), vec4(_757, _760, _763, _766));
    float _791 = dot(vec4(_782, _783, _784, 1.0), vec4(_756, _759, _762, _765));
    float _826;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _798 = dot(vec4(_782, _783, _784, 1.0), vec4(_617, _620, _623, _626));
        float _802 = dot(vec4(_782, _783, _784, 1.0), vec4(_618, _621, _624, _627));
        float _806 = dot(vec4(_782, _783, _784, 1.0), vec4(_619, _622, _625, _628));
        float _813 = dot(vec4(cbModelParam._m0[39u]), vec4(_782, _783, _784, 1.0));
        _826 = dot(vec3(isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)), isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)), isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_813) ? 0.0 : (isnan(0.0) ? _813 : max(0.0, _813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _826 = 1.0;
    }
    float _837;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _828 = dot(vec4(cbModelParam._m0[40u]), vec4(_782, _783, _784, 1.0));
        _837 = dot(vec3(isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)), isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)), isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_828) ? 0.0 : (isnan(0.0) ? _828 : max(0.0, _828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _837 = 1.0;
    }
    float _841 = (_837 * cbModelParam._m0[1u].x) + (_826 * (1.0 - cbModelParam._m0[1u].x));
    float _848 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _931;
    float _933;
    float _935;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _898 = fma(_477, cbModelParam._m0[13u].z, fma(_473, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469)) + cbModelParam._m0[13u].w;
        float _902 = fma(_477, cbModelParam._m0[14u].z, fma(_473, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469)) + cbModelParam._m0[14u].w;
        float _906 = fma(_477, cbModelParam._m0[15u].z, fma(_473, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469)) + cbModelParam._m0[15u].w;
        float _909 = fma(_447, cbModelParam._m0[13u].z, fma(_446, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _445));
        float _912 = fma(_447, cbModelParam._m0[14u].z, fma(_446, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _445));
        float _915 = fma(_447, cbModelParam._m0[15u].z, fma(_446, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _445));
        float _941;
        if (_909 > 0.0)
        {
            _941 = abs((1.0 - _898) / _909);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_909 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_898 + 1.0) / _909);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _941 = frontier_phi_26_24_ladder;
        }
        float _1244;
        if (_912 > 0.0)
        {
            _1244 = abs((1.0 - _902) / _912);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_912 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_902 + 1.0) / _912);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1244 = frontier_phi_35_31_ladder;
        }
        float _1541;
        if (_915 > 0.0)
        {
            _1541 = abs((1.0 - _906) / _915);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_915 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_906 + 1.0) / _915);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1541 = frontier_phi_49_42_ladder;
        }
        float _1543 = isnan(_1244) ? _941 : (isnan(_941) ? _1244 : min(_941, _1244));
        float _1544 = isnan(_1541) ? _1543 : (isnan(_1543) ? _1541 : min(_1543, _1541));
        float _1548 = (_1544 * _909) + _898;
        float _1549 = (_1544 * _912) + _902;
        float _1550 = (_1544 * _915) + _906;
        float _1551 = _1544 * 9.9999997473787516355514526367188e-05;
        float _1552 = (-1.0) - _1551;
        float _1554 = _1551 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1550 > _1554) || ((_1550 < _1552) || ((_1549 > _1554) || ((_1549 < _1552) || ((_1548 < _1552) || (_1548 > _1554))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1550, cbModelParam._m0[9u].z, fma(_1549, cbModelParam._m0[9u].y, _1548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1550, cbModelParam._m0[10u].z, fma(_1549, cbModelParam._m0[10u].y, _1548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1550, cbModelParam._m0[11u].z, fma(_1549, cbModelParam._m0[11u].y, _1548 * cbModelParam._m0[11u].x))), _848);
            frontier_phi_25_49_ladder = _1661.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _1661.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _1661.x * cbModelParam._m0[1u].y;
        }
        _931 = frontier_phi_25_49_ladder_2;
        _933 = frontier_phi_25_49_ladder_1;
        _935 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_445, _446, _447), _848);
        _931 = _919.x * cbModelParam._m0[1u].y;
        _933 = _919.y * cbModelParam._m0[1u].y;
        _935 = _919.z * cbModelParam._m0[1u].y;
    }
    float _938 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1029;
    float _1031;
    float _1033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _993 = fma(_477, cbModelParam._m0[21u].z, fma(_473, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469)) + cbModelParam._m0[21u].w;
        float _997 = fma(_477, cbModelParam._m0[22u].z, fma(_473, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469)) + cbModelParam._m0[22u].w;
        float _1001 = fma(_477, cbModelParam._m0[23u].z, fma(_473, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469)) + cbModelParam._m0[23u].w;
        float _1004 = fma(_447, cbModelParam._m0[21u].z, fma(_446, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _445));
        float _1007 = fma(_447, cbModelParam._m0[22u].z, fma(_446, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _445));
        float _1010 = fma(_447, cbModelParam._m0[23u].z, fma(_446, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _445));
        float _1249;
        if (_1004 > 0.0)
        {
            _1249 = abs((1.0 - _993) / _1004);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1004 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_993 + 1.0) / _1004);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1249 = frontier_phi_37_33_ladder;
        }
        float _1567;
        if (_1007 > 0.0)
        {
            _1567 = abs((1.0 - _997) / _1007);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1007 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_997 + 1.0) / _1007);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1567 = frontier_phi_51_44_ladder;
        }
        float _1718;
        if (_1010 > 0.0)
        {
            _1718 = abs((1.0 - _1001) / _1010);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1010 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1001 + 1.0) / _1010);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _1718 = frontier_phi_65_60_ladder;
        }
        float _1720 = isnan(_1567) ? _1249 : (isnan(_1249) ? _1567 : min(_1249, _1567));
        float _1721 = isnan(_1718) ? _1720 : (isnan(_1720) ? _1718 : min(_1720, _1718));
        float _1725 = (_1721 * _1004) + _993;
        float _1726 = (_1721 * _1007) + _997;
        float _1727 = (_1721 * _1010) + _1001;
        float _1728 = _1721 * 9.9999997473787516355514526367188e-05;
        float _1729 = (-1.0) - _1728;
        float _1731 = _1728 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_1727 > _1731) || ((_1727 < _1729) || ((_1726 > _1731) || ((_1726 < _1729) || ((_1725 < _1729) || (_1725 > _1731))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1727, cbModelParam._m0[17u].z, fma(_1726, cbModelParam._m0[17u].y, _1725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1727, cbModelParam._m0[18u].z, fma(_1726, cbModelParam._m0[18u].y, _1725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1727, cbModelParam._m0[19u].z, fma(_1726, cbModelParam._m0[19u].y, _1725 * cbModelParam._m0[19u].x))), _938);
            frontier_phi_34_65_ladder = _1887.z * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _1887.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _1887.x * cbModelParam._m0[1u].z;
        }
        _1029 = frontier_phi_34_65_ladder_2;
        _1031 = frontier_phi_34_65_ladder_1;
        _1033 = frontier_phi_34_65_ladder;
    }
    else
    {
        vec4 _1013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_445, _446, _447), _938);
        _1029 = _1013.x * cbModelParam._m0[1u].z;
        _1031 = _1013.y * cbModelParam._m0[1u].z;
        _1033 = _1013.z * cbModelParam._m0[1u].z;
    }
    float _1045 = _444 * 0.01200000010430812835693359375;
    float _1047 = _1045 * ((cbModelParam._m0[1u].w * (_1029 - _931)) + _931);
    float _1048 = _1045 * ((cbModelParam._m0[1u].w * (_1031 - _933)) + _933);
    float _1049 = _1045 * ((cbModelParam._m0[1u].w * (_1033 - _935)) + _935);
    float _1070 = fma(_1049, cbSceneParam._m0[89u].z, fma(_1048, cbSceneParam._m0[89u].y, _1047 * cbSceneParam._m0[89u].x));
    float _1073 = fma(_1049, cbSceneParam._m0[90u].z, fma(_1048, cbSceneParam._m0[90u].y, _1047 * cbSceneParam._m0[90u].x));
    float _1076 = fma(_1049, cbSceneParam._m0[91u].z, fma(_1048, cbSceneParam._m0[91u].y, _1047 * cbSceneParam._m0[91u].x));
    vec4 _1084 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_431, _432));
    float _1086 = _1084.w;
    uint _1102 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1107 = floatBitsToUint(cbInstanceData._m0[_1102 + 5u]);
    uint _1109 = _1107.x * 14u;
    uint _1110 = _1109 + 13u;
    float _1115 = _444 + (-1.0);
    float _1119 = (cbLight._m0[_1110].x * _1115) + 1.0;
    float _1120 = (cbLight._m0[_1110].y * _1115) + 1.0;
    uint _1121 = _1109 + 8u;
    float _1132 = cbLight._m0[_1109].x + _423;
    float _1133 = cbLight._m0[_1109].y + _424;
    float _1134 = cbLight._m0[_1109].z + _425;
    float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
    float _1142 = dot(vec3(0.0), vec3(cbLight._m0[_1109].xyz));
    float _2367 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
    float _1146 = dot(vec3(0.0), vec3(_423, _424, _425));
    float _2378 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
    float _1150 = dot(vec3(cbLight._m0[_1109].xyz), vec3(_1132 * _1138, _1133 * _1138, _1134 * _1138));
    float _2389 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1161 = (exp2(log2(1.0 - (isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1167 = (0.5 / ((_1145 + 9.9999999392252902907785028219223e-09) + _1149)) * _1145;
    float _2400 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = (isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0))) * 0.31831014156341552734375;
    float _1171 = isnan(1.0) ? _1119 : (isnan(_1119) ? 1.0 : min(_1119, 1.0));
    uint _1184 = _1109 + 9u;
    uint _1190 = _1109 | 1u;
    float _1196 = cbLight._m0[_1190].x + _423;
    float _1197 = cbLight._m0[_1190].y + _424;
    float _1198 = cbLight._m0[_1190].z + _425;
    float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
    float _1206 = dot(vec3(0.0), vec3(cbLight._m0[_1190].xyz));
    float _2416 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1209 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
    float _1210 = dot(vec3(cbLight._m0[_1190].xyz), vec3(_1196 * _1202, _1197 * _1202, _1198 * _1202));
    float _2427 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1219 = (exp2(log2(1.0 - (isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1223 = (0.5 / ((_1209 + 9.9999999392252902907785028219223e-09) + _1149)) * _1209;
    float _2438 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _1225 = (isnan(1.0) ? _2438 : (isnan(_2438) ? 1.0 : min(_2438, 1.0))) * 0.31831014156341552734375;
    float _1226 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
    float _1236 = (((_1219 * cbLight._m0[_1184].x) * _1225) * _1226) + ((((cbLight._m0[_1121].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1086))) * _1161) * _1169) * _1171);
    float _1237 = (((_1219 * cbLight._m0[_1184].y) * _1225) * _1226) + ((((cbLight._m0[_1121].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1086))) * _1161) * _1169) * _1171);
    float _1238 = (((_1219 * cbLight._m0[_1184].z) * _1225) * _1226) + ((((cbLight._m0[_1121].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1086))) * _1161) * _1169) * _1171);
    float _1356;
    float _1358;
    float _1360;
    if (_1107.y == 0u)
    {
        float _1294 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1295 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1294;
        float _1296 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1294;
        float _1297 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1294;
        uvec4 _1309 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1310 = _1309.x;
        uint _1321 = uint((float(_1309.y) * floor(float(uint(cbSceneParam._m0[85u].y * _432) / _1310))) + floor(float(uint(cbSceneParam._m0[85u].x * _431) / _1310)));
        float _1331 = (log2(_1297 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1332 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        uint _1335 = uint(isnan(14.0) ? _1332 : (isnan(_1332) ? 14.0 : min(_1332, 14.0)));
        uvec4 _1341 = texelFetch(g_lightClusterGridBuffer, int(((_1335 << 2u) + (_1321 << 6u)) >> 2u));
        uint _1342 = _1341.x;
        uint _1343 = _1309.z;
        float _1433;
        float _1435;
        float _1437;
        if (((((1u << ((_1343 >> 4u) & 15u)) + 4294967295u) & _1342) == 0u) || ((_1343 & 240u) == 0u))
        {
            _1433 = 0.0;
            _1435 = 0.0;
            _1437 = 0.0;
        }
        else
        {
            float _1434;
            float _1436;
            float _1438;
            float _1592 = 0.0;
            float _1593 = 0.0;
            float _1594 = 0.0;
            uint _1595 = 0u;
            uint _1604;
            bool _1605;
            for (;;)
            {
                _1604 = texelFetch(g_lightClassification, int((((_1335 << 5u) + (_1321 << 9u)) + (_1595 << 2u)) >> 2u)).x;
                _1605 = _1604 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1605)
                {
                    frontier_phi_62_pred = _1594;
                    frontier_phi_62_pred_1 = _1593;
                    frontier_phi_62_pred_2 = _1592;
                }
                else
                {
                    float _1758;
                    float _1759;
                    float _1760;
                    uint _1761;
                    _1758 = _1592;
                    _1759 = _1593;
                    _1760 = _1594;
                    _1761 = _1604;
                    float _1670;
                    float _1671;
                    float _1672;
                    for (;;)
                    {
                        uint _1765 = uint(findLSB(_1761)) + (_1595 << 5u);
                        uint _1762 = (_1761 + 4294967295u) & _1761;
                        uint _1767 = _1765 * 48u;
                        vec4 _1781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1767)).x, texelFetch(g_PointLightRenderingBuffer, int(_1767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1767 + 3u)).x));
                        uint _1798 = (_1765 * 48u) + 8u;
                        vec3 _1809 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1798)).x, texelFetch(g_PointLightRenderingBuffer, int(_1798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1798 + 2u)).x));
                        float _1813 = _1781.x - _1295;
                        float _1814 = _1781.y - _1296;
                        float _1815 = _1781.z - _1297;
                        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
                        float _1819 = inversesqrt(_1816);
                        float _1828 = 1.0 - (_1816 * _1781.w);
                        float _2464 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
                        float _1830 = sqrt(_1816) * uintBitsToFloat(uvec4(_1788, _1789, _1790, texelFetch(g_PointLightRenderingBuffer, int(((_1765 * 48u) + 4u) + 3u)).x)).w;
                        float _1833 = 1.39999997615814208984375 / (_1830 + 1.39999997615814208984375);
                        float _1834 = _1833 * _1833;
                        float _1837 = ((1.0 - _1834) * dot(vec3(0.0), vec3(_1819 * _1813, _1819 * _1814, _1819 * _1815))) + _1834;
                        float _1839 = (-0.0) - _1295;
                        float _1840 = (-0.0) - _1296;
                        float _1841 = (-0.0) - _1297;
                        float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
                        float _1849 = dot(vec3(0.0), vec3(_1845 * _1839, _1845 * _1840, _1845 * _1841));
                        float _2475 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
                        float _2486 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
                        float _1853 = isnan(1.0) ? _2486 : (isnan(_2486) ? 1.0 : min(_2486, 1.0));
                        float _1857 = (0.5 / (((isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0))) + 9.9999999392252902907785028219223e-09) + _1853)) * _1853;
                        float _2497 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
                        float _1866 = (((isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0))) * 3.1415927410125732421875) / (((_1830 * _1830) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0)));
                        _1670 = (_1866 * _1809.x) + _1758;
                        _1671 = (_1866 * _1809.y) + _1759;
                        _1672 = (_1866 * _1809.z) + _1760;
                        if (_1762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1758 = _1670;
                            _1759 = _1671;
                            _1760 = _1672;
                            _1761 = _1762;
                        }
                    }
                    frontier_phi_62_pred = _1672;
                    frontier_phi_62_pred_1 = _1671;
                    frontier_phi_62_pred_2 = _1670;
                }
                _1438 = frontier_phi_62_pred;
                _1436 = frontier_phi_62_pred_1;
                _1434 = frontier_phi_62_pred_2;
                uint _1596 = _1595 + 1u;
                if (_1596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1592 = _1434;
                    _1593 = _1436;
                    _1594 = _1438;
                    _1595 = _1596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1433 = _1434;
            _1435 = _1436;
            _1437 = _1438;
        }
        uvec4 _1441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1442 = _1441.z;
        uint _1444 = (_1442 >> 8u) & 15u;
        float _1572;
        float _1574;
        float _1576;
        if (((4294967295u << _1444) & _1342) == 0u)
        {
            _1572 = _1433;
            _1574 = _1435;
            _1576 = _1437;
        }
        else
        {
            float _1588 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1444 < ((_1442 >> 12u) & 15u))
            {
                float _1573;
                float _1575;
                float _1577;
                float _1744 = _1433;
                float _1745 = _1435;
                float _1746 = _1437;
                uint _1747 = _1444;
                uint _1756;
                bool _1757;
                for (;;)
                {
                    _1756 = texelFetch(g_lightClassification, int((((_1335 << 5u) + (_1321 << 9u)) + (_1747 << 2u)) >> 2u)).x;
                    _1757 = _1756 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    if (_1757)
                    {
                        frontier_phi_71_pred = _1746;
                        frontier_phi_71_pred_1 = _1745;
                        frontier_phi_71_pred_2 = _1744;
                    }
                    else
                    {
                        float _1892;
                        float _1893;
                        float _1894;
                        float _2113;
                        float _2114;
                        float _2115;
                        float _1902 = _1744;
                        float _1903 = _1745;
                        float _1904 = _1746;
                        uint _1905 = _1756;
                        uint _1906;
                        uint _1916;
                        vec4 _1931;
                        float _1932;
                        vec3 _1944;
                        vec4 _1959;
                        vec4 _1974;
                        float _2020;
                        bool _2021;
                        for (;;)
                        {
                            _1916 = ((_1747 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1905));
                            _1906 = (_1905 + 4294967295u) & _1905;
                            uint _1918 = _1916 * 40u;
                            _1931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 3u)).x));
                            _1932 = _1931.w;
                            uint _1934 = (_1916 * 40u) + 8u;
                            _1944 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1934 + 2u)).x));
                            uint _1946 = (_1916 * 40u) + 16u;
                            _1959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1946 + 3u)).x));
                            uint _1961 = (_1916 * 40u) + 20u;
                            _1974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1961 + 3u)).x));
                            uint _1976 = (_1916 * 40u) + 24u;
                            vec4 _1989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 3u)).x));
                            uint _1995 = (_1916 * 40u) + 28u;
                            vec4 _2008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 3u)).x));
                            _2020 = fma(_1297, _2008.z, fma(_1296, _2008.y, _2008.x * _1295)) + _2008.w;
                            _2021 = !((fma(_1297, _1989.z, fma(_1296, _1989.y, _1989.x * _1295)) + _1989.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            if (_2021)
                            {
                                float _2055 = _1931.x - _1295;
                                float _2056 = _1931.y - _1296;
                                float _2057 = _1931.z - _1297;
                                float _2058 = dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057));
                                float _2061 = inversesqrt(_2058);
                                float _2068 = 1.0 - (_2058 / (_1932 * _1932));
                                float _2508 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
                                float _2070 = sqrt(_2058) * uintBitsToFloat(uvec4(_2024, _2025, _2026, texelFetch(g_SpotLightRenderingBuffer, int(((_1916 * 40u) + 4u) + 3u)).x)).w;
                                float _2072 = 1.39999997615814208984375 / (_2070 + 1.39999997615814208984375);
                                float _2073 = _2072 * _2072;
                                float _2076 = (fma(_1297, _1959.z, fma(_1296, _1959.y, _1959.x * _1295)) + _1959.w) / _2020;
                                float _2077 = (fma(_1297, _1974.z, fma(_1296, _1974.y, _1974.x * _1295)) + _1974.w) / _2020;
                                float _2081 = 1.0 - dot(vec2(_2076, _2077), vec2(_2076, _2077));
                                float _2519 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
                                float _2089 = dot(vec3(0.0), vec3((-0.0) - (_1295 * _1588), (-0.0) - (_1296 * _1588), (-0.0) - (_1297 * _1588)));
                                float _2530 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
                                float _2097 = ((1.0 - _2073) * dot(vec3(0.0), vec3(_2061 * _2055, _2061 * _2056, _2061 * _2057))) + _2073;
                                float _2541 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
                                float _2098 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
                                float _2102 = (0.5 / (((isnan(1.0) ? _2530 : (isnan(_2530) ? 1.0 : min(_2530, 1.0))) + 9.9999999392252902907785028219223e-09) + _2098)) * _2098;
                                float _2552 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
                                float _2109 = ((isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0))) * (isnan(1.0) ? _2508 : (isnan(_2508) ? 1.0 : min(_2508, 1.0)))) * (((isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0))) * 3.1415927410125732421875) / (((_2070 * _2070) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2109 * _1944.z;
                                frontier_phi_77_pred_1 = _2109 * _1944.x;
                                frontier_phi_77_pred_2 = _2109 * _1944.y;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                            }
                            _2115 = frontier_phi_77_pred;
                            _2113 = frontier_phi_77_pred_1;
                            _2114 = frontier_phi_77_pred_2;
                            _1892 = _2113 + _1902;
                            _1893 = _2114 + _1903;
                            _1894 = _2115 + _1904;
                            if (_1906 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1902 = _1892;
                                _1903 = _1893;
                                _1904 = _1894;
                                _1905 = _1906;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _1894;
                        frontier_phi_71_pred_1 = _1893;
                        frontier_phi_71_pred_2 = _1892;
                    }
                    _1577 = frontier_phi_71_pred;
                    _1575 = frontier_phi_71_pred_1;
                    _1573 = frontier_phi_71_pred_2;
                    uint _1748 = _1747 + 1u;
                    if (_1748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1744 = _1573;
                        _1745 = _1575;
                        _1746 = _1577;
                        _1747 = _1748;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1575;
                frontier_phi_53_54_ladder_1 = _1573;
                frontier_phi_53_54_ladder_2 = _1577;
            }
            else
            {
                frontier_phi_53_54_ladder = _1435;
                frontier_phi_53_54_ladder_1 = _1433;
                frontier_phi_53_54_ladder_2 = _1437;
            }
            _1572 = frontier_phi_53_54_ladder_1;
            _1574 = frontier_phi_53_54_ladder;
            _1576 = frontier_phi_53_54_ladder_2;
        }
        float _1581 = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
        _1356 = ((_1572 * 0.039999999105930328369140625) * _1581) + _1236;
        _1358 = ((_1574 * 0.039999999105930328369140625) * _1581) + _1237;
        _1360 = ((_1576 * 0.039999999105930328369140625) * _1581) + _1238;
    }
    else
    {
        _1356 = _1236;
        _1358 = _1237;
        _1360 = _1238;
    }
    uint _1367 = (_1102 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1382 = ((_394.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1367].x) + ((_1356 + ((isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0))) * _841)) * cbPerFrame._m0[3u].x);
    float _1383 = ((_394.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1367].y) + ((_1358 + ((isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0))) * _841)) * cbPerFrame._m0[3u].x);
    float _1384 = ((_394.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1367].z) + ((_1360 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _841)) * cbPerFrame._m0[3u].x);
    uint _1388 = _1102 + 6u;
    float _1396 = _431 / cbSceneParam._m0[86u].x;
    float _1397 = _432 / cbSceneParam._m0[86u].y;
    vec4 _1411 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1396, _1397, (log2((isnan(cbSceneParam._m0[77u].w) ? _418 : (isnan(_418) ? cbSceneParam._m0[77u].w : min(_418, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1413 = _1411.x;
    float _1414 = _1411.y;
    float _1415 = _1411.z;
    float _1416 = _1411.w;
    float _1490;
    float _1492;
    float _1494;
    float _1496;
    if (_418 > cbSceneParam._m0[78u].w)
    {
        float _1452 = isnan(_418) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _418 : min(cbSceneParam._m0[80u].w, _418));
        float _1453 = _1452 / _418;
        float _1464 = _1453 * _243;
        float _1465 = _244 * _1453;
        float _1466 = (-0.0) - _1465;
        float _1467 = _1453 * _245;
        float _1469 = (cbSceneParam._m0[77u].w * _1466) / _1452;
        float _1470 = _1469 + cbSceneParam._m0[79u].w;
        float _1471 = cbSceneParam._m0[79u].w - _1465;
        float _1477 = sqrt(((_1464 * _1464) + (_1465 * _1465)) + (_1467 * _1467));
        float _1480 = (1.0 - (cbSceneParam._m0[77u].w / _1452)) * _1477;
        float _1486 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1488 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1680;
        if (abs((_1466 - _1469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1680 = ((((_1470 > 0.0) ? exp2(_1486 * _1470) : (2.0 - exp2(_1488 * _1470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1480;
        }
        else
        {
            float _1618 = 1.0 / cbSceneParam._m0[80u].x;
            float _1619 = isnan(_1471) ? _1470 : (isnan(_1470) ? _1471 : max(_1470, _1471));
            float _1620 = isnan(_1471) ? _1470 : (isnan(_1470) ? _1471 : min(_1470, _1471));
            float _1629 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : min(_1619, 0.0));
            float _1630 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : min(_1620, 0.0));
            _1680 = ((abs(_1477 / _1466) * cbSceneParam._m0[80u].y) * ((((_1629 - _1630) * 2.0) - ((exp2(_1486 * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)))) - exp2(_1486 * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))))) * _1618)) - ((exp2(_1488 * _1629) - exp2(_1488 * _1630)) * _1618))) + (_1480 * cbSceneParam._m0[80u].z);
        }
        vec4 _1682 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1396, _1397, 1.0), 0.0);
        float _1691 = exp2((_1680 * (-1.44269502162933349609375)) * (1.0 - _1682.w));
        float _1692 = log2(_1691);
        float _1708 = log2(_1416);
        _1490 = (exp2(_1708 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1692 * cbSceneParam._m0[78u].x)) * _1682.x) / cbSceneParam._m0[78u].x)) + _1413;
        _1492 = (exp2(_1708 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1692 * cbSceneParam._m0[78u].y)) * _1682.y) / cbSceneParam._m0[78u].y)) + _1414;
        _1494 = (exp2(_1708 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1692 * cbSceneParam._m0[78u].z)) * _1682.z) / cbSceneParam._m0[78u].z)) + _1415;
        _1496 = _1691 * _1416;
    }
    else
    {
        _1490 = _1413;
        _1492 = _1414;
        _1494 = _1415;
        _1496 = _1416;
    }
    float _1508 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1509 = _1508 == 3.0;
    float _1511 = log2(_1496);
    float _1518 = exp2(_1511 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    float _1519 = exp2(_1511 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    float _1520 = exp2(_1511 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    float _1529 = (_1508 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1529 * (_1509 ? _1518 : (_1518 + (cbSceneParam._m0[72u].w * _1490)));
    SV_Target.y = _1529 * (_1509 ? _1519 : (_1519 + (cbSceneParam._m0[72u].w * _1492)));
    SV_Target.z = _1529 * (_1509 ? _1520 : (_1520 + (cbSceneParam._m0[72u].w * _1494)));
    SV_Target.w = cbInstanceData._m0[_1388].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1388].w;
}


