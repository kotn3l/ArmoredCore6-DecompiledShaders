#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _328 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _335 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _344 = cbMtdParam._m0[23u].x + _259;
    float _345 = cbMtdParam._m0[23u].y + _260;
    float _346 = cbMtdParam._m0[23u].z + _261;
    float _360 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_328 * _188, _328 * _189, _328 * _190));
    float _361 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_335 * _202, _335 * _203, _335 * _204));
    float _362 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _366 * _362;
    float _369 = (cbMtdParam._m0[19u].w * _360) * _366;
    float _371 = (cbMtdParam._m0[20u].x * _361) * _366;
    float _374 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _375 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _393;
    float _396;
    float _398;
    if (_369 > 0.0)
    {
        float _379 = (1.0 - _374) / _369;
        _393 = _379;
        _396 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_379 * _367)) * 0.16666667163372039794921875;
        _398 = (fract((_379 * _371) + _375) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _394 = ((-0.0) - _374) / _369;
            frontier_phi_3_2_ladder = (fract(_394 * _367) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _394;
            frontier_phi_3_2_ladder_2 = (fract((_394 * _371) + _375) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _395;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _393 = frontier_phi_3_2_ladder_1;
        _396 = frontier_phi_3_2_ladder;
        _398 = frontier_phi_3_2_ladder_2;
    }
    float _424;
    float _426;
    float _428;
    if (_371 > 0.0)
    {
        float _411 = (1.0 - _375) / _371;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_411 < _393)
        {
            frontier_phi_8_5_ladder = (fract(_411 * _367) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_411 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _411;
        }
        else
        {
            frontier_phi_8_5_ladder = _398;
            frontier_phi_8_5_ladder_1 = _396;
            frontier_phi_8_5_ladder_2 = _393;
        }
        _424 = frontier_phi_8_5_ladder_2;
        _426 = frontier_phi_8_5_ladder_1;
        _428 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_371 < 0.0)
        {
            float _425 = ((-0.0) - _375) / _371;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_425 < _393)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_425 * _367) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_425 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _425;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _398;
                frontier_phi_8_6_ladder_9_ladder_1 = _396;
                frontier_phi_8_6_ladder_9_ladder_2 = _393;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _398;
            frontier_phi_8_6_ladder_1 = _396;
            frontier_phi_8_6_ladder_2 = _393;
        }
        _424 = frontier_phi_8_6_ladder_2;
        _426 = frontier_phi_8_6_ladder_1;
        _428 = frontier_phi_8_6_ladder;
    }
    float _432 = (_367 > 0.0) ? (cbMtdParam._m0[16u].w / _367) : 5000.0;
    float _445;
    float _446;
    if (_432 < _424)
    {
        _445 = ((_374 + cbMtdParam._m0[17u].x) + (_432 * _369)) * 0.16666667163372039794921875;
        _446 = (((_432 * _371) + _375) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _445 = _426;
        _446 = _428;
    }
    vec4 _448 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_445, _446));
    float _453 = _448.x * cbMtdParam._m0[13u].x;
    float _454 = _448.y * cbMtdParam._m0[13u].y;
    float _455 = _448.z * cbMtdParam._m0[13u].z;
    float _460 = 0.5 - (_286 * 0.5);
    float _470 = (((_453 - _299) - (_453 * _286)) * _460) + _299;
    float _471 = (((_454 - _301) - (_454 * _286)) * _460) + _301;
    float _472 = (((_455 - _303) - (_455 * _286)) * _460) + _303;
    vec4 _484 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _492 = (_484.x * 2.0) + (-1.0);
    float _494 = (_484.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_492, _494), vec2(_492, _494));
    float _3353 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _500 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _501 = _484.z * _286;
    float _504 = fma(_500, _195, fma(_494, _202, _492 * _188));
    float _507 = fma(_500, _196, fma(_494, _203, _492 * _189));
    float _510 = fma(_500, _197, fma(_494, _204, _492 * _190));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3364 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _518 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3386 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3397 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _542 = _259 * _541;
    float _543 = _260 * _541;
    float _544 = _261 * _541;
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _572 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _575 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _578 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _593 = (_591 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _599 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_593].x;
    float _600 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_593].y;
    float _601 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_593].z;
    float _3408 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    vec4 _613 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _616 = _613.x * TEXCOORD.z;
    float _617 = dot(vec3(_515, _516, _517), vec3(_542, _543, _544));
    float _620 = _617 * 2.0;
    float _624 = (_620 * _515) - _542;
    float _625 = (_620 * _516) - _543;
    float _626 = (_620 * _517) - _544;
    float _630 = abs(dot(vec3(_542, _543, _544), vec3(_515, _516, _517)));
    float _3441 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _632 = sqrt(_518);
    float _645 = exp2((_632 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_632 * 3.0));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = fma(_685, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677));
        float _722 = fma(_685, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677));
        float _726 = fma(_685, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677));
        float _750 = _677 + _515;
        float _751 = _681 + _516;
        float _752 = _685 + _517;
        float _762 = fma(_752, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750)) - _718;
        float _763 = fma(_752, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750)) - _722;
        float _764 = fma(_752, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750)) - _726;
        float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
        float _781 = ((_768 * _762) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_718 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_768 * _763) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_722 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_768 * _764) / cbModelParam._m0[34u].z) + ((((((_726 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        float _820 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_786.x + (-0.5));
        float _822 = _820 * (_786.y + (-0.5));
        float _823 = _820 * (_786.z + (-0.5));
        float _830 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_793.x + (-0.5));
        float _832 = _830 * (_793.y + (-0.5));
        float _833 = _830 * (_793.z + (-0.5));
        float _840 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_800.x + (-0.5));
        float _842 = _840 * (_800.y + (-0.5));
        float _843 = _840 * (_800.z + (-0.5));
        float _850 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_807.x + (-0.5));
        float _852 = _850 * (_807.y + (-0.5));
        float _853 = _850 * (_807.z + (-0.5));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = _821 * 0.5;
        float _858 = _831 * 0.5;
        float _859 = _841 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _874 = (dot(vec3(_515, _516, _517), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _884 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3489 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_886 + 1.0))) + _891) * _854;
        float _901 = _822 * 0.5;
        float _902 = _832 * 0.5;
        float _903 = _842 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_515, _516, _517), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3522 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_928 + 1.0))) + _933) * _855;
        float _943 = _823 * 0.5;
        float _944 = _833 * 0.5;
        float _945 = _843 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_515, _516, _517), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3555 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_970 + 1.0))) + _975) * _856;
        _992 = _823;
        _993 = _822;
        _994 = _821;
        _995 = _833;
        _996 = _832;
        _997 = _831;
        _998 = _843;
        _999 = _842;
        _1000 = _841;
        _1001 = _856;
        _1002 = _855;
        _1003 = _854;
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
    }
    else
    {
        _992 = _395;
        _993 = _395;
        _994 = _395;
        _995 = _395;
        _996 = _395;
        _997 = _395;
        _998 = _395;
        _999 = _395;
        _1000 = _395;
        _1001 = _395;
        _1002 = _395;
        _1003 = _395;
        _1004 = 0.0;
        _1005 = 0.0;
        _1006 = 0.0;
    }
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1032 = fma(_685, cbModelParam._m0[30u].z, fma(_681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _677));
        float _1036 = fma(_685, cbModelParam._m0[31u].z, fma(_681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _677));
        float _1040 = fma(_685, cbModelParam._m0[32u].z, fma(_681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _677));
        float _1063 = _677 + _515;
        float _1064 = _681 + _516;
        float _1065 = _685 + _517;
        float _1075 = fma(_1065, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063)) - _1032;
        float _1076 = fma(_1065, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063)) - _1036;
        float _1077 = fma(_1065, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063)) - _1040;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1032 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1036 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[35u].z) + ((((((_1040 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1131 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1098.x + (-0.5));
        float _1133 = _1131 * (_1098.y + (-0.5));
        float _1134 = _1131 * (_1098.z + (-0.5));
        float _1141 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1105.x + (-0.5));
        float _1143 = _1141 * (_1105.y + (-0.5));
        float _1144 = _1141 * (_1105.z + (-0.5));
        float _1151 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1112.x + (-0.5));
        float _1153 = _1151 * (_1112.y + (-0.5));
        float _1154 = _1151 * (_1112.z + (-0.5));
        float _1161 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1119.x + (-0.5));
        float _1163 = _1161 * (_1119.y + (-0.5));
        float _1164 = _1161 * (_1119.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_515, _516, _517), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3618 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1195 + 1.0))) + _1200) * _1165;
        float _1210 = _1133 * 0.5;
        float _1211 = _1143 * 0.5;
        float _1212 = _1153 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_515, _516, _517), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3651 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1237 + 1.0))) + _1242) * _1166;
        float _1252 = _1134 * 0.5;
        float _1253 = _1144 * 0.5;
        float _1254 = _1154 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_515, _516, _517), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3684 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1279 + 1.0))) + _1284) * _1167;
        _1301 = _1134;
        _1302 = _1133;
        _1303 = _1132;
        _1304 = _1144;
        _1305 = _1143;
        _1306 = _1142;
        _1307 = _1154;
        _1308 = _1153;
        _1309 = _1152;
        _1310 = _1167;
        _1311 = _1166;
        _1312 = _1165;
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _395;
        _1302 = _395;
        _1303 = _395;
        _1304 = _395;
        _1305 = _395;
        _1306 = _395;
        _1307 = _395;
        _1308 = _395;
        _1309 = _395;
        _1310 = _395;
        _1311 = _395;
        _1312 = _395;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1005)) + _1005;
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1006)) + _1006;
    float _1348 = fma(_1327, cbSceneParam._m0[89u].z, fma(_1326, cbSceneParam._m0[89u].y, _1325 * cbSceneParam._m0[89u].x));
    float _1351 = fma(_1327, cbSceneParam._m0[90u].z, fma(_1326, cbSceneParam._m0[90u].y, _1325 * cbSceneParam._m0[90u].x));
    float _1354 = fma(_1327, cbSceneParam._m0[91u].z, fma(_1326, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1325));
    float _1369 = _624 * 0.5;
    float _1370 = _625 * 0.5;
    float _1371 = _626 * 0.5;
    float _1372 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1375 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1378 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1412;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1385 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_992, _995, _998, _1001));
        float _1389 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_993, _996, _999, _1002));
        float _1393 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_994, _997, _1000, _1003));
        float _1400 = dot(vec4(cbModelParam._m0[39u]), vec4(_1369, _1370, _1371, 1.0));
        _1412 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1412 = 1.0;
    }
    float _1423;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1414 = dot(vec4(cbModelParam._m0[40u]), vec4(_1369, _1370, _1371, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1427 = (_1423 * cbModelParam._m0[1u].x) + (_1412 * (1.0 - cbModelParam._m0[1u].x));
    float _1437 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1437 : min(cbModelParam._m0[25u].z, _1437));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1487 = fma(_685, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677)) + cbModelParam._m0[13u].w;
        float _1491 = fma(_685, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677)) + cbModelParam._m0[14u].w;
        float _1495 = fma(_685, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677)) + cbModelParam._m0[15u].w;
        float _1498 = fma(_626, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624));
        float _1501 = fma(_626, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624));
        float _1504 = fma(_626, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624));
        float _1532;
        if (_1498 > 0.0)
        {
            _1532 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1532 = frontier_phi_26_24_ladder;
        }
        float _1703;
        if (_1501 > 0.0)
        {
            _1703 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1703 = frontier_phi_35_31_ladder;
        }
        float _2148;
        if (_1504 > 0.0)
        {
            _2148 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2148 = frontier_phi_47_42_ladder;
        }
        float _2150 = isnan(_1703) ? _1532 : (isnan(_1532) ? _1703 : min(_1532, _1703));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1498) + _1487;
        float _2156 = (_2151 * _1501) + _1491;
        float _2157 = (_2151 * _1504) + _1495;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2158;
        float _2162 = _2158 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 > _2162) || ((_2156 < _2160) || ((_2155 < _2160) || (_2155 > _2162))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2157, cbModelParam._m0[9u].z, fma(_2156, cbModelParam._m0[9u].y, _2155 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2157, cbModelParam._m0[10u].z, fma(_2156, cbModelParam._m0[10u].y, _2155 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2157, cbModelParam._m0[11u].z, fma(_2156, cbModelParam._m0[11u].y, _2155 * cbModelParam._m0[11u].x))), _1438);
            frontier_phi_25_47_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1520 = frontier_phi_25_47_ladder_2;
        _1522 = frontier_phi_25_47_ladder_1;
        _1524 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_624, _625, _626), _1438);
        _1520 = _1508.x * cbModelParam._m0[1u].y;
        _1522 = _1508.y * cbModelParam._m0[1u].y;
        _1524 = _1508.z * cbModelParam._m0[1u].y;
    }
    float _1528 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1528 : min(cbModelParam._m0[25u].w, _1528));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1584 = fma(_685, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677)) + cbModelParam._m0[21u].w;
        float _1588 = fma(_685, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677)) + cbModelParam._m0[22u].w;
        float _1592 = fma(_685, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677)) + cbModelParam._m0[23u].w;
        float _1595 = fma(_626, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624));
        float _1598 = fma(_626, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624));
        float _1601 = fma(_626, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624));
        float _1708;
        if (_1595 > 0.0)
        {
            _1708 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1708 = frontier_phi_37_33_ladder;
        }
        float _2175;
        if (_1598 > 0.0)
        {
            _2175 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2175 = frontier_phi_49_44_ladder;
        }
        float _2512;
        if (_1601 > 0.0)
        {
            _2512 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2512 = frontier_phi_61_56_ladder;
        }
        float _2514 = isnan(_2175) ? _1708 : (isnan(_1708) ? _2175 : min(_1708, _2175));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1595) + _1584;
        float _2520 = (_2515 * _1598) + _1588;
        float _2521 = (_2515 * _1601) + _1592;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1529);
            frontier_phi_34_61_ladder = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2642.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2642.x * cbModelParam._m0[1u].z;
        }
        _1620 = frontier_phi_34_61_ladder_2;
        _1622 = frontier_phi_34_61_ladder_1;
        _1624 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_624, _625, _626), _1529);
        _1620 = _1604.x * cbModelParam._m0[1u].z;
        _1622 = _1604.y * cbModelParam._m0[1u].z;
        _1624 = _1604.z * cbModelParam._m0[1u].z;
    }
    float _1636 = ((((1.0 - _645) * ((_632 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_645 * _632)) * _616;
    float _1637 = _1636 * ((cbModelParam._m0[1u].w * (_1620 - _1520)) + _1520);
    float _1638 = _1636 * ((cbModelParam._m0[1u].w * (_1622 - _1522)) + _1522);
    float _1639 = _1636 * ((cbModelParam._m0[1u].w * (_1624 - _1524)) + _1524);
    float _1642 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, _1637 * cbSceneParam._m0[91u].x));
    float _1682 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1690 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1695 = _1682 / _1694;
    float _1696 = _1686 / _1694;
    float _1697 = _1690 / _1694;
    float _1844;
    float _1845;
    float _1846;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1724 = ((uint(_1697 > cbSceneParam._m0[59u].y) + uint(_1697 > cbSceneParam._m0[59u].x)) + uint(_1697 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1725 = _1724 + 43u;
        uint _1733 = _1724 + 44u;
        uint _1741 = _1724 + 45u;
        uint _1749 = _1724 + 46u;
        float _1760 = fma(_1694, cbSceneParam._m0[_1725].w, fma(_1690, cbSceneParam._m0[_1725].z, fma(_1686, cbSceneParam._m0[_1725].y, _1682 * cbSceneParam._m0[_1725].x)));
        float _1764 = fma(_1694, cbSceneParam._m0[_1733].w, fma(_1690, cbSceneParam._m0[_1733].z, fma(_1686, cbSceneParam._m0[_1733].y, _1682 * cbSceneParam._m0[_1733].x)));
        float _1772 = fma(_1694, cbSceneParam._m0[_1749].w, fma(_1690, cbSceneParam._m0[_1749].z, fma(_1686, cbSceneParam._m0[_1749].y, _1682 * cbSceneParam._m0[_1749].x)));
        float _1777 = cbSceneParam._m0[33u].z * _1772;
        float _1779 = cbSceneParam._m0[33u].w * _1772;
        float _1782 = fma(_1694, cbSceneParam._m0[_1741].w, fma(_1690, cbSceneParam._m0[_1741].z, fma(_1686, cbSceneParam._m0[_1741].y, _1682 * cbSceneParam._m0[_1741].x))) / _1772;
        float _1830 = (cbSceneParam._m0[33u].x - sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697))) * cbSceneParam._m0[33u].y;
        float _3810 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1837 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1777 + _1760) / _1772, (_1779 + _1764) / _1772), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1779 + _1760) / _1772, (_1764 - _1777) / _1772), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1760 - _1777) / _1772, (_1764 - _1779) / _1772), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1760 - _1779) / _1772, (_1777 + _1764) / _1772), _1782), 0.0)).x), vec4(0.25)));
        _1844 = 1.0 - (_1837 * cbSceneParam._m0[34u].x);
        _1845 = 1.0 - (_1837 * cbSceneParam._m0[34u].y);
        _1846 = 1.0 - (_1837 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1844 = 1.0;
        _1845 = 1.0;
        _1846 = 1.0;
    }
    float _1910;
    float _1912;
    float _1914;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1898 = fma(_1694, cbSceneParam._m0[63u].w, fma(_1690, cbSceneParam._m0[63u].z, fma(_1686, cbSceneParam._m0[63u].y, _1682 * cbSceneParam._m0[63u].x)));
        float _1899 = fma(_1694, cbSceneParam._m0[60u].w, fma(_1690, cbSceneParam._m0[60u].z, fma(_1686, cbSceneParam._m0[60u].y, _1682 * cbSceneParam._m0[60u].x))) / _1898;
        float _1900 = fma(_1694, cbSceneParam._m0[61u].w, fma(_1690, cbSceneParam._m0[61u].z, fma(_1686, cbSceneParam._m0[61u].y, _1682 * cbSceneParam._m0[61u].x))) / _1898;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1899 >= cbSceneParam._m0[64u].x) && (_1900 >= cbSceneParam._m0[64u].y)) && (_1899 <= cbSceneParam._m0[64u].z)) && (_1900 <= cbSceneParam._m0[64u].w))
        {
            float _2188 = fma(_1694, cbSceneParam._m0[62u].w, fma(_1690, cbSceneParam._m0[62u].z, fma(_1686, cbSceneParam._m0[62u].y, _1682 * cbSceneParam._m0[62u].x))) / _1898;
            float _2192 = isnan(cbSceneParam._m0[41u].w) ? _2188 : (isnan(_2188) ? cbSceneParam._m0[41u].w : max(_2188, cbSceneParam._m0[41u].w));
            float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697))) * cbSceneParam._m0[33u].y;
            float _3826 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
            float _2242 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1899, cbSceneParam._m0[33u].w + _1900), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1899, _1900 - cbSceneParam._m0[33u].z), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1899 - cbSceneParam._m0[33u].z, _1900 - cbSceneParam._m0[33u].w), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1899 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1900), _2192), 0.0)).x), vec4(0.25)));
            float _2246 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
            float _2247 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
            float _2248 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2248) ? _1846 : (isnan(_1846) ? _2248 : min(_1846, _2248));
            frontier_phi_46_45_ladder_1 = isnan(_2247) ? _1845 : (isnan(_1845) ? _2247 : min(_1845, _2247));
            frontier_phi_46_45_ladder_2 = isnan(_2246) ? _1844 : (isnan(_1844) ? _2246 : min(_1844, _2246));
        }
        else
        {
            frontier_phi_46_45_ladder = _1846;
            frontier_phi_46_45_ladder_1 = _1845;
            frontier_phi_46_45_ladder_2 = _1844;
        }
        _1910 = frontier_phi_46_45_ladder_2;
        _1912 = frontier_phi_46_45_ladder_1;
        _1914 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1910 = _1844;
        _1912 = _1845;
        _1914 = _1846;
    }
    uvec4 _1919 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1921 = _1919.x * 14u;
    uint _1922 = _1921 + 13u;
    float _1927 = _616 + (-1.0);
    float _1930 = (cbLight._m0[_1922].x * _1927) + 1.0;
    float _1931 = (cbLight._m0[_1922].y * _1927) + 1.0;
    uint _1932 = _1921 + 5u;
    float _1938 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1942 = _1921 + 4u;
    float _1952 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1956 = _1921 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_515, _516, _517));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_515, _516, _517));
    float _3862 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _3873 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1932].x * _1938) * _1977) + (((cbLight._m0[_1942].x * _1910) * _1952) * _1975);
    float _1985 = ((_1938 * cbLight._m0[_1932].y) * _1977) + (((cbLight._m0[_1942].y * _1912) * _1952) * _1975);
    float _1986 = ((_1938 * cbLight._m0[_1932].z) * _1977) + (((cbLight._m0[_1942].z * _1914) * _1952) * _1975);
    uint _1988 = _1921 + 8u;
    float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _518) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1921].x + _542;
    float _2004 = cbLight._m0[_1921].y + _543;
    float _2005 = cbLight._m0[_1921].z + _544;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1921].xyz));
    float _3884 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _2017 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _2018 = dot(vec3(_515, _516, _517), vec3(_2010, _2011, _2012));
    float _3906 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2010, _2011, _2012));
    float _3917 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2002 * _2002;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = 1.0 - _2002;
    float _2053 = (0.5 / (((_2017 * ((_2016 * _2042) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2042) + _2002) * _2016))) * _2016;
    float _3928 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    uint _2069 = _1921 + 9u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _518) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1956].x + _542;
    float _2083 = cbLight._m0[_1956].y + _543;
    float _2084 = cbLight._m0[_1956].z + _544;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1956].xyz));
    float _3939 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _2096 = dot(vec3(_515, _516, _517), vec3(_2089, _2090, _2091));
    float _3950 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2089, _2090, _2091));
    float _3961 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2081 * _2081;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2081;
    float _2128 = (0.5 / (((_2017 * ((_2095 * _2118) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2118) + _2081) * _2095))) * _2095;
    float _3972 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    float _2140 = (((_2117 * cbLight._m0[_2069].x) * _2130) * _1938) + ((((cbLight._m0[_1988].x * _1910) * _2041) * _2055) * _1952);
    float _2141 = (((_2117 * cbLight._m0[_2069].y) * _2130) * _1938) + ((((cbLight._m0[_1988].y * _1912) * _2041) * _2055) * _1952);
    float _2142 = (((_2117 * cbLight._m0[_2069].z) * _2130) * _1938) + ((((cbLight._m0[_1988].z * _1914) * _2041) * _2055) * _1952);
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1919.y == 0u)
    {
        uvec4 _2260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2261 = _2260.x;
        uint _2272 = uint((float(_2260.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2261))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2261)));
        float _2282 = (log2(_1697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        uint _2286 = uint(isnan(14.0) ? _2283 : (isnan(_2283) ? 14.0 : min(_2283, 14.0)));
        uvec4 _2291 = texelFetch(g_lightClusterGridBuffer, int(((_2286 << 2u) + (_2272 << 6u)) >> 2u));
        uint _2292 = _2291.x;
        uint _2293 = _2260.z;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((((1u << ((_2293 >> 4u) & 15u)) + 4294967295u) & _2292) == 0u) || ((_2293 & 240u) == 0u))
        {
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
        }
        else
        {
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            uint _2576 = 0u;
            uint _2585;
            bool _2586;
            for (;;)
            {
                _2585 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                _2586 = _2585 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2586)
                {
                    frontier_phi_70_pred = _2573;
                    frontier_phi_70_pred_1 = _2575;
                    frontier_phi_70_pred_2 = _2574;
                    frontier_phi_70_pred_3 = _2572;
                    frontier_phi_70_pred_4 = _2571;
                    frontier_phi_70_pred_5 = _2570;
                }
                else
                {
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    uint _2721;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2585;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    for (;;)
                    {
                        uint _2725 = uint(findLSB(_2721)) + (_2576 << 5u);
                        uint _2722 = (_2721 + 4294967295u) & _2721;
                        uint _2727 = _2725 * 48u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2727)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 3u)).x));
                        uint _2747 = (_2725 * 48u) + 4u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 3u)).x));
                        uint _2766 = (_2725 * 48u) + 8u;
                        vec3 _2777 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x));
                        float _2781 = _2741.x - _1695;
                        float _2782 = _2741.y - _1696;
                        float _2783 = _2741.z - _1697;
                        float _2784 = dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783));
                        float _2787 = inversesqrt(_2784);
                        float _2788 = _2787 * _2781;
                        float _2789 = _2787 * _2782;
                        float _2790 = _2787 * _2783;
                        float _2791 = dot(vec3(_572, _575, _578), vec3(_2788, _2789, _2790));
                        float _2796 = 1.0 - (_2784 * _2741.w);
                        float _3993 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2798 = sqrt(_2784) * _2760.w;
                        float _2801 = 1.39999997615814208984375 / (_2798 + 1.39999997615814208984375);
                        float _2802 = _2801 * _2801;
                        float _2805 = ((1.0 - _2802) * _2791) + _2802;
                        float _2808 = _2798 * _2798;
                        float _2812 = ((isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * _2797) / ((_2808 * 0.699999988079071044921875) + 1.0);
                        float _2816 = (-0.0) - _1695;
                        float _2817 = (-0.0) - _1696;
                        float _2818 = (-0.0) - _1697;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2823 = _2822 * _2816;
                        float _2824 = _2822 * _2817;
                        float _2825 = _2822 * _2818;
                        float _2832 = exp2(log2(1.0 / ((_2808 * 3.5) + 5.0)) * 0.25);
                        float _2833 = 1.0 - _632;
                        float _2840 = sqrt(1.0 - ((1.0 - (_2833 * _2833)) * (1.0 - (_2832 * _2832))));
                        float _2841 = _2840 * _2840;
                        float _2842 = _2841 * _2841;
                        float _2843 = _2823 + _2788;
                        float _2844 = _2824 + _2789;
                        float _2845 = _2825 + _2790;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2853 = dot(vec3(_572, _575, _578), vec3(_2823, _2824, _2825));
                        float _4009 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2857 = dot(vec3(_572, _575, _578), vec3(_2849 * _2843, _2849 * _2844, _2849 * _2845));
                        float _4020 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2864 = ((_2860 * _2860) * (_2842 + (-1.0))) + 1.0;
                        float _2865 = _2801 * _2841;
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2791) + _2866;
                        float _4031 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2871 = 1.0 - _2841;
                        float _2881 = (0.5 / (((_2870 * ((_2856 * _2871) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2870 * _2871) + _2841) * _2856))) * _2870;
                        float _4042 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2892 = (((_2842 * 3.1415927410125732421875) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) / ((_2864 * _2864) * ((_2808 * 2.1991131305694580078125) + 3.141590118408203125))) * _2797;
                        _2650 = (_2812 * _2760.x) + _2718;
                        _2651 = (_2812 * _2760.y) + _2719;
                        _2652 = (_2812 * _2760.z) + _2720;
                        _2647 = (_2892 * _2777.x) + _2715;
                        _2648 = (_2892 * _2777.y) + _2716;
                        _2649 = (_2892 * _2777.z) + _2717;
                        if (_2722 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2715 = _2647;
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2722;
                        }
                    }
                    frontier_phi_70_pred = _2650;
                    frontier_phi_70_pred_1 = _2652;
                    frontier_phi_70_pred_2 = _2651;
                    frontier_phi_70_pred_3 = _2649;
                    frontier_phi_70_pred_4 = _2648;
                    frontier_phi_70_pred_5 = _2647;
                }
                _2407 = frontier_phi_70_pred;
                _2411 = frontier_phi_70_pred_1;
                _2409 = frontier_phi_70_pred_2;
                _2405 = frontier_phi_70_pred_3;
                _2403 = frontier_phi_70_pred_4;
                _2401 = frontier_phi_70_pred_5;
                uint _2577 = _2576 + 1u;
                if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2570 = _2401;
                    _2571 = _2403;
                    _2572 = _2405;
                    _2573 = _2407;
                    _2574 = _2409;
                    _2575 = _2411;
                    _2576 = _2577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
        }
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.z;
        uint _2417 = (_2415 >> 8u) & 15u;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((4294967295u << _2417) & _2292) == 0u)
        {
            _2538 = _2400;
            _2540 = _2402;
            _2542 = _2404;
            _2544 = _2406;
            _2546 = _2408;
            _2548 = _2410;
        }
        else
        {
            float _2563 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
            float _2564 = _2563 * _1695;
            float _2565 = _2563 * _1696;
            float _2566 = _2563 * _1697;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2417 < ((_2415 >> 12u) & 15u))
            {
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2698 = _2400;
                float _2699 = _2402;
                float _2700 = _2404;
                float _2701 = _2406;
                float _2702 = _2408;
                float _2703 = _2410;
                uint _2704 = _2417;
                uint _2713;
                bool _2714;
                for (;;)
                {
                    _2713 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                    _2714 = _2713 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2714)
                    {
                        frontier_phi_76_pred = _2703;
                        frontier_phi_76_pred_1 = _2702;
                        frontier_phi_76_pred_2 = _2701;
                        frontier_phi_76_pred_3 = _2700;
                        frontier_phi_76_pred_4 = _2699;
                        frontier_phi_76_pred_5 = _2698;
                    }
                    else
                    {
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _2910 = _2698;
                        float _2911 = _2699;
                        float _2912 = _2700;
                        float _2913 = _2701;
                        float _2914 = _2702;
                        float _2915 = _2703;
                        uint _2916 = _2713;
                        uint _2917;
                        vec4 _2942;
                        float _2943;
                        vec4 _2958;
                        vec3 _2970;
                        vec4 _2985;
                        vec4 _3000;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2927 = ((_2704 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2916));
                            _2917 = (_2916 + 4294967295u) & _2916;
                            uint _2929 = _2927 * 40u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2943 = _2942.w;
                            uint _2945 = (_2927 * 40u) + 4u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2960 = (_2927 * 40u) + 8u;
                            _2970 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x));
                            uint _2972 = (_2927 * 40u) + 16u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2927 * 40u) + 20u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2927 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2927 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_1697, _3034.z, fma(_1696, _3034.y, _3034.x * _1695)) + _3034.w;
                            _3047 = !((fma(_1697, _3015.z, fma(_1696, _3015.y, _3015.x * _1695)) + _3015.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3047)
                            {
                                float _3074 = _2942.x - _1695;
                                float _3075 = _2942.y - _1696;
                                float _3076 = _2942.z - _1697;
                                float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                                float _3080 = inversesqrt(_3077);
                                float _3081 = _3080 * _3074;
                                float _3082 = _3080 * _3075;
                                float _3083 = _3080 * _3076;
                                float _3087 = 1.0 - (_3077 / (_2943 * _2943));
                                float _4053 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3092 = sqrt(_3077) * _2958.w;
                                float _3094 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                                float _3095 = _3094 * _3094;
                                float _3098 = ((1.0 - _3095) * dot(vec3(_3081, _3082, _3083), vec3(_572, _575, _578))) + _3095;
                                float _3101 = _3092 * _3092;
                                float _3105 = (fma(_1697, _2985.z, fma(_1696, _2985.y, _2985.x * _1695)) + _2985.w) / _3046;
                                float _3106 = (fma(_1697, _3000.z, fma(_1696, _3000.y, _3000.x * _1695)) + _3000.w) / _3046;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4069 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3088) / ((_3101 * 0.699999988079071044921875) + 1.0));
                                float _3124 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                                float _3125 = 1.0 - _632;
                                float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                                float _3133 = _3132 * _3132;
                                float _3134 = _3133 * _3133;
                                float _3135 = _3081 - _2564;
                                float _3136 = _3082 - _2565;
                                float _3137 = _3083 - _2566;
                                float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                                float _3145 = dot(vec3(_572, _575, _578), vec3((-0.0) - _2564, (-0.0) - _2565, (-0.0) - _2566));
                                float _4080 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3149 = dot(vec3(_572, _575, _578), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                                float _4091 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                                float _3157 = _3094 * _3133;
                                float _3158 = _3157 * _3157;
                                float _3164 = ((1.0 - _3158) * dot(vec3(_572, _575, _578), vec3(_3081, _3082, _3083))) + _3158;
                                float _4102 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3166 = 1.0 - _3133;
                                float _3176 = (0.5 / (((_3165 * ((_3148 * _3166) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3133) * _3148))) * _3165;
                                float _4113 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3186 = (_3111 * _3088) * (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) / ((_3156 * _3156) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3112 * _2958.z;
                                frontier_phi_82_pred_1 = _3112 * _2958.y;
                                frontier_phi_82_pred_2 = _3112 * _2958.x;
                                frontier_phi_82_pred_3 = _3186 * _2970.z;
                                frontier_phi_82_pred_4 = _3186 * _2970.y;
                                frontier_phi_82_pred_5 = _3186 * _2970.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_82_pred;
                            _3194 = frontier_phi_82_pred_1;
                            _3193 = frontier_phi_82_pred_2;
                            _3192 = frontier_phi_82_pred_3;
                            _3191 = frontier_phi_82_pred_4;
                            _3190 = frontier_phi_82_pred_5;
                            _2900 = _3193 + _2913;
                            _2901 = _3194 + _2914;
                            _2902 = _3195 + _2915;
                            _2897 = _3190 + _2910;
                            _2898 = _3191 + _2911;
                            _2899 = _3192 + _2912;
                            if (_2917 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2917;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2902;
                        frontier_phi_76_pred_1 = _2901;
                        frontier_phi_76_pred_2 = _2900;
                        frontier_phi_76_pred_3 = _2899;
                        frontier_phi_76_pred_4 = _2898;
                        frontier_phi_76_pred_5 = _2897;
                    }
                    _2549 = frontier_phi_76_pred;
                    _2547 = frontier_phi_76_pred_1;
                    _2545 = frontier_phi_76_pred_2;
                    _2543 = frontier_phi_76_pred_3;
                    _2541 = frontier_phi_76_pred_4;
                    _2539 = frontier_phi_76_pred_5;
                    uint _2705 = _2704 + 1u;
                    if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2698 = _2539;
                        _2699 = _2541;
                        _2700 = _2543;
                        _2701 = _2545;
                        _2702 = _2547;
                        _2703 = _2549;
                        _2704 = _2705;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2547;
                frontier_phi_63_64_ladder_1 = _2549;
                frontier_phi_63_64_ladder_2 = _2545;
                frontier_phi_63_64_ladder_3 = _2543;
                frontier_phi_63_64_ladder_4 = _2541;
                frontier_phi_63_64_ladder_5 = _2539;
            }
            else
            {
                frontier_phi_63_64_ladder = _2408;
                frontier_phi_63_64_ladder_1 = _2410;
                frontier_phi_63_64_ladder_2 = _2406;
                frontier_phi_63_64_ladder_3 = _2404;
                frontier_phi_63_64_ladder_4 = _2402;
                frontier_phi_63_64_ladder_5 = _2400;
            }
            _2538 = frontier_phi_63_64_ladder_5;
            _2540 = frontier_phi_63_64_ladder_4;
            _2542 = frontier_phi_63_64_ladder_3;
            _2544 = frontier_phi_63_64_ladder_2;
            _2546 = frontier_phi_63_64_ladder;
            _2548 = frontier_phi_63_64_ladder_1;
        }
        float _2553 = isnan(1.0) ? _616 : (isnan(_616) ? 1.0 : min(_616, 1.0));
        _2305 = (_2553 * _2544) + _1984;
        _2307 = (_2553 * _2546) + _1985;
        _2309 = (_2553 * _2548) + _1986;
        _2311 = ((_2538 * 0.039999999105930328369140625) * _2553) + _2140;
        _2313 = ((_2540 * 0.039999999105930328369140625) * _2553) + _2141;
        _2315 = ((_2542 * 0.039999999105930328369140625) * _2553) + _2142;
    }
    else
    {
        _2305 = _1984;
        _2307 = _1985;
        _2309 = _1986;
        _2311 = _2140;
        _2313 = _2141;
        _2315 = _2142;
    }
    float _4129 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4140 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4151 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _2332 = ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2305 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _616))) + ((_2311 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1427)) * cbPerFrame._m0[3u].x);
    float _2333 = ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2307 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _616))) + ((_2313 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1427)) * cbPerFrame._m0[3u].x);
    float _2334 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2309 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _616))) + ((_2315 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1427)) * cbPerFrame._m0[3u].x);
    uint _2338 = _591 + 6u;
    float _2346 = _550 / cbSceneParam._m0[86u].x;
    float _2347 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2363 = _2361.x;
    float _2364 = _2361.y;
    float _2365 = _2361.z;
    float _2366 = _2361.w;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2425 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2426 = _2425 / _537;
        float _2437 = _2426 * _259;
        float _2438 = _260 * _2426;
        float _2439 = (-0.0) - _2438;
        float _2440 = _2426 * _261;
        float _2442 = (cbSceneParam._m0[77u].w * _2439) / _2425;
        float _2443 = _2442 + cbSceneParam._m0[79u].w;
        float _2444 = cbSceneParam._m0[79u].w - _2438;
        float _2450 = sqrt(((_2437 * _2437) + (_2438 * _2438)) + (_2440 * _2440));
        float _2453 = (1.0 - (cbSceneParam._m0[77u].w / _2425)) * _2450;
        float _2458 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2460 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2660;
        if (abs((_2439 - _2442) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2660 = ((((_2443 > 0.0) ? exp2(_2458 * _2443) : (2.0 - exp2(_2460 * _2443))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2453;
        }
        else
        {
            float _2599 = 1.0 / cbSceneParam._m0[80u].x;
            float _2600 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : max(_2443, _2444));
            float _2601 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : min(_2443, _2444));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            _2660 = ((abs(_2450 / _2439) * cbSceneParam._m0[80u].y) * ((((_2610 - _2611) * 2.0) - ((exp2(_2458 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)))) - exp2(_2458 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0))))) * _2599)) - ((exp2(_2460 * _2610) - exp2(_2460 * _2611)) * _2599))) + (_2453 * cbSceneParam._m0[80u].z);
        }
        vec4 _2662 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, 1.0), 0.0);
        float _2671 = exp2((_2660 * (-1.44269502162933349609375)) * (1.0 - _2662.w));
        float _2672 = log2(_2671);
        float _2688 = log2(_2366);
        _2462 = (exp2(_2688 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].x)) * _2662.x) / cbSceneParam._m0[78u].x)) + _2363;
        _2464 = (exp2(_2688 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].y)) * _2662.y) / cbSceneParam._m0[78u].y)) + _2364;
        _2466 = (exp2(_2688 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2672 * cbSceneParam._m0[78u].z)) * _2662.z) / cbSceneParam._m0[78u].z)) + _2365;
        _2468 = _2671 * _2366;
    }
    else
    {
        _2462 = _2363;
        _2464 = _2364;
        _2466 = _2365;
        _2468 = _2366;
    }
    float _2480 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2481 = _2480 == 3.0;
    float _2482 = log2(_2468);
    float _2489 = exp2(_2482 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0)));
    float _2490 = exp2(_2482 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)));
    float _2491 = exp2(_2482 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0)));
    float _2500 = (_2480 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2500 * (_2481 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2462)));
    SV_Target.y = _2500 * (_2481 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2464)));
    SV_Target.z = _2500 * (_2481 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2466)));
    SV_Target.w = cbInstanceData._m0[_2338].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2338].w;
}


