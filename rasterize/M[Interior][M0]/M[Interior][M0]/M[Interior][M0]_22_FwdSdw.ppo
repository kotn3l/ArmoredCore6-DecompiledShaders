#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1253;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _395 = (_391 * _385) + (_359 * cbMtdParam._m0[20u].y);
    float _396 = (_391 * _386) + (_360 * cbMtdParam._m0[20u].z);
    float _397 = _395 * cbMtdParam._m0[19u].x;
    float _398 = _396 * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    bool _416 = _394 > 0.0;
    float _418 = _416 ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = _399 + (-0.5);
    float _428 = _400 + (-0.5);
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_425 + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_428 + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _472 = (_458 - (_458 * _292)) * cbMtdParam._m0[9u].x;
    float _473 = (_459 - (_459 * _292)) * cbMtdParam._m0[9u].y;
    float _474 = cbMtdParam._m0[9u].z * (_460 - (_460 * _292));
    float _492 = _395 * cbMtdParam._m0[21u].x;
    float _493 = _396 * cbMtdParam._m0[20u].w;
    bool _494 = _492 > 0.0;
    float _499;
    if (_494)
    {
        _499 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _499 = frontier_phi_11_10_ladder;
    }
    bool _501 = _493 > 0.0;
    float _506;
    if (_501)
    {
        _506 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _506 = frontier_phi_15_14_ladder;
    }
    float _509 = _416 ? (cbMtdParam._m0[16u].z / _394) : 5000.0;
    float _510 = isnan(_506) ? _499 : (isnan(_499) ? _506 : min(_499, _506));
    float _511 = isnan(_509) ? _510 : (isnan(_510) ? _509 : min(_510, _509));
    float _515 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _519 = ((_511 * _394) + _515) / _515;
    float _524 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _526 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _542 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_511 * _492)) / _519) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_511 * _493)) / _519) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _547 = _542.x * cbMtdParam._m0[10u].x;
    float _548 = _542.y * cbMtdParam._m0[10u].y;
    float _549 = _542.z * cbMtdParam._m0[10u].z;
    float _557;
    if (_494)
    {
        _557 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _557 = frontier_phi_19_18_ladder;
    }
    float _563;
    if (_501)
    {
        _563 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _563 = frontier_phi_23_22_ladder;
    }
    float _565 = isnan(_563) ? _557 : (isnan(_557) ? _563 : min(_557, _563));
    float _566 = isnan(_509) ? _565 : (isnan(_565) ? _509 : min(_565, _509));
    float _573 = ((_566 * _394) + _515) / _515;
    vec4 _587 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_566 * _492)) / _573) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_566 * _493)) / _573) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _589 = _587.w;
    float _591 = _589 - (_589 * _292);
    float _601 = (_591 * ((_547 - _472) - (_547 * _292))) + _472;
    float _602 = (_591 * ((_548 - _473) - (_548 * _292))) + _473;
    float _603 = (_591 * ((_549 - _474) - (_549 * _292))) + _474;
    float _617 = _395 * cbMtdParam._m0[21u].z;
    float _618 = _396 * cbMtdParam._m0[21u].y;
    bool _619 = _617 > 0.0;
    float _624;
    if (_619)
    {
        _624 = (1.0 - _399) / _617;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_617 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _399) / _617;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _624 = frontier_phi_27_26_ladder;
    }
    bool _626 = _618 > 0.0;
    float _631;
    if (_626)
    {
        _631 = (1.0 - _400) / _618;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_618 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _400) / _618;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _631 = frontier_phi_31_30_ladder;
    }
    float _634 = _416 ? (cbMtdParam._m0[18u].x / _394) : 5000.0;
    float _635 = isnan(_631) ? _624 : (isnan(_624) ? _631 : min(_624, _631));
    float _636 = isnan(_634) ? _635 : (isnan(_635) ? _634 : min(_635, _634));
    float _640 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _644 = ((_636 * _394) + _640) / _640;
    float _649 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _651 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _668 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_425 + (_636 * _617)) / _644) + 0.5) + _649) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_428 + (_636 * _618)) / _644) + 0.5) + _651) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _673 = _668.x * cbMtdParam._m0[14u].x;
    float _674 = _668.y * cbMtdParam._m0[14u].y;
    float _675 = _668.z * cbMtdParam._m0[14u].z;
    float _683;
    if (_619)
    {
        _683 = (1.0 - _399) / _617;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_617 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _399) / _617;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _683 = frontier_phi_35_34_ladder;
    }
    float _689;
    if (_626)
    {
        _689 = (1.0 - _400) / _618;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_618 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _400) / _618;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _689 = frontier_phi_39_38_ladder;
    }
    float _691 = isnan(_689) ? _683 : (isnan(_683) ? _689 : min(_683, _689));
    float _692 = isnan(_634) ? _691 : (isnan(_691) ? _634 : min(_691, _634));
    float _699 = ((_692 * _394) + _640) / _640;
    vec4 _713 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_425 + (_692 * _617)) / _699) + 0.5) + _649) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_428 + (_692 * _618)) / _699) + 0.5) + _651) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _715 = _713.w;
    float _717 = _715 - (_715 * _292);
    vec4 _741 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _745 = _741.z;
    float _748 = (_741.x * 2.0) + (-1.0);
    float _749 = (_741.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3706 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _755 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _756 = _745 * _292;
    float _763 = (cbMtdParam._m0[15u].w * ((_331 - _756) + ((_745 - _331) * _292))) + _756;
    float _767 = (cbMtdParam._m0[16u].x * _359) + _748;
    float _768 = (cbMtdParam._m0[16u].x * _360) + _749;
    float _771 = fma(_755, _201, fma(_768, _208, _767 * _194));
    float _774 = fma(_755, _202, fma(_768, _209, _767 * _195));
    float _777 = fma(_755, _203, fma(_768, _210, _767 * _196));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _3717 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _785 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3739 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3750 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _809 = _265 * _808;
    float _810 = _266 * _808;
    float _811 = _267 * _808;
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _840 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _843 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _856 = uint(roundEven(NORMAL.w)) * 13u;
    uint _858 = _856 + 9u;
    uint _859 = _858 + uint(cbMatDynParam._m0[0u].w);
    float _865 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_859].x;
    float _866 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_859].y;
    float _867 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_859].z;
    float _3761 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    vec4 _879 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _882 = _879.x * TEXCOORD.z;
    float _883 = dot(vec3(_782, _783, _784), vec3(_809, _810, _811));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _782) - _809;
    float _891 = (_886 * _783) - _810;
    float _892 = (_886 * _784) - _811;
    float _896 = abs(dot(vec3(_809, _810, _811), vec3(_782, _783, _784)));
    float _3794 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_785);
    float _911 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1252;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _979 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _983 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _987 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1010 = _943 + _782;
        float _1011 = _947 + _783;
        float _1012 = _951 + _784;
        float _1022 = fma(_1012, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010)) - _979;
        float _1023 = fma(_1012, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010)) - _983;
        float _1024 = fma(_1012, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010)) - _987;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_979 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_983 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[34u].z) + ((((((_987 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1080 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1046.x + (-0.5));
        float _1082 = _1080 * (_1046.y + (-0.5));
        float _1083 = _1080 * (_1046.z + (-0.5));
        float _1090 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1053.x + (-0.5));
        float _1092 = _1090 * (_1053.y + (-0.5));
        float _1093 = _1090 * (_1053.z + (-0.5));
        float _1100 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1060.x + (-0.5));
        float _1102 = _1100 * (_1060.y + (-0.5));
        float _1103 = _1100 * (_1060.z + (-0.5));
        float _1110 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1067.x + (-0.5));
        float _1112 = _1110 * (_1067.y + (-0.5));
        float _1113 = _1110 * (_1067.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1134 = (dot(vec3(_782, _783, _784), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1144 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3842 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1146 + 1.0))) + _1151) * _1114;
        float _1161 = _1082 * 0.5;
        float _1162 = _1092 * 0.5;
        float _1163 = _1102 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_782, _783, _784), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3875 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1188 + 1.0))) + _1193) * _1115;
        float _1203 = _1083 * 0.5;
        float _1204 = _1093 * 0.5;
        float _1205 = _1103 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_782, _783, _784), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3908 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1230 + 1.0))) + _1235) * _1116;
        _1252 = _1083;
        _1254 = _1082;
        _1255 = _1081;
        _1256 = _1093;
        _1257 = _1092;
        _1258 = _1091;
        _1259 = _1103;
        _1260 = _1102;
        _1261 = _1101;
        _1262 = _1116;
        _1263 = _1115;
        _1264 = _1114;
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _1253;
        _1254 = _1253;
        _1255 = _1253;
        _1256 = _1253;
        _1257 = _1253;
        _1258 = _1253;
        _1259 = _1253;
        _1260 = _1253;
        _1261 = _1253;
        _1262 = _1253;
        _1263 = _1253;
        _1264 = _1253;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1293 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1297 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1301 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1324 = _943 + _782;
        float _1325 = _947 + _783;
        float _1326 = _951 + _784;
        float _1336 = fma(_1326, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324)) - _1293;
        float _1337 = fma(_1326, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324)) - _1297;
        float _1338 = fma(_1326, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324)) - _1301;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1293 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1297 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[35u].z) + ((((((_1301 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1392 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1359.x + (-0.5));
        float _1394 = _1392 * (_1359.y + (-0.5));
        float _1395 = _1392 * (_1359.z + (-0.5));
        float _1402 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1366.x + (-0.5));
        float _1404 = _1402 * (_1366.y + (-0.5));
        float _1405 = _1402 * (_1366.z + (-0.5));
        float _1412 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1373.x + (-0.5));
        float _1414 = _1412 * (_1373.y + (-0.5));
        float _1415 = _1412 * (_1373.z + (-0.5));
        float _1422 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1380.x + (-0.5));
        float _1424 = _1422 * (_1380.y + (-0.5));
        float _1425 = _1422 * (_1380.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_782, _783, _784), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _3971 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1456 + 1.0))) + _1461) * _1426;
        float _1471 = _1394 * 0.5;
        float _1472 = _1404 * 0.5;
        float _1473 = _1414 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_782, _783, _784), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4004 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1498 + 1.0))) + _1503) * _1427;
        float _1513 = _1395 * 0.5;
        float _1514 = _1405 * 0.5;
        float _1515 = _1415 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_782, _783, _784), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4037 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1540 + 1.0))) + _1545) * _1428;
        _1562 = _1395;
        _1563 = _1394;
        _1564 = _1393;
        _1565 = _1405;
        _1566 = _1404;
        _1567 = _1403;
        _1568 = _1415;
        _1569 = _1414;
        _1570 = _1413;
        _1571 = _1428;
        _1572 = _1427;
        _1573 = _1426;
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1253;
        _1563 = _1253;
        _1564 = _1253;
        _1565 = _1253;
        _1566 = _1253;
        _1567 = _1253;
        _1568 = _1253;
        _1569 = _1253;
        _1570 = _1253;
        _1571 = _1253;
        _1572 = _1253;
        _1573 = _1253;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1265)) + _1265;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1267)) + _1267;
    float _1609 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1586));
    float _1630 = _890 * 0.5;
    float _1631 = _891 * 0.5;
    float _1632 = _892 * 0.5;
    float _1633 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1636 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1639 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1673;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1646 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1252, _1256, _1259, _1262));
        float _1650 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1654 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1661 = dot(vec4(cbModelParam._m0[39u]), vec4(_1630, _1631, _1632, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1684;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1675 = dot(vec4(cbModelParam._m0[40u]), vec4(_1630, _1631, _1632, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1688 = (_1684 * cbModelParam._m0[1u].x) + (_1673 * (1.0 - cbModelParam._m0[1u].x));
    float _1698 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1698 : min(cbModelParam._m0[25u].z, _1698));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1760 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1763 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1791;
        if (_1757 > 0.0)
        {
            _1791 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1791 = frontier_phi_54_52_ladder;
        }
        float _1959;
        if (_1760 > 0.0)
        {
            _1959 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1959 = frontier_phi_63_59_ladder;
        }
        float _2403;
        if (_1763 > 0.0)
        {
            _2403 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2403 = frontier_phi_75_70_ladder;
        }
        float _2405 = isnan(_1959) ? _1791 : (isnan(_1791) ? _1959 : min(_1791, _1959));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1757) + _1746;
        float _2411 = (_2406 * _1760) + _1750;
        float _2412 = (_2406 * _1763) + _1754;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2413;
        float _2417 = _2413 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 > _2417) || ((_2411 < _2415) || ((_2410 < _2415) || (_2410 > _2417))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1699);
            frontier_phi_53_75_ladder = _2662.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2662.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2662.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_53_75_ladder_2;
        _1781 = frontier_phi_53_75_ladder_1;
        _1783 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1699);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1787 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1787 : min(cbModelParam._m0[25u].w, _1787));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1854 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1857 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _1964;
        if (_1851 > 0.0)
        {
            _1964 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1964 = frontier_phi_65_61_ladder;
        }
        float _2430;
        if (_1854 > 0.0)
        {
            _2430 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2430 = frontier_phi_77_72_ladder;
        }
        float _2783;
        if (_1857 > 0.0)
        {
            _2783 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2783 = frontier_phi_89_84_ladder;
        }
        float _2785 = isnan(_2430) ? _1964 : (isnan(_1964) ? _2430 : min(_1964, _2430));
        float _2786 = isnan(_2783) ? _2785 : (isnan(_2785) ? _2783 : min(_2785, _2783));
        float _2790 = (_2786 * _1851) + _1840;
        float _2791 = (_2786 * _1854) + _1844;
        float _2792 = (_2786 * _1857) + _1848;
        float _2793 = _2786 * 9.9999997473787516355514526367188e-05;
        float _2794 = (-1.0) - _2793;
        float _2796 = _2793 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2792 > _2796) || ((_2792 < _2794) || ((_2791 > _2796) || ((_2791 < _2794) || ((_2790 < _2794) || (_2790 > _2796))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2792, cbModelParam._m0[17u].z, fma(_2791, cbModelParam._m0[17u].y, _2790 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2792, cbModelParam._m0[18u].z, fma(_2791, cbModelParam._m0[18u].y, _2790 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2792, cbModelParam._m0[19u].z, fma(_2791, cbModelParam._m0[19u].y, _2790 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_62_89_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_62_89_ladder_2;
        _1878 = frontier_phi_62_89_ladder_1;
        _1880 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1788);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1892 = ((((1.0 - _911) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_911 * _898)) * _882;
    float _1893 = _1892 * ((cbModelParam._m0[1u].w * (_1876 - _1779)) + _1779);
    float _1894 = _1892 * ((cbModelParam._m0[1u].w * (_1878 - _1781)) + _1781);
    float _1895 = _1892 * ((cbModelParam._m0[1u].w * (_1880 - _1783)) + _1783);
    float _1898 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1901 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1904 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, _1893 * cbSceneParam._m0[91u].x));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1951 = _1938 / _1950;
    float _1952 = _1942 / _1950;
    float _1953 = _1946 / _1950;
    float _2100;
    float _2101;
    float _2102;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1980 = ((uint(_1953 > cbSceneParam._m0[59u].y) + uint(_1953 > cbSceneParam._m0[59u].x)) + uint(_1953 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1981 = _1980 + 43u;
        uint _1989 = _1980 + 44u;
        uint _1997 = _1980 + 45u;
        uint _2005 = _1980 + 46u;
        float _2016 = fma(_1950, cbSceneParam._m0[_1981].w, fma(_1946, cbSceneParam._m0[_1981].z, fma(_1942, cbSceneParam._m0[_1981].y, _1938 * cbSceneParam._m0[_1981].x)));
        float _2020 = fma(_1950, cbSceneParam._m0[_1989].w, fma(_1946, cbSceneParam._m0[_1989].z, fma(_1942, cbSceneParam._m0[_1989].y, _1938 * cbSceneParam._m0[_1989].x)));
        float _2028 = fma(_1950, cbSceneParam._m0[_2005].w, fma(_1946, cbSceneParam._m0[_2005].z, fma(_1942, cbSceneParam._m0[_2005].y, _1938 * cbSceneParam._m0[_2005].x)));
        float _2033 = cbSceneParam._m0[33u].z * _2028;
        float _2035 = cbSceneParam._m0[33u].w * _2028;
        float _2038 = fma(_1950, cbSceneParam._m0[_1997].w, fma(_1946, cbSceneParam._m0[_1997].z, fma(_1942, cbSceneParam._m0[_1997].y, _1938 * cbSceneParam._m0[_1997].x))) / _2028;
        float _2086 = (cbSceneParam._m0[33u].x - sqrt(((_1952 * _1952) + (_1951 * _1951)) + (_1953 * _1953))) * cbSceneParam._m0[33u].y;
        float _4163 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2093 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2033 + _2016) / _2028, (_2035 + _2020) / _2028), _2038), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 + _2016) / _2028, (_2020 - _2033) / _2028), _2038), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 - _2033) / _2028, (_2020 - _2035) / _2028), _2038), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 - _2035) / _2028, (_2033 + _2020) / _2028), _2038), 0.0)).x), vec4(0.25)));
        _2100 = 1.0 - (_2093 * cbSceneParam._m0[34u].x);
        _2101 = 1.0 - (_2093 * cbSceneParam._m0[34u].y);
        _2102 = 1.0 - (_2093 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2100 = 1.0;
        _2101 = 1.0;
        _2102 = 1.0;
    }
    float _2166;
    float _2168;
    float _2170;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2154 = fma(_1950, cbSceneParam._m0[63u].w, fma(_1946, cbSceneParam._m0[63u].z, fma(_1942, cbSceneParam._m0[63u].y, _1938 * cbSceneParam._m0[63u].x)));
        float _2155 = fma(_1950, cbSceneParam._m0[60u].w, fma(_1946, cbSceneParam._m0[60u].z, fma(_1942, cbSceneParam._m0[60u].y, _1938 * cbSceneParam._m0[60u].x))) / _2154;
        float _2156 = fma(_1950, cbSceneParam._m0[61u].w, fma(_1946, cbSceneParam._m0[61u].z, fma(_1942, cbSceneParam._m0[61u].y, _1938 * cbSceneParam._m0[61u].x))) / _2154;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2155 >= cbSceneParam._m0[64u].x) && (_2156 >= cbSceneParam._m0[64u].y)) && (_2155 <= cbSceneParam._m0[64u].z)) && (_2156 <= cbSceneParam._m0[64u].w))
        {
            float _2443 = fma(_1950, cbSceneParam._m0[62u].w, fma(_1946, cbSceneParam._m0[62u].z, fma(_1942, cbSceneParam._m0[62u].y, _1938 * cbSceneParam._m0[62u].x))) / _2154;
            float _2447 = isnan(cbSceneParam._m0[41u].w) ? _2443 : (isnan(_2443) ? cbSceneParam._m0[41u].w : max(_2443, cbSceneParam._m0[41u].w));
            float _2490 = (cbSceneParam._m0[33u].x - sqrt(((_1952 * _1952) + (_1951 * _1951)) + (_1953 * _1953))) * cbSceneParam._m0[33u].y;
            float _4179 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
            float _2497 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2155, cbSceneParam._m0[33u].w + _2156), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2155, _2156 - cbSceneParam._m0[33u].z), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2155 - cbSceneParam._m0[33u].z, _2156 - cbSceneParam._m0[33u].w), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2155 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2156), _2447), 0.0)).x), vec4(0.25)));
            float _2501 = 1.0 - (_2497 * cbSceneParam._m0[34u].x);
            float _2502 = 1.0 - (_2497 * cbSceneParam._m0[34u].y);
            float _2503 = 1.0 - (_2497 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2501) ? _2100 : (isnan(_2100) ? _2501 : min(_2100, _2501));
            frontier_phi_74_73_ladder_1 = isnan(_2502) ? _2101 : (isnan(_2101) ? _2502 : min(_2101, _2502));
            frontier_phi_74_73_ladder_2 = isnan(_2503) ? _2102 : (isnan(_2102) ? _2503 : min(_2102, _2503));
        }
        else
        {
            frontier_phi_74_73_ladder = _2100;
            frontier_phi_74_73_ladder_1 = _2101;
            frontier_phi_74_73_ladder_2 = _2102;
        }
        _2166 = frontier_phi_74_73_ladder;
        _2168 = frontier_phi_74_73_ladder_1;
        _2170 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2166 = _2100;
        _2168 = _2101;
        _2170 = _2102;
    }
    uvec4 _2175 = floatBitsToUint(cbInstanceData._m0[_856 + 5u]);
    uint _2177 = _2175.x * 14u;
    uint _2178 = _2177 + 13u;
    float _2183 = _882 + (-1.0);
    float _2186 = (cbLight._m0[_2178].x * _2183) + 1.0;
    float _2187 = (cbLight._m0[_2178].y * _2183) + 1.0;
    uint _2188 = _2177 + 5u;
    float _2194 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2198 = _2177 + 4u;
    float _2207 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2211 = _2177 | 1u;
    float _2222 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_782, _783, _784));
    float _2225 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_782, _783, _784));
    float _4215 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _4226 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2230 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _2232 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2239 = ((cbLight._m0[_2188].x * _2194) * _2232) + (((cbLight._m0[_2198].x * _2166) * _2207) * _2230);
    float _2240 = ((_2194 * cbLight._m0[_2188].y) * _2232) + (((cbLight._m0[_2198].y * _2168) * _2207) * _2230);
    float _2241 = ((_2194 * cbLight._m0[_2188].z) * _2232) + (((cbLight._m0[_2198].z * _2170) * _2207) * _2230);
    uint _2243 = _2177 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _785) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2177].x + _809;
    float _2259 = cbLight._m0[_2177].y + _810;
    float _2260 = cbLight._m0[_2177].z + _811;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2177].xyz));
    float _4237 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2272 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2273 = dot(vec3(_782, _783, _784), vec3(_2265, _2266, _2267));
    float _4259 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2265, _2266, _2267));
    float _4270 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2297 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2272 * ((_2271 * _2297) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2297) + _2257) * _2271))) * _2271;
    float _4281 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2324 = _2177 + 9u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _785) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2211].x + _809;
    float _2338 = cbLight._m0[_2211].y + _810;
    float _2339 = cbLight._m0[_2211].z + _811;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2211].xyz));
    float _4292 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2351 = dot(vec3(_782, _783, _784), vec3(_2344, _2345, _2346));
    float _4303 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2344, _2345, _2346));
    float _4314 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2336 * _2336;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2373 = 1.0 - _2336;
    float _2383 = (0.5 / (((_2272 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2373) + _2336) * _2350))) * _2350;
    float _4325 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    float _2395 = (((_2372 * cbLight._m0[_2324].x) * _2385) * _2194) + ((((cbLight._m0[_2243].x * _2166) * _2296) * _2310) * _2207);
    float _2396 = (((_2372 * cbLight._m0[_2324].y) * _2385) * _2194) + ((((cbLight._m0[_2243].y * _2168) * _2296) * _2310) * _2207);
    float _2397 = (((_2372 * cbLight._m0[_2324].z) * _2385) * _2194) + ((((cbLight._m0[_2243].z * _2170) * _2296) * _2310) * _2207);
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_2175.y == 0u)
    {
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.x;
        uint _2527 = uint((float(_2515.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2516))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2516)));
        float _2537 = (log2(_1953 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2538 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        uint _2541 = uint(isnan(14.0) ? _2538 : (isnan(_2538) ? 14.0 : min(_2538, 14.0)));
        uvec4 _2546 = texelFetch(g_lightClusterGridBuffer, int(((_2541 << 2u) + (_2527 << 6u)) >> 2u));
        uint _2547 = _2546.x;
        uint _2548 = _2515.z;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((((1u << ((_2548 >> 4u) & 15u)) + 4294967295u) & _2547) == 0u) || ((_2548 & 240u) == 0u))
        {
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
        }
        else
        {
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            uint _2847 = 0u;
            uint _2856;
            bool _2857;
            for (;;)
            {
                _2856 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                _2857 = _2856 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2857)
                {
                    frontier_phi_98_pred = _2841;
                    frontier_phi_98_pred_1 = _2842;
                    frontier_phi_98_pred_2 = _2846;
                    frontier_phi_98_pred_3 = _2845;
                    frontier_phi_98_pred_4 = _2844;
                    frontier_phi_98_pred_5 = _2843;
                }
                else
                {
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    uint _2992;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2856;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    for (;;)
                    {
                        uint _2996 = uint(findLSB(_2992)) + (_2847 << 5u);
                        uint _2993 = (_2992 + 4294967295u) & _2992;
                        uint _2998 = _2996 * 48u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3018 = (_2996 * 48u) + 4u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3037 = (_2996 * 48u) + 8u;
                        vec3 _3048 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x));
                        float _3052 = _3012.x - _1951;
                        float _3053 = _3012.y - _1952;
                        float _3054 = _3012.z - _1953;
                        float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                        float _3058 = inversesqrt(_3055);
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3062 = dot(vec3(_837, _840, _843), vec3(_3059, _3060, _3061));
                        float _3067 = 1.0 - (_3055 * _3012.w);
                        float _4346 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3069 = sqrt(_3055) * _3031.w;
                        float _3072 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _3062) + _3073;
                        float _3079 = _3069 * _3069;
                        float _3083 = ((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3068) / ((_3079 * 0.699999988079071044921875) + 1.0);
                        float _3087 = (-0.0) - _1951;
                        float _3088 = (-0.0) - _1952;
                        float _3089 = (-0.0) - _1953;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3103 = exp2(log2(1.0 / ((_3079 * 3.5) + 5.0)) * 0.25);
                        float _3104 = 1.0 - _898;
                        float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                        float _3112 = _3111 * _3111;
                        float _3113 = _3112 * _3112;
                        float _3114 = _3094 + _3059;
                        float _3115 = _3095 + _3060;
                        float _3116 = _3096 + _3061;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3124 = dot(vec3(_837, _840, _843), vec3(_3094, _3095, _3096));
                        float _4362 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3128 = dot(vec3(_837, _840, _843), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                        float _4373 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                        float _3136 = _3072 * _3112;
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3062) + _3137;
                        float _4384 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3142 = 1.0 - _3112;
                        float _3152 = (0.5 / (((_3141 * ((_3127 * _3142) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3112) * _3127))) * _3141;
                        float _4395 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3163 = (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) / ((_3135 * _3135) * ((_3079 * 2.1991131305694580078125) + 3.141590118408203125))) * _3068;
                        _2921 = (_3083 * _3031.x) + _2989;
                        _2922 = (_3083 * _3031.y) + _2990;
                        _2923 = (_3083 * _3031.z) + _2991;
                        _2918 = (_3163 * _3048.x) + _2986;
                        _2919 = (_3163 * _3048.y) + _2987;
                        _2920 = (_3163 * _3048.z) + _2988;
                        if (_2993 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2993;
                        }
                    }
                    frontier_phi_98_pred = _2918;
                    frontier_phi_98_pred_1 = _2919;
                    frontier_phi_98_pred_2 = _2923;
                    frontier_phi_98_pred_3 = _2922;
                    frontier_phi_98_pred_4 = _2921;
                    frontier_phi_98_pred_5 = _2920;
                }
                _2672 = frontier_phi_98_pred;
                _2674 = frontier_phi_98_pred_1;
                _2682 = frontier_phi_98_pred_2;
                _2680 = frontier_phi_98_pred_3;
                _2678 = frontier_phi_98_pred_4;
                _2676 = frontier_phi_98_pred_5;
                uint _2848 = _2847 + 1u;
                if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2841 = _2672;
                    _2842 = _2674;
                    _2843 = _2676;
                    _2844 = _2678;
                    _2845 = _2680;
                    _2846 = _2682;
                    _2847 = _2848;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
        }
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.z;
        uint _2688 = (_2686 >> 8u) & 15u;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((4294967295u << _2688) & _2547) == 0u)
        {
            _2809 = _2671;
            _2811 = _2673;
            _2813 = _2675;
            _2815 = _2677;
            _2817 = _2679;
            _2819 = _2681;
        }
        else
        {
            float _2834 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
            float _2835 = _2834 * _1951;
            float _2836 = _2834 * _1952;
            float _2837 = _2834 * _1953;
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2688 < ((_2686 >> 12u) & 15u))
            {
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2969 = _2671;
                float _2970 = _2673;
                float _2971 = _2675;
                float _2972 = _2677;
                float _2973 = _2679;
                float _2974 = _2681;
                uint _2975 = _2688;
                uint _2984;
                bool _2985;
                for (;;)
                {
                    _2984 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                    _2985 = _2984 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2985)
                    {
                        frontier_phi_104_pred = _2974;
                        frontier_phi_104_pred_1 = _2973;
                        frontier_phi_104_pred_2 = _2972;
                        frontier_phi_104_pred_3 = _2971;
                        frontier_phi_104_pred_4 = _2970;
                        frontier_phi_104_pred_5 = _2969;
                    }
                    else
                    {
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3181 = _2969;
                        float _3182 = _2970;
                        float _3183 = _2971;
                        float _3184 = _2972;
                        float _3185 = _2973;
                        float _3186 = _2974;
                        uint _3187 = _2984;
                        uint _3188;
                        vec4 _3213;
                        float _3214;
                        vec4 _3229;
                        vec3 _3241;
                        vec4 _3256;
                        vec4 _3271;
                        float _3317;
                        bool _3318;
                        for (;;)
                        {
                            uint _3198 = ((_2975 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3187));
                            _3188 = (_3187 + 4294967295u) & _3187;
                            uint _3200 = _3198 * 40u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3214 = _3213.w;
                            uint _3216 = (_3198 * 40u) + 4u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3198 * 40u) + 8u;
                            _3241 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x));
                            uint _3243 = (_3198 * 40u) + 16u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3198 * 40u) + 20u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3198 * 40u) + 24u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3292 = (_3198 * 40u) + 28u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3317 = fma(_1953, _3305.z, fma(_1952, _3305.y, _3305.x * _1951)) + _3305.w;
                            _3318 = !((fma(_1953, _3286.z, fma(_1952, _3286.y, _3286.x * _1951)) + _3286.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3318)
                            {
                                float _3345 = _3213.x - _1951;
                                float _3346 = _3213.y - _1952;
                                float _3347 = _3213.z - _1953;
                                float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                                float _3351 = inversesqrt(_3348);
                                float _3352 = _3351 * _3345;
                                float _3353 = _3351 * _3346;
                                float _3354 = _3351 * _3347;
                                float _3358 = 1.0 - (_3348 / (_3214 * _3214));
                                float _4406 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3363 = sqrt(_3348) * _3229.w;
                                float _3365 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                                float _3366 = _3365 * _3365;
                                float _3369 = ((1.0 - _3366) * dot(vec3(_3352, _3353, _3354), vec3(_837, _840, _843))) + _3366;
                                float _3372 = _3363 * _3363;
                                float _3376 = (fma(_1953, _3256.z, fma(_1952, _3256.y, _3256.x * _1951)) + _3256.w) / _3317;
                                float _3377 = (fma(_1953, _3271.z, fma(_1952, _3271.y, _3271.x * _1951)) + _3271.w) / _3317;
                                float _3381 = 1.0 - dot(vec2(_3376, _3377), vec2(_3376, _3377));
                                float _4422 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3383 = _3382 * (((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3359) / ((_3372 * 0.699999988079071044921875) + 1.0));
                                float _3395 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                                float _3396 = 1.0 - _898;
                                float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                                float _3404 = _3403 * _3403;
                                float _3405 = _3404 * _3404;
                                float _3406 = _3352 - _2835;
                                float _3407 = _3353 - _2836;
                                float _3408 = _3354 - _2837;
                                float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                                float _3416 = dot(vec3(_837, _840, _843), vec3((-0.0) - _2835, (-0.0) - _2836, (-0.0) - _2837));
                                float _4433 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3420 = dot(vec3(_837, _840, _843), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                                float _4444 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                                float _3428 = _3365 * _3404;
                                float _3429 = _3428 * _3428;
                                float _3435 = ((1.0 - _3429) * dot(vec3(_837, _840, _843), vec3(_3352, _3353, _3354))) + _3429;
                                float _4455 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3437 = 1.0 - _3404;
                                float _3447 = (0.5 / (((_3436 * ((_3419 * _3437) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3404) * _3419))) * _3436;
                                float _4466 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3457 = (_3382 * _3359) * (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3427 * _3427) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_110_pred = _3457 * _3241.z;
                                frontier_phi_110_pred_1 = _3383 * _3229.z;
                                frontier_phi_110_pred_2 = _3383 * _3229.y;
                                frontier_phi_110_pred_3 = _3383 * _3229.x;
                                frontier_phi_110_pred_4 = _3457 * _3241.y;
                                frontier_phi_110_pred_5 = _3457 * _3241.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3463 = frontier_phi_110_pred;
                            _3466 = frontier_phi_110_pred_1;
                            _3465 = frontier_phi_110_pred_2;
                            _3464 = frontier_phi_110_pred_3;
                            _3462 = frontier_phi_110_pred_4;
                            _3461 = frontier_phi_110_pred_5;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            if (_3188 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3188;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3173;
                        frontier_phi_104_pred_1 = _3172;
                        frontier_phi_104_pred_2 = _3171;
                        frontier_phi_104_pred_3 = _3170;
                        frontier_phi_104_pred_4 = _3169;
                        frontier_phi_104_pred_5 = _3168;
                    }
                    _2820 = frontier_phi_104_pred;
                    _2818 = frontier_phi_104_pred_1;
                    _2816 = frontier_phi_104_pred_2;
                    _2814 = frontier_phi_104_pred_3;
                    _2812 = frontier_phi_104_pred_4;
                    _2810 = frontier_phi_104_pred_5;
                    uint _2976 = _2975 + 1u;
                    if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2969 = _2810;
                        _2970 = _2812;
                        _2971 = _2814;
                        _2972 = _2816;
                        _2973 = _2818;
                        _2974 = _2820;
                        _2975 = _2976;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2820;
                frontier_phi_91_92_ladder_1 = _2818;
                frontier_phi_91_92_ladder_2 = _2816;
                frontier_phi_91_92_ladder_3 = _2814;
                frontier_phi_91_92_ladder_4 = _2812;
                frontier_phi_91_92_ladder_5 = _2810;
            }
            else
            {
                frontier_phi_91_92_ladder = _2681;
                frontier_phi_91_92_ladder_1 = _2679;
                frontier_phi_91_92_ladder_2 = _2677;
                frontier_phi_91_92_ladder_3 = _2675;
                frontier_phi_91_92_ladder_4 = _2673;
                frontier_phi_91_92_ladder_5 = _2671;
            }
            _2809 = frontier_phi_91_92_ladder_5;
            _2811 = frontier_phi_91_92_ladder_4;
            _2813 = frontier_phi_91_92_ladder_3;
            _2815 = frontier_phi_91_92_ladder_2;
            _2817 = frontier_phi_91_92_ladder_1;
            _2819 = frontier_phi_91_92_ladder;
        }
        float _2824 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2560 = (_2824 * _2815) + _2239;
        _2562 = (_2824 * _2817) + _2240;
        _2564 = (_2824 * _2819) + _2241;
        _2566 = ((_2809 * 0.039999999105930328369140625) * _2824) + _2395;
        _2568 = ((_2811 * 0.039999999105930328369140625) * _2824) + _2396;
        _2570 = ((_2813 * 0.039999999105930328369140625) * _2824) + _2397;
    }
    else
    {
        _2560 = _2239;
        _2562 = _2240;
        _2564 = _2241;
        _2566 = _2395;
        _2568 = _2396;
        _2570 = _2397;
    }
    uint _2576 = _858 + uint(cbMatDynParam._m0[0u].w);
    float _4482 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4493 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4504 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2601 = (((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2560 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _882))) + ((_2566 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2576].x * ((_717 * ((_673 - _601) - (_673 * _292))) + _601));
    float _2603 = ((cbInstanceData._m0[_2576].y * ((_717 * ((_674 - _602) - (_674 * _292))) + _602)) + ((_2568 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2562 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _882)));
    float _2605 = ((cbInstanceData._m0[_2576].z * ((_717 * ((_675 - _603) - (_675 * _292))) + _603)) + ((_2570 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2564 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _882)));
    uint _2609 = _856 + 6u;
    float _2617 = _817 / cbSceneParam._m0[86u].x;
    float _2618 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2632 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2634 = _2632.x;
    float _2635 = _2632.y;
    float _2636 = _2632.z;
    float _2637 = _2632.w;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _2696 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _2697 = _2696 / _804;
        float _2708 = _2697 * _265;
        float _2709 = _266 * _2697;
        float _2710 = (-0.0) - _2709;
        float _2711 = _2697 * _267;
        float _2713 = (cbSceneParam._m0[77u].w * _2710) / _2696;
        float _2714 = _2713 + cbSceneParam._m0[79u].w;
        float _2715 = cbSceneParam._m0[79u].w - _2709;
        float _2721 = sqrt(((_2708 * _2708) + (_2709 * _2709)) + (_2711 * _2711));
        float _2724 = (1.0 - (cbSceneParam._m0[77u].w / _2696)) * _2721;
        float _2729 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2731 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2931;
        if (abs((_2710 - _2713) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2931 = ((((_2714 > 0.0) ? exp2(_2729 * _2714) : (2.0 - exp2(_2731 * _2714))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2724;
        }
        else
        {
            float _2870 = 1.0 / cbSceneParam._m0[80u].x;
            float _2871 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : max(_2714, _2715));
            float _2872 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : min(_2714, _2715));
            float _2881 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : min(_2871, 0.0));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            _2931 = ((abs(_2721 / _2710) * cbSceneParam._m0[80u].y) * ((((_2881 - _2882) * 2.0) - ((exp2(_2729 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)))) - exp2(_2729 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))))) * _2870)) - ((exp2(_2731 * _2881) - exp2(_2731 * _2882)) * _2870))) + (_2724 * cbSceneParam._m0[80u].z);
        }
        vec4 _2933 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, 1.0), 0.0);
        float _2942 = exp2((_2931 * (-1.44269502162933349609375)) * (1.0 - _2933.w));
        float _2943 = log2(_2942);
        float _2959 = log2(_2637);
        _2733 = (exp2(_2959 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].x)) * _2933.x) / cbSceneParam._m0[78u].x)) + _2634;
        _2735 = (exp2(_2959 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].y)) * _2933.y) / cbSceneParam._m0[78u].y)) + _2635;
        _2737 = (exp2(_2959 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].z)) * _2933.z) / cbSceneParam._m0[78u].z)) + _2636;
        _2739 = _2942 * _2637;
    }
    else
    {
        _2733 = _2634;
        _2735 = _2635;
        _2737 = _2636;
        _2739 = _2637;
    }
    float _2751 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2752 = _2751 == 3.0;
    float _2753 = log2(_2739);
    float _2760 = exp2(_2753 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0)));
    float _2761 = exp2(_2753 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0)));
    float _2762 = exp2(_2753 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)));
    float _2771 = (_2751 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2771 * (_2752 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.y = _2771 * (_2752 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.z = _2771 * (_2752 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.w = cbInstanceData._m0[_2609].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2609].w;
}


