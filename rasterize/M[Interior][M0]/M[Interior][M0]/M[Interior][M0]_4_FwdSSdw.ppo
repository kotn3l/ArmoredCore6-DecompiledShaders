#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _946;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _327 = cbMtdParam._m0[22u].y + _257;
    float _328 = cbMtdParam._m0[22u].z + _258;
    float _329 = cbMtdParam._m0[22u].w + _259;
    float _343 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_186, _187, _188));
    float _344 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_200, _201, _202));
    float _345 = (-0.0) - dot(vec3(_327, _328, _329), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _349 * _345;
    float _352 = (cbMtdParam._m0[19u].x * _343) * _349;
    float _354 = (cbMtdParam._m0[18u].w * _344) * _349;
    float _355 = fract(TEXCOORD.x);
    float _356 = fract(TEXCOORD.y);
    float _362;
    if (_352 > 0.0)
    {
        _362 = (1.0 - _355) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _355) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _362 = frontier_phi_3_2_ladder;
    }
    float _370;
    if (_354 > 0.0)
    {
        _370 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _370 = frontier_phi_7_6_ladder;
    }
    float _374 = (_350 > 0.0) ? (cbMtdParam._m0[15u].x / _350) : 5000.0;
    float _375 = isnan(_370) ? _362 : (isnan(_362) ? _370 : min(_362, _370));
    float _376 = isnan(_374) ? _375 : (isnan(_375) ? _374 : min(_375, _374));
    float _380 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = ((_376 * _350) + _380) / _380;
    vec4 _412 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_355 + (-0.5)) + (_376 * _352)) / _387) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_356 + (-0.5)) + (_376 * _354)) / _387) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    vec4 _442 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _450 = (_442.x * 2.0) + (-1.0);
    float _452 = (_442.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3055 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0))));
    float _459 = _442.z * _284;
    float _462 = fma(_458, _193, fma(_452, _200, _450 * _186));
    float _465 = fma(_458, _194, fma(_452, _201, _450 * _187));
    float _468 = fma(_458, _195, fma(_452, _202, _450 * _188));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _475 = _472 * _468;
    float _3066 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _476 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
    float _3077 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3088 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3099 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _499 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _500 = _257 * _499;
    float _501 = _258 * _499;
    float _502 = _259 * _499;
    float _508 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _509 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _530 = fma(_475, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _533 = fma(_475, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _536 = fma(_475, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _549 = uint(roundEven(NORMAL.w)) * 13u;
    uint _551 = _549 + 9u;
    uint _552 = _551 + uint(cbMatDynParam._m0[0u].w);
    float _558 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0)))) * cbInstanceData._m0[_552].x;
    float _559 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0)))) * cbInstanceData._m0[_552].y;
    float _560 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0)))) * cbInstanceData._m0[_552].z;
    float _3110 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
    float _3121 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
    float _3132 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
    vec4 _572 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _508, cbSceneParam._m0[86u].y * _509));
    float _575 = _572.x * TEXCOORD.z;
    float _576 = dot(vec3(_473, _474, _475), vec3(_500, _501, _502));
    float _579 = _576 * 2.0;
    float _583 = (_579 * _473) - _500;
    float _584 = (_579 * _474) - _501;
    float _585 = (_579 * _475) - _502;
    float _589 = abs(dot(vec3(_500, _501, _502), vec3(_473, _474, _475)));
    float _3143 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _591 = sqrt(_476);
    float _604 = exp2((_591 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_591 * 3.0));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _945;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_644, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636));
        float _676 = fma(_644, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636));
        float _680 = fma(_644, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636));
        float _703 = _636 + _473;
        float _704 = _640 + _474;
        float _705 = _644 + _475;
        float _715 = fma(_705, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703)) - _672;
        float _716 = fma(_705, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703)) - _676;
        float _717 = fma(_705, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703)) - _680;
        float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
        float _734 = ((_721 * _715) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _735 = ((_721 * _716) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_721 * _717) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        float _773 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_739.x + (-0.5));
        float _775 = _773 * (_739.y + (-0.5));
        float _776 = _773 * (_739.z + (-0.5));
        float _783 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_746.x + (-0.5));
        float _785 = _783 * (_746.y + (-0.5));
        float _786 = _783 * (_746.z + (-0.5));
        float _793 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_753.x + (-0.5));
        float _795 = _793 * (_753.y + (-0.5));
        float _796 = _793 * (_753.z + (-0.5));
        float _803 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_760.x + (-0.5));
        float _805 = _803 * (_760.y + (-0.5));
        float _806 = _803 * (_760.z + (-0.5));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = _774 * 0.5;
        float _811 = _784 * 0.5;
        float _812 = _794 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _827 = (dot(vec3(_473, _474, _475), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3169 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _837 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3180 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3191 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0))) * (_839 + 1.0))) + _844) * _807;
        float _854 = _775 * 0.5;
        float _855 = _785 * 0.5;
        float _856 = _795 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_473, _474, _475), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3202 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3213 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3224 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))) * (_881 + 1.0))) + _886) * _808;
        float _896 = _776 * 0.5;
        float _897 = _786 * 0.5;
        float _898 = _796 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_473, _474, _475), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3235 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3246 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3257 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * (_923 + 1.0))) + _928) * _809;
        _945 = _776;
        _947 = _775;
        _948 = _774;
        _949 = _786;
        _950 = _785;
        _951 = _784;
        _952 = _796;
        _953 = _795;
        _954 = _794;
        _955 = _809;
        _956 = _808;
        _957 = _807;
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
    }
    else
    {
        _945 = _946;
        _947 = _946;
        _948 = _946;
        _949 = _946;
        _950 = _946;
        _951 = _946;
        _952 = _946;
        _953 = _946;
        _954 = _946;
        _955 = _946;
        _956 = _946;
        _957 = _946;
        _958 = 0.0;
        _959 = 0.0;
        _960 = 0.0;
    }
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _986 = fma(_644, cbModelParam._m0[30u].z, fma(_640, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _636));
        float _990 = fma(_644, cbModelParam._m0[31u].z, fma(_640, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _636));
        float _994 = fma(_644, cbModelParam._m0[32u].z, fma(_640, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _636));
        float _1017 = _636 + _473;
        float _1018 = _640 + _474;
        float _1019 = _644 + _475;
        float _1029 = fma(_1019, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017)) - _986;
        float _1030 = fma(_1019, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017)) - _990;
        float _1031 = fma(_1019, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017)) - _994;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_986 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_990 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[35u].z) + ((((((_994 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1085 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1052.x + (-0.5));
        float _1087 = _1085 * (_1052.y + (-0.5));
        float _1088 = _1085 * (_1052.z + (-0.5));
        float _1095 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1059.x + (-0.5));
        float _1097 = _1095 * (_1059.y + (-0.5));
        float _1098 = _1095 * (_1059.z + (-0.5));
        float _1105 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1066.x + (-0.5));
        float _1107 = _1105 * (_1066.y + (-0.5));
        float _1108 = _1105 * (_1066.z + (-0.5));
        float _1115 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1073.x + (-0.5));
        float _1117 = _1115 * (_1073.y + (-0.5));
        float _1118 = _1115 * (_1073.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_473, _474, _475), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3298 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3309 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3320 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * (_1149 + 1.0))) + _1154) * _1119;
        float _1164 = _1087 * 0.5;
        float _1165 = _1097 * 0.5;
        float _1166 = _1107 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_473, _474, _475), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3353 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_1191 + 1.0))) + _1196) * _1120;
        float _1206 = _1088 * 0.5;
        float _1207 = _1098 * 0.5;
        float _1208 = _1108 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_473, _474, _475), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3386 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_1233 + 1.0))) + _1238) * _1121;
        _1255 = _1088;
        _1256 = _1087;
        _1257 = _1086;
        _1258 = _1098;
        _1259 = _1097;
        _1260 = _1096;
        _1261 = _1108;
        _1262 = _1107;
        _1263 = _1106;
        _1264 = _1121;
        _1265 = _1120;
        _1266 = _1119;
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _946;
        _1256 = _946;
        _1257 = _946;
        _1258 = _946;
        _1259 = _946;
        _1260 = _946;
        _1261 = _946;
        _1262 = _946;
        _1263 = _946;
        _1264 = _946;
        _1265 = _946;
        _1266 = _946;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _958)) + _958;
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _959)) + _959;
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1302 = fma(_1281, cbSceneParam._m0[89u].z, fma(_1280, cbSceneParam._m0[89u].y, _1279 * cbSceneParam._m0[89u].x));
    float _1305 = fma(_1281, cbSceneParam._m0[90u].z, fma(_1280, cbSceneParam._m0[90u].y, _1279 * cbSceneParam._m0[90u].x));
    float _1308 = fma(_1281, cbSceneParam._m0[91u].z, fma(_1280, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1279));
    float _1323 = _583 * 0.5;
    float _1324 = _584 * 0.5;
    float _1325 = _585 * 0.5;
    float _1326 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1329 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1332 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1366;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1339 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_945, _949, _952, _955));
        float _1343 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_947, _950, _953, _956));
        float _1347 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_948, _951, _954, _957));
        float _1354 = dot(vec4(cbModelParam._m0[39u]), vec4(_1323, _1324, _1325, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1377;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1368 = dot(vec4(cbModelParam._m0[40u]), vec4(_1323, _1324, _1325, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1381 = (_1377 * cbModelParam._m0[1u].x) + (_1366 * (1.0 - cbModelParam._m0[1u].x));
    float _1391 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1391 : min(cbModelParam._m0[25u].z, _1391));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1440 = fma(_644, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636)) + cbModelParam._m0[13u].w;
        float _1444 = fma(_644, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636)) + cbModelParam._m0[14u].w;
        float _1448 = fma(_644, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636)) + cbModelParam._m0[15u].w;
        float _1451 = fma(_585, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _583));
        float _1454 = fma(_585, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _583));
        float _1457 = fma(_585, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _583));
        float _1485;
        if (_1451 > 0.0)
        {
            _1485 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1485 = frontier_phi_22_20_ladder;
        }
        float _1855;
        if (_1454 > 0.0)
        {
            _1855 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1855 = frontier_phi_31_27_ladder;
        }
        float _2171;
        if (_1457 > 0.0)
        {
            _2171 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2171 = frontier_phi_45_38_ladder;
        }
        float _2173 = isnan(_1855) ? _1485 : (isnan(_1485) ? _1855 : min(_1485, _1855));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1451) + _1440;
        float _2179 = (_2174 * _1454) + _1444;
        float _2180 = (_2174 * _1457) + _1448;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2181;
        float _2184 = _2181 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2180 > _2184) || ((_2180 < _2182) || ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 < _2182) || (_2178 > _2184))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2180, cbModelParam._m0[9u].z, fma(_2179, cbModelParam._m0[9u].y, _2178 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2180, cbModelParam._m0[10u].z, fma(_2179, cbModelParam._m0[10u].y, _2178 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2180, cbModelParam._m0[11u].z, fma(_2179, cbModelParam._m0[11u].y, _2178 * cbModelParam._m0[11u].x))), _1392);
            frontier_phi_21_45_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1473 = frontier_phi_21_45_ladder_2;
        _1475 = frontier_phi_21_45_ladder_1;
        _1477 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_583, _584, _585), _1392);
        _1473 = _1461.x * cbModelParam._m0[1u].y;
        _1475 = _1461.y * cbModelParam._m0[1u].y;
        _1477 = _1461.z * cbModelParam._m0[1u].y;
    }
    float _1481 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1481 : min(cbModelParam._m0[25u].w, _1481));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1535 = fma(_644, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636)) + cbModelParam._m0[21u].w;
        float _1539 = fma(_644, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636)) + cbModelParam._m0[22u].w;
        float _1543 = fma(_644, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636)) + cbModelParam._m0[23u].w;
        float _1546 = fma(_585, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _583));
        float _1549 = fma(_585, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _583));
        float _1552 = fma(_585, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _583));
        float _1860;
        if (_1546 > 0.0)
        {
            _1860 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1860 = frontier_phi_33_29_ladder;
        }
        float _2197;
        if (_1549 > 0.0)
        {
            _2197 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2197 = frontier_phi_47_40_ladder;
        }
        float _2366;
        if (_1552 > 0.0)
        {
            _2366 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2366 = frontier_phi_61_56_ladder;
        }
        float _2368 = isnan(_2197) ? _1860 : (isnan(_1860) ? _2197 : min(_1860, _2197));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1546) + _1535;
        float _2374 = (_2369 * _1549) + _1539;
        float _2375 = (_2369 * _1552) + _1543;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2376;
        float _2379 = _2376 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2375 > _2379) || ((_2375 < _2377) || ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 < _2377) || (_2373 > _2379))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2375, cbModelParam._m0[17u].z, fma(_2374, cbModelParam._m0[17u].y, _2373 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2375, cbModelParam._m0[18u].z, fma(_2374, cbModelParam._m0[18u].y, _2373 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2375, cbModelParam._m0[19u].z, fma(_2374, cbModelParam._m0[19u].y, _2373 * cbModelParam._m0[19u].x))), _1482);
            frontier_phi_30_61_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1571 = frontier_phi_30_61_ladder_2;
        _1573 = frontier_phi_30_61_ladder_1;
        _1575 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_583, _584, _585), _1482);
        _1571 = _1555.x * cbModelParam._m0[1u].z;
        _1573 = _1555.y * cbModelParam._m0[1u].z;
        _1575 = _1555.z * cbModelParam._m0[1u].z;
    }
    float _1587 = ((((1.0 - _604) * ((_591 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_604 * _591)) * _575;
    float _1588 = _1587 * ((cbModelParam._m0[1u].w * (_1571 - _1473)) + _1473);
    float _1589 = _1587 * ((cbModelParam._m0[1u].w * (_1573 - _1475)) + _1475);
    float _1590 = _1587 * ((cbModelParam._m0[1u].w * (_1575 - _1477)) + _1477);
    float _1593 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, _1588 * cbSceneParam._m0[91u].x));
    vec4 _1607 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_508, _509));
    float _1609 = _1607.w;
    float _1621 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1609);
    float _1622 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1609);
    float _1623 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1609);
    uvec4 _1627 = floatBitsToUint(cbInstanceData._m0[_549 + 5u]);
    uint _1629 = _1627.x * 14u;
    uint _1630 = _1629 + 13u;
    float _1635 = _575 + (-1.0);
    float _1638 = (cbLight._m0[_1630].x * _1635) + 1.0;
    float _1639 = (cbLight._m0[_1630].y * _1635) + 1.0;
    uint _1640 = _1629 + 5u;
    float _1646 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1650 = _1629 + 4u;
    float _1659 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1663 = _1629 | 1u;
    float _1674 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_473, _474, _475));
    float _1677 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_473, _474, _475));
    float _3522 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _3533 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1682 = (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * 0.3183098733425140380859375;
    float _1684 = (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * 0.3183098733425140380859375;
    float _1691 = ((cbLight._m0[_1640].x * _1646) * _1684) + (((cbLight._m0[_1650].x * _1621) * _1659) * _1682);
    float _1692 = ((_1646 * cbLight._m0[_1640].y) * _1684) + (((cbLight._m0[_1650].y * _1622) * _1659) * _1682);
    float _1693 = ((_1646 * cbLight._m0[_1640].z) * _1684) + (((cbLight._m0[_1650].z * _1623) * _1659) * _1682);
    uint _1695 = _1629 + 8u;
    float _1708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _476) * 0.949999988079071044921875);
    float _1709 = _1708 * _1708;
    float _1710 = cbLight._m0[_1629].x + _500;
    float _1711 = cbLight._m0[_1629].y + _501;
    float _1712 = cbLight._m0[_1629].z + _502;
    float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
    float _1717 = _1716 * _1710;
    float _1718 = _1716 * _1711;
    float _1719 = _1716 * _1712;
    float _1720 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1629].xyz));
    float _3544 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _1724 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _1725 = dot(vec3(_473, _474, _475), vec3(_1717, _1718, _1719));
    float _3566 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _1729 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1717, _1718, _1719));
    float _3577 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1733 = _1709 * _1709;
    float _1737 = ((_1728 * _1728) * (_1733 + (-1.0))) + 1.0;
    float _1748 = (exp2(log2(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1749 = 1.0 - _1709;
    float _1760 = (0.5 / (((_1724 * ((_1723 * _1749) + _1709)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1749) + _1709) * _1723))) * _1723;
    float _3588 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1762 = (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1733 / ((_1737 * _1737) * 3.141590118408203125));
    uint _1776 = _1629 + 9u;
    float _1787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _476) * 0.949999988079071044921875);
    float _1788 = _1787 * _1787;
    float _1789 = cbLight._m0[_1663].x + _500;
    float _1790 = cbLight._m0[_1663].y + _501;
    float _1791 = cbLight._m0[_1663].z + _502;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1796 = _1795 * _1789;
    float _1797 = _1795 * _1790;
    float _1798 = _1795 * _1791;
    float _1799 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1663].xyz));
    float _3599 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _1803 = dot(vec3(_473, _474, _475), vec3(_1796, _1797, _1798));
    float _3610 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1796, _1797, _1798));
    float _3621 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1788 * _1788;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1824 = (exp2(log2(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1825 = 1.0 - _1788;
    float _1835 = (0.5 / (((_1724 * ((_1802 * _1825) + _1788)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1825) + _1788) * _1802))) * _1802;
    float _3632 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    float _1847 = (((_1824 * cbLight._m0[_1776].x) * _1837) * _1646) + ((((cbLight._m0[_1695].x * _1621) * _1748) * _1762) * _1659);
    float _1848 = (((_1824 * cbLight._m0[_1776].y) * _1837) * _1646) + ((((cbLight._m0[_1695].y * _1622) * _1748) * _1762) * _1659);
    float _1849 = (((_1824 * cbLight._m0[_1776].z) * _1837) * _1646) + ((((cbLight._m0[_1695].z * _1623) * _1748) * _1762) * _1659);
    float _1964;
    float _1966;
    float _1968;
    float _1970;
    float _1972;
    float _1974;
    if (_1627.y == 0u)
    {
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1904;
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1904;
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1904;
        uvec4 _1919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1920 = _1919.x;
        uint _1931 = uint((float(_1919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _509) / _1920))) + floor(float(uint(cbSceneParam._m0[85u].x * _508) / _1920)));
        float _1941 = (log2(_1907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1942 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        uint _1945 = uint(isnan(14.0) ? _1942 : (isnan(_1942) ? 14.0 : min(_1942, 14.0)));
        uvec4 _1950 = texelFetch(g_lightClusterGridBuffer, int(((_1945 << 2u) + (_1931 << 6u)) >> 2u));
        uint _1951 = _1950.x;
        uint _1952 = _1919.z;
        float _2058;
        float _2060;
        float _2062;
        float _2064;
        float _2066;
        float _2068;
        if (((((1u << ((_1952 >> 4u) & 15u)) + 4294967295u) & _1951) == 0u) || ((_1952 & 240u) == 0u))
        {
            _2058 = 0.0;
            _2060 = 0.0;
            _2062 = 0.0;
            _2064 = 0.0;
            _2066 = 0.0;
            _2068 = 0.0;
        }
        else
        {
            float _2059;
            float _2061;
            float _2063;
            float _2065;
            float _2067;
            float _2069;
            float _2234 = 0.0;
            float _2235 = 0.0;
            float _2236 = 0.0;
            float _2237 = 0.0;
            float _2238 = 0.0;
            float _2239 = 0.0;
            uint _2240 = 0u;
            uint _2249;
            bool _2250;
            for (;;)
            {
                _2249 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2240 << 2u)) >> 2u)).x;
                _2250 = _2249 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2250)
                {
                    frontier_phi_58_pred = _2235;
                    frontier_phi_58_pred_1 = _2239;
                    frontier_phi_58_pred_2 = _2238;
                    frontier_phi_58_pred_3 = _2237;
                    frontier_phi_58_pred_4 = _2236;
                    frontier_phi_58_pred_5 = _2234;
                }
                else
                {
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    uint _2415;
                    _2409 = _2234;
                    _2410 = _2235;
                    _2411 = _2236;
                    _2412 = _2237;
                    _2413 = _2238;
                    _2414 = _2239;
                    _2415 = _2249;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    for (;;)
                    {
                        uint _2419 = uint(findLSB(_2415)) + (_2240 << 5u);
                        uint _2416 = (_2415 + 4294967295u) & _2415;
                        uint _2421 = _2419 * 48u;
                        vec4 _2435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2421)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 3u)).x));
                        uint _2441 = (_2419 * 48u) + 4u;
                        vec4 _2454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2441)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 3u)).x));
                        uint _2460 = (_2419 * 48u) + 8u;
                        vec3 _2471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2460)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 2u)).x));
                        float _2475 = _2435.x - _1905;
                        float _2476 = _2435.y - _1906;
                        float _2477 = _2435.z - _1907;
                        float _2478 = dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477));
                        float _2481 = inversesqrt(_2478);
                        float _2482 = _2481 * _2475;
                        float _2483 = _2481 * _2476;
                        float _2484 = _2481 * _2477;
                        float _2485 = dot(vec3(_530, _533, _536), vec3(_2482, _2483, _2484));
                        float _2490 = 1.0 - (_2478 * _2435.w);
                        float _3653 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
                        float _2491 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
                        float _2492 = sqrt(_2478) * _2454.w;
                        float _2495 = 1.39999997615814208984375 / (_2492 + 1.39999997615814208984375);
                        float _2496 = _2495 * _2495;
                        float _2499 = ((1.0 - _2496) * _2485) + _2496;
                        float _2502 = _2492 * _2492;
                        float _2506 = ((isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))) * _2491) / ((_2502 * 0.699999988079071044921875) + 1.0);
                        float _2510 = (-0.0) - _1905;
                        float _2511 = (-0.0) - _1906;
                        float _2512 = (-0.0) - _1907;
                        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
                        float _2517 = _2516 * _2510;
                        float _2518 = _2516 * _2511;
                        float _2519 = _2516 * _2512;
                        float _2527 = exp2(log2(1.0 / ((_2502 * 3.5) + 5.0)) * 0.25);
                        float _2528 = 1.0 - _591;
                        float _2535 = sqrt(1.0 - ((1.0 - (_2528 * _2528)) * (1.0 - (_2527 * _2527))));
                        float _2536 = _2535 * _2535;
                        float _2537 = _2536 * _2536;
                        float _2538 = _2517 + _2482;
                        float _2539 = _2518 + _2483;
                        float _2540 = _2519 + _2484;
                        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
                        float _2548 = dot(vec3(_530, _533, _536), vec3(_2517, _2518, _2519));
                        float _3669 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
                        float _2551 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
                        float _2552 = dot(vec3(_530, _533, _536), vec3(_2544 * _2538, _2544 * _2539, _2544 * _2540));
                        float _3680 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
                        float _2555 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                        float _2559 = ((_2555 * _2555) * (_2537 + (-1.0))) + 1.0;
                        float _2560 = _2495 * _2536;
                        float _2561 = _2560 * _2560;
                        float _2564 = ((1.0 - _2561) * _2485) + _2561;
                        float _3691 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _2565 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                        float _2566 = 1.0 - _2536;
                        float _2576 = (0.5 / (((_2565 * ((_2551 * _2566) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2566) + _2536) * _2551))) * _2565;
                        float _3702 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
                        float _2587 = (((_2537 * 3.1415927410125732421875) * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) / ((_2559 * _2559) * ((_2502 * 2.1991131305694580078125) + 3.141590118408203125))) * _2491;
                        _2318 = (_2506 * _2454.x) + _2412;
                        _2319 = (_2506 * _2454.y) + _2413;
                        _2320 = (_2506 * _2454.z) + _2414;
                        _2315 = (_2587 * _2471.x) + _2409;
                        _2316 = (_2587 * _2471.y) + _2410;
                        _2317 = (_2587 * _2471.z) + _2411;
                        if (_2416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2409 = _2315;
                            _2410 = _2316;
                            _2411 = _2317;
                            _2412 = _2318;
                            _2413 = _2319;
                            _2414 = _2320;
                            _2415 = _2416;
                        }
                    }
                    frontier_phi_58_pred = _2316;
                    frontier_phi_58_pred_1 = _2320;
                    frontier_phi_58_pred_2 = _2319;
                    frontier_phi_58_pred_3 = _2318;
                    frontier_phi_58_pred_4 = _2317;
                    frontier_phi_58_pred_5 = _2315;
                }
                _2061 = frontier_phi_58_pred;
                _2069 = frontier_phi_58_pred_1;
                _2067 = frontier_phi_58_pred_2;
                _2065 = frontier_phi_58_pred_3;
                _2063 = frontier_phi_58_pred_4;
                _2059 = frontier_phi_58_pred_5;
                uint _2241 = _2240 + 1u;
                if (_2241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2234 = _2059;
                    _2235 = _2061;
                    _2236 = _2063;
                    _2237 = _2065;
                    _2238 = _2067;
                    _2239 = _2069;
                    _2240 = _2241;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2058 = _2059;
            _2060 = _2061;
            _2062 = _2063;
            _2064 = _2065;
            _2066 = _2067;
            _2068 = _2069;
        }
        uvec4 _2072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2073 = _2072.z;
        uint _2075 = (_2073 >> 8u) & 15u;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        if (((4294967295u << _2075) & _1951) == 0u)
        {
            _2202 = _2058;
            _2204 = _2060;
            _2206 = _2062;
            _2208 = _2064;
            _2210 = _2066;
            _2212 = _2068;
        }
        else
        {
            float _2227 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
            float _2228 = _2227 * _1905;
            float _2229 = _2227 * _1906;
            float _2230 = _2227 * _1907;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2075 < ((_2073 >> 12u) & 15u))
            {
                float _2203;
                float _2205;
                float _2207;
                float _2209;
                float _2211;
                float _2213;
                float _2392 = _2058;
                float _2393 = _2060;
                float _2394 = _2062;
                float _2395 = _2064;
                float _2396 = _2066;
                float _2397 = _2068;
                uint _2398 = _2075;
                uint _2407;
                bool _2408;
                for (;;)
                {
                    _2407 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2398 << 2u)) >> 2u)).x;
                    _2408 = _2407 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2408)
                    {
                        frontier_phi_67_pred = _2397;
                        frontier_phi_67_pred_1 = _2396;
                        frontier_phi_67_pred_2 = _2395;
                        frontier_phi_67_pred_3 = _2394;
                        frontier_phi_67_pred_4 = _2393;
                        frontier_phi_67_pred_5 = _2392;
                    }
                    else
                    {
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2616;
                        float _2617;
                        float _2618;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2626 = _2392;
                        float _2627 = _2393;
                        float _2628 = _2394;
                        float _2629 = _2395;
                        float _2630 = _2396;
                        float _2631 = _2397;
                        uint _2632 = _2407;
                        uint _2633;
                        vec4 _2658;
                        float _2659;
                        vec4 _2674;
                        vec3 _2686;
                        vec4 _2701;
                        vec4 _2717;
                        float _2763;
                        bool _2764;
                        for (;;)
                        {
                            uint _2643 = ((_2398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2632));
                            _2633 = (_2632 + 4294967295u) & _2632;
                            uint _2645 = _2643 * 40u;
                            _2658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 3u)).x));
                            _2659 = _2658.w;
                            uint _2661 = (_2643 * 40u) + 4u;
                            _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            uint _2676 = (_2643 * 40u) + 8u;
                            _2686 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x));
                            uint _2688 = (_2643 * 40u) + 16u;
                            _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2704 = (_2643 * 40u) + 20u;
                            _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            uint _2719 = (_2643 * 40u) + 24u;
                            vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            uint _2738 = (_2643 * 40u) + 28u;
                            vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 3u)).x));
                            _2763 = fma(_1907, _2751.z, fma(_1906, _2751.y, _2751.x * _1905)) + _2751.w;
                            _2764 = !((fma(_1907, _2732.z, fma(_1906, _2732.y, _2732.x * _1905)) + _2732.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2764)
                            {
                                float _2791 = _2658.x - _1905;
                                float _2792 = _2658.y - _1906;
                                float _2793 = _2658.z - _1907;
                                float _2794 = dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793));
                                float _2797 = inversesqrt(_2794);
                                float _2798 = _2797 * _2791;
                                float _2799 = _2797 * _2792;
                                float _2800 = _2797 * _2793;
                                float _2804 = 1.0 - (_2794 / (_2659 * _2659));
                                float _3713 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                                float _2805 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
                                float _2809 = sqrt(_2794) * _2674.w;
                                float _2811 = 1.39999997615814208984375 / (_2809 + 1.39999997615814208984375);
                                float _2812 = _2811 * _2811;
                                float _2815 = ((1.0 - _2812) * dot(vec3(_2798, _2799, _2800), vec3(_530, _533, _536))) + _2812;
                                float _2818 = _2809 * _2809;
                                float _2822 = (fma(_1907, _2701.z, fma(_1906, _2701.y, _2701.x * _1905)) + _2701.w) / _2763;
                                float _2823 = (fma(_1907, _2717.z, fma(_1906, _2717.y, _2717.x * _1905)) + _2717.w) / _2763;
                                float _2827 = 1.0 - dot(vec2(_2822, _2823), vec2(_2822, _2823));
                                float _3729 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2828 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2829 = _2828 * (((isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))) * _2805) / ((_2818 * 0.699999988079071044921875) + 1.0));
                                float _2841 = exp2(log2(1.0 / ((_2818 * 3.5) + 5.0)) * 0.25);
                                float _2842 = 1.0 - _591;
                                float _2849 = sqrt(1.0 - ((1.0 - (_2842 * _2842)) * (1.0 - (_2841 * _2841))));
                                float _2850 = _2849 * _2849;
                                float _2851 = _2850 * _2850;
                                float _2852 = _2798 - _2228;
                                float _2853 = _2799 - _2229;
                                float _2854 = _2800 - _2230;
                                float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                                float _2862 = dot(vec3(_530, _533, _536), vec3((-0.0) - _2228, (-0.0) - _2229, (-0.0) - _2230));
                                float _3740 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                                float _2865 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
                                float _2866 = dot(vec3(_530, _533, _536), vec3(_2858 * _2852, _2858 * _2853, _2858 * _2854));
                                float _3751 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                                float _2869 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                                float _2873 = ((_2869 * _2869) * (_2851 + (-1.0))) + 1.0;
                                float _2874 = _2811 * _2850;
                                float _2875 = _2874 * _2874;
                                float _2881 = ((1.0 - _2875) * dot(vec3(_530, _533, _536), vec3(_2798, _2799, _2800))) + _2875;
                                float _3762 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2882 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                                float _2883 = 1.0 - _2850;
                                float _2893 = (0.5 / (((_2882 * ((_2865 * _2883) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2882 * _2883) + _2850) * _2865))) * _2882;
                                float _3773 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                                float _2903 = (_2828 * _2805) * (((_2851 * 3.1415927410125732421875) * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) / ((_2873 * _2873) * ((_2818 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2829 * _2674.z;
                                frontier_phi_73_pred_1 = _2829 * _2674.y;
                                frontier_phi_73_pred_2 = _2829 * _2674.x;
                                frontier_phi_73_pred_3 = _2903 * _2686.z;
                                frontier_phi_73_pred_4 = _2903 * _2686.y;
                                frontier_phi_73_pred_5 = _2903 * _2686.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2912 = frontier_phi_73_pred;
                            _2911 = frontier_phi_73_pred_1;
                            _2910 = frontier_phi_73_pred_2;
                            _2909 = frontier_phi_73_pred_3;
                            _2908 = frontier_phi_73_pred_4;
                            _2907 = frontier_phi_73_pred_5;
                            _2616 = _2910 + _2629;
                            _2617 = _2911 + _2630;
                            _2618 = _2912 + _2631;
                            _2613 = _2907 + _2626;
                            _2614 = _2908 + _2627;
                            _2615 = _2909 + _2628;
                            if (_2633 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2626 = _2613;
                                _2627 = _2614;
                                _2628 = _2615;
                                _2629 = _2616;
                                _2630 = _2617;
                                _2631 = _2618;
                                _2632 = _2633;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2618;
                        frontier_phi_67_pred_1 = _2617;
                        frontier_phi_67_pred_2 = _2616;
                        frontier_phi_67_pred_3 = _2615;
                        frontier_phi_67_pred_4 = _2614;
                        frontier_phi_67_pred_5 = _2613;
                    }
                    _2213 = frontier_phi_67_pred;
                    _2211 = frontier_phi_67_pred_1;
                    _2209 = frontier_phi_67_pred_2;
                    _2207 = frontier_phi_67_pred_3;
                    _2205 = frontier_phi_67_pred_4;
                    _2203 = frontier_phi_67_pred_5;
                    uint _2399 = _2398 + 1u;
                    if (_2399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2392 = _2203;
                        _2393 = _2205;
                        _2394 = _2207;
                        _2395 = _2209;
                        _2396 = _2211;
                        _2397 = _2213;
                        _2398 = _2399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2209;
                frontier_phi_49_50_ladder_1 = _2213;
                frontier_phi_49_50_ladder_2 = _2211;
                frontier_phi_49_50_ladder_3 = _2207;
                frontier_phi_49_50_ladder_4 = _2205;
                frontier_phi_49_50_ladder_5 = _2203;
            }
            else
            {
                frontier_phi_49_50_ladder = _2064;
                frontier_phi_49_50_ladder_1 = _2068;
                frontier_phi_49_50_ladder_2 = _2066;
                frontier_phi_49_50_ladder_3 = _2062;
                frontier_phi_49_50_ladder_4 = _2060;
                frontier_phi_49_50_ladder_5 = _2058;
            }
            _2202 = frontier_phi_49_50_ladder_5;
            _2204 = frontier_phi_49_50_ladder_4;
            _2206 = frontier_phi_49_50_ladder_3;
            _2208 = frontier_phi_49_50_ladder;
            _2210 = frontier_phi_49_50_ladder_2;
            _2212 = frontier_phi_49_50_ladder_1;
        }
        float _2217 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
        _1964 = (_2217 * _2208) + _1691;
        _1966 = (_2217 * _2210) + _1692;
        _1968 = (_2217 * _2212) + _1693;
        _1970 = ((_2202 * 0.039999999105930328369140625) * _2217) + _1847;
        _1972 = ((_2204 * 0.039999999105930328369140625) * _2217) + _1848;
        _1974 = ((_2206 * 0.039999999105930328369140625) * _2217) + _1849;
    }
    else
    {
        _1964 = _1691;
        _1966 = _1692;
        _1968 = _1693;
        _1970 = _1847;
        _1972 = _1848;
        _1974 = _1849;
    }
    uint _1980 = _551 + uint(cbMatDynParam._m0[0u].w);
    float _3789 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3800 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3811 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _2005 = (((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1964 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _575))) + ((_1970 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1381)) * cbPerFrame._m0[3u].x)) + (((_414 - (_414 * _284)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1980].x);
    float _2007 = ((((_415 - (_415 * _284)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_1980].y) + ((_1972 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1381)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1966 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _575)));
    float _2009 = (((cbMtdParam._m0[9u].z * (_416 - (_416 * _284))) * cbInstanceData._m0[_1980].z) + ((_1974 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1381)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1968 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _575)));
    uint _2013 = _549 + 6u;
    float _2021 = _508 / cbSceneParam._m0[86u].x;
    float _2022 = _509 / cbSceneParam._m0[86u].y;
    vec4 _2036 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2021, _2022, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2038 = _2036.x;
    float _2039 = _2036.y;
    float _2040 = _2036.z;
    float _2041 = _2036.w;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2083 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2084 = _2083 / _495;
        float _2095 = _2084 * _257;
        float _2096 = _258 * _2084;
        float _2097 = (-0.0) - _2096;
        float _2098 = _2084 * _259;
        float _2100 = (cbSceneParam._m0[77u].w * _2097) / _2083;
        float _2101 = _2100 + cbSceneParam._m0[79u].w;
        float _2102 = cbSceneParam._m0[79u].w - _2096;
        float _2108 = sqrt(((_2095 * _2095) + (_2096 * _2096)) + (_2098 * _2098));
        float _2111 = (1.0 - (cbSceneParam._m0[77u].w / _2083)) * _2108;
        float _2117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2328;
        if (abs((_2097 - _2100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2328 = ((((_2101 > 0.0) ? exp2(_2117 * _2101) : (2.0 - exp2(_2119 * _2101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2111;
        }
        else
        {
            float _2263 = 1.0 / cbSceneParam._m0[80u].x;
            float _2264 = isnan(_2102) ? _2101 : (isnan(_2101) ? _2102 : max(_2101, _2102));
            float _2265 = isnan(_2102) ? _2101 : (isnan(_2101) ? _2102 : min(_2101, _2102));
            float _2274 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : min(_2264, 0.0));
            float _2275 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : min(_2265, 0.0));
            _2328 = ((abs(_2108 / _2097) * cbSceneParam._m0[80u].y) * ((((_2274 - _2275) * 2.0) - ((exp2(_2117 * (isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0)))) - exp2(_2117 * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))))) * _2263)) - ((exp2(_2119 * _2274) - exp2(_2119 * _2275)) * _2263))) + (_2111 * cbSceneParam._m0[80u].z);
        }
        vec4 _2330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2021, _2022, 1.0), 0.0);
        float _2339 = exp2((_2328 * (-1.44269502162933349609375)) * (1.0 - _2330.w));
        float _2340 = log2(_2339);
        float _2356 = log2(_2041);
        _2121 = (exp2(_2356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].x)) * _2330.x) / cbSceneParam._m0[78u].x)) + _2038;
        _2123 = (exp2(_2356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].y)) * _2330.y) / cbSceneParam._m0[78u].y)) + _2039;
        _2125 = (exp2(_2356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].z)) * _2330.z) / cbSceneParam._m0[78u].z)) + _2040;
        _2127 = _2339 * _2041;
    }
    else
    {
        _2121 = _2038;
        _2123 = _2039;
        _2125 = _2040;
        _2127 = _2041;
    }
    float _2139 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2140 = _2139 == 3.0;
    float _2141 = log2(_2127);
    float _2148 = exp2(_2141 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)));
    float _2149 = exp2(_2141 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)));
    float _2150 = exp2(_2141 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
    float _2159 = (_2139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2159 * (_2140 ? _2148 : (_2148 + (cbSceneParam._m0[72u].w * _2121)));
    SV_Target.y = _2159 * (_2140 ? _2149 : (_2149 + (cbSceneParam._m0[72u].w * _2123)));
    SV_Target.z = _2159 * (_2140 ? _2150 : (_2150 + (cbSceneParam._m0[72u].w * _2125)));
    SV_Target.w = cbInstanceData._m0[_2013].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2013].w;
}


