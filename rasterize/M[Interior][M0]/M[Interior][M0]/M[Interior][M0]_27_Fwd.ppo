#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _422;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    vec4 _337 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _341 = _337.z;
    float _345 = (_337.x * 2.0) + (-1.0);
    float _347 = (_337.y * 2.0) + (-1.0);
    float _353 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _360 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _369 = cbMtdParam._m0[23u].x + _257;
    float _370 = cbMtdParam._m0[23u].y + _258;
    float _371 = cbMtdParam._m0[23u].z + _259;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_353 * _186, _353 * _187, _353 * _188));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_360 * _200, _360 * _201, _360 * _202));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _391 * _387;
    float _397 = ((cbMtdParam._m0[19u].w * _385) * _391) + (_345 * cbMtdParam._m0[20u].y);
    float _398 = ((cbMtdParam._m0[20u].x * _386) * _391) + (_347 * cbMtdParam._m0[20u].z);
    float _401 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _402 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _420;
    float _423;
    float _425;
    if (_397 > 0.0)
    {
        float _406 = (1.0 - _401) / _397;
        _420 = _406;
        _423 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_406 * _392)) * 0.16666667163372039794921875;
        _425 = (fract((_406 * _398) + _402) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_397 < 0.0)
        {
            float _421 = ((-0.0) - _401) / _397;
            frontier_phi_3_2_ladder = (fract((_421 * _398) + _402) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _421;
            frontier_phi_3_2_ladder_2 = (fract(_421 * _392) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _422;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _420 = frontier_phi_3_2_ladder_1;
        _423 = frontier_phi_3_2_ladder_2;
        _425 = frontier_phi_3_2_ladder;
    }
    float _451;
    float _453;
    float _455;
    if (_398 > 0.0)
    {
        float _438 = (1.0 - _402) / _398;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_438 < _420)
        {
            frontier_phi_8_5_ladder = (fract((_438 * _397) + _401) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _438;
            frontier_phi_8_5_ladder_2 = (fract(_438 * _392) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _423;
            frontier_phi_8_5_ladder_1 = _420;
            frontier_phi_8_5_ladder_2 = _425;
        }
        _451 = frontier_phi_8_5_ladder_1;
        _453 = frontier_phi_8_5_ladder;
        _455 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_398 < 0.0)
        {
            float _452 = ((-0.0) - _402) / _398;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_452 < _420)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_452 * _397) + _401) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _452;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_452 * _392) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _423;
                frontier_phi_8_6_ladder_9_ladder_1 = _420;
                frontier_phi_8_6_ladder_9_ladder_2 = _425;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _423;
            frontier_phi_8_6_ladder_1 = _420;
            frontier_phi_8_6_ladder_2 = _425;
        }
        _451 = frontier_phi_8_6_ladder_1;
        _453 = frontier_phi_8_6_ladder;
        _455 = frontier_phi_8_6_ladder_2;
    }
    float _459 = (_392 > 0.0) ? (cbMtdParam._m0[16u].w / _392) : 5000.0;
    float _472;
    float _473;
    if (_459 < _451)
    {
        _472 = ((_401 + cbMtdParam._m0[17u].x) + (_459 * _397)) * 0.16666667163372039794921875;
        _473 = (((_459 * _398) + _402) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _472 = _453;
        _473 = _455;
    }
    vec4 _475 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_472, _473));
    float _480 = _475.x * cbMtdParam._m0[13u].x;
    float _481 = _475.y * cbMtdParam._m0[13u].y;
    float _482 = _475.z * cbMtdParam._m0[13u].z;
    float _487 = 0.5 - (_284 * 0.5);
    float _497 = (((_480 - _297) - (_480 * _284)) * _487) + _297;
    float _498 = (((_481 - _299) - (_481 * _284)) * _487) + _299;
    float _499 = (((_482 - _301) - (_482 * _284)) * _487) + _301;
    vec4 _511 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _515 = _511.z;
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3112 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _525 = sqrt(1.0 - (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))));
    float _526 = _515 * _284;
    float _536 = (cbMtdParam._m0[15u].w * ((_341 - _526) + ((_515 - _341) * _284))) + _526;
    float _544 = (cbMtdParam._m0[16u].x * (_345 - (_345 * _284))) + _518;
    float _545 = (cbMtdParam._m0[16u].x * (_347 - (_347 * _284))) + _519;
    float _548 = fma(_525, _193, fma(_545, _200, _544 * _186));
    float _551 = fma(_525, _194, fma(_545, _201, _544 * _187));
    float _554 = fma(_525, _195, fma(_545, _202, _544 * _188));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _3123 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _562 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
    float _3134 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3145 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3156 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _585 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _586 = _257 * _585;
    float _587 = _258 * _585;
    float _588 = _259 * _585;
    float _594 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _595 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _615 = fma(_561, cbSceneParam._m0[5u].z, fma(_560, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _559));
    float _618 = fma(_561, cbSceneParam._m0[6u].z, fma(_560, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _559));
    float _621 = fma(_561, cbSceneParam._m0[7u].z, fma(_560, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _559));
    uint _634 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = (_634 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _642 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0)))) * cbInstanceData._m0[_636].x;
    float _643 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0)))) * cbInstanceData._m0[_636].y;
    float _644 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0)))) * cbInstanceData._m0[_636].z;
    float _3167 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
    float _3178 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _3189 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
    vec4 _656 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _594, cbSceneParam._m0[86u].y * _595));
    float _659 = _656.x * TEXCOORD.z;
    float _660 = dot(vec3(_559, _560, _561), vec3(_586, _587, _588));
    float _663 = _660 * 2.0;
    float _667 = (_663 * _559) - _586;
    float _668 = (_663 * _560) - _587;
    float _669 = (_663 * _561) - _588;
    float _673 = abs(dot(vec3(_586, _587, _588), vec3(_559, _560, _561)));
    float _3200 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _675 = sqrt(_562);
    float _688 = exp2((_675 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_675 * 3.0));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = fma(_728, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _720));
        float _765 = fma(_728, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _720));
        float _769 = fma(_728, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _720));
        float _793 = _720 + _559;
        float _794 = _724 + _560;
        float _795 = _728 + _561;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _761;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _765;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _769;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_761 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_765 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_769 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_559, _560, _561), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3248 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_559, _560, _561), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3281 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_559, _560, _561), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3314 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1036 = _865;
        _1037 = _864;
        _1038 = _876;
        _1039 = _875;
        _1040 = _874;
        _1041 = _886;
        _1042 = _885;
        _1043 = _884;
        _1044 = _899;
        _1045 = _898;
        _1046 = _897;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _422;
        _1036 = _422;
        _1037 = _422;
        _1038 = _422;
        _1039 = _422;
        _1040 = _422;
        _1041 = _422;
        _1042 = _422;
        _1043 = _422;
        _1044 = _422;
        _1045 = _422;
        _1046 = _422;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1075 = fma(_728, cbModelParam._m0[30u].z, fma(_724, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _720));
        float _1079 = fma(_728, cbModelParam._m0[31u].z, fma(_724, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _720));
        float _1083 = fma(_728, cbModelParam._m0[32u].z, fma(_724, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _720));
        float _1106 = _720 + _559;
        float _1107 = _724 + _560;
        float _1108 = _728 + _561;
        float _1118 = fma(_1108, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106)) - _1075;
        float _1119 = fma(_1108, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106)) - _1079;
        float _1120 = fma(_1108, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106)) - _1083;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1075 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1079 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[35u].z) + ((((((_1083 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1174 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1141.x + (-0.5));
        float _1176 = _1174 * (_1141.y + (-0.5));
        float _1177 = _1174 * (_1141.z + (-0.5));
        float _1184 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1148.x + (-0.5));
        float _1186 = _1184 * (_1148.y + (-0.5));
        float _1187 = _1184 * (_1148.z + (-0.5));
        float _1194 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1155.x + (-0.5));
        float _1196 = _1194 * (_1155.y + (-0.5));
        float _1197 = _1194 * (_1155.z + (-0.5));
        float _1204 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1162.x + (-0.5));
        float _1206 = _1204 * (_1162.y + (-0.5));
        float _1207 = _1204 * (_1162.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_559, _560, _561), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3377 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_1238 + 1.0))) + _1243) * _1208;
        float _1253 = _1176 * 0.5;
        float _1254 = _1186 * 0.5;
        float _1255 = _1196 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_559, _560, _561), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3410 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_1280 + 1.0))) + _1285) * _1209;
        float _1295 = _1177 * 0.5;
        float _1296 = _1187 * 0.5;
        float _1297 = _1197 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_559, _560, _561), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3443 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_1322 + 1.0))) + _1327) * _1210;
        _1344 = _1177;
        _1345 = _1176;
        _1346 = _1175;
        _1347 = _1187;
        _1348 = _1186;
        _1349 = _1185;
        _1350 = _1197;
        _1351 = _1196;
        _1352 = _1195;
        _1353 = _1210;
        _1354 = _1209;
        _1355 = _1208;
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _422;
        _1345 = _422;
        _1346 = _422;
        _1347 = _422;
        _1348 = _422;
        _1349 = _422;
        _1350 = _422;
        _1351 = _422;
        _1352 = _422;
        _1353 = _422;
        _1354 = _422;
        _1355 = _422;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1047)) + _1047;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1391 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1368));
    float _1412 = _667 * 0.5;
    float _1413 = _668 * 0.5;
    float _1414 = _669 * 0.5;
    float _1415 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1418 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1421 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1455;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1428 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1432 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1436 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1443 = dot(vec4(cbModelParam._m0[39u]), vec4(_1412, _1413, _1414, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1466;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1457 = dot(vec4(cbModelParam._m0[40u]), vec4(_1412, _1413, _1414, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1470 = (_1466 * cbModelParam._m0[1u].x) + (_1455 * (1.0 - cbModelParam._m0[1u].x));
    float _1480 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1481 = isnan(_1480) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1480 : min(cbModelParam._m0[25u].z, _1480));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_728, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_728, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_728, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_669, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667));
        float _1543 = fma(_669, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667));
        float _1546 = fma(_669, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1574 = frontier_phi_26_24_ladder;
        }
        float _1923;
        if (_1543 > 0.0)
        {
            _1923 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1923 = frontier_phi_35_31_ladder;
        }
        float _2223;
        if (_1546 > 0.0)
        {
            _2223 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2223 = frontier_phi_49_42_ladder;
        }
        float _2225 = isnan(_1923) ? _1574 : (isnan(_1574) ? _1923 : min(_1574, _1923));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1540) + _1529;
        float _2231 = (_2226 * _1543) + _1533;
        float _2232 = (_2226 * _1546) + _1537;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2233;
        float _2236 = _2233 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2232 > _2236) || ((_2232 < _2234) || ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 < _2234) || (_2230 > _2236))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2232, cbModelParam._m0[9u].z, fma(_2231, cbModelParam._m0[9u].y, _2230 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2232, cbModelParam._m0[10u].z, fma(_2231, cbModelParam._m0[10u].y, _2230 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2232, cbModelParam._m0[11u].z, fma(_2231, cbModelParam._m0[11u].y, _2230 * cbModelParam._m0[11u].x))), _1481);
            frontier_phi_25_49_ladder = _2358.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2358.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2358.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_25_49_ladder_2;
        _1564 = frontier_phi_25_49_ladder_1;
        _1566 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_667, _668, _669), _1481);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_728, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_728, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_728, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_669, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667));
        float _1640 = fma(_669, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667));
        float _1643 = fma(_669, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667));
        float _1928;
        if (_1637 > 0.0)
        {
            _1928 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1928 = frontier_phi_37_33_ladder;
        }
        float _2249;
        if (_1640 > 0.0)
        {
            _2249 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2249 = frontier_phi_51_44_ladder;
        }
        float _2418;
        if (_1643 > 0.0)
        {
            _2418 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2418 = frontier_phi_65_60_ladder;
        }
        float _2420 = isnan(_2249) ? _1928 : (isnan(_1928) ? _2249 : min(_1928, _2249));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1637) + _1626;
        float _2426 = (_2421 * _1640) + _1630;
        float _2427 = (_2421 * _1643) + _1634;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2428;
        float _2431 = _2428 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2427 > _2431) || ((_2427 < _2429) || ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 < _2429) || (_2425 > _2431))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2427, cbModelParam._m0[17u].z, fma(_2426, cbModelParam._m0[17u].y, _2425 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2427, cbModelParam._m0[18u].z, fma(_2426, cbModelParam._m0[18u].y, _2425 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2427, cbModelParam._m0[19u].z, fma(_2426, cbModelParam._m0[19u].y, _2425 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_34_65_ladder = _2660.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2660.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2660.z * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_34_65_ladder_1;
        _1664 = frontier_phi_34_65_ladder;
        _1666 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_667, _668, _669), _1571);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1678 = ((((1.0 - _688) * ((_675 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_688 * _675)) * _659;
    float _1679 = _1678 * ((cbModelParam._m0[1u].w * (_1662 - _1562)) + _1562);
    float _1680 = _1678 * ((cbModelParam._m0[1u].w * (_1664 - _1564)) + _1564);
    float _1681 = _1678 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1684 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_634 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1708 = _659 + (-1.0);
    float _1711 = (cbLight._m0[_1703].x * _1708) + 1.0;
    float _1712 = (cbLight._m0[_1703].y * _1708) + 1.0;
    uint _1713 = _1702 + 5u;
    float _1719 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
    uint _1723 = _1702 + 4u;
    float _1730 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1734 = _1702 | 1u;
    float _1745 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_559, _560, _561));
    float _1748 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_559, _560, _561));
    float _3579 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _3590 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1753 = (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.3183098733425140380859375;
    float _1755 = (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.3183098733425140380859375;
    float _1762 = ((cbLight._m0[_1713].x * _1719) * _1755) + ((cbLight._m0[_1723].x * _1730) * _1753);
    float _1763 = ((_1719 * cbLight._m0[_1713].y) * _1755) + ((_1730 * cbLight._m0[_1723].y) * _1753);
    float _1764 = ((_1719 * cbLight._m0[_1713].z) * _1755) + ((_1730 * cbLight._m0[_1723].z) * _1753);
    uint _1766 = _1702 + 8u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _562) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1702].x + _586;
    float _1782 = cbLight._m0[_1702].y + _587;
    float _1783 = cbLight._m0[_1702].z + _588;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1702].xyz));
    float _3601 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _1795 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _1796 = dot(vec3(_559, _560, _561), vec3(_1788, _1789, _1790));
    float _3623 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1788, _1789, _1790));
    float _3634 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1780 * _1780;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1819 = (exp2(log2(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1820 = 1.0 - _1780;
    float _1831 = (0.5 / (((_1795 * ((_1794 * _1820) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1820) + _1780) * _1794))) * _1794;
    float _3645 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    uint _1844 = _1702 + 9u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _562) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1734].x + _586;
    float _1858 = cbLight._m0[_1734].y + _587;
    float _1859 = cbLight._m0[_1734].z + _588;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1734].xyz));
    float _3656 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _1871 = dot(vec3(_559, _560, _561), vec3(_1864, _1865, _1866));
    float _3667 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _1875 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1864, _1865, _1866));
    float _3678 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1879 = _1856 * _1856;
    float _1883 = ((_1874 * _1874) * (_1879 + (-1.0))) + 1.0;
    float _1892 = (exp2(log2(1.0 - (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1893 = 1.0 - _1856;
    float _1903 = (0.5 / (((_1795 * ((_1870 * _1893) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1893) + _1856) * _1870))) * _1870;
    float _3689 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1879 / ((_1883 * _1883) * 3.141590118408203125));
    float _1915 = (((_1892 * cbLight._m0[_1844].x) * _1905) * _1719) + (((_1819 * cbLight._m0[_1766].x) * _1833) * _1730);
    float _1916 = (((_1892 * cbLight._m0[_1844].y) * _1905) * _1719) + (((_1819 * cbLight._m0[_1766].y) * _1833) * _1730);
    float _1917 = (((_1892 * cbLight._m0[_1844].z) * _1905) * _1719) + (((_1819 * cbLight._m0[_1766].z) * _1833) * _1730);
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    float _2042;
    if (_1700.y == 0u)
    {
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1972;
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1972;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1972;
        uvec4 _1987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1988 = _1987.x;
        uint _1999 = uint((float(_1987.y) * floor(float(uint(cbSceneParam._m0[85u].y * _595) / _1988))) + floor(float(uint(cbSceneParam._m0[85u].x * _594) / _1988)));
        float _2009 = (log2(_1975 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2010 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        uint _2013 = uint(isnan(14.0) ? _2010 : (isnan(_2010) ? 14.0 : min(_2010, 14.0)));
        uvec4 _2018 = texelFetch(g_lightClusterGridBuffer, int(((_2013 << 2u) + (_1999 << 6u)) >> 2u));
        uint _2019 = _2018.x;
        uint _2020 = _1987.z;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        if (((((1u << ((_2020 >> 4u) & 15u)) + 4294967295u) & _2019) == 0u) || ((_2020 & 240u) == 0u))
        {
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
        }
        else
        {
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2286 = 0.0;
            float _2287 = 0.0;
            float _2288 = 0.0;
            float _2289 = 0.0;
            float _2290 = 0.0;
            float _2291 = 0.0;
            uint _2292 = 0u;
            uint _2301;
            bool _2302;
            for (;;)
            {
                _2301 = texelFetch(g_lightClassification, int((((_2013 << 5u) + (_1999 << 9u)) + (_2292 << 2u)) >> 2u)).x;
                _2302 = _2301 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2302)
                {
                    frontier_phi_62_pred = _2287;
                    frontier_phi_62_pred_1 = _2286;
                    frontier_phi_62_pred_2 = _2288;
                    frontier_phi_62_pred_3 = _2291;
                    frontier_phi_62_pred_4 = _2290;
                    frontier_phi_62_pred_5 = _2289;
                }
                else
                {
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    uint _2467;
                    _2461 = _2286;
                    _2462 = _2287;
                    _2463 = _2288;
                    _2464 = _2289;
                    _2465 = _2290;
                    _2466 = _2291;
                    _2467 = _2301;
                    float _2367;
                    float _2368;
                    float _2369;
                    float _2370;
                    float _2371;
                    float _2372;
                    for (;;)
                    {
                        uint _2471 = uint(findLSB(_2467)) + (_2292 << 5u);
                        uint _2468 = (_2467 + 4294967295u) & _2467;
                        uint _2473 = _2471 * 48u;
                        vec4 _2487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 3u)).x));
                        uint _2493 = (_2471 * 48u) + 4u;
                        vec4 _2506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2493)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 3u)).x));
                        uint _2512 = (_2471 * 48u) + 8u;
                        vec3 _2523 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2512)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 2u)).x));
                        float _2527 = _2487.x - _1973;
                        float _2528 = _2487.y - _1974;
                        float _2529 = _2487.z - _1975;
                        float _2530 = dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529));
                        float _2533 = inversesqrt(_2530);
                        float _2534 = _2533 * _2527;
                        float _2535 = _2533 * _2528;
                        float _2536 = _2533 * _2529;
                        float _2537 = dot(vec3(_615, _618, _621), vec3(_2534, _2535, _2536));
                        float _2542 = 1.0 - (_2530 * _2487.w);
                        float _3710 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
                        float _2543 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
                        float _2544 = sqrt(_2530) * _2506.w;
                        float _2547 = 1.39999997615814208984375 / (_2544 + 1.39999997615814208984375);
                        float _2548 = _2547 * _2547;
                        float _2551 = ((1.0 - _2548) * _2537) + _2548;
                        float _2554 = _2544 * _2544;
                        float _2558 = ((isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0))) * _2543) / ((_2554 * 0.699999988079071044921875) + 1.0);
                        float _2562 = (-0.0) - _1973;
                        float _2563 = (-0.0) - _1974;
                        float _2564 = (-0.0) - _1975;
                        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
                        float _2569 = _2568 * _2562;
                        float _2570 = _2568 * _2563;
                        float _2571 = _2568 * _2564;
                        float _2579 = exp2(log2(1.0 / ((_2554 * 3.5) + 5.0)) * 0.25);
                        float _2580 = 1.0 - _675;
                        float _2587 = sqrt(1.0 - ((1.0 - (_2580 * _2580)) * (1.0 - (_2579 * _2579))));
                        float _2588 = _2587 * _2587;
                        float _2589 = _2588 * _2588;
                        float _2590 = _2569 + _2534;
                        float _2591 = _2570 + _2535;
                        float _2592 = _2571 + _2536;
                        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
                        float _2600 = dot(vec3(_615, _618, _621), vec3(_2569, _2570, _2571));
                        float _3726 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
                        float _2603 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
                        float _2604 = dot(vec3(_615, _618, _621), vec3(_2596 * _2590, _2596 * _2591, _2596 * _2592));
                        float _3737 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
                        float _2607 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
                        float _2611 = ((_2607 * _2607) * (_2589 + (-1.0))) + 1.0;
                        float _2612 = _2547 * _2588;
                        float _2613 = _2612 * _2612;
                        float _2616 = ((1.0 - _2613) * _2537) + _2613;
                        float _3748 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _2617 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
                        float _2618 = 1.0 - _2588;
                        float _2628 = (0.5 / (((_2617 * ((_2603 * _2618) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2617 * _2618) + _2588) * _2603))) * _2617;
                        float _3759 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                        float _2639 = (((_2589 * 3.1415927410125732421875) * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) / ((_2611 * _2611) * ((_2554 * 2.1991131305694580078125) + 3.141590118408203125))) * _2543;
                        _2370 = (_2558 * _2506.x) + _2464;
                        _2371 = (_2558 * _2506.y) + _2465;
                        _2372 = (_2558 * _2506.z) + _2466;
                        _2367 = (_2639 * _2523.x) + _2461;
                        _2368 = (_2639 * _2523.y) + _2462;
                        _2369 = (_2639 * _2523.z) + _2463;
                        if (_2468 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2461 = _2367;
                            _2462 = _2368;
                            _2463 = _2369;
                            _2464 = _2370;
                            _2465 = _2371;
                            _2466 = _2372;
                            _2467 = _2468;
                        }
                    }
                    frontier_phi_62_pred = _2368;
                    frontier_phi_62_pred_1 = _2367;
                    frontier_phi_62_pred_2 = _2369;
                    frontier_phi_62_pred_3 = _2372;
                    frontier_phi_62_pred_4 = _2371;
                    frontier_phi_62_pred_5 = _2370;
                }
                _2113 = frontier_phi_62_pred;
                _2111 = frontier_phi_62_pred_1;
                _2115 = frontier_phi_62_pred_2;
                _2121 = frontier_phi_62_pred_3;
                _2119 = frontier_phi_62_pred_4;
                _2117 = frontier_phi_62_pred_5;
                uint _2293 = _2292 + 1u;
                if (_2293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2286 = _2111;
                    _2287 = _2113;
                    _2288 = _2115;
                    _2289 = _2117;
                    _2290 = _2119;
                    _2291 = _2121;
                    _2292 = _2293;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
        }
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.z;
        uint _2127 = (_2125 >> 8u) & 15u;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        if (((4294967295u << _2127) & _2019) == 0u)
        {
            _2254 = _2110;
            _2256 = _2112;
            _2258 = _2114;
            _2260 = _2116;
            _2262 = _2118;
            _2264 = _2120;
        }
        else
        {
            float _2279 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
            float _2280 = _2279 * _1973;
            float _2281 = _2279 * _1974;
            float _2282 = _2279 * _1975;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2127 < ((_2125 >> 12u) & 15u))
            {
                float _2255;
                float _2257;
                float _2259;
                float _2261;
                float _2263;
                float _2265;
                float _2444 = _2110;
                float _2445 = _2112;
                float _2446 = _2114;
                float _2447 = _2116;
                float _2448 = _2118;
                float _2449 = _2120;
                uint _2450 = _2127;
                uint _2459;
                bool _2460;
                for (;;)
                {
                    _2459 = texelFetch(g_lightClassification, int((((_2013 << 5u) + (_1999 << 9u)) + (_2450 << 2u)) >> 2u)).x;
                    _2460 = _2459 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2460)
                    {
                        frontier_phi_71_pred = _2445;
                        frontier_phi_71_pred_1 = _2444;
                        frontier_phi_71_pred_2 = _2449;
                        frontier_phi_71_pred_3 = _2448;
                        frontier_phi_71_pred_4 = _2447;
                        frontier_phi_71_pred_5 = _2446;
                    }
                    else
                    {
                        float _2665;
                        float _2666;
                        float _2667;
                        float _2668;
                        float _2669;
                        float _2670;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2678 = _2444;
                        float _2679 = _2445;
                        float _2680 = _2446;
                        float _2681 = _2447;
                        float _2682 = _2448;
                        float _2683 = _2449;
                        uint _2684 = _2459;
                        uint _2685;
                        vec4 _2710;
                        float _2711;
                        vec4 _2726;
                        vec3 _2738;
                        vec4 _2753;
                        vec4 _2768;
                        float _2814;
                        bool _2815;
                        for (;;)
                        {
                            uint _2695 = ((_2450 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2684));
                            _2685 = (_2684 + 4294967295u) & _2684;
                            uint _2697 = _2695 * 40u;
                            _2710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 3u)).x));
                            _2711 = _2710.w;
                            uint _2713 = (_2695 * 40u) + 4u;
                            _2726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 3u)).x));
                            uint _2728 = (_2695 * 40u) + 8u;
                            _2738 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x));
                            uint _2740 = (_2695 * 40u) + 16u;
                            _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            uint _2755 = (_2695 * 40u) + 20u;
                            _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            uint _2770 = (_2695 * 40u) + 24u;
                            vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 3u)).x));
                            uint _2789 = (_2695 * 40u) + 28u;
                            vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            _2814 = fma(_1975, _2802.z, fma(_1974, _2802.y, _2802.x * _1973)) + _2802.w;
                            _2815 = !((fma(_1975, _2783.z, fma(_1974, _2783.y, _2783.x * _1973)) + _2783.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2815)
                            {
                                float _2842 = _2710.x - _1973;
                                float _2843 = _2710.y - _1974;
                                float _2844 = _2710.z - _1975;
                                float _2845 = dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844));
                                float _2848 = inversesqrt(_2845);
                                float _2849 = _2848 * _2842;
                                float _2850 = _2848 * _2843;
                                float _2851 = _2848 * _2844;
                                float _2855 = 1.0 - (_2845 / (_2711 * _2711));
                                float _3770 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                                float _2856 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
                                float _2860 = sqrt(_2845) * _2726.w;
                                float _2862 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                                float _2863 = _2862 * _2862;
                                float _2866 = ((1.0 - _2863) * dot(vec3(_2849, _2850, _2851), vec3(_615, _618, _621))) + _2863;
                                float _2869 = _2860 * _2860;
                                float _2873 = (fma(_1975, _2753.z, fma(_1974, _2753.y, _2753.x * _1973)) + _2753.w) / _2814;
                                float _2874 = (fma(_1975, _2768.z, fma(_1974, _2768.y, _2768.x * _1973)) + _2768.w) / _2814;
                                float _2878 = 1.0 - dot(vec2(_2873, _2874), vec2(_2873, _2874));
                                float _3786 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2879 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
                                float _2880 = _2879 * (((isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))) * _2856) / ((_2869 * 0.699999988079071044921875) + 1.0));
                                float _2892 = exp2(log2(1.0 / ((_2869 * 3.5) + 5.0)) * 0.25);
                                float _2893 = 1.0 - _675;
                                float _2900 = sqrt(1.0 - ((1.0 - (_2893 * _2893)) * (1.0 - (_2892 * _2892))));
                                float _2901 = _2900 * _2900;
                                float _2902 = _2901 * _2901;
                                float _2903 = _2849 - _2280;
                                float _2904 = _2850 - _2281;
                                float _2905 = _2851 - _2282;
                                float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
                                float _2913 = dot(vec3(_615, _618, _621), vec3((-0.0) - _2280, (-0.0) - _2281, (-0.0) - _2282));
                                float _3797 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                                float _2916 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
                                float _2917 = dot(vec3(_615, _618, _621), vec3(_2909 * _2903, _2909 * _2904, _2909 * _2905));
                                float _3808 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                                float _2920 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
                                float _2924 = ((_2920 * _2920) * (_2902 + (-1.0))) + 1.0;
                                float _2925 = _2862 * _2901;
                                float _2926 = _2925 * _2925;
                                float _2932 = ((1.0 - _2926) * dot(vec3(_615, _618, _621), vec3(_2849, _2850, _2851))) + _2926;
                                float _3819 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                                float _2933 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                                float _2934 = 1.0 - _2901;
                                float _2944 = (0.5 / (((_2933 * ((_2916 * _2934) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2901) * _2916))) * _2933;
                                float _3830 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2954 = (_2879 * _2856) * (((_2902 * 3.1415927410125732421875) * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) / ((_2924 * _2924) * ((_2869 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2954 * _2738.y;
                                frontier_phi_77_pred_1 = _2954 * _2738.x;
                                frontier_phi_77_pred_2 = _2880 * _2726.z;
                                frontier_phi_77_pred_3 = _2880 * _2726.y;
                                frontier_phi_77_pred_4 = _2880 * _2726.x;
                                frontier_phi_77_pred_5 = _2954 * _2738.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2959 = frontier_phi_77_pred;
                            _2958 = frontier_phi_77_pred_1;
                            _2963 = frontier_phi_77_pred_2;
                            _2962 = frontier_phi_77_pred_3;
                            _2961 = frontier_phi_77_pred_4;
                            _2960 = frontier_phi_77_pred_5;
                            _2668 = _2961 + _2681;
                            _2669 = _2962 + _2682;
                            _2670 = _2963 + _2683;
                            _2665 = _2958 + _2678;
                            _2666 = _2959 + _2679;
                            _2667 = _2960 + _2680;
                            if (_2685 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2678 = _2665;
                                _2679 = _2666;
                                _2680 = _2667;
                                _2681 = _2668;
                                _2682 = _2669;
                                _2683 = _2670;
                                _2684 = _2685;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2666;
                        frontier_phi_71_pred_1 = _2665;
                        frontier_phi_71_pred_2 = _2670;
                        frontier_phi_71_pred_3 = _2669;
                        frontier_phi_71_pred_4 = _2668;
                        frontier_phi_71_pred_5 = _2667;
                    }
                    _2257 = frontier_phi_71_pred;
                    _2255 = frontier_phi_71_pred_1;
                    _2265 = frontier_phi_71_pred_2;
                    _2263 = frontier_phi_71_pred_3;
                    _2261 = frontier_phi_71_pred_4;
                    _2259 = frontier_phi_71_pred_5;
                    uint _2451 = _2450 + 1u;
                    if (_2451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2444 = _2255;
                        _2445 = _2257;
                        _2446 = _2259;
                        _2447 = _2261;
                        _2448 = _2263;
                        _2449 = _2265;
                        _2450 = _2451;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2265;
                frontier_phi_53_54_ladder_1 = _2261;
                frontier_phi_53_54_ladder_2 = _2259;
                frontier_phi_53_54_ladder_3 = _2257;
                frontier_phi_53_54_ladder_4 = _2255;
                frontier_phi_53_54_ladder_5 = _2263;
            }
            else
            {
                frontier_phi_53_54_ladder = _2120;
                frontier_phi_53_54_ladder_1 = _2116;
                frontier_phi_53_54_ladder_2 = _2114;
                frontier_phi_53_54_ladder_3 = _2112;
                frontier_phi_53_54_ladder_4 = _2110;
                frontier_phi_53_54_ladder_5 = _2118;
            }
            _2254 = frontier_phi_53_54_ladder_4;
            _2256 = frontier_phi_53_54_ladder_3;
            _2258 = frontier_phi_53_54_ladder_2;
            _2260 = frontier_phi_53_54_ladder_1;
            _2262 = frontier_phi_53_54_ladder_5;
            _2264 = frontier_phi_53_54_ladder;
        }
        float _2269 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
        _2032 = (_2269 * _2260) + _1762;
        _2034 = (_2269 * _2262) + _1763;
        _2036 = (_2269 * _2264) + _1764;
        _2038 = ((_2254 * 0.039999999105930328369140625) * _2269) + _1915;
        _2040 = ((_2256 * 0.039999999105930328369140625) * _2269) + _1916;
        _2042 = ((_2258 * 0.039999999105930328369140625) * _2269) + _1917;
    }
    else
    {
        _2032 = _1762;
        _2034 = _1763;
        _2036 = _1764;
        _2038 = _1915;
        _2040 = _1916;
        _2042 = _1917;
    }
    float _3846 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3857 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3868 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _2059 = ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_2032 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _659))) + ((_2038 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1470)) * cbPerFrame._m0[3u].x);
    float _2060 = ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_2034 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _659))) + ((_2040 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1470)) * cbPerFrame._m0[3u].x);
    float _2061 = ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_2036 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _659))) + ((_2042 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1470)) * cbPerFrame._m0[3u].x);
    uint _2065 = _634 + 6u;
    float _2073 = _594 / cbSceneParam._m0[86u].x;
    float _2074 = _595 / cbSceneParam._m0[86u].y;
    vec4 _2088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2073, _2074, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2090 = _2088.x;
    float _2091 = _2088.y;
    float _2092 = _2088.z;
    float _2093 = _2088.w;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2135 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2136 = _2135 / _581;
        float _2147 = _2136 * _257;
        float _2148 = _258 * _2136;
        float _2149 = (-0.0) - _2148;
        float _2150 = _2136 * _259;
        float _2152 = (cbSceneParam._m0[77u].w * _2149) / _2135;
        float _2153 = _2152 + cbSceneParam._m0[79u].w;
        float _2154 = cbSceneParam._m0[79u].w - _2148;
        float _2160 = sqrt(((_2147 * _2147) + (_2148 * _2148)) + (_2150 * _2150));
        float _2163 = (1.0 - (cbSceneParam._m0[77u].w / _2135)) * _2160;
        float _2169 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2171 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2380;
        if (abs((_2149 - _2152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2380 = ((((_2153 > 0.0) ? exp2(_2169 * _2153) : (2.0 - exp2(_2171 * _2153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2163;
        }
        else
        {
            float _2315 = 1.0 / cbSceneParam._m0[80u].x;
            float _2316 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : max(_2153, _2154));
            float _2317 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : min(_2153, _2154));
            float _2326 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : min(_2316, 0.0));
            float _2327 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : min(_2317, 0.0));
            _2380 = ((abs(_2160 / _2149) * cbSceneParam._m0[80u].y) * ((((_2326 - _2327) * 2.0) - ((exp2(_2169 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)))) - exp2(_2169 * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0))))) * _2315)) - ((exp2(_2171 * _2326) - exp2(_2171 * _2327)) * _2315))) + (_2163 * cbSceneParam._m0[80u].z);
        }
        vec4 _2382 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2073, _2074, 1.0), 0.0);
        float _2391 = exp2((_2380 * (-1.44269502162933349609375)) * (1.0 - _2382.w));
        float _2392 = log2(_2391);
        float _2408 = log2(_2093);
        _2173 = (exp2(_2408 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2392 * cbSceneParam._m0[78u].x)) * _2382.x) / cbSceneParam._m0[78u].x)) + _2090;
        _2175 = (exp2(_2408 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2392 * cbSceneParam._m0[78u].y)) * _2382.y) / cbSceneParam._m0[78u].y)) + _2091;
        _2177 = (exp2(_2408 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2392 * cbSceneParam._m0[78u].z)) * _2382.z) / cbSceneParam._m0[78u].z)) + _2092;
        _2179 = _2391 * _2093;
    }
    else
    {
        _2173 = _2090;
        _2175 = _2091;
        _2177 = _2092;
        _2179 = _2093;
    }
    float _2191 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2192 = _2191 == 3.0;
    float _2193 = log2(_2179);
    float _2200 = exp2(_2193 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0)));
    float _2201 = exp2(_2193 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0)));
    float _2202 = exp2(_2193 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)));
    float _2211 = (_2191 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2211 * (_2192 ? _2200 : (_2200 + (cbSceneParam._m0[72u].w * _2173)));
    SV_Target.y = _2211 * (_2192 ? _2201 : (_2201 + (cbSceneParam._m0[72u].w * _2175)));
    SV_Target.z = _2211 * (_2192 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2177)));
    SV_Target.w = cbInstanceData._m0[_2065].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2065].w;
}


