#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _338;
uint _1764;
uint _1765;
uint _1766;
uint _2000;
uint _2001;
uint _2002;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _166 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _167 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _172 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _173 = _172 * _165;
    float _174 = _172 * _166;
    float _175 = _172 * _167;
    float _179 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _183 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _184 = _183 * TANGENT.x;
    float _185 = _183 * TANGENT.y;
    float _186 = _183 * TANGENT.z;
    float _231 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _241 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _231);
    float _242 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _231);
    float _243 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _231);
    float _268 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _275 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _284 = cbMtdParam._m0[23u].x + _241;
    float _285 = cbMtdParam._m0[23u].y + _242;
    float _286 = cbMtdParam._m0[23u].z + _243;
    float _303 = (-0.0) - dot(vec3(_284, _285, _286), vec3(_268 * _173, _268 * _174, _268 * _175));
    float _304 = (-0.0) - dot(vec3(_284, _285, _286), vec3(_275 * _184, _275 * _185, _275 * _186));
    float _305 = (-0.0) - dot(vec3(_284, _285, _286), vec3((-0.0) - (NORMAL.x * _179), (-0.0) - (NORMAL.y * _179), (-0.0) - (NORMAL.z * _179)));
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _309 * _305;
    float _312 = (cbMtdParam._m0[19u].w * _303) * _309;
    float _314 = (cbMtdParam._m0[20u].x * _304) * _309;
    float _317 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _318 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _336;
    float _339;
    float _341;
    if (_312 > 0.0)
    {
        float _322 = (1.0 - _317) / _312;
        _336 = _322;
        _339 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_322 * _310)) * 0.16666667163372039794921875;
        _341 = (fract((_322 * _314) + _318) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_312 < 0.0)
        {
            float _337 = ((-0.0) - _317) / _312;
            frontier_phi_3_2_ladder = (fract(_337 * _310) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _337;
            frontier_phi_3_2_ladder_2 = (fract((_337 * _314) + _318) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _338;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _336 = frontier_phi_3_2_ladder_1;
        _339 = frontier_phi_3_2_ladder;
        _341 = frontier_phi_3_2_ladder_2;
    }
    float _367;
    float _369;
    float _371;
    if (_314 > 0.0)
    {
        float _354 = (1.0 - _318) / _314;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_354 < _336)
        {
            frontier_phi_8_5_ladder = _354;
            frontier_phi_8_5_ladder_1 = (fract(_354 * _310) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_2 = (fract((_354 * _312) + _317) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_8_5_ladder = _336;
            frontier_phi_8_5_ladder_1 = _341;
            frontier_phi_8_5_ladder_2 = _339;
        }
        _367 = frontier_phi_8_5_ladder;
        _369 = frontier_phi_8_5_ladder_2;
        _371 = frontier_phi_8_5_ladder_1;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_314 < 0.0)
        {
            float _368 = ((-0.0) - _318) / _314;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_368 < _336)
            {
                frontier_phi_8_6_ladder_9_ladder = _368;
                frontier_phi_8_6_ladder_9_ladder_1 = fract(_368 * _310) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = (fract((_368 * _312) + _317) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _336;
                frontier_phi_8_6_ladder_9_ladder_1 = _341;
                frontier_phi_8_6_ladder_9_ladder_2 = _339;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _336;
            frontier_phi_8_6_ladder_1 = _341;
            frontier_phi_8_6_ladder_2 = _339;
        }
        _367 = frontier_phi_8_6_ladder;
        _369 = frontier_phi_8_6_ladder_2;
        _371 = frontier_phi_8_6_ladder_1;
    }
    float _375 = (_310 > 0.0) ? (cbMtdParam._m0[16u].w / _310) : 5000.0;
    float _388;
    float _389;
    if (_375 < _367)
    {
        _388 = ((_317 + cbMtdParam._m0[17u].x) + (_375 * _312)) * 0.16666667163372039794921875;
        _389 = (((_375 * _314) + _318) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _388 = _369;
        _389 = _371;
    }
    vec4 _392 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_388, _389));
    float _416 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _420 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _421 = _241 * _420;
    float _422 = _242 * _420;
    float _423 = _243 * _420;
    float _429 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _430 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _439 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_429 * cbSceneParam._m0[86u].x, _430 * cbSceneParam._m0[86u].y));
    float _442 = _439.x * TEXCOORD.z;
    float _443 = (-0.0) - _421;
    float _444 = (-0.0) - _422;
    float _445 = (-0.0) - _423;
    float _467 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _471 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _615;
    float _616;
    float _617;
    float _618;
    float _619;
    float _620;
    float _621;
    float _622;
    float _623;
    float _624;
    float _625;
    float _626;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _537 = (cbModelParam._m0[37u].x * ((((fma(_475, cbModelParam._m0[26u].z, fma(_471, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _467)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _539 = (cbModelParam._m0[37u].y * ((((fma(_475, cbModelParam._m0[27u].z, fma(_471, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _467)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _540 = (((((fma(_475, cbModelParam._m0[28u].z, fma(_471, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _467)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        float _577 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _588 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _598 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _608 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_564.x + (-0.5));
        float _610 = _608 * (_564.y + (-0.5));
        float _611 = _608 * (_564.z + (-0.5));
        _615 = _577 * (_543.z + (-0.5));
        _616 = _577 * (_543.y + (-0.5));
        _617 = _577 * (_543.x + (-0.5));
        _618 = _588 * (_550.z + (-0.5));
        _619 = _588 * (_550.y + (-0.5));
        _620 = _588 * (_550.x + (-0.5));
        _621 = _598 * (_557.z + (-0.5));
        _622 = _598 * (_557.y + (-0.5));
        _623 = _598 * (_557.x + (-0.5));
        _624 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        _625 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        _626 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    }
    else
    {
        _615 = _338;
        _616 = _338;
        _617 = _338;
        _618 = _338;
        _619 = _338;
        _620 = _338;
        _621 = _338;
        _622 = _338;
        _623 = _338;
        _624 = _338;
        _625 = _338;
        _626 = _338;
    }
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _680 = (cbModelParam._m0[38u].x * ((((fma(_475, cbModelParam._m0[30u].z, fma(_471, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _467)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _681 = (cbModelParam._m0[38u].y * ((((fma(_475, cbModelParam._m0[31u].z, fma(_471, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _467)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _682 = (((((fma(_475, cbModelParam._m0[32u].z, fma(_471, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _467)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        float _717 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _727 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _737 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _747 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_705.x + (-0.5));
        float _749 = _747 * (_705.y + (-0.5));
        float _750 = _747 * (_705.z + (-0.5));
        _754 = _717 * (_684.z + (-0.5));
        _755 = _717 * (_684.y + (-0.5));
        _756 = _717 * (_684.x + (-0.5));
        _757 = _727 * (_691.z + (-0.5));
        _758 = _727 * (_691.y + (-0.5));
        _759 = _727 * (_691.x + (-0.5));
        _760 = _737 * (_698.z + (-0.5));
        _761 = _737 * (_698.y + (-0.5));
        _762 = _737 * (_698.x + (-0.5));
        _763 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        _764 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        _765 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    }
    else
    {
        _754 = _338;
        _755 = _338;
        _756 = _338;
        _757 = _338;
        _758 = _338;
        _759 = _338;
        _760 = _338;
        _761 = _338;
        _762 = _338;
        _763 = _338;
        _764 = _338;
        _765 = _338;
    }
    float _780 = _421 * (-0.5);
    float _781 = _422 * (-0.5);
    float _782 = _423 * (-0.5);
    float _783 = dot(vec4(_780, _781, _782, 1.0), vec4(_756, _759, _762, _765));
    float _786 = dot(vec4(_780, _781, _782, 1.0), vec4(_755, _758, _761, _764));
    float _789 = dot(vec4(_780, _781, _782, 1.0), vec4(_754, _757, _760, _763));
    float _824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _796 = dot(vec4(_780, _781, _782, 1.0), vec4(_615, _618, _621, _624));
        float _800 = dot(vec4(_780, _781, _782, 1.0), vec4(_616, _619, _622, _625));
        float _804 = dot(vec4(_780, _781, _782, 1.0), vec4(_617, _620, _623, _626));
        float _811 = dot(vec4(cbModelParam._m0[39u]), vec4(_780, _781, _782, 1.0));
        _824 = dot(vec3(isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)), isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)), isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_811) ? 0.0 : (isnan(0.0) ? _811 : max(0.0, _811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _824 = 1.0;
    }
    float _835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _826 = dot(vec4(cbModelParam._m0[40u]), vec4(_780, _781, _782, 1.0));
        _835 = dot(vec3(isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)), isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)), isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_826) ? 0.0 : (isnan(0.0) ? _826 : max(0.0, _826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _835 = 1.0;
    }
    float _839 = (_835 * cbModelParam._m0[1u].x) + (_824 * (1.0 - cbModelParam._m0[1u].x));
    float _846 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _929;
    float _931;
    float _933;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _896 = fma(_475, cbModelParam._m0[13u].z, fma(_471, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467)) + cbModelParam._m0[13u].w;
        float _900 = fma(_475, cbModelParam._m0[14u].z, fma(_471, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467)) + cbModelParam._m0[14u].w;
        float _904 = fma(_475, cbModelParam._m0[15u].z, fma(_471, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467)) + cbModelParam._m0[15u].w;
        float _907 = fma(_445, cbModelParam._m0[13u].z, fma(_444, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443));
        float _910 = fma(_445, cbModelParam._m0[14u].z, fma(_444, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443));
        float _913 = fma(_445, cbModelParam._m0[15u].z, fma(_444, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443));
        float _939;
        if (_907 > 0.0)
        {
            _939 = abs((1.0 - _896) / _907);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_907 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_896 + 1.0) / _907);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _939 = frontier_phi_26_24_ladder;
        }
        float _1220;
        if (_910 > 0.0)
        {
            _1220 = abs((1.0 - _900) / _910);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_910 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_900 + 1.0) / _910);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1220 = frontier_phi_35_31_ladder;
        }
        float _1517;
        if (_913 > 0.0)
        {
            _1517 = abs((1.0 - _904) / _913);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_913 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_904 + 1.0) / _913);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1517 = frontier_phi_49_42_ladder;
        }
        float _1519 = isnan(_1220) ? _939 : (isnan(_939) ? _1220 : min(_939, _1220));
        float _1520 = isnan(_1517) ? _1519 : (isnan(_1519) ? _1517 : min(_1519, _1517));
        float _1524 = (_1520 * _907) + _896;
        float _1525 = (_1520 * _910) + _900;
        float _1526 = (_1520 * _913) + _904;
        float _1527 = _1520 * 9.9999997473787516355514526367188e-05;
        float _1528 = (-1.0) - _1527;
        float _1530 = _1527 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1526 > _1530) || ((_1526 < _1528) || ((_1525 > _1530) || ((_1525 < _1528) || ((_1524 < _1528) || (_1524 > _1530))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1526, cbModelParam._m0[9u].z, fma(_1525, cbModelParam._m0[9u].y, _1524 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1526, cbModelParam._m0[10u].z, fma(_1525, cbModelParam._m0[10u].y, _1524 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1526, cbModelParam._m0[11u].z, fma(_1525, cbModelParam._m0[11u].y, _1524 * cbModelParam._m0[11u].x))), _846);
            frontier_phi_25_49_ladder = _1637.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _1637.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _1637.x * cbModelParam._m0[1u].y;
        }
        _929 = frontier_phi_25_49_ladder_2;
        _931 = frontier_phi_25_49_ladder_1;
        _933 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_443, _444, _445), _846);
        _929 = _917.x * cbModelParam._m0[1u].y;
        _931 = _917.y * cbModelParam._m0[1u].y;
        _933 = _917.z * cbModelParam._m0[1u].y;
    }
    float _936 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1027;
    float _1029;
    float _1031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _991 = fma(_475, cbModelParam._m0[21u].z, fma(_471, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467)) + cbModelParam._m0[21u].w;
        float _995 = fma(_475, cbModelParam._m0[22u].z, fma(_471, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467)) + cbModelParam._m0[22u].w;
        float _999 = fma(_475, cbModelParam._m0[23u].z, fma(_471, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467)) + cbModelParam._m0[23u].w;
        float _1002 = fma(_445, cbModelParam._m0[21u].z, fma(_444, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443));
        float _1005 = fma(_445, cbModelParam._m0[22u].z, fma(_444, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443));
        float _1008 = fma(_445, cbModelParam._m0[23u].z, fma(_444, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443));
        float _1225;
        if (_1002 > 0.0)
        {
            _1225 = abs((1.0 - _991) / _1002);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1002 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_991 + 1.0) / _1002);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1225 = frontier_phi_37_33_ladder;
        }
        float _1543;
        if (_1005 > 0.0)
        {
            _1543 = abs((1.0 - _995) / _1005);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1005 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_995 + 1.0) / _1005);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1543 = frontier_phi_51_44_ladder;
        }
        float _1694;
        if (_1008 > 0.0)
        {
            _1694 = abs((1.0 - _999) / _1008);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1008 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_999 + 1.0) / _1008);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _1694 = frontier_phi_65_60_ladder;
        }
        float _1696 = isnan(_1543) ? _1225 : (isnan(_1225) ? _1543 : min(_1225, _1543));
        float _1697 = isnan(_1694) ? _1696 : (isnan(_1696) ? _1694 : min(_1696, _1694));
        float _1701 = (_1697 * _1002) + _991;
        float _1702 = (_1697 * _1005) + _995;
        float _1703 = (_1697 * _1008) + _999;
        float _1704 = _1697 * 9.9999997473787516355514526367188e-05;
        float _1705 = (-1.0) - _1704;
        float _1707 = _1704 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_1703 > _1707) || ((_1703 < _1705) || ((_1702 > _1707) || ((_1702 < _1705) || ((_1701 < _1705) || (_1701 > _1707))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1703, cbModelParam._m0[17u].z, fma(_1702, cbModelParam._m0[17u].y, _1701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1703, cbModelParam._m0[18u].z, fma(_1702, cbModelParam._m0[18u].y, _1701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1703, cbModelParam._m0[19u].z, fma(_1702, cbModelParam._m0[19u].y, _1701 * cbModelParam._m0[19u].x))), _936);
            frontier_phi_34_65_ladder = _1863.z * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _1863.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _1863.x * cbModelParam._m0[1u].z;
        }
        _1027 = frontier_phi_34_65_ladder_2;
        _1029 = frontier_phi_34_65_ladder_1;
        _1031 = frontier_phi_34_65_ladder;
    }
    else
    {
        vec4 _1011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_443, _444, _445), _936);
        _1027 = _1011.x * cbModelParam._m0[1u].z;
        _1029 = _1011.y * cbModelParam._m0[1u].z;
        _1031 = _1011.z * cbModelParam._m0[1u].z;
    }
    float _1043 = _442 * 0.01200000010430812835693359375;
    float _1045 = _1043 * ((cbModelParam._m0[1u].w * (_1027 - _929)) + _929);
    float _1046 = _1043 * ((cbModelParam._m0[1u].w * (_1029 - _931)) + _931);
    float _1047 = _1043 * ((cbModelParam._m0[1u].w * (_1031 - _933)) + _933);
    float _1068 = fma(_1047, cbSceneParam._m0[89u].z, fma(_1046, cbSceneParam._m0[89u].y, _1045 * cbSceneParam._m0[89u].x));
    float _1071 = fma(_1047, cbSceneParam._m0[90u].z, fma(_1046, cbSceneParam._m0[90u].y, _1045 * cbSceneParam._m0[90u].x));
    float _1074 = fma(_1047, cbSceneParam._m0[91u].z, fma(_1046, cbSceneParam._m0[91u].y, _1045 * cbSceneParam._m0[91u].x));
    uint _1081 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1086 = floatBitsToUint(cbInstanceData._m0[_1081 + 5u]);
    uint _1088 = _1086.x * 14u;
    uint _1089 = _1088 + 13u;
    float _1094 = _442 + (-1.0);
    float _1098 = (cbLight._m0[_1089].x * _1094) + 1.0;
    float _1099 = (cbLight._m0[_1089].y * _1094) + 1.0;
    uint _1100 = _1088 + 8u;
    float _1111 = cbLight._m0[_1088].x + _421;
    float _1112 = cbLight._m0[_1088].y + _422;
    float _1113 = cbLight._m0[_1088].z + _423;
    float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
    float _1121 = dot(vec3(0.0), vec3(cbLight._m0[_1088].xyz));
    float _2343 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    float _1125 = dot(vec3(0.0), vec3(_421, _422, _423));
    float _2354 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    float _1129 = dot(vec3(cbLight._m0[_1088].xyz), vec3(_1111 * _1117, _1112 * _1117, _1113 * _1117));
    float _2365 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1140 = (exp2(log2(1.0 - (isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1146 = (0.5 / ((_1124 + 9.9999999392252902907785028219223e-09) + _1128)) * _1124;
    float _2376 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = (isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0))) * 0.31831014156341552734375;
    float _1150 = isnan(1.0) ? _1098 : (isnan(_1098) ? 1.0 : min(_1098, 1.0));
    uint _1160 = _1088 + 9u;
    uint _1166 = _1088 | 1u;
    float _1172 = cbLight._m0[_1166].x + _421;
    float _1173 = cbLight._m0[_1166].y + _422;
    float _1174 = cbLight._m0[_1166].z + _423;
    float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
    float _1182 = dot(vec3(0.0), vec3(cbLight._m0[_1166].xyz));
    float _2392 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
    float _1186 = dot(vec3(cbLight._m0[_1166].xyz), vec3(_1172 * _1178, _1173 * _1178, _1174 * _1178));
    float _2403 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1195 = (exp2(log2(1.0 - (isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1199 = (0.5 / ((_1185 + 9.9999999392252902907785028219223e-09) + _1128)) * _1185;
    float _2414 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1201 = (isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0))) * 0.31831014156341552734375;
    float _1202 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
    float _1212 = (((_1195 * cbLight._m0[_1160].x) * _1201) * _1202) + (((_1140 * cbLight._m0[_1100].x) * _1148) * _1150);
    float _1213 = (((_1195 * cbLight._m0[_1160].y) * _1201) * _1202) + (((_1140 * cbLight._m0[_1100].y) * _1148) * _1150);
    float _1214 = (((_1195 * cbLight._m0[_1160].z) * _1201) * _1202) + (((_1140 * cbLight._m0[_1100].z) * _1148) * _1150);
    float _1332;
    float _1334;
    float _1336;
    if (_1086.y == 0u)
    {
        float _1270 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1271 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1270;
        float _1272 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1270;
        float _1273 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1270;
        uvec4 _1285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1286 = _1285.x;
        uint _1297 = uint((float(_1285.y) * floor(float(uint(cbSceneParam._m0[85u].y * _430) / _1286))) + floor(float(uint(cbSceneParam._m0[85u].x * _429) / _1286)));
        float _1307 = (log2(_1273 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1308 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        uint _1311 = uint(isnan(14.0) ? _1308 : (isnan(_1308) ? 14.0 : min(_1308, 14.0)));
        uvec4 _1317 = texelFetch(g_lightClusterGridBuffer, int(((_1311 << 2u) + (_1297 << 6u)) >> 2u));
        uint _1318 = _1317.x;
        uint _1319 = _1285.z;
        float _1409;
        float _1411;
        float _1413;
        if (((((1u << ((_1319 >> 4u) & 15u)) + 4294967295u) & _1318) == 0u) || ((_1319 & 240u) == 0u))
        {
            _1409 = 0.0;
            _1411 = 0.0;
            _1413 = 0.0;
        }
        else
        {
            float _1410;
            float _1412;
            float _1414;
            float _1568 = 0.0;
            float _1569 = 0.0;
            float _1570 = 0.0;
            uint _1571 = 0u;
            uint _1580;
            bool _1581;
            for (;;)
            {
                _1580 = texelFetch(g_lightClassification, int((((_1311 << 5u) + (_1297 << 9u)) + (_1571 << 2u)) >> 2u)).x;
                _1581 = _1580 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1581)
                {
                    frontier_phi_62_pred = _1570;
                    frontier_phi_62_pred_1 = _1569;
                    frontier_phi_62_pred_2 = _1568;
                }
                else
                {
                    float _1734;
                    float _1735;
                    float _1736;
                    uint _1737;
                    _1734 = _1568;
                    _1735 = _1569;
                    _1736 = _1570;
                    _1737 = _1580;
                    float _1646;
                    float _1647;
                    float _1648;
                    for (;;)
                    {
                        uint _1741 = uint(findLSB(_1737)) + (_1571 << 5u);
                        uint _1738 = (_1737 + 4294967295u) & _1737;
                        uint _1743 = _1741 * 48u;
                        vec4 _1757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1743)).x, texelFetch(g_PointLightRenderingBuffer, int(_1743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1743 + 3u)).x));
                        uint _1774 = (_1741 * 48u) + 8u;
                        vec3 _1785 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1774)).x, texelFetch(g_PointLightRenderingBuffer, int(_1774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1774 + 2u)).x));
                        float _1789 = _1757.x - _1271;
                        float _1790 = _1757.y - _1272;
                        float _1791 = _1757.z - _1273;
                        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
                        float _1795 = inversesqrt(_1792);
                        float _1804 = 1.0 - (_1792 * _1757.w);
                        float _2440 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
                        float _1806 = sqrt(_1792) * uintBitsToFloat(uvec4(_1764, _1765, _1766, texelFetch(g_PointLightRenderingBuffer, int(((_1741 * 48u) + 4u) + 3u)).x)).w;
                        float _1809 = 1.39999997615814208984375 / (_1806 + 1.39999997615814208984375);
                        float _1810 = _1809 * _1809;
                        float _1813 = ((1.0 - _1810) * dot(vec3(0.0), vec3(_1795 * _1789, _1795 * _1790, _1795 * _1791))) + _1810;
                        float _1815 = (-0.0) - _1271;
                        float _1816 = (-0.0) - _1272;
                        float _1817 = (-0.0) - _1273;
                        float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
                        float _1825 = dot(vec3(0.0), vec3(_1821 * _1815, _1821 * _1816, _1821 * _1817));
                        float _2451 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
                        float _2462 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
                        float _1829 = isnan(1.0) ? _2462 : (isnan(_2462) ? 1.0 : min(_2462, 1.0));
                        float _1833 = (0.5 / (((isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0))) + 9.9999999392252902907785028219223e-09) + _1829)) * _1829;
                        float _2473 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
                        float _1842 = (((isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0))) * 3.1415927410125732421875) / (((_1806 * _1806) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0)));
                        _1646 = (_1842 * _1785.x) + _1734;
                        _1647 = (_1842 * _1785.y) + _1735;
                        _1648 = (_1842 * _1785.z) + _1736;
                        if (_1738 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1734 = _1646;
                            _1735 = _1647;
                            _1736 = _1648;
                            _1737 = _1738;
                        }
                    }
                    frontier_phi_62_pred = _1648;
                    frontier_phi_62_pred_1 = _1647;
                    frontier_phi_62_pred_2 = _1646;
                }
                _1414 = frontier_phi_62_pred;
                _1412 = frontier_phi_62_pred_1;
                _1410 = frontier_phi_62_pred_2;
                uint _1572 = _1571 + 1u;
                if (_1572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1568 = _1410;
                    _1569 = _1412;
                    _1570 = _1414;
                    _1571 = _1572;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1409 = _1410;
            _1411 = _1412;
            _1413 = _1414;
        }
        uvec4 _1417 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1418 = _1417.z;
        uint _1420 = (_1418 >> 8u) & 15u;
        float _1548;
        float _1550;
        float _1552;
        if (((4294967295u << _1420) & _1318) == 0u)
        {
            _1548 = _1409;
            _1550 = _1411;
            _1552 = _1413;
        }
        else
        {
            float _1564 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1420 < ((_1418 >> 12u) & 15u))
            {
                float _1549;
                float _1551;
                float _1553;
                float _1720 = _1409;
                float _1721 = _1411;
                float _1722 = _1413;
                uint _1723 = _1420;
                uint _1732;
                bool _1733;
                for (;;)
                {
                    _1732 = texelFetch(g_lightClassification, int((((_1311 << 5u) + (_1297 << 9u)) + (_1723 << 2u)) >> 2u)).x;
                    _1733 = _1732 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    if (_1733)
                    {
                        frontier_phi_71_pred = _1722;
                        frontier_phi_71_pred_1 = _1721;
                        frontier_phi_71_pred_2 = _1720;
                    }
                    else
                    {
                        float _1868;
                        float _1869;
                        float _1870;
                        float _2089;
                        float _2090;
                        float _2091;
                        float _1878 = _1720;
                        float _1879 = _1721;
                        float _1880 = _1722;
                        uint _1881 = _1732;
                        uint _1882;
                        uint _1892;
                        vec4 _1907;
                        float _1908;
                        vec3 _1920;
                        vec4 _1935;
                        vec4 _1950;
                        float _1996;
                        bool _1997;
                        for (;;)
                        {
                            _1892 = ((_1723 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1881));
                            _1882 = (_1881 + 4294967295u) & _1881;
                            uint _1894 = _1892 * 40u;
                            _1907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1894 + 3u)).x));
                            _1908 = _1907.w;
                            uint _1910 = (_1892 * 40u) + 8u;
                            _1920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1910 + 2u)).x));
                            uint _1922 = (_1892 * 40u) + 16u;
                            _1935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1922 + 3u)).x));
                            uint _1937 = (_1892 * 40u) + 20u;
                            _1950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1937 + 3u)).x));
                            uint _1952 = (_1892 * 40u) + 24u;
                            vec4 _1965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1952 + 3u)).x));
                            uint _1971 = (_1892 * 40u) + 28u;
                            vec4 _1984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1971 + 3u)).x));
                            _1996 = fma(_1273, _1984.z, fma(_1272, _1984.y, _1984.x * _1271)) + _1984.w;
                            _1997 = !((fma(_1273, _1965.z, fma(_1272, _1965.y, _1965.x * _1271)) + _1965.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            if (_1997)
                            {
                                float _2031 = _1907.x - _1271;
                                float _2032 = _1907.y - _1272;
                                float _2033 = _1907.z - _1273;
                                float _2034 = dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033));
                                float _2037 = inversesqrt(_2034);
                                float _2044 = 1.0 - (_2034 / (_1908 * _1908));
                                float _2484 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
                                float _2046 = sqrt(_2034) * uintBitsToFloat(uvec4(_2000, _2001, _2002, texelFetch(g_SpotLightRenderingBuffer, int(((_1892 * 40u) + 4u) + 3u)).x)).w;
                                float _2048 = 1.39999997615814208984375 / (_2046 + 1.39999997615814208984375);
                                float _2049 = _2048 * _2048;
                                float _2052 = (fma(_1273, _1935.z, fma(_1272, _1935.y, _1935.x * _1271)) + _1935.w) / _1996;
                                float _2053 = (fma(_1273, _1950.z, fma(_1272, _1950.y, _1950.x * _1271)) + _1950.w) / _1996;
                                float _2057 = 1.0 - dot(vec2(_2052, _2053), vec2(_2052, _2053));
                                float _2495 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
                                float _2065 = dot(vec3(0.0), vec3((-0.0) - (_1271 * _1564), (-0.0) - (_1272 * _1564), (-0.0) - (_1273 * _1564)));
                                float _2506 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
                                float _2073 = ((1.0 - _2049) * dot(vec3(0.0), vec3(_2037 * _2031, _2037 * _2032, _2037 * _2033))) + _2049;
                                float _2517 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
                                float _2074 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
                                float _2078 = (0.5 / (((isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0))) + 9.9999999392252902907785028219223e-09) + _2074)) * _2074;
                                float _2528 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
                                float _2085 = ((isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0))) * (isnan(1.0) ? _2484 : (isnan(_2484) ? 1.0 : min(_2484, 1.0)))) * (((isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0))) * 3.1415927410125732421875) / (((_2046 * _2046) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2085 * _1920.z;
                                frontier_phi_77_pred_1 = _2085 * _1920.x;
                                frontier_phi_77_pred_2 = _2085 * _1920.y;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                            }
                            _2091 = frontier_phi_77_pred;
                            _2089 = frontier_phi_77_pred_1;
                            _2090 = frontier_phi_77_pred_2;
                            _1868 = _2089 + _1878;
                            _1869 = _2090 + _1879;
                            _1870 = _2091 + _1880;
                            if (_1882 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1878 = _1868;
                                _1879 = _1869;
                                _1880 = _1870;
                                _1881 = _1882;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _1870;
                        frontier_phi_71_pred_1 = _1869;
                        frontier_phi_71_pred_2 = _1868;
                    }
                    _1553 = frontier_phi_71_pred;
                    _1551 = frontier_phi_71_pred_1;
                    _1549 = frontier_phi_71_pred_2;
                    uint _1724 = _1723 + 1u;
                    if (_1724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1720 = _1549;
                        _1721 = _1551;
                        _1722 = _1553;
                        _1723 = _1724;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1551;
                frontier_phi_53_54_ladder_1 = _1549;
                frontier_phi_53_54_ladder_2 = _1553;
            }
            else
            {
                frontier_phi_53_54_ladder = _1411;
                frontier_phi_53_54_ladder_1 = _1409;
                frontier_phi_53_54_ladder_2 = _1413;
            }
            _1548 = frontier_phi_53_54_ladder_1;
            _1550 = frontier_phi_53_54_ladder;
            _1552 = frontier_phi_53_54_ladder_2;
        }
        float _1557 = isnan(1.0) ? _442 : (isnan(_442) ? 1.0 : min(_442, 1.0));
        _1332 = ((_1548 * 0.039999999105930328369140625) * _1557) + _1212;
        _1334 = ((_1550 * 0.039999999105930328369140625) * _1557) + _1213;
        _1336 = ((_1552 * 0.039999999105930328369140625) * _1557) + _1214;
    }
    else
    {
        _1332 = _1212;
        _1334 = _1213;
        _1336 = _1214;
    }
    uint _1343 = (_1081 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1358 = ((_392.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1343].x) + ((_1332 + ((isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0))) * _839)) * cbPerFrame._m0[3u].x);
    float _1359 = ((_392.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1343].y) + ((_1334 + ((isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0))) * _839)) * cbPerFrame._m0[3u].x);
    float _1360 = ((_392.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1343].z) + ((_1336 + ((isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0))) * _839)) * cbPerFrame._m0[3u].x);
    uint _1364 = _1081 + 6u;
    float _1372 = _429 / cbSceneParam._m0[86u].x;
    float _1373 = _430 / cbSceneParam._m0[86u].y;
    vec4 _1387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1372, _1373, (log2((isnan(cbSceneParam._m0[77u].w) ? _416 : (isnan(_416) ? cbSceneParam._m0[77u].w : min(_416, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1389 = _1387.x;
    float _1390 = _1387.y;
    float _1391 = _1387.z;
    float _1392 = _1387.w;
    float _1466;
    float _1468;
    float _1470;
    float _1472;
    if (_416 > cbSceneParam._m0[78u].w)
    {
        float _1428 = isnan(_416) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _416 : min(cbSceneParam._m0[80u].w, _416));
        float _1429 = _1428 / _416;
        float _1440 = _1429 * _241;
        float _1441 = _242 * _1429;
        float _1442 = (-0.0) - _1441;
        float _1443 = _1429 * _243;
        float _1445 = (cbSceneParam._m0[77u].w * _1442) / _1428;
        float _1446 = _1445 + cbSceneParam._m0[79u].w;
        float _1447 = cbSceneParam._m0[79u].w - _1441;
        float _1453 = sqrt(((_1440 * _1440) + (_1441 * _1441)) + (_1443 * _1443));
        float _1456 = (1.0 - (cbSceneParam._m0[77u].w / _1428)) * _1453;
        float _1462 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1464 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1656;
        if (abs((_1442 - _1445) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1656 = ((((_1446 > 0.0) ? exp2(_1462 * _1446) : (2.0 - exp2(_1464 * _1446))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1456;
        }
        else
        {
            float _1594 = 1.0 / cbSceneParam._m0[80u].x;
            float _1595 = isnan(_1447) ? _1446 : (isnan(_1446) ? _1447 : max(_1446, _1447));
            float _1596 = isnan(_1447) ? _1446 : (isnan(_1446) ? _1447 : min(_1446, _1447));
            float _1605 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : min(_1595, 0.0));
            float _1606 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : min(_1596, 0.0));
            _1656 = ((abs(_1453 / _1442) * cbSceneParam._m0[80u].y) * ((((_1605 - _1606) * 2.0) - ((exp2(_1462 * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)))) - exp2(_1462 * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))))) * _1594)) - ((exp2(_1464 * _1605) - exp2(_1464 * _1606)) * _1594))) + (_1456 * cbSceneParam._m0[80u].z);
        }
        vec4 _1658 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1372, _1373, 1.0), 0.0);
        float _1667 = exp2((_1656 * (-1.44269502162933349609375)) * (1.0 - _1658.w));
        float _1668 = log2(_1667);
        float _1684 = log2(_1392);
        _1466 = (exp2(_1684 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1668 * cbSceneParam._m0[78u].x)) * _1658.x) / cbSceneParam._m0[78u].x)) + _1389;
        _1468 = (exp2(_1684 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1668 * cbSceneParam._m0[78u].y)) * _1658.y) / cbSceneParam._m0[78u].y)) + _1390;
        _1470 = (exp2(_1684 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1668 * cbSceneParam._m0[78u].z)) * _1658.z) / cbSceneParam._m0[78u].z)) + _1391;
        _1472 = _1667 * _1392;
    }
    else
    {
        _1466 = _1389;
        _1468 = _1390;
        _1470 = _1391;
        _1472 = _1392;
    }
    float _1484 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1485 = _1484 == 3.0;
    float _1487 = log2(_1472);
    float _1494 = exp2(_1487 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    float _1495 = exp2(_1487 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    float _1496 = exp2(_1487 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    float _1505 = (_1484 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1505 * (_1485 ? _1494 : (_1494 + (cbSceneParam._m0[72u].w * _1466)));
    SV_Target.y = _1505 * (_1485 ? _1495 : (_1495 + (cbSceneParam._m0[72u].w * _1468)));
    SV_Target.z = _1505 * (_1485 ? _1496 : (_1496 + (cbSceneParam._m0[72u].w * _1470)));
    SV_Target.w = cbInstanceData._m0[_1364].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1364].w;
}


