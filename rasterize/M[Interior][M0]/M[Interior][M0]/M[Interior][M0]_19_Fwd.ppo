#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _184 = _183 * _176;
    float _185 = _183 * _177;
    float _186 = _183 * _178;
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = _190 * NORMAL.x;
    float _192 = _190 * NORMAL.y;
    float _193 = _190 * NORMAL.z;
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _198 = _197 * TANGENT.x;
    float _199 = _197 * TANGENT.y;
    float _200 = _197 * TANGENT.z;
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    vec4 _276 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.w;
    float _295 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _282) + cbMtdParam._m0[11u].x) * _276.x;
    float _297 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _282) + cbMtdParam._m0[11u].y) * _276.y;
    float _299 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _282) + cbMtdParam._m0[11u].z) * _276.z;
    float _324 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _331 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _340 = cbMtdParam._m0[23u].x + _255;
    float _341 = cbMtdParam._m0[23u].y + _256;
    float _342 = cbMtdParam._m0[23u].z + _257;
    float _356 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_324 * _184, _324 * _185, _324 * _186));
    float _357 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_331 * _198, _331 * _199, _331 * _200));
    float _358 = (-0.0) - dot(vec3(_340, _341, _342), vec3((-0.0) - _191, (-0.0) - _192, (-0.0) - _193));
    float _362 = inversesqrt(dot(vec3(_356, _357, _358), vec3(_356, _357, _358)));
    float _363 = _362 * _358;
    float _365 = (cbMtdParam._m0[19u].w * _356) * _362;
    float _367 = (cbMtdParam._m0[20u].x * _357) * _362;
    float _370 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _371 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _389;
    float _392;
    float _394;
    if (_365 > 0.0)
    {
        float _375 = (1.0 - _370) / _365;
        _389 = _375;
        _392 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_375 * _363)) * 0.16666667163372039794921875;
        _394 = (fract((_375 * _367) + _371) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_365 < 0.0)
        {
            float _390 = ((-0.0) - _370) / _365;
            frontier_phi_3_2_ladder = (fract((_390 * _367) + _371) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _390;
            frontier_phi_3_2_ladder_2 = (fract(_390 * _363) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _391;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _389 = frontier_phi_3_2_ladder_1;
        _392 = frontier_phi_3_2_ladder_2;
        _394 = frontier_phi_3_2_ladder;
    }
    float _420;
    float _422;
    float _424;
    if (_367 > 0.0)
    {
        float _407 = (1.0 - _371) / _367;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_407 < _389)
        {
            frontier_phi_8_5_ladder = (fract((_407 * _365) + _370) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _407;
            frontier_phi_8_5_ladder_2 = (fract(_407 * _363) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _392;
            frontier_phi_8_5_ladder_1 = _389;
            frontier_phi_8_5_ladder_2 = _394;
        }
        _420 = frontier_phi_8_5_ladder_1;
        _422 = frontier_phi_8_5_ladder;
        _424 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_367 < 0.0)
        {
            float _421 = ((-0.0) - _371) / _367;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_421 < _389)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_421 * _365) + _370) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _421;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_421 * _363) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _392;
                frontier_phi_8_6_ladder_9_ladder_1 = _389;
                frontier_phi_8_6_ladder_9_ladder_2 = _394;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _392;
            frontier_phi_8_6_ladder_1 = _389;
            frontier_phi_8_6_ladder_2 = _394;
        }
        _420 = frontier_phi_8_6_ladder_1;
        _422 = frontier_phi_8_6_ladder;
        _424 = frontier_phi_8_6_ladder_2;
    }
    float _428 = (_363 > 0.0) ? (cbMtdParam._m0[16u].w / _363) : 5000.0;
    float _441;
    float _442;
    if (_428 < _420)
    {
        _441 = ((_370 + cbMtdParam._m0[17u].x) + (_428 * _365)) * 0.16666667163372039794921875;
        _442 = (((_428 * _367) + _371) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _441 = _422;
        _442 = _424;
    }
    vec4 _444 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_441, _442));
    float _449 = _444.x * cbMtdParam._m0[13u].x;
    float _450 = _444.y * cbMtdParam._m0[13u].y;
    float _451 = _444.z * cbMtdParam._m0[13u].z;
    float _456 = 0.5 - (_282 * 0.5);
    float _466 = (((_449 - _295) - (_449 * _282)) * _456) + _295;
    float _467 = (((_450 - _297) - (_450 * _282)) * _456) + _297;
    float _468 = (((_451 - _299) - (_451 * _282)) * _456) + _299;
    vec4 _480 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _488 = (_480.x * 2.0) + (-1.0);
    float _490 = (_480.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_488, _490), vec2(_488, _490));
    float _3066 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _496 = sqrt(1.0 - (isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0))));
    float _497 = _480.z * _282;
    float _500 = fma(_496, _191, fma(_490, _198, _488 * _184));
    float _503 = fma(_496, _192, fma(_490, _199, _488 * _185));
    float _506 = fma(_496, _193, fma(_490, _200, _488 * _186));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _3077 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _514 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
    float _3088 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3099 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3110 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _537 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _538 = _255 * _537;
    float _539 = _256 * _537;
    float _540 = _257 * _537;
    float _546 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _547 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _568 = fma(_513, cbSceneParam._m0[5u].z, fma(_512, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _511));
    float _571 = fma(_513, cbSceneParam._m0[6u].z, fma(_512, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _511));
    float _574 = fma(_513, cbSceneParam._m0[7u].z, fma(_512, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _511));
    uint _587 = uint(roundEven(NORMAL.w)) * 13u;
    uint _589 = (_587 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _595 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0)))) * cbInstanceData._m0[_589].x;
    float _596 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0)))) * cbInstanceData._m0[_589].y;
    float _597 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0)))) * cbInstanceData._m0[_589].z;
    float _3121 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
    float _3132 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
    float _3143 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
    vec4 _609 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _546, cbSceneParam._m0[86u].y * _547));
    float _612 = _609.x * TEXCOORD.z;
    float _613 = dot(vec3(_511, _512, _513), vec3(_538, _539, _540));
    float _616 = _613 * 2.0;
    float _620 = (_616 * _511) - _538;
    float _621 = (_616 * _512) - _539;
    float _622 = (_616 * _513) - _540;
    float _626 = abs(dot(vec3(_538, _539, _540), vec3(_511, _512, _513)));
    float _3154 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _628 = sqrt(_514);
    float _641 = exp2((_628 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_628 * 3.0));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _714 = fma(_681, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673));
        float _718 = fma(_681, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673));
        float _722 = fma(_681, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673));
        float _746 = _673 + _511;
        float _747 = _677 + _512;
        float _748 = _681 + _513;
        float _758 = fma(_748, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746)) - _714;
        float _759 = fma(_748, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746)) - _718;
        float _760 = fma(_748, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746)) - _722;
        float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
        float _777 = ((_764 * _758) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_714 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_764 * _759) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_718 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_764 * _760) / cbModelParam._m0[34u].z) + ((((((_722 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        float _816 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_782.x + (-0.5));
        float _818 = _816 * (_782.y + (-0.5));
        float _819 = _816 * (_782.z + (-0.5));
        float _826 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_789.x + (-0.5));
        float _828 = _826 * (_789.y + (-0.5));
        float _829 = _826 * (_789.z + (-0.5));
        float _836 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_796.x + (-0.5));
        float _838 = _836 * (_796.y + (-0.5));
        float _839 = _836 * (_796.z + (-0.5));
        float _846 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_803.x + (-0.5));
        float _848 = _846 * (_803.y + (-0.5));
        float _849 = _846 * (_803.z + (-0.5));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = _817 * 0.5;
        float _854 = _827 * 0.5;
        float _855 = _837 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _870 = (dot(vec3(_511, _512, _513), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3180 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _880 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3191 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3202 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0))) * (_882 + 1.0))) + _887) * _850;
        float _897 = _818 * 0.5;
        float _898 = _828 * 0.5;
        float _899 = _838 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(_511, _512, _513), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3213 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3224 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3235 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * (_924 + 1.0))) + _929) * _851;
        float _939 = _819 * 0.5;
        float _940 = _829 * 0.5;
        float _941 = _839 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_511, _512, _513), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3246 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3257 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3268 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))) * (_966 + 1.0))) + _971) * _852;
        _988 = _819;
        _989 = _818;
        _990 = _817;
        _991 = _829;
        _992 = _828;
        _993 = _827;
        _994 = _839;
        _995 = _838;
        _996 = _837;
        _997 = _852;
        _998 = _851;
        _999 = _850;
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
    }
    else
    {
        _988 = _391;
        _989 = _391;
        _990 = _391;
        _991 = _391;
        _992 = _391;
        _993 = _391;
        _994 = _391;
        _995 = _391;
        _996 = _391;
        _997 = _391;
        _998 = _391;
        _999 = _391;
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
    }
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1028 = fma(_681, cbModelParam._m0[30u].z, fma(_677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _673));
        float _1032 = fma(_681, cbModelParam._m0[31u].z, fma(_677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _673));
        float _1036 = fma(_681, cbModelParam._m0[32u].z, fma(_677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _673));
        float _1059 = _673 + _511;
        float _1060 = _677 + _512;
        float _1061 = _681 + _513;
        float _1071 = fma(_1061, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1028 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1032 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[35u].z) + ((((((_1036 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1127 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1094.x + (-0.5));
        float _1129 = _1127 * (_1094.y + (-0.5));
        float _1130 = _1127 * (_1094.z + (-0.5));
        float _1137 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1101.x + (-0.5));
        float _1139 = _1137 * (_1101.y + (-0.5));
        float _1140 = _1137 * (_1101.z + (-0.5));
        float _1147 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1108.x + (-0.5));
        float _1149 = _1147 * (_1108.y + (-0.5));
        float _1150 = _1147 * (_1108.z + (-0.5));
        float _1157 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1115.x + (-0.5));
        float _1159 = _1157 * (_1115.y + (-0.5));
        float _1160 = _1157 * (_1115.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_511, _512, _513), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3331 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_1191 + 1.0))) + _1196) * _1161;
        float _1206 = _1129 * 0.5;
        float _1207 = _1139 * 0.5;
        float _1208 = _1149 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_511, _512, _513), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3364 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_1233 + 1.0))) + _1238) * _1162;
        float _1248 = _1130 * 0.5;
        float _1249 = _1140 * 0.5;
        float _1250 = _1150 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_511, _512, _513), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3397 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_1275 + 1.0))) + _1280) * _1163;
        _1297 = _1130;
        _1298 = _1129;
        _1299 = _1128;
        _1300 = _1140;
        _1301 = _1139;
        _1302 = _1138;
        _1303 = _1150;
        _1304 = _1149;
        _1305 = _1148;
        _1306 = _1163;
        _1307 = _1162;
        _1308 = _1161;
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _391;
        _1298 = _391;
        _1299 = _391;
        _1300 = _391;
        _1301 = _391;
        _1302 = _391;
        _1303 = _391;
        _1304 = _391;
        _1305 = _391;
        _1306 = _391;
        _1307 = _391;
        _1308 = _391;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _1001)) + _1001;
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1344 = fma(_1323, cbSceneParam._m0[89u].z, fma(_1322, cbSceneParam._m0[89u].y, _1321 * cbSceneParam._m0[89u].x));
    float _1347 = fma(_1323, cbSceneParam._m0[90u].z, fma(_1322, cbSceneParam._m0[90u].y, _1321 * cbSceneParam._m0[90u].x));
    float _1350 = fma(_1323, cbSceneParam._m0[91u].z, fma(_1322, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1321));
    float _1365 = _620 * 0.5;
    float _1366 = _621 * 0.5;
    float _1367 = _622 * 0.5;
    float _1368 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1371 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1374 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1408;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1381 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_988, _991, _994, _997));
        float _1385 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_989, _992, _995, _998));
        float _1389 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_990, _993, _996, _999));
        float _1396 = dot(vec4(cbModelParam._m0[39u]), vec4(_1365, _1366, _1367, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1419;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1410 = dot(vec4(cbModelParam._m0[40u]), vec4(_1365, _1366, _1367, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1423 = (_1419 * cbModelParam._m0[1u].x) + (_1408 * (1.0 - cbModelParam._m0[1u].x));
    float _1433 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _514);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1433 : min(cbModelParam._m0[25u].z, _1433));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1483 = fma(_681, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673)) + cbModelParam._m0[13u].w;
        float _1487 = fma(_681, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673)) + cbModelParam._m0[14u].w;
        float _1491 = fma(_681, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673)) + cbModelParam._m0[15u].w;
        float _1494 = fma(_622, cbModelParam._m0[13u].z, fma(_621, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620));
        float _1497 = fma(_622, cbModelParam._m0[14u].z, fma(_621, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620));
        float _1500 = fma(_622, cbModelParam._m0[15u].z, fma(_621, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620));
        float _1528;
        if (_1494 > 0.0)
        {
            _1528 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1528 = frontier_phi_26_24_ladder;
        }
        float _1877;
        if (_1497 > 0.0)
        {
            _1877 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1877 = frontier_phi_35_31_ladder;
        }
        float _2177;
        if (_1500 > 0.0)
        {
            _2177 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2177 = frontier_phi_49_42_ladder;
        }
        float _2179 = isnan(_1877) ? _1528 : (isnan(_1528) ? _1877 : min(_1528, _1877));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1494) + _1483;
        float _2185 = (_2180 * _1497) + _1487;
        float _2186 = (_2180 * _1500) + _1491;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1434);
            frontier_phi_25_49_ladder = _2312.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2312.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2312.x * cbModelParam._m0[1u].y;
        }
        _1516 = frontier_phi_25_49_ladder_2;
        _1518 = frontier_phi_25_49_ladder_1;
        _1520 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_620, _621, _622), _1434);
        _1516 = _1504.x * cbModelParam._m0[1u].y;
        _1518 = _1504.y * cbModelParam._m0[1u].y;
        _1520 = _1504.z * cbModelParam._m0[1u].y;
    }
    float _1524 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _514);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1524 : min(cbModelParam._m0[25u].w, _1524));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1580 = fma(_681, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673)) + cbModelParam._m0[21u].w;
        float _1584 = fma(_681, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673)) + cbModelParam._m0[22u].w;
        float _1588 = fma(_681, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673)) + cbModelParam._m0[23u].w;
        float _1591 = fma(_622, cbModelParam._m0[21u].z, fma(_621, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620));
        float _1594 = fma(_622, cbModelParam._m0[22u].z, fma(_621, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620));
        float _1597 = fma(_622, cbModelParam._m0[23u].z, fma(_621, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620));
        float _1882;
        if (_1591 > 0.0)
        {
            _1882 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1882 = frontier_phi_37_33_ladder;
        }
        float _2203;
        if (_1594 > 0.0)
        {
            _2203 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2203 = frontier_phi_51_44_ladder;
        }
        float _2372;
        if (_1597 > 0.0)
        {
            _2372 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2372 = frontier_phi_65_60_ladder;
        }
        float _2374 = isnan(_2203) ? _1882 : (isnan(_1882) ? _2203 : min(_1882, _2203));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1591) + _1580;
        float _2380 = (_2375 * _1594) + _1584;
        float _2381 = (_2375 * _1597) + _1588;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1525);
            frontier_phi_34_65_ladder = _2614.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2614.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2614.z * cbModelParam._m0[1u].z;
        }
        _1616 = frontier_phi_34_65_ladder_1;
        _1618 = frontier_phi_34_65_ladder;
        _1620 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_620, _621, _622), _1525);
        _1616 = _1600.x * cbModelParam._m0[1u].z;
        _1618 = _1600.y * cbModelParam._m0[1u].z;
        _1620 = _1600.z * cbModelParam._m0[1u].z;
    }
    float _1632 = ((((1.0 - _641) * ((_628 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_641 * _628)) * _612;
    float _1633 = _1632 * ((cbModelParam._m0[1u].w * (_1616 - _1516)) + _1516);
    float _1634 = _1632 * ((cbModelParam._m0[1u].w * (_1618 - _1518)) + _1518);
    float _1635 = _1632 * ((cbModelParam._m0[1u].w * (_1620 - _1520)) + _1520);
    float _1638 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, _1633 * cbSceneParam._m0[91u].x));
    uvec4 _1654 = floatBitsToUint(cbInstanceData._m0[_587 + 5u]);
    uint _1656 = _1654.x * 14u;
    uint _1657 = _1656 + 13u;
    float _1662 = _612 + (-1.0);
    float _1665 = (cbLight._m0[_1657].x * _1662) + 1.0;
    float _1666 = (cbLight._m0[_1657].y * _1662) + 1.0;
    uint _1667 = _1656 + 5u;
    float _1673 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
    uint _1677 = _1656 + 4u;
    float _1684 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
    uint _1688 = _1656 | 1u;
    float _1699 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_511, _512, _513));
    float _1702 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_511, _512, _513));
    float _3533 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _3544 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1707 = (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * 0.3183098733425140380859375;
    float _1709 = (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.3183098733425140380859375;
    float _1716 = ((cbLight._m0[_1667].x * _1673) * _1709) + ((cbLight._m0[_1677].x * _1684) * _1707);
    float _1717 = ((_1673 * cbLight._m0[_1667].y) * _1709) + ((_1684 * cbLight._m0[_1677].y) * _1707);
    float _1718 = ((_1673 * cbLight._m0[_1667].z) * _1709) + ((_1684 * cbLight._m0[_1677].z) * _1707);
    uint _1720 = _1656 + 8u;
    float _1733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1656].w)) * _514) * 0.949999988079071044921875);
    float _1734 = _1733 * _1733;
    float _1735 = cbLight._m0[_1656].x + _538;
    float _1736 = cbLight._m0[_1656].y + _539;
    float _1737 = cbLight._m0[_1656].z + _540;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1742 = _1741 * _1735;
    float _1743 = _1741 * _1736;
    float _1744 = _1741 * _1737;
    float _1745 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1656].xyz));
    float _3555 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _1749 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _1750 = dot(vec3(_511, _512, _513), vec3(_1742, _1743, _1744));
    float _3577 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_1742, _1743, _1744));
    float _3588 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1734 * _1734;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1773 = (exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1774 = 1.0 - _1734;
    float _1785 = (0.5 / (((_1749 * ((_1748 * _1774) + _1734)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1774) + _1734) * _1748))) * _1748;
    float _3599 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1787 = (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    uint _1798 = _1656 + 9u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _514) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1688].x + _538;
    float _1812 = cbLight._m0[_1688].y + _539;
    float _1813 = cbLight._m0[_1688].z + _540;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1688].xyz));
    float _3610 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _1825 = dot(vec3(_511, _512, _513), vec3(_1818, _1819, _1820));
    float _3621 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1818, _1819, _1820));
    float _3632 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = _1810 * _1810;
    float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
    float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1847 = 1.0 - _1810;
    float _1857 = (0.5 / (((_1749 * ((_1824 * _1847) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1847) + _1810) * _1824))) * _1824;
    float _3643 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
    float _1869 = (((_1846 * cbLight._m0[_1798].x) * _1859) * _1673) + (((_1773 * cbLight._m0[_1720].x) * _1787) * _1684);
    float _1870 = (((_1846 * cbLight._m0[_1798].y) * _1859) * _1673) + (((_1773 * cbLight._m0[_1720].y) * _1787) * _1684);
    float _1871 = (((_1846 * cbLight._m0[_1798].z) * _1859) * _1673) + (((_1773 * cbLight._m0[_1720].z) * _1787) * _1684);
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    float _1994;
    float _1996;
    if (_1654.y == 0u)
    {
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1926;
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1926;
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1926;
        uvec4 _1941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1942 = _1941.x;
        uint _1953 = uint((float(_1941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _547) / _1942))) + floor(float(uint(cbSceneParam._m0[85u].x * _546) / _1942)));
        float _1963 = (log2(_1929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1964 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        uint _1967 = uint(isnan(14.0) ? _1964 : (isnan(_1964) ? 14.0 : min(_1964, 14.0)));
        uvec4 _1972 = texelFetch(g_lightClusterGridBuffer, int(((_1967 << 2u) + (_1953 << 6u)) >> 2u));
        uint _1973 = _1972.x;
        uint _1974 = _1941.z;
        float _2064;
        float _2066;
        float _2068;
        float _2070;
        float _2072;
        float _2074;
        if (((((1u << ((_1974 >> 4u) & 15u)) + 4294967295u) & _1973) == 0u) || ((_1974 & 240u) == 0u))
        {
            _2064 = 0.0;
            _2066 = 0.0;
            _2068 = 0.0;
            _2070 = 0.0;
            _2072 = 0.0;
            _2074 = 0.0;
        }
        else
        {
            float _2065;
            float _2067;
            float _2069;
            float _2071;
            float _2073;
            float _2075;
            float _2240 = 0.0;
            float _2241 = 0.0;
            float _2242 = 0.0;
            float _2243 = 0.0;
            float _2244 = 0.0;
            float _2245 = 0.0;
            uint _2246 = 0u;
            uint _2255;
            bool _2256;
            for (;;)
            {
                _2255 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2246 << 2u)) >> 2u)).x;
                _2256 = _2255 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2256)
                {
                    frontier_phi_62_pred = _2241;
                    frontier_phi_62_pred_1 = _2240;
                    frontier_phi_62_pred_2 = _2242;
                    frontier_phi_62_pred_3 = _2245;
                    frontier_phi_62_pred_4 = _2244;
                    frontier_phi_62_pred_5 = _2243;
                }
                else
                {
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    float _2420;
                    uint _2421;
                    _2415 = _2240;
                    _2416 = _2241;
                    _2417 = _2242;
                    _2418 = _2243;
                    _2419 = _2244;
                    _2420 = _2245;
                    _2421 = _2255;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    for (;;)
                    {
                        uint _2425 = uint(findLSB(_2421)) + (_2246 << 5u);
                        uint _2422 = (_2421 + 4294967295u) & _2421;
                        uint _2427 = _2425 * 48u;
                        vec4 _2441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2427)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 3u)).x));
                        uint _2447 = (_2425 * 48u) + 4u;
                        vec4 _2460 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2447)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 3u)).x));
                        uint _2466 = (_2425 * 48u) + 8u;
                        vec3 _2477 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2466)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 2u)).x));
                        float _2481 = _2441.x - _1927;
                        float _2482 = _2441.y - _1928;
                        float _2483 = _2441.z - _1929;
                        float _2484 = dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483));
                        float _2487 = inversesqrt(_2484);
                        float _2488 = _2487 * _2481;
                        float _2489 = _2487 * _2482;
                        float _2490 = _2487 * _2483;
                        float _2491 = dot(vec3(_568, _571, _574), vec3(_2488, _2489, _2490));
                        float _2496 = 1.0 - (_2484 * _2441.w);
                        float _3664 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
                        float _2497 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                        float _2498 = sqrt(_2484) * _2460.w;
                        float _2501 = 1.39999997615814208984375 / (_2498 + 1.39999997615814208984375);
                        float _2502 = _2501 * _2501;
                        float _2505 = ((1.0 - _2502) * _2491) + _2502;
                        float _2508 = _2498 * _2498;
                        float _2512 = ((isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0))) * _2497) / ((_2508 * 0.699999988079071044921875) + 1.0);
                        float _2516 = (-0.0) - _1927;
                        float _2517 = (-0.0) - _1928;
                        float _2518 = (-0.0) - _1929;
                        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
                        float _2523 = _2522 * _2516;
                        float _2524 = _2522 * _2517;
                        float _2525 = _2522 * _2518;
                        float _2533 = exp2(log2(1.0 / ((_2508 * 3.5) + 5.0)) * 0.25);
                        float _2534 = 1.0 - _628;
                        float _2541 = sqrt(1.0 - ((1.0 - (_2534 * _2534)) * (1.0 - (_2533 * _2533))));
                        float _2542 = _2541 * _2541;
                        float _2543 = _2542 * _2542;
                        float _2544 = _2523 + _2488;
                        float _2545 = _2524 + _2489;
                        float _2546 = _2525 + _2490;
                        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
                        float _2554 = dot(vec3(_568, _571, _574), vec3(_2523, _2524, _2525));
                        float _3680 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
                        float _2557 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                        float _2558 = dot(vec3(_568, _571, _574), vec3(_2550 * _2544, _2550 * _2545, _2550 * _2546));
                        float _3691 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2561 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                        float _2565 = ((_2561 * _2561) * (_2543 + (-1.0))) + 1.0;
                        float _2566 = _2501 * _2542;
                        float _2567 = _2566 * _2566;
                        float _2570 = ((1.0 - _2567) * _2491) + _2567;
                        float _3702 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2571 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                        float _2572 = 1.0 - _2542;
                        float _2582 = (0.5 / (((_2571 * ((_2557 * _2572) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2572) + _2542) * _2557))) * _2571;
                        float _3713 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
                        float _2593 = (((_2543 * 3.1415927410125732421875) * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) / ((_2565 * _2565) * ((_2508 * 2.1991131305694580078125) + 3.141590118408203125))) * _2497;
                        _2324 = (_2512 * _2460.x) + _2418;
                        _2325 = (_2512 * _2460.y) + _2419;
                        _2326 = (_2512 * _2460.z) + _2420;
                        _2321 = (_2593 * _2477.x) + _2415;
                        _2322 = (_2593 * _2477.y) + _2416;
                        _2323 = (_2593 * _2477.z) + _2417;
                        if (_2422 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2415 = _2321;
                            _2416 = _2322;
                            _2417 = _2323;
                            _2418 = _2324;
                            _2419 = _2325;
                            _2420 = _2326;
                            _2421 = _2422;
                        }
                    }
                    frontier_phi_62_pred = _2322;
                    frontier_phi_62_pred_1 = _2321;
                    frontier_phi_62_pred_2 = _2323;
                    frontier_phi_62_pred_3 = _2326;
                    frontier_phi_62_pred_4 = _2325;
                    frontier_phi_62_pred_5 = _2324;
                }
                _2067 = frontier_phi_62_pred;
                _2065 = frontier_phi_62_pred_1;
                _2069 = frontier_phi_62_pred_2;
                _2075 = frontier_phi_62_pred_3;
                _2073 = frontier_phi_62_pred_4;
                _2071 = frontier_phi_62_pred_5;
                uint _2247 = _2246 + 1u;
                if (_2247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2240 = _2065;
                    _2241 = _2067;
                    _2242 = _2069;
                    _2243 = _2071;
                    _2244 = _2073;
                    _2245 = _2075;
                    _2246 = _2247;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2064 = _2065;
            _2066 = _2067;
            _2068 = _2069;
            _2070 = _2071;
            _2072 = _2073;
            _2074 = _2075;
        }
        uvec4 _2078 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2079 = _2078.z;
        uint _2081 = (_2079 >> 8u) & 15u;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        if (((4294967295u << _2081) & _1973) == 0u)
        {
            _2208 = _2064;
            _2210 = _2066;
            _2212 = _2068;
            _2214 = _2070;
            _2216 = _2072;
            _2218 = _2074;
        }
        else
        {
            float _2233 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
            float _2234 = _2233 * _1927;
            float _2235 = _2233 * _1928;
            float _2236 = _2233 * _1929;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2081 < ((_2079 >> 12u) & 15u))
            {
                float _2209;
                float _2211;
                float _2213;
                float _2215;
                float _2217;
                float _2219;
                float _2398 = _2064;
                float _2399 = _2066;
                float _2400 = _2068;
                float _2401 = _2070;
                float _2402 = _2072;
                float _2403 = _2074;
                uint _2404 = _2081;
                uint _2413;
                bool _2414;
                for (;;)
                {
                    _2413 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2404 << 2u)) >> 2u)).x;
                    _2414 = _2413 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2414)
                    {
                        frontier_phi_71_pred = _2399;
                        frontier_phi_71_pred_1 = _2398;
                        frontier_phi_71_pred_2 = _2403;
                        frontier_phi_71_pred_3 = _2402;
                        frontier_phi_71_pred_4 = _2401;
                        frontier_phi_71_pred_5 = _2400;
                    }
                    else
                    {
                        float _2619;
                        float _2620;
                        float _2621;
                        float _2622;
                        float _2623;
                        float _2624;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2632 = _2398;
                        float _2633 = _2399;
                        float _2634 = _2400;
                        float _2635 = _2401;
                        float _2636 = _2402;
                        float _2637 = _2403;
                        uint _2638 = _2413;
                        uint _2639;
                        vec4 _2664;
                        float _2665;
                        vec4 _2680;
                        vec3 _2692;
                        vec4 _2707;
                        vec4 _2722;
                        float _2768;
                        bool _2769;
                        for (;;)
                        {
                            uint _2649 = ((_2404 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2638));
                            _2639 = (_2638 + 4294967295u) & _2638;
                            uint _2651 = _2649 * 40u;
                            _2664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 3u)).x));
                            _2665 = _2664.w;
                            uint _2667 = (_2649 * 40u) + 4u;
                            _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            uint _2682 = (_2649 * 40u) + 8u;
                            _2692 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x));
                            uint _2694 = (_2649 * 40u) + 16u;
                            _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            uint _2709 = (_2649 * 40u) + 20u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2724 = (_2649 * 40u) + 24u;
                            vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            uint _2743 = (_2649 * 40u) + 28u;
                            vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 3u)).x));
                            _2768 = fma(_1929, _2756.z, fma(_1928, _2756.y, _2756.x * _1927)) + _2756.w;
                            _2769 = !((fma(_1929, _2737.z, fma(_1928, _2737.y, _2737.x * _1927)) + _2737.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2769)
                            {
                                float _2796 = _2664.x - _1927;
                                float _2797 = _2664.y - _1928;
                                float _2798 = _2664.z - _1929;
                                float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                                float _2802 = inversesqrt(_2799);
                                float _2803 = _2802 * _2796;
                                float _2804 = _2802 * _2797;
                                float _2805 = _2802 * _2798;
                                float _2809 = 1.0 - (_2799 / (_2665 * _2665));
                                float _3724 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                                float _2810 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
                                float _2814 = sqrt(_2799) * _2680.w;
                                float _2816 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                                float _2817 = _2816 * _2816;
                                float _2820 = ((1.0 - _2817) * dot(vec3(_2803, _2804, _2805), vec3(_568, _571, _574))) + _2817;
                                float _2823 = _2814 * _2814;
                                float _2827 = (fma(_1929, _2707.z, fma(_1928, _2707.y, _2707.x * _1927)) + _2707.w) / _2768;
                                float _2828 = (fma(_1929, _2722.z, fma(_1928, _2722.y, _2722.x * _1927)) + _2722.w) / _2768;
                                float _2832 = 1.0 - dot(vec2(_2827, _2828), vec2(_2827, _2828));
                                float _3740 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2833 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
                                float _2834 = _2833 * (((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2810) / ((_2823 * 0.699999988079071044921875) + 1.0));
                                float _2846 = exp2(log2(1.0 / ((_2823 * 3.5) + 5.0)) * 0.25);
                                float _2847 = 1.0 - _628;
                                float _2854 = sqrt(1.0 - ((1.0 - (_2847 * _2847)) * (1.0 - (_2846 * _2846))));
                                float _2855 = _2854 * _2854;
                                float _2856 = _2855 * _2855;
                                float _2857 = _2803 - _2234;
                                float _2858 = _2804 - _2235;
                                float _2859 = _2805 - _2236;
                                float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                                float _2867 = dot(vec3(_568, _571, _574), vec3((-0.0) - _2234, (-0.0) - _2235, (-0.0) - _2236));
                                float _3751 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                                float _2870 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                                float _2871 = dot(vec3(_568, _571, _574), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859));
                                float _3762 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                                float _2874 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                                float _2878 = ((_2874 * _2874) * (_2856 + (-1.0))) + 1.0;
                                float _2879 = _2816 * _2855;
                                float _2880 = _2879 * _2879;
                                float _2886 = ((1.0 - _2880) * dot(vec3(_568, _571, _574), vec3(_2803, _2804, _2805))) + _2880;
                                float _3773 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2887 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
                                float _2888 = 1.0 - _2855;
                                float _2898 = (0.5 / (((_2887 * ((_2870 * _2888) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2887 * _2888) + _2855) * _2870))) * _2887;
                                float _3784 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2908 = (_2833 * _2810) * (((_2856 * 3.1415927410125732421875) * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) / ((_2878 * _2878) * ((_2823 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2908 * _2692.y;
                                frontier_phi_77_pred_1 = _2908 * _2692.x;
                                frontier_phi_77_pred_2 = _2834 * _2680.z;
                                frontier_phi_77_pred_3 = _2834 * _2680.y;
                                frontier_phi_77_pred_4 = _2834 * _2680.x;
                                frontier_phi_77_pred_5 = _2908 * _2692.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2913 = frontier_phi_77_pred;
                            _2912 = frontier_phi_77_pred_1;
                            _2917 = frontier_phi_77_pred_2;
                            _2916 = frontier_phi_77_pred_3;
                            _2915 = frontier_phi_77_pred_4;
                            _2914 = frontier_phi_77_pred_5;
                            _2622 = _2915 + _2635;
                            _2623 = _2916 + _2636;
                            _2624 = _2917 + _2637;
                            _2619 = _2912 + _2632;
                            _2620 = _2913 + _2633;
                            _2621 = _2914 + _2634;
                            if (_2639 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2632 = _2619;
                                _2633 = _2620;
                                _2634 = _2621;
                                _2635 = _2622;
                                _2636 = _2623;
                                _2637 = _2624;
                                _2638 = _2639;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2620;
                        frontier_phi_71_pred_1 = _2619;
                        frontier_phi_71_pred_2 = _2624;
                        frontier_phi_71_pred_3 = _2623;
                        frontier_phi_71_pred_4 = _2622;
                        frontier_phi_71_pred_5 = _2621;
                    }
                    _2211 = frontier_phi_71_pred;
                    _2209 = frontier_phi_71_pred_1;
                    _2219 = frontier_phi_71_pred_2;
                    _2217 = frontier_phi_71_pred_3;
                    _2215 = frontier_phi_71_pred_4;
                    _2213 = frontier_phi_71_pred_5;
                    uint _2405 = _2404 + 1u;
                    if (_2405 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2398 = _2209;
                        _2399 = _2211;
                        _2400 = _2213;
                        _2401 = _2215;
                        _2402 = _2217;
                        _2403 = _2219;
                        _2404 = _2405;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2219;
                frontier_phi_53_54_ladder_1 = _2215;
                frontier_phi_53_54_ladder_2 = _2213;
                frontier_phi_53_54_ladder_3 = _2211;
                frontier_phi_53_54_ladder_4 = _2209;
                frontier_phi_53_54_ladder_5 = _2217;
            }
            else
            {
                frontier_phi_53_54_ladder = _2074;
                frontier_phi_53_54_ladder_1 = _2070;
                frontier_phi_53_54_ladder_2 = _2068;
                frontier_phi_53_54_ladder_3 = _2066;
                frontier_phi_53_54_ladder_4 = _2064;
                frontier_phi_53_54_ladder_5 = _2072;
            }
            _2208 = frontier_phi_53_54_ladder_4;
            _2210 = frontier_phi_53_54_ladder_3;
            _2212 = frontier_phi_53_54_ladder_2;
            _2214 = frontier_phi_53_54_ladder_1;
            _2216 = frontier_phi_53_54_ladder_5;
            _2218 = frontier_phi_53_54_ladder;
        }
        float _2223 = isnan(1.0) ? _612 : (isnan(_612) ? 1.0 : min(_612, 1.0));
        _1986 = (_2223 * _2214) + _1716;
        _1988 = (_2223 * _2216) + _1717;
        _1990 = (_2223 * _2218) + _1718;
        _1992 = ((_2208 * 0.039999999105930328369140625) * _2223) + _1869;
        _1994 = ((_2210 * 0.039999999105930328369140625) * _2223) + _1870;
        _1996 = ((_2212 * 0.039999999105930328369140625) * _2223) + _1871;
    }
    else
    {
        _1986 = _1716;
        _1988 = _1717;
        _1990 = _1718;
        _1992 = _1869;
        _1994 = _1870;
        _1996 = _1871;
    }
    float _3800 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3811 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3822 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _2013 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1986 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _612))) + ((_1992 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    float _2014 = ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1988 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _612))) + ((_1994 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    float _2015 = ((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1990 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _612))) + ((_1996 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    uint _2019 = _587 + 6u;
    float _2027 = _546 / cbSceneParam._m0[86u].x;
    float _2028 = _547 / cbSceneParam._m0[86u].y;
    vec4 _2042 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2027, _2028, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2044 = _2042.x;
    float _2045 = _2042.y;
    float _2046 = _2042.z;
    float _2047 = _2042.w;
    float _2127;
    float _2129;
    float _2131;
    float _2133;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2089 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2090 = _2089 / _533;
        float _2101 = _2090 * _255;
        float _2102 = _256 * _2090;
        float _2103 = (-0.0) - _2102;
        float _2104 = _2090 * _257;
        float _2106 = (cbSceneParam._m0[77u].w * _2103) / _2089;
        float _2107 = _2106 + cbSceneParam._m0[79u].w;
        float _2108 = cbSceneParam._m0[79u].w - _2102;
        float _2114 = sqrt(((_2101 * _2101) + (_2102 * _2102)) + (_2104 * _2104));
        float _2117 = (1.0 - (cbSceneParam._m0[77u].w / _2089)) * _2114;
        float _2123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2334;
        if (abs((_2103 - _2106) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2334 = ((((_2107 > 0.0) ? exp2(_2123 * _2107) : (2.0 - exp2(_2125 * _2107))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2117;
        }
        else
        {
            float _2269 = 1.0 / cbSceneParam._m0[80u].x;
            float _2270 = isnan(_2108) ? _2107 : (isnan(_2107) ? _2108 : max(_2107, _2108));
            float _2271 = isnan(_2108) ? _2107 : (isnan(_2107) ? _2108 : min(_2107, _2108));
            float _2280 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : min(_2270, 0.0));
            float _2281 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : min(_2271, 0.0));
            _2334 = ((abs(_2114 / _2103) * cbSceneParam._m0[80u].y) * ((((_2280 - _2281) * 2.0) - ((exp2(_2123 * (isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0)))) - exp2(_2123 * (isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0))))) * _2269)) - ((exp2(_2125 * _2280) - exp2(_2125 * _2281)) * _2269))) + (_2117 * cbSceneParam._m0[80u].z);
        }
        vec4 _2336 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2027, _2028, 1.0), 0.0);
        float _2345 = exp2((_2334 * (-1.44269502162933349609375)) * (1.0 - _2336.w));
        float _2346 = log2(_2345);
        float _2362 = log2(_2047);
        _2127 = (exp2(_2362 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2346 * cbSceneParam._m0[78u].x)) * _2336.x) / cbSceneParam._m0[78u].x)) + _2044;
        _2129 = (exp2(_2362 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2346 * cbSceneParam._m0[78u].y)) * _2336.y) / cbSceneParam._m0[78u].y)) + _2045;
        _2131 = (exp2(_2362 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2346 * cbSceneParam._m0[78u].z)) * _2336.z) / cbSceneParam._m0[78u].z)) + _2046;
        _2133 = _2345 * _2047;
    }
    else
    {
        _2127 = _2044;
        _2129 = _2045;
        _2131 = _2046;
        _2133 = _2047;
    }
    float _2145 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2146 = _2145 == 3.0;
    float _2147 = log2(_2133);
    float _2154 = exp2(_2147 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)));
    float _2155 = exp2(_2147 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)));
    float _2156 = exp2(_2147 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)));
    float _2165 = (_2145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2165 * (_2146 ? _2154 : (_2154 + (cbSceneParam._m0[72u].w * _2127)));
    SV_Target.y = _2165 * (_2146 ? _2155 : (_2155 + (cbSceneParam._m0[72u].w * _2129)));
    SV_Target.z = _2165 * (_2146 ? _2156 : (_2156 + (cbSceneParam._m0[72u].w * _2131)));
    SV_Target.w = cbInstanceData._m0[_2019].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2019].w;
}


