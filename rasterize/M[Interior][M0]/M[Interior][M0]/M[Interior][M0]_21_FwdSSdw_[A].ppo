#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1169;
float _3344;
float _3345;
float _3346;
float _3347;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _395 = (_391 * _385) + (_359 * cbMtdParam._m0[20u].y);
    float _396 = (_391 * _386) + (_360 * cbMtdParam._m0[20u].z);
    float _397 = _395 * cbMtdParam._m0[19u].x;
    float _398 = _396 * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    bool _416 = _394 > 0.0;
    float _418 = _416 ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = _399 + (-0.5);
    float _428 = _400 + (-0.5);
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_425 + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_428 + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _472 = (_458 - (_458 * _292)) * cbMtdParam._m0[9u].x;
    float _473 = (_459 - (_459 * _292)) * cbMtdParam._m0[9u].y;
    float _474 = cbMtdParam._m0[9u].z * (_460 - (_460 * _292));
    float _492 = _395 * cbMtdParam._m0[21u].x;
    float _493 = _396 * cbMtdParam._m0[20u].w;
    bool _494 = _492 > 0.0;
    float _499;
    if (_494)
    {
        _499 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _499 = frontier_phi_11_10_ladder;
    }
    bool _501 = _493 > 0.0;
    float _506;
    if (_501)
    {
        _506 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _506 = frontier_phi_15_14_ladder;
    }
    float _509 = _416 ? (cbMtdParam._m0[16u].z / _394) : 5000.0;
    float _510 = isnan(_506) ? _499 : (isnan(_499) ? _506 : min(_499, _506));
    float _511 = isnan(_509) ? _510 : (isnan(_510) ? _509 : min(_510, _509));
    float _515 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _519 = ((_511 * _394) + _515) / _515;
    float _524 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _526 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _542 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_511 * _492)) / _519) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_511 * _493)) / _519) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _547 = _542.x * cbMtdParam._m0[10u].x;
    float _548 = _542.y * cbMtdParam._m0[10u].y;
    float _549 = _542.z * cbMtdParam._m0[10u].z;
    float _557;
    if (_494)
    {
        _557 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _557 = frontier_phi_19_18_ladder;
    }
    float _563;
    if (_501)
    {
        _563 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _563 = frontier_phi_23_22_ladder;
    }
    float _565 = isnan(_563) ? _557 : (isnan(_557) ? _563 : min(_557, _563));
    float _566 = isnan(_509) ? _565 : (isnan(_565) ? _509 : min(_565, _509));
    float _573 = ((_566 * _394) + _515) / _515;
    vec4 _587 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_566 * _492)) / _573) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_566 * _493)) / _573) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _589 = _587.w;
    float _591 = _589 - (_589 * _292);
    vec4 _615 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _619 = _615.z;
    float _622 = (_615.x * 2.0) + (-1.0);
    float _623 = (_615.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3386 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))));
    float _630 = _619 * _292;
    float _637 = (cbMtdParam._m0[15u].w * ((_331 - _630) + ((_619 - _331) * _292))) + _630;
    float _641 = (cbMtdParam._m0[16u].x * _359) + _622;
    float _642 = (cbMtdParam._m0[16u].x * _360) + _623;
    float _645 = fma(_629, _201, fma(_642, _208, _641 * _194));
    float _648 = fma(_629, _202, fma(_642, _209, _641 * _195));
    float _651 = fma(_629, _203, fma(_642, _210, _641 * _196));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3397 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _659 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3419 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3430 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _682 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _683 = _265 * _682;
    float _684 = _266 * _682;
    float _685 = _267 * _682;
    vec4 _690 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _692 = _690.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _850 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _856 = (cbMatDynParam._m0[5u].x * _850) + cbMatDynParam._m0[5u].y;
        float _3441 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _861 = (cbMatDynParam._m0[5u].z * _850) + cbMatDynParam._m0[5u].w;
        float _3452 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) - _857)) + _857) < ((_692 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _705 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _706 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _728 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _731 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    uint _744 = uint(roundEven(NORMAL.w)) * 13u;
    uint _746 = _744 + 9u;
    uint _747 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3463 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _705, cbSceneParam._m0[86u].y * _706));
    float _770 = _767.x * TEXCOORD.z;
    float _771 = dot(vec3(_656, _657, _658), vec3(_683, _684, _685));
    float _774 = _771 * 2.0;
    float _778 = (_774 * _656) - _683;
    float _779 = (_774 * _657) - _684;
    float _780 = (_774 * _658) - _685;
    float _784 = abs(dot(vec3(_683, _684, _685), vec3(_656, _657, _658)));
    float _3496 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _786 = sqrt(_659);
    float _799 = exp2((_786 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_786 * 3.0));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _895 = fma(_839, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831));
        float _899 = fma(_839, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831));
        float _903 = fma(_839, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831));
        float _926 = _831 + _656;
        float _927 = _835 + _657;
        float _928 = _839 + _658;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_895 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_899 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_903 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_656, _657, _658), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3544 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_656, _657, _658), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3577 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_656, _657, _658), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3610 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_839, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _831));
        float _1216 = fma(_839, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _831));
        float _1220 = fma(_839, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _831));
        float _1243 = _831 + _656;
        float _1244 = _835 + _657;
        float _1245 = _839 + _658;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_656, _657, _658), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3673 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_656, _657, _658), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3706 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_656, _657, _658), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3739 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = _1169;
        _1490 = _1169;
        _1491 = _1169;
        _1492 = _1169;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1181)) + _1181;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1182)) + _1182;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _778 * 0.5;
    float _1550 = _779 * 0.5;
    float _1551 = _780 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _659);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_839, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_839, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_839, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_780, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _778));
        float _1680 = fma(_780, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _778));
        float _1683 = fma(_780, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _778));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1711 = frontier_phi_41_39_ladder;
        }
        float _2080;
        if (_1680 > 0.0)
        {
            _2080 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2080 = frontier_phi_50_46_ladder;
        }
        float _2404;
        if (_1683 > 0.0)
        {
            _2404 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2404 = frontier_phi_64_57_ladder;
        }
        float _2406 = isnan(_2080) ? _1711 : (isnan(_1711) ? _2080 : min(_1711, _2080));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1677) + _1666;
        float _2412 = (_2407 * _1680) + _1670;
        float _2413 = (_2407 * _1683) + _1674;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2414;
        float _2417 = _2414 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2413 > _2417) || ((_2413 < _2415) || ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 < _2415) || (_2411 > _2417))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2413, cbModelParam._m0[9u].z, fma(_2412, cbModelParam._m0[9u].y, _2411 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2413, cbModelParam._m0[10u].z, fma(_2412, cbModelParam._m0[10u].y, _2411 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2413, cbModelParam._m0[11u].z, fma(_2412, cbModelParam._m0[11u].y, _2411 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_40_64_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_40_64_ladder_2;
        _1701 = frontier_phi_40_64_ladder_1;
        _1703 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_778, _779, _780), _1618);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _659);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_839, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_839, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_839, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_780, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _778));
        float _1774 = fma(_780, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _778));
        float _1777 = fma(_780, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _778));
        float _2085;
        if (_1771 > 0.0)
        {
            _2085 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2085 = frontier_phi_52_48_ladder;
        }
        float _2430;
        if (_1774 > 0.0)
        {
            _2430 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2430 = frontier_phi_66_59_ladder;
        }
        float _2620;
        if (_1777 > 0.0)
        {
            _2620 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2620 = frontier_phi_84_77_ladder;
        }
        float _2622 = isnan(_2430) ? _2085 : (isnan(_2085) ? _2430 : min(_2085, _2430));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _1771) + _1760;
        float _2628 = (_2623 * _1774) + _1764;
        float _2629 = (_2623 * _1777) + _1768;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_49_84_ladder = _2871.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2871.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2871.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_49_84_ladder_2;
        _1798 = frontier_phi_49_84_ladder_1;
        _1800 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_778, _779, _780), _1708);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _799) * ((_786 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_799 * _786)) * _770;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1699)) + _1699);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1701)) + _1701);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1703)) + _1703);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    vec4 _1832 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_705, _706));
    float _1834 = _1832.w;
    float _1846 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1834);
    float _1847 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1834);
    float _1848 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1834);
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_744 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1860 = _770 + (-1.0);
    float _1863 = (cbLight._m0[_1855].x * _1860) + 1.0;
    float _1864 = (cbLight._m0[_1855].y * _1860) + 1.0;
    uint _1865 = _1854 + 5u;
    float _1871 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1875 = _1854 + 4u;
    float _1884 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1888 = _1854 | 1u;
    float _1899 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_656, _657, _658));
    float _1902 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_656, _657, _658));
    float _3875 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _3886 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1907 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1909 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
    float _1916 = ((cbLight._m0[_1865].x * _1871) * _1909) + (((cbLight._m0[_1875].x * _1846) * _1884) * _1907);
    float _1917 = ((_1871 * cbLight._m0[_1865].y) * _1909) + (((cbLight._m0[_1875].y * _1847) * _1884) * _1907);
    float _1918 = ((_1871 * cbLight._m0[_1865].z) * _1909) + (((cbLight._m0[_1875].z * _1848) * _1884) * _1907);
    uint _1920 = _1854 + 8u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _659) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1854].x + _683;
    float _1936 = cbLight._m0[_1854].y + _684;
    float _1937 = cbLight._m0[_1854].z + _685;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1854].xyz));
    float _3897 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _1949 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1950 = dot(vec3(_656, _657, _658), vec3(_1942, _1943, _1944));
    float _3919 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_1942, _1943, _1944));
    float _3930 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1934 * _1934;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1973 = (exp2(log2(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1974 = 1.0 - _1934;
    float _1985 = (0.5 / (((_1949 * ((_1948 * _1974) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _1974) + _1934) * _1948))) * _1948;
    float _3941 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    uint _2001 = _1854 + 9u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _659) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1888].x + _683;
    float _2015 = cbLight._m0[_1888].y + _684;
    float _2016 = cbLight._m0[_1888].z + _685;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1888].xyz));
    float _3952 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _2028 = dot(vec3(_656, _657, _658), vec3(_2021, _2022, _2023));
    float _3963 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2021, _2022, _2023));
    float _3974 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2013 * _2013;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2050 = 1.0 - _2013;
    float _2060 = (0.5 / (((_1949 * ((_2027 * _2050) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2050) + _2013) * _2027))) * _2027;
    float _3985 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    float _2072 = (((_2049 * cbLight._m0[_2001].x) * _2062) * _1871) + ((((cbLight._m0[_1920].x * _1846) * _1973) * _1987) * _1884);
    float _2073 = (((_2049 * cbLight._m0[_2001].y) * _2062) * _1871) + ((((cbLight._m0[_1920].y * _1847) * _1973) * _1987) * _1884);
    float _2074 = (((_2049 * cbLight._m0[_2001].z) * _2062) * _1871) + ((((cbLight._m0[_1920].z * _1848) * _1973) * _1987) * _1884);
    float _2189;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    if (_1852.y == 0u)
    {
        float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2130 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2129;
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2129;
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2129;
        uvec4 _2144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2145 = _2144.x;
        uint _2156 = uint((float(_2144.y) * floor(float(uint(cbSceneParam._m0[85u].y * _706) / _2145))) + floor(float(uint(cbSceneParam._m0[85u].x * _705) / _2145)));
        float _2166 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2167 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        uint _2170 = uint(isnan(14.0) ? _2167 : (isnan(_2167) ? 14.0 : min(_2167, 14.0)));
        uvec4 _2175 = texelFetch(g_lightClusterGridBuffer, int(((_2170 << 2u) + (_2156 << 6u)) >> 2u));
        uint _2176 = _2175.x;
        uint _2177 = _2144.z;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        if (((((1u << ((_2177 >> 4u) & 15u)) + 4294967295u) & _2176) == 0u) || ((_2177 & 240u) == 0u))
        {
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
        }
        else
        {
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            uint _2473 = 0u;
            uint _2482;
            bool _2483;
            for (;;)
            {
                _2482 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2473 << 2u)) >> 2u)).x;
                _2483 = _2482 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2483)
                {
                    frontier_phi_79_pred = _2472;
                    frontier_phi_79_pred_1 = _2471;
                    frontier_phi_79_pred_2 = _2470;
                    frontier_phi_79_pred_3 = _2469;
                    frontier_phi_79_pred_4 = _2468;
                    frontier_phi_79_pred_5 = _2467;
                }
                else
                {
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    uint _2669;
                    _2663 = _2467;
                    _2664 = _2468;
                    _2665 = _2469;
                    _2666 = _2470;
                    _2667 = _2471;
                    _2668 = _2472;
                    _2669 = _2482;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    for (;;)
                    {
                        uint _2673 = uint(findLSB(_2669)) + (_2473 << 5u);
                        uint _2670 = (_2669 + 4294967295u) & _2669;
                        uint _2675 = _2673 * 48u;
                        vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2695 = (_2673 * 48u) + 4u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2714 = (_2673 * 48u) + 8u;
                        vec3 _2725 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x));
                        float _2729 = _2689.x - _2130;
                        float _2730 = _2689.y - _2131;
                        float _2731 = _2689.z - _2132;
                        float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                        float _2735 = inversesqrt(_2732);
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2739 = dot(vec3(_725, _728, _731), vec3(_2736, _2737, _2738));
                        float _2744 = 1.0 - (_2732 * _2689.w);
                        float _4006 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2745 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2746 = sqrt(_2732) * _2708.w;
                        float _2749 = 1.39999997615814208984375 / (_2746 + 1.39999997615814208984375);
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2739) + _2750;
                        float _2756 = _2746 * _2746;
                        float _2760 = ((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2745) / ((_2756 * 0.699999988079071044921875) + 1.0);
                        float _2764 = (-0.0) - _2130;
                        float _2765 = (-0.0) - _2131;
                        float _2766 = (-0.0) - _2132;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2781 = exp2(log2(1.0 / ((_2756 * 3.5) + 5.0)) * 0.25);
                        float _2782 = 1.0 - _786;
                        float _2789 = sqrt(1.0 - ((1.0 - (_2782 * _2782)) * (1.0 - (_2781 * _2781))));
                        float _2790 = _2789 * _2789;
                        float _2791 = _2790 * _2790;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2802 = dot(vec3(_725, _728, _731), vec3(_2771, _2772, _2773));
                        float _4022 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2805 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2806 = dot(vec3(_725, _728, _731), vec3(_2798 * _2792, _2798 * _2793, _2798 * _2794));
                        float _4033 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2813 = ((_2809 * _2809) * (_2791 + (-1.0))) + 1.0;
                        float _2814 = _2749 * _2790;
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2739) + _2815;
                        float _4044 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2820 = 1.0 - _2790;
                        float _2830 = (0.5 / (((_2819 * ((_2805 * _2820) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2819 * _2820) + _2790) * _2805))) * _2819;
                        float _4055 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2841 = (((_2791 * 3.1415927410125732421875) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) / ((_2813 * _2813) * ((_2756 * 2.1991131305694580078125) + 3.141590118408203125))) * _2745;
                        _2567 = (_2760 * _2708.x) + _2666;
                        _2568 = (_2760 * _2708.y) + _2667;
                        _2569 = (_2760 * _2708.z) + _2668;
                        _2564 = (_2841 * _2725.x) + _2663;
                        _2565 = (_2841 * _2725.y) + _2664;
                        _2566 = (_2841 * _2725.z) + _2665;
                        if (_2670 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2663 = _2564;
                            _2664 = _2565;
                            _2665 = _2566;
                            _2666 = _2567;
                            _2667 = _2568;
                            _2668 = _2569;
                            _2669 = _2670;
                        }
                    }
                    frontier_phi_79_pred = _2569;
                    frontier_phi_79_pred_1 = _2568;
                    frontier_phi_79_pred_2 = _2567;
                    frontier_phi_79_pred_3 = _2566;
                    frontier_phi_79_pred_4 = _2565;
                    frontier_phi_79_pred_5 = _2564;
                }
                _2294 = frontier_phi_79_pred;
                _2292 = frontier_phi_79_pred_1;
                _2290 = frontier_phi_79_pred_2;
                _2288 = frontier_phi_79_pred_3;
                _2286 = frontier_phi_79_pred_4;
                _2284 = frontier_phi_79_pred_5;
                uint _2474 = _2473 + 1u;
                if (_2474 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2467 = _2284;
                    _2468 = _2286;
                    _2469 = _2288;
                    _2470 = _2290;
                    _2471 = _2292;
                    _2472 = _2294;
                    _2473 = _2474;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
        }
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.z;
        uint _2300 = (_2298 >> 8u) & 15u;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((4294967295u << _2300) & _2176) == 0u)
        {
            _2435 = _2283;
            _2437 = _2285;
            _2439 = _2287;
            _2441 = _2289;
            _2443 = _2291;
            _2445 = _2293;
        }
        else
        {
            float _2460 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _2461 = _2460 * _2130;
            float _2462 = _2460 * _2131;
            float _2463 = _2460 * _2132;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2300 < ((_2298 >> 12u) & 15u))
            {
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2646 = _2283;
                float _2647 = _2285;
                float _2648 = _2287;
                float _2649 = _2289;
                float _2650 = _2291;
                float _2651 = _2293;
                uint _2652 = _2300;
                uint _2661;
                bool _2662;
                for (;;)
                {
                    _2661 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                    _2662 = _2661 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2662)
                    {
                        frontier_phi_93_pred = _2650;
                        frontier_phi_93_pred_1 = _2649;
                        frontier_phi_93_pred_2 = _2648;
                        frontier_phi_93_pred_3 = _2647;
                        frontier_phi_93_pred_4 = _2646;
                        frontier_phi_93_pred_5 = _2651;
                    }
                    else
                    {
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _2889 = _2646;
                        float _2890 = _2647;
                        float _2891 = _2648;
                        float _2892 = _2649;
                        float _2893 = _2650;
                        float _2894 = _2651;
                        uint _2895 = _2661;
                        uint _2896;
                        vec4 _2921;
                        float _2922;
                        vec4 _2937;
                        vec3 _2949;
                        vec4 _2964;
                        vec4 _2979;
                        float _3025;
                        bool _3026;
                        for (;;)
                        {
                            uint _2906 = ((_2652 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2895));
                            _2896 = (_2895 + 4294967295u) & _2895;
                            uint _2908 = _2906 * 40u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2922 = _2921.w;
                            uint _2924 = (_2906 * 40u) + 4u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2906 * 40u) + 8u;
                            _2949 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x));
                            uint _2951 = (_2906 * 40u) + 16u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2966 = (_2906 * 40u) + 20u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2981 = (_2906 * 40u) + 24u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _3000 = (_2906 * 40u) + 28u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3025 = fma(_2132, _3013.z, fma(_2131, _3013.y, _3013.x * _2130)) + _3013.w;
                            _3026 = !((fma(_2132, _2994.z, fma(_2131, _2994.y, _2994.x * _2130)) + _2994.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3026)
                            {
                                float _3053 = _2921.x - _2130;
                                float _3054 = _2921.y - _2131;
                                float _3055 = _2921.z - _2132;
                                float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                                float _3059 = inversesqrt(_3056);
                                float _3060 = _3059 * _3053;
                                float _3061 = _3059 * _3054;
                                float _3062 = _3059 * _3055;
                                float _3066 = 1.0 - (_3056 / (_2922 * _2922));
                                float _4066 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3071 = sqrt(_3056) * _2937.w;
                                float _3073 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                                float _3074 = _3073 * _3073;
                                float _3077 = ((1.0 - _3074) * dot(vec3(_3060, _3061, _3062), vec3(_725, _728, _731))) + _3074;
                                float _3080 = _3071 * _3071;
                                float _3084 = (fma(_2132, _2964.z, fma(_2131, _2964.y, _2964.x * _2130)) + _2964.w) / _3025;
                                float _3085 = (fma(_2132, _2979.z, fma(_2131, _2979.y, _2979.x * _2130)) + _2979.w) / _3025;
                                float _3089 = 1.0 - dot(vec2(_3084, _3085), vec2(_3084, _3085));
                                float _4082 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3091 = _3090 * (((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3067) / ((_3080 * 0.699999988079071044921875) + 1.0));
                                float _3103 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                                float _3104 = 1.0 - _786;
                                float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                                float _3112 = _3111 * _3111;
                                float _3113 = _3112 * _3112;
                                float _3114 = _3060 - _2461;
                                float _3115 = _3061 - _2462;
                                float _3116 = _3062 - _2463;
                                float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                                float _3124 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2461, (-0.0) - _2462, (-0.0) - _2463));
                                float _4093 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3128 = dot(vec3(_725, _728, _731), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                                float _4104 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                                float _3136 = _3073 * _3112;
                                float _3137 = _3136 * _3136;
                                float _3143 = ((1.0 - _3137) * dot(vec3(_725, _728, _731), vec3(_3060, _3061, _3062))) + _3137;
                                float _4115 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3145 = 1.0 - _3112;
                                float _3155 = (0.5 / (((_3144 * ((_3127 * _3145) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3112) * _3127))) * _3144;
                                float _4126 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3165 = (_3090 * _3067) * (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) / ((_3135 * _3135) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3091 * _2937.z;
                                frontier_phi_99_pred_1 = _3091 * _2937.y;
                                frontier_phi_99_pred_2 = _3091 * _2937.x;
                                frontier_phi_99_pred_3 = _3165 * _2949.z;
                                frontier_phi_99_pred_4 = _3165 * _2949.y;
                                frontier_phi_99_pred_5 = _3165 * _2949.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3174 = frontier_phi_99_pred;
                            _3173 = frontier_phi_99_pred_1;
                            _3172 = frontier_phi_99_pred_2;
                            _3171 = frontier_phi_99_pred_3;
                            _3170 = frontier_phi_99_pred_4;
                            _3169 = frontier_phi_99_pred_5;
                            _2879 = _3172 + _2892;
                            _2880 = _3173 + _2893;
                            _2881 = _3174 + _2894;
                            _2876 = _3169 + _2889;
                            _2877 = _3170 + _2890;
                            _2878 = _3171 + _2891;
                            if (_2896 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2896;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2880;
                        frontier_phi_93_pred_1 = _2879;
                        frontier_phi_93_pred_2 = _2878;
                        frontier_phi_93_pred_3 = _2877;
                        frontier_phi_93_pred_4 = _2876;
                        frontier_phi_93_pred_5 = _2881;
                    }
                    _2444 = frontier_phi_93_pred;
                    _2442 = frontier_phi_93_pred_1;
                    _2440 = frontier_phi_93_pred_2;
                    _2438 = frontier_phi_93_pred_3;
                    _2436 = frontier_phi_93_pred_4;
                    _2446 = frontier_phi_93_pred_5;
                    uint _2653 = _2652 + 1u;
                    if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2646 = _2436;
                        _2647 = _2438;
                        _2648 = _2440;
                        _2649 = _2442;
                        _2650 = _2444;
                        _2651 = _2446;
                        _2652 = _2653;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2446;
                frontier_phi_68_69_ladder_1 = _2444;
                frontier_phi_68_69_ladder_2 = _2442;
                frontier_phi_68_69_ladder_3 = _2440;
                frontier_phi_68_69_ladder_4 = _2436;
                frontier_phi_68_69_ladder_5 = _2438;
            }
            else
            {
                frontier_phi_68_69_ladder = _2293;
                frontier_phi_68_69_ladder_1 = _2291;
                frontier_phi_68_69_ladder_2 = _2289;
                frontier_phi_68_69_ladder_3 = _2287;
                frontier_phi_68_69_ladder_4 = _2283;
                frontier_phi_68_69_ladder_5 = _2285;
            }
            _2435 = frontier_phi_68_69_ladder_4;
            _2437 = frontier_phi_68_69_ladder_5;
            _2439 = frontier_phi_68_69_ladder_3;
            _2441 = frontier_phi_68_69_ladder_2;
            _2443 = frontier_phi_68_69_ladder_1;
            _2445 = frontier_phi_68_69_ladder;
        }
        float _2450 = isnan(1.0) ? _770 : (isnan(_770) ? 1.0 : min(_770, 1.0));
        _2189 = (_2450 * _2441) + _1916;
        _2191 = (_2450 * _2443) + _1917;
        _2193 = (_2450 * _2445) + _1918;
        _2195 = ((_2435 * 0.039999999105930328369140625) * _2450) + _2072;
        _2197 = ((_2437 * 0.039999999105930328369140625) * _2450) + _2073;
        _2199 = ((_2439 * 0.039999999105930328369140625) * _2450) + _2074;
    }
    else
    {
        _2189 = _1916;
        _2191 = _1917;
        _2193 = _1918;
        _2195 = _2072;
        _2197 = _2073;
        _2199 = _2074;
    }
    uint _2205 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _4142 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4153 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4164 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2230 = (((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2189 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _770))) + ((_2195 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2205].x * ((_591 * ((_547 - _472) - (_547 * _292))) + _472));
    float _2232 = ((cbInstanceData._m0[_2205].y * ((_591 * ((_548 - _473) - (_548 * _292))) + _473)) + ((_2197 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2191 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _770)));
    float _2234 = ((cbInstanceData._m0[_2205].z * ((_591 * ((_549 - _474) - (_549 * _292))) + _474)) + ((_2199 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2193 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _770)));
    float _2235 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2236 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2237 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    uint _2238 = _744 + 6u;
    float _2246 = _705 / cbSceneParam._m0[86u].x;
    float _2247 = _706 / cbSceneParam._m0[86u].y;
    vec4 _2261 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2246, _2247, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2263 = _2261.x;
    float _2264 = _2261.y;
    float _2265 = _2261.z;
    float _2266 = _2261.w;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2308 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2309 = _2308 / _678;
        float _2320 = _2309 * _265;
        float _2321 = _266 * _2309;
        float _2322 = (-0.0) - _2321;
        float _2323 = _2309 * _267;
        float _2325 = (cbSceneParam._m0[77u].w * _2322) / _2308;
        float _2326 = _2325 + cbSceneParam._m0[79u].w;
        float _2327 = cbSceneParam._m0[79u].w - _2321;
        float _2333 = sqrt(((_2320 * _2320) + (_2321 * _2321)) + (_2323 * _2323));
        float _2336 = (1.0 - (cbSceneParam._m0[77u].w / _2308)) * _2333;
        float _2342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2577;
        if (abs((_2322 - _2325) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2577 = ((((_2326 > 0.0) ? exp2(_2342 * _2326) : (2.0 - exp2(_2344 * _2326))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2336;
        }
        else
        {
            float _2496 = 1.0 / cbSceneParam._m0[80u].x;
            float _2497 = isnan(_2327) ? _2326 : (isnan(_2326) ? _2327 : max(_2326, _2327));
            float _2498 = isnan(_2327) ? _2326 : (isnan(_2326) ? _2327 : min(_2326, _2327));
            float _2507 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : min(_2497, 0.0));
            float _2508 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : min(_2498, 0.0));
            _2577 = ((abs(_2333 / _2322) * cbSceneParam._m0[80u].y) * ((((_2507 - _2508) * 2.0) - ((exp2(_2342 * (isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0)))) - exp2(_2342 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0))))) * _2496)) - ((exp2(_2344 * _2507) - exp2(_2344 * _2508)) * _2496))) + (_2336 * cbSceneParam._m0[80u].z);
        }
        vec4 _2579 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2246, _2247, 1.0), 0.0);
        float _2588 = exp2((_2577 * (-1.44269502162933349609375)) * (1.0 - _2579.w));
        float _2589 = log2(_2588);
        float _2605 = log2(_2266);
        _2346 = (exp2(_2605 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].x)) * _2579.x) / cbSceneParam._m0[78u].x)) + _2263;
        _2348 = (exp2(_2605 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].y)) * _2579.y) / cbSceneParam._m0[78u].y)) + _2264;
        _2350 = (exp2(_2605 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].z)) * _2579.z) / cbSceneParam._m0[78u].z)) + _2265;
        _2352 = _2588 * _2266;
    }
    else
    {
        _2346 = _2263;
        _2348 = _2264;
        _2350 = _2265;
        _2352 = _2266;
    }
    bool _2615;
    vec4 _2362;
    vec4 _2384;
    float _2386;
    float _2390;
    float _2391;
    float _2392;
    float _2393;
    bool _2403;
    for (;;)
    {
        _2362 = cbMatDynParam._m0[0u];
        float _2364 = roundEven(_2362.y);
        bool _2365 = _2364 == 3.0;
        float _2366 = log2(_2352);
        float _2373 = exp2(_2366 * cbSceneParam._m0[78u].x) * _2235;
        float _2374 = exp2(_2366 * cbSceneParam._m0[78u].y) * _2236;
        float _2375 = exp2(_2366 * cbSceneParam._m0[78u].z) * _2237;
        float _2382 = _692 + (-0.5);
        _2384 = cbMtdParam._m0[1u];
        _2386 = _2384.y * _2382;
        float _2389 = (_2364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2390 = _2389 * (_2365 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2346)));
        _2391 = _2389 * (_2365 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2348)));
        _2392 = _2389 * (_2365 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2350)));
        _2393 = _2382 * 0.999000012874603271484375;
        _2403 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2403)
        {
            if ((cbInstanceData._m0[_744 + 7u].x + _2393) < 0.5)
            {
                _2615 = true;
                break;
            }
        }
        uint _2531 = _746 + uint(_2362.w);
        if ((cbInstanceData._m0[_2531].w < 1.0) && ((cbInstanceData._m0[_2531].w + _2393) < 0.5))
        {
            _2615 = true;
            break;
        }
        if ((_2386 + 1.0) < _2384.x)
        {
            _2615 = true;
            break;
        }
        _2615 = false;
        break;
    }
    float _2846;
    if (_2615)
    {
        discard_state = true;
        _2846 = 0.0;
    }
    else
    {
        _2846 = cbInstanceData._m0[_2238].w;
    }
    SV_Target.x = _2390;
    SV_Target.y = _2391;
    SV_Target.z = _2392;
    SV_Target.w = _2846;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2238].w;
    discard_exit();
}


