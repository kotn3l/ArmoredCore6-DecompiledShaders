#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _328 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _335 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _344 = cbMtdParam._m0[23u].x + _259;
    float _345 = cbMtdParam._m0[23u].y + _260;
    float _346 = cbMtdParam._m0[23u].z + _261;
    float _360 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_328 * _188, _328 * _189, _328 * _190));
    float _361 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_335 * _202, _335 * _203, _335 * _204));
    float _362 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _366 * _362;
    float _369 = (cbMtdParam._m0[19u].w * _360) * _366;
    float _371 = (cbMtdParam._m0[20u].x * _361) * _366;
    float _374 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _375 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _393;
    float _396;
    float _398;
    if (_369 > 0.0)
    {
        float _379 = (1.0 - _374) / _369;
        _393 = _379;
        _396 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_379 * _367)) * 0.16666667163372039794921875;
        _398 = (fract((_379 * _371) + _375) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _394 = ((-0.0) - _374) / _369;
            frontier_phi_3_2_ladder = (fract(_394 * _367) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _394;
            frontier_phi_3_2_ladder_2 = (fract((_394 * _371) + _375) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _395;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _393 = frontier_phi_3_2_ladder_1;
        _396 = frontier_phi_3_2_ladder;
        _398 = frontier_phi_3_2_ladder_2;
    }
    float _424;
    float _426;
    float _428;
    if (_371 > 0.0)
    {
        float _411 = (1.0 - _375) / _371;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_411 < _393)
        {
            frontier_phi_8_5_ladder = (fract(_411 * _367) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_411 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _411;
        }
        else
        {
            frontier_phi_8_5_ladder = _398;
            frontier_phi_8_5_ladder_1 = _396;
            frontier_phi_8_5_ladder_2 = _393;
        }
        _424 = frontier_phi_8_5_ladder_2;
        _426 = frontier_phi_8_5_ladder_1;
        _428 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_371 < 0.0)
        {
            float _425 = ((-0.0) - _375) / _371;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_425 < _393)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_425 * _367) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_425 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _425;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _398;
                frontier_phi_8_6_ladder_9_ladder_1 = _396;
                frontier_phi_8_6_ladder_9_ladder_2 = _393;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _398;
            frontier_phi_8_6_ladder_1 = _396;
            frontier_phi_8_6_ladder_2 = _393;
        }
        _424 = frontier_phi_8_6_ladder_2;
        _426 = frontier_phi_8_6_ladder_1;
        _428 = frontier_phi_8_6_ladder;
    }
    float _432 = (_367 > 0.0) ? (cbMtdParam._m0[16u].w / _367) : 5000.0;
    float _445;
    float _446;
    if (_432 < _424)
    {
        _445 = ((_374 + cbMtdParam._m0[17u].x) + (_432 * _369)) * 0.16666667163372039794921875;
        _446 = (((_432 * _371) + _375) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _445 = _426;
        _446 = _428;
    }
    vec4 _448 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_445, _446));
    float _453 = _448.x * cbMtdParam._m0[13u].x;
    float _454 = _448.y * cbMtdParam._m0[13u].y;
    float _455 = _448.z * cbMtdParam._m0[13u].z;
    vec4 _473 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _481 = (_473.x * 2.0) + (-1.0);
    float _483 = (_473.y * 2.0) + (-1.0);
    float _484 = dot(vec2(_481, _483), vec2(_481, _483));
    float _3358 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))));
    float _490 = _473.z * _286;
    float _493 = fma(_489, _195, fma(_483, _202, _481 * _188));
    float _496 = fma(_489, _196, fma(_483, _203, _481 * _189));
    float _499 = fma(_489, _197, fma(_483, _204, _481 * _190));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3369 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _507 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3391 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3402 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _526 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _531 = _259 * _530;
    float _532 = _260 * _530;
    float _533 = _261 * _530;
    float _539 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _540 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _561 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _564 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _567 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    uint _580 = uint(roundEven(NORMAL.w)) * 13u;
    uint _581 = _580 + 9u;
    uint _582 = _581 + uint(cbMatDynParam._m0[0u].w);
    float _588 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_582].x;
    float _589 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_582].y;
    float _590 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_582].z;
    float _3413 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _539, cbSceneParam._m0[86u].y * _540));
    float _605 = _602.x * TEXCOORD.z;
    float _606 = dot(vec3(_504, _505, _506), vec3(_531, _532, _533));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _504) - _531;
    float _614 = (_609 * _505) - _532;
    float _615 = (_609 * _506) - _533;
    float _619 = abs(dot(vec3(_531, _532, _533), vec3(_504, _505, _506)));
    float _3446 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_507);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _711 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _715 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _739 = _666 + _504;
        float _740 = _670 + _505;
        float _741 = _674 + _506;
        float _751 = fma(_741, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739)) - _707;
        float _752 = fma(_741, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739)) - _711;
        float _753 = fma(_741, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739)) - _715;
        float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
        float _770 = ((_757 * _751) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_707 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_757 * _752) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_711 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_757 * _753) / cbModelParam._m0[34u].z) + ((((((_715 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        float _809 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_775.x + (-0.5));
        float _811 = _809 * (_775.y + (-0.5));
        float _812 = _809 * (_775.z + (-0.5));
        float _819 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_782.x + (-0.5));
        float _821 = _819 * (_782.y + (-0.5));
        float _822 = _819 * (_782.z + (-0.5));
        float _829 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_789.x + (-0.5));
        float _831 = _829 * (_789.y + (-0.5));
        float _832 = _829 * (_789.z + (-0.5));
        float _839 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_796.x + (-0.5));
        float _841 = _839 * (_796.y + (-0.5));
        float _842 = _839 * (_796.z + (-0.5));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = _810 * 0.5;
        float _847 = _820 * 0.5;
        float _848 = _830 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _863 = (dot(vec3(_504, _505, _506), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _873 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3494 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_875 + 1.0))) + _880) * _843;
        float _890 = _811 * 0.5;
        float _891 = _821 * 0.5;
        float _892 = _831 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_504, _505, _506), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3527 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_917 + 1.0))) + _922) * _844;
        float _932 = _812 * 0.5;
        float _933 = _822 * 0.5;
        float _934 = _832 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_504, _505, _506), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3560 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_959 + 1.0))) + _964) * _845;
        _981 = _812;
        _982 = _811;
        _983 = _810;
        _984 = _822;
        _985 = _821;
        _986 = _820;
        _987 = _832;
        _988 = _831;
        _989 = _830;
        _990 = _845;
        _991 = _844;
        _992 = _843;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
    }
    else
    {
        _981 = _395;
        _982 = _395;
        _983 = _395;
        _984 = _395;
        _985 = _395;
        _986 = _395;
        _987 = _395;
        _988 = _395;
        _989 = _395;
        _990 = _395;
        _991 = _395;
        _992 = _395;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1021 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1025 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1029 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1052 = _666 + _504;
        float _1053 = _670 + _505;
        float _1054 = _674 + _506;
        float _1064 = fma(_1054, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052)) - _1021;
        float _1065 = fma(_1054, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052)) - _1025;
        float _1066 = fma(_1054, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052)) - _1029;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1021 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1025 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[35u].z) + ((((((_1029 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1120 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1087.x + (-0.5));
        float _1122 = _1120 * (_1087.y + (-0.5));
        float _1123 = _1120 * (_1087.z + (-0.5));
        float _1130 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1094.x + (-0.5));
        float _1132 = _1130 * (_1094.y + (-0.5));
        float _1133 = _1130 * (_1094.z + (-0.5));
        float _1140 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1101.x + (-0.5));
        float _1142 = _1140 * (_1101.y + (-0.5));
        float _1143 = _1140 * (_1101.z + (-0.5));
        float _1150 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1108.x + (-0.5));
        float _1152 = _1150 * (_1108.y + (-0.5));
        float _1153 = _1150 * (_1108.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_504, _505, _506), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3623 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1184 + 1.0))) + _1189) * _1154;
        float _1199 = _1122 * 0.5;
        float _1200 = _1132 * 0.5;
        float _1201 = _1142 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_504, _505, _506), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3656 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1226 + 1.0))) + _1231) * _1155;
        float _1241 = _1123 * 0.5;
        float _1242 = _1133 * 0.5;
        float _1243 = _1143 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_504, _505, _506), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3689 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1268 + 1.0))) + _1273) * _1156;
        _1290 = _1123;
        _1291 = _1122;
        _1292 = _1121;
        _1293 = _1133;
        _1294 = _1132;
        _1295 = _1131;
        _1296 = _1143;
        _1297 = _1142;
        _1298 = _1141;
        _1299 = _1156;
        _1300 = _1155;
        _1301 = _1154;
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _395;
        _1291 = _395;
        _1292 = _395;
        _1293 = _395;
        _1294 = _395;
        _1295 = _395;
        _1296 = _395;
        _1297 = _395;
        _1298 = _395;
        _1299 = _395;
        _1300 = _395;
        _1301 = _395;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _994)) + _994;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1337 = fma(_1316, cbSceneParam._m0[89u].z, fma(_1315, cbSceneParam._m0[89u].y, _1314 * cbSceneParam._m0[89u].x));
    float _1340 = fma(_1316, cbSceneParam._m0[90u].z, fma(_1315, cbSceneParam._m0[90u].y, _1314 * cbSceneParam._m0[90u].x));
    float _1343 = fma(_1316, cbSceneParam._m0[91u].z, fma(_1315, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1314));
    float _1358 = _613 * 0.5;
    float _1359 = _614 * 0.5;
    float _1360 = _615 * 0.5;
    float _1361 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1364 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1367 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1401;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1374 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_981, _984, _987, _990));
        float _1378 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_982, _985, _988, _991));
        float _1382 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_983, _986, _989, _992));
        float _1389 = dot(vec4(cbModelParam._m0[39u]), vec4(_1358, _1359, _1360, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1389) ? 0.0 : (isnan(0.0) ? _1389 : max(0.0, _1389))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1412;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1403 = dot(vec4(cbModelParam._m0[40u]), vec4(_1358, _1359, _1360, 1.0));
        _1412 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1412 = 1.0;
    }
    float _1416 = (_1412 * cbModelParam._m0[1u].x) + (_1401 * (1.0 - cbModelParam._m0[1u].x));
    float _1426 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1426 : min(cbModelParam._m0[25u].z, _1426));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1476 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1480 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1484 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1487 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1490 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1493 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1521;
        if (_1487 > 0.0)
        {
            _1521 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1521 = frontier_phi_26_24_ladder;
        }
        float _1692;
        if (_1490 > 0.0)
        {
            _1692 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1692 = frontier_phi_35_31_ladder;
        }
        float _2137;
        if (_1493 > 0.0)
        {
            _2137 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2137 = frontier_phi_47_42_ladder;
        }
        float _2139 = isnan(_1692) ? _1521 : (isnan(_1521) ? _1692 : min(_1521, _1692));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1487) + _1476;
        float _2145 = (_2140 * _1490) + _1480;
        float _2146 = (_2140 * _1493) + _1484;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1427);
            frontier_phi_25_47_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1509 = frontier_phi_25_47_ladder_2;
        _1511 = frontier_phi_25_47_ladder_1;
        _1513 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1427);
        _1509 = _1497.x * cbModelParam._m0[1u].y;
        _1511 = _1497.y * cbModelParam._m0[1u].y;
        _1513 = _1497.z * cbModelParam._m0[1u].y;
    }
    float _1517 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1517 : min(cbModelParam._m0[25u].w, _1517));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1573 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1577 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1581 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1584 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1587 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1590 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1697;
        if (_1584 > 0.0)
        {
            _1697 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1697 = frontier_phi_37_33_ladder;
        }
        float _2164;
        if (_1587 > 0.0)
        {
            _2164 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2164 = frontier_phi_49_44_ladder;
        }
        float _2517;
        if (_1590 > 0.0)
        {
            _2517 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2517 = frontier_phi_61_56_ladder;
        }
        float _2519 = isnan(_2164) ? _1697 : (isnan(_1697) ? _2164 : min(_1697, _2164));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1584) + _1573;
        float _2525 = (_2520 * _1587) + _1577;
        float _2526 = (_2520 * _1590) + _1581;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1518);
            frontier_phi_34_61_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1609 = frontier_phi_34_61_ladder_2;
        _1611 = frontier_phi_34_61_ladder_1;
        _1613 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1518);
        _1609 = _1593.x * cbModelParam._m0[1u].z;
        _1611 = _1593.y * cbModelParam._m0[1u].z;
        _1613 = _1593.z * cbModelParam._m0[1u].z;
    }
    float _1625 = ((((1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_634 * _621)) * _605;
    float _1626 = _1625 * ((cbModelParam._m0[1u].w * (_1609 - _1509)) + _1509);
    float _1627 = _1625 * ((cbModelParam._m0[1u].w * (_1611 - _1511)) + _1511);
    float _1628 = _1625 * ((cbModelParam._m0[1u].w * (_1613 - _1513)) + _1513);
    float _1631 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1626 * cbSceneParam._m0[91u].x));
    float _1671 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1684 = _1671 / _1683;
    float _1685 = _1675 / _1683;
    float _1686 = _1679 / _1683;
    float _1833;
    float _1834;
    float _1835;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1713 = ((uint(_1686 > cbSceneParam._m0[59u].y) + uint(_1686 > cbSceneParam._m0[59u].x)) + uint(_1686 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1714 = _1713 + 43u;
        uint _1722 = _1713 + 44u;
        uint _1730 = _1713 + 45u;
        uint _1738 = _1713 + 46u;
        float _1749 = fma(_1683, cbSceneParam._m0[_1714].w, fma(_1679, cbSceneParam._m0[_1714].z, fma(_1675, cbSceneParam._m0[_1714].y, _1671 * cbSceneParam._m0[_1714].x)));
        float _1753 = fma(_1683, cbSceneParam._m0[_1722].w, fma(_1679, cbSceneParam._m0[_1722].z, fma(_1675, cbSceneParam._m0[_1722].y, _1671 * cbSceneParam._m0[_1722].x)));
        float _1761 = fma(_1683, cbSceneParam._m0[_1738].w, fma(_1679, cbSceneParam._m0[_1738].z, fma(_1675, cbSceneParam._m0[_1738].y, _1671 * cbSceneParam._m0[_1738].x)));
        float _1766 = cbSceneParam._m0[33u].z * _1761;
        float _1768 = cbSceneParam._m0[33u].w * _1761;
        float _1771 = fma(_1683, cbSceneParam._m0[_1730].w, fma(_1679, cbSceneParam._m0[_1730].z, fma(_1675, cbSceneParam._m0[_1730].y, _1671 * cbSceneParam._m0[_1730].x))) / _1761;
        float _1819 = (cbSceneParam._m0[33u].x - sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686))) * cbSceneParam._m0[33u].y;
        float _3815 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1826 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 + _1749) / _1761, (_1768 + _1753) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 + _1749) / _1761, (_1753 - _1766) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 - _1766) / _1761, (_1753 - _1768) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 - _1768) / _1761, (_1766 + _1753) / _1761), _1771), 0.0)).x), vec4(0.25)));
        _1833 = 1.0 - (_1826 * cbSceneParam._m0[34u].x);
        _1834 = 1.0 - (_1826 * cbSceneParam._m0[34u].y);
        _1835 = 1.0 - (_1826 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1833 = 1.0;
        _1834 = 1.0;
        _1835 = 1.0;
    }
    float _1899;
    float _1901;
    float _1903;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1887 = fma(_1683, cbSceneParam._m0[63u].w, fma(_1679, cbSceneParam._m0[63u].z, fma(_1675, cbSceneParam._m0[63u].y, _1671 * cbSceneParam._m0[63u].x)));
        float _1888 = fma(_1683, cbSceneParam._m0[60u].w, fma(_1679, cbSceneParam._m0[60u].z, fma(_1675, cbSceneParam._m0[60u].y, _1671 * cbSceneParam._m0[60u].x))) / _1887;
        float _1889 = fma(_1683, cbSceneParam._m0[61u].w, fma(_1679, cbSceneParam._m0[61u].z, fma(_1675, cbSceneParam._m0[61u].y, _1671 * cbSceneParam._m0[61u].x))) / _1887;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1888 >= cbSceneParam._m0[64u].x) && (_1889 >= cbSceneParam._m0[64u].y)) && (_1888 <= cbSceneParam._m0[64u].z)) && (_1889 <= cbSceneParam._m0[64u].w))
        {
            float _2177 = fma(_1683, cbSceneParam._m0[62u].w, fma(_1679, cbSceneParam._m0[62u].z, fma(_1675, cbSceneParam._m0[62u].y, _1671 * cbSceneParam._m0[62u].x))) / _1887;
            float _2181 = isnan(cbSceneParam._m0[41u].w) ? _2177 : (isnan(_2177) ? cbSceneParam._m0[41u].w : max(_2177, cbSceneParam._m0[41u].w));
            float _2224 = (cbSceneParam._m0[33u].x - sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686))) * cbSceneParam._m0[33u].y;
            float _3831 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
            float _2231 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1888, cbSceneParam._m0[33u].w + _1889), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1888, _1889 - cbSceneParam._m0[33u].z), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1888 - cbSceneParam._m0[33u].z, _1889 - cbSceneParam._m0[33u].w), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1888 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1889), _2181), 0.0)).x), vec4(0.25)));
            float _2235 = 1.0 - (_2231 * cbSceneParam._m0[34u].x);
            float _2236 = 1.0 - (_2231 * cbSceneParam._m0[34u].y);
            float _2237 = 1.0 - (_2231 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2237) ? _1835 : (isnan(_1835) ? _2237 : min(_1835, _2237));
            frontier_phi_46_45_ladder_1 = isnan(_2236) ? _1834 : (isnan(_1834) ? _2236 : min(_1834, _2236));
            frontier_phi_46_45_ladder_2 = isnan(_2235) ? _1833 : (isnan(_1833) ? _2235 : min(_1833, _2235));
        }
        else
        {
            frontier_phi_46_45_ladder = _1835;
            frontier_phi_46_45_ladder_1 = _1834;
            frontier_phi_46_45_ladder_2 = _1833;
        }
        _1899 = frontier_phi_46_45_ladder_2;
        _1901 = frontier_phi_46_45_ladder_1;
        _1903 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1899 = _1833;
        _1901 = _1834;
        _1903 = _1835;
    }
    uvec4 _1908 = floatBitsToUint(cbInstanceData._m0[_580 + 5u]);
    uint _1910 = _1908.x * 14u;
    uint _1911 = _1910 + 13u;
    float _1916 = _605 + (-1.0);
    float _1919 = (cbLight._m0[_1911].x * _1916) + 1.0;
    float _1920 = (cbLight._m0[_1911].y * _1916) + 1.0;
    uint _1921 = _1910 + 5u;
    float _1927 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1931 = _1910 + 4u;
    float _1941 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1945 = _1910 | 1u;
    float _1956 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_504, _505, _506));
    float _1959 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_504, _505, _506));
    float _3867 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _3878 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1964 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1966 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1973 = ((cbLight._m0[_1921].x * _1927) * _1966) + (((cbLight._m0[_1931].x * _1899) * _1941) * _1964);
    float _1974 = ((_1927 * cbLight._m0[_1921].y) * _1966) + (((cbLight._m0[_1931].y * _1901) * _1941) * _1964);
    float _1975 = ((_1927 * cbLight._m0[_1921].z) * _1966) + (((cbLight._m0[_1931].z * _1903) * _1941) * _1964);
    uint _1977 = _1910 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _507) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1910].x + _531;
    float _1993 = cbLight._m0[_1910].y + _532;
    float _1994 = cbLight._m0[_1910].z + _533;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1910].xyz));
    float _3889 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2006 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _2007 = dot(vec3(_504, _505, _506), vec3(_1999, _2000, _2001));
    float _3911 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_1999, _2000, _2001));
    float _3922 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2030 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2031 = 1.0 - _1991;
    float _2042 = (0.5 / (((_2006 * ((_2005 * _2031) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2031) + _1991) * _2005))) * _2005;
    float _3933 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2058 = _1910 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _507) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1945].x + _531;
    float _2072 = cbLight._m0[_1945].y + _532;
    float _2073 = cbLight._m0[_1945].z + _533;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1945].xyz));
    float _3944 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _2085 = dot(vec3(_504, _505, _506), vec3(_2078, _2079, _2080));
    float _3955 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2078, _2079, _2080));
    float _3966 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = 1.0 - _2070;
    float _2117 = (0.5 / (((_2006 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2107) + _2070) * _2084))) * _2084;
    float _3977 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2129 = (((_2106 * cbLight._m0[_2058].x) * _2119) * _1927) + ((((cbLight._m0[_1977].x * _1899) * _2030) * _2044) * _1941);
    float _2130 = (((_2106 * cbLight._m0[_2058].y) * _2119) * _1927) + ((((cbLight._m0[_1977].y * _1901) * _2030) * _2044) * _1941);
    float _2131 = (((_2106 * cbLight._m0[_2058].z) * _2119) * _1927) + ((((cbLight._m0[_1977].z * _1903) * _2030) * _2044) * _1941);
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_1908.y == 0u)
    {
        uvec4 _2249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2250 = _2249.x;
        uint _2261 = uint((float(_2249.y) * floor(float(uint(cbSceneParam._m0[85u].y * _540) / _2250))) + floor(float(uint(cbSceneParam._m0[85u].x * _539) / _2250)));
        float _2271 = (log2(_1686 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2272 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        uint _2275 = uint(isnan(14.0) ? _2272 : (isnan(_2272) ? 14.0 : min(_2272, 14.0)));
        uvec4 _2280 = texelFetch(g_lightClusterGridBuffer, int(((_2275 << 2u) + (_2261 << 6u)) >> 2u));
        uint _2281 = _2280.x;
        uint _2282 = _2249.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2282 >> 4u) & 15u)) + 4294967295u) & _2281) == 0u) || ((_2282 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2591)
                {
                    frontier_phi_70_pred = _2578;
                    frontier_phi_70_pred_1 = _2580;
                    frontier_phi_70_pred_2 = _2579;
                    frontier_phi_70_pred_3 = _2577;
                    frontier_phi_70_pred_4 = _2576;
                    frontier_phi_70_pred_5 = _2575;
                }
                else
                {
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    uint _2726;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2590;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    for (;;)
                    {
                        uint _2730 = uint(findLSB(_2726)) + (_2581 << 5u);
                        uint _2727 = (_2726 + 4294967295u) & _2726;
                        uint _2732 = _2730 * 48u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2752 = (_2730 * 48u) + 4u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2771 = (_2730 * 48u) + 8u;
                        vec3 _2782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x));
                        float _2786 = _2746.x - _1684;
                        float _2787 = _2746.y - _1685;
                        float _2788 = _2746.z - _1686;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2796 = dot(vec3(_561, _564, _567), vec3(_2793, _2794, _2795));
                        float _2801 = 1.0 - (_2789 * _2746.w);
                        float _3998 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2803 = sqrt(_2789) * _2765.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2796) + _2807;
                        float _2813 = _2803 * _2803;
                        float _2817 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2802) / ((_2813 * 0.699999988079071044921875) + 1.0);
                        float _2821 = (-0.0) - _1684;
                        float _2822 = (-0.0) - _1685;
                        float _2823 = (-0.0) - _1686;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2837 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _621;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2828 + _2793;
                        float _2849 = _2829 + _2794;
                        float _2850 = _2830 + _2795;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_561, _564, _567), vec3(_2828, _2829, _2830));
                        float _4014 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _2862 = dot(vec3(_561, _564, _567), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4025 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2806 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2796) + _2871;
                        float _4036 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4047 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) / ((_2869 * _2869) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125))) * _2802;
                        _2655 = (_2817 * _2765.x) + _2723;
                        _2656 = (_2817 * _2765.y) + _2724;
                        _2657 = (_2817 * _2765.z) + _2725;
                        _2652 = (_2897 * _2782.x) + _2720;
                        _2653 = (_2897 * _2782.y) + _2721;
                        _2654 = (_2897 * _2782.z) + _2722;
                        if (_2727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2727;
                        }
                    }
                    frontier_phi_70_pred = _2655;
                    frontier_phi_70_pred_1 = _2657;
                    frontier_phi_70_pred_2 = _2656;
                    frontier_phi_70_pred_3 = _2654;
                    frontier_phi_70_pred_4 = _2653;
                    frontier_phi_70_pred_5 = _2652;
                }
                _2412 = frontier_phi_70_pred;
                _2416 = frontier_phi_70_pred_1;
                _2414 = frontier_phi_70_pred_2;
                _2410 = frontier_phi_70_pred_3;
                _2408 = frontier_phi_70_pred_4;
                _2406 = frontier_phi_70_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2406;
                    _2576 = _2408;
                    _2577 = _2410;
                    _2578 = _2412;
                    _2579 = _2414;
                    _2580 = _2416;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2422) & _2281) == 0u)
        {
            _2543 = _2405;
            _2545 = _2407;
            _2547 = _2409;
            _2549 = _2411;
            _2551 = _2413;
            _2553 = _2415;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
            float _2569 = _2568 * _1684;
            float _2570 = _2568 * _1685;
            float _2571 = _2568 * _1686;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2703 = _2405;
                float _2704 = _2407;
                float _2705 = _2409;
                float _2706 = _2411;
                float _2707 = _2413;
                float _2708 = _2415;
                uint _2709 = _2422;
                uint _2718;
                bool _2719;
                for (;;)
                {
                    _2718 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                    _2719 = _2718 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2719)
                    {
                        frontier_phi_76_pred = _2708;
                        frontier_phi_76_pred_1 = _2707;
                        frontier_phi_76_pred_2 = _2706;
                        frontier_phi_76_pred_3 = _2705;
                        frontier_phi_76_pred_4 = _2704;
                        frontier_phi_76_pred_5 = _2703;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2915 = _2703;
                        float _2916 = _2704;
                        float _2917 = _2705;
                        float _2918 = _2706;
                        float _2919 = _2707;
                        float _2920 = _2708;
                        uint _2921 = _2718;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2990;
                        vec4 _3005;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2932 = ((_2709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2977 = (_2932 * 40u) + 16u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2992 = (_2932 * 40u) + 20u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3007 = (_2932 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2932 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_1686, _3039.z, fma(_1685, _3039.y, _3039.x * _1684)) + _3039.w;
                            _3052 = !((fma(_1686, _3020.z, fma(_1685, _3020.y, _3020.x * _1684)) + _3020.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2947.x - _1684;
                                float _3080 = _2947.y - _1685;
                                float _3081 = _2947.z - _1686;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2948 * _2948));
                                float _4058 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3097 = sqrt(_3082) * _2963.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_561, _564, _567))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_1686, _2990.z, fma(_1685, _2990.y, _2990.x * _1684)) + _2990.w) / _3051;
                                float _3111 = (fma(_1686, _3005.z, fma(_1685, _3005.y, _3005.x * _1684)) + _3005.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4074 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _621;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2569;
                                float _3141 = _3087 - _2570;
                                float _3142 = _3088 - _2571;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_561, _564, _567), vec3((-0.0) - _2569, (-0.0) - _2570, (-0.0) - _2571));
                                float _4085 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3154 = dot(vec3(_561, _564, _567), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4096 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_561, _564, _567), vec3(_3086, _3087, _3088))) + _3163;
                                float _4107 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4118 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3117 * _2963.z;
                                frontier_phi_82_pred_1 = _3117 * _2963.y;
                                frontier_phi_82_pred_2 = _3117 * _2963.x;
                                frontier_phi_82_pred_3 = _3191 * _2975.z;
                                frontier_phi_82_pred_4 = _3191 * _2975.y;
                                frontier_phi_82_pred_5 = _3191 * _2975.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3200 = frontier_phi_82_pred;
                            _3199 = frontier_phi_82_pred_1;
                            _3198 = frontier_phi_82_pred_2;
                            _3197 = frontier_phi_82_pred_3;
                            _3196 = frontier_phi_82_pred_4;
                            _3195 = frontier_phi_82_pred_5;
                            _2905 = _3198 + _2918;
                            _2906 = _3199 + _2919;
                            _2907 = _3200 + _2920;
                            _2902 = _3195 + _2915;
                            _2903 = _3196 + _2916;
                            _2904 = _3197 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2907;
                        frontier_phi_76_pred_1 = _2906;
                        frontier_phi_76_pred_2 = _2905;
                        frontier_phi_76_pred_3 = _2904;
                        frontier_phi_76_pred_4 = _2903;
                        frontier_phi_76_pred_5 = _2902;
                    }
                    _2554 = frontier_phi_76_pred;
                    _2552 = frontier_phi_76_pred_1;
                    _2550 = frontier_phi_76_pred_2;
                    _2548 = frontier_phi_76_pred_3;
                    _2546 = frontier_phi_76_pred_4;
                    _2544 = frontier_phi_76_pred_5;
                    uint _2710 = _2709 + 1u;
                    if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2703 = _2544;
                        _2704 = _2546;
                        _2705 = _2548;
                        _2706 = _2550;
                        _2707 = _2552;
                        _2708 = _2554;
                        _2709 = _2710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2552;
                frontier_phi_63_64_ladder_1 = _2554;
                frontier_phi_63_64_ladder_2 = _2550;
                frontier_phi_63_64_ladder_3 = _2548;
                frontier_phi_63_64_ladder_4 = _2546;
                frontier_phi_63_64_ladder_5 = _2544;
            }
            else
            {
                frontier_phi_63_64_ladder = _2413;
                frontier_phi_63_64_ladder_1 = _2415;
                frontier_phi_63_64_ladder_2 = _2411;
                frontier_phi_63_64_ladder_3 = _2409;
                frontier_phi_63_64_ladder_4 = _2407;
                frontier_phi_63_64_ladder_5 = _2405;
            }
            _2543 = frontier_phi_63_64_ladder_5;
            _2545 = frontier_phi_63_64_ladder_4;
            _2547 = frontier_phi_63_64_ladder_3;
            _2549 = frontier_phi_63_64_ladder_2;
            _2551 = frontier_phi_63_64_ladder;
            _2553 = frontier_phi_63_64_ladder_1;
        }
        float _2558 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2294 = (_2558 * _2549) + _1973;
        _2296 = (_2558 * _2551) + _1974;
        _2298 = (_2558 * _2553) + _1975;
        _2300 = ((_2543 * 0.039999999105930328369140625) * _2558) + _2129;
        _2302 = ((_2545 * 0.039999999105930328369140625) * _2558) + _2130;
        _2304 = ((_2547 * 0.039999999105930328369140625) * _2558) + _2131;
    }
    else
    {
        _2294 = _1973;
        _2296 = _1974;
        _2298 = _1975;
        _2300 = _2129;
        _2302 = _2130;
        _2304 = _2131;
    }
    uint _2310 = _581 + uint(cbMatDynParam._m0[0u].w);
    float _4134 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4145 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4156 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _2335 = (((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2294 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _605))) + ((_2300 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1416)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2310].x * (_453 - (_453 * _286)));
    float _2337 = ((cbInstanceData._m0[_2310].y * (_454 - (_454 * _286))) + ((_2302 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1416)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2296 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _605)));
    float _2339 = ((cbInstanceData._m0[_2310].z * (_455 - (_455 * _286))) + ((_2304 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1416)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2298 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _605)));
    uint _2343 = _580 + 6u;
    float _2351 = _539 / cbSceneParam._m0[86u].x;
    float _2352 = _540 / cbSceneParam._m0[86u].y;
    vec4 _2366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, (log2((isnan(cbSceneParam._m0[77u].w) ? _526 : (isnan(_526) ? cbSceneParam._m0[77u].w : min(_526, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2368 = _2366.x;
    float _2369 = _2366.y;
    float _2370 = _2366.z;
    float _2371 = _2366.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_526 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_526) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _526 : min(cbSceneParam._m0[80u].w, _526));
        float _2431 = _2430 / _526;
        float _2442 = _2431 * _259;
        float _2443 = _260 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _261;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2665;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2665 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2606 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2665 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2465 * _2615) - exp2(_2465 * _2616)) * _2604))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2667 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, 1.0), 0.0);
        float _2676 = exp2((_2665 * (-1.44269502162933349609375)) * (1.0 - _2667.w));
        float _2677 = log2(_2676);
        float _2693 = log2(_2371);
        _2467 = (exp2(_2693 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].x)) * _2667.x) / cbSceneParam._m0[78u].x)) + _2368;
        _2469 = (exp2(_2693 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].y)) * _2667.y) / cbSceneParam._m0[78u].y)) + _2369;
        _2471 = (exp2(_2693 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].z)) * _2667.z) / cbSceneParam._m0[78u].z)) + _2370;
        _2473 = _2676 * _2371;
    }
    else
    {
        _2467 = _2368;
        _2469 = _2369;
        _2471 = _2370;
        _2473 = _2371;
    }
    float _2485 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2486 = _2485 == 3.0;
    float _2487 = log2(_2473);
    float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0)));
    float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0)));
    float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0)));
    float _2505 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2505 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.y = _2505 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.z = _2505 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.w = cbInstanceData._m0[_2343].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2343].w;
}


