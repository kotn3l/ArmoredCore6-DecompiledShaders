#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1050;
float _3052;
float _3053;
float _3054;
float _3055;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    float _287 = cbMtdParam._m0[22u].y + _259;
    float _288 = cbMtdParam._m0[22u].z + _260;
    float _289 = cbMtdParam._m0[22u].w + _261;
    float _303 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _304 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_201 * TANGENT.x, _201 * TANGENT.y, _201 * TANGENT.z));
    float _305 = (-0.0) - dot(vec3(_287, _288, _289), vec3((-0.0) - (_194 * NORMAL.x), (-0.0) - (_194 * NORMAL.y), (-0.0) - (_194 * NORMAL.z)));
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _309 * _305;
    float _312 = (cbMtdParam._m0[19u].x * _303) * _309;
    float _314 = (cbMtdParam._m0[18u].w * _304) * _309;
    float _315 = fract(TEXCOORD.x);
    float _316 = fract(TEXCOORD.y);
    float _322;
    if (_312 > 0.0)
    {
        _322 = (1.0 - _315) / _312;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _315) / _312;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _322 = frontier_phi_3_2_ladder;
    }
    float _330;
    if (_314 > 0.0)
    {
        _330 = (1.0 - _316) / _314;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_314 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _316) / _314;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _330 = frontier_phi_7_6_ladder;
    }
    bool _332 = _310 > 0.0;
    float _334 = _332 ? (cbMtdParam._m0[15u].x / _310) : 5000.0;
    float _335 = isnan(_330) ? _322 : (isnan(_322) ? _330 : min(_322, _330));
    float _336 = isnan(_334) ? _335 : (isnan(_335) ? _334 : min(_335, _334));
    float _340 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = _315 + (-0.5);
    float _344 = _316 + (-0.5);
    float _347 = ((_336 * _310) + _340) / _340;
    vec4 _373 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_341 + (_336 * _312)) / _347) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_344 + (_336 * _314)) / _347) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _384 = cbMtdParam._m0[9u].x * _373.x;
    float _385 = cbMtdParam._m0[9u].y * _373.y;
    float _386 = cbMtdParam._m0[9u].z * _373.z;
    float _408 = (cbMtdParam._m0[21u].x * _303) * _309;
    float _410 = (cbMtdParam._m0[20u].w * _304) * _309;
    bool _411 = _408 > 0.0;
    float _416;
    if (_411)
    {
        _416 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _416 = frontier_phi_11_10_ladder;
    }
    bool _418 = _410 > 0.0;
    float _423;
    if (_418)
    {
        _423 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _423 = frontier_phi_15_14_ladder;
    }
    float _426 = _332 ? (cbMtdParam._m0[16u].z / _310) : 5000.0;
    float _427 = isnan(_423) ? _416 : (isnan(_416) ? _423 : min(_416, _423));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _436 = ((_428 * _310) + _432) / _432;
    float _441 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _443 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _459 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_428 * _408)) / _436) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_428 * _410)) / _436) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _471;
    if (_411)
    {
        _471 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _471 = frontier_phi_19_18_ladder;
    }
    float _477;
    if (_418)
    {
        _477 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _477 = frontier_phi_23_22_ladder;
    }
    float _479 = isnan(_477) ? _471 : (isnan(_471) ? _477 : min(_471, _477));
    float _480 = isnan(_426) ? _479 : (isnan(_479) ? _426 : min(_479, _426));
    float _487 = ((_480 * _310) + _432) / _432;
    vec4 _501 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_480 * _408)) / _487) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_480 * _410)) / _487) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _503 = _501.w;
    float _510 = (_503 * ((_459.x * cbMtdParam._m0[10u].x) - _384)) + _384;
    float _511 = (_503 * ((_459.y * cbMtdParam._m0[10u].y) - _385)) + _385;
    float _512 = (_503 * ((_459.z * cbMtdParam._m0[10u].z) - _386)) + _386;
    float _527 = (cbMtdParam._m0[21u].z * _303) * _309;
    float _529 = (cbMtdParam._m0[21u].y * _304) * _309;
    bool _530 = _527 > 0.0;
    float _535;
    if (_530)
    {
        _535 = (1.0 - _315) / _527;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _315) / _527;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _535 = frontier_phi_27_26_ladder;
    }
    bool _537 = _529 > 0.0;
    float _542;
    if (_537)
    {
        _542 = (1.0 - _316) / _529;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _316) / _529;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _542 = frontier_phi_31_30_ladder;
    }
    float _545 = _332 ? (cbMtdParam._m0[18u].x / _310) : 5000.0;
    float _546 = isnan(_542) ? _535 : (isnan(_535) ? _542 : min(_535, _542));
    float _547 = isnan(_545) ? _546 : (isnan(_546) ? _545 : min(_546, _545));
    float _551 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _555 = ((_547 * _310) + _551) / _551;
    float _560 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _562 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _579 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_341 + (_547 * _527)) / _555) + 0.5) + _560) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_344 + (_547 * _529)) / _555) + 0.5) + _562) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _591;
    if (_530)
    {
        _591 = (1.0 - _315) / _527;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _315) / _527;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _591 = frontier_phi_35_34_ladder;
    }
    float _597;
    if (_537)
    {
        _597 = (1.0 - _316) / _529;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _316) / _529;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _597 = frontier_phi_39_38_ladder;
    }
    float _599 = isnan(_597) ? _591 : (isnan(_591) ? _597 : min(_591, _597));
    float _600 = isnan(_545) ? _599 : (isnan(_599) ? _545 : min(_599, _545));
    float _607 = ((_600 * _310) + _551) / _551;
    vec4 _621 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_341 + (_600 * _527)) / _607) + 0.5) + _560) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_344 + (_600 * _529)) / _607) + 0.5) + _562) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _623 = _621.w;
    float _630 = (_623 * ((_579.x * cbMtdParam._m0[14u].x) - _510)) + _510;
    float _631 = (_623 * ((_579.y * cbMtdParam._m0[14u].y) - _511)) + _511;
    float _632 = (_623 * ((_579.z * cbMtdParam._m0[14u].z) - _512)) + _512;
    float _3114 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3125 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3136 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _651 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _656 = _259 * _655;
    float _657 = _260 * _655;
    float _658 = _261 * _655;
    vec4 _663 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _665 = _663.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _762 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _769 = (cbMatDynParam._m0[5u].x * _762) + cbMatDynParam._m0[5u].y;
        float _3147 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _774 = (cbMatDynParam._m0[5u].z * _762) + cbMatDynParam._m0[5u].w;
        float _3158 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) - _770)) + _770) < ((_665 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _692 = uint(roundEven(NORMAL.w)) * 13u;
    uint _694 = _692 + 9u;
    uint _695 = _694 + uint(cbMatDynParam._m0[0u].w);
    float _701 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0)))) * cbInstanceData._m0[_695].x;
    float _702 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0)))) * cbInstanceData._m0[_695].y;
    float _703 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * cbInstanceData._m0[_695].z;
    float _3169 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    float _3180 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
    float _3191 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    vec4 _715 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _718 = _715.x * TEXCOORD.z;
    float _719 = (-0.0) - _656;
    float _720 = (-0.0) - _657;
    float _721 = (-0.0) - _658;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1049;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _836 = (cbModelParam._m0[37u].x * ((((fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _838 = (cbModelParam._m0[37u].y * ((((fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _839 = (((((fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _876 * (_842.x + (-0.5));
        float _879 = _876 * (_842.y + (-0.5));
        float _880 = _876 * (_842.z + (-0.5));
        float _887 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_849.x + (-0.5));
        float _889 = _887 * (_849.y + (-0.5));
        float _890 = _887 * (_849.z + (-0.5));
        float _897 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_856.x + (-0.5));
        float _899 = _897 * (_856.y + (-0.5));
        float _900 = _897 * (_856.z + (-0.5));
        float _907 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_863.x + (-0.5));
        float _909 = _907 * (_863.y + (-0.5));
        float _910 = _907 * (_863.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = _878 * 0.5;
        float _915 = _888 * 0.5;
        float _916 = _898 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _931 = (dot(vec3(0.0), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3217 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _941 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3228 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3239 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * (_943 + 1.0))) + _948) * _911;
        float _958 = _879 * 0.5;
        float _959 = _889 * 0.5;
        float _960 = _899 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(0.0), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3272 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_985 + 1.0))) + _990) * _912;
        float _1000 = _880 * 0.5;
        float _1001 = _890 * 0.5;
        float _1002 = _900 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(0.0), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3305 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_1027 + 1.0))) + _1032) * _913;
        _1049 = _880;
        _1051 = _879;
        _1052 = _878;
        _1053 = _890;
        _1054 = _889;
        _1055 = _888;
        _1056 = _900;
        _1057 = _899;
        _1058 = _898;
        _1059 = _913;
        _1060 = _912;
        _1061 = _911;
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
    }
    else
    {
        _1049 = _1050;
        _1051 = _1050;
        _1052 = _1050;
        _1053 = _1050;
        _1054 = _1050;
        _1055 = _1050;
        _1056 = _1050;
        _1057 = _1050;
        _1058 = _1050;
        _1059 = _1050;
        _1060 = _1050;
        _1061 = _1050;
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = (cbModelParam._m0[38u].x * ((((fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1122 = (cbModelParam._m0[38u].y * ((((fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1123 = (((((fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(0.0), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3368 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(0.0), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3401 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(0.0), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3434 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1050;
        _1329 = _1050;
        _1330 = _1050;
        _1331 = _1050;
        _1332 = _1050;
        _1333 = _1050;
        _1334 = _1050;
        _1335 = _1050;
        _1336 = _1050;
        _1337 = _1050;
        _1338 = _1050;
        _1339 = _1050;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1062)) + _1062;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1063)) + _1063;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1064)) + _1064;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _656 * (-0.5);
    float _1397 = _657 * (-0.5);
    float _1398 = _658 * (-0.5);
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1049, _1053, _1056, _1059));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1463 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1524 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1527 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1553;
        if (_1521 > 0.0)
        {
            _1553 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1553 = frontier_phi_57_55_ladder;
        }
        float _1874;
        if (_1524 > 0.0)
        {
            _1874 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1874 = frontier_phi_66_62_ladder;
        }
        float _2185;
        if (_1527 > 0.0)
        {
            _2185 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2185 = frontier_phi_80_73_ladder;
        }
        float _2187 = isnan(_1874) ? _1553 : (isnan(_1553) ? _1874 : min(_1553, _1874));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1521) + _1510;
        float _2193 = (_2188 * _1524) + _1514;
        float _2194 = (_2188 * _1527) + _1518;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2196 = (-1.0) - _2195;
        float _2198 = _2195 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2194 > _2198) || ((_2194 < _2196) || ((_2193 > _2198) || ((_2193 < _2196) || ((_2192 < _2196) || (_2192 > _2198))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2194, cbModelParam._m0[9u].z, fma(_2193, cbModelParam._m0[9u].y, _2192 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2194, cbModelParam._m0[10u].z, fma(_2193, cbModelParam._m0[10u].y, _2192 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2194, cbModelParam._m0[11u].z, fma(_2193, cbModelParam._m0[11u].y, _2192 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_56_80_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_56_80_ladder_2;
        _1545 = frontier_phi_56_80_ladder_1;
        _1547 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1463);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1550 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1602 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1606 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1610 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1613 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1616 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1619 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1879;
        if (_1613 > 0.0)
        {
            _1879 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1879 = frontier_phi_68_64_ladder;
        }
        float _2211;
        if (_1616 > 0.0)
        {
            _2211 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2211 = frontier_phi_82_75_ladder;
        }
        float _2398;
        if (_1619 > 0.0)
        {
            _2398 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2398 = frontier_phi_100_93_ladder;
        }
        float _2400 = isnan(_2211) ? _1879 : (isnan(_1879) ? _2211 : min(_1879, _2211));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1613) + _1602;
        float _2406 = (_2401 * _1616) + _1606;
        float _2407 = (_2401 * _1619) + _1610;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1550);
            frontier_phi_65_100_ladder = _2599.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2599.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2599.z * cbModelParam._m0[1u].z;
        }
        _1638 = frontier_phi_65_100_ladder_1;
        _1640 = frontier_phi_65_100_ladder;
        _1642 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1622 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1550);
        _1638 = _1622.x * cbModelParam._m0[1u].z;
        _1640 = _1622.y * cbModelParam._m0[1u].z;
        _1642 = _1622.z * cbModelParam._m0[1u].z;
    }
    float _1654 = _718 * 0.01200000010430812835693359375;
    float _1656 = _1654 * ((cbModelParam._m0[1u].w * (_1638 - _1543)) + _1543);
    float _1657 = _1654 * ((cbModelParam._m0[1u].w * (_1640 - _1545)) + _1545);
    float _1658 = _1654 * ((cbModelParam._m0[1u].w * (_1642 - _1547)) + _1547);
    float _1661 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, _1656 * cbSceneParam._m0[91u].x));
    vec4 _1675 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_678, _679));
    float _1677 = _1675.w;
    float _1690 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1677);
    float _1691 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1677);
    float _1692 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1677);
    uvec4 _1696 = floatBitsToUint(cbInstanceData._m0[_692 + 5u]);
    uint _1698 = _1696.x * 14u;
    uint _1699 = _1698 + 13u;
    float _1704 = _718 + (-1.0);
    float _1708 = (cbLight._m0[_1699].x * _1704) + 1.0;
    float _1709 = (cbLight._m0[_1699].y * _1704) + 1.0;
    uint _1710 = _1698 + 5u;
    float _1716 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    uint _1720 = _1698 + 4u;
    float _1729 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1733 = _1698 | 1u;
    float _1744 = dot(vec3(cbLight._m0[_1698].xyz), vec3(0.0));
    float _1747 = dot(vec3(cbLight._m0[_1733].xyz), vec3(0.0));
    float _3570 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _3581 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1752 = (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.3183098733425140380859375;
    float _1754 = (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.3183098733425140380859375;
    float _1761 = ((cbLight._m0[_1710].x * _1716) * _1754) + (((cbLight._m0[_1720].x * _1690) * _1729) * _1752);
    float _1762 = ((_1716 * cbLight._m0[_1710].y) * _1754) + (((cbLight._m0[_1720].y * _1691) * _1729) * _1752);
    float _1763 = ((_1716 * cbLight._m0[_1710].z) * _1754) + (((cbLight._m0[_1720].z * _1692) * _1729) * _1752);
    uint _1764 = _1698 + 8u;
    float _1770 = cbLight._m0[_1698].x + _656;
    float _1771 = cbLight._m0[_1698].y + _657;
    float _1772 = cbLight._m0[_1698].z + _658;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1780 = dot(vec3(0.0), vec3(cbLight._m0[_1698].xyz));
    float _3592 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _1784 = dot(vec3(0.0), vec3(_656, _657, _658));
    float _3603 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_1770 * _1776, _1771 * _1776, _1772 * _1776));
    float _3614 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1799 = (exp2(log2(1.0 - (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1805 = (0.5 / ((_1783 + 9.9999999392252902907785028219223e-09) + _1787)) * _1783;
    float _3625 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.31831014156341552734375;
    uint _1821 = _1698 + 9u;
    float _1827 = cbLight._m0[_1733].x + _656;
    float _1828 = cbLight._m0[_1733].y + _657;
    float _1829 = cbLight._m0[_1733].z + _658;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1837 = dot(vec3(0.0), vec3(cbLight._m0[_1733].xyz));
    float _3636 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1827 * _1833, _1828 * _1833, _1829 * _1833));
    float _3647 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1854 = (0.5 / ((_1840 + 9.9999999392252902907785028219223e-09) + _1787)) * _1840;
    float _3658 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.31831014156341552734375;
    float _1866 = (((_1850 * cbLight._m0[_1821].x) * _1856) * _1716) + ((((cbLight._m0[_1764].x * _1690) * _1799) * _1807) * _1729);
    float _1867 = (((_1850 * cbLight._m0[_1821].y) * _1856) * _1716) + ((((cbLight._m0[_1764].y * _1691) * _1799) * _1807) * _1729);
    float _1868 = (((_1850 * cbLight._m0[_1821].z) * _1856) * _1716) + ((((cbLight._m0[_1764].z * _1692) * _1799) * _1807) * _1729);
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    float _1994;
    if (_1696.y == 0u)
    {
        float _1924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1924;
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1924;
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1924;
        uvec4 _1939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1940 = _1939.x;
        uint _1951 = uint((float(_1939.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _1940))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _1940)));
        float _1961 = (log2(_1927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1962 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        uint _1965 = uint(isnan(14.0) ? _1962 : (isnan(_1962) ? 14.0 : min(_1962, 14.0)));
        uvec4 _1970 = texelFetch(g_lightClusterGridBuffer, int(((_1965 << 2u) + (_1951 << 6u)) >> 2u));
        uint _1971 = _1970.x;
        uint _1972 = _1939.z;
        float _2062;
        float _2064;
        float _2066;
        float _2068;
        float _2070;
        float _2072;
        if (((((1u << ((_1972 >> 4u) & 15u)) + 4294967295u) & _1971) == 0u) || ((_1972 & 240u) == 0u))
        {
            _2062 = 0.0;
            _2064 = 0.0;
            _2066 = 0.0;
            _2068 = 0.0;
            _2070 = 0.0;
            _2072 = 0.0;
        }
        else
        {
            float _2063;
            float _2065;
            float _2067;
            float _2069;
            float _2071;
            float _2073;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            uint _2251 = 0u;
            uint _2260;
            bool _2261;
            for (;;)
            {
                _2260 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2251 << 2u)) >> 2u)).x;
                _2261 = _2260 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2261)
                {
                    frontier_phi_95_pred = _2246;
                    frontier_phi_95_pred_1 = _2245;
                    frontier_phi_95_pred_2 = _2247;
                    frontier_phi_95_pred_3 = _2250;
                    frontier_phi_95_pred_4 = _2249;
                    frontier_phi_95_pred_5 = _2248;
                }
                else
                {
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    uint _2447;
                    _2441 = _2245;
                    _2442 = _2246;
                    _2443 = _2247;
                    _2444 = _2248;
                    _2445 = _2249;
                    _2446 = _2250;
                    _2447 = _2260;
                    float _2342;
                    float _2343;
                    float _2344;
                    float _2345;
                    float _2346;
                    float _2347;
                    for (;;)
                    {
                        uint _2451 = uint(findLSB(_2447)) + (_2251 << 5u);
                        uint _2448 = (_2447 + 4294967295u) & _2447;
                        uint _2453 = _2451 * 48u;
                        vec4 _2467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2453)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 3u)).x));
                        uint _2473 = (_2451 * 48u) + 4u;
                        vec4 _2486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 3u)).x));
                        uint _2492 = (_2451 * 48u) + 8u;
                        vec3 _2503 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x));
                        float _2507 = _2467.x - _1925;
                        float _2508 = _2467.y - _1926;
                        float _2509 = _2467.z - _1927;
                        float _2510 = dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509));
                        float _2513 = inversesqrt(_2510);
                        float _2522 = 1.0 - (_2510 * _2467.w);
                        float _3679 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2523 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
                        float _2524 = sqrt(_2510) * _2486.w;
                        float _2527 = 1.39999997615814208984375 / (_2524 + 1.39999997615814208984375);
                        float _2528 = _2527 * _2527;
                        float _2531 = ((1.0 - _2528) * dot(vec3(0.0), vec3(_2513 * _2507, _2513 * _2508, _2513 * _2509))) + _2528;
                        float _2534 = _2524 * _2524;
                        float _2538 = ((isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0))) * _2523) / ((_2534 * 0.699999988079071044921875) + 1.0);
                        float _2542 = (-0.0) - _1925;
                        float _2543 = (-0.0) - _1926;
                        float _2544 = (-0.0) - _1927;
                        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
                        float _2552 = dot(vec3(0.0), vec3(_2548 * _2542, _2548 * _2543, _2548 * _2544));
                        float _3695 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
                        float _3706 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                        float _2556 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                        float _2560 = (0.5 / (((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) + 9.9999999392252902907785028219223e-09) + _2556)) * _2556;
                        float _3717 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
                        float _2569 = (((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 3.1415927410125732421875) / ((_2534 * 2.1991131305694580078125) + 3.141590118408203125)) * _2523;
                        _2345 = (_2538 * _2486.x) + _2444;
                        _2346 = (_2538 * _2486.y) + _2445;
                        _2347 = (_2538 * _2486.z) + _2446;
                        _2342 = (_2569 * _2503.x) + _2441;
                        _2343 = (_2569 * _2503.y) + _2442;
                        _2344 = (_2569 * _2503.z) + _2443;
                        if (_2448 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2441 = _2342;
                            _2442 = _2343;
                            _2443 = _2344;
                            _2444 = _2345;
                            _2445 = _2346;
                            _2446 = _2347;
                            _2447 = _2448;
                        }
                    }
                    frontier_phi_95_pred = _2343;
                    frontier_phi_95_pred_1 = _2342;
                    frontier_phi_95_pred_2 = _2344;
                    frontier_phi_95_pred_3 = _2347;
                    frontier_phi_95_pred_4 = _2346;
                    frontier_phi_95_pred_5 = _2345;
                }
                _2065 = frontier_phi_95_pred;
                _2063 = frontier_phi_95_pred_1;
                _2067 = frontier_phi_95_pred_2;
                _2073 = frontier_phi_95_pred_3;
                _2071 = frontier_phi_95_pred_4;
                _2069 = frontier_phi_95_pred_5;
                uint _2252 = _2251 + 1u;
                if (_2252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2245 = _2063;
                    _2246 = _2065;
                    _2247 = _2067;
                    _2248 = _2069;
                    _2249 = _2071;
                    _2250 = _2073;
                    _2251 = _2252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2062 = _2063;
            _2064 = _2065;
            _2066 = _2067;
            _2068 = _2069;
            _2070 = _2071;
            _2072 = _2073;
        }
        uvec4 _2076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2077 = _2076.z;
        uint _2079 = (_2077 >> 8u) & 15u;
        float _2216;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        if (((4294967295u << _2079) & _1971) == 0u)
        {
            _2216 = _2062;
            _2218 = _2064;
            _2220 = _2066;
            _2222 = _2068;
            _2224 = _2070;
            _2226 = _2072;
        }
        else
        {
            float _2241 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2079 < ((_2077 >> 12u) & 15u))
            {
                float _2217;
                float _2219;
                float _2221;
                float _2223;
                float _2225;
                float _2227;
                float _2424 = _2062;
                float _2425 = _2064;
                float _2426 = _2066;
                float _2427 = _2068;
                float _2428 = _2070;
                float _2429 = _2072;
                uint _2430 = _2079;
                uint _2439;
                bool _2440;
                for (;;)
                {
                    _2439 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2430 << 2u)) >> 2u)).x;
                    _2440 = _2439 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2440)
                    {
                        frontier_phi_109_pred = _2425;
                        frontier_phi_109_pred_1 = _2424;
                        frontier_phi_109_pred_2 = _2429;
                        frontier_phi_109_pred_3 = _2428;
                        frontier_phi_109_pred_4 = _2427;
                        frontier_phi_109_pred_5 = _2426;
                    }
                    else
                    {
                        float _2604;
                        float _2605;
                        float _2606;
                        float _2607;
                        float _2608;
                        float _2609;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2617 = _2424;
                        float _2618 = _2425;
                        float _2619 = _2426;
                        float _2620 = _2427;
                        float _2621 = _2428;
                        float _2622 = _2429;
                        uint _2623 = _2439;
                        uint _2624;
                        vec4 _2649;
                        float _2650;
                        vec4 _2665;
                        vec3 _2677;
                        vec4 _2692;
                        vec4 _2707;
                        float _2753;
                        bool _2754;
                        for (;;)
                        {
                            uint _2634 = ((_2430 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2623));
                            _2624 = (_2623 + 4294967295u) & _2623;
                            uint _2636 = _2634 * 40u;
                            _2649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 3u)).x));
                            _2650 = _2649.w;
                            uint _2652 = (_2634 * 40u) + 4u;
                            _2665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 3u)).x));
                            uint _2667 = (_2634 * 40u) + 8u;
                            _2677 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x));
                            uint _2679 = (_2634 * 40u) + 16u;
                            _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            uint _2694 = (_2634 * 40u) + 20u;
                            _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            uint _2709 = (_2634 * 40u) + 24u;
                            vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2728 = (_2634 * 40u) + 28u;
                            vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 3u)).x));
                            _2753 = fma(_1927, _2741.z, fma(_1926, _2741.y, _2741.x * _1925)) + _2741.w;
                            _2754 = !((fma(_1927, _2722.z, fma(_1926, _2722.y, _2722.x * _1925)) + _2722.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_2754)
                            {
                                float _2781 = _2649.x - _1925;
                                float _2782 = _2649.y - _1926;
                                float _2783 = _2649.z - _1927;
                                float _2784 = dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783));
                                float _2787 = inversesqrt(_2784);
                                float _2788 = _2787 * _2781;
                                float _2789 = _2787 * _2782;
                                float _2790 = _2787 * _2783;
                                float _2794 = 1.0 - (_2784 / (_2650 * _2650));
                                float _3728 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2795 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                                float _2799 = sqrt(_2784) * _2665.w;
                                float _2801 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                                float _2802 = _2801 * _2801;
                                float _2803 = 1.0 - _2802;
                                float _2805 = (_2803 * dot(vec3(_2788, _2789, _2790), vec3(0.0))) + _2802;
                                float _2808 = _2799 * _2799;
                                float _2812 = (fma(_1927, _2692.z, fma(_1926, _2692.y, _2692.x * _1925)) + _2692.w) / _2753;
                                float _2813 = (fma(_1927, _2707.z, fma(_1926, _2707.y, _2707.x * _1925)) + _2707.w) / _2753;
                                float _2817 = 1.0 - dot(vec2(_2812, _2813), vec2(_2812, _2813));
                                float _3744 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                                float _2818 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                                float _2819 = _2818 * (((isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * _2795) / ((_2808 * 0.699999988079071044921875) + 1.0));
                                float _2829 = dot(vec3(0.0), vec3((-0.0) - (_1925 * _2241), (-0.0) - (_1926 * _2241), (-0.0) - (_1927 * _2241)));
                                float _3755 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                                float _2837 = (_2803 * dot(vec3(0.0), vec3(_2788, _2789, _2790))) + _2802;
                                float _3766 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                                float _2838 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
                                float _2842 = (0.5 / (((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) + 9.9999999392252902907785028219223e-09) + _2838)) * _2838;
                                float _3777 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                                float _2849 = (_2818 * _2795) * (((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 3.1415927410125732421875) / ((_2808 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2819 * _2665.y;
                                frontier_phi_115_pred_1 = _2819 * _2665.x;
                                frontier_phi_115_pred_2 = _2849 * _2677.z;
                                frontier_phi_115_pred_3 = _2849 * _2677.y;
                                frontier_phi_115_pred_4 = _2849 * _2677.x;
                                frontier_phi_115_pred_5 = _2819 * _2665.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _2857 = frontier_phi_115_pred;
                            _2856 = frontier_phi_115_pred_1;
                            _2855 = frontier_phi_115_pred_2;
                            _2854 = frontier_phi_115_pred_3;
                            _2853 = frontier_phi_115_pred_4;
                            _2858 = frontier_phi_115_pred_5;
                            _2607 = _2856 + _2620;
                            _2608 = _2857 + _2621;
                            _2609 = _2858 + _2622;
                            _2604 = _2853 + _2617;
                            _2605 = _2854 + _2618;
                            _2606 = _2855 + _2619;
                            if (_2624 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2617 = _2604;
                                _2618 = _2605;
                                _2619 = _2606;
                                _2620 = _2607;
                                _2621 = _2608;
                                _2622 = _2609;
                                _2623 = _2624;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2605;
                        frontier_phi_109_pred_1 = _2604;
                        frontier_phi_109_pred_2 = _2609;
                        frontier_phi_109_pred_3 = _2608;
                        frontier_phi_109_pred_4 = _2607;
                        frontier_phi_109_pred_5 = _2606;
                    }
                    _2219 = frontier_phi_109_pred;
                    _2217 = frontier_phi_109_pred_1;
                    _2227 = frontier_phi_109_pred_2;
                    _2225 = frontier_phi_109_pred_3;
                    _2223 = frontier_phi_109_pred_4;
                    _2221 = frontier_phi_109_pred_5;
                    uint _2431 = _2430 + 1u;
                    if (_2431 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2424 = _2217;
                        _2425 = _2219;
                        _2426 = _2221;
                        _2427 = _2223;
                        _2428 = _2225;
                        _2429 = _2227;
                        _2430 = _2431;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2217;
                frontier_phi_84_85_ladder_1 = _2221;
                frontier_phi_84_85_ladder_2 = _2227;
                frontier_phi_84_85_ladder_3 = _2225;
                frontier_phi_84_85_ladder_4 = _2223;
                frontier_phi_84_85_ladder_5 = _2219;
            }
            else
            {
                frontier_phi_84_85_ladder = _2062;
                frontier_phi_84_85_ladder_1 = _2066;
                frontier_phi_84_85_ladder_2 = _2072;
                frontier_phi_84_85_ladder_3 = _2070;
                frontier_phi_84_85_ladder_4 = _2068;
                frontier_phi_84_85_ladder_5 = _2064;
            }
            _2216 = frontier_phi_84_85_ladder;
            _2218 = frontier_phi_84_85_ladder_5;
            _2220 = frontier_phi_84_85_ladder_1;
            _2222 = frontier_phi_84_85_ladder_4;
            _2224 = frontier_phi_84_85_ladder_3;
            _2226 = frontier_phi_84_85_ladder_2;
        }
        float _2231 = isnan(1.0) ? _718 : (isnan(_718) ? 1.0 : min(_718, 1.0));
        _1984 = (_2231 * _2222) + _1761;
        _1986 = (_2231 * _2224) + _1762;
        _1988 = (_2231 * _2226) + _1763;
        _1990 = ((_2216 * 0.039999999105930328369140625) * _2231) + _1866;
        _1992 = ((_2218 * 0.039999999105930328369140625) * _2231) + _1867;
        _1994 = ((_2220 * 0.039999999105930328369140625) * _2231) + _1868;
    }
    else
    {
        _1984 = _1761;
        _1986 = _1762;
        _1988 = _1763;
        _1990 = _1866;
        _1992 = _1867;
        _1994 = _1868;
    }
    float _3793 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3804 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3815 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _2011 = ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1984 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _718))) + ((_1990 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2012 = ((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1986 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _718))) + ((_1992 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2013 = ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1988 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _718))) + ((_1994 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2014 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    uint _2017 = _692 + 6u;
    float _2025 = _678 / cbSceneParam._m0[86u].x;
    float _2026 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, (log2((isnan(cbSceneParam._m0[77u].w) ? _651 : (isnan(_651) ? cbSceneParam._m0[77u].w : min(_651, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2042 = _2040.x;
    float _2043 = _2040.y;
    float _2044 = _2040.z;
    float _2045 = _2040.w;
    float _2125;
    float _2127;
    float _2129;
    float _2131;
    if (_651 > cbSceneParam._m0[78u].w)
    {
        float _2087 = isnan(_651) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _651 : min(cbSceneParam._m0[80u].w, _651));
        float _2088 = _2087 / _651;
        float _2099 = _2088 * _259;
        float _2100 = _260 * _2088;
        float _2101 = (-0.0) - _2100;
        float _2102 = _2088 * _261;
        float _2104 = (cbSceneParam._m0[77u].w * _2101) / _2087;
        float _2105 = _2104 + cbSceneParam._m0[79u].w;
        float _2106 = cbSceneParam._m0[79u].w - _2100;
        float _2112 = sqrt(((_2099 * _2099) + (_2100 * _2100)) + (_2102 * _2102));
        float _2115 = (1.0 - (cbSceneParam._m0[77u].w / _2087)) * _2112;
        float _2121 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2123 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2355;
        if (abs((_2101 - _2104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2355 = ((((_2105 > 0.0) ? exp2(_2121 * _2105) : (2.0 - exp2(_2123 * _2105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2115;
        }
        else
        {
            float _2274 = 1.0 / cbSceneParam._m0[80u].x;
            float _2275 = isnan(_2106) ? _2105 : (isnan(_2105) ? _2106 : max(_2105, _2106));
            float _2276 = isnan(_2106) ? _2105 : (isnan(_2105) ? _2106 : min(_2105, _2106));
            float _2285 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : min(_2275, 0.0));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            _2355 = ((abs(_2112 / _2101) * cbSceneParam._m0[80u].y) * ((((_2285 - _2286) * 2.0) - ((exp2(_2121 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)))) - exp2(_2121 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))))) * _2274)) - ((exp2(_2123 * _2285) - exp2(_2123 * _2286)) * _2274))) + (_2115 * cbSceneParam._m0[80u].z);
        }
        vec4 _2357 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, 1.0), 0.0);
        float _2366 = exp2((_2355 * (-1.44269502162933349609375)) * (1.0 - _2357.w));
        float _2367 = log2(_2366);
        float _2383 = log2(_2045);
        _2125 = (exp2(_2383 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2367 * cbSceneParam._m0[78u].x)) * _2357.x) / cbSceneParam._m0[78u].x)) + _2042;
        _2127 = (exp2(_2383 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2367 * cbSceneParam._m0[78u].y)) * _2357.y) / cbSceneParam._m0[78u].y)) + _2043;
        _2129 = (exp2(_2383 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2367 * cbSceneParam._m0[78u].z)) * _2357.z) / cbSceneParam._m0[78u].z)) + _2044;
        _2131 = _2366 * _2045;
    }
    else
    {
        _2125 = _2042;
        _2127 = _2043;
        _2129 = _2044;
        _2131 = _2045;
    }
    bool _2393;
    vec4 _2141;
    vec4 _2164;
    float _2166;
    float _2170;
    float _2171;
    float _2172;
    float _2173;
    bool _2184;
    for (;;)
    {
        _2141 = cbMatDynParam._m0[0u];
        float _2143 = roundEven(_2141.y);
        bool _2144 = _2143 == 3.0;
        float _2146 = log2(_2131);
        float _2153 = exp2(_2146 * cbSceneParam._m0[78u].x) * _2014;
        float _2154 = exp2(_2146 * cbSceneParam._m0[78u].y) * _2015;
        float _2155 = exp2(_2146 * cbSceneParam._m0[78u].z) * _2016;
        float _2162 = _665 + (-0.5);
        _2164 = cbMtdParam._m0[1u];
        _2166 = _2164.y * _2162;
        float _2169 = (_2143 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2170 = _2169 * (_2144 ? _2153 : (_2153 + (cbSceneParam._m0[72u].w * _2125)));
        _2171 = _2169 * (_2144 ? _2154 : (_2154 + (cbSceneParam._m0[72u].w * _2127)));
        _2172 = _2169 * (_2144 ? _2155 : (_2155 + (cbSceneParam._m0[72u].w * _2129)));
        _2173 = _2162 * 0.999000012874603271484375;
        _2184 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2184)
        {
            if ((cbInstanceData._m0[_692 + 7u].x + _2173) < 0.5)
            {
                _2393 = true;
                break;
            }
        }
        uint _2309 = _694 + uint(_2141.w);
        if ((cbInstanceData._m0[_2309].w < 1.0) && ((cbInstanceData._m0[_2309].w + _2173) < 0.5))
        {
            _2393 = true;
            break;
        }
        if ((_2166 + 1.0) < _2164.x)
        {
            _2393 = true;
            break;
        }
        _2393 = false;
        break;
    }
    float _2574;
    if (_2393)
    {
        discard_state = true;
        _2574 = 0.0;
    }
    else
    {
        _2574 = cbInstanceData._m0[_2017].w;
    }
    SV_Target.x = _2170;
    SV_Target.y = _2171;
    SV_Target.z = _2172;
    SV_Target.w = _2574;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2017].w;
    discard_exit();
}


