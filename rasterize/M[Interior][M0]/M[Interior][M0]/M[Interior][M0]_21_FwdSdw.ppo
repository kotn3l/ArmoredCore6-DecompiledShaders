#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1126;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _393 = (_389 * _383) + (_357 * cbMtdParam._m0[20u].y);
    float _394 = (_389 * _384) + (_358 * cbMtdParam._m0[20u].z);
    float _395 = _393 * cbMtdParam._m0[19u].x;
    float _396 = _394 * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    bool _414 = _392 > 0.0;
    float _416 = _414 ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = _397 + (-0.5);
    float _426 = _398 + (-0.5);
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_423 + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_426 + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _470 = (_456 - (_456 * _290)) * cbMtdParam._m0[9u].x;
    float _471 = (_457 - (_457 * _290)) * cbMtdParam._m0[9u].y;
    float _472 = cbMtdParam._m0[9u].z * (_458 - (_458 * _290));
    float _490 = _393 * cbMtdParam._m0[21u].x;
    float _491 = _394 * cbMtdParam._m0[20u].w;
    bool _492 = _490 > 0.0;
    float _497;
    if (_492)
    {
        _497 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _497 = frontier_phi_11_10_ladder;
    }
    bool _499 = _491 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _504 = frontier_phi_15_14_ladder;
    }
    float _507 = _414 ? (cbMtdParam._m0[16u].z / _392) : 5000.0;
    float _508 = isnan(_504) ? _497 : (isnan(_497) ? _504 : min(_497, _504));
    float _509 = isnan(_507) ? _508 : (isnan(_508) ? _507 : min(_508, _507));
    float _513 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _517 = ((_509 * _392) + _513) / _513;
    float _522 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _524 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _540 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_509 * _490)) / _517) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_509 * _491)) / _517) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _545 = _540.x * cbMtdParam._m0[10u].x;
    float _546 = _540.y * cbMtdParam._m0[10u].y;
    float _547 = _540.z * cbMtdParam._m0[10u].z;
    float _555;
    if (_492)
    {
        _555 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _555 = frontier_phi_19_18_ladder;
    }
    float _561;
    if (_499)
    {
        _561 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _561 = frontier_phi_23_22_ladder;
    }
    float _563 = isnan(_561) ? _555 : (isnan(_555) ? _561 : min(_555, _561));
    float _564 = isnan(_507) ? _563 : (isnan(_563) ? _507 : min(_563, _507));
    float _571 = ((_564 * _392) + _513) / _513;
    vec4 _585 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_564 * _490)) / _571) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_564 * _491)) / _571) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _587 = _585.w;
    float _589 = _587 - (_587 * _290);
    vec4 _613 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _617 = _613.z;
    float _620 = (_613.x * 2.0) + (-1.0);
    float _621 = (_613.y * 2.0) + (-1.0);
    float _622 = dot(vec2(_620, _621), vec2(_620, _621));
    float _3536 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))));
    float _628 = _617 * _290;
    float _635 = (cbMtdParam._m0[15u].w * ((_329 - _628) + ((_617 - _329) * _290))) + _628;
    float _639 = (cbMtdParam._m0[16u].x * _357) + _620;
    float _640 = (cbMtdParam._m0[16u].x * _358) + _621;
    float _643 = fma(_627, _199, fma(_640, _206, _639 * _192));
    float _646 = fma(_627, _200, fma(_640, _207, _639 * _193));
    float _649 = fma(_627, _201, fma(_640, _208, _639 * _194));
    float _653 = inversesqrt(dot(vec3(_643, _646, _649), vec3(_643, _646, _649)));
    float _654 = _653 * _643;
    float _655 = _653 * _646;
    float _656 = _653 * _649;
    float _3547 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _657 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3569 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3580 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _681 = _263 * _680;
    float _682 = _264 * _680;
    float _683 = _265 * _680;
    float _689 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _690 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_656, cbSceneParam._m0[5u].z, fma(_655, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _654));
    float _713 = fma(_656, cbSceneParam._m0[6u].z, fma(_655, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _654));
    float _716 = fma(_656, cbSceneParam._m0[7u].z, fma(_655, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _654));
    uint _729 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = _729 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3591 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _689, cbSceneParam._m0[86u].y * _690));
    float _755 = _752.x * TEXCOORD.z;
    float _756 = dot(vec3(_654, _655, _656), vec3(_681, _682, _683));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _654) - _681;
    float _764 = (_759 * _655) - _682;
    float _765 = (_759 * _656) - _683;
    float _769 = abs(dot(vec3(_681, _682, _683), vec3(_654, _655, _656)));
    float _3624 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_657);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _856 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _860 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _883 = _816 + _654;
        float _884 = _820 + _655;
        float _885 = _824 + _656;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_654, _655, _656), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3672 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_654, _655, _656), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3705 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_654, _655, _656), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3738 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1170 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1174 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1197 = _816 + _654;
        float _1198 = _820 + _655;
        float _1199 = _824 + _656;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_654, _655, _656), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3801 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_654, _655, _656), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3834 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_654, _655, _656), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3867 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1126;
        _1436 = _1126;
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _763 * 0.5;
    float _1504 = _764 * 0.5;
    float _1505 = _765 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _657);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1634 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1637 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1665 = frontier_phi_38_36_ladder;
        }
        float _1833;
        if (_1634 > 0.0)
        {
            _1833 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1833 = frontier_phi_47_43_ladder;
        }
        float _2277;
        if (_1637 > 0.0)
        {
            _2277 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2277 = frontier_phi_59_54_ladder;
        }
        float _2279 = isnan(_1833) ? _1665 : (isnan(_1665) ? _1833 : min(_1665, _1833));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1631) + _1620;
        float _2285 = (_2280 * _1634) + _1624;
        float _2286 = (_2280 * _1637) + _1628;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2287;
        float _2291 = _2287 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 > _2291) || ((_2285 < _2289) || ((_2284 < _2289) || (_2284 > _2291))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2286, cbModelParam._m0[9u].z, fma(_2285, cbModelParam._m0[9u].y, _2284 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2286, cbModelParam._m0[10u].z, fma(_2285, cbModelParam._m0[10u].y, _2284 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2286, cbModelParam._m0[11u].z, fma(_2285, cbModelParam._m0[11u].y, _2284 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_37_59_ladder = _2536.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2536.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2536.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_37_59_ladder_2;
        _1655 = frontier_phi_37_59_ladder_1;
        _1657 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1572);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _657);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1728 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1731 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1838;
        if (_1725 > 0.0)
        {
            _1838 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1838 = frontier_phi_49_45_ladder;
        }
        float _2304;
        if (_1728 > 0.0)
        {
            _2304 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2304 = frontier_phi_61_56_ladder;
        }
        float _2657;
        if (_1731 > 0.0)
        {
            _2657 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2657 = frontier_phi_73_68_ladder;
        }
        float _2659 = isnan(_2304) ? _1838 : (isnan(_1838) ? _2304 : min(_1838, _2304));
        float _2660 = isnan(_2657) ? _2659 : (isnan(_2659) ? _2657 : min(_2659, _2657));
        float _2664 = (_2660 * _1725) + _1714;
        float _2665 = (_2660 * _1728) + _1718;
        float _2666 = (_2660 * _1731) + _1722;
        float _2667 = _2660 * 9.9999997473787516355514526367188e-05;
        float _2668 = (-1.0) - _2667;
        float _2670 = _2667 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2666 > _2670) || ((_2666 < _2668) || ((_2665 > _2670) || ((_2665 < _2668) || ((_2664 < _2668) || (_2664 > _2670))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2666, cbModelParam._m0[17u].z, fma(_2665, cbModelParam._m0[17u].y, _2664 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2666, cbModelParam._m0[18u].z, fma(_2665, cbModelParam._m0[18u].y, _2664 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2666, cbModelParam._m0[19u].z, fma(_2665, cbModelParam._m0[19u].y, _2664 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_46_73_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_46_73_ladder_2;
        _1752 = frontier_phi_46_73_ladder_1;
        _1754 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1662);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1766 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1767 = _1766 * ((cbModelParam._m0[1u].w * (_1750 - _1653)) + _1653);
    float _1768 = _1766 * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1769 = _1766 * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1825 = _1812 / _1824;
    float _1826 = _1816 / _1824;
    float _1827 = _1820 / _1824;
    float _1974;
    float _1975;
    float _1976;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1854 = ((uint(_1827 > cbSceneParam._m0[59u].y) + uint(_1827 > cbSceneParam._m0[59u].x)) + uint(_1827 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1855 = _1854 + 43u;
        uint _1863 = _1854 + 44u;
        uint _1871 = _1854 + 45u;
        uint _1879 = _1854 + 46u;
        float _1890 = fma(_1824, cbSceneParam._m0[_1855].w, fma(_1820, cbSceneParam._m0[_1855].z, fma(_1816, cbSceneParam._m0[_1855].y, _1812 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1824, cbSceneParam._m0[_1863].w, fma(_1820, cbSceneParam._m0[_1863].z, fma(_1816, cbSceneParam._m0[_1863].y, _1812 * cbSceneParam._m0[_1863].x)));
        float _1902 = fma(_1824, cbSceneParam._m0[_1879].w, fma(_1820, cbSceneParam._m0[_1879].z, fma(_1816, cbSceneParam._m0[_1879].y, _1812 * cbSceneParam._m0[_1879].x)));
        float _1907 = cbSceneParam._m0[33u].z * _1902;
        float _1909 = cbSceneParam._m0[33u].w * _1902;
        float _1912 = fma(_1824, cbSceneParam._m0[_1871].w, fma(_1820, cbSceneParam._m0[_1871].z, fma(_1816, cbSceneParam._m0[_1871].y, _1812 * cbSceneParam._m0[_1871].x))) / _1902;
        float _1960 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
        float _3993 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1967 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1907 + _1890) / _1902, (_1909 + _1894) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1909 + _1890) / _1902, (_1894 - _1907) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1907) / _1902, (_1894 - _1909) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1909) / _1902, (_1907 + _1894) / _1902), _1912), 0.0)).x), vec4(0.25)));
        _1974 = 1.0 - (_1967 * cbSceneParam._m0[34u].x);
        _1975 = 1.0 - (_1967 * cbSceneParam._m0[34u].y);
        _1976 = 1.0 - (_1967 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1974 = 1.0;
        _1975 = 1.0;
        _1976 = 1.0;
    }
    float _2040;
    float _2042;
    float _2044;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2028 = fma(_1824, cbSceneParam._m0[63u].w, fma(_1820, cbSceneParam._m0[63u].z, fma(_1816, cbSceneParam._m0[63u].y, _1812 * cbSceneParam._m0[63u].x)));
        float _2029 = fma(_1824, cbSceneParam._m0[60u].w, fma(_1820, cbSceneParam._m0[60u].z, fma(_1816, cbSceneParam._m0[60u].y, _1812 * cbSceneParam._m0[60u].x))) / _2028;
        float _2030 = fma(_1824, cbSceneParam._m0[61u].w, fma(_1820, cbSceneParam._m0[61u].z, fma(_1816, cbSceneParam._m0[61u].y, _1812 * cbSceneParam._m0[61u].x))) / _2028;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2029 >= cbSceneParam._m0[64u].x) && (_2030 >= cbSceneParam._m0[64u].y)) && (_2029 <= cbSceneParam._m0[64u].z)) && (_2030 <= cbSceneParam._m0[64u].w))
        {
            float _2317 = fma(_1824, cbSceneParam._m0[62u].w, fma(_1820, cbSceneParam._m0[62u].z, fma(_1816, cbSceneParam._m0[62u].y, _1812 * cbSceneParam._m0[62u].x))) / _2028;
            float _2321 = isnan(cbSceneParam._m0[41u].w) ? _2317 : (isnan(_2317) ? cbSceneParam._m0[41u].w : max(_2317, cbSceneParam._m0[41u].w));
            float _2364 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
            float _4009 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
            float _2371 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2029, cbSceneParam._m0[33u].w + _2030), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2029, _2030 - cbSceneParam._m0[33u].z), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].z, _2030 - cbSceneParam._m0[33u].w), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2030), _2321), 0.0)).x), vec4(0.25)));
            float _2375 = 1.0 - (_2371 * cbSceneParam._m0[34u].x);
            float _2376 = 1.0 - (_2371 * cbSceneParam._m0[34u].y);
            float _2377 = 1.0 - (_2371 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2377) ? _1976 : (isnan(_1976) ? _2377 : min(_1976, _2377));
            frontier_phi_58_57_ladder_1 = isnan(_2376) ? _1975 : (isnan(_1975) ? _2376 : min(_1975, _2376));
            frontier_phi_58_57_ladder_2 = isnan(_2375) ? _1974 : (isnan(_1974) ? _2375 : min(_1974, _2375));
        }
        else
        {
            frontier_phi_58_57_ladder = _1976;
            frontier_phi_58_57_ladder_1 = _1975;
            frontier_phi_58_57_ladder_2 = _1974;
        }
        _2040 = frontier_phi_58_57_ladder_2;
        _2042 = frontier_phi_58_57_ladder_1;
        _2044 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2040 = _1974;
        _2042 = _1975;
        _2044 = _1976;
    }
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_729 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2057 = _755 + (-1.0);
    float _2060 = (cbLight._m0[_2052].x * _2057) + 1.0;
    float _2061 = (cbLight._m0[_2052].y * _2057) + 1.0;
    uint _2062 = _2051 + 5u;
    float _2068 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2072 = _2051 + 4u;
    float _2081 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2085 = _2051 | 1u;
    float _2096 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_654, _655, _656));
    float _2099 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_654, _655, _656));
    float _4045 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _4056 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _2106 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _2113 = ((cbLight._m0[_2062].x * _2068) * _2106) + (((cbLight._m0[_2072].x * _2040) * _2081) * _2104);
    float _2114 = ((_2068 * cbLight._m0[_2062].y) * _2106) + (((cbLight._m0[_2072].y * _2042) * _2081) * _2104);
    float _2115 = ((_2068 * cbLight._m0[_2062].z) * _2106) + (((cbLight._m0[_2072].z * _2044) * _2081) * _2104);
    uint _2117 = _2051 + 8u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _657) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_2051].x + _681;
    float _2133 = cbLight._m0[_2051].y + _682;
    float _2134 = cbLight._m0[_2051].z + _683;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2051].xyz));
    float _4067 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2146 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _2147 = dot(vec3(_654, _655, _656), vec3(_2139, _2140, _2141));
    float _4089 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2139, _2140, _2141));
    float _4100 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2131 * _2131;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2171 = 1.0 - _2131;
    float _2182 = (0.5 / (((_2146 * ((_2145 * _2171) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2171) + _2131) * _2145))) * _2145;
    float _4111 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    uint _2198 = _2051 + 9u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _657) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_2085].x + _681;
    float _2212 = cbLight._m0[_2085].y + _682;
    float _2213 = cbLight._m0[_2085].z + _683;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2085].xyz));
    float _4122 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2225 = dot(vec3(_654, _655, _656), vec3(_2218, _2219, _2220));
    float _4133 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2218, _2219, _2220));
    float _4144 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2210 * _2210;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2247 = 1.0 - _2210;
    float _2257 = (0.5 / (((_2146 * ((_2224 * _2247) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2247) + _2210) * _2224))) * _2224;
    float _4155 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2259 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    float _2269 = (((_2246 * cbLight._m0[_2198].x) * _2259) * _2068) + ((((cbLight._m0[_2117].x * _2040) * _2170) * _2184) * _2081);
    float _2270 = (((_2246 * cbLight._m0[_2198].y) * _2259) * _2068) + ((((cbLight._m0[_2117].y * _2042) * _2170) * _2184) * _2081);
    float _2271 = (((_2246 * cbLight._m0[_2198].z) * _2259) * _2068) + ((((cbLight._m0[_2117].z * _2044) * _2170) * _2184) * _2081);
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_2049.y == 0u)
    {
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.x;
        uint _2401 = uint((float(_2389.y) * floor(float(uint(cbSceneParam._m0[85u].y * _690) / _2390))) + floor(float(uint(cbSceneParam._m0[85u].x * _689) / _2390)));
        float _2411 = (log2(_1827 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2412 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        uint _2415 = uint(isnan(14.0) ? _2412 : (isnan(_2412) ? 14.0 : min(_2412, 14.0)));
        uvec4 _2420 = texelFetch(g_lightClusterGridBuffer, int(((_2415 << 2u) + (_2401 << 6u)) >> 2u));
        uint _2421 = _2420.x;
        uint _2422 = _2389.z;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((((1u << ((_2422 >> 4u) & 15u)) + 4294967295u) & _2421) == 0u) || ((_2422 & 240u) == 0u))
        {
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
        }
        else
        {
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2731)
                {
                    frontier_phi_82_pred = _2715;
                    frontier_phi_82_pred_1 = _2720;
                    frontier_phi_82_pred_2 = _2719;
                    frontier_phi_82_pred_3 = _2718;
                    frontier_phi_82_pred_4 = _2717;
                    frontier_phi_82_pred_5 = _2716;
                }
                else
                {
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    uint _2866;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2730;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    for (;;)
                    {
                        uint _2870 = uint(findLSB(_2866)) + (_2721 << 5u);
                        uint _2867 = (_2866 + 4294967295u) & _2866;
                        uint _2872 = _2870 * 48u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2892 = (_2870 * 48u) + 4u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2911 = (_2870 * 48u) + 8u;
                        vec3 _2922 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x));
                        float _2926 = _2886.x - _1825;
                        float _2927 = _2886.y - _1826;
                        float _2928 = _2886.z - _1827;
                        float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                        float _2932 = inversesqrt(_2929);
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2936 = dot(vec3(_710, _713, _716), vec3(_2933, _2934, _2935));
                        float _2941 = 1.0 - (_2929 * _2886.w);
                        float _4176 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2943 = sqrt(_2929) * _2905.w;
                        float _2946 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2936) + _2947;
                        float _2953 = _2943 * _2943;
                        float _2957 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2942) / ((_2953 * 0.699999988079071044921875) + 1.0);
                        float _2961 = (-0.0) - _1825;
                        float _2962 = (-0.0) - _1826;
                        float _2963 = (-0.0) - _1827;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2977 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _771;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2968 + _2933;
                        float _2989 = _2969 + _2934;
                        float _2990 = _2970 + _2935;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_710, _713, _716), vec3(_2968, _2969, _2970));
                        float _4192 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _3002 = dot(vec3(_710, _713, _716), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _4203 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2946 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2936) + _3011;
                        float _4214 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4225 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3037 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_3009 * _3009) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125))) * _2942;
                        _2795 = (_2957 * _2905.x) + _2863;
                        _2796 = (_2957 * _2905.y) + _2864;
                        _2797 = (_2957 * _2905.z) + _2865;
                        _2792 = (_3037 * _2922.x) + _2860;
                        _2793 = (_3037 * _2922.y) + _2861;
                        _2794 = (_3037 * _2922.z) + _2862;
                        if (_2867 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2867;
                        }
                    }
                    frontier_phi_82_pred = _2792;
                    frontier_phi_82_pred_1 = _2797;
                    frontier_phi_82_pred_2 = _2796;
                    frontier_phi_82_pred_3 = _2795;
                    frontier_phi_82_pred_4 = _2794;
                    frontier_phi_82_pred_5 = _2793;
                }
                _2546 = frontier_phi_82_pred;
                _2556 = frontier_phi_82_pred_1;
                _2554 = frontier_phi_82_pred_2;
                _2552 = frontier_phi_82_pred_3;
                _2550 = frontier_phi_82_pred_4;
                _2548 = frontier_phi_82_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2546;
                    _2716 = _2548;
                    _2717 = _2550;
                    _2718 = _2552;
                    _2719 = _2554;
                    _2720 = _2556;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
        }
        uvec4 _2559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2560 = _2559.z;
        uint _2562 = (_2560 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2562) & _2421) == 0u)
        {
            _2683 = _2545;
            _2685 = _2547;
            _2687 = _2549;
            _2689 = _2551;
            _2691 = _2553;
            _2693 = _2555;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
            float _2709 = _2708 * _1825;
            float _2710 = _2708 * _1826;
            float _2711 = _2708 * _1827;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2562 < ((_2560 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2843 = _2545;
                float _2844 = _2547;
                float _2845 = _2549;
                float _2846 = _2551;
                float _2847 = _2553;
                float _2848 = _2555;
                uint _2849 = _2562;
                uint _2858;
                bool _2859;
                for (;;)
                {
                    _2858 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                    _2859 = _2858 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2859)
                    {
                        frontier_phi_88_pred = _2846;
                        frontier_phi_88_pred_1 = _2847;
                        frontier_phi_88_pred_2 = _2848;
                        frontier_phi_88_pred_3 = _2845;
                        frontier_phi_88_pred_4 = _2844;
                        frontier_phi_88_pred_5 = _2843;
                    }
                    else
                    {
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        float _3059 = _2847;
                        float _3060 = _2848;
                        uint _3061 = _2858;
                        uint _3062;
                        vec4 _3087;
                        float _3088;
                        vec4 _3103;
                        vec3 _3115;
                        vec4 _3130;
                        vec4 _3145;
                        float _3191;
                        bool _3192;
                        for (;;)
                        {
                            uint _3072 = ((_2849 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3061));
                            _3062 = (_3061 + 4294967295u) & _3061;
                            uint _3074 = _3072 * 40u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            _3088 = _3087.w;
                            uint _3090 = (_3072 * 40u) + 4u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3072 * 40u) + 8u;
                            _3115 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x));
                            uint _3117 = (_3072 * 40u) + 16u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3132 = (_3072 * 40u) + 20u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3072 * 40u) + 24u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3166 = (_3072 * 40u) + 28u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3191 = fma(_1827, _3179.z, fma(_1826, _3179.y, _3179.x * _1825)) + _3179.w;
                            _3192 = !((fma(_1827, _3160.z, fma(_1826, _3160.y, _3160.x * _1825)) + _3160.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3192)
                            {
                                float _3219 = _3087.x - _1825;
                                float _3220 = _3087.y - _1826;
                                float _3221 = _3087.z - _1827;
                                float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                                float _3225 = inversesqrt(_3222);
                                float _3226 = _3225 * _3219;
                                float _3227 = _3225 * _3220;
                                float _3228 = _3225 * _3221;
                                float _3232 = 1.0 - (_3222 / (_3088 * _3088));
                                float _4236 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3237 = sqrt(_3222) * _3103.w;
                                float _3239 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                                float _3240 = _3239 * _3239;
                                float _3243 = ((1.0 - _3240) * dot(vec3(_3226, _3227, _3228), vec3(_710, _713, _716))) + _3240;
                                float _3246 = _3237 * _3237;
                                float _3250 = (fma(_1827, _3130.z, fma(_1826, _3130.y, _3130.x * _1825)) + _3130.w) / _3191;
                                float _3251 = (fma(_1827, _3145.z, fma(_1826, _3145.y, _3145.x * _1825)) + _3145.w) / _3191;
                                float _3255 = 1.0 - dot(vec2(_3250, _3251), vec2(_3250, _3251));
                                float _4252 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3257 = _3256 * (((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3233) / ((_3246 * 0.699999988079071044921875) + 1.0));
                                float _3269 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                                float _3270 = 1.0 - _771;
                                float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                                float _3278 = _3277 * _3277;
                                float _3279 = _3278 * _3278;
                                float _3280 = _3226 - _2709;
                                float _3281 = _3227 - _2710;
                                float _3282 = _3228 - _2711;
                                float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                                float _3290 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4263 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3294 = dot(vec3(_710, _713, _716), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                                float _4274 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                                float _3302 = _3239 * _3278;
                                float _3303 = _3302 * _3302;
                                float _3309 = ((1.0 - _3303) * dot(vec3(_710, _713, _716), vec3(_3226, _3227, _3228))) + _3303;
                                float _4285 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3311 = 1.0 - _3278;
                                float _3321 = (0.5 / (((_3310 * ((_3293 * _3311) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3278) * _3293))) * _3310;
                                float _4296 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3331 = (_3256 * _3233) * (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_3301 * _3301) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3331 * _3115.x;
                                frontier_phi_94_pred_1 = _3331 * _3115.y;
                                frontier_phi_94_pred_2 = _3257 * _3103.z;
                                frontier_phi_94_pred_3 = _3257 * _3103.y;
                                frontier_phi_94_pred_4 = _3257 * _3103.x;
                                frontier_phi_94_pred_5 = _3331 * _3115.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3335 = frontier_phi_94_pred;
                            _3336 = frontier_phi_94_pred_1;
                            _3340 = frontier_phi_94_pred_2;
                            _3339 = frontier_phi_94_pred_3;
                            _3338 = frontier_phi_94_pred_4;
                            _3337 = frontier_phi_94_pred_5;
                            _3045 = _3338 + _3058;
                            _3046 = _3339 + _3059;
                            _3047 = _3340 + _3060;
                            _3042 = _3335 + _3055;
                            _3043 = _3336 + _3056;
                            _3044 = _3337 + _3057;
                            if (_3062 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3062;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3045;
                        frontier_phi_88_pred_1 = _3046;
                        frontier_phi_88_pred_2 = _3047;
                        frontier_phi_88_pred_3 = _3044;
                        frontier_phi_88_pred_4 = _3043;
                        frontier_phi_88_pred_5 = _3042;
                    }
                    _2690 = frontier_phi_88_pred;
                    _2692 = frontier_phi_88_pred_1;
                    _2694 = frontier_phi_88_pred_2;
                    _2688 = frontier_phi_88_pred_3;
                    _2686 = frontier_phi_88_pred_4;
                    _2684 = frontier_phi_88_pred_5;
                    uint _2850 = _2849 + 1u;
                    if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2843 = _2684;
                        _2844 = _2686;
                        _2845 = _2688;
                        _2846 = _2690;
                        _2847 = _2692;
                        _2848 = _2694;
                        _2849 = _2850;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2692;
                frontier_phi_75_76_ladder_1 = _2694;
                frontier_phi_75_76_ladder_2 = _2690;
                frontier_phi_75_76_ladder_3 = _2688;
                frontier_phi_75_76_ladder_4 = _2686;
                frontier_phi_75_76_ladder_5 = _2684;
            }
            else
            {
                frontier_phi_75_76_ladder = _2553;
                frontier_phi_75_76_ladder_1 = _2555;
                frontier_phi_75_76_ladder_2 = _2551;
                frontier_phi_75_76_ladder_3 = _2549;
                frontier_phi_75_76_ladder_4 = _2547;
                frontier_phi_75_76_ladder_5 = _2545;
            }
            _2683 = frontier_phi_75_76_ladder_5;
            _2685 = frontier_phi_75_76_ladder_4;
            _2687 = frontier_phi_75_76_ladder_3;
            _2689 = frontier_phi_75_76_ladder_2;
            _2691 = frontier_phi_75_76_ladder;
            _2693 = frontier_phi_75_76_ladder_1;
        }
        float _2698 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2434 = (_2698 * _2689) + _2113;
        _2436 = (_2698 * _2691) + _2114;
        _2438 = (_2698 * _2693) + _2115;
        _2440 = ((_2683 * 0.039999999105930328369140625) * _2698) + _2269;
        _2442 = ((_2685 * 0.039999999105930328369140625) * _2698) + _2270;
        _2444 = ((_2687 * 0.039999999105930328369140625) * _2698) + _2271;
    }
    else
    {
        _2434 = _2113;
        _2436 = _2114;
        _2438 = _2115;
        _2440 = _2269;
        _2442 = _2270;
        _2444 = _2271;
    }
    uint _2450 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _4312 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4323 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4334 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2475 = (((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2434 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _755))) + ((_2440 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2450].x * ((_589 * ((_545 - _470) - (_545 * _290))) + _470));
    float _2477 = ((cbInstanceData._m0[_2450].y * ((_589 * ((_546 - _471) - (_546 * _290))) + _471)) + ((_2442 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2436 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _755)));
    float _2479 = ((cbInstanceData._m0[_2450].z * ((_589 * ((_547 - _472) - (_547 * _290))) + _472)) + ((_2444 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2438 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _755)));
    uint _2483 = _729 + 6u;
    float _2491 = _689 / cbSceneParam._m0[86u].x;
    float _2492 = _690 / cbSceneParam._m0[86u].y;
    vec4 _2506 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2508 = _2506.x;
    float _2509 = _2506.y;
    float _2510 = _2506.z;
    float _2511 = _2506.w;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _2570 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _2571 = _2570 / _676;
        float _2582 = _2571 * _263;
        float _2583 = _264 * _2571;
        float _2584 = (-0.0) - _2583;
        float _2585 = _2571 * _265;
        float _2587 = (cbSceneParam._m0[77u].w * _2584) / _2570;
        float _2588 = _2587 + cbSceneParam._m0[79u].w;
        float _2589 = cbSceneParam._m0[79u].w - _2583;
        float _2595 = sqrt(((_2582 * _2582) + (_2583 * _2583)) + (_2585 * _2585));
        float _2598 = (1.0 - (cbSceneParam._m0[77u].w / _2570)) * _2595;
        float _2603 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2605 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2805;
        if (abs((_2584 - _2587) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2805 = ((((_2588 > 0.0) ? exp2(_2603 * _2588) : (2.0 - exp2(_2605 * _2588))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2598;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : max(_2588, _2589));
            float _2746 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : min(_2588, _2589));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2805 = ((abs(_2595 / _2584) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2603 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2603 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2605 * _2755) - exp2(_2605 * _2756)) * _2744))) + (_2598 * cbSceneParam._m0[80u].z);
        }
        vec4 _2807 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, 1.0), 0.0);
        float _2816 = exp2((_2805 * (-1.44269502162933349609375)) * (1.0 - _2807.w));
        float _2817 = log2(_2816);
        float _2833 = log2(_2511);
        _2607 = (exp2(_2833 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].x)) * _2807.x) / cbSceneParam._m0[78u].x)) + _2508;
        _2609 = (exp2(_2833 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].y)) * _2807.y) / cbSceneParam._m0[78u].y)) + _2509;
        _2611 = (exp2(_2833 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].z)) * _2807.z) / cbSceneParam._m0[78u].z)) + _2510;
        _2613 = _2816 * _2511;
    }
    else
    {
        _2607 = _2508;
        _2609 = _2509;
        _2611 = _2510;
        _2613 = _2511;
    }
    float _2625 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2626 = _2625 == 3.0;
    float _2627 = log2(_2613);
    float _2634 = exp2(_2627 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0)));
    float _2635 = exp2(_2627 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)));
    float _2636 = exp2(_2627 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0)));
    float _2645 = (_2625 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2645 * (_2626 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.y = _2645 * (_2626 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.z = _2645 * (_2626 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.w = cbInstanceData._m0[_2483].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2483].w;
}


