#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1049;
float _3185;
float _3186;
float _3187;
float _3188;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _395 = ((_389 * _383) + (_357 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _396 = ((_389 * _384) + (_358 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    float _416 = (_392 > 0.0) ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_397 + (-0.5)) + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_398 + (-0.5)) + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _474 = 0.5 - (_290 * 0.5);
    float _481 = ((((_456 - (_456 * _290)) * cbMtdParam._m0[9u].x) - _303) * _474) + _303;
    float _482 = ((((_457 - (_457 * _290)) * cbMtdParam._m0[9u].y) - _305) * _474) + _305;
    float _483 = (((cbMtdParam._m0[9u].z * (_458 - (_458 * _290))) - _307) * _474) + _307;
    vec4 _495 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _499 = _495.z;
    float _502 = (_495.x * 2.0) + (-1.0);
    float _503 = (_495.y * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3207 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))));
    float _510 = _499 * _290;
    float _517 = (cbMtdParam._m0[15u].w * ((_329 - _510) + ((_499 - _329) * _290))) + _510;
    float _521 = (cbMtdParam._m0[16u].x * _357) + _502;
    float _522 = (cbMtdParam._m0[16u].x * _358) + _503;
    float _525 = fma(_509, _199, fma(_522, _206, _521 * _192));
    float _528 = fma(_509, _200, fma(_522, _207, _521 * _193));
    float _531 = fma(_509, _201, fma(_522, _208, _521 * _194));
    float _535 = inversesqrt(dot(vec3(_525, _528, _531), vec3(_525, _528, _531)));
    float _536 = _535 * _525;
    float _537 = _535 * _528;
    float _538 = _535 * _531;
    float _3218 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _539 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
    float _3229 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3240 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3251 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _558 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _563 = _263 * _562;
    float _564 = _264 * _562;
    float _565 = _265 * _562;
    vec4 _570 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _572 = _570.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _730 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _736 = (cbMatDynParam._m0[5u].x * _730) + cbMatDynParam._m0[5u].y;
        float _3262 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _741 = (cbMatDynParam._m0[5u].z * _730) + cbMatDynParam._m0[5u].w;
        float _3273 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) - _737)) + _737) < ((_572 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _585 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _586 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _605 = fma(_538, cbSceneParam._m0[5u].z, fma(_537, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _536));
    float _608 = fma(_538, cbSceneParam._m0[6u].z, fma(_537, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _536));
    float _611 = fma(_538, cbSceneParam._m0[7u].z, fma(_537, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _536));
    uint _624 = uint(roundEven(NORMAL.w)) * 13u;
    uint _626 = _624 + 9u;
    uint _627 = _626 + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3284 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _3306 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    vec4 _647 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _585, cbSceneParam._m0[86u].y * _586));
    float _650 = _647.x * TEXCOORD.z;
    float _651 = dot(vec3(_536, _537, _538), vec3(_563, _564, _565));
    float _654 = _651 * 2.0;
    float _658 = (_654 * _536) - _563;
    float _659 = (_654 * _537) - _564;
    float _660 = (_654 * _538) - _565;
    float _664 = abs(dot(vec3(_563, _564, _565), vec3(_536, _537, _538)));
    float _3317 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _666 = sqrt(_539);
    float _679 = exp2((_666 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_666 * 3.0));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _779 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _783 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _806 = _711 + _536;
        float _807 = _715 + _537;
        float _808 = _719 + _538;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _775;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _779;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _783;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_536, _537, _538), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3365 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_536, _537, _538), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3398 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_536, _537, _538), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3431 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1096 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1100 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1123 = _711 + _536;
        float _1124 = _715 + _537;
        float _1125 = _719 + _538;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_536, _537, _538), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3494 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_536, _537, _538), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3527 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_536, _537, _538), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3560 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = _1049;
        _1371 = _1049;
        _1372 = _1049;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1061)) + _1061;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1062)) + _1062;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _658 * 0.5;
    float _1430 = _659 * 0.5;
    float _1431 = _660 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _539);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1579;
    float _1581;
    float _1583;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1546 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1550 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1554 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1557 = fma(_660, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658));
        float _1560 = fma(_660, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658));
        float _1563 = fma(_660, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658));
        float _1591;
        if (_1557 > 0.0)
        {
            _1591 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1591 = frontier_phi_25_23_ladder;
        }
        float _1961;
        if (_1560 > 0.0)
        {
            _1961 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1961 = frontier_phi_34_30_ladder;
        }
        float _2269;
        if (_1563 > 0.0)
        {
            _2269 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2269 = frontier_phi_48_41_ladder;
        }
        float _2271 = isnan(_1961) ? _1591 : (isnan(_1591) ? _1961 : min(_1591, _1961));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1557) + _1546;
        float _2277 = (_2272 * _1560) + _1550;
        float _2278 = (_2272 * _1563) + _1554;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2279;
        float _2282 = _2279 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2278 > _2282) || ((_2278 < _2280) || ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 < _2280) || (_2276 > _2282))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_24_48_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1579 = frontier_phi_24_48_ladder_2;
        _1581 = frontier_phi_24_48_ladder_1;
        _1583 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_658, _659, _660), _1498);
        _1579 = _1567.x * cbModelParam._m0[1u].y;
        _1581 = _1567.y * cbModelParam._m0[1u].y;
        _1583 = _1567.z * cbModelParam._m0[1u].y;
    }
    float _1587 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _539);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1587 : min(cbModelParam._m0[25u].w, _1587));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1641 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1645 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1649 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1652 = fma(_660, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658));
        float _1655 = fma(_660, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658));
        float _1658 = fma(_660, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658));
        float _1966;
        if (_1652 > 0.0)
        {
            _1966 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1966 = frontier_phi_36_32_ladder;
        }
        float _2295;
        if (_1655 > 0.0)
        {
            _2295 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2295 = frontier_phi_50_43_ladder;
        }
        float _2485;
        if (_1658 > 0.0)
        {
            _2485 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2485 = frontier_phi_68_61_ladder;
        }
        float _2487 = isnan(_2295) ? _1966 : (isnan(_1966) ? _2295 : min(_1966, _2295));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1652) + _1641;
        float _2493 = (_2488 * _1655) + _1645;
        float _2494 = (_2488 * _1658) + _1649;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1588);
            frontier_phi_33_68_ladder = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1677 = frontier_phi_33_68_ladder_2;
        _1679 = frontier_phi_33_68_ladder;
        _1681 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_658, _659, _660), _1588);
        _1677 = _1661.x * cbModelParam._m0[1u].z;
        _1679 = _1661.y * cbModelParam._m0[1u].z;
        _1681 = _1661.z * cbModelParam._m0[1u].z;
    }
    float _1693 = ((((1.0 - _679) * ((_666 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_679 * _666)) * _650;
    float _1694 = _1693 * ((cbModelParam._m0[1u].w * (_1677 - _1579)) + _1579);
    float _1695 = _1693 * ((cbModelParam._m0[1u].w * (_1679 - _1581)) + _1581);
    float _1696 = _1693 * ((cbModelParam._m0[1u].w * (_1681 - _1583)) + _1583);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, _1694 * cbSceneParam._m0[91u].x));
    vec4 _1713 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_585, _586));
    float _1715 = _1713.w;
    float _1727 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1715);
    float _1728 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1715);
    float _1729 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1715);
    uvec4 _1733 = floatBitsToUint(cbInstanceData._m0[_624 + 5u]);
    uint _1735 = _1733.x * 14u;
    uint _1736 = _1735 + 13u;
    float _1741 = _650 + (-1.0);
    float _1744 = (cbLight._m0[_1736].x * _1741) + 1.0;
    float _1745 = (cbLight._m0[_1736].y * _1741) + 1.0;
    uint _1746 = _1735 + 5u;
    float _1752 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1756 = _1735 + 4u;
    float _1765 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1769 = _1735 | 1u;
    float _1780 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_536, _537, _538));
    float _1783 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_536, _537, _538));
    float _3696 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _3707 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1788 = (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.3183098733425140380859375;
    float _1790 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.3183098733425140380859375;
    float _1797 = ((cbLight._m0[_1746].x * _1752) * _1790) + (((cbLight._m0[_1756].x * _1727) * _1765) * _1788);
    float _1798 = ((_1752 * cbLight._m0[_1746].y) * _1790) + (((cbLight._m0[_1756].y * _1728) * _1765) * _1788);
    float _1799 = ((_1752 * cbLight._m0[_1746].z) * _1790) + (((cbLight._m0[_1756].z * _1729) * _1765) * _1788);
    uint _1801 = _1735 + 8u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _539) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1735].x + _563;
    float _1817 = cbLight._m0[_1735].y + _564;
    float _1818 = cbLight._m0[_1735].z + _565;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_536, _537, _538), vec3(cbLight._m0[_1735].xyz));
    float _3718 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _1830 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _1831 = dot(vec3(_536, _537, _538), vec3(_1823, _1824, _1825));
    float _3740 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1823, _1824, _1825));
    float _3751 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1815 * _1815;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1854 = (exp2(log2(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1855 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1830 * ((_1829 * _1855) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1855) + _1815) * _1829))) * _1829;
    float _3762 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    uint _1882 = _1735 + 9u;
    float _1893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1769].w)) * _539) * 0.949999988079071044921875);
    float _1894 = _1893 * _1893;
    float _1895 = cbLight._m0[_1769].x + _563;
    float _1896 = cbLight._m0[_1769].y + _564;
    float _1897 = cbLight._m0[_1769].z + _565;
    float _1901 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
    float _1902 = _1901 * _1895;
    float _1903 = _1901 * _1896;
    float _1904 = _1901 * _1897;
    float _1905 = dot(vec3(_536, _537, _538), vec3(cbLight._m0[_1769].xyz));
    float _3773 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1909 = dot(vec3(_536, _537, _538), vec3(_1902, _1903, _1904));
    float _3784 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_1902, _1903, _1904));
    float _3795 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1894 * _1894;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1930 = (exp2(log2(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1931 = 1.0 - _1894;
    float _1941 = (0.5 / (((_1830 * ((_1908 * _1931) + _1894)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1931) + _1894) * _1908))) * _1908;
    float _3806 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    float _1953 = (((_1930 * cbLight._m0[_1882].x) * _1943) * _1752) + ((((cbLight._m0[_1801].x * _1727) * _1854) * _1868) * _1765);
    float _1954 = (((_1930 * cbLight._m0[_1882].y) * _1943) * _1752) + ((((cbLight._m0[_1801].y * _1728) * _1854) * _1868) * _1765);
    float _1955 = (((_1930 * cbLight._m0[_1882].z) * _1943) * _1752) + ((((cbLight._m0[_1801].z * _1729) * _1854) * _1868) * _1765);
    float _2070;
    float _2072;
    float _2074;
    float _2076;
    float _2078;
    float _2080;
    if (_1733.y == 0u)
    {
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2010;
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2010;
        float _2013 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2010;
        uvec4 _2025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2026 = _2025.x;
        uint _2037 = uint((float(_2025.y) * floor(float(uint(cbSceneParam._m0[85u].y * _586) / _2026))) + floor(float(uint(cbSceneParam._m0[85u].x * _585) / _2026)));
        float _2047 = (log2(_2013 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2048 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        uint _2051 = uint(isnan(14.0) ? _2048 : (isnan(_2048) ? 14.0 : min(_2048, 14.0)));
        uvec4 _2056 = texelFetch(g_lightClusterGridBuffer, int(((_2051 << 2u) + (_2037 << 6u)) >> 2u));
        uint _2057 = _2056.x;
        uint _2058 = _2025.z;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((((1u << ((_2058 >> 4u) & 15u)) + 4294967295u) & _2057) == 0u) || ((_2058 & 240u) == 0u))
        {
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
        }
        else
        {
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            uint _2338 = 0u;
            uint _2347;
            bool _2348;
            for (;;)
            {
                _2347 = texelFetch(g_lightClassification, int((((_2051 << 5u) + (_2037 << 9u)) + (_2338 << 2u)) >> 2u)).x;
                _2348 = _2347 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2348)
                {
                    frontier_phi_63_pred = _2334;
                    frontier_phi_63_pred_1 = _2337;
                    frontier_phi_63_pred_2 = _2336;
                    frontier_phi_63_pred_3 = _2335;
                    frontier_phi_63_pred_4 = _2333;
                    frontier_phi_63_pred_5 = _2332;
                }
                else
                {
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    uint _2534;
                    _2528 = _2332;
                    _2529 = _2333;
                    _2530 = _2334;
                    _2531 = _2335;
                    _2532 = _2336;
                    _2533 = _2337;
                    _2534 = _2347;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    for (;;)
                    {
                        uint _2538 = uint(findLSB(_2534)) + (_2338 << 5u);
                        uint _2535 = (_2534 + 4294967295u) & _2534;
                        uint _2540 = _2538 * 48u;
                        vec4 _2554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2540)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 3u)).x));
                        uint _2560 = (_2538 * 48u) + 4u;
                        vec4 _2573 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2560)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 3u)).x));
                        uint _2579 = (_2538 * 48u) + 8u;
                        vec3 _2590 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2579)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 2u)).x));
                        float _2594 = _2554.x - _2011;
                        float _2595 = _2554.y - _2012;
                        float _2596 = _2554.z - _2013;
                        float _2597 = dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596));
                        float _2600 = inversesqrt(_2597);
                        float _2601 = _2600 * _2594;
                        float _2602 = _2600 * _2595;
                        float _2603 = _2600 * _2596;
                        float _2604 = dot(vec3(_605, _608, _611), vec3(_2601, _2602, _2603));
                        float _2609 = 1.0 - (_2597 * _2554.w);
                        float _3827 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _2610 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                        float _2611 = sqrt(_2597) * _2573.w;
                        float _2614 = 1.39999997615814208984375 / (_2611 + 1.39999997615814208984375);
                        float _2615 = _2614 * _2614;
                        float _2618 = ((1.0 - _2615) * _2604) + _2615;
                        float _2621 = _2611 * _2611;
                        float _2625 = ((isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0))) * _2610) / ((_2621 * 0.699999988079071044921875) + 1.0);
                        float _2629 = (-0.0) - _2011;
                        float _2630 = (-0.0) - _2012;
                        float _2631 = (-0.0) - _2013;
                        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
                        float _2636 = _2635 * _2629;
                        float _2637 = _2635 * _2630;
                        float _2638 = _2635 * _2631;
                        float _2646 = exp2(log2(1.0 / ((_2621 * 3.5) + 5.0)) * 0.25);
                        float _2647 = 1.0 - _666;
                        float _2654 = sqrt(1.0 - ((1.0 - (_2647 * _2647)) * (1.0 - (_2646 * _2646))));
                        float _2655 = _2654 * _2654;
                        float _2656 = _2655 * _2655;
                        float _2657 = _2636 + _2601;
                        float _2658 = _2637 + _2602;
                        float _2659 = _2638 + _2603;
                        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
                        float _2667 = dot(vec3(_605, _608, _611), vec3(_2636, _2637, _2638));
                        float _3843 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2670 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
                        float _2671 = dot(vec3(_605, _608, _611), vec3(_2663 * _2657, _2663 * _2658, _2663 * _2659));
                        float _3854 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2674 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                        float _2678 = ((_2674 * _2674) * (_2656 + (-1.0))) + 1.0;
                        float _2679 = _2614 * _2655;
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * _2604) + _2680;
                        float _3865 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2684 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                        float _2685 = 1.0 - _2655;
                        float _2695 = (0.5 / (((_2684 * ((_2670 * _2685) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2685) + _2655) * _2670))) * _2684;
                        float _3876 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2706 = (((_2656 * 3.1415927410125732421875) * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) / ((_2678 * _2678) * ((_2621 * 2.1991131305694580078125) + 3.141590118408203125))) * _2610;
                        _2432 = (_2625 * _2573.x) + _2531;
                        _2433 = (_2625 * _2573.y) + _2532;
                        _2434 = (_2625 * _2573.z) + _2533;
                        _2429 = (_2706 * _2590.x) + _2528;
                        _2430 = (_2706 * _2590.y) + _2529;
                        _2431 = (_2706 * _2590.z) + _2530;
                        if (_2535 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2528 = _2429;
                            _2529 = _2430;
                            _2530 = _2431;
                            _2531 = _2432;
                            _2532 = _2433;
                            _2533 = _2434;
                            _2534 = _2535;
                        }
                    }
                    frontier_phi_63_pred = _2431;
                    frontier_phi_63_pred_1 = _2434;
                    frontier_phi_63_pred_2 = _2433;
                    frontier_phi_63_pred_3 = _2432;
                    frontier_phi_63_pred_4 = _2430;
                    frontier_phi_63_pred_5 = _2429;
                }
                _2153 = frontier_phi_63_pred;
                _2159 = frontier_phi_63_pred_1;
                _2157 = frontier_phi_63_pred_2;
                _2155 = frontier_phi_63_pred_3;
                _2151 = frontier_phi_63_pred_4;
                _2149 = frontier_phi_63_pred_5;
                uint _2339 = _2338 + 1u;
                if (_2339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2332 = _2149;
                    _2333 = _2151;
                    _2334 = _2153;
                    _2335 = _2155;
                    _2336 = _2157;
                    _2337 = _2159;
                    _2338 = _2339;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
        }
        uvec4 _2162 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2163 = _2162.z;
        uint _2165 = (_2163 >> 8u) & 15u;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((4294967295u << _2165) & _2057) == 0u)
        {
            _2300 = _2148;
            _2302 = _2150;
            _2304 = _2152;
            _2306 = _2154;
            _2308 = _2156;
            _2310 = _2158;
        }
        else
        {
            float _2325 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
            float _2326 = _2325 * _2011;
            float _2327 = _2325 * _2012;
            float _2328 = _2325 * _2013;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2165 < ((_2163 >> 12u) & 15u))
            {
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2511 = _2148;
                float _2512 = _2150;
                float _2513 = _2152;
                float _2514 = _2154;
                float _2515 = _2156;
                float _2516 = _2158;
                uint _2517 = _2165;
                uint _2526;
                bool _2527;
                for (;;)
                {
                    _2526 = texelFetch(g_lightClassification, int((((_2051 << 5u) + (_2037 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                    _2527 = _2526 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2527)
                    {
                        frontier_phi_77_pred = _2516;
                        frontier_phi_77_pred_1 = _2515;
                        frontier_phi_77_pred_2 = _2514;
                        frontier_phi_77_pred_3 = _2513;
                        frontier_phi_77_pred_4 = _2512;
                        frontier_phi_77_pred_5 = _2511;
                    }
                    else
                    {
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _2754 = _2511;
                        float _2755 = _2512;
                        float _2756 = _2513;
                        float _2757 = _2514;
                        float _2758 = _2515;
                        float _2759 = _2516;
                        uint _2760 = _2526;
                        uint _2761;
                        vec4 _2786;
                        float _2787;
                        vec4 _2802;
                        vec3 _2814;
                        vec4 _2829;
                        vec4 _2844;
                        float _2890;
                        bool _2891;
                        for (;;)
                        {
                            uint _2771 = ((_2517 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2760));
                            _2761 = (_2760 + 4294967295u) & _2760;
                            uint _2773 = _2771 * 40u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            _2787 = _2786.w;
                            uint _2789 = (_2771 * 40u) + 4u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            uint _2804 = (_2771 * 40u) + 8u;
                            _2814 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x));
                            uint _2816 = (_2771 * 40u) + 16u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2831 = (_2771 * 40u) + 20u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2846 = (_2771 * 40u) + 24u;
                            vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2865 = (_2771 * 40u) + 28u;
                            vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            _2890 = fma(_2013, _2878.z, fma(_2012, _2878.y, _2878.x * _2011)) + _2878.w;
                            _2891 = !((fma(_2013, _2859.z, fma(_2012, _2859.y, _2859.x * _2011)) + _2859.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2891)
                            {
                                float _2918 = _2786.x - _2011;
                                float _2919 = _2786.y - _2012;
                                float _2920 = _2786.z - _2013;
                                float _2921 = dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920));
                                float _2924 = inversesqrt(_2921);
                                float _2925 = _2924 * _2918;
                                float _2926 = _2924 * _2919;
                                float _2927 = _2924 * _2920;
                                float _2931 = 1.0 - (_2921 / (_2787 * _2787));
                                float _3887 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2932 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                                float _2936 = sqrt(_2921) * _2802.w;
                                float _2938 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                                float _2939 = _2938 * _2938;
                                float _2942 = ((1.0 - _2939) * dot(vec3(_2925, _2926, _2927), vec3(_605, _608, _611))) + _2939;
                                float _2945 = _2936 * _2936;
                                float _2949 = (fma(_2013, _2829.z, fma(_2012, _2829.y, _2829.x * _2011)) + _2829.w) / _2890;
                                float _2950 = (fma(_2013, _2844.z, fma(_2012, _2844.y, _2844.x * _2011)) + _2844.w) / _2890;
                                float _2954 = 1.0 - dot(vec2(_2949, _2950), vec2(_2949, _2950));
                                float _3903 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2955 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                                float _2956 = _2955 * (((isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))) * _2932) / ((_2945 * 0.699999988079071044921875) + 1.0));
                                float _2968 = exp2(log2(1.0 / ((_2945 * 3.5) + 5.0)) * 0.25);
                                float _2969 = 1.0 - _666;
                                float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                                float _2977 = _2976 * _2976;
                                float _2978 = _2977 * _2977;
                                float _2979 = _2925 - _2326;
                                float _2980 = _2926 - _2327;
                                float _2981 = _2927 - _2328;
                                float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                                float _2989 = dot(vec3(_605, _608, _611), vec3((-0.0) - _2326, (-0.0) - _2327, (-0.0) - _2328));
                                float _3914 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2992 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _2993 = dot(vec3(_605, _608, _611), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                                float _3925 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2996 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                                float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                                float _3001 = _2938 * _2977;
                                float _3002 = _3001 * _3001;
                                float _3008 = ((1.0 - _3002) * dot(vec3(_605, _608, _611), vec3(_2925, _2926, _2927))) + _3002;
                                float _3936 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                                float _3010 = 1.0 - _2977;
                                float _3020 = (0.5 / (((_3009 * ((_2992 * _3010) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3009 * _3010) + _2977) * _2992))) * _3009;
                                float _3947 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3030 = (_2955 * _2932) * (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) / ((_3000 * _3000) * ((_2945 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2956 * _2802.x;
                                frontier_phi_83_pred_1 = _2956 * _2802.z;
                                frontier_phi_83_pred_2 = _2956 * _2802.y;
                                frontier_phi_83_pred_3 = _3030 * _2814.z;
                                frontier_phi_83_pred_4 = _3030 * _2814.y;
                                frontier_phi_83_pred_5 = _3030 * _2814.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3037 = frontier_phi_83_pred;
                            _3039 = frontier_phi_83_pred_1;
                            _3038 = frontier_phi_83_pred_2;
                            _3036 = frontier_phi_83_pred_3;
                            _3035 = frontier_phi_83_pred_4;
                            _3034 = frontier_phi_83_pred_5;
                            _2744 = _3037 + _2757;
                            _2745 = _3038 + _2758;
                            _2746 = _3039 + _2759;
                            _2741 = _3034 + _2754;
                            _2742 = _3035 + _2755;
                            _2743 = _3036 + _2756;
                            if (_2761 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2761;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2746;
                        frontier_phi_77_pred_1 = _2745;
                        frontier_phi_77_pred_2 = _2744;
                        frontier_phi_77_pred_3 = _2743;
                        frontier_phi_77_pred_4 = _2742;
                        frontier_phi_77_pred_5 = _2741;
                    }
                    _2311 = frontier_phi_77_pred;
                    _2309 = frontier_phi_77_pred_1;
                    _2307 = frontier_phi_77_pred_2;
                    _2305 = frontier_phi_77_pred_3;
                    _2303 = frontier_phi_77_pred_4;
                    _2301 = frontier_phi_77_pred_5;
                    uint _2518 = _2517 + 1u;
                    if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2511 = _2301;
                        _2512 = _2303;
                        _2513 = _2305;
                        _2514 = _2307;
                        _2515 = _2309;
                        _2516 = _2311;
                        _2517 = _2518;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2303;
                frontier_phi_52_53_ladder_1 = _2311;
                frontier_phi_52_53_ladder_2 = _2309;
                frontier_phi_52_53_ladder_3 = _2307;
                frontier_phi_52_53_ladder_4 = _2305;
                frontier_phi_52_53_ladder_5 = _2301;
            }
            else
            {
                frontier_phi_52_53_ladder = _2150;
                frontier_phi_52_53_ladder_1 = _2158;
                frontier_phi_52_53_ladder_2 = _2156;
                frontier_phi_52_53_ladder_3 = _2154;
                frontier_phi_52_53_ladder_4 = _2152;
                frontier_phi_52_53_ladder_5 = _2148;
            }
            _2300 = frontier_phi_52_53_ladder_5;
            _2302 = frontier_phi_52_53_ladder;
            _2304 = frontier_phi_52_53_ladder_4;
            _2306 = frontier_phi_52_53_ladder_3;
            _2308 = frontier_phi_52_53_ladder_2;
            _2310 = frontier_phi_52_53_ladder_1;
        }
        float _2315 = isnan(1.0) ? _650 : (isnan(_650) ? 1.0 : min(_650, 1.0));
        _2070 = (_2315 * _2306) + _1797;
        _2072 = (_2315 * _2308) + _1798;
        _2074 = (_2315 * _2310) + _1799;
        _2076 = ((_2300 * 0.039999999105930328369140625) * _2315) + _1953;
        _2078 = ((_2302 * 0.039999999105930328369140625) * _2315) + _1954;
        _2080 = ((_2304 * 0.039999999105930328369140625) * _2315) + _1955;
    }
    else
    {
        _2070 = _1797;
        _2072 = _1798;
        _2074 = _1799;
        _2076 = _1953;
        _2078 = _1954;
        _2080 = _1955;
    }
    float _3963 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3974 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3985 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _2097 = ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2070 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _650))) + ((_2076 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2098 = ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2072 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _650))) + ((_2078 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2099 = ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_2074 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _650))) + ((_2080 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2100 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    uint _2103 = _624 + 6u;
    float _2111 = _585 / cbSceneParam._m0[86u].x;
    float _2112 = _586 / cbSceneParam._m0[86u].y;
    vec4 _2126 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, (log2((isnan(cbSceneParam._m0[77u].w) ? _558 : (isnan(_558) ? cbSceneParam._m0[77u].w : min(_558, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2128 = _2126.x;
    float _2129 = _2126.y;
    float _2130 = _2126.z;
    float _2131 = _2126.w;
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    if (_558 > cbSceneParam._m0[78u].w)
    {
        float _2173 = isnan(_558) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _558 : min(cbSceneParam._m0[80u].w, _558));
        float _2174 = _2173 / _558;
        float _2185 = _2174 * _263;
        float _2186 = _264 * _2174;
        float _2187 = (-0.0) - _2186;
        float _2188 = _2174 * _265;
        float _2190 = (cbSceneParam._m0[77u].w * _2187) / _2173;
        float _2191 = _2190 + cbSceneParam._m0[79u].w;
        float _2192 = cbSceneParam._m0[79u].w - _2186;
        float _2198 = sqrt(((_2185 * _2185) + (_2186 * _2186)) + (_2188 * _2188));
        float _2201 = (1.0 - (cbSceneParam._m0[77u].w / _2173)) * _2198;
        float _2207 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2209 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2442;
        if (abs((_2187 - _2190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2442 = ((((_2191 > 0.0) ? exp2(_2207 * _2191) : (2.0 - exp2(_2209 * _2191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2201;
        }
        else
        {
            float _2361 = 1.0 / cbSceneParam._m0[80u].x;
            float _2362 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : max(_2191, _2192));
            float _2363 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : min(_2191, _2192));
            float _2372 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : min(_2362, 0.0));
            float _2373 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : min(_2363, 0.0));
            _2442 = ((abs(_2198 / _2187) * cbSceneParam._m0[80u].y) * ((((_2372 - _2373) * 2.0) - ((exp2(_2207 * (isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0)))) - exp2(_2207 * (isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0))))) * _2361)) - ((exp2(_2209 * _2372) - exp2(_2209 * _2373)) * _2361))) + (_2201 * cbSceneParam._m0[80u].z);
        }
        vec4 _2444 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, 1.0), 0.0);
        float _2453 = exp2((_2442 * (-1.44269502162933349609375)) * (1.0 - _2444.w));
        float _2454 = log2(_2453);
        float _2470 = log2(_2131);
        _2211 = (exp2(_2470 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].x)) * _2444.x) / cbSceneParam._m0[78u].x)) + _2128;
        _2213 = (exp2(_2470 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].y)) * _2444.y) / cbSceneParam._m0[78u].y)) + _2129;
        _2215 = (exp2(_2470 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].z)) * _2444.z) / cbSceneParam._m0[78u].z)) + _2130;
        _2217 = _2453 * _2131;
    }
    else
    {
        _2211 = _2128;
        _2213 = _2129;
        _2215 = _2130;
        _2217 = _2131;
    }
    bool _2480;
    vec4 _2227;
    vec4 _2249;
    float _2251;
    float _2255;
    float _2256;
    float _2257;
    float _2258;
    bool _2268;
    for (;;)
    {
        _2227 = cbMatDynParam._m0[0u];
        float _2229 = roundEven(_2227.y);
        bool _2230 = _2229 == 3.0;
        float _2231 = log2(_2217);
        float _2238 = exp2(_2231 * cbSceneParam._m0[78u].x) * _2100;
        float _2239 = exp2(_2231 * cbSceneParam._m0[78u].y) * _2101;
        float _2240 = exp2(_2231 * cbSceneParam._m0[78u].z) * _2102;
        float _2247 = _572 + (-0.5);
        _2249 = cbMtdParam._m0[1u];
        _2251 = _2249.y * _2247;
        float _2254 = (_2229 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2255 = _2254 * (_2230 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2211)));
        _2256 = _2254 * (_2230 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2213)));
        _2257 = _2254 * (_2230 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2215)));
        _2258 = _2247 * 0.999000012874603271484375;
        _2268 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2268)
        {
            if ((cbInstanceData._m0[_624 + 7u].x + _2258) < 0.5)
            {
                _2480 = true;
                break;
            }
        }
        uint _2396 = _626 + uint(_2227.w);
        if ((cbInstanceData._m0[_2396].w < 1.0) && ((cbInstanceData._m0[_2396].w + _2258) < 0.5))
        {
            _2480 = true;
            break;
        }
        if ((_2251 + 1.0) < _2249.x)
        {
            _2480 = true;
            break;
        }
        _2480 = false;
        break;
    }
    float _2711;
    if (_2480)
    {
        discard_state = true;
        _2711 = 0.0;
    }
    else
    {
        _2711 = cbInstanceData._m0[_2103].w;
    }
    SV_Target.x = _2255;
    SV_Target.y = _2256;
    SV_Target.z = _2257;
    SV_Target.w = _2711;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2103].w;
    discard_exit();
}


