#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _184 = _183 * _176;
    float _185 = _183 * _177;
    float _186 = _183 * _178;
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = _190 * NORMAL.x;
    float _192 = _190 * NORMAL.y;
    float _193 = _190 * NORMAL.z;
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _198 = _197 * TANGENT.x;
    float _199 = _197 * TANGENT.y;
    float _200 = _197 * TANGENT.z;
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    vec4 _276 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.w;
    float _295 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _282) + cbMtdParam._m0[11u].x) * _276.x;
    float _297 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _282) + cbMtdParam._m0[11u].y) * _276.y;
    float _299 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _282) + cbMtdParam._m0[11u].z) * _276.z;
    float _324 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _331 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _340 = cbMtdParam._m0[23u].x + _255;
    float _341 = cbMtdParam._m0[23u].y + _256;
    float _342 = cbMtdParam._m0[23u].z + _257;
    float _356 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_324 * _184, _324 * _185, _324 * _186));
    float _357 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_331 * _198, _331 * _199, _331 * _200));
    float _358 = (-0.0) - dot(vec3(_340, _341, _342), vec3((-0.0) - _191, (-0.0) - _192, (-0.0) - _193));
    float _362 = inversesqrt(dot(vec3(_356, _357, _358), vec3(_356, _357, _358)));
    float _363 = _362 * _358;
    float _365 = (cbMtdParam._m0[19u].w * _356) * _362;
    float _367 = (cbMtdParam._m0[20u].x * _357) * _362;
    float _370 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _371 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _389;
    float _392;
    float _394;
    if (_365 > 0.0)
    {
        float _375 = (1.0 - _370) / _365;
        _389 = _375;
        _392 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_375 * _363)) * 0.16666667163372039794921875;
        _394 = (fract((_375 * _367) + _371) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_365 < 0.0)
        {
            float _390 = ((-0.0) - _370) / _365;
            frontier_phi_3_2_ladder = (fract((_390 * _367) + _371) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _390;
            frontier_phi_3_2_ladder_2 = (fract(_390 * _363) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _391;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _389 = frontier_phi_3_2_ladder_1;
        _392 = frontier_phi_3_2_ladder_2;
        _394 = frontier_phi_3_2_ladder;
    }
    float _420;
    float _422;
    float _424;
    if (_367 > 0.0)
    {
        float _407 = (1.0 - _371) / _367;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_407 < _389)
        {
            frontier_phi_8_5_ladder = (fract((_407 * _365) + _370) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _407;
            frontier_phi_8_5_ladder_2 = (fract(_407 * _363) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _392;
            frontier_phi_8_5_ladder_1 = _389;
            frontier_phi_8_5_ladder_2 = _394;
        }
        _420 = frontier_phi_8_5_ladder_1;
        _422 = frontier_phi_8_5_ladder;
        _424 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_367 < 0.0)
        {
            float _421 = ((-0.0) - _371) / _367;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_421 < _389)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_421 * _365) + _370) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _421;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_421 * _363) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _392;
                frontier_phi_8_6_ladder_9_ladder_1 = _389;
                frontier_phi_8_6_ladder_9_ladder_2 = _394;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _392;
            frontier_phi_8_6_ladder_1 = _389;
            frontier_phi_8_6_ladder_2 = _394;
        }
        _420 = frontier_phi_8_6_ladder_1;
        _422 = frontier_phi_8_6_ladder;
        _424 = frontier_phi_8_6_ladder_2;
    }
    float _428 = (_363 > 0.0) ? (cbMtdParam._m0[16u].w / _363) : 5000.0;
    float _441;
    float _442;
    if (_428 < _420)
    {
        _441 = ((_370 + cbMtdParam._m0[17u].x) + (_428 * _365)) * 0.16666667163372039794921875;
        _442 = (((_428 * _367) + _371) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _441 = _422;
        _442 = _424;
    }
    vec4 _444 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_441, _442));
    float _449 = _444.x * cbMtdParam._m0[13u].x;
    float _450 = _444.y * cbMtdParam._m0[13u].y;
    float _451 = _444.z * cbMtdParam._m0[13u].z;
    vec4 _469 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _477 = (_469.x * 2.0) + (-1.0);
    float _479 = (_469.y * 2.0) + (-1.0);
    float _480 = dot(vec2(_477, _479), vec2(_477, _479));
    float _3071 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _485 = sqrt(1.0 - (isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))));
    float _486 = _469.z * _282;
    float _489 = fma(_485, _191, fma(_479, _198, _477 * _184));
    float _492 = fma(_485, _192, fma(_479, _199, _477 * _185));
    float _495 = fma(_485, _193, fma(_479, _200, _477 * _186));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3082 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _503 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
    float _3093 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3104 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3115 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _526 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _527 = _255 * _526;
    float _528 = _256 * _526;
    float _529 = _257 * _526;
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _557 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _560 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _563 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _576 = uint(roundEven(NORMAL.w)) * 13u;
    uint _577 = _576 + 9u;
    uint _578 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3126 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    float _3137 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
    float _3148 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _601 = _598.x * TEXCOORD.z;
    float _602 = dot(vec3(_500, _501, _502), vec3(_527, _528, _529));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _500) - _527;
    float _610 = (_605 * _501) - _528;
    float _611 = (_605 * _502) - _529;
    float _615 = abs(dot(vec3(_527, _528, _529), vec3(_500, _501, _502)));
    float _3159 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _617 = sqrt(_503);
    float _630 = exp2((_617 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_617 * 3.0));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _703 = fma(_670, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662));
        float _707 = fma(_670, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662));
        float _711 = fma(_670, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662));
        float _735 = _662 + _500;
        float _736 = _666 + _501;
        float _737 = _670 + _502;
        float _747 = fma(_737, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735)) - _703;
        float _748 = fma(_737, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735)) - _707;
        float _749 = fma(_737, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735)) - _711;
        float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
        float _766 = ((_753 * _747) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_703 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_753 * _748) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_707 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_753 * _749) / cbModelParam._m0[34u].z) + ((((((_711 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        float _805 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_771.x + (-0.5));
        float _807 = _805 * (_771.y + (-0.5));
        float _808 = _805 * (_771.z + (-0.5));
        float _815 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_778.x + (-0.5));
        float _817 = _815 * (_778.y + (-0.5));
        float _818 = _815 * (_778.z + (-0.5));
        float _825 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_785.x + (-0.5));
        float _827 = _825 * (_785.y + (-0.5));
        float _828 = _825 * (_785.z + (-0.5));
        float _835 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_792.x + (-0.5));
        float _837 = _835 * (_792.y + (-0.5));
        float _838 = _835 * (_792.z + (-0.5));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = _806 * 0.5;
        float _843 = _816 * 0.5;
        float _844 = _826 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _859 = (dot(vec3(_500, _501, _502), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3185 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _869 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3196 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3207 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * (_871 + 1.0))) + _876) * _839;
        float _886 = _807 * 0.5;
        float _887 = _817 * 0.5;
        float _888 = _827 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_500, _501, _502), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3240 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_913 + 1.0))) + _918) * _840;
        float _928 = _808 * 0.5;
        float _929 = _818 * 0.5;
        float _930 = _828 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_500, _501, _502), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3251 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3262 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3273 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * (_955 + 1.0))) + _960) * _841;
        _977 = _808;
        _978 = _807;
        _979 = _806;
        _980 = _818;
        _981 = _817;
        _982 = _816;
        _983 = _828;
        _984 = _827;
        _985 = _826;
        _986 = _841;
        _987 = _840;
        _988 = _839;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
    }
    else
    {
        _977 = _391;
        _978 = _391;
        _979 = _391;
        _980 = _391;
        _981 = _391;
        _982 = _391;
        _983 = _391;
        _984 = _391;
        _985 = _391;
        _986 = _391;
        _987 = _391;
        _988 = _391;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1017 = fma(_670, cbModelParam._m0[30u].z, fma(_666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _662));
        float _1021 = fma(_670, cbModelParam._m0[31u].z, fma(_666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _662));
        float _1025 = fma(_670, cbModelParam._m0[32u].z, fma(_666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _662));
        float _1048 = _662 + _500;
        float _1049 = _666 + _501;
        float _1050 = _670 + _502;
        float _1060 = fma(_1050, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048)) - _1017;
        float _1061 = fma(_1050, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048)) - _1021;
        float _1062 = fma(_1050, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048)) - _1025;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1017 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1021 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[35u].z) + ((((((_1025 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1116 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1083.x + (-0.5));
        float _1118 = _1116 * (_1083.y + (-0.5));
        float _1119 = _1116 * (_1083.z + (-0.5));
        float _1126 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1090.x + (-0.5));
        float _1128 = _1126 * (_1090.y + (-0.5));
        float _1129 = _1126 * (_1090.z + (-0.5));
        float _1136 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1097.x + (-0.5));
        float _1138 = _1136 * (_1097.y + (-0.5));
        float _1139 = _1136 * (_1097.z + (-0.5));
        float _1146 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1104.x + (-0.5));
        float _1148 = _1146 * (_1104.y + (-0.5));
        float _1149 = _1146 * (_1104.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_500, _501, _502), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3336 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_1180 + 1.0))) + _1185) * _1150;
        float _1195 = _1118 * 0.5;
        float _1196 = _1128 * 0.5;
        float _1197 = _1138 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_500, _501, _502), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3369 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_1222 + 1.0))) + _1227) * _1151;
        float _1237 = _1119 * 0.5;
        float _1238 = _1129 * 0.5;
        float _1239 = _1139 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_500, _501, _502), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3402 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_1264 + 1.0))) + _1269) * _1152;
        _1286 = _1119;
        _1287 = _1118;
        _1288 = _1117;
        _1289 = _1129;
        _1290 = _1128;
        _1291 = _1127;
        _1292 = _1139;
        _1293 = _1138;
        _1294 = _1137;
        _1295 = _1152;
        _1296 = _1151;
        _1297 = _1150;
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _391;
        _1287 = _391;
        _1288 = _391;
        _1289 = _391;
        _1290 = _391;
        _1291 = _391;
        _1292 = _391;
        _1293 = _391;
        _1294 = _391;
        _1295 = _391;
        _1296 = _391;
        _1297 = _391;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _989)) + _989;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _990)) + _990;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1333 = fma(_1312, cbSceneParam._m0[89u].z, fma(_1311, cbSceneParam._m0[89u].y, _1310 * cbSceneParam._m0[89u].x));
    float _1336 = fma(_1312, cbSceneParam._m0[90u].z, fma(_1311, cbSceneParam._m0[90u].y, _1310 * cbSceneParam._m0[90u].x));
    float _1339 = fma(_1312, cbSceneParam._m0[91u].z, fma(_1311, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1310));
    float _1354 = _609 * 0.5;
    float _1355 = _610 * 0.5;
    float _1356 = _611 * 0.5;
    float _1357 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1360 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1363 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1397;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1370 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_977, _980, _983, _986));
        float _1374 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_978, _981, _984, _987));
        float _1378 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_979, _982, _985, _988));
        float _1385 = dot(vec4(cbModelParam._m0[39u]), vec4(_1354, _1355, _1356, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1385) ? 0.0 : (isnan(0.0) ? _1385 : max(0.0, _1385))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1408;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1399 = dot(vec4(cbModelParam._m0[40u]), vec4(_1354, _1355, _1356, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1399) ? 0.0 : (isnan(0.0) ? _1399 : max(0.0, _1399))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1412 = (_1408 * cbModelParam._m0[1u].x) + (_1397 * (1.0 - cbModelParam._m0[1u].x));
    float _1422 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1422 : min(cbModelParam._m0[25u].z, _1422));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1472 = fma(_670, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662)) + cbModelParam._m0[13u].w;
        float _1476 = fma(_670, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662)) + cbModelParam._m0[14u].w;
        float _1480 = fma(_670, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662)) + cbModelParam._m0[15u].w;
        float _1483 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1486 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1489 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1517;
        if (_1483 > 0.0)
        {
            _1517 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1517 = frontier_phi_26_24_ladder;
        }
        float _1866;
        if (_1486 > 0.0)
        {
            _1866 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1866 = frontier_phi_35_31_ladder;
        }
        float _2182;
        if (_1489 > 0.0)
        {
            _2182 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2182 = frontier_phi_49_42_ladder;
        }
        float _2184 = isnan(_1866) ? _1517 : (isnan(_1517) ? _1866 : min(_1517, _1866));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1483) + _1472;
        float _2190 = (_2185 * _1486) + _1476;
        float _2191 = (_2185 * _1489) + _1480;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2192;
        float _2195 = _2192 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2191 > _2195) || ((_2191 < _2193) || ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 < _2193) || (_2189 > _2195))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1423);
            frontier_phi_25_49_ladder = _2317.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2317.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2317.x * cbModelParam._m0[1u].y;
        }
        _1505 = frontier_phi_25_49_ladder_2;
        _1507 = frontier_phi_25_49_ladder_1;
        _1509 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1423);
        _1505 = _1493.x * cbModelParam._m0[1u].y;
        _1507 = _1493.y * cbModelParam._m0[1u].y;
        _1509 = _1493.z * cbModelParam._m0[1u].y;
    }
    float _1513 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1513 : min(cbModelParam._m0[25u].w, _1513));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1569 = fma(_670, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662)) + cbModelParam._m0[21u].w;
        float _1573 = fma(_670, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662)) + cbModelParam._m0[22u].w;
        float _1577 = fma(_670, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662)) + cbModelParam._m0[23u].w;
        float _1580 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1583 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1586 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1871;
        if (_1580 > 0.0)
        {
            _1871 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1871 = frontier_phi_37_33_ladder;
        }
        float _2208;
        if (_1583 > 0.0)
        {
            _2208 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2208 = frontier_phi_51_44_ladder;
        }
        float _2377;
        if (_1586 > 0.0)
        {
            _2377 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2377 = frontier_phi_65_60_ladder;
        }
        float _2379 = isnan(_2208) ? _1871 : (isnan(_1871) ? _2208 : min(_1871, _2208));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1580) + _1569;
        float _2385 = (_2380 * _1583) + _1573;
        float _2386 = (_2380 * _1586) + _1577;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1514);
            frontier_phi_34_65_ladder = _2619.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2619.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2619.z * cbModelParam._m0[1u].z;
        }
        _1605 = frontier_phi_34_65_ladder_1;
        _1607 = frontier_phi_34_65_ladder;
        _1609 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1514);
        _1605 = _1589.x * cbModelParam._m0[1u].z;
        _1607 = _1589.y * cbModelParam._m0[1u].z;
        _1609 = _1589.z * cbModelParam._m0[1u].z;
    }
    float _1621 = ((((1.0 - _630) * ((_617 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_630 * _617)) * _601;
    float _1622 = _1621 * ((cbModelParam._m0[1u].w * (_1605 - _1505)) + _1505);
    float _1623 = _1621 * ((cbModelParam._m0[1u].w * (_1607 - _1507)) + _1507);
    float _1624 = _1621 * ((cbModelParam._m0[1u].w * (_1609 - _1509)) + _1509);
    float _1627 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, _1622 * cbSceneParam._m0[91u].x));
    uvec4 _1643 = floatBitsToUint(cbInstanceData._m0[_576 + 5u]);
    uint _1645 = _1643.x * 14u;
    uint _1646 = _1645 + 13u;
    float _1651 = _601 + (-1.0);
    float _1654 = (cbLight._m0[_1646].x * _1651) + 1.0;
    float _1655 = (cbLight._m0[_1646].y * _1651) + 1.0;
    uint _1656 = _1645 + 5u;
    float _1662 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1666 = _1645 + 4u;
    float _1673 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
    uint _1677 = _1645 | 1u;
    float _1688 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_500, _501, _502));
    float _1691 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_500, _501, _502));
    float _3538 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _3549 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1696 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.3183098733425140380859375;
    float _1698 = (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.3183098733425140380859375;
    float _1705 = ((cbLight._m0[_1656].x * _1662) * _1698) + ((cbLight._m0[_1666].x * _1673) * _1696);
    float _1706 = ((_1662 * cbLight._m0[_1656].y) * _1698) + ((_1673 * cbLight._m0[_1666].y) * _1696);
    float _1707 = ((_1662 * cbLight._m0[_1656].z) * _1698) + ((_1673 * cbLight._m0[_1666].z) * _1696);
    uint _1709 = _1645 + 8u;
    float _1722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _503) * 0.949999988079071044921875);
    float _1723 = _1722 * _1722;
    float _1724 = cbLight._m0[_1645].x + _527;
    float _1725 = cbLight._m0[_1645].y + _528;
    float _1726 = cbLight._m0[_1645].z + _529;
    float _1730 = inversesqrt(dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726)));
    float _1731 = _1730 * _1724;
    float _1732 = _1730 * _1725;
    float _1733 = _1730 * _1726;
    float _1734 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1645].xyz));
    float _3560 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1738 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _1739 = dot(vec3(_500, _501, _502), vec3(_1731, _1732, _1733));
    float _3582 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _1743 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1731, _1732, _1733));
    float _3593 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1747 = _1723 * _1723;
    float _1751 = ((_1742 * _1742) * (_1747 + (-1.0))) + 1.0;
    float _1762 = (exp2(log2(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1763 = 1.0 - _1723;
    float _1774 = (0.5 / (((_1738 * ((_1737 * _1763) + _1723)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1763) + _1723) * _1737))) * _1737;
    float _3604 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1776 = (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1747 / ((_1751 * _1751) * 3.141590118408203125));
    uint _1787 = _1645 + 9u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _503) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1677].x + _527;
    float _1801 = cbLight._m0[_1677].y + _528;
    float _1802 = cbLight._m0[_1677].z + _529;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1677].xyz));
    float _3615 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _1814 = dot(vec3(_500, _501, _502), vec3(_1807, _1808, _1809));
    float _3626 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1807, _1808, _1809));
    float _3637 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1799 * _1799;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1835 = (exp2(log2(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1836 = 1.0 - _1799;
    float _1846 = (0.5 / (((_1738 * ((_1813 * _1836) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1836) + _1799) * _1813))) * _1813;
    float _3648 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    float _1858 = (((_1835 * cbLight._m0[_1787].x) * _1848) * _1662) + (((_1762 * cbLight._m0[_1709].x) * _1776) * _1673);
    float _1859 = (((_1835 * cbLight._m0[_1787].y) * _1848) * _1662) + (((_1762 * cbLight._m0[_1709].y) * _1776) * _1673);
    float _1860 = (((_1835 * cbLight._m0[_1787].z) * _1848) * _1662) + (((_1762 * cbLight._m0[_1709].z) * _1776) * _1673);
    float _1975;
    float _1977;
    float _1979;
    float _1981;
    float _1983;
    float _1985;
    if (_1643.y == 0u)
    {
        float _1915 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1916 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1915;
        float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1915;
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1915;
        uvec4 _1930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1931 = _1930.x;
        uint _1942 = uint((float(_1930.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _1931))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _1931)));
        float _1952 = (log2(_1918 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1953 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        uint _1956 = uint(isnan(14.0) ? _1953 : (isnan(_1953) ? 14.0 : min(_1953, 14.0)));
        uvec4 _1961 = texelFetch(g_lightClusterGridBuffer, int(((_1956 << 2u) + (_1942 << 6u)) >> 2u));
        uint _1962 = _1961.x;
        uint _1963 = _1930.z;
        float _2069;
        float _2071;
        float _2073;
        float _2075;
        float _2077;
        float _2079;
        if (((((1u << ((_1963 >> 4u) & 15u)) + 4294967295u) & _1962) == 0u) || ((_1963 & 240u) == 0u))
        {
            _2069 = 0.0;
            _2071 = 0.0;
            _2073 = 0.0;
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
        }
        else
        {
            float _2070;
            float _2072;
            float _2074;
            float _2076;
            float _2078;
            float _2080;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            uint _2251 = 0u;
            uint _2260;
            bool _2261;
            for (;;)
            {
                _2260 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2251 << 2u)) >> 2u)).x;
                _2261 = _2260 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2261)
                {
                    frontier_phi_62_pred = _2246;
                    frontier_phi_62_pred_1 = _2245;
                    frontier_phi_62_pred_2 = _2247;
                    frontier_phi_62_pred_3 = _2250;
                    frontier_phi_62_pred_4 = _2249;
                    frontier_phi_62_pred_5 = _2248;
                }
                else
                {
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    uint _2426;
                    _2420 = _2245;
                    _2421 = _2246;
                    _2422 = _2247;
                    _2423 = _2248;
                    _2424 = _2249;
                    _2425 = _2250;
                    _2426 = _2260;
                    float _2326;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    for (;;)
                    {
                        uint _2430 = uint(findLSB(_2426)) + (_2251 << 5u);
                        uint _2427 = (_2426 + 4294967295u) & _2426;
                        uint _2432 = _2430 * 48u;
                        vec4 _2446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2432)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 3u)).x));
                        uint _2452 = (_2430 * 48u) + 4u;
                        vec4 _2465 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2452)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 3u)).x));
                        uint _2471 = (_2430 * 48u) + 8u;
                        vec3 _2482 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2471)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 2u)).x));
                        float _2486 = _2446.x - _1916;
                        float _2487 = _2446.y - _1917;
                        float _2488 = _2446.z - _1918;
                        float _2489 = dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488));
                        float _2492 = inversesqrt(_2489);
                        float _2493 = _2492 * _2486;
                        float _2494 = _2492 * _2487;
                        float _2495 = _2492 * _2488;
                        float _2496 = dot(vec3(_557, _560, _563), vec3(_2493, _2494, _2495));
                        float _2501 = 1.0 - (_2489 * _2446.w);
                        float _3669 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _2502 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
                        float _2503 = sqrt(_2489) * _2465.w;
                        float _2506 = 1.39999997615814208984375 / (_2503 + 1.39999997615814208984375);
                        float _2507 = _2506 * _2506;
                        float _2510 = ((1.0 - _2507) * _2496) + _2507;
                        float _2513 = _2503 * _2503;
                        float _2517 = ((isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0))) * _2502) / ((_2513 * 0.699999988079071044921875) + 1.0);
                        float _2521 = (-0.0) - _1916;
                        float _2522 = (-0.0) - _1917;
                        float _2523 = (-0.0) - _1918;
                        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
                        float _2528 = _2527 * _2521;
                        float _2529 = _2527 * _2522;
                        float _2530 = _2527 * _2523;
                        float _2538 = exp2(log2(1.0 / ((_2513 * 3.5) + 5.0)) * 0.25);
                        float _2539 = 1.0 - _617;
                        float _2546 = sqrt(1.0 - ((1.0 - (_2539 * _2539)) * (1.0 - (_2538 * _2538))));
                        float _2547 = _2546 * _2546;
                        float _2548 = _2547 * _2547;
                        float _2549 = _2528 + _2493;
                        float _2550 = _2529 + _2494;
                        float _2551 = _2530 + _2495;
                        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
                        float _2559 = dot(vec3(_557, _560, _563), vec3(_2528, _2529, _2530));
                        float _3685 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2562 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
                        float _2563 = dot(vec3(_557, _560, _563), vec3(_2555 * _2549, _2555 * _2550, _2555 * _2551));
                        float _3696 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
                        float _2566 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                        float _2570 = ((_2566 * _2566) * (_2548 + (-1.0))) + 1.0;
                        float _2571 = _2506 * _2547;
                        float _2572 = _2571 * _2571;
                        float _2575 = ((1.0 - _2572) * _2496) + _2572;
                        float _3707 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2576 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2577 = 1.0 - _2547;
                        float _2587 = (0.5 / (((_2576 * ((_2562 * _2577) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2576 * _2577) + _2547) * _2562))) * _2576;
                        float _3718 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                        float _2598 = (((_2548 * 3.1415927410125732421875) * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) / ((_2570 * _2570) * ((_2513 * 2.1991131305694580078125) + 3.141590118408203125))) * _2502;
                        _2329 = (_2517 * _2465.x) + _2423;
                        _2330 = (_2517 * _2465.y) + _2424;
                        _2331 = (_2517 * _2465.z) + _2425;
                        _2326 = (_2598 * _2482.x) + _2420;
                        _2327 = (_2598 * _2482.y) + _2421;
                        _2328 = (_2598 * _2482.z) + _2422;
                        if (_2427 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2420 = _2326;
                            _2421 = _2327;
                            _2422 = _2328;
                            _2423 = _2329;
                            _2424 = _2330;
                            _2425 = _2331;
                            _2426 = _2427;
                        }
                    }
                    frontier_phi_62_pred = _2327;
                    frontier_phi_62_pred_1 = _2326;
                    frontier_phi_62_pred_2 = _2328;
                    frontier_phi_62_pred_3 = _2331;
                    frontier_phi_62_pred_4 = _2330;
                    frontier_phi_62_pred_5 = _2329;
                }
                _2072 = frontier_phi_62_pred;
                _2070 = frontier_phi_62_pred_1;
                _2074 = frontier_phi_62_pred_2;
                _2080 = frontier_phi_62_pred_3;
                _2078 = frontier_phi_62_pred_4;
                _2076 = frontier_phi_62_pred_5;
                uint _2252 = _2251 + 1u;
                if (_2252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2245 = _2070;
                    _2246 = _2072;
                    _2247 = _2074;
                    _2248 = _2076;
                    _2249 = _2078;
                    _2250 = _2080;
                    _2251 = _2252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2069 = _2070;
            _2071 = _2072;
            _2073 = _2074;
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
        }
        uvec4 _2083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2084 = _2083.z;
        uint _2086 = (_2084 >> 8u) & 15u;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        if (((4294967295u << _2086) & _1962) == 0u)
        {
            _2213 = _2069;
            _2215 = _2071;
            _2217 = _2073;
            _2219 = _2075;
            _2221 = _2077;
            _2223 = _2079;
        }
        else
        {
            float _2238 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
            float _2239 = _2238 * _1916;
            float _2240 = _2238 * _1917;
            float _2241 = _2238 * _1918;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2086 < ((_2084 >> 12u) & 15u))
            {
                float _2214;
                float _2216;
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2403 = _2069;
                float _2404 = _2071;
                float _2405 = _2073;
                float _2406 = _2075;
                float _2407 = _2077;
                float _2408 = _2079;
                uint _2409 = _2086;
                uint _2418;
                bool _2419;
                for (;;)
                {
                    _2418 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2409 << 2u)) >> 2u)).x;
                    _2419 = _2418 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2419)
                    {
                        frontier_phi_71_pred = _2404;
                        frontier_phi_71_pred_1 = _2403;
                        frontier_phi_71_pred_2 = _2408;
                        frontier_phi_71_pred_3 = _2407;
                        frontier_phi_71_pred_4 = _2406;
                        frontier_phi_71_pred_5 = _2405;
                    }
                    else
                    {
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2627;
                        float _2628;
                        float _2629;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2637 = _2403;
                        float _2638 = _2404;
                        float _2639 = _2405;
                        float _2640 = _2406;
                        float _2641 = _2407;
                        float _2642 = _2408;
                        uint _2643 = _2418;
                        uint _2644;
                        vec4 _2669;
                        float _2670;
                        vec4 _2685;
                        vec3 _2697;
                        vec4 _2712;
                        vec4 _2727;
                        float _2773;
                        bool _2774;
                        for (;;)
                        {
                            uint _2654 = ((_2409 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2643));
                            _2644 = (_2643 + 4294967295u) & _2643;
                            uint _2656 = _2654 * 40u;
                            _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            _2670 = _2669.w;
                            uint _2672 = (_2654 * 40u) + 4u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            uint _2687 = (_2654 * 40u) + 8u;
                            _2697 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x));
                            uint _2699 = (_2654 * 40u) + 16u;
                            _2712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 3u)).x));
                            uint _2714 = (_2654 * 40u) + 20u;
                            _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            uint _2729 = (_2654 * 40u) + 24u;
                            vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 3u)).x));
                            uint _2748 = (_2654 * 40u) + 28u;
                            vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            _2773 = fma(_1918, _2761.z, fma(_1917, _2761.y, _2761.x * _1916)) + _2761.w;
                            _2774 = !((fma(_1918, _2742.z, fma(_1917, _2742.y, _2742.x * _1916)) + _2742.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2774)
                            {
                                float _2801 = _2669.x - _1916;
                                float _2802 = _2669.y - _1917;
                                float _2803 = _2669.z - _1918;
                                float _2804 = dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803));
                                float _2807 = inversesqrt(_2804);
                                float _2808 = _2807 * _2801;
                                float _2809 = _2807 * _2802;
                                float _2810 = _2807 * _2803;
                                float _2814 = 1.0 - (_2804 / (_2670 * _2670));
                                float _3729 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                                float _2815 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2819 = sqrt(_2804) * _2685.w;
                                float _2821 = 1.39999997615814208984375 / (_2819 + 1.39999997615814208984375);
                                float _2822 = _2821 * _2821;
                                float _2825 = ((1.0 - _2822) * dot(vec3(_2808, _2809, _2810), vec3(_557, _560, _563))) + _2822;
                                float _2828 = _2819 * _2819;
                                float _2832 = (fma(_1918, _2712.z, fma(_1917, _2712.y, _2712.x * _1916)) + _2712.w) / _2773;
                                float _2833 = (fma(_1918, _2727.z, fma(_1917, _2727.y, _2727.x * _1916)) + _2727.w) / _2773;
                                float _2837 = 1.0 - dot(vec2(_2832, _2833), vec2(_2832, _2833));
                                float _3745 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                                float _2838 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2839 = _2838 * (((isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0))) * _2815) / ((_2828 * 0.699999988079071044921875) + 1.0));
                                float _2851 = exp2(log2(1.0 / ((_2828 * 3.5) + 5.0)) * 0.25);
                                float _2852 = 1.0 - _617;
                                float _2859 = sqrt(1.0 - ((1.0 - (_2852 * _2852)) * (1.0 - (_2851 * _2851))));
                                float _2860 = _2859 * _2859;
                                float _2861 = _2860 * _2860;
                                float _2862 = _2808 - _2239;
                                float _2863 = _2809 - _2240;
                                float _2864 = _2810 - _2241;
                                float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                                float _2872 = dot(vec3(_557, _560, _563), vec3((-0.0) - _2239, (-0.0) - _2240, (-0.0) - _2241));
                                float _3756 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                                float _2875 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
                                float _2876 = dot(vec3(_557, _560, _563), vec3(_2868 * _2862, _2868 * _2863, _2868 * _2864));
                                float _3767 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                                float _2879 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2883 = ((_2879 * _2879) * (_2861 + (-1.0))) + 1.0;
                                float _2884 = _2821 * _2860;
                                float _2885 = _2884 * _2884;
                                float _2891 = ((1.0 - _2885) * dot(vec3(_557, _560, _563), vec3(_2808, _2809, _2810))) + _2885;
                                float _3778 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                                float _2892 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
                                float _2893 = 1.0 - _2860;
                                float _2903 = (0.5 / (((_2892 * ((_2875 * _2893) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2892 * _2893) + _2860) * _2875))) * _2892;
                                float _3789 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2913 = (_2838 * _2815) * (((_2861 * 3.1415927410125732421875) * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) / ((_2883 * _2883) * ((_2828 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2913 * _2697.y;
                                frontier_phi_77_pred_1 = _2913 * _2697.x;
                                frontier_phi_77_pred_2 = _2839 * _2685.z;
                                frontier_phi_77_pred_3 = _2839 * _2685.y;
                                frontier_phi_77_pred_4 = _2839 * _2685.x;
                                frontier_phi_77_pred_5 = _2913 * _2697.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2918 = frontier_phi_77_pred;
                            _2917 = frontier_phi_77_pred_1;
                            _2922 = frontier_phi_77_pred_2;
                            _2921 = frontier_phi_77_pred_3;
                            _2920 = frontier_phi_77_pred_4;
                            _2919 = frontier_phi_77_pred_5;
                            _2627 = _2920 + _2640;
                            _2628 = _2921 + _2641;
                            _2629 = _2922 + _2642;
                            _2624 = _2917 + _2637;
                            _2625 = _2918 + _2638;
                            _2626 = _2919 + _2639;
                            if (_2644 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2628;
                                _2642 = _2629;
                                _2643 = _2644;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2625;
                        frontier_phi_71_pred_1 = _2624;
                        frontier_phi_71_pred_2 = _2629;
                        frontier_phi_71_pred_3 = _2628;
                        frontier_phi_71_pred_4 = _2627;
                        frontier_phi_71_pred_5 = _2626;
                    }
                    _2216 = frontier_phi_71_pred;
                    _2214 = frontier_phi_71_pred_1;
                    _2224 = frontier_phi_71_pred_2;
                    _2222 = frontier_phi_71_pred_3;
                    _2220 = frontier_phi_71_pred_4;
                    _2218 = frontier_phi_71_pred_5;
                    uint _2410 = _2409 + 1u;
                    if (_2410 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2403 = _2214;
                        _2404 = _2216;
                        _2405 = _2218;
                        _2406 = _2220;
                        _2407 = _2222;
                        _2408 = _2224;
                        _2409 = _2410;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2224;
                frontier_phi_53_54_ladder_1 = _2220;
                frontier_phi_53_54_ladder_2 = _2218;
                frontier_phi_53_54_ladder_3 = _2216;
                frontier_phi_53_54_ladder_4 = _2214;
                frontier_phi_53_54_ladder_5 = _2222;
            }
            else
            {
                frontier_phi_53_54_ladder = _2079;
                frontier_phi_53_54_ladder_1 = _2075;
                frontier_phi_53_54_ladder_2 = _2073;
                frontier_phi_53_54_ladder_3 = _2071;
                frontier_phi_53_54_ladder_4 = _2069;
                frontier_phi_53_54_ladder_5 = _2077;
            }
            _2213 = frontier_phi_53_54_ladder_4;
            _2215 = frontier_phi_53_54_ladder_3;
            _2217 = frontier_phi_53_54_ladder_2;
            _2219 = frontier_phi_53_54_ladder_1;
            _2221 = frontier_phi_53_54_ladder_5;
            _2223 = frontier_phi_53_54_ladder;
        }
        float _2228 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _1975 = (_2228 * _2219) + _1705;
        _1977 = (_2228 * _2221) + _1706;
        _1979 = (_2228 * _2223) + _1707;
        _1981 = ((_2213 * 0.039999999105930328369140625) * _2228) + _1858;
        _1983 = ((_2215 * 0.039999999105930328369140625) * _2228) + _1859;
        _1985 = ((_2217 * 0.039999999105930328369140625) * _2228) + _1860;
    }
    else
    {
        _1975 = _1705;
        _1977 = _1706;
        _1979 = _1707;
        _1981 = _1858;
        _1983 = _1859;
        _1985 = _1860;
    }
    uint _1991 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _3805 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3816 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3827 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _2016 = (((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1975 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _601))) + ((_1981 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1412)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_1991].x * (_449 - (_449 * _282)));
    float _2018 = ((cbInstanceData._m0[_1991].y * (_450 - (_450 * _282))) + ((_1983 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1412)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1977 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _601)));
    float _2020 = ((cbInstanceData._m0[_1991].z * (_451 - (_451 * _282))) + ((_1985 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1412)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1979 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _601)));
    uint _2024 = _576 + 6u;
    float _2032 = _535 / cbSceneParam._m0[86u].x;
    float _2033 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2047 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2032, _2033, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2049 = _2047.x;
    float _2050 = _2047.y;
    float _2051 = _2047.z;
    float _2052 = _2047.w;
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2094 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2095 = _2094 / _522;
        float _2106 = _2095 * _255;
        float _2107 = _256 * _2095;
        float _2108 = (-0.0) - _2107;
        float _2109 = _2095 * _257;
        float _2111 = (cbSceneParam._m0[77u].w * _2108) / _2094;
        float _2112 = _2111 + cbSceneParam._m0[79u].w;
        float _2113 = cbSceneParam._m0[79u].w - _2107;
        float _2119 = sqrt(((_2106 * _2106) + (_2107 * _2107)) + (_2109 * _2109));
        float _2122 = (1.0 - (cbSceneParam._m0[77u].w / _2094)) * _2119;
        float _2128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2339;
        if (abs((_2108 - _2111) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2339 = ((((_2112 > 0.0) ? exp2(_2128 * _2112) : (2.0 - exp2(_2130 * _2112))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2122;
        }
        else
        {
            float _2274 = 1.0 / cbSceneParam._m0[80u].x;
            float _2275 = isnan(_2113) ? _2112 : (isnan(_2112) ? _2113 : max(_2112, _2113));
            float _2276 = isnan(_2113) ? _2112 : (isnan(_2112) ? _2113 : min(_2112, _2113));
            float _2285 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : min(_2275, 0.0));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            _2339 = ((abs(_2119 / _2108) * cbSceneParam._m0[80u].y) * ((((_2285 - _2286) * 2.0) - ((exp2(_2128 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)))) - exp2(_2128 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))))) * _2274)) - ((exp2(_2130 * _2285) - exp2(_2130 * _2286)) * _2274))) + (_2122 * cbSceneParam._m0[80u].z);
        }
        vec4 _2341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2032, _2033, 1.0), 0.0);
        float _2350 = exp2((_2339 * (-1.44269502162933349609375)) * (1.0 - _2341.w));
        float _2351 = log2(_2350);
        float _2367 = log2(_2052);
        _2132 = (exp2(_2367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].x)) * _2341.x) / cbSceneParam._m0[78u].x)) + _2049;
        _2134 = (exp2(_2367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].y)) * _2341.y) / cbSceneParam._m0[78u].y)) + _2050;
        _2136 = (exp2(_2367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].z)) * _2341.z) / cbSceneParam._m0[78u].z)) + _2051;
        _2138 = _2350 * _2052;
    }
    else
    {
        _2132 = _2049;
        _2134 = _2050;
        _2136 = _2051;
        _2138 = _2052;
    }
    float _2150 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2151 = _2150 == 3.0;
    float _2152 = log2(_2138);
    float _2159 = exp2(_2152 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)));
    float _2160 = exp2(_2152 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)));
    float _2161 = exp2(_2152 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)));
    float _2170 = (_2150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2170 * (_2151 ? _2159 : (_2159 + (cbSceneParam._m0[72u].w * _2132)));
    SV_Target.y = _2170 * (_2151 ? _2160 : (_2160 + (cbSceneParam._m0[72u].w * _2134)));
    SV_Target.z = _2170 * (_2151 ? _2161 : (_2161 + (cbSceneParam._m0[72u].w * _2136)));
    SV_Target.w = cbInstanceData._m0[_2024].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2024].w;
}


