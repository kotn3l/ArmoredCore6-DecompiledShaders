#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1171;
float _3605;
float _3606;
float _3607;
float _3608;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    vec4 _617 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _621 = _617.z;
    float _624 = (_617.x * 2.0) + (-1.0);
    float _625 = (_617.y * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _3647 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))));
    float _632 = _621 * _294;
    float _639 = (cbMtdParam._m0[15u].w * ((_333 - _632) + ((_621 - _333) * _294))) + _632;
    float _643 = (cbMtdParam._m0[16u].x * _361) + _624;
    float _644 = (cbMtdParam._m0[16u].x * _362) + _625;
    float _647 = fma(_631, _203, fma(_644, _210, _643 * _196));
    float _650 = fma(_631, _204, fma(_644, _211, _643 * _197));
    float _653 = fma(_631, _205, fma(_644, _212, _643 * _198));
    float _657 = inversesqrt(dot(vec3(_647, _650, _653), vec3(_647, _650, _653)));
    float _658 = _657 * _647;
    float _659 = _657 * _650;
    float _660 = _657 * _653;
    float _3658 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _661 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3680 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3691 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _680 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _684 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _685 = _267 * _684;
    float _686 = _268 * _684;
    float _687 = _269 * _684;
    vec4 _692 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _694 = _692.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _852 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _858 = (cbMatDynParam._m0[5u].x * _852) + cbMatDynParam._m0[5u].y;
        float _3702 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _863 = (cbMatDynParam._m0[5u].z * _852) + cbMatDynParam._m0[5u].w;
        float _3713 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) - _859)) + _859) < ((_694 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _707 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _708 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_660, cbSceneParam._m0[5u].z, fma(_659, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _658));
    float _730 = fma(_660, cbSceneParam._m0[6u].z, fma(_659, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _658));
    float _733 = fma(_660, cbSceneParam._m0[7u].z, fma(_659, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _658));
    uint _746 = uint(roundEven(NORMAL.w)) * 13u;
    uint _748 = _746 + 9u;
    uint _749 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_749].z;
    float _3724 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    vec4 _769 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _707, cbSceneParam._m0[86u].y * _708));
    float _772 = _769.x * TEXCOORD.z;
    float _773 = dot(vec3(_658, _659, _660), vec3(_685, _686, _687));
    float _776 = _773 * 2.0;
    float _780 = (_776 * _658) - _685;
    float _781 = (_776 * _659) - _686;
    float _782 = (_776 * _660) - _687;
    float _786 = abs(dot(vec3(_685, _686, _687), vec3(_658, _659, _660)));
    float _3757 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _788 = sqrt(_661);
    float _801 = exp2((_788 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_788 * 3.0));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_841, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833));
        float _901 = fma(_841, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833));
        float _905 = fma(_841, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833));
        float _928 = _833 + _658;
        float _929 = _837 + _659;
        float _930 = _841 + _660;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_658, _659, _660), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3805 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_658, _659, _660), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3838 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_658, _659, _660), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3871 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_841, cbModelParam._m0[30u].z, fma(_837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _833));
        float _1218 = fma(_841, cbModelParam._m0[31u].z, fma(_837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _833));
        float _1222 = fma(_841, cbModelParam._m0[32u].z, fma(_837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _833));
        float _1245 = _833 + _658;
        float _1246 = _837 + _659;
        float _1247 = _841 + _660;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_658, _659, _660), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3934 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_658, _659, _660), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3967 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_658, _659, _660), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4000 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = _1171;
        _1492 = _1171;
        _1493 = _1171;
        _1494 = _1171;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1184)) + _1184;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1185)) + _1185;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _780 * 0.5;
    float _1552 = _781 * 0.5;
    float _1553 = _782 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _661);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_841, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_841, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_841, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_782, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _780));
        float _1682 = fma(_782, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _780));
        float _1685 = fma(_782, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _780));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1713 = frontier_phi_41_39_ladder;
        }
        float _1881;
        if (_1682 > 0.0)
        {
            _1881 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1881 = frontier_phi_50_46_ladder;
        }
        float _2325;
        if (_1685 > 0.0)
        {
            _2325 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2325 = frontier_phi_62_57_ladder;
        }
        float _2327 = isnan(_1881) ? _1713 : (isnan(_1713) ? _1881 : min(_1713, _1881));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1679) + _1668;
        float _2333 = (_2328 * _1682) + _1672;
        float _2334 = (_2328 * _1685) + _1676;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_40_62_ladder = _2584.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2584.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2584.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_40_62_ladder_2;
        _1703 = frontier_phi_40_62_ladder_1;
        _1705 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_780, _781, _782), _1620);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _661);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_841, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_841, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_841, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_782, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _780));
        float _1776 = fma(_782, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _780));
        float _1779 = fma(_782, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _780));
        float _1886;
        if (_1773 > 0.0)
        {
            _1886 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1886 = frontier_phi_52_48_ladder;
        }
        float _2352;
        if (_1776 > 0.0)
        {
            _2352 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2352 = frontier_phi_64_59_ladder;
        }
        float _2713;
        if (_1779 > 0.0)
        {
            _2713 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2713 = frontier_phi_76_71_ladder;
        }
        float _2715 = isnan(_2352) ? _1886 : (isnan(_1886) ? _2352 : min(_1886, _2352));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _1773) + _1762;
        float _2721 = (_2716 * _1776) + _1766;
        float _2722 = (_2716 * _1779) + _1770;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_49_76_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2859.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2859.y * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_49_76_ladder_1;
        _1800 = frontier_phi_49_76_ladder_2;
        _1802 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_780, _781, _782), _1710);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1814 = ((((1.0 - _801) * ((_788 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_801 * _788)) * _772;
    float _1815 = _1814 * ((cbModelParam._m0[1u].w * (_1798 - _1701)) + _1701);
    float _1816 = _1814 * ((cbModelParam._m0[1u].w * (_1800 - _1703)) + _1703);
    float _1817 = _1814 * ((cbModelParam._m0[1u].w * (_1802 - _1705)) + _1705);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    float _1860 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1864 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1868 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1872 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1873 = _1860 / _1872;
    float _1874 = _1864 / _1872;
    float _1875 = _1868 / _1872;
    float _2022;
    float _2023;
    float _2024;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1902 = ((uint(_1875 > cbSceneParam._m0[59u].y) + uint(_1875 > cbSceneParam._m0[59u].x)) + uint(_1875 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1903 = _1902 + 43u;
        uint _1911 = _1902 + 44u;
        uint _1919 = _1902 + 45u;
        uint _1927 = _1902 + 46u;
        float _1938 = fma(_1872, cbSceneParam._m0[_1903].w, fma(_1868, cbSceneParam._m0[_1903].z, fma(_1864, cbSceneParam._m0[_1903].y, _1860 * cbSceneParam._m0[_1903].x)));
        float _1942 = fma(_1872, cbSceneParam._m0[_1911].w, fma(_1868, cbSceneParam._m0[_1911].z, fma(_1864, cbSceneParam._m0[_1911].y, _1860 * cbSceneParam._m0[_1911].x)));
        float _1950 = fma(_1872, cbSceneParam._m0[_1927].w, fma(_1868, cbSceneParam._m0[_1927].z, fma(_1864, cbSceneParam._m0[_1927].y, _1860 * cbSceneParam._m0[_1927].x)));
        float _1955 = cbSceneParam._m0[33u].z * _1950;
        float _1957 = cbSceneParam._m0[33u].w * _1950;
        float _1960 = fma(_1872, cbSceneParam._m0[_1919].w, fma(_1868, cbSceneParam._m0[_1919].z, fma(_1864, cbSceneParam._m0[_1919].y, _1860 * cbSceneParam._m0[_1919].x))) / _1950;
        float _2008 = (cbSceneParam._m0[33u].x - sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875))) * cbSceneParam._m0[33u].y;
        float _4126 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2015 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1955 + _1938) / _1950, (_1957 + _1942) / _1950), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 + _1938) / _1950, (_1942 - _1955) / _1950), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 - _1955) / _1950, (_1942 - _1957) / _1950), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 - _1957) / _1950, (_1955 + _1942) / _1950), _1960), 0.0)).x), vec4(0.25)));
        _2022 = 1.0 - (_2015 * cbSceneParam._m0[34u].x);
        _2023 = 1.0 - (_2015 * cbSceneParam._m0[34u].y);
        _2024 = 1.0 - (_2015 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2022 = 1.0;
        _2023 = 1.0;
        _2024 = 1.0;
    }
    float _2088;
    float _2090;
    float _2092;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2076 = fma(_1872, cbSceneParam._m0[63u].w, fma(_1868, cbSceneParam._m0[63u].z, fma(_1864, cbSceneParam._m0[63u].y, _1860 * cbSceneParam._m0[63u].x)));
        float _2077 = fma(_1872, cbSceneParam._m0[60u].w, fma(_1868, cbSceneParam._m0[60u].z, fma(_1864, cbSceneParam._m0[60u].y, _1860 * cbSceneParam._m0[60u].x))) / _2076;
        float _2078 = fma(_1872, cbSceneParam._m0[61u].w, fma(_1868, cbSceneParam._m0[61u].z, fma(_1864, cbSceneParam._m0[61u].y, _1860 * cbSceneParam._m0[61u].x))) / _2076;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2077 >= cbSceneParam._m0[64u].x) && (_2078 >= cbSceneParam._m0[64u].y)) && (_2077 <= cbSceneParam._m0[64u].z)) && (_2078 <= cbSceneParam._m0[64u].w))
        {
            float _2365 = fma(_1872, cbSceneParam._m0[62u].w, fma(_1868, cbSceneParam._m0[62u].z, fma(_1864, cbSceneParam._m0[62u].y, _1860 * cbSceneParam._m0[62u].x))) / _2076;
            float _2369 = isnan(cbSceneParam._m0[41u].w) ? _2365 : (isnan(_2365) ? cbSceneParam._m0[41u].w : max(_2365, cbSceneParam._m0[41u].w));
            float _2412 = (cbSceneParam._m0[33u].x - sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875))) * cbSceneParam._m0[33u].y;
            float _4142 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
            float _2419 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2077, cbSceneParam._m0[33u].w + _2078), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2077, _2078 - cbSceneParam._m0[33u].z), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2077 - cbSceneParam._m0[33u].z, _2078 - cbSceneParam._m0[33u].w), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2077 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2078), _2369), 0.0)).x), vec4(0.25)));
            float _2423 = 1.0 - (_2419 * cbSceneParam._m0[34u].x);
            float _2424 = 1.0 - (_2419 * cbSceneParam._m0[34u].y);
            float _2425 = 1.0 - (_2419 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2425) ? _2024 : (isnan(_2024) ? _2425 : min(_2024, _2425));
            frontier_phi_61_60_ladder_1 = isnan(_2424) ? _2023 : (isnan(_2023) ? _2424 : min(_2023, _2424));
            frontier_phi_61_60_ladder_2 = isnan(_2423) ? _2022 : (isnan(_2022) ? _2423 : min(_2022, _2423));
        }
        else
        {
            frontier_phi_61_60_ladder = _2024;
            frontier_phi_61_60_ladder_1 = _2023;
            frontier_phi_61_60_ladder_2 = _2022;
        }
        _2088 = frontier_phi_61_60_ladder_2;
        _2090 = frontier_phi_61_60_ladder_1;
        _2092 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2088 = _2022;
        _2090 = _2023;
        _2092 = _2024;
    }
    uvec4 _2097 = floatBitsToUint(cbInstanceData._m0[_746 + 5u]);
    uint _2099 = _2097.x * 14u;
    uint _2100 = _2099 + 13u;
    float _2105 = _772 + (-1.0);
    float _2108 = (cbLight._m0[_2100].x * _2105) + 1.0;
    float _2109 = (cbLight._m0[_2100].y * _2105) + 1.0;
    uint _2110 = _2099 + 5u;
    float _2116 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2120 = _2099 + 4u;
    float _2129 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2133 = _2099 | 1u;
    float _2144 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_658, _659, _660));
    float _2147 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_658, _659, _660));
    float _4178 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _4189 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2152 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _2154 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.3183098733425140380859375;
    float _2161 = ((cbLight._m0[_2110].x * _2116) * _2154) + (((cbLight._m0[_2120].x * _2088) * _2129) * _2152);
    float _2162 = ((_2116 * cbLight._m0[_2110].y) * _2154) + (((cbLight._m0[_2120].y * _2090) * _2129) * _2152);
    float _2163 = ((_2116 * cbLight._m0[_2110].z) * _2154) + (((cbLight._m0[_2120].z * _2092) * _2129) * _2152);
    uint _2165 = _2099 + 8u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _661) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_2099].x + _685;
    float _2181 = cbLight._m0[_2099].y + _686;
    float _2182 = cbLight._m0[_2099].z + _687;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_2099].xyz));
    float _4200 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _2194 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2195 = dot(vec3(_658, _659, _660), vec3(_2187, _2188, _2189));
    float _4222 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2187, _2188, _2189));
    float _4233 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2179 * _2179;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2219 = 1.0 - _2179;
    float _2230 = (0.5 / (((_2194 * ((_2193 * _2219) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2219) + _2179) * _2193))) * _2193;
    float _4244 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2232 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    uint _2246 = _2099 + 9u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _661) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2133].x + _685;
    float _2260 = cbLight._m0[_2133].y + _686;
    float _2261 = cbLight._m0[_2133].z + _687;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_2133].xyz));
    float _4255 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2273 = dot(vec3(_658, _659, _660), vec3(_2266, _2267, _2268));
    float _4266 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2266, _2267, _2268));
    float _4277 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2258 * _2258;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2295 = 1.0 - _2258;
    float _2305 = (0.5 / (((_2194 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2295) + _2258) * _2272))) * _2272;
    float _4288 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    float _2317 = (((_2294 * cbLight._m0[_2246].x) * _2307) * _2116) + ((((cbLight._m0[_2165].x * _2088) * _2218) * _2232) * _2129);
    float _2318 = (((_2294 * cbLight._m0[_2246].y) * _2307) * _2116) + ((((cbLight._m0[_2165].y * _2090) * _2218) * _2232) * _2129);
    float _2319 = (((_2294 * cbLight._m0[_2246].z) * _2307) * _2116) + ((((cbLight._m0[_2165].z * _2092) * _2218) * _2232) * _2129);
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    if (_2097.y == 0u)
    {
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.x;
        uint _2449 = uint((float(_2437.y) * floor(float(uint(cbSceneParam._m0[85u].y * _708) / _2438))) + floor(float(uint(cbSceneParam._m0[85u].x * _707) / _2438)));
        float _2459 = (log2(_1875 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2460 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        uint _2463 = uint(isnan(14.0) ? _2460 : (isnan(_2460) ? 14.0 : min(_2460, 14.0)));
        uvec4 _2468 = texelFetch(g_lightClusterGridBuffer, int(((_2463 << 2u) + (_2449 << 6u)) >> 2u));
        uint _2469 = _2468.x;
        uint _2470 = _2437.z;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        if (((((1u << ((_2470 >> 4u) & 15u)) + 4294967295u) & _2469) == 0u) || ((_2470 & 240u) == 0u))
        {
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
        }
        else
        {
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2787)
                {
                    frontier_phi_87_pred = _2771;
                    frontier_phi_87_pred_1 = _2776;
                    frontier_phi_87_pred_2 = _2775;
                    frontier_phi_87_pred_3 = _2774;
                    frontier_phi_87_pred_4 = _2773;
                    frontier_phi_87_pred_5 = _2772;
                }
                else
                {
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    uint _2943;
                    _2937 = _2771;
                    _2938 = _2772;
                    _2939 = _2773;
                    _2940 = _2774;
                    _2941 = _2775;
                    _2942 = _2776;
                    _2943 = _2786;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    for (;;)
                    {
                        uint _2947 = uint(findLSB(_2943)) + (_2777 << 5u);
                        uint _2944 = (_2943 + 4294967295u) & _2943;
                        uint _2949 = _2947 * 48u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2969 = (_2947 * 48u) + 4u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2988 = (_2947 * 48u) + 8u;
                        vec3 _2999 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x));
                        float _3003 = _2963.x - _1873;
                        float _3004 = _2963.y - _1874;
                        float _3005 = _2963.z - _1875;
                        float _3006 = dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005));
                        float _3009 = inversesqrt(_3006);
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3013 = dot(vec3(_727, _730, _733), vec3(_3010, _3011, _3012));
                        float _3018 = 1.0 - (_3006 * _2963.w);
                        float _4309 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3020 = sqrt(_3006) * _2982.w;
                        float _3023 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _3013) + _3024;
                        float _3030 = _3020 * _3020;
                        float _3034 = ((isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))) * _3019) / ((_3030 * 0.699999988079071044921875) + 1.0);
                        float _3038 = (-0.0) - _1873;
                        float _3039 = (-0.0) - _1874;
                        float _3040 = (-0.0) - _1875;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3054 = exp2(log2(1.0 / ((_3030 * 3.5) + 5.0)) * 0.25);
                        float _3055 = 1.0 - _788;
                        float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                        float _3063 = _3062 * _3062;
                        float _3064 = _3063 * _3063;
                        float _3065 = _3045 + _3010;
                        float _3066 = _3046 + _3011;
                        float _3067 = _3047 + _3012;
                        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                        float _3075 = dot(vec3(_727, _730, _733), vec3(_3045, _3046, _3047));
                        float _4325 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3079 = dot(vec3(_727, _730, _733), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                        float _4336 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                        float _3087 = _3023 * _3063;
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3013) + _3088;
                        float _4347 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3093 = 1.0 - _3063;
                        float _3103 = (0.5 / (((_3092 * ((_3078 * _3093) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3063) * _3078))) * _3092;
                        float _4358 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3114 = (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3086 * _3086) * ((_3030 * 2.1991131305694580078125) + 3.141590118408203125))) * _3019;
                        _2867 = (_3034 * _2982.x) + _2940;
                        _2868 = (_3034 * _2982.y) + _2941;
                        _2869 = (_3034 * _2982.z) + _2942;
                        _2864 = (_3114 * _2999.x) + _2937;
                        _2865 = (_3114 * _2999.y) + _2938;
                        _2866 = (_3114 * _2999.z) + _2939;
                        if (_2944 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2869;
                            _2943 = _2944;
                        }
                    }
                    frontier_phi_87_pred = _2864;
                    frontier_phi_87_pred_1 = _2869;
                    frontier_phi_87_pred_2 = _2868;
                    frontier_phi_87_pred_3 = _2867;
                    frontier_phi_87_pred_4 = _2866;
                    frontier_phi_87_pred_5 = _2865;
                }
                _2594 = frontier_phi_87_pred;
                _2604 = frontier_phi_87_pred_1;
                _2602 = frontier_phi_87_pred_2;
                _2600 = frontier_phi_87_pred_3;
                _2598 = frontier_phi_87_pred_4;
                _2596 = frontier_phi_87_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2594;
                    _2772 = _2596;
                    _2773 = _2598;
                    _2774 = _2600;
                    _2775 = _2602;
                    _2776 = _2604;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
        }
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.z;
        uint _2610 = (_2608 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2610) & _2469) == 0u)
        {
            _2739 = _2593;
            _2741 = _2595;
            _2743 = _2597;
            _2745 = _2599;
            _2747 = _2601;
            _2749 = _2603;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
            float _2765 = _2764 * _1873;
            float _2766 = _2764 * _1874;
            float _2767 = _2764 * _1875;
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2610 < ((_2608 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2920 = _2593;
                float _2921 = _2595;
                float _2922 = _2597;
                float _2923 = _2599;
                float _2924 = _2601;
                float _2925 = _2603;
                uint _2926 = _2610;
                uint _2935;
                bool _2936;
                for (;;)
                {
                    _2935 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                    _2936 = _2935 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2936)
                    {
                        frontier_phi_98_pred = _2925;
                        frontier_phi_98_pred_1 = _2924;
                        frontier_phi_98_pred_2 = _2923;
                        frontier_phi_98_pred_3 = _2922;
                        frontier_phi_98_pred_4 = _2921;
                        frontier_phi_98_pred_5 = _2920;
                    }
                    else
                    {
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        float _3144 = _2923;
                        float _3145 = _2924;
                        float _3146 = _2925;
                        uint _3147 = _2935;
                        uint _3148;
                        vec4 _3173;
                        float _3174;
                        vec4 _3189;
                        vec3 _3201;
                        vec4 _3216;
                        vec4 _3231;
                        float _3277;
                        bool _3278;
                        for (;;)
                        {
                            uint _3158 = ((_2926 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3147));
                            _3148 = (_3147 + 4294967295u) & _3147;
                            uint _3160 = _3158 * 40u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3174 = _3173.w;
                            uint _3176 = (_3158 * 40u) + 4u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3158 * 40u) + 8u;
                            _3201 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x));
                            uint _3203 = (_3158 * 40u) + 16u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3158 * 40u) + 20u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3233 = (_3158 * 40u) + 24u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3252 = (_3158 * 40u) + 28u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3277 = fma(_1875, _3265.z, fma(_1874, _3265.y, _3265.x * _1873)) + _3265.w;
                            _3278 = !((fma(_1875, _3246.z, fma(_1874, _3246.y, _3246.x * _1873)) + _3246.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3278)
                            {
                                float _3305 = _3173.x - _1873;
                                float _3306 = _3173.y - _1874;
                                float _3307 = _3173.z - _1875;
                                float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                                float _3311 = inversesqrt(_3308);
                                float _3312 = _3311 * _3305;
                                float _3313 = _3311 * _3306;
                                float _3314 = _3311 * _3307;
                                float _3318 = 1.0 - (_3308 / (_3174 * _3174));
                                float _4369 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3323 = sqrt(_3308) * _3189.w;
                                float _3325 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                                float _3326 = _3325 * _3325;
                                float _3329 = ((1.0 - _3326) * dot(vec3(_3312, _3313, _3314), vec3(_727, _730, _733))) + _3326;
                                float _3332 = _3323 * _3323;
                                float _3336 = (fma(_1875, _3216.z, fma(_1874, _3216.y, _3216.x * _1873)) + _3216.w) / _3277;
                                float _3337 = (fma(_1875, _3231.z, fma(_1874, _3231.y, _3231.x * _1873)) + _3231.w) / _3277;
                                float _3341 = 1.0 - dot(vec2(_3336, _3337), vec2(_3336, _3337));
                                float _4385 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3343 = _3342 * (((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3319) / ((_3332 * 0.699999988079071044921875) + 1.0));
                                float _3355 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                                float _3356 = 1.0 - _788;
                                float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                                float _3364 = _3363 * _3363;
                                float _3365 = _3364 * _3364;
                                float _3366 = _3312 - _2765;
                                float _3367 = _3313 - _2766;
                                float _3368 = _3314 - _2767;
                                float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                                float _3376 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4396 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3380 = dot(vec3(_727, _730, _733), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                                float _4407 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                                float _3388 = _3325 * _3364;
                                float _3389 = _3388 * _3388;
                                float _3395 = ((1.0 - _3389) * dot(vec3(_727, _730, _733), vec3(_3312, _3313, _3314))) + _3389;
                                float _4418 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3397 = 1.0 - _3364;
                                float _3407 = (0.5 / (((_3396 * ((_3379 * _3397) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3364) * _3379))) * _3396;
                                float _4429 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3417 = (_3342 * _3319) * (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3387 * _3387) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_104_pred = _3343 * _3189.y;
                                frontier_phi_104_pred_1 = _3343 * _3189.x;
                                frontier_phi_104_pred_2 = _3417 * _3201.z;
                                frontier_phi_104_pred_3 = _3417 * _3201.y;
                                frontier_phi_104_pred_4 = _3417 * _3201.x;
                                frontier_phi_104_pred_5 = _3343 * _3189.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_104_pred;
                            _3424 = frontier_phi_104_pred_1;
                            _3423 = frontier_phi_104_pred_2;
                            _3422 = frontier_phi_104_pred_3;
                            _3421 = frontier_phi_104_pred_4;
                            _3426 = frontier_phi_104_pred_5;
                            _3131 = _3424 + _3144;
                            _3132 = _3425 + _3145;
                            _3133 = _3426 + _3146;
                            _3128 = _3421 + _3141;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            if (_3148 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3148;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3133;
                        frontier_phi_98_pred_1 = _3132;
                        frontier_phi_98_pred_2 = _3131;
                        frontier_phi_98_pred_3 = _3130;
                        frontier_phi_98_pred_4 = _3129;
                        frontier_phi_98_pred_5 = _3128;
                    }
                    _2750 = frontier_phi_98_pred;
                    _2748 = frontier_phi_98_pred_1;
                    _2746 = frontier_phi_98_pred_2;
                    _2744 = frontier_phi_98_pred_3;
                    _2742 = frontier_phi_98_pred_4;
                    _2740 = frontier_phi_98_pred_5;
                    uint _2927 = _2926 + 1u;
                    if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2920 = _2740;
                        _2921 = _2742;
                        _2922 = _2744;
                        _2923 = _2746;
                        _2924 = _2748;
                        _2925 = _2750;
                        _2926 = _2927;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2744;
                frontier_phi_78_79_ladder_1 = _2750;
                frontier_phi_78_79_ladder_2 = _2748;
                frontier_phi_78_79_ladder_3 = _2746;
                frontier_phi_78_79_ladder_4 = _2742;
                frontier_phi_78_79_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_78_79_ladder = _2597;
                frontier_phi_78_79_ladder_1 = _2603;
                frontier_phi_78_79_ladder_2 = _2601;
                frontier_phi_78_79_ladder_3 = _2599;
                frontier_phi_78_79_ladder_4 = _2595;
                frontier_phi_78_79_ladder_5 = _2593;
            }
            _2739 = frontier_phi_78_79_ladder_5;
            _2741 = frontier_phi_78_79_ladder_4;
            _2743 = frontier_phi_78_79_ladder;
            _2745 = frontier_phi_78_79_ladder_3;
            _2747 = frontier_phi_78_79_ladder_2;
            _2749 = frontier_phi_78_79_ladder_1;
        }
        float _2754 = isnan(1.0) ? _772 : (isnan(_772) ? 1.0 : min(_772, 1.0));
        _2482 = (_2754 * _2745) + _2161;
        _2484 = (_2754 * _2747) + _2162;
        _2486 = (_2754 * _2749) + _2163;
        _2488 = ((_2739 * 0.039999999105930328369140625) * _2754) + _2317;
        _2490 = ((_2741 * 0.039999999105930328369140625) * _2754) + _2318;
        _2492 = ((_2743 * 0.039999999105930328369140625) * _2754) + _2319;
    }
    else
    {
        _2482 = _2161;
        _2484 = _2162;
        _2486 = _2163;
        _2488 = _2317;
        _2490 = _2318;
        _2492 = _2319;
    }
    uint _2498 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _4445 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4456 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4467 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2523 = (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2482 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _772))) + ((_2488 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2498].x * ((_593 * ((_549 - _474) - (_549 * _294))) + _474));
    float _2525 = ((cbInstanceData._m0[_2498].y * ((_593 * ((_550 - _475) - (_550 * _294))) + _475)) + ((_2490 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2484 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _772)));
    float _2527 = ((cbInstanceData._m0[_2498].z * ((_593 * ((_551 - _476) - (_551 * _294))) + _476)) + ((_2492 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2486 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _772)));
    float _2528 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2529 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2530 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    uint _2531 = _746 + 6u;
    float _2539 = _707 / cbSceneParam._m0[86u].x;
    float _2540 = _708 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _680 : (isnan(_680) ? cbSceneParam._m0[77u].w : min(_680, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_680 > cbSceneParam._m0[78u].w)
    {
        float _2618 = isnan(_680) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _680 : min(cbSceneParam._m0[80u].w, _680));
        float _2619 = _2618 / _680;
        float _2630 = _2619 * _267;
        float _2631 = _268 * _2619;
        float _2632 = (-0.0) - _2631;
        float _2633 = _2619 * _269;
        float _2635 = (cbSceneParam._m0[77u].w * _2632) / _2618;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2631;
        float _2643 = sqrt(((_2630 * _2630) + (_2631 * _2631)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2618)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2877;
        if (abs((_2632 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2877 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2802 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2877 = ((abs(_2643 / _2632) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2653 * _2811) - exp2(_2653 * _2812)) * _2800))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2879 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2888 = exp2((_2877 * (-1.44269502162933349609375)) * (1.0 - _2879.w));
        float _2889 = log2(_2888);
        float _2905 = log2(_2559);
        _2655 = (exp2(_2905 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].x)) * _2879.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2657 = (exp2(_2905 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].y)) * _2879.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2659 = (exp2(_2905 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].z)) * _2879.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2661 = _2888 * _2559;
    }
    else
    {
        _2655 = _2556;
        _2657 = _2557;
        _2659 = _2558;
        _2661 = _2559;
    }
    bool _2915;
    vec4 _2671;
    vec4 _2693;
    float _2695;
    float _2699;
    float _2700;
    float _2701;
    float _2702;
    bool _2712;
    for (;;)
    {
        _2671 = cbMatDynParam._m0[0u];
        float _2673 = roundEven(_2671.y);
        bool _2674 = _2673 == 3.0;
        float _2675 = log2(_2661);
        float _2682 = exp2(_2675 * cbSceneParam._m0[78u].x) * _2528;
        float _2683 = exp2(_2675 * cbSceneParam._m0[78u].y) * _2529;
        float _2684 = exp2(_2675 * cbSceneParam._m0[78u].z) * _2530;
        float _2691 = _694 + (-0.5);
        _2693 = cbMtdParam._m0[1u];
        _2695 = _2693.y * _2691;
        float _2698 = (_2673 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2699 = _2698 * (_2674 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2655)));
        _2700 = _2698 * (_2674 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2657)));
        _2701 = _2698 * (_2674 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2659)));
        _2702 = _2691 * 0.999000012874603271484375;
        _2712 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2712)
        {
            if ((cbInstanceData._m0[_746 + 7u].x + _2702) < 0.5)
            {
                _2915 = true;
                break;
            }
        }
        uint _2835 = _748 + uint(_2671.w);
        if ((cbInstanceData._m0[_2835].w < 1.0) && ((cbInstanceData._m0[_2835].w + _2702) < 0.5))
        {
            _2915 = true;
            break;
        }
        if ((_2695 + 1.0) < _2693.x)
        {
            _2915 = true;
            break;
        }
        _2915 = false;
        break;
    }
    float _3119;
    if (_2915)
    {
        discard_state = true;
        _3119 = 0.0;
    }
    else
    {
        _3119 = cbInstanceData._m0[_2531].w;
    }
    SV_Target.x = _2699;
    SV_Target.y = _2700;
    SV_Target.z = _2701;
    SV_Target.w = _3119;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2531].w;
    discard_exit();
}


