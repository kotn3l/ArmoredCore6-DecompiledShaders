#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _836;
uint _1978;
uint _1979;
uint _1980;
uint _2214;
uint _2215;
uint _2216;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _253 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _243);
    float _254 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _243);
    float _255 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _243);
    float _281 = cbMtdParam._m0[22u].y + _253;
    float _282 = cbMtdParam._m0[22u].z + _254;
    float _283 = cbMtdParam._m0[22u].w + _255;
    float _297 = (-0.0) - dot(vec3(_281, _282, _283), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _298 = (-0.0) - dot(vec3(_281, _282, _283), vec3(_195 * TANGENT.x, _195 * TANGENT.y, _195 * TANGENT.z));
    float _299 = (-0.0) - dot(vec3(_281, _282, _283), vec3((-0.0) - (_188 * NORMAL.x), (-0.0) - (_188 * NORMAL.y), (-0.0) - (_188 * NORMAL.z)));
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _303 * _299;
    float _306 = (cbMtdParam._m0[19u].x * _297) * _303;
    float _308 = (cbMtdParam._m0[18u].w * _298) * _303;
    float _309 = fract(TEXCOORD.x);
    float _310 = fract(TEXCOORD.y);
    float _316;
    if (_306 > 0.0)
    {
        _316 = (1.0 - _309) / _306;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _309) / _306;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _316 = frontier_phi_3_2_ladder;
    }
    float _324;
    if (_308 > 0.0)
    {
        _324 = (1.0 - _310) / _308;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _310) / _308;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _324 = frontier_phi_7_6_ladder;
    }
    bool _326 = _304 > 0.0;
    float _328 = _326 ? (cbMtdParam._m0[15u].x / _304) : 5000.0;
    float _329 = isnan(_324) ? _316 : (isnan(_316) ? _324 : min(_316, _324));
    float _330 = isnan(_328) ? _329 : (isnan(_329) ? _328 : min(_329, _328));
    float _334 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _335 = _309 + (-0.5);
    float _338 = _310 + (-0.5);
    float _341 = ((_330 * _304) + _334) / _334;
    vec4 _367 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_335 + (_330 * _306)) / _341) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_338 + (_330 * _308)) / _341) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _378 = cbMtdParam._m0[9u].x * _367.x;
    float _379 = cbMtdParam._m0[9u].y * _367.y;
    float _380 = cbMtdParam._m0[9u].z * _367.z;
    float _402 = (cbMtdParam._m0[21u].x * _297) * _303;
    float _404 = (cbMtdParam._m0[20u].w * _298) * _303;
    bool _405 = _402 > 0.0;
    float _410;
    if (_405)
    {
        _410 = (1.0 - _309) / _402;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _309) / _402;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _410 = frontier_phi_11_10_ladder;
    }
    bool _412 = _404 > 0.0;
    float _417;
    if (_412)
    {
        _417 = (1.0 - _310) / _404;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _310) / _404;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _417 = frontier_phi_15_14_ladder;
    }
    float _420 = _326 ? (cbMtdParam._m0[16u].z / _304) : 5000.0;
    float _421 = isnan(_417) ? _410 : (isnan(_410) ? _417 : min(_410, _417));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _430 = ((_422 * _304) + _426) / _426;
    float _435 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _437 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _453 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_335 + (_422 * _402)) / _430) + 0.5) + _435) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_338 + (_422 * _404)) / _430) + 0.5) + _437) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _465;
    if (_405)
    {
        _465 = (1.0 - _309) / _402;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _309) / _402;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _465 = frontier_phi_19_18_ladder;
    }
    float _471;
    if (_412)
    {
        _471 = (1.0 - _310) / _404;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _310) / _404;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _471 = frontier_phi_23_22_ladder;
    }
    float _473 = isnan(_471) ? _465 : (isnan(_465) ? _471 : min(_465, _471));
    float _474 = isnan(_420) ? _473 : (isnan(_473) ? _420 : min(_473, _420));
    float _481 = ((_474 * _304) + _426) / _426;
    vec4 _495 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_335 + (_474 * _402)) / _481) + 0.5) + _435) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_338 + (_474 * _404)) / _481) + 0.5) + _437) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _497 = _495.w;
    float _504 = (_497 * ((_453.x * cbMtdParam._m0[10u].x) - _378)) + _378;
    float _505 = (_497 * ((_453.y * cbMtdParam._m0[10u].y) - _379)) + _379;
    float _506 = (_497 * ((_453.z * cbMtdParam._m0[10u].z) - _380)) + _380;
    float _521 = (cbMtdParam._m0[21u].z * _297) * _303;
    float _523 = (cbMtdParam._m0[21u].y * _298) * _303;
    bool _524 = _521 > 0.0;
    float _529;
    if (_524)
    {
        _529 = (1.0 - _309) / _521;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _309) / _521;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _529 = frontier_phi_27_26_ladder;
    }
    bool _531 = _523 > 0.0;
    float _536;
    if (_531)
    {
        _536 = (1.0 - _310) / _523;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _310) / _523;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _536 = frontier_phi_31_30_ladder;
    }
    float _539 = _326 ? (cbMtdParam._m0[18u].x / _304) : 5000.0;
    float _540 = isnan(_536) ? _529 : (isnan(_529) ? _536 : min(_529, _536));
    float _541 = isnan(_539) ? _540 : (isnan(_540) ? _539 : min(_540, _539));
    float _545 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _549 = ((_541 * _304) + _545) / _545;
    float _554 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _556 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _573 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_335 + (_541 * _521)) / _549) + 0.5) + _554) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_338 + (_541 * _523)) / _549) + 0.5) + _556) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _585;
    if (_524)
    {
        _585 = (1.0 - _309) / _521;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _309) / _521;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _585 = frontier_phi_35_34_ladder;
    }
    float _591;
    if (_531)
    {
        _591 = (1.0 - _310) / _523;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _310) / _523;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _591 = frontier_phi_39_38_ladder;
    }
    float _593 = isnan(_591) ? _585 : (isnan(_585) ? _591 : min(_585, _591));
    float _594 = isnan(_539) ? _593 : (isnan(_593) ? _539 : min(_593, _539));
    float _601 = ((_594 * _304) + _545) / _545;
    vec4 _615 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_335 + (_594 * _521)) / _601) + 0.5) + _554) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_338 + (_594 * _523)) / _601) + 0.5) + _556) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _617 = _615.w;
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _646 = inversesqrt(dot(vec3(_253, _254, _255), vec3(_253, _254, _255)));
    float _647 = _253 * _646;
    float _648 = _254 * _646;
    float _649 = _255 * _646;
    float _655 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _656 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_655 * cbSceneParam._m0[86u].x, _656 * cbSceneParam._m0[86u].y));
    float _668 = _665.x * TEXCOORD.z;
    float _669 = (-0.0) - _647;
    float _670 = (-0.0) - _648;
    float _671 = (-0.0) - _649;
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _835;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _757 = (cbModelParam._m0[37u].x * ((((fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _759 = (cbModelParam._m0[37u].y * ((((fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _760 = (((((fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _759, _760), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _759, _760), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _759, _760), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _759, _760), 0.0);
        float _797 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _808 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _818 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _828 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_784.x + (-0.5));
        float _830 = _828 * (_784.y + (-0.5));
        float _831 = _828 * (_784.z + (-0.5));
        _835 = _797 * (_763.z + (-0.5));
        _837 = _797 * (_763.y + (-0.5));
        _838 = _797 * (_763.x + (-0.5));
        _839 = _808 * (_770.z + (-0.5));
        _840 = _808 * (_770.y + (-0.5));
        _841 = _808 * (_770.x + (-0.5));
        _842 = _818 * (_777.z + (-0.5));
        _843 = _818 * (_777.y + (-0.5));
        _844 = _818 * (_777.x + (-0.5));
        _845 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        _846 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        _847 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    }
    else
    {
        _835 = _836;
        _837 = _836;
        _838 = _836;
        _839 = _836;
        _840 = _836;
        _841 = _836;
        _842 = _836;
        _843 = _836;
        _844 = _836;
        _845 = _836;
        _846 = _836;
        _847 = _836;
    }
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = (cbModelParam._m0[38u].x * ((((fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _902 = (cbModelParam._m0[38u].y * ((((fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _903 = (((((fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _938 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _948 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _958 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _968 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_926.x + (-0.5));
        float _970 = _968 * (_926.y + (-0.5));
        float _971 = _968 * (_926.z + (-0.5));
        _975 = _938 * (_905.z + (-0.5));
        _976 = _938 * (_905.y + (-0.5));
        _977 = _938 * (_905.x + (-0.5));
        _978 = _948 * (_912.z + (-0.5));
        _979 = _948 * (_912.y + (-0.5));
        _980 = _948 * (_912.x + (-0.5));
        _981 = _958 * (_919.z + (-0.5));
        _982 = _958 * (_919.y + (-0.5));
        _983 = _958 * (_919.x + (-0.5));
        _984 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        _985 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        _986 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    }
    else
    {
        _975 = _836;
        _976 = _836;
        _977 = _836;
        _978 = _836;
        _979 = _836;
        _980 = _836;
        _981 = _836;
        _982 = _836;
        _983 = _836;
        _984 = _836;
        _985 = _836;
        _986 = _836;
    }
    float _1001 = _647 * (-0.5);
    float _1002 = _648 * (-0.5);
    float _1003 = _649 * (-0.5);
    float _1004 = dot(vec4(_1001, _1002, _1003, 1.0), vec4(_977, _980, _983, _986));
    float _1007 = dot(vec4(_1001, _1002, _1003, 1.0), vec4(_976, _979, _982, _985));
    float _1010 = dot(vec4(_1001, _1002, _1003, 1.0), vec4(_975, _978, _981, _984));
    float _1045;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1017 = dot(vec4(_1001, _1002, _1003, 1.0), vec4(_835, _839, _842, _845));
        float _1021 = dot(vec4(_1001, _1002, _1003, 1.0), vec4(_837, _840, _843, _846));
        float _1025 = dot(vec4(_1001, _1002, _1003, 1.0), vec4(_838, _841, _844, _847));
        float _1032 = dot(vec4(cbModelParam._m0[39u]), vec4(_1001, _1002, _1003, 1.0));
        _1045 = dot(vec3(isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)), isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)), isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1032) ? 0.0 : (isnan(0.0) ? _1032 : max(0.0, _1032))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1045 = 1.0;
    }
    float _1056;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1047 = dot(vec4(cbModelParam._m0[40u]), vec4(_1001, _1002, _1003, 1.0));
        _1056 = dot(vec3(isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)), isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)), isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1047) ? 0.0 : (isnan(0.0) ? _1047 : max(0.0, _1047))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1056 = 1.0;
    }
    float _1060 = (_1056 * cbModelParam._m0[1u].x) + (_1045 * (1.0 - cbModelParam._m0[1u].x));
    float _1066 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1147;
    float _1149;
    float _1151;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1114 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1118 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1122 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1125 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1128 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1131 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1157;
        if (_1125 > 0.0)
        {
            _1157 = abs((1.0 - _1114) / _1125);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1125 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1114 + 1.0) / _1125);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1157 = frontier_phi_54_52_ladder;
        }
        float _1435;
        if (_1128 > 0.0)
        {
            _1435 = abs((1.0 - _1118) / _1128);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1128 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1118 + 1.0) / _1128);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1435 = frontier_phi_63_59_ladder;
        }
        float _1731;
        if (_1131 > 0.0)
        {
            _1731 = abs((1.0 - _1122) / _1131);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1131 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1122 + 1.0) / _1131);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _1731 = frontier_phi_77_70_ladder;
        }
        float _1733 = isnan(_1435) ? _1157 : (isnan(_1157) ? _1435 : min(_1157, _1435));
        float _1734 = isnan(_1731) ? _1733 : (isnan(_1733) ? _1731 : min(_1733, _1731));
        float _1738 = (_1734 * _1125) + _1114;
        float _1739 = (_1734 * _1128) + _1118;
        float _1740 = (_1734 * _1131) + _1122;
        float _1741 = _1734 * 9.9999997473787516355514526367188e-05;
        float _1742 = (-1.0) - _1741;
        float _1744 = _1741 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_1740 > _1744) || ((_1740 < _1742) || ((_1739 > _1744) || ((_1739 < _1742) || ((_1738 < _1742) || (_1738 > _1744))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1740, cbModelParam._m0[9u].z, fma(_1739, cbModelParam._m0[9u].y, _1738 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1740, cbModelParam._m0[10u].z, fma(_1739, cbModelParam._m0[10u].y, _1738 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1740, cbModelParam._m0[11u].z, fma(_1739, cbModelParam._m0[11u].y, _1738 * cbModelParam._m0[11u].x))), _1066);
            frontier_phi_53_77_ladder = _1851.z * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _1851.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _1851.x * cbModelParam._m0[1u].y;
        }
        _1147 = frontier_phi_53_77_ladder_2;
        _1149 = frontier_phi_53_77_ladder_1;
        _1151 = frontier_phi_53_77_ladder;
    }
    else
    {
        vec4 _1135 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1066);
        _1147 = _1135.x * cbModelParam._m0[1u].y;
        _1149 = _1135.y * cbModelParam._m0[1u].y;
        _1151 = _1135.z * cbModelParam._m0[1u].y;
    }
    float _1154 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1242;
    float _1244;
    float _1246;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1206 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1210 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1214 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1217 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1220 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1223 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1440;
        if (_1217 > 0.0)
        {
            _1440 = abs((1.0 - _1206) / _1217);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1217 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1206 + 1.0) / _1217);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1440 = frontier_phi_65_61_ladder;
        }
        float _1757;
        if (_1220 > 0.0)
        {
            _1757 = abs((1.0 - _1210) / _1220);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1220 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1210 + 1.0) / _1220);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _1757 = frontier_phi_79_72_ladder;
        }
        float _1908;
        if (_1223 > 0.0)
        {
            _1908 = abs((1.0 - _1214) / _1223);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1223 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1214 + 1.0) / _1223);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _1908 = frontier_phi_93_88_ladder;
        }
        float _1910 = isnan(_1757) ? _1440 : (isnan(_1440) ? _1757 : min(_1440, _1757));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1217) + _1206;
        float _1916 = (_1911 * _1220) + _1210;
        float _1917 = (_1911 * _1223) + _1214;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1918;
        float _1921 = _1918 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_1917 > _1921) || ((_1917 < _1919) || ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 < _1919) || (_1915 > _1921))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2077 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1917, cbModelParam._m0[17u].z, fma(_1916, cbModelParam._m0[17u].y, _1915 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1917, cbModelParam._m0[18u].z, fma(_1916, cbModelParam._m0[18u].y, _1915 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1917, cbModelParam._m0[19u].z, fma(_1916, cbModelParam._m0[19u].y, _1915 * cbModelParam._m0[19u].x))), _1154);
            frontier_phi_62_93_ladder = _2077.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2077.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2077.x * cbModelParam._m0[1u].z;
        }
        _1242 = frontier_phi_62_93_ladder_2;
        _1244 = frontier_phi_62_93_ladder_1;
        _1246 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1226 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1154);
        _1242 = _1226.x * cbModelParam._m0[1u].z;
        _1244 = _1226.y * cbModelParam._m0[1u].z;
        _1246 = _1226.z * cbModelParam._m0[1u].z;
    }
    float _1258 = _668 * 0.01200000010430812835693359375;
    float _1260 = _1258 * ((cbModelParam._m0[1u].w * (_1242 - _1147)) + _1147);
    float _1261 = _1258 * ((cbModelParam._m0[1u].w * (_1244 - _1149)) + _1149);
    float _1262 = _1258 * ((cbModelParam._m0[1u].w * (_1246 - _1151)) + _1151);
    float _1283 = fma(_1262, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1260 * cbSceneParam._m0[89u].x));
    float _1286 = fma(_1262, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1260 * cbSceneParam._m0[90u].x));
    float _1289 = fma(_1262, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, _1260 * cbSceneParam._m0[91u].x));
    uint _1296 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1301 = floatBitsToUint(cbInstanceData._m0[_1296 + 5u]);
    uint _1303 = _1301.x * 14u;
    uint _1304 = _1303 + 13u;
    float _1309 = _668 + (-1.0);
    float _1313 = (cbLight._m0[_1304].x * _1309) + 1.0;
    float _1314 = (cbLight._m0[_1304].y * _1309) + 1.0;
    uint _1315 = _1303 + 8u;
    float _1326 = cbLight._m0[_1303].x + _647;
    float _1327 = cbLight._m0[_1303].y + _648;
    float _1328 = cbLight._m0[_1303].z + _649;
    float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
    float _1336 = dot(vec3(0.0), vec3(cbLight._m0[_1303].xyz));
    float _2639 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _1339 = isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0));
    float _1340 = dot(vec3(0.0), vec3(_647, _648, _649));
    float _2650 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _1343 = isnan(1.0) ? _2650 : (isnan(_2650) ? 1.0 : min(_2650, 1.0));
    float _1344 = dot(vec3(cbLight._m0[_1303].xyz), vec3(_1326 * _1332, _1327 * _1332, _1328 * _1332));
    float _2661 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _1355 = (exp2(log2(1.0 - (isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1361 = (0.5 / ((_1339 + 9.9999999392252902907785028219223e-09) + _1343)) * _1339;
    float _2672 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
    float _1363 = (isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0))) * 0.31831014156341552734375;
    float _1365 = isnan(1.0) ? _1313 : (isnan(_1313) ? 1.0 : min(_1313, 1.0));
    uint _1375 = _1303 + 9u;
    uint _1381 = _1303 | 1u;
    float _1387 = cbLight._m0[_1381].x + _647;
    float _1388 = cbLight._m0[_1381].y + _648;
    float _1389 = cbLight._m0[_1381].z + _649;
    float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
    float _1397 = dot(vec3(0.0), vec3(cbLight._m0[_1381].xyz));
    float _2688 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
    float _1400 = isnan(1.0) ? _2688 : (isnan(_2688) ? 1.0 : min(_2688, 1.0));
    float _1401 = dot(vec3(cbLight._m0[_1381].xyz), vec3(_1387 * _1393, _1388 * _1393, _1389 * _1393));
    float _2699 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
    float _1410 = (exp2(log2(1.0 - (isnan(1.0) ? _2699 : (isnan(_2699) ? 1.0 : min(_2699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1414 = (0.5 / ((_1400 + 9.9999999392252902907785028219223e-09) + _1343)) * _1400;
    float _2710 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _1416 = (isnan(1.0) ? _2710 : (isnan(_2710) ? 1.0 : min(_2710, 1.0))) * 0.31831014156341552734375;
    float _1417 = isnan(1.0) ? _1314 : (isnan(_1314) ? 1.0 : min(_1314, 1.0));
    float _1427 = (((_1410 * cbLight._m0[_1375].x) * _1416) * _1417) + (((_1355 * cbLight._m0[_1315].x) * _1363) * _1365);
    float _1428 = (((_1410 * cbLight._m0[_1375].y) * _1416) * _1417) + (((_1355 * cbLight._m0[_1315].y) * _1363) * _1365);
    float _1429 = (((_1410 * cbLight._m0[_1375].z) * _1416) * _1417) + (((_1355 * cbLight._m0[_1315].z) * _1363) * _1365);
    float _1546;
    float _1548;
    float _1550;
    if (_1301.y == 0u)
    {
        float _1485 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1486 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1485;
        float _1487 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1485;
        float _1488 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1485;
        uvec4 _1500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1501 = _1500.x;
        uint _1512 = uint((float(_1500.y) * floor(float(uint(cbSceneParam._m0[85u].y * _656) / _1501))) + floor(float(uint(cbSceneParam._m0[85u].x * _655) / _1501)));
        float _1522 = (log2(_1488 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1523 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        uint _1526 = uint(isnan(14.0) ? _1523 : (isnan(_1523) ? 14.0 : min(_1523, 14.0)));
        uvec4 _1532 = texelFetch(g_lightClusterGridBuffer, int(((_1526 << 2u) + (_1512 << 6u)) >> 2u));
        uint _1533 = _1532.x;
        uint _1534 = _1500.z;
        float _1623;
        float _1625;
        float _1627;
        if (((((1u << ((_1534 >> 4u) & 15u)) + 4294967295u) & _1533) == 0u) || ((_1534 & 240u) == 0u))
        {
            _1623 = 0.0;
            _1625 = 0.0;
            _1627 = 0.0;
        }
        else
        {
            float _1624;
            float _1626;
            float _1628;
            float _1782 = 0.0;
            float _1783 = 0.0;
            float _1784 = 0.0;
            uint _1785 = 0u;
            uint _1794;
            bool _1795;
            for (;;)
            {
                _1794 = texelFetch(g_lightClassification, int((((_1526 << 5u) + (_1512 << 9u)) + (_1785 << 2u)) >> 2u)).x;
                _1795 = _1794 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                if (_1795)
                {
                    frontier_phi_90_pred = _1784;
                    frontier_phi_90_pred_1 = _1783;
                    frontier_phi_90_pred_2 = _1782;
                }
                else
                {
                    float _1948;
                    float _1949;
                    float _1950;
                    uint _1951;
                    _1948 = _1782;
                    _1949 = _1783;
                    _1950 = _1784;
                    _1951 = _1794;
                    float _1860;
                    float _1861;
                    float _1862;
                    for (;;)
                    {
                        uint _1955 = uint(findLSB(_1951)) + (_1785 << 5u);
                        uint _1952 = (_1951 + 4294967295u) & _1951;
                        uint _1957 = _1955 * 48u;
                        vec4 _1971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1957)).x, texelFetch(g_PointLightRenderingBuffer, int(_1957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1957 + 3u)).x));
                        uint _1988 = (_1955 * 48u) + 8u;
                        vec3 _1999 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1988)).x, texelFetch(g_PointLightRenderingBuffer, int(_1988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1988 + 2u)).x));
                        float _2003 = _1971.x - _1486;
                        float _2004 = _1971.y - _1487;
                        float _2005 = _1971.z - _1488;
                        float _2006 = dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005));
                        float _2009 = inversesqrt(_2006);
                        float _2018 = 1.0 - (_2006 * _1971.w);
                        float _2736 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
                        float _2020 = sqrt(_2006) * uintBitsToFloat(uvec4(_1978, _1979, _1980, texelFetch(g_PointLightRenderingBuffer, int(((_1955 * 48u) + 4u) + 3u)).x)).w;
                        float _2023 = 1.39999997615814208984375 / (_2020 + 1.39999997615814208984375);
                        float _2024 = _2023 * _2023;
                        float _2027 = ((1.0 - _2024) * dot(vec3(0.0), vec3(_2009 * _2003, _2009 * _2004, _2009 * _2005))) + _2024;
                        float _2029 = (-0.0) - _1486;
                        float _2030 = (-0.0) - _1487;
                        float _2031 = (-0.0) - _1488;
                        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
                        float _2039 = dot(vec3(0.0), vec3(_2035 * _2029, _2035 * _2030, _2035 * _2031));
                        float _2747 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
                        float _2758 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
                        float _2043 = isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0));
                        float _2047 = (0.5 / (((isnan(1.0) ? _2747 : (isnan(_2747) ? 1.0 : min(_2747, 1.0))) + 9.9999999392252902907785028219223e-09) + _2043)) * _2043;
                        float _2769 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
                        float _2056 = (((isnan(1.0) ? _2769 : (isnan(_2769) ? 1.0 : min(_2769, 1.0))) * 3.1415927410125732421875) / (((_2020 * _2020) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2736 : (isnan(_2736) ? 1.0 : min(_2736, 1.0)));
                        _1860 = (_2056 * _1999.x) + _1948;
                        _1861 = (_2056 * _1999.y) + _1949;
                        _1862 = (_2056 * _1999.z) + _1950;
                        if (_1952 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1948 = _1860;
                            _1949 = _1861;
                            _1950 = _1862;
                            _1951 = _1952;
                        }
                    }
                    frontier_phi_90_pred = _1862;
                    frontier_phi_90_pred_1 = _1861;
                    frontier_phi_90_pred_2 = _1860;
                }
                _1628 = frontier_phi_90_pred;
                _1626 = frontier_phi_90_pred_1;
                _1624 = frontier_phi_90_pred_2;
                uint _1786 = _1785 + 1u;
                if (_1786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1782 = _1624;
                    _1783 = _1626;
                    _1784 = _1628;
                    _1785 = _1786;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1623 = _1624;
            _1625 = _1626;
            _1627 = _1628;
        }
        uvec4 _1631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1632 = _1631.z;
        uint _1634 = (_1632 >> 8u) & 15u;
        float _1762;
        float _1764;
        float _1766;
        if (((4294967295u << _1634) & _1533) == 0u)
        {
            _1762 = _1623;
            _1764 = _1625;
            _1766 = _1627;
        }
        else
        {
            float _1778 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            if (_1634 < ((_1632 >> 12u) & 15u))
            {
                float _1763;
                float _1765;
                float _1767;
                float _1934 = _1623;
                float _1935 = _1625;
                float _1936 = _1627;
                uint _1937 = _1634;
                uint _1946;
                bool _1947;
                for (;;)
                {
                    _1946 = texelFetch(g_lightClassification, int((((_1526 << 5u) + (_1512 << 9u)) + (_1937 << 2u)) >> 2u)).x;
                    _1947 = _1946 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    if (_1947)
                    {
                        frontier_phi_99_pred = _1936;
                        frontier_phi_99_pred_1 = _1935;
                        frontier_phi_99_pred_2 = _1934;
                    }
                    else
                    {
                        float _2082;
                        float _2083;
                        float _2084;
                        float _2303;
                        float _2304;
                        float _2305;
                        float _2092 = _1934;
                        float _2093 = _1935;
                        float _2094 = _1936;
                        uint _2095 = _1946;
                        uint _2096;
                        uint _2106;
                        vec4 _2121;
                        float _2122;
                        vec3 _2134;
                        vec4 _2149;
                        vec4 _2164;
                        float _2210;
                        bool _2211;
                        for (;;)
                        {
                            _2106 = ((_1937 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2095));
                            _2096 = (_2095 + 4294967295u) & _2095;
                            uint _2108 = _2106 * 40u;
                            _2121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2108 + 3u)).x));
                            _2122 = _2121.w;
                            uint _2124 = (_2106 * 40u) + 8u;
                            _2134 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 2u)).x));
                            uint _2136 = (_2106 * 40u) + 16u;
                            _2149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2136 + 3u)).x));
                            uint _2151 = (_2106 * 40u) + 20u;
                            _2164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2151 + 3u)).x));
                            uint _2166 = (_2106 * 40u) + 24u;
                            vec4 _2179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 3u)).x));
                            uint _2185 = (_2106 * 40u) + 28u;
                            vec4 _2198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 3u)).x));
                            _2210 = fma(_1488, _2198.z, fma(_1487, _2198.y, _2198.x * _1486)) + _2198.w;
                            _2211 = !((fma(_1488, _2179.z, fma(_1487, _2179.y, _2179.x * _1486)) + _2179.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            if (_2211)
                            {
                                float _2245 = _2121.x - _1486;
                                float _2246 = _2121.y - _1487;
                                float _2247 = _2121.z - _1488;
                                float _2248 = dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247));
                                float _2251 = inversesqrt(_2248);
                                float _2258 = 1.0 - (_2248 / (_2122 * _2122));
                                float _2780 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
                                float _2260 = sqrt(_2248) * uintBitsToFloat(uvec4(_2214, _2215, _2216, texelFetch(g_SpotLightRenderingBuffer, int(((_2106 * 40u) + 4u) + 3u)).x)).w;
                                float _2262 = 1.39999997615814208984375 / (_2260 + 1.39999997615814208984375);
                                float _2263 = _2262 * _2262;
                                float _2266 = (fma(_1488, _2149.z, fma(_1487, _2149.y, _2149.x * _1486)) + _2149.w) / _2210;
                                float _2267 = (fma(_1488, _2164.z, fma(_1487, _2164.y, _2164.x * _1486)) + _2164.w) / _2210;
                                float _2271 = 1.0 - dot(vec2(_2266, _2267), vec2(_2266, _2267));
                                float _2791 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
                                float _2279 = dot(vec3(0.0), vec3((-0.0) - (_1486 * _1778), (-0.0) - (_1487 * _1778), (-0.0) - (_1488 * _1778)));
                                float _2802 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
                                float _2287 = ((1.0 - _2263) * dot(vec3(0.0), vec3(_2251 * _2245, _2251 * _2246, _2251 * _2247))) + _2263;
                                float _2813 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
                                float _2288 = isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0));
                                float _2292 = (0.5 / (((isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0))) + 9.9999999392252902907785028219223e-09) + _2288)) * _2288;
                                float _2824 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
                                float _2299 = ((isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0))) * (isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0)))) * (((isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0))) * 3.1415927410125732421875) / (((_2260 * _2260) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2299 * _2134.z;
                                frontier_phi_105_pred_1 = _2299 * _2134.y;
                                frontier_phi_105_pred_2 = _2299 * _2134.x;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                            }
                            _2305 = frontier_phi_105_pred;
                            _2304 = frontier_phi_105_pred_1;
                            _2303 = frontier_phi_105_pred_2;
                            _2082 = _2303 + _2092;
                            _2083 = _2304 + _2093;
                            _2084 = _2305 + _2094;
                            if (_2096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2092 = _2082;
                                _2093 = _2083;
                                _2094 = _2084;
                                _2095 = _2096;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2084;
                        frontier_phi_99_pred_1 = _2083;
                        frontier_phi_99_pred_2 = _2082;
                    }
                    _1767 = frontier_phi_99_pred;
                    _1765 = frontier_phi_99_pred_1;
                    _1763 = frontier_phi_99_pred_2;
                    uint _1938 = _1937 + 1u;
                    if (_1938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1934 = _1763;
                        _1935 = _1765;
                        _1936 = _1767;
                        _1937 = _1938;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _1765;
                frontier_phi_81_82_ladder_1 = _1763;
                frontier_phi_81_82_ladder_2 = _1767;
            }
            else
            {
                frontier_phi_81_82_ladder = _1625;
                frontier_phi_81_82_ladder_1 = _1623;
                frontier_phi_81_82_ladder_2 = _1627;
            }
            _1762 = frontier_phi_81_82_ladder_1;
            _1764 = frontier_phi_81_82_ladder;
            _1766 = frontier_phi_81_82_ladder_2;
        }
        float _1771 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _1546 = ((_1762 * 0.039999999105930328369140625) * _1771) + _1427;
        _1548 = ((_1764 * 0.039999999105930328369140625) * _1771) + _1428;
        _1550 = ((_1766 * 0.039999999105930328369140625) * _1771) + _1429;
    }
    else
    {
        _1546 = _1427;
        _1548 = _1428;
        _1550 = _1429;
    }
    uint _1557 = (_1296 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1572 = (cbInstanceData._m0[_1557].x * ((_617 * ((_573.x * cbMtdParam._m0[14u].x) - _504)) + _504)) + ((_1546 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _1060)) * cbPerFrame._m0[3u].x);
    float _1573 = (cbInstanceData._m0[_1557].y * ((_617 * ((_573.y * cbMtdParam._m0[14u].y) - _505)) + _505)) + ((_1548 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _1060)) * cbPerFrame._m0[3u].x);
    float _1574 = (cbInstanceData._m0[_1557].z * ((_617 * ((_573.z * cbMtdParam._m0[14u].z) - _506)) + _506)) + ((_1550 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _1060)) * cbPerFrame._m0[3u].x);
    uint _1578 = _1296 + 6u;
    float _1586 = _655 / cbSceneParam._m0[86u].x;
    float _1587 = _656 / cbSceneParam._m0[86u].y;
    vec4 _1601 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1586, _1587, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1603 = _1601.x;
    float _1604 = _1601.y;
    float _1605 = _1601.z;
    float _1606 = _1601.w;
    float _1680;
    float _1682;
    float _1684;
    float _1686;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _1642 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _1643 = _1642 / _642;
        float _1654 = _1643 * _253;
        float _1655 = _254 * _1643;
        float _1656 = (-0.0) - _1655;
        float _1657 = _1643 * _255;
        float _1659 = (cbSceneParam._m0[77u].w * _1656) / _1642;
        float _1660 = _1659 + cbSceneParam._m0[79u].w;
        float _1661 = cbSceneParam._m0[79u].w - _1655;
        float _1667 = sqrt(((_1654 * _1654) + (_1655 * _1655)) + (_1657 * _1657));
        float _1670 = (1.0 - (cbSceneParam._m0[77u].w / _1642)) * _1667;
        float _1676 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1678 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1870;
        if (abs((_1656 - _1659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1870 = ((((_1660 > 0.0) ? exp2(_1676 * _1660) : (2.0 - exp2(_1678 * _1660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1670;
        }
        else
        {
            float _1808 = 1.0 / cbSceneParam._m0[80u].x;
            float _1809 = isnan(_1661) ? _1660 : (isnan(_1660) ? _1661 : max(_1660, _1661));
            float _1810 = isnan(_1661) ? _1660 : (isnan(_1660) ? _1661 : min(_1660, _1661));
            float _1819 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : min(_1809, 0.0));
            float _1820 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : min(_1810, 0.0));
            _1870 = ((abs(_1667 / _1656) * cbSceneParam._m0[80u].y) * ((((_1819 - _1820) * 2.0) - ((exp2(_1676 * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)))) - exp2(_1676 * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))))) * _1808)) - ((exp2(_1678 * _1819) - exp2(_1678 * _1820)) * _1808))) + (_1670 * cbSceneParam._m0[80u].z);
        }
        vec4 _1872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1586, _1587, 1.0), 0.0);
        float _1881 = exp2((_1870 * (-1.44269502162933349609375)) * (1.0 - _1872.w));
        float _1882 = log2(_1881);
        float _1898 = log2(_1606);
        _1680 = (exp2(_1898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1882 * cbSceneParam._m0[78u].x)) * _1872.x) / cbSceneParam._m0[78u].x)) + _1603;
        _1682 = (exp2(_1898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1882 * cbSceneParam._m0[78u].y)) * _1872.y) / cbSceneParam._m0[78u].y)) + _1604;
        _1684 = (exp2(_1898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1882 * cbSceneParam._m0[78u].z)) * _1872.z) / cbSceneParam._m0[78u].z)) + _1605;
        _1686 = _1881 * _1606;
    }
    else
    {
        _1680 = _1603;
        _1682 = _1604;
        _1684 = _1605;
        _1686 = _1606;
    }
    float _1698 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1699 = _1698 == 3.0;
    float _1701 = log2(_1686);
    float _1708 = exp2(_1701 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    float _1709 = exp2(_1701 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    float _1710 = exp2(_1701 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    float _1719 = (_1698 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1719 * (_1699 ? _1708 : (_1708 + (cbSceneParam._m0[72u].w * _1680)));
    SV_Target.y = _1719 * (_1699 ? _1709 : (_1709 + (cbSceneParam._m0[72u].w * _1682)));
    SV_Target.z = _1719 * (_1699 ? _1710 : (_1710 + (cbSceneParam._m0[72u].w * _1684)));
    SV_Target.w = cbInstanceData._m0[_1578].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1578].w;
}


