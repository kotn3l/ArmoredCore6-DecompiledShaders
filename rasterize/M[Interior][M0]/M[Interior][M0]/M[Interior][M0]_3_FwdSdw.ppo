#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _840;
uint _2276;
uint _2277;
uint _2278;
uint _2491;
uint _2492;
uint _2493;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    float _285 = cbMtdParam._m0[22u].y + _257;
    float _286 = cbMtdParam._m0[22u].z + _258;
    float _287 = cbMtdParam._m0[22u].w + _259;
    float _301 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _302 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_199 * TANGENT.x, _199 * TANGENT.y, _199 * TANGENT.z));
    float _303 = (-0.0) - dot(vec3(_285, _286, _287), vec3((-0.0) - (_192 * NORMAL.x), (-0.0) - (_192 * NORMAL.y), (-0.0) - (_192 * NORMAL.z)));
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _307 * _303;
    float _310 = (cbMtdParam._m0[19u].x * _301) * _307;
    float _312 = (cbMtdParam._m0[18u].w * _302) * _307;
    float _313 = fract(TEXCOORD.x);
    float _314 = fract(TEXCOORD.y);
    float _320;
    if (_310 > 0.0)
    {
        _320 = (1.0 - _313) / _310;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _313) / _310;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _320 = frontier_phi_3_2_ladder;
    }
    float _328;
    if (_312 > 0.0)
    {
        _328 = (1.0 - _314) / _312;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _314) / _312;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _328 = frontier_phi_7_6_ladder;
    }
    bool _330 = _308 > 0.0;
    float _332 = _330 ? (cbMtdParam._m0[15u].x / _308) : 5000.0;
    float _333 = isnan(_328) ? _320 : (isnan(_320) ? _328 : min(_320, _328));
    float _334 = isnan(_332) ? _333 : (isnan(_333) ? _332 : min(_333, _332));
    float _338 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _339 = _313 + (-0.5);
    float _342 = _314 + (-0.5);
    float _345 = ((_334 * _308) + _338) / _338;
    vec4 _371 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_339 + (_334 * _310)) / _345) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_342 + (_334 * _312)) / _345) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _382 = cbMtdParam._m0[9u].x * _371.x;
    float _383 = cbMtdParam._m0[9u].y * _371.y;
    float _384 = cbMtdParam._m0[9u].z * _371.z;
    float _406 = (cbMtdParam._m0[21u].x * _301) * _307;
    float _408 = (cbMtdParam._m0[20u].w * _302) * _307;
    bool _409 = _406 > 0.0;
    float _414;
    if (_409)
    {
        _414 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _414 = frontier_phi_11_10_ladder;
    }
    bool _416 = _408 > 0.0;
    float _421;
    if (_416)
    {
        _421 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _421 = frontier_phi_15_14_ladder;
    }
    float _424 = _330 ? (cbMtdParam._m0[16u].z / _308) : 5000.0;
    float _425 = isnan(_421) ? _414 : (isnan(_414) ? _421 : min(_414, _421));
    float _426 = isnan(_424) ? _425 : (isnan(_425) ? _424 : min(_425, _424));
    float _430 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _434 = ((_426 * _308) + _430) / _430;
    float _439 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _441 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _457 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_426 * _406)) / _434) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_426 * _408)) / _434) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _469;
    if (_409)
    {
        _469 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _469 = frontier_phi_19_18_ladder;
    }
    float _475;
    if (_416)
    {
        _475 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _475 = frontier_phi_23_22_ladder;
    }
    float _477 = isnan(_475) ? _469 : (isnan(_469) ? _475 : min(_469, _475));
    float _478 = isnan(_424) ? _477 : (isnan(_477) ? _424 : min(_477, _424));
    float _485 = ((_478 * _308) + _430) / _430;
    vec4 _499 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_478 * _406)) / _485) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_478 * _408)) / _485) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _501 = _499.w;
    float _508 = (_501 * ((_457.x * cbMtdParam._m0[10u].x) - _382)) + _382;
    float _509 = (_501 * ((_457.y * cbMtdParam._m0[10u].y) - _383)) + _383;
    float _510 = (_501 * ((_457.z * cbMtdParam._m0[10u].z) - _384)) + _384;
    float _525 = (cbMtdParam._m0[21u].z * _301) * _307;
    float _527 = (cbMtdParam._m0[21u].y * _302) * _307;
    bool _528 = _525 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _313) / _525;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _313) / _525;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _533 = frontier_phi_27_26_ladder;
    }
    bool _535 = _527 > 0.0;
    float _540;
    if (_535)
    {
        _540 = (1.0 - _314) / _527;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _314) / _527;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _540 = frontier_phi_31_30_ladder;
    }
    float _543 = _330 ? (cbMtdParam._m0[18u].x / _308) : 5000.0;
    float _544 = isnan(_540) ? _533 : (isnan(_533) ? _540 : min(_533, _540));
    float _545 = isnan(_543) ? _544 : (isnan(_544) ? _543 : min(_544, _543));
    float _549 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _553 = ((_545 * _308) + _549) / _549;
    float _558 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _560 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _577 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_339 + (_545 * _525)) / _553) + 0.5) + _558) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_342 + (_545 * _527)) / _553) + 0.5) + _560) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _589;
    if (_528)
    {
        _589 = (1.0 - _313) / _525;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _313) / _525;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _589 = frontier_phi_35_34_ladder;
    }
    float _595;
    if (_535)
    {
        _595 = (1.0 - _314) / _527;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _314) / _527;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _595 = frontier_phi_39_38_ladder;
    }
    float _597 = isnan(_595) ? _589 : (isnan(_589) ? _595 : min(_589, _595));
    float _598 = isnan(_543) ? _597 : (isnan(_597) ? _543 : min(_597, _543));
    float _605 = ((_598 * _308) + _549) / _549;
    vec4 _619 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_339 + (_598 * _525)) / _605) + 0.5) + _558) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_342 + (_598 * _527)) / _605) + 0.5) + _560) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _621 = _619.w;
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _651 = _257 * _650;
    float _652 = _258 * _650;
    float _653 = _259 * _650;
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _669 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_659 * cbSceneParam._m0[86u].x, _660 * cbSceneParam._m0[86u].y));
    float _672 = _669.x * TEXCOORD.z;
    float _673 = (-0.0) - _651;
    float _674 = (-0.0) - _652;
    float _675 = (-0.0) - _653;
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _839;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = (cbModelParam._m0[37u].x * ((((fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _763 = (cbModelParam._m0[37u].y * ((((fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _764 = (((((fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _763, _764), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _763, _764), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _763, _764), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _763, _764), 0.0);
        float _801 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _812 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _822 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _832 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_788.x + (-0.5));
        float _834 = _832 * (_788.y + (-0.5));
        float _835 = _832 * (_788.z + (-0.5));
        _839 = _801 * (_767.z + (-0.5));
        _841 = _801 * (_767.y + (-0.5));
        _842 = _801 * (_767.x + (-0.5));
        _843 = _812 * (_774.z + (-0.5));
        _844 = _812 * (_774.y + (-0.5));
        _845 = _812 * (_774.x + (-0.5));
        _846 = _822 * (_781.z + (-0.5));
        _847 = _822 * (_781.y + (-0.5));
        _848 = _822 * (_781.x + (-0.5));
        _849 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        _850 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        _851 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    }
    else
    {
        _839 = _840;
        _841 = _840;
        _842 = _840;
        _843 = _840;
        _844 = _840;
        _845 = _840;
        _846 = _840;
        _847 = _840;
        _848 = _840;
        _849 = _840;
        _850 = _840;
        _851 = _840;
    }
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = (cbModelParam._m0[38u].x * ((((fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _906 = (cbModelParam._m0[38u].y * ((((fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _907 = (((((fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _942 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _952 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _962 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _972 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_930.x + (-0.5));
        float _974 = _972 * (_930.y + (-0.5));
        float _975 = _972 * (_930.z + (-0.5));
        _979 = _942 * (_909.z + (-0.5));
        _980 = _942 * (_909.y + (-0.5));
        _981 = _942 * (_909.x + (-0.5));
        _982 = _952 * (_916.z + (-0.5));
        _983 = _952 * (_916.y + (-0.5));
        _984 = _952 * (_916.x + (-0.5));
        _985 = _962 * (_923.z + (-0.5));
        _986 = _962 * (_923.y + (-0.5));
        _987 = _962 * (_923.x + (-0.5));
        _988 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        _989 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        _990 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    }
    else
    {
        _979 = _840;
        _980 = _840;
        _981 = _840;
        _982 = _840;
        _983 = _840;
        _984 = _840;
        _985 = _840;
        _986 = _840;
        _987 = _840;
        _988 = _840;
        _989 = _840;
        _990 = _840;
    }
    float _1005 = _651 * (-0.5);
    float _1006 = _652 * (-0.5);
    float _1007 = _653 * (-0.5);
    float _1008 = dot(vec4(_1005, _1006, _1007, 1.0), vec4(_981, _984, _987, _990));
    float _1011 = dot(vec4(_1005, _1006, _1007, 1.0), vec4(_980, _983, _986, _989));
    float _1014 = dot(vec4(_1005, _1006, _1007, 1.0), vec4(_979, _982, _985, _988));
    float _1049;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1021 = dot(vec4(_1005, _1006, _1007, 1.0), vec4(_839, _843, _846, _849));
        float _1025 = dot(vec4(_1005, _1006, _1007, 1.0), vec4(_841, _844, _847, _850));
        float _1029 = dot(vec4(_1005, _1006, _1007, 1.0), vec4(_842, _845, _848, _851));
        float _1036 = dot(vec4(cbModelParam._m0[39u]), vec4(_1005, _1006, _1007, 1.0));
        _1049 = dot(vec3(isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)), isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)), isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1036) ? 0.0 : (isnan(0.0) ? _1036 : max(0.0, _1036))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1049 = 1.0;
    }
    float _1060;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1051 = dot(vec4(cbModelParam._m0[40u]), vec4(_1005, _1006, _1007, 1.0));
        _1060 = dot(vec3(isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)), isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)), isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1051) ? 0.0 : (isnan(0.0) ? _1051 : max(0.0, _1051))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1060 = 1.0;
    }
    float _1064 = (_1060 * cbModelParam._m0[1u].x) + (_1049 * (1.0 - cbModelParam._m0[1u].x));
    float _1070 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1151;
    float _1153;
    float _1155;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1118 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1122 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1126 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1129 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1132 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1135 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1161;
        if (_1129 > 0.0)
        {
            _1161 = abs((1.0 - _1118) / _1129);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1129 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1118 + 1.0) / _1129);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1161 = frontier_phi_54_52_ladder;
        }
        float _1349;
        if (_1132 > 0.0)
        {
            _1349 = abs((1.0 - _1122) / _1132);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1132 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1122 + 1.0) / _1132);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1349 = frontier_phi_63_59_ladder;
        }
        float _1705;
        if (_1135 > 0.0)
        {
            _1705 = abs((1.0 - _1126) / _1135);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1135 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1126 + 1.0) / _1135);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _1705 = frontier_phi_75_70_ladder;
        }
        float _1707 = isnan(_1349) ? _1161 : (isnan(_1161) ? _1349 : min(_1161, _1349));
        float _1708 = isnan(_1705) ? _1707 : (isnan(_1707) ? _1705 : min(_1707, _1705));
        float _1712 = (_1708 * _1129) + _1118;
        float _1713 = (_1708 * _1132) + _1122;
        float _1714 = (_1708 * _1135) + _1126;
        float _1715 = _1708 * 9.9999997473787516355514526367188e-05;
        float _1717 = (-1.0) - _1715;
        float _1719 = _1715 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_1714 > _1719) || ((_1714 < _1717) || ((_1713 > _1719) || ((_1713 < _1717) || ((_1712 < _1717) || (_1712 > _1719))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1714, cbModelParam._m0[9u].z, fma(_1713, cbModelParam._m0[9u].y, _1712 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1714, cbModelParam._m0[10u].z, fma(_1713, cbModelParam._m0[10u].y, _1712 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1714, cbModelParam._m0[11u].z, fma(_1713, cbModelParam._m0[11u].y, _1712 * cbModelParam._m0[11u].x))), _1070);
            frontier_phi_53_75_ladder = _1948.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _1948.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _1948.x * cbModelParam._m0[1u].y;
        }
        _1151 = frontier_phi_53_75_ladder_2;
        _1153 = frontier_phi_53_75_ladder_1;
        _1155 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1139 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1070);
        _1151 = _1139.x * cbModelParam._m0[1u].y;
        _1153 = _1139.y * cbModelParam._m0[1u].y;
        _1155 = _1139.z * cbModelParam._m0[1u].y;
    }
    float _1158 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1246;
    float _1248;
    float _1250;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1210 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1214 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1218 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1221 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1224 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1227 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1354;
        if (_1221 > 0.0)
        {
            _1354 = abs((1.0 - _1210) / _1221);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1221 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1210 + 1.0) / _1221);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1354 = frontier_phi_65_61_ladder;
        }
        float _1732;
        if (_1224 > 0.0)
        {
            _1732 = abs((1.0 - _1214) / _1224);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1214 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1732 = frontier_phi_77_72_ladder;
        }
        float _2064;
        if (_1227 > 0.0)
        {
            _2064 = abs((1.0 - _1218) / _1227);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1218 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2064 = frontier_phi_89_84_ladder;
        }
        float _2066 = isnan(_1732) ? _1354 : (isnan(_1354) ? _1732 : min(_1354, _1732));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1221) + _1210;
        float _2072 = (_2067 * _1224) + _1214;
        float _2073 = (_2067 * _1227) + _1218;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2074;
        float _2077 = _2074 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2073 > _2077) || ((_2073 < _2075) || ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 < _2075) || (_2071 > _2077))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2179 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2073, cbModelParam._m0[17u].z, fma(_2072, cbModelParam._m0[17u].y, _2071 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2073, cbModelParam._m0[18u].z, fma(_2072, cbModelParam._m0[18u].y, _2071 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2073, cbModelParam._m0[19u].z, fma(_2072, cbModelParam._m0[19u].y, _2071 * cbModelParam._m0[19u].x))), _1158);
            frontier_phi_62_89_ladder = _2179.x * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2179.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2179.z * cbModelParam._m0[1u].z;
        }
        _1246 = frontier_phi_62_89_ladder;
        _1248 = frontier_phi_62_89_ladder_1;
        _1250 = frontier_phi_62_89_ladder_2;
    }
    else
    {
        vec4 _1230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1158);
        _1246 = _1230.x * cbModelParam._m0[1u].z;
        _1248 = _1230.y * cbModelParam._m0[1u].z;
        _1250 = _1230.z * cbModelParam._m0[1u].z;
    }
    float _1262 = _672 * 0.01200000010430812835693359375;
    float _1264 = _1262 * ((cbModelParam._m0[1u].w * (_1246 - _1151)) + _1151);
    float _1265 = _1262 * ((cbModelParam._m0[1u].w * (_1248 - _1153)) + _1153);
    float _1266 = _1262 * ((cbModelParam._m0[1u].w * (_1250 - _1155)) + _1155);
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, _1264 * cbSceneParam._m0[91u].x));
    float _1328 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1332 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1336 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1340 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1341 = _1328 / _1340;
    float _1342 = _1332 / _1340;
    float _1343 = _1336 / _1340;
    float _1491;
    float _1492;
    float _1493;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1370 = ((uint(_1343 > cbSceneParam._m0[59u].y) + uint(_1343 > cbSceneParam._m0[59u].x)) + uint(_1343 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1371 = _1370 + 43u;
        uint _1379 = _1370 + 44u;
        uint _1387 = _1370 + 45u;
        uint _1395 = _1370 + 46u;
        float _1406 = fma(_1340, cbSceneParam._m0[_1371].w, fma(_1336, cbSceneParam._m0[_1371].z, fma(_1332, cbSceneParam._m0[_1371].y, _1328 * cbSceneParam._m0[_1371].x)));
        float _1410 = fma(_1340, cbSceneParam._m0[_1379].w, fma(_1336, cbSceneParam._m0[_1379].z, fma(_1332, cbSceneParam._m0[_1379].y, _1328 * cbSceneParam._m0[_1379].x)));
        float _1418 = fma(_1340, cbSceneParam._m0[_1395].w, fma(_1336, cbSceneParam._m0[_1395].z, fma(_1332, cbSceneParam._m0[_1395].y, _1328 * cbSceneParam._m0[_1395].x)));
        float _1423 = cbSceneParam._m0[33u].z * _1418;
        float _1425 = cbSceneParam._m0[33u].w * _1418;
        float _1428 = fma(_1340, cbSceneParam._m0[_1387].w, fma(_1336, cbSceneParam._m0[_1387].z, fma(_1332, cbSceneParam._m0[_1387].y, _1328 * cbSceneParam._m0[_1387].x))) / _1418;
        float _1476 = (cbSceneParam._m0[33u].x - sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343))) * cbSceneParam._m0[33u].y;
        float _2925 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1484 = (isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1423 + _1406) / _1418, (_1425 + _1410) / _1418), _1428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1425 + _1406) / _1418, (_1410 - _1423) / _1418), _1428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1406 - _1423) / _1418, (_1410 - _1425) / _1418), _1428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1406 - _1425) / _1418, (_1423 + _1410) / _1418), _1428), 0.0)).x), vec4(0.25)));
        _1491 = 1.0 - (_1484 * cbSceneParam._m0[34u].x);
        _1492 = 1.0 - (_1484 * cbSceneParam._m0[34u].y);
        _1493 = 1.0 - (_1484 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1491 = 1.0;
        _1492 = 1.0;
        _1493 = 1.0;
    }
    float _1557;
    float _1559;
    float _1561;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1545 = fma(_1340, cbSceneParam._m0[63u].w, fma(_1336, cbSceneParam._m0[63u].z, fma(_1332, cbSceneParam._m0[63u].y, _1328 * cbSceneParam._m0[63u].x)));
        float _1546 = fma(_1340, cbSceneParam._m0[60u].w, fma(_1336, cbSceneParam._m0[60u].z, fma(_1332, cbSceneParam._m0[60u].y, _1328 * cbSceneParam._m0[60u].x))) / _1545;
        float _1547 = fma(_1340, cbSceneParam._m0[61u].w, fma(_1336, cbSceneParam._m0[61u].z, fma(_1332, cbSceneParam._m0[61u].y, _1328 * cbSceneParam._m0[61u].x))) / _1545;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_1546 >= cbSceneParam._m0[64u].x) && (_1547 >= cbSceneParam._m0[64u].y)) && (_1546 <= cbSceneParam._m0[64u].z)) && (_1547 <= cbSceneParam._m0[64u].w))
        {
            float _1745 = fma(_1340, cbSceneParam._m0[62u].w, fma(_1336, cbSceneParam._m0[62u].z, fma(_1332, cbSceneParam._m0[62u].y, _1328 * cbSceneParam._m0[62u].x))) / _1545;
            float _1749 = isnan(cbSceneParam._m0[41u].w) ? _1745 : (isnan(_1745) ? cbSceneParam._m0[41u].w : max(_1745, cbSceneParam._m0[41u].w));
            float _1792 = (cbSceneParam._m0[33u].x - sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343))) * cbSceneParam._m0[33u].y;
            float _2941 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
            float _1799 = (isnan(1.0) ? _2941 : (isnan(_2941) ? 1.0 : min(_2941, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1546, cbSceneParam._m0[33u].w + _1547), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1546, _1547 - cbSceneParam._m0[33u].z), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1546 - cbSceneParam._m0[33u].z, _1547 - cbSceneParam._m0[33u].w), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1546 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1547), _1749), 0.0)).x), vec4(0.25)));
            float _1803 = 1.0 - (_1799 * cbSceneParam._m0[34u].x);
            float _1804 = 1.0 - (_1799 * cbSceneParam._m0[34u].y);
            float _1805 = 1.0 - (_1799 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_1805) ? _1493 : (isnan(_1493) ? _1805 : min(_1493, _1805));
            frontier_phi_74_73_ladder_1 = isnan(_1804) ? _1492 : (isnan(_1492) ? _1804 : min(_1492, _1804));
            frontier_phi_74_73_ladder_2 = isnan(_1803) ? _1491 : (isnan(_1491) ? _1803 : min(_1491, _1803));
        }
        else
        {
            frontier_phi_74_73_ladder = _1493;
            frontier_phi_74_73_ladder_1 = _1492;
            frontier_phi_74_73_ladder_2 = _1491;
        }
        _1557 = frontier_phi_74_73_ladder_2;
        _1559 = frontier_phi_74_73_ladder_1;
        _1561 = frontier_phi_74_73_ladder;
    }
    else
    {
        _1557 = _1491;
        _1559 = _1492;
        _1561 = _1493;
    }
    uint _1563 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1568 = floatBitsToUint(cbInstanceData._m0[_1563 + 5u]);
    uint _1570 = _1568.x * 14u;
    uint _1571 = _1570 + 13u;
    float _1576 = _672 + (-1.0);
    float _1580 = (cbLight._m0[_1571].x * _1576) + 1.0;
    float _1581 = (cbLight._m0[_1571].y * _1576) + 1.0;
    uint _1582 = _1570 + 8u;
    float _1593 = cbLight._m0[_1570].x + _651;
    float _1594 = cbLight._m0[_1570].y + _652;
    float _1595 = cbLight._m0[_1570].z + _653;
    float _1599 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
    float _1603 = dot(vec3(0.0), vec3(cbLight._m0[_1570].xyz));
    float _2967 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1606 = isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0));
    float _1607 = dot(vec3(0.0), vec3(_651, _652, _653));
    float _2978 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1610 = isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0));
    float _1611 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1593 * _1599, _1594 * _1599, _1595 * _1599));
    float _2989 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1622 = (exp2(log2(1.0 - (isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1628 = (0.5 / ((_1606 + 9.9999999392252902907785028219223e-09) + _1610)) * _1606;
    float _3000 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1630 = (isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0))) * 0.31831014156341552734375;
    float _1632 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1645 = _1570 + 9u;
    uint _1651 = _1570 | 1u;
    float _1657 = cbLight._m0[_1651].x + _651;
    float _1658 = cbLight._m0[_1651].y + _652;
    float _1659 = cbLight._m0[_1651].z + _653;
    float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
    float _1667 = dot(vec3(0.0), vec3(cbLight._m0[_1651].xyz));
    float _3016 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1670 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    float _1671 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1657 * _1663, _1658 * _1663, _1659 * _1663));
    float _3027 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1680 = (exp2(log2(1.0 - (isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1684 = (0.5 / ((_1670 + 9.9999999392252902907785028219223e-09) + _1610)) * _1670;
    float _3038 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1686 = (isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * 0.31831014156341552734375;
    float _1687 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    float _1697 = (((_1680 * cbLight._m0[_1645].x) * _1686) * _1687) + ((((cbLight._m0[_1582].x * _1557) * _1622) * _1630) * _1632);
    float _1698 = (((_1680 * cbLight._m0[_1645].y) * _1686) * _1687) + ((((cbLight._m0[_1582].y * _1559) * _1622) * _1630) * _1632);
    float _1699 = (((_1680 * cbLight._m0[_1645].z) * _1686) * _1687) + ((((cbLight._m0[_1582].z * _1561) * _1622) * _1630) * _1632);
    float _1863;
    float _1865;
    float _1867;
    if (_1568.y == 0u)
    {
        uvec4 _1817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1818 = _1817.x;
        uint _1829 = uint((float(_1817.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _1818))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _1818)));
        float _1839 = (log2(_1343 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1840 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        uint _1843 = uint(isnan(14.0) ? _1840 : (isnan(_1840) ? 14.0 : min(_1840, 14.0)));
        uvec4 _1849 = texelFetch(g_lightClusterGridBuffer, int(((_1843 << 2u) + (_1829 << 6u)) >> 2u));
        uint _1850 = _1849.x;
        uint _1851 = _1817.z;
        float _1957;
        float _1959;
        float _1961;
        if (((((1u << ((_1851 >> 4u) & 15u)) + 4294967295u) & _1850) == 0u) || ((_1851 & 240u) == 0u))
        {
            _1957 = 0.0;
            _1959 = 0.0;
            _1961 = 0.0;
        }
        else
        {
            float _1958;
            float _1960;
            float _1962;
            float _2110 = 0.0;
            float _2111 = 0.0;
            float _2112 = 0.0;
            uint _2113 = 0u;
            uint _2122;
            bool _2123;
            for (;;)
            {
                _2122 = texelFetch(g_lightClassification, int((((_1843 << 5u) + (_1829 << 9u)) + (_2113 << 2u)) >> 2u)).x;
                _2123 = _2122 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                if (_2123)
                {
                    frontier_phi_98_pred = _2112;
                    frontier_phi_98_pred_1 = _2111;
                    frontier_phi_98_pred_2 = _2110;
                }
                else
                {
                    float _2246;
                    float _2247;
                    float _2248;
                    uint _2249;
                    _2246 = _2110;
                    _2247 = _2111;
                    _2248 = _2112;
                    _2249 = _2122;
                    float _2184;
                    float _2185;
                    float _2186;
                    for (;;)
                    {
                        uint _2253 = uint(findLSB(_2249)) + (_2113 << 5u);
                        uint _2250 = (_2249 + 4294967295u) & _2249;
                        uint _2255 = _2253 * 48u;
                        vec4 _2269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2255)).x, texelFetch(g_PointLightRenderingBuffer, int(_2255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2255 + 3u)).x));
                        uint _2286 = (_2253 * 48u) + 8u;
                        vec3 _2297 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2286)).x, texelFetch(g_PointLightRenderingBuffer, int(_2286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2286 + 2u)).x));
                        float _2301 = _2269.x - _1341;
                        float _2302 = _2269.y - _1342;
                        float _2303 = _2269.z - _1343;
                        float _2304 = dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303));
                        float _2307 = inversesqrt(_2304);
                        float _2316 = 1.0 - (_2304 * _2269.w);
                        float _3064 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
                        float _2318 = sqrt(_2304) * uintBitsToFloat(uvec4(_2276, _2277, _2278, texelFetch(g_PointLightRenderingBuffer, int(((_2253 * 48u) + 4u) + 3u)).x)).w;
                        float _2321 = 1.39999997615814208984375 / (_2318 + 1.39999997615814208984375);
                        float _2322 = _2321 * _2321;
                        float _2325 = ((1.0 - _2322) * dot(vec3(0.0), vec3(_2307 * _2301, _2307 * _2302, _2307 * _2303))) + _2322;
                        float _2327 = (-0.0) - _1341;
                        float _2328 = (-0.0) - _1342;
                        float _2329 = (-0.0) - _1343;
                        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
                        float _2337 = dot(vec3(0.0), vec3(_2333 * _2327, _2333 * _2328, _2333 * _2329));
                        float _3075 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
                        float _3086 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
                        float _2341 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
                        float _2345 = (0.5 / (((isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0))) + 9.9999999392252902907785028219223e-09) + _2341)) * _2341;
                        float _3097 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
                        float _2354 = (((isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * 3.1415927410125732421875) / (((_2318 * _2318) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0)));
                        _2184 = (_2354 * _2297.x) + _2246;
                        _2185 = (_2354 * _2297.y) + _2247;
                        _2186 = (_2354 * _2297.z) + _2248;
                        if (_2250 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2246 = _2184;
                            _2247 = _2185;
                            _2248 = _2186;
                            _2249 = _2250;
                        }
                    }
                    frontier_phi_98_pred = _2186;
                    frontier_phi_98_pred_1 = _2185;
                    frontier_phi_98_pred_2 = _2184;
                }
                _1962 = frontier_phi_98_pred;
                _1960 = frontier_phi_98_pred_1;
                _1958 = frontier_phi_98_pred_2;
                uint _2114 = _2113 + 1u;
                if (_2114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2110 = _1958;
                    _2111 = _1960;
                    _2112 = _1962;
                    _2113 = _2114;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1957 = _1958;
            _1959 = _1960;
            _1961 = _1962;
        }
        uvec4 _1965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1966 = _1965.z;
        uint _1968 = (_1966 >> 8u) & 15u;
        float _2090;
        float _2092;
        float _2094;
        if (((4294967295u << _1968) & _1850) == 0u)
        {
            _2090 = _1957;
            _2092 = _1959;
            _2094 = _1961;
        }
        else
        {
            float _2106 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            if (_1968 < ((_1966 >> 12u) & 15u))
            {
                float _2091;
                float _2093;
                float _2095;
                float _2232 = _1957;
                float _2233 = _1959;
                float _2234 = _1961;
                uint _2235 = _1968;
                uint _2244;
                bool _2245;
                for (;;)
                {
                    _2244 = texelFetch(g_lightClassification, int((((_1843 << 5u) + (_1829 << 9u)) + (_2235 << 2u)) >> 2u)).x;
                    _2245 = _2244 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    if (_2245)
                    {
                        frontier_phi_104_pred = _2234;
                        frontier_phi_104_pred_1 = _2233;
                        frontier_phi_104_pred_2 = _2232;
                    }
                    else
                    {
                        float _2359;
                        float _2360;
                        float _2361;
                        float _2580;
                        float _2581;
                        float _2582;
                        float _2369 = _2232;
                        float _2370 = _2233;
                        float _2371 = _2234;
                        uint _2372 = _2244;
                        uint _2373;
                        uint _2383;
                        vec4 _2398;
                        float _2399;
                        vec3 _2411;
                        vec4 _2426;
                        vec4 _2441;
                        float _2487;
                        bool _2488;
                        for (;;)
                        {
                            _2383 = ((_2235 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2372));
                            _2373 = (_2372 + 4294967295u) & _2372;
                            uint _2385 = _2383 * 40u;
                            _2398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2385 + 3u)).x));
                            _2399 = _2398.w;
                            uint _2401 = (_2383 * 40u) + 8u;
                            _2411 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2401 + 2u)).x));
                            uint _2413 = (_2383 * 40u) + 16u;
                            _2426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2413 + 3u)).x));
                            uint _2428 = (_2383 * 40u) + 20u;
                            _2441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 3u)).x));
                            uint _2443 = (_2383 * 40u) + 24u;
                            vec4 _2456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 3u)).x));
                            uint _2462 = (_2383 * 40u) + 28u;
                            vec4 _2475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2462 + 3u)).x));
                            _2487 = fma(_1343, _2475.z, fma(_1342, _2475.y, _2475.x * _1341)) + _2475.w;
                            _2488 = !((fma(_1343, _2456.z, fma(_1342, _2456.y, _2456.x * _1341)) + _2456.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            if (_2488)
                            {
                                float _2522 = _2398.x - _1341;
                                float _2523 = _2398.y - _1342;
                                float _2524 = _2398.z - _1343;
                                float _2525 = dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524));
                                float _2528 = inversesqrt(_2525);
                                float _2535 = 1.0 - (_2525 / (_2399 * _2399));
                                float _3108 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                                float _2537 = sqrt(_2525) * uintBitsToFloat(uvec4(_2491, _2492, _2493, texelFetch(g_SpotLightRenderingBuffer, int(((_2383 * 40u) + 4u) + 3u)).x)).w;
                                float _2539 = 1.39999997615814208984375 / (_2537 + 1.39999997615814208984375);
                                float _2540 = _2539 * _2539;
                                float _2543 = (fma(_1343, _2426.z, fma(_1342, _2426.y, _2426.x * _1341)) + _2426.w) / _2487;
                                float _2544 = (fma(_1343, _2441.z, fma(_1342, _2441.y, _2441.x * _1341)) + _2441.w) / _2487;
                                float _2548 = 1.0 - dot(vec2(_2543, _2544), vec2(_2543, _2544));
                                float _3119 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
                                float _2556 = dot(vec3(0.0), vec3((-0.0) - (_1341 * _2106), (-0.0) - (_1342 * _2106), (-0.0) - (_1343 * _2106)));
                                float _3130 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
                                float _2564 = ((1.0 - _2540) * dot(vec3(0.0), vec3(_2528 * _2522, _2528 * _2523, _2528 * _2524))) + _2540;
                                float _3141 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                                float _2565 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
                                float _2569 = (0.5 / (((isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) + 9.9999999392252902907785028219223e-09) + _2565)) * _2565;
                                float _3152 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                                float _2576 = ((isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0))) * (isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0)))) * (((isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0))) * 3.1415927410125732421875) / (((_2537 * _2537) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_110_pred = _2576 * _2411.z;
                                frontier_phi_110_pred_1 = _2576 * _2411.y;
                                frontier_phi_110_pred_2 = _2576 * _2411.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                            }
                            _2582 = frontier_phi_110_pred;
                            _2581 = frontier_phi_110_pred_1;
                            _2580 = frontier_phi_110_pred_2;
                            _2359 = _2580 + _2369;
                            _2360 = _2581 + _2370;
                            _2361 = _2582 + _2371;
                            if (_2373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2369 = _2359;
                                _2370 = _2360;
                                _2371 = _2361;
                                _2372 = _2373;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _2361;
                        frontier_phi_104_pred_1 = _2360;
                        frontier_phi_104_pred_2 = _2359;
                    }
                    _2095 = frontier_phi_104_pred;
                    _2093 = frontier_phi_104_pred_1;
                    _2091 = frontier_phi_104_pred_2;
                    uint _2236 = _2235 + 1u;
                    if (_2236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2232 = _2091;
                        _2233 = _2093;
                        _2234 = _2095;
                        _2235 = _2236;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2093;
                frontier_phi_91_92_ladder_1 = _2091;
                frontier_phi_91_92_ladder_2 = _2095;
            }
            else
            {
                frontier_phi_91_92_ladder = _1959;
                frontier_phi_91_92_ladder_1 = _1957;
                frontier_phi_91_92_ladder_2 = _1961;
            }
            _2090 = frontier_phi_91_92_ladder_1;
            _2092 = frontier_phi_91_92_ladder;
            _2094 = frontier_phi_91_92_ladder_2;
        }
        float _2099 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _1863 = ((_2090 * 0.039999999105930328369140625) * _2099) + _1697;
        _1865 = ((_2092 * 0.039999999105930328369140625) * _2099) + _1698;
        _1867 = ((_2094 * 0.039999999105930328369140625) * _2099) + _1699;
    }
    else
    {
        _1863 = _1697;
        _1865 = _1698;
        _1867 = _1699;
    }
    uint _1874 = (_1563 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1889 = (cbInstanceData._m0[_1874].x * ((_621 * ((_577.x * cbMtdParam._m0[14u].x) - _508)) + _508)) + ((_1863 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _1064)) * cbPerFrame._m0[3u].x);
    float _1890 = (cbInstanceData._m0[_1874].y * ((_621 * ((_577.y * cbMtdParam._m0[14u].y) - _509)) + _509)) + ((_1865 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _1064)) * cbPerFrame._m0[3u].x);
    float _1891 = (cbInstanceData._m0[_1874].z * ((_621 * ((_577.z * cbMtdParam._m0[14u].z) - _510)) + _510)) + ((_1867 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _1064)) * cbPerFrame._m0[3u].x);
    uint _1895 = _1563 + 6u;
    float _1903 = _659 / cbSceneParam._m0[86u].x;
    float _1904 = _660 / cbSceneParam._m0[86u].y;
    vec4 _1918 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1903, _1904, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1920 = _1918.x;
    float _1921 = _1918.y;
    float _1922 = _1918.z;
    float _1923 = _1918.w;
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _1976 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _1977 = _1976 / _646;
        float _1988 = _1977 * _257;
        float _1989 = _258 * _1977;
        float _1990 = (-0.0) - _1989;
        float _1991 = _1977 * _259;
        float _1993 = (cbSceneParam._m0[77u].w * _1990) / _1976;
        float _1994 = _1993 + cbSceneParam._m0[79u].w;
        float _1995 = cbSceneParam._m0[79u].w - _1989;
        float _2001 = sqrt(((_1988 * _1988) + (_1989 * _1989)) + (_1991 * _1991));
        float _2004 = (1.0 - (cbSceneParam._m0[77u].w / _1976)) * _2001;
        float _2009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2194;
        if (abs((_1990 - _1993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2194 = ((((_1994 > 0.0) ? exp2(_2009 * _1994) : (2.0 - exp2(_2011 * _1994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2004;
        }
        else
        {
            float _2136 = 1.0 / cbSceneParam._m0[80u].x;
            float _2137 = isnan(_1995) ? _1994 : (isnan(_1994) ? _1995 : max(_1994, _1995));
            float _2138 = isnan(_1995) ? _1994 : (isnan(_1994) ? _1995 : min(_1994, _1995));
            float _2147 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : min(_2137, 0.0));
            float _2148 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : min(_2138, 0.0));
            _2194 = ((abs(_2001 / _1990) * cbSceneParam._m0[80u].y) * ((((_2147 - _2148) * 2.0) - ((exp2(_2009 * (isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0)))) - exp2(_2009 * (isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))))) * _2136)) - ((exp2(_2011 * _2147) - exp2(_2011 * _2148)) * _2136))) + (_2004 * cbSceneParam._m0[80u].z);
        }
        vec4 _2196 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1903, _1904, 1.0), 0.0);
        float _2205 = exp2((_2194 * (-1.44269502162933349609375)) * (1.0 - _2196.w));
        float _2206 = log2(_2205);
        float _2222 = log2(_1923);
        _2013 = (exp2(_2222 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2206 * cbSceneParam._m0[78u].x)) * _2196.x) / cbSceneParam._m0[78u].x)) + _1920;
        _2015 = (exp2(_2222 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2206 * cbSceneParam._m0[78u].y)) * _2196.y) / cbSceneParam._m0[78u].y)) + _1921;
        _2017 = (exp2(_2222 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2206 * cbSceneParam._m0[78u].z)) * _2196.z) / cbSceneParam._m0[78u].z)) + _1922;
        _2019 = _2205 * _1923;
    }
    else
    {
        _2013 = _1920;
        _2015 = _1921;
        _2017 = _1922;
        _2019 = _1923;
    }
    float _2031 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2032 = _2031 == 3.0;
    float _2034 = log2(_2019);
    float _2041 = exp2(_2034 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)));
    float _2042 = exp2(_2034 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)));
    float _2043 = exp2(_2034 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)));
    float _2052 = (_2031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2052 * (_2032 ? _2041 : (_2041 + (cbSceneParam._m0[72u].w * _2013)));
    SV_Target.y = _2052 * (_2032 ? _2042 : (_2042 + (cbSceneParam._m0[72u].w * _2015)));
    SV_Target.z = _2052 * (_2032 ? _2043 : (_2043 + (cbSceneParam._m0[72u].w * _2017)));
    SV_Target.w = cbInstanceData._m0[_1895].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1895].w;
}


