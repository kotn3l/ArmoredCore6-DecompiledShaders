#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _798;
float _2731;
float _2732;
float _2733;
float _2734;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _192 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _250 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _240);
    float _251 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _240);
    float _252 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _240);
    float _278 = cbMtdParam._m0[22u].y + _250;
    float _279 = cbMtdParam._m0[22u].z + _251;
    float _280 = cbMtdParam._m0[22u].w + _252;
    float _297 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _298 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_192 * TANGENT.x, _192 * TANGENT.y, _192 * TANGENT.z));
    float _299 = (-0.0) - dot(vec3(_278, _279, _280), vec3((-0.0) - (NORMAL.x * _188), (-0.0) - (NORMAL.y * _188), (-0.0) - (NORMAL.z * _188)));
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _303 * _299;
    float _306 = (cbMtdParam._m0[19u].x * _297) * _303;
    float _308 = (cbMtdParam._m0[18u].w * _298) * _303;
    float _309 = fract(TEXCOORD.x);
    float _310 = fract(TEXCOORD.y);
    float _316;
    if (_306 > 0.0)
    {
        _316 = (1.0 - _309) / _306;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _309) / _306;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _316 = frontier_phi_3_2_ladder;
    }
    float _324;
    if (_308 > 0.0)
    {
        _324 = (1.0 - _310) / _308;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _310) / _308;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _324 = frontier_phi_7_6_ladder;
    }
    float _328 = (_304 > 0.0) ? (cbMtdParam._m0[15u].x / _304) : 5000.0;
    float _329 = isnan(_324) ? _316 : (isnan(_316) ? _324 : min(_316, _324));
    float _330 = isnan(_328) ? _329 : (isnan(_329) ? _328 : min(_329, _328));
    float _334 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = ((_330 * _304) + _334) / _334;
    vec4 _367 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_309 + (-0.5)) + (_330 * _306)) / _341) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_310 + (-0.5)) + (_330 * _308)) / _341) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _378 = cbMtdParam._m0[9u].x * _367.x;
    float _379 = cbMtdParam._m0[9u].y * _367.y;
    float _380 = cbMtdParam._m0[9u].z * _367.z;
    float _2753 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2764 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _2775 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _399 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _404 = _250 * _403;
    float _405 = _251 * _403;
    float _406 = _252 * _403;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _510 = sqrt(((_250 * _250) + (_251 * _251)) + (_252 * _252));
        float _517 = (cbMatDynParam._m0[5u].x * _510) + cbMatDynParam._m0[5u].y;
        float _2786 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
        float _518 = isnan(1.0) ? _2786 : (isnan(_2786) ? 1.0 : min(_2786, 1.0));
        float _522 = (cbMatDynParam._m0[5u].z * _510) + cbMatDynParam._m0[5u].w;
        float _2797 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2797 : (isnan(_2797) ? 1.0 : min(_2797, 1.0))) - _518)) + _518) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _426 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _427 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _440 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = _440 + 9u;
    uint _443 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2753 : (isnan(_2753) ? 1.0 : min(_2753, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2764 : (isnan(_2764) ? 1.0 : min(_2764, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2775 : (isnan(_2775) ? 1.0 : min(_2775, 1.0)))) * cbInstanceData._m0[_443].z;
    float _2808 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _2808 : (isnan(_2808) ? 1.0 : min(_2808, 1.0));
    float _2819 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0));
    float _2830 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _2830 : (isnan(_2830) ? 1.0 : min(_2830, 1.0));
    vec4 _463 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _426, cbSceneParam._m0[86u].y * _427));
    float _466 = _463.x * TEXCOORD.z;
    float _467 = (-0.0) - _404;
    float _468 = (-0.0) - _405;
    float _469 = (-0.0) - _406;
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _495 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _797;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _584 = (cbModelParam._m0[37u].x * ((((fma(_499, cbModelParam._m0[26u].z, fma(_495, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _491)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _586 = (cbModelParam._m0[37u].y * ((((fma(_499, cbModelParam._m0[27u].z, fma(_495, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _491)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _587 = (((((fma(_499, cbModelParam._m0[28u].z, fma(_495, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _491)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        float _624 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _624 * (_590.x + (-0.5));
        float _627 = _624 * (_590.y + (-0.5));
        float _628 = _624 * (_590.z + (-0.5));
        float _635 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_597.x + (-0.5));
        float _637 = _635 * (_597.y + (-0.5));
        float _638 = _635 * (_597.z + (-0.5));
        float _645 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_604.x + (-0.5));
        float _647 = _645 * (_604.y + (-0.5));
        float _648 = _645 * (_604.z + (-0.5));
        float _655 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_611.x + (-0.5));
        float _657 = _655 * (_611.y + (-0.5));
        float _658 = _655 * (_611.z + (-0.5));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = _626 * 0.5;
        float _663 = _636 * 0.5;
        float _664 = _646 * 0.5;
        float _665 = dot(vec3(_662, _663, _664), vec3(_662, _663, _664));
        float _670 = (_665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_665);
        float _679 = (dot(vec3(0.0), vec3(_670 * _662, _670 * _663, _670 * _664)) + 1.0) * 0.5;
        float _2856 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _689 = sqrt(((_663 * _663) + (_662 * _662)) + (_664 * _664)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _2867 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _2867 : (isnan(_2867) ? 1.0 : min(_2867, 1.0));
        float _691 = _690 * 2.0;
        float _695 = (1.0 - _690) / (_690 + 1.0);
        float _2878 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _2878 : (isnan(_2878) ? 1.0 : min(_2878, 1.0));
        float _705 = ((((1.0 - _696) * (_691 + 2.0)) * exp2(log2(isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0))) * (_691 + 1.0))) + _696) * _659;
        float _706 = _627 * 0.5;
        float _707 = _637 * 0.5;
        float _708 = _647 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _722 = (dot(vec3(0.0), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _2889 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _731 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _2900 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _2900 : (isnan(_2900) ? 1.0 : min(_2900, 1.0));
        float _733 = _732 * 2.0;
        float _737 = (1.0 - _732) / (_732 + 1.0);
        float _2911 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0));
        float _747 = ((((1.0 - _738) * (_733 + 2.0)) * exp2(log2(isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0))) * (_733 + 1.0))) + _738) * _660;
        float _748 = _628 * 0.5;
        float _749 = _638 * 0.5;
        float _750 = _648 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _764 = (dot(vec3(0.0), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _2922 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _773 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _2933 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _2944 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0))) * (_775 + 1.0))) + _780) * _661;
        _797 = _628;
        _799 = _627;
        _800 = _626;
        _801 = _638;
        _802 = _637;
        _803 = _636;
        _804 = _648;
        _805 = _647;
        _806 = _646;
        _807 = _661;
        _808 = _660;
        _809 = _659;
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
    }
    else
    {
        _797 = _798;
        _799 = _798;
        _800 = _798;
        _801 = _798;
        _802 = _798;
        _803 = _798;
        _804 = _798;
        _805 = _798;
        _806 = _798;
        _807 = _798;
        _808 = _798;
        _809 = _798;
        _810 = 0.0;
        _811 = 0.0;
        _812 = 0.0;
    }
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _869 = (cbModelParam._m0[38u].x * ((((fma(_499, cbModelParam._m0[30u].z, fma(_495, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _491)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _870 = (cbModelParam._m0[38u].y * ((((fma(_499, cbModelParam._m0[31u].z, fma(_495, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _491)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _871 = (((((fma(_499, cbModelParam._m0[32u].z, fma(_495, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _491)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        float _906 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_873.x + (-0.5));
        float _908 = _906 * (_873.y + (-0.5));
        float _909 = _906 * (_873.z + (-0.5));
        float _916 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_880.x + (-0.5));
        float _918 = _916 * (_880.y + (-0.5));
        float _919 = _916 * (_880.z + (-0.5));
        float _926 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_887.x + (-0.5));
        float _928 = _926 * (_887.y + (-0.5));
        float _929 = _926 * (_887.z + (-0.5));
        float _936 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_894.x + (-0.5));
        float _938 = _936 * (_894.y + (-0.5));
        float _939 = _936 * (_894.z + (-0.5));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = _907 * 0.5;
        float _944 = _917 * 0.5;
        float _945 = _927 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(0.0), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _2985 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _2996 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3007 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0))) * (_970 + 1.0))) + _975) * _940;
        float _985 = _908 * 0.5;
        float _986 = _918 * 0.5;
        float _987 = _928 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(0.0), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3018 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3029 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3040 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0))) * (_1012 + 1.0))) + _1017) * _941;
        float _1027 = _909 * 0.5;
        float _1028 = _919 * 0.5;
        float _1029 = _929 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(0.0), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3051 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3062 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3073 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0))) * (_1054 + 1.0))) + _1059) * _942;
        _1076 = _909;
        _1077 = _908;
        _1078 = _907;
        _1079 = _919;
        _1080 = _918;
        _1081 = _917;
        _1082 = _929;
        _1083 = _928;
        _1084 = _927;
        _1085 = _942;
        _1086 = _941;
        _1087 = _940;
        _1088 = cbModelParam._m0[36u].w * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1089 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
    }
    else
    {
        _1076 = _798;
        _1077 = _798;
        _1078 = _798;
        _1079 = _798;
        _1080 = _798;
        _1081 = _798;
        _1082 = _798;
        _1083 = _798;
        _1084 = _798;
        _1085 = _798;
        _1086 = _798;
        _1087 = _798;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1100 = (cbModelParam._m0[1u].x * (_1088 - _810)) + _810;
    float _1101 = (cbModelParam._m0[1u].x * (_1089 - _811)) + _811;
    float _1102 = (cbModelParam._m0[1u].x * (_1090 - _812)) + _812;
    float _1123 = fma(_1102, cbSceneParam._m0[89u].z, fma(_1101, cbSceneParam._m0[89u].y, _1100 * cbSceneParam._m0[89u].x));
    float _1126 = fma(_1102, cbSceneParam._m0[90u].z, fma(_1101, cbSceneParam._m0[90u].y, _1100 * cbSceneParam._m0[90u].x));
    float _1129 = fma(_1102, cbSceneParam._m0[91u].z, fma(_1101, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1100));
    float _1144 = _404 * (-0.5);
    float _1145 = _405 * (-0.5);
    float _1146 = _406 * (-0.5);
    float _1147 = dot(vec4(_1144, _1145, _1146, 1.0), vec4(_1078, _1081, _1084, _1087));
    float _1150 = dot(vec4(_1144, _1145, _1146, 1.0), vec4(_1077, _1080, _1083, _1086));
    float _1153 = dot(vec4(_1144, _1145, _1146, 1.0), vec4(_1076, _1079, _1082, _1085));
    float _1187;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1160 = dot(vec4(_1144, _1145, _1146, 1.0), vec4(_797, _801, _804, _807));
        float _1164 = dot(vec4(_1144, _1145, _1146, 1.0), vec4(_799, _802, _805, _808));
        float _1168 = dot(vec4(_1144, _1145, _1146, 1.0), vec4(_800, _803, _806, _809));
        float _1175 = dot(vec4(cbModelParam._m0[39u]), vec4(_1144, _1145, _1146, 1.0));
        _1187 = dot(vec3(isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1175) ? 0.0 : (isnan(0.0) ? _1175 : max(0.0, _1175))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1187 = 1.0;
    }
    float _1198;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1189 = dot(vec4(cbModelParam._m0[40u]), vec4(_1144, _1145, _1146, 1.0));
        _1198 = dot(vec3(isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)), isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1189) ? 0.0 : (isnan(0.0) ? _1189 : max(0.0, _1189))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1198 = 1.0;
    }
    float _1202 = (_1198 * cbModelParam._m0[1u].x) + (_1187 * (1.0 - cbModelParam._m0[1u].x));
    float _1211 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1293;
    float _1295;
    float _1297;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1260 = fma(_499, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _491)) + cbModelParam._m0[13u].w;
        float _1264 = fma(_499, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _491)) + cbModelParam._m0[14u].w;
        float _1268 = fma(_499, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _491)) + cbModelParam._m0[15u].w;
        float _1271 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1274 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1277 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1303;
        if (_1271 > 0.0)
        {
            _1303 = abs((1.0 - _1260) / _1271);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1271 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1260 + 1.0) / _1271);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1303 = frontier_phi_25_23_ladder;
        }
        float _1600;
        if (_1274 > 0.0)
        {
            _1600 = abs((1.0 - _1264) / _1274);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1274 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1264 + 1.0) / _1274);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1600 = frontier_phi_34_30_ladder;
        }
        float _1911;
        if (_1277 > 0.0)
        {
            _1911 = abs((1.0 - _1268) / _1277);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1277 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1268 + 1.0) / _1277);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1911 = frontier_phi_48_41_ladder;
        }
        float _1913 = isnan(_1600) ? _1303 : (isnan(_1303) ? _1600 : min(_1303, _1600));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1271) + _1260;
        float _1919 = (_1914 * _1274) + _1264;
        float _1920 = (_1914 * _1277) + _1268;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1921;
        float _1924 = _1921 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1920 > _1924) || ((_1920 < _1922) || ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 < _1922) || (_1918 > _1924))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1920, cbModelParam._m0[9u].z, fma(_1919, cbModelParam._m0[9u].y, _1918 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1920, cbModelParam._m0[10u].z, fma(_1919, cbModelParam._m0[10u].y, _1918 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1920, cbModelParam._m0[11u].z, fma(_1919, cbModelParam._m0[11u].y, _1918 * cbModelParam._m0[11u].x))), _1211);
            frontier_phi_24_48_ladder = _2059.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2059.x * cbModelParam._m0[1u].y;
        }
        _1293 = frontier_phi_24_48_ladder_2;
        _1295 = frontier_phi_24_48_ladder_1;
        _1297 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1281 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1211);
        _1293 = _1281.x * cbModelParam._m0[1u].y;
        _1295 = _1281.y * cbModelParam._m0[1u].y;
        _1297 = _1281.z * cbModelParam._m0[1u].y;
    }
    float _1300 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1353 = fma(_499, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _491)) + cbModelParam._m0[21u].w;
        float _1357 = fma(_499, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _491)) + cbModelParam._m0[22u].w;
        float _1361 = fma(_499, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _491)) + cbModelParam._m0[23u].w;
        float _1364 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1367 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1370 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1605;
        if (_1364 > 0.0)
        {
            _1605 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1605 = frontier_phi_36_32_ladder;
        }
        float _1937;
        if (_1367 > 0.0)
        {
            _1937 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1937 = frontier_phi_50_43_ladder;
        }
        float _2124;
        if (_1370 > 0.0)
        {
            _2124 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2124 = frontier_phi_68_61_ladder;
        }
        float _2126 = isnan(_1937) ? _1605 : (isnan(_1605) ? _1937 : min(_1605, _1937));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1364) + _1353;
        float _2132 = (_2127 * _1367) + _1357;
        float _2133 = (_2127 * _1370) + _1361;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2135 = (-1.0) - _2134;
        float _2137 = _2134 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2133 > _2137) || ((_2133 < _2135) || ((_2132 > _2137) || ((_2132 < _2135) || ((_2131 < _2135) || (_2131 > _2137))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2133, cbModelParam._m0[17u].z, fma(_2132, cbModelParam._m0[17u].y, _2131 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2133, cbModelParam._m0[18u].z, fma(_2132, cbModelParam._m0[18u].y, _2131 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2133, cbModelParam._m0[19u].z, fma(_2132, cbModelParam._m0[19u].y, _2131 * cbModelParam._m0[19u].x))), _1300);
            frontier_phi_33_68_ladder = _2325.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2325.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2325.x * cbModelParam._m0[1u].z;
        }
        _1389 = frontier_phi_33_68_ladder_2;
        _1391 = frontier_phi_33_68_ladder;
        _1393 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1300);
        _1389 = _1373.x * cbModelParam._m0[1u].z;
        _1391 = _1373.y * cbModelParam._m0[1u].z;
        _1393 = _1373.z * cbModelParam._m0[1u].z;
    }
    float _1405 = _466 * 0.01200000010430812835693359375;
    float _1407 = _1405 * ((cbModelParam._m0[1u].w * (_1389 - _1293)) + _1293);
    float _1408 = _1405 * ((cbModelParam._m0[1u].w * (_1391 - _1295)) + _1295);
    float _1409 = _1405 * ((cbModelParam._m0[1u].w * (_1393 - _1297)) + _1297);
    float _1412 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1415 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1418 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, _1407 * cbSceneParam._m0[91u].x));
    uvec4 _1428 = floatBitsToUint(cbInstanceData._m0[_440 + 5u]);
    uint _1430 = _1428.x * 14u;
    uint _1431 = _1430 + 13u;
    float _1436 = _466 + (-1.0);
    float _1440 = (cbLight._m0[_1431].x * _1436) + 1.0;
    float _1441 = (cbLight._m0[_1431].y * _1436) + 1.0;
    uint _1442 = _1430 + 5u;
    float _1448 = isnan(1.0) ? _1441 : (isnan(_1441) ? 1.0 : min(_1441, 1.0));
    uint _1452 = _1430 + 4u;
    float _1458 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
    uint _1462 = _1430 | 1u;
    float _1473 = dot(vec3(cbLight._m0[_1430].xyz), vec3(0.0));
    float _1476 = dot(vec3(cbLight._m0[_1462].xyz), vec3(0.0));
    float _3209 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _3220 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
    float _1481 = (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * 0.3183098733425140380859375;
    float _1483 = (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) * 0.3183098733425140380859375;
    float _1490 = ((cbLight._m0[_1442].x * _1448) * _1483) + ((cbLight._m0[_1452].x * _1458) * _1481);
    float _1491 = ((_1448 * cbLight._m0[_1442].y) * _1483) + ((_1458 * cbLight._m0[_1452].y) * _1481);
    float _1492 = ((_1448 * cbLight._m0[_1442].z) * _1483) + ((_1458 * cbLight._m0[_1452].z) * _1481);
    uint _1493 = _1430 + 8u;
    float _1499 = cbLight._m0[_1430].x + _404;
    float _1500 = cbLight._m0[_1430].y + _405;
    float _1501 = cbLight._m0[_1430].z + _406;
    float _1505 = inversesqrt(dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501)));
    float _1509 = dot(vec3(0.0), vec3(cbLight._m0[_1430].xyz));
    float _3231 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1512 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _1513 = dot(vec3(0.0), vec3(_404, _405, _406));
    float _3242 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1516 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _1517 = dot(vec3(cbLight._m0[_1430].xyz), vec3(_1499 * _1505, _1500 * _1505, _1501 * _1505));
    float _3253 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1528 = (exp2(log2(1.0 - (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1534 = (0.5 / ((_1512 + 9.9999999392252902907785028219223e-09) + _1516)) * _1512;
    float _3264 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _1536 = (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * 0.31831014156341552734375;
    uint _1547 = _1430 + 9u;
    float _1553 = cbLight._m0[_1462].x + _404;
    float _1554 = cbLight._m0[_1462].y + _405;
    float _1555 = cbLight._m0[_1462].z + _406;
    float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
    float _1563 = dot(vec3(0.0), vec3(cbLight._m0[_1462].xyz));
    float _3275 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1566 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _1567 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_1553 * _1559, _1554 * _1559, _1555 * _1559));
    float _3286 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1576 = (exp2(log2(1.0 - (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1580 = (0.5 / ((_1566 + 9.9999999392252902907785028219223e-09) + _1516)) * _1566;
    float _3297 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _1582 = (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * 0.31831014156341552734375;
    float _1592 = (((_1576 * cbLight._m0[_1547].x) * _1582) * _1448) + (((_1528 * cbLight._m0[_1493].x) * _1536) * _1458);
    float _1593 = (((_1576 * cbLight._m0[_1547].y) * _1582) * _1448) + (((_1528 * cbLight._m0[_1493].y) * _1536) * _1458);
    float _1594 = (((_1576 * cbLight._m0[_1547].z) * _1582) * _1448) + (((_1528 * cbLight._m0[_1493].z) * _1536) * _1458);
    float _1710;
    float _1712;
    float _1714;
    float _1716;
    float _1718;
    float _1720;
    if (_1428.y == 0u)
    {
        float _1650 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1651 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1650;
        float _1652 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1650;
        float _1653 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1650;
        uvec4 _1665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1666 = _1665.x;
        uint _1677 = uint((float(_1665.y) * floor(float(uint(cbSceneParam._m0[85u].y * _427) / _1666))) + floor(float(uint(cbSceneParam._m0[85u].x * _426) / _1666)));
        float _1687 = (log2(_1653 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1688 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        uint _1691 = uint(isnan(14.0) ? _1688 : (isnan(_1688) ? 14.0 : min(_1688, 14.0)));
        uvec4 _1696 = texelFetch(g_lightClusterGridBuffer, int(((_1691 << 2u) + (_1677 << 6u)) >> 2u));
        uint _1697 = _1696.x;
        uint _1698 = _1665.z;
        float _1788;
        float _1790;
        float _1792;
        float _1794;
        float _1796;
        float _1798;
        if (((((1u << ((_1698 >> 4u) & 15u)) + 4294967295u) & _1697) == 0u) || ((_1698 & 240u) == 0u))
        {
            _1788 = 0.0;
            _1790 = 0.0;
            _1792 = 0.0;
            _1794 = 0.0;
            _1796 = 0.0;
            _1798 = 0.0;
        }
        else
        {
            float _1789;
            float _1791;
            float _1793;
            float _1795;
            float _1797;
            float _1799;
            float _1971 = 0.0;
            float _1972 = 0.0;
            float _1973 = 0.0;
            float _1974 = 0.0;
            float _1975 = 0.0;
            float _1976 = 0.0;
            uint _1977 = 0u;
            uint _1986;
            bool _1987;
            for (;;)
            {
                _1986 = texelFetch(g_lightClassification, int((((_1691 << 5u) + (_1677 << 9u)) + (_1977 << 2u)) >> 2u)).x;
                _1987 = _1986 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_1987)
                {
                    frontier_phi_63_pred = _1973;
                    frontier_phi_63_pred_1 = _1976;
                    frontier_phi_63_pred_2 = _1975;
                    frontier_phi_63_pred_3 = _1974;
                    frontier_phi_63_pred_4 = _1972;
                    frontier_phi_63_pred_5 = _1971;
                }
                else
                {
                    float _2167;
                    float _2168;
                    float _2169;
                    float _2170;
                    float _2171;
                    float _2172;
                    uint _2173;
                    _2167 = _1971;
                    _2168 = _1972;
                    _2169 = _1973;
                    _2170 = _1974;
                    _2171 = _1975;
                    _2172 = _1976;
                    _2173 = _1986;
                    float _2068;
                    float _2069;
                    float _2070;
                    float _2071;
                    float _2072;
                    float _2073;
                    for (;;)
                    {
                        uint _2177 = uint(findLSB(_2173)) + (_1977 << 5u);
                        uint _2174 = (_2173 + 4294967295u) & _2173;
                        uint _2179 = _2177 * 48u;
                        vec4 _2193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2179)).x, texelFetch(g_PointLightRenderingBuffer, int(_2179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2179 + 3u)).x));
                        uint _2199 = (_2177 * 48u) + 4u;
                        vec4 _2212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2199)).x, texelFetch(g_PointLightRenderingBuffer, int(_2199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2199 + 3u)).x));
                        uint _2218 = (_2177 * 48u) + 8u;
                        vec3 _2229 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2218)).x, texelFetch(g_PointLightRenderingBuffer, int(_2218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2218 + 2u)).x));
                        float _2233 = _2193.x - _1651;
                        float _2234 = _2193.y - _1652;
                        float _2235 = _2193.z - _1653;
                        float _2236 = dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235));
                        float _2239 = inversesqrt(_2236);
                        float _2248 = 1.0 - (_2236 * _2193.w);
                        float _3318 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
                        float _2249 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
                        float _2250 = sqrt(_2236) * _2212.w;
                        float _2253 = 1.39999997615814208984375 / (_2250 + 1.39999997615814208984375);
                        float _2254 = _2253 * _2253;
                        float _2257 = ((1.0 - _2254) * dot(vec3(0.0), vec3(_2239 * _2233, _2239 * _2234, _2239 * _2235))) + _2254;
                        float _2260 = _2250 * _2250;
                        float _2264 = ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2249) / ((_2260 * 0.699999988079071044921875) + 1.0);
                        float _2268 = (-0.0) - _1651;
                        float _2269 = (-0.0) - _1652;
                        float _2270 = (-0.0) - _1653;
                        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
                        float _2278 = dot(vec3(0.0), vec3(_2274 * _2268, _2274 * _2269, _2274 * _2270));
                        float _3334 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
                        float _3345 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
                        float _2282 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
                        float _2286 = (0.5 / (((isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) + 9.9999999392252902907785028219223e-09) + _2282)) * _2282;
                        float _3356 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
                        float _2295 = (((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 3.1415927410125732421875) / ((_2260 * 2.1991131305694580078125) + 3.141590118408203125)) * _2249;
                        _2071 = (_2264 * _2212.x) + _2170;
                        _2072 = (_2264 * _2212.y) + _2171;
                        _2073 = (_2264 * _2212.z) + _2172;
                        _2068 = (_2295 * _2229.x) + _2167;
                        _2069 = (_2295 * _2229.y) + _2168;
                        _2070 = (_2295 * _2229.z) + _2169;
                        if (_2174 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2167 = _2068;
                            _2168 = _2069;
                            _2169 = _2070;
                            _2170 = _2071;
                            _2171 = _2072;
                            _2172 = _2073;
                            _2173 = _2174;
                        }
                    }
                    frontier_phi_63_pred = _2070;
                    frontier_phi_63_pred_1 = _2073;
                    frontier_phi_63_pred_2 = _2072;
                    frontier_phi_63_pred_3 = _2071;
                    frontier_phi_63_pred_4 = _2069;
                    frontier_phi_63_pred_5 = _2068;
                }
                _1793 = frontier_phi_63_pred;
                _1799 = frontier_phi_63_pred_1;
                _1797 = frontier_phi_63_pred_2;
                _1795 = frontier_phi_63_pred_3;
                _1791 = frontier_phi_63_pred_4;
                _1789 = frontier_phi_63_pred_5;
                uint _1978 = _1977 + 1u;
                if (_1978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1971 = _1789;
                    _1972 = _1791;
                    _1973 = _1793;
                    _1974 = _1795;
                    _1975 = _1797;
                    _1976 = _1799;
                    _1977 = _1978;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1788 = _1789;
            _1790 = _1791;
            _1792 = _1793;
            _1794 = _1795;
            _1796 = _1797;
            _1798 = _1799;
        }
        uvec4 _1802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1803 = _1802.z;
        uint _1805 = (_1803 >> 8u) & 15u;
        float _1942;
        float _1944;
        float _1946;
        float _1948;
        float _1950;
        float _1952;
        if (((4294967295u << _1805) & _1697) == 0u)
        {
            _1942 = _1788;
            _1944 = _1790;
            _1946 = _1792;
            _1948 = _1794;
            _1950 = _1796;
            _1952 = _1798;
        }
        else
        {
            float _1967 = inversesqrt(dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_1805 < ((_1803 >> 12u) & 15u))
            {
                float _1943;
                float _1945;
                float _1947;
                float _1949;
                float _1951;
                float _1953;
                float _2150 = _1788;
                float _2151 = _1790;
                float _2152 = _1792;
                float _2153 = _1794;
                float _2154 = _1796;
                float _2155 = _1798;
                uint _2156 = _1805;
                uint _2165;
                bool _2166;
                for (;;)
                {
                    _2165 = texelFetch(g_lightClassification, int((((_1691 << 5u) + (_1677 << 9u)) + (_2156 << 2u)) >> 2u)).x;
                    _2166 = _2165 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2166)
                    {
                        frontier_phi_77_pred = _2155;
                        frontier_phi_77_pred_1 = _2154;
                        frontier_phi_77_pred_2 = _2153;
                        frontier_phi_77_pred_3 = _2152;
                        frontier_phi_77_pred_4 = _2151;
                        frontier_phi_77_pred_5 = _2150;
                    }
                    else
                    {
                        float _2330;
                        float _2331;
                        float _2332;
                        float _2333;
                        float _2334;
                        float _2335;
                        float _2580;
                        float _2581;
                        float _2582;
                        float _2583;
                        float _2584;
                        float _2585;
                        float _2343 = _2150;
                        float _2344 = _2151;
                        float _2345 = _2152;
                        float _2346 = _2153;
                        float _2347 = _2154;
                        float _2348 = _2155;
                        uint _2349 = _2165;
                        uint _2350;
                        vec4 _2375;
                        float _2376;
                        vec4 _2391;
                        vec3 _2403;
                        vec4 _2418;
                        vec4 _2434;
                        float _2480;
                        bool _2481;
                        for (;;)
                        {
                            uint _2360 = ((_2156 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2349));
                            _2350 = (_2349 + 4294967295u) & _2349;
                            uint _2362 = _2360 * 40u;
                            _2375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2362 + 3u)).x));
                            _2376 = _2375.w;
                            uint _2378 = (_2360 * 40u) + 4u;
                            _2391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2378 + 3u)).x));
                            uint _2393 = (_2360 * 40u) + 8u;
                            _2403 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 2u)).x));
                            uint _2405 = (_2360 * 40u) + 16u;
                            _2418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2405 + 3u)).x));
                            uint _2421 = (_2360 * 40u) + 20u;
                            _2434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2421 + 3u)).x));
                            uint _2436 = (_2360 * 40u) + 24u;
                            vec4 _2449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 3u)).x));
                            uint _2455 = (_2360 * 40u) + 28u;
                            vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 3u)).x));
                            _2480 = fma(_1653, _2468.z, fma(_1652, _2468.y, _2468.x * _1651)) + _2468.w;
                            _2481 = !((fma(_1653, _2449.z, fma(_1652, _2449.y, _2449.x * _1651)) + _2449.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2481)
                            {
                                float _2508 = _2375.x - _1651;
                                float _2509 = _2375.y - _1652;
                                float _2510 = _2375.z - _1653;
                                float _2511 = dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510));
                                float _2514 = inversesqrt(_2511);
                                float _2515 = _2514 * _2508;
                                float _2516 = _2514 * _2509;
                                float _2517 = _2514 * _2510;
                                float _2521 = 1.0 - (_2511 / (_2376 * _2376));
                                float _3367 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
                                float _2522 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
                                float _2526 = sqrt(_2511) * _2391.w;
                                float _2528 = 1.39999997615814208984375 / (_2526 + 1.39999997615814208984375);
                                float _2529 = _2528 * _2528;
                                float _2530 = 1.0 - _2529;
                                float _2532 = (_2530 * dot(vec3(_2515, _2516, _2517), vec3(0.0))) + _2529;
                                float _2535 = _2526 * _2526;
                                float _2539 = (fma(_1653, _2418.z, fma(_1652, _2418.y, _2418.x * _1651)) + _2418.w) / _2480;
                                float _2540 = (fma(_1653, _2434.z, fma(_1652, _2434.y, _2434.x * _1651)) + _2434.w) / _2480;
                                float _2544 = 1.0 - dot(vec2(_2539, _2540), vec2(_2539, _2540));
                                float _3383 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                                float _2545 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
                                float _2546 = _2545 * (((isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))) * _2522) / ((_2535 * 0.699999988079071044921875) + 1.0));
                                float _2556 = dot(vec3(0.0), vec3((-0.0) - (_1651 * _1967), (-0.0) - (_1652 * _1967), (-0.0) - (_1653 * _1967)));
                                float _3394 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
                                float _2564 = (_2530 * dot(vec3(0.0), vec3(_2515, _2516, _2517))) + _2529;
                                float _3405 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                                float _2565 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
                                float _2569 = (0.5 / (((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) + 9.9999999392252902907785028219223e-09) + _2565)) * _2565;
                                float _3416 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                                float _2576 = (_2545 * _2522) * (((isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 3.1415927410125732421875) / ((_2535 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2546 * _2391.x;
                                frontier_phi_83_pred_1 = _2546 * _2391.z;
                                frontier_phi_83_pred_2 = _2546 * _2391.y;
                                frontier_phi_83_pred_3 = _2576 * _2403.z;
                                frontier_phi_83_pred_4 = _2576 * _2403.y;
                                frontier_phi_83_pred_5 = _2576 * _2403.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2583 = frontier_phi_83_pred;
                            _2585 = frontier_phi_83_pred_1;
                            _2584 = frontier_phi_83_pred_2;
                            _2582 = frontier_phi_83_pred_3;
                            _2581 = frontier_phi_83_pred_4;
                            _2580 = frontier_phi_83_pred_5;
                            _2333 = _2583 + _2346;
                            _2334 = _2584 + _2347;
                            _2335 = _2585 + _2348;
                            _2330 = _2580 + _2343;
                            _2331 = _2581 + _2344;
                            _2332 = _2582 + _2345;
                            if (_2350 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2343 = _2330;
                                _2344 = _2331;
                                _2345 = _2332;
                                _2346 = _2333;
                                _2347 = _2334;
                                _2348 = _2335;
                                _2349 = _2350;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2335;
                        frontier_phi_77_pred_1 = _2334;
                        frontier_phi_77_pred_2 = _2333;
                        frontier_phi_77_pred_3 = _2332;
                        frontier_phi_77_pred_4 = _2331;
                        frontier_phi_77_pred_5 = _2330;
                    }
                    _1953 = frontier_phi_77_pred;
                    _1951 = frontier_phi_77_pred_1;
                    _1949 = frontier_phi_77_pred_2;
                    _1947 = frontier_phi_77_pred_3;
                    _1945 = frontier_phi_77_pred_4;
                    _1943 = frontier_phi_77_pred_5;
                    uint _2157 = _2156 + 1u;
                    if (_2157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2150 = _1943;
                        _2151 = _1945;
                        _2152 = _1947;
                        _2153 = _1949;
                        _2154 = _1951;
                        _2155 = _1953;
                        _2156 = _2157;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1945;
                frontier_phi_52_53_ladder_1 = _1953;
                frontier_phi_52_53_ladder_2 = _1951;
                frontier_phi_52_53_ladder_3 = _1949;
                frontier_phi_52_53_ladder_4 = _1947;
                frontier_phi_52_53_ladder_5 = _1943;
            }
            else
            {
                frontier_phi_52_53_ladder = _1790;
                frontier_phi_52_53_ladder_1 = _1798;
                frontier_phi_52_53_ladder_2 = _1796;
                frontier_phi_52_53_ladder_3 = _1794;
                frontier_phi_52_53_ladder_4 = _1792;
                frontier_phi_52_53_ladder_5 = _1788;
            }
            _1942 = frontier_phi_52_53_ladder_5;
            _1944 = frontier_phi_52_53_ladder;
            _1946 = frontier_phi_52_53_ladder_4;
            _1948 = frontier_phi_52_53_ladder_3;
            _1950 = frontier_phi_52_53_ladder_2;
            _1952 = frontier_phi_52_53_ladder_1;
        }
        float _1957 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
        _1710 = (_1957 * _1948) + _1490;
        _1712 = (_1957 * _1950) + _1491;
        _1714 = (_1957 * _1952) + _1492;
        _1716 = ((_1942 * 0.039999999105930328369140625) * _1957) + _1592;
        _1718 = ((_1944 * 0.039999999105930328369140625) * _1957) + _1593;
        _1720 = ((_1946 * 0.039999999105930328369140625) * _1957) + _1594;
    }
    else
    {
        _1710 = _1490;
        _1712 = _1491;
        _1714 = _1492;
        _1716 = _1592;
        _1718 = _1593;
        _1720 = _1594;
    }
    float _3432 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3443 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3454 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _1737 = ((isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_1710 + ((isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))) * _466))) + ((_1716 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _1202)) * cbPerFrame._m0[3u].x);
    float _1738 = ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1712 + ((isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))) * _466))) + ((_1718 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _1202)) * cbPerFrame._m0[3u].x);
    float _1739 = ((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_1714 + ((isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0))) * _466))) + ((_1720 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _1202)) * cbPerFrame._m0[3u].x);
    float _1740 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1741 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1742 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    uint _1743 = _440 + 6u;
    float _1751 = _426 / cbSceneParam._m0[86u].x;
    float _1752 = _427 / cbSceneParam._m0[86u].y;
    vec4 _1766 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1751, _1752, (log2((isnan(cbSceneParam._m0[77u].w) ? _399 : (isnan(_399) ? cbSceneParam._m0[77u].w : min(_399, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1768 = _1766.x;
    float _1769 = _1766.y;
    float _1770 = _1766.z;
    float _1771 = _1766.w;
    float _1851;
    float _1853;
    float _1855;
    float _1857;
    if (_399 > cbSceneParam._m0[78u].w)
    {
        float _1813 = isnan(_399) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _399 : min(cbSceneParam._m0[80u].w, _399));
        float _1814 = _1813 / _399;
        float _1825 = _1814 * _250;
        float _1826 = _251 * _1814;
        float _1827 = (-0.0) - _1826;
        float _1828 = _1814 * _252;
        float _1830 = (cbSceneParam._m0[77u].w * _1827) / _1813;
        float _1831 = _1830 + cbSceneParam._m0[79u].w;
        float _1832 = cbSceneParam._m0[79u].w - _1826;
        float _1838 = sqrt(((_1825 * _1825) + (_1826 * _1826)) + (_1828 * _1828));
        float _1841 = (1.0 - (cbSceneParam._m0[77u].w / _1813)) * _1838;
        float _1847 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1849 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2081;
        if (abs((_1827 - _1830) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2081 = ((((_1831 > 0.0) ? exp2(_1847 * _1831) : (2.0 - exp2(_1849 * _1831))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1841;
        }
        else
        {
            float _2000 = 1.0 / cbSceneParam._m0[80u].x;
            float _2001 = isnan(_1832) ? _1831 : (isnan(_1831) ? _1832 : max(_1831, _1832));
            float _2002 = isnan(_1832) ? _1831 : (isnan(_1831) ? _1832 : min(_1831, _1832));
            float _2011 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : min(_2001, 0.0));
            float _2012 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : min(_2002, 0.0));
            _2081 = ((abs(_1838 / _1827) * cbSceneParam._m0[80u].y) * ((((_2011 - _2012) * 2.0) - ((exp2(_1847 * (isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)))) - exp2(_1847 * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))))) * _2000)) - ((exp2(_1849 * _2011) - exp2(_1849 * _2012)) * _2000))) + (_1841 * cbSceneParam._m0[80u].z);
        }
        vec4 _2083 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1751, _1752, 1.0), 0.0);
        float _2092 = exp2((_2081 * (-1.44269502162933349609375)) * (1.0 - _2083.w));
        float _2093 = log2(_2092);
        float _2109 = log2(_1771);
        _1851 = (exp2(_2109 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2093 * cbSceneParam._m0[78u].x)) * _2083.x) / cbSceneParam._m0[78u].x)) + _1768;
        _1853 = (exp2(_2109 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2093 * cbSceneParam._m0[78u].y)) * _2083.y) / cbSceneParam._m0[78u].y)) + _1769;
        _1855 = (exp2(_2109 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2093 * cbSceneParam._m0[78u].z)) * _2083.z) / cbSceneParam._m0[78u].z)) + _1770;
        _1857 = _2092 * _1771;
    }
    else
    {
        _1851 = _1768;
        _1853 = _1769;
        _1855 = _1770;
        _1857 = _1771;
    }
    bool _2119;
    vec4 _1867;
    vec4 _1890;
    float _1892;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    bool _1910;
    for (;;)
    {
        _1867 = cbMatDynParam._m0[0u];
        float _1869 = roundEven(_1867.y);
        bool _1870 = _1869 == 3.0;
        float _1872 = log2(_1857);
        float _1879 = exp2(_1872 * cbSceneParam._m0[78u].x) * _1740;
        float _1880 = exp2(_1872 * cbSceneParam._m0[78u].y) * _1741;
        float _1881 = exp2(_1872 * cbSceneParam._m0[78u].z) * _1742;
        float _1888 = _413 + (-0.5);
        _1890 = cbMtdParam._m0[1u];
        _1892 = _1890.y * _1888;
        float _1895 = (_1869 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1896 = _1895 * (_1870 ? _1879 : (_1879 + (cbSceneParam._m0[72u].w * _1851)));
        _1897 = _1895 * (_1870 ? _1880 : (_1880 + (cbSceneParam._m0[72u].w * _1853)));
        _1898 = _1895 * (_1870 ? _1881 : (_1881 + (cbSceneParam._m0[72u].w * _1855)));
        _1899 = _1888 * 0.999000012874603271484375;
        _1910 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1910)
        {
            if ((cbInstanceData._m0[_440 + 7u].x + _1899) < 0.5)
            {
                _2119 = true;
                break;
            }
        }
        uint _2035 = _442 + uint(_1867.w);
        if ((cbInstanceData._m0[_2035].w < 1.0) && ((cbInstanceData._m0[_2035].w + _1899) < 0.5))
        {
            _2119 = true;
            break;
        }
        if ((_1892 + 1.0) < _1890.x)
        {
            _2119 = true;
            break;
        }
        _2119 = false;
        break;
    }
    float _2300;
    if (_2119)
    {
        discard_state = true;
        _2300 = 0.0;
    }
    else
    {
        _2300 = cbInstanceData._m0[_1743].w;
    }
    SV_Target.x = _1896;
    SV_Target.y = _1897;
    SV_Target.z = _1898;
    SV_Target.w = _2300;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1743].w;
    discard_exit();
}


