#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _944;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _184 = _183 * _176;
    float _185 = _183 * _177;
    float _186 = _183 * _178;
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = _190 * NORMAL.x;
    float _192 = _190 * NORMAL.y;
    float _193 = _190 * NORMAL.z;
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _198 = _197 * TANGENT.x;
    float _199 = _197 * TANGENT.y;
    float _200 = _197 * TANGENT.z;
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    vec4 _276 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.w;
    float _295 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _282) + cbMtdParam._m0[11u].x) * _276.x;
    float _297 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _282) + cbMtdParam._m0[11u].y) * _276.y;
    float _299 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _282) + cbMtdParam._m0[11u].z) * _276.z;
    float _325 = cbMtdParam._m0[22u].y + _255;
    float _326 = cbMtdParam._m0[22u].z + _256;
    float _327 = cbMtdParam._m0[22u].w + _257;
    float _341 = (-0.0) - dot(vec3(_325, _326, _327), vec3(_184, _185, _186));
    float _342 = (-0.0) - dot(vec3(_325, _326, _327), vec3(_198, _199, _200));
    float _343 = (-0.0) - dot(vec3(_325, _326, _327), vec3((-0.0) - _191, (-0.0) - _192, (-0.0) - _193));
    float _347 = inversesqrt(dot(vec3(_341, _342, _343), vec3(_341, _342, _343)));
    float _348 = _347 * _343;
    float _350 = (cbMtdParam._m0[19u].x * _341) * _347;
    float _352 = (cbMtdParam._m0[18u].w * _342) * _347;
    float _353 = fract(TEXCOORD.x);
    float _354 = fract(TEXCOORD.y);
    float _360;
    if (_350 > 0.0)
    {
        _360 = (1.0 - _353) / _350;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _353) / _350;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _360 = frontier_phi_3_2_ladder;
    }
    float _368;
    if (_352 > 0.0)
    {
        _368 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _368 = frontier_phi_7_6_ladder;
    }
    float _372 = (_348 > 0.0) ? (cbMtdParam._m0[15u].x / _348) : 5000.0;
    float _373 = isnan(_368) ? _360 : (isnan(_360) ? _368 : min(_360, _368));
    float _374 = isnan(_372) ? _373 : (isnan(_373) ? _372 : min(_373, _372));
    float _378 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = ((_374 * _348) + _378) / _378;
    vec4 _410 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_353 + (-0.5)) + (_374 * _350)) / _385) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_354 + (-0.5)) + (_374 * _352)) / _385) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    vec4 _440 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _448 = (_440.x * 2.0) + (-1.0);
    float _450 = (_440.y * 2.0) + (-1.0);
    float _451 = dot(vec2(_448, _450), vec2(_448, _450));
    float _3029 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))));
    float _457 = _440.z * _282;
    float _460 = fma(_456, _191, fma(_450, _198, _448 * _184));
    float _463 = fma(_456, _192, fma(_450, _199, _448 * _185));
    float _466 = fma(_456, _193, fma(_450, _200, _448 * _186));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    float _471 = _470 * _460;
    float _472 = _470 * _463;
    float _473 = _470 * _466;
    float _3040 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _474 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
    float _3051 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3062 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3073 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _493 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _497 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _498 = _255 * _497;
    float _499 = _256 * _497;
    float _500 = _257 * _497;
    float _506 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _507 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _528 = fma(_473, cbSceneParam._m0[5u].z, fma(_472, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _471));
    float _531 = fma(_473, cbSceneParam._m0[6u].z, fma(_472, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _471));
    float _534 = fma(_473, cbSceneParam._m0[7u].z, fma(_472, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _471));
    uint _547 = uint(roundEven(NORMAL.w)) * 13u;
    uint _549 = _547 + 9u;
    uint _550 = _549 + uint(cbMatDynParam._m0[0u].w);
    float _556 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0)))) * cbInstanceData._m0[_550].x;
    float _557 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * cbInstanceData._m0[_550].y;
    float _558 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0)))) * cbInstanceData._m0[_550].z;
    float _3084 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
    float _3095 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
    float _3106 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
    vec4 _570 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _506, cbSceneParam._m0[86u].y * _507));
    float _573 = _570.x * TEXCOORD.z;
    float _574 = dot(vec3(_471, _472, _473), vec3(_498, _499, _500));
    float _577 = _574 * 2.0;
    float _581 = (_577 * _471) - _498;
    float _582 = (_577 * _472) - _499;
    float _583 = (_577 * _473) - _500;
    float _587 = abs(dot(vec3(_498, _499, _500), vec3(_471, _472, _473)));
    float _3117 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _589 = sqrt(_474);
    float _602 = exp2((_589 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _943;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _670 = fma(_642, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634));
        float _674 = fma(_642, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634));
        float _678 = fma(_642, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634));
        float _701 = _634 + _471;
        float _702 = _638 + _472;
        float _703 = _642 + _473;
        float _713 = fma(_703, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701)) - _670;
        float _714 = fma(_703, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701)) - _674;
        float _715 = fma(_703, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701)) - _678;
        float _719 = inversesqrt(dot(vec3(_713, _714, _715), vec3(_713, _714, _715)));
        float _732 = ((_719 * _713) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_670 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _733 = ((_719 * _714) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_674 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _734 = ((_719 * _715) / cbModelParam._m0[34u].z) + ((((((_678 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        float _771 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_737.x + (-0.5));
        float _773 = _771 * (_737.y + (-0.5));
        float _774 = _771 * (_737.z + (-0.5));
        float _781 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_744.x + (-0.5));
        float _783 = _781 * (_744.y + (-0.5));
        float _784 = _781 * (_744.z + (-0.5));
        float _791 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_751.x + (-0.5));
        float _793 = _791 * (_751.y + (-0.5));
        float _794 = _791 * (_751.z + (-0.5));
        float _801 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_758.x + (-0.5));
        float _803 = _801 * (_758.y + (-0.5));
        float _804 = _801 * (_758.z + (-0.5));
        float _805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = _772 * 0.5;
        float _809 = _782 * 0.5;
        float _810 = _792 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _825 = (dot(vec3(_471, _472, _473), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3143 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _835 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_805 + 9.9999997473787516355514526367188e-06);
        float _3154 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3165 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))) * (_837 + 1.0))) + _842) * _805;
        float _852 = _773 * 0.5;
        float _853 = _783 * 0.5;
        float _854 = _793 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_471, _472, _473), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3176 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_806 + 9.9999997473787516355514526367188e-06);
        float _3187 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3198 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_879 + 1.0))) + _884) * _806;
        float _894 = _774 * 0.5;
        float _895 = _784 * 0.5;
        float _896 = _794 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _910 = (dot(vec3(_471, _472, _473), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3209 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _919 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3220 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3231 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * (_921 + 1.0))) + _926) * _807;
        _943 = _774;
        _945 = _773;
        _946 = _772;
        _947 = _784;
        _948 = _783;
        _949 = _782;
        _950 = _794;
        _951 = _793;
        _952 = _792;
        _953 = _807;
        _954 = _806;
        _955 = _805;
        _956 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _957 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
    }
    else
    {
        _943 = _944;
        _945 = _944;
        _946 = _944;
        _947 = _944;
        _948 = _944;
        _949 = _944;
        _950 = _944;
        _951 = _944;
        _952 = _944;
        _953 = _944;
        _954 = _944;
        _955 = _944;
        _956 = 0.0;
        _957 = 0.0;
        _958 = 0.0;
    }
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _984 = fma(_642, cbModelParam._m0[30u].z, fma(_638, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _634));
        float _988 = fma(_642, cbModelParam._m0[31u].z, fma(_638, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _634));
        float _992 = fma(_642, cbModelParam._m0[32u].z, fma(_638, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _634));
        float _1015 = _634 + _471;
        float _1016 = _638 + _472;
        float _1017 = _642 + _473;
        float _1027 = fma(_1017, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015)) - _984;
        float _1028 = fma(_1017, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015)) - _988;
        float _1029 = fma(_1017, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015)) - _992;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_984 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_988 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[35u].z) + ((((((_992 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1083 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1050.x + (-0.5));
        float _1085 = _1083 * (_1050.y + (-0.5));
        float _1086 = _1083 * (_1050.z + (-0.5));
        float _1093 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1057.x + (-0.5));
        float _1095 = _1093 * (_1057.y + (-0.5));
        float _1096 = _1093 * (_1057.z + (-0.5));
        float _1103 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1064.x + (-0.5));
        float _1105 = _1103 * (_1064.y + (-0.5));
        float _1106 = _1103 * (_1064.z + (-0.5));
        float _1113 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1071.x + (-0.5));
        float _1115 = _1113 * (_1071.y + (-0.5));
        float _1116 = _1113 * (_1071.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_471, _472, _473), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3294 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_1147 + 1.0))) + _1152) * _1117;
        float _1162 = _1085 * 0.5;
        float _1163 = _1095 * 0.5;
        float _1164 = _1105 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_471, _472, _473), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3327 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1189 + 1.0))) + _1194) * _1118;
        float _1204 = _1086 * 0.5;
        float _1205 = _1096 * 0.5;
        float _1206 = _1106 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_471, _472, _473), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3360 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_1231 + 1.0))) + _1236) * _1119;
        _1253 = _1086;
        _1254 = _1085;
        _1255 = _1084;
        _1256 = _1096;
        _1257 = _1095;
        _1258 = _1094;
        _1259 = _1106;
        _1260 = _1105;
        _1261 = _1104;
        _1262 = _1119;
        _1263 = _1118;
        _1264 = _1117;
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _944;
        _1254 = _944;
        _1255 = _944;
        _1256 = _944;
        _1257 = _944;
        _1258 = _944;
        _1259 = _944;
        _1260 = _944;
        _1261 = _944;
        _1262 = _944;
        _1263 = _944;
        _1264 = _944;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _956)) + _956;
    float _1278 = (cbModelParam._m0[1u].x * (_1266 - _957)) + _957;
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _958)) + _958;
    float _1300 = fma(_1279, cbSceneParam._m0[89u].z, fma(_1278, cbSceneParam._m0[89u].y, _1277 * cbSceneParam._m0[89u].x));
    float _1303 = fma(_1279, cbSceneParam._m0[90u].z, fma(_1278, cbSceneParam._m0[90u].y, _1277 * cbSceneParam._m0[90u].x));
    float _1306 = fma(_1279, cbSceneParam._m0[91u].z, fma(_1278, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1277));
    float _1321 = _581 * 0.5;
    float _1322 = _582 * 0.5;
    float _1323 = _583 * 0.5;
    float _1324 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1327 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1254, _1257, _1260, _1263));
    float _1330 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1364;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1337 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_943, _947, _950, _953));
        float _1341 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_945, _948, _951, _954));
        float _1345 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_946, _949, _952, _955));
        float _1352 = dot(vec4(cbModelParam._m0[39u]), vec4(_1321, _1322, _1323, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1352) ? 0.0 : (isnan(0.0) ? _1352 : max(0.0, _1352))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1375;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1366 = dot(vec4(cbModelParam._m0[40u]), vec4(_1321, _1322, _1323, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1379 = (_1375 * cbModelParam._m0[1u].x) + (_1364 * (1.0 - cbModelParam._m0[1u].x));
    float _1389 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _474);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1389 : min(cbModelParam._m0[25u].z, _1389));
    float _1471;
    float _1473;
    float _1475;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1438 = fma(_642, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634)) + cbModelParam._m0[13u].w;
        float _1442 = fma(_642, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634)) + cbModelParam._m0[14u].w;
        float _1446 = fma(_642, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634)) + cbModelParam._m0[15u].w;
        float _1449 = fma(_583, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581));
        float _1452 = fma(_583, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581));
        float _1455 = fma(_583, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581));
        float _1483;
        if (_1449 > 0.0)
        {
            _1483 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1483 = frontier_phi_22_20_ladder;
        }
        float _1829;
        if (_1452 > 0.0)
        {
            _1829 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1829 = frontier_phi_31_27_ladder;
        }
        float _2145;
        if (_1455 > 0.0)
        {
            _2145 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2145 = frontier_phi_45_38_ladder;
        }
        float _2147 = isnan(_1829) ? _1483 : (isnan(_1483) ? _1829 : min(_1483, _1829));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1449) + _1438;
        float _2153 = (_2148 * _1452) + _1442;
        float _2154 = (_2148 * _1455) + _1446;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2154, cbModelParam._m0[9u].z, fma(_2153, cbModelParam._m0[9u].y, _2152 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2154, cbModelParam._m0[10u].z, fma(_2153, cbModelParam._m0[10u].y, _2152 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2154, cbModelParam._m0[11u].z, fma(_2153, cbModelParam._m0[11u].y, _2152 * cbModelParam._m0[11u].x))), _1390);
            frontier_phi_21_45_ladder = _2280.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2280.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2280.x * cbModelParam._m0[1u].y;
        }
        _1471 = frontier_phi_21_45_ladder_2;
        _1473 = frontier_phi_21_45_ladder_1;
        _1475 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_581, _582, _583), _1390);
        _1471 = _1459.x * cbModelParam._m0[1u].y;
        _1473 = _1459.y * cbModelParam._m0[1u].y;
        _1475 = _1459.z * cbModelParam._m0[1u].y;
    }
    float _1479 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _474);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1479 : min(cbModelParam._m0[25u].w, _1479));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1533 = fma(_642, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634)) + cbModelParam._m0[21u].w;
        float _1537 = fma(_642, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634)) + cbModelParam._m0[22u].w;
        float _1541 = fma(_642, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634)) + cbModelParam._m0[23u].w;
        float _1544 = fma(_583, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581));
        float _1547 = fma(_583, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581));
        float _1550 = fma(_583, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581));
        float _1834;
        if (_1544 > 0.0)
        {
            _1834 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1834 = frontier_phi_33_29_ladder;
        }
        float _2171;
        if (_1547 > 0.0)
        {
            _2171 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2171 = frontier_phi_47_40_ladder;
        }
        float _2340;
        if (_1550 > 0.0)
        {
            _2340 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2340 = frontier_phi_61_56_ladder;
        }
        float _2342 = isnan(_2171) ? _1834 : (isnan(_1834) ? _2171 : min(_1834, _2171));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1544) + _1533;
        float _2348 = (_2343 * _1547) + _1537;
        float _2349 = (_2343 * _1550) + _1541;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1480);
            frontier_phi_30_61_ladder = _2582.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2582.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2582.x * cbModelParam._m0[1u].z;
        }
        _1569 = frontier_phi_30_61_ladder_2;
        _1571 = frontier_phi_30_61_ladder_1;
        _1573 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_581, _582, _583), _1480);
        _1569 = _1553.x * cbModelParam._m0[1u].z;
        _1571 = _1553.y * cbModelParam._m0[1u].z;
        _1573 = _1553.z * cbModelParam._m0[1u].z;
    }
    float _1585 = ((((1.0 - _602) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_602 * _589)) * _573;
    float _1586 = _1585 * ((cbModelParam._m0[1u].w * (_1569 - _1471)) + _1471);
    float _1587 = _1585 * ((cbModelParam._m0[1u].w * (_1571 - _1473)) + _1473);
    float _1588 = _1585 * ((cbModelParam._m0[1u].w * (_1573 - _1475)) + _1475);
    float _1591 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, _1586 * cbSceneParam._m0[91u].x));
    uvec4 _1607 = floatBitsToUint(cbInstanceData._m0[_547 + 5u]);
    uint _1609 = _1607.x * 14u;
    uint _1610 = _1609 + 13u;
    float _1615 = _573 + (-1.0);
    float _1618 = (cbLight._m0[_1610].x * _1615) + 1.0;
    float _1619 = (cbLight._m0[_1610].y * _1615) + 1.0;
    uint _1620 = _1609 + 5u;
    float _1626 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1630 = _1609 + 4u;
    float _1636 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1640 = _1609 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_471, _472, _473));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_471, _472, _473));
    float _3496 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3507 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1620].x * _1626) * _1661) + ((cbLight._m0[_1630].x * _1636) * _1659);
    float _1669 = ((_1626 * cbLight._m0[_1620].y) * _1661) + ((_1636 * cbLight._m0[_1630].y) * _1659);
    float _1670 = ((_1626 * cbLight._m0[_1620].z) * _1661) + ((_1636 * cbLight._m0[_1630].z) * _1659);
    uint _1672 = _1609 + 8u;
    float _1685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1609].w)) * _474) * 0.949999988079071044921875);
    float _1686 = _1685 * _1685;
    float _1687 = cbLight._m0[_1609].x + _498;
    float _1688 = cbLight._m0[_1609].y + _499;
    float _1689 = cbLight._m0[_1609].z + _500;
    float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
    float _1694 = _1693 * _1687;
    float _1695 = _1693 * _1688;
    float _1696 = _1693 * _1689;
    float _1697 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1609].xyz));
    float _3518 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _1701 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _1702 = dot(vec3(_471, _472, _473), vec3(_1694, _1695, _1696));
    float _3540 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _1706 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_1694, _1695, _1696));
    float _3551 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1710 = _1686 * _1686;
    float _1714 = ((_1705 * _1705) * (_1710 + (-1.0))) + 1.0;
    float _1725 = (exp2(log2(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1726 = 1.0 - _1686;
    float _1737 = (0.5 / (((_1701 * ((_1700 * _1726) + _1686)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1726) + _1686) * _1700))) * _1700;
    float _3562 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1739 = (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_1710 / ((_1714 * _1714) * 3.141590118408203125));
    uint _1750 = _1609 + 9u;
    float _1761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _474) * 0.949999988079071044921875);
    float _1762 = _1761 * _1761;
    float _1763 = cbLight._m0[_1640].x + _498;
    float _1764 = cbLight._m0[_1640].y + _499;
    float _1765 = cbLight._m0[_1640].z + _500;
    float _1769 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
    float _1770 = _1769 * _1763;
    float _1771 = _1769 * _1764;
    float _1772 = _1769 * _1765;
    float _1773 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1640].xyz));
    float _3573 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _1777 = dot(vec3(_471, _472, _473), vec3(_1770, _1771, _1772));
    float _3584 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1770, _1771, _1772));
    float _3595 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1762 * _1762;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1798 = (exp2(log2(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1799 = 1.0 - _1762;
    float _1809 = (0.5 / (((_1701 * ((_1776 * _1799) + _1762)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1799) + _1762) * _1776))) * _1776;
    float _3606 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    float _1821 = (((_1798 * cbLight._m0[_1750].x) * _1811) * _1626) + (((_1725 * cbLight._m0[_1672].x) * _1739) * _1636);
    float _1822 = (((_1798 * cbLight._m0[_1750].y) * _1811) * _1626) + (((_1725 * cbLight._m0[_1672].y) * _1739) * _1636);
    float _1823 = (((_1798 * cbLight._m0[_1750].z) * _1811) * _1626) + (((_1725 * cbLight._m0[_1672].z) * _1739) * _1636);
    float _1938;
    float _1940;
    float _1942;
    float _1944;
    float _1946;
    float _1948;
    if (_1607.y == 0u)
    {
        float _1878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1878;
        float _1880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1878;
        float _1881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1878;
        uvec4 _1893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1894 = _1893.x;
        uint _1905 = uint((float(_1893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _507) / _1894))) + floor(float(uint(cbSceneParam._m0[85u].x * _506) / _1894)));
        float _1915 = (log2(_1881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1916 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        uint _1919 = uint(isnan(14.0) ? _1916 : (isnan(_1916) ? 14.0 : min(_1916, 14.0)));
        uvec4 _1924 = texelFetch(g_lightClusterGridBuffer, int(((_1919 << 2u) + (_1905 << 6u)) >> 2u));
        uint _1925 = _1924.x;
        uint _1926 = _1893.z;
        float _2032;
        float _2034;
        float _2036;
        float _2038;
        float _2040;
        float _2042;
        if (((((1u << ((_1926 >> 4u) & 15u)) + 4294967295u) & _1925) == 0u) || ((_1926 & 240u) == 0u))
        {
            _2032 = 0.0;
            _2034 = 0.0;
            _2036 = 0.0;
            _2038 = 0.0;
            _2040 = 0.0;
            _2042 = 0.0;
        }
        else
        {
            float _2033;
            float _2035;
            float _2037;
            float _2039;
            float _2041;
            float _2043;
            float _2208 = 0.0;
            float _2209 = 0.0;
            float _2210 = 0.0;
            float _2211 = 0.0;
            float _2212 = 0.0;
            float _2213 = 0.0;
            uint _2214 = 0u;
            uint _2223;
            bool _2224;
            for (;;)
            {
                _2223 = texelFetch(g_lightClassification, int((((_1919 << 5u) + (_1905 << 9u)) + (_2214 << 2u)) >> 2u)).x;
                _2224 = _2223 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2224)
                {
                    frontier_phi_58_pred = _2209;
                    frontier_phi_58_pred_1 = _2213;
                    frontier_phi_58_pred_2 = _2212;
                    frontier_phi_58_pred_3 = _2211;
                    frontier_phi_58_pred_4 = _2210;
                    frontier_phi_58_pred_5 = _2208;
                }
                else
                {
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    uint _2389;
                    _2383 = _2208;
                    _2384 = _2209;
                    _2385 = _2210;
                    _2386 = _2211;
                    _2387 = _2212;
                    _2388 = _2213;
                    _2389 = _2223;
                    float _2289;
                    float _2290;
                    float _2291;
                    float _2292;
                    float _2293;
                    float _2294;
                    for (;;)
                    {
                        uint _2393 = uint(findLSB(_2389)) + (_2214 << 5u);
                        uint _2390 = (_2389 + 4294967295u) & _2389;
                        uint _2395 = _2393 * 48u;
                        vec4 _2409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2395)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 3u)).x));
                        uint _2415 = (_2393 * 48u) + 4u;
                        vec4 _2428 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2415)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 3u)).x));
                        uint _2434 = (_2393 * 48u) + 8u;
                        vec3 _2445 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2434)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 2u)).x));
                        float _2449 = _2409.x - _1879;
                        float _2450 = _2409.y - _1880;
                        float _2451 = _2409.z - _1881;
                        float _2452 = dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451));
                        float _2455 = inversesqrt(_2452);
                        float _2456 = _2455 * _2449;
                        float _2457 = _2455 * _2450;
                        float _2458 = _2455 * _2451;
                        float _2459 = dot(vec3(_528, _531, _534), vec3(_2456, _2457, _2458));
                        float _2464 = 1.0 - (_2452 * _2409.w);
                        float _3627 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
                        float _2465 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
                        float _2466 = sqrt(_2452) * _2428.w;
                        float _2469 = 1.39999997615814208984375 / (_2466 + 1.39999997615814208984375);
                        float _2470 = _2469 * _2469;
                        float _2473 = ((1.0 - _2470) * _2459) + _2470;
                        float _2476 = _2466 * _2466;
                        float _2480 = ((isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0))) * _2465) / ((_2476 * 0.699999988079071044921875) + 1.0);
                        float _2484 = (-0.0) - _1879;
                        float _2485 = (-0.0) - _1880;
                        float _2486 = (-0.0) - _1881;
                        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
                        float _2491 = _2490 * _2484;
                        float _2492 = _2490 * _2485;
                        float _2493 = _2490 * _2486;
                        float _2501 = exp2(log2(1.0 / ((_2476 * 3.5) + 5.0)) * 0.25);
                        float _2502 = 1.0 - _589;
                        float _2509 = sqrt(1.0 - ((1.0 - (_2502 * _2502)) * (1.0 - (_2501 * _2501))));
                        float _2510 = _2509 * _2509;
                        float _2511 = _2510 * _2510;
                        float _2512 = _2491 + _2456;
                        float _2513 = _2492 + _2457;
                        float _2514 = _2493 + _2458;
                        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
                        float _2522 = dot(vec3(_528, _531, _534), vec3(_2491, _2492, _2493));
                        float _3643 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2525 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
                        float _2526 = dot(vec3(_528, _531, _534), vec3(_2518 * _2512, _2518 * _2513, _2518 * _2514));
                        float _3654 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
                        float _2529 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                        float _2533 = ((_2529 * _2529) * (_2511 + (-1.0))) + 1.0;
                        float _2534 = _2469 * _2510;
                        float _2535 = _2534 * _2534;
                        float _2538 = ((1.0 - _2535) * _2459) + _2535;
                        float _3665 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2539 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
                        float _2540 = 1.0 - _2510;
                        float _2550 = (0.5 / (((_2539 * ((_2525 * _2540) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2540) + _2510) * _2525))) * _2539;
                        float _3676 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
                        float _2561 = (((_2511 * 3.1415927410125732421875) * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) / ((_2533 * _2533) * ((_2476 * 2.1991131305694580078125) + 3.141590118408203125))) * _2465;
                        _2292 = (_2480 * _2428.x) + _2386;
                        _2293 = (_2480 * _2428.y) + _2387;
                        _2294 = (_2480 * _2428.z) + _2388;
                        _2289 = (_2561 * _2445.x) + _2383;
                        _2290 = (_2561 * _2445.y) + _2384;
                        _2291 = (_2561 * _2445.z) + _2385;
                        if (_2390 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2383 = _2289;
                            _2384 = _2290;
                            _2385 = _2291;
                            _2386 = _2292;
                            _2387 = _2293;
                            _2388 = _2294;
                            _2389 = _2390;
                        }
                    }
                    frontier_phi_58_pred = _2290;
                    frontier_phi_58_pred_1 = _2294;
                    frontier_phi_58_pred_2 = _2293;
                    frontier_phi_58_pred_3 = _2292;
                    frontier_phi_58_pred_4 = _2291;
                    frontier_phi_58_pred_5 = _2289;
                }
                _2035 = frontier_phi_58_pred;
                _2043 = frontier_phi_58_pred_1;
                _2041 = frontier_phi_58_pred_2;
                _2039 = frontier_phi_58_pred_3;
                _2037 = frontier_phi_58_pred_4;
                _2033 = frontier_phi_58_pred_5;
                uint _2215 = _2214 + 1u;
                if (_2215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2208 = _2033;
                    _2209 = _2035;
                    _2210 = _2037;
                    _2211 = _2039;
                    _2212 = _2041;
                    _2213 = _2043;
                    _2214 = _2215;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2032 = _2033;
            _2034 = _2035;
            _2036 = _2037;
            _2038 = _2039;
            _2040 = _2041;
            _2042 = _2043;
        }
        uvec4 _2046 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2047 = _2046.z;
        uint _2049 = (_2047 >> 8u) & 15u;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        float _2184;
        float _2186;
        if (((4294967295u << _2049) & _1925) == 0u)
        {
            _2176 = _2032;
            _2178 = _2034;
            _2180 = _2036;
            _2182 = _2038;
            _2184 = _2040;
            _2186 = _2042;
        }
        else
        {
            float _2201 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
            float _2202 = _2201 * _1879;
            float _2203 = _2201 * _1880;
            float _2204 = _2201 * _1881;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2049 < ((_2047 >> 12u) & 15u))
            {
                float _2177;
                float _2179;
                float _2181;
                float _2183;
                float _2185;
                float _2187;
                float _2366 = _2032;
                float _2367 = _2034;
                float _2368 = _2036;
                float _2369 = _2038;
                float _2370 = _2040;
                float _2371 = _2042;
                uint _2372 = _2049;
                uint _2381;
                bool _2382;
                for (;;)
                {
                    _2381 = texelFetch(g_lightClassification, int((((_1919 << 5u) + (_1905 << 9u)) + (_2372 << 2u)) >> 2u)).x;
                    _2382 = _2381 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2382)
                    {
                        frontier_phi_67_pred = _2371;
                        frontier_phi_67_pred_1 = _2370;
                        frontier_phi_67_pred_2 = _2369;
                        frontier_phi_67_pred_3 = _2368;
                        frontier_phi_67_pred_4 = _2367;
                        frontier_phi_67_pred_5 = _2366;
                    }
                    else
                    {
                        float _2587;
                        float _2588;
                        float _2589;
                        float _2590;
                        float _2591;
                        float _2592;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2600 = _2366;
                        float _2601 = _2367;
                        float _2602 = _2368;
                        float _2603 = _2369;
                        float _2604 = _2370;
                        float _2605 = _2371;
                        uint _2606 = _2381;
                        uint _2607;
                        vec4 _2632;
                        float _2633;
                        vec4 _2648;
                        vec3 _2660;
                        vec4 _2675;
                        vec4 _2691;
                        float _2737;
                        bool _2738;
                        for (;;)
                        {
                            uint _2617 = ((_2372 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2606));
                            _2607 = (_2606 + 4294967295u) & _2606;
                            uint _2619 = _2617 * 40u;
                            _2632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 3u)).x));
                            _2633 = _2632.w;
                            uint _2635 = (_2617 * 40u) + 4u;
                            _2648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 3u)).x));
                            uint _2650 = (_2617 * 40u) + 8u;
                            _2660 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x));
                            uint _2662 = (_2617 * 40u) + 16u;
                            _2675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 3u)).x));
                            uint _2678 = (_2617 * 40u) + 20u;
                            _2691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 3u)).x));
                            uint _2693 = (_2617 * 40u) + 24u;
                            vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            uint _2712 = (_2617 * 40u) + 28u;
                            vec4 _2725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 3u)).x));
                            _2737 = fma(_1881, _2725.z, fma(_1880, _2725.y, _2725.x * _1879)) + _2725.w;
                            _2738 = !((fma(_1881, _2706.z, fma(_1880, _2706.y, _2706.x * _1879)) + _2706.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2738)
                            {
                                float _2765 = _2632.x - _1879;
                                float _2766 = _2632.y - _1880;
                                float _2767 = _2632.z - _1881;
                                float _2768 = dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767));
                                float _2771 = inversesqrt(_2768);
                                float _2772 = _2771 * _2765;
                                float _2773 = _2771 * _2766;
                                float _2774 = _2771 * _2767;
                                float _2778 = 1.0 - (_2768 / (_2633 * _2633));
                                float _3687 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                                float _2779 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
                                float _2783 = sqrt(_2768) * _2648.w;
                                float _2785 = 1.39999997615814208984375 / (_2783 + 1.39999997615814208984375);
                                float _2786 = _2785 * _2785;
                                float _2789 = ((1.0 - _2786) * dot(vec3(_2772, _2773, _2774), vec3(_528, _531, _534))) + _2786;
                                float _2792 = _2783 * _2783;
                                float _2796 = (fma(_1881, _2675.z, fma(_1880, _2675.y, _2675.x * _1879)) + _2675.w) / _2737;
                                float _2797 = (fma(_1881, _2691.z, fma(_1880, _2691.y, _2691.x * _1879)) + _2691.w) / _2737;
                                float _2801 = 1.0 - dot(vec2(_2796, _2797), vec2(_2796, _2797));
                                float _3703 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2802 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                                float _2803 = _2802 * (((isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))) * _2779) / ((_2792 * 0.699999988079071044921875) + 1.0));
                                float _2815 = exp2(log2(1.0 / ((_2792 * 3.5) + 5.0)) * 0.25);
                                float _2816 = 1.0 - _589;
                                float _2823 = sqrt(1.0 - ((1.0 - (_2816 * _2816)) * (1.0 - (_2815 * _2815))));
                                float _2824 = _2823 * _2823;
                                float _2825 = _2824 * _2824;
                                float _2826 = _2772 - _2202;
                                float _2827 = _2773 - _2203;
                                float _2828 = _2774 - _2204;
                                float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                                float _2836 = dot(vec3(_528, _531, _534), vec3((-0.0) - _2202, (-0.0) - _2203, (-0.0) - _2204));
                                float _3714 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2839 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
                                float _2840 = dot(vec3(_528, _531, _534), vec3(_2832 * _2826, _2832 * _2827, _2832 * _2828));
                                float _3725 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2843 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
                                float _2847 = ((_2843 * _2843) * (_2825 + (-1.0))) + 1.0;
                                float _2848 = _2785 * _2824;
                                float _2849 = _2848 * _2848;
                                float _2855 = ((1.0 - _2849) * dot(vec3(_528, _531, _534), vec3(_2772, _2773, _2774))) + _2849;
                                float _3736 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                                float _2856 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                                float _2857 = 1.0 - _2824;
                                float _2867 = (0.5 / (((_2856 * ((_2839 * _2857) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _2857) + _2824) * _2839))) * _2856;
                                float _3747 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                                float _2877 = (_2802 * _2779) * (((_2825 * 3.1415927410125732421875) * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) / ((_2847 * _2847) * ((_2792 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2803 * _2648.z;
                                frontier_phi_73_pred_1 = _2803 * _2648.y;
                                frontier_phi_73_pred_2 = _2803 * _2648.x;
                                frontier_phi_73_pred_3 = _2877 * _2660.z;
                                frontier_phi_73_pred_4 = _2877 * _2660.y;
                                frontier_phi_73_pred_5 = _2877 * _2660.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2886 = frontier_phi_73_pred;
                            _2885 = frontier_phi_73_pred_1;
                            _2884 = frontier_phi_73_pred_2;
                            _2883 = frontier_phi_73_pred_3;
                            _2882 = frontier_phi_73_pred_4;
                            _2881 = frontier_phi_73_pred_5;
                            _2590 = _2884 + _2603;
                            _2591 = _2885 + _2604;
                            _2592 = _2886 + _2605;
                            _2587 = _2881 + _2600;
                            _2588 = _2882 + _2601;
                            _2589 = _2883 + _2602;
                            if (_2607 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2600 = _2587;
                                _2601 = _2588;
                                _2602 = _2589;
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2607;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2592;
                        frontier_phi_67_pred_1 = _2591;
                        frontier_phi_67_pred_2 = _2590;
                        frontier_phi_67_pred_3 = _2589;
                        frontier_phi_67_pred_4 = _2588;
                        frontier_phi_67_pred_5 = _2587;
                    }
                    _2187 = frontier_phi_67_pred;
                    _2185 = frontier_phi_67_pred_1;
                    _2183 = frontier_phi_67_pred_2;
                    _2181 = frontier_phi_67_pred_3;
                    _2179 = frontier_phi_67_pred_4;
                    _2177 = frontier_phi_67_pred_5;
                    uint _2373 = _2372 + 1u;
                    if (_2373 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2366 = _2177;
                        _2367 = _2179;
                        _2368 = _2181;
                        _2369 = _2183;
                        _2370 = _2185;
                        _2371 = _2187;
                        _2372 = _2373;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2183;
                frontier_phi_49_50_ladder_1 = _2187;
                frontier_phi_49_50_ladder_2 = _2185;
                frontier_phi_49_50_ladder_3 = _2181;
                frontier_phi_49_50_ladder_4 = _2179;
                frontier_phi_49_50_ladder_5 = _2177;
            }
            else
            {
                frontier_phi_49_50_ladder = _2038;
                frontier_phi_49_50_ladder_1 = _2042;
                frontier_phi_49_50_ladder_2 = _2040;
                frontier_phi_49_50_ladder_3 = _2036;
                frontier_phi_49_50_ladder_4 = _2034;
                frontier_phi_49_50_ladder_5 = _2032;
            }
            _2176 = frontier_phi_49_50_ladder_5;
            _2178 = frontier_phi_49_50_ladder_4;
            _2180 = frontier_phi_49_50_ladder_3;
            _2182 = frontier_phi_49_50_ladder;
            _2184 = frontier_phi_49_50_ladder_2;
            _2186 = frontier_phi_49_50_ladder_1;
        }
        float _2191 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
        _1938 = (_2191 * _2182) + _1668;
        _1940 = (_2191 * _2184) + _1669;
        _1942 = (_2191 * _2186) + _1670;
        _1944 = ((_2176 * 0.039999999105930328369140625) * _2191) + _1821;
        _1946 = ((_2178 * 0.039999999105930328369140625) * _2191) + _1822;
        _1948 = ((_2180 * 0.039999999105930328369140625) * _2191) + _1823;
    }
    else
    {
        _1938 = _1668;
        _1940 = _1669;
        _1942 = _1670;
        _1944 = _1821;
        _1946 = _1822;
        _1948 = _1823;
    }
    uint _1954 = _549 + uint(cbMatDynParam._m0[0u].w);
    float _3763 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3774 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3785 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _1979 = (((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1938 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _573))) + ((_1944 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1379)) * cbPerFrame._m0[3u].x)) + (((_412 - (_412 * _282)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1954].x);
    float _1981 = ((((_413 - (_413 * _282)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_1954].y) + ((_1946 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1379)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1940 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _573)));
    float _1983 = (((cbMtdParam._m0[9u].z * (_414 - (_414 * _282))) * cbInstanceData._m0[_1954].z) + ((_1948 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1379)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1942 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _573)));
    uint _1987 = _547 + 6u;
    float _1995 = _506 / cbSceneParam._m0[86u].x;
    float _1996 = _507 / cbSceneParam._m0[86u].y;
    vec4 _2010 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1995, _1996, (log2((isnan(cbSceneParam._m0[77u].w) ? _493 : (isnan(_493) ? cbSceneParam._m0[77u].w : min(_493, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2012 = _2010.x;
    float _2013 = _2010.y;
    float _2014 = _2010.z;
    float _2015 = _2010.w;
    float _2095;
    float _2097;
    float _2099;
    float _2101;
    if (_493 > cbSceneParam._m0[78u].w)
    {
        float _2057 = isnan(_493) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _493 : min(cbSceneParam._m0[80u].w, _493));
        float _2058 = _2057 / _493;
        float _2069 = _2058 * _255;
        float _2070 = _256 * _2058;
        float _2071 = (-0.0) - _2070;
        float _2072 = _2058 * _257;
        float _2074 = (cbSceneParam._m0[77u].w * _2071) / _2057;
        float _2075 = _2074 + cbSceneParam._m0[79u].w;
        float _2076 = cbSceneParam._m0[79u].w - _2070;
        float _2082 = sqrt(((_2069 * _2069) + (_2070 * _2070)) + (_2072 * _2072));
        float _2085 = (1.0 - (cbSceneParam._m0[77u].w / _2057)) * _2082;
        float _2091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2302;
        if (abs((_2071 - _2074) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2302 = ((((_2075 > 0.0) ? exp2(_2091 * _2075) : (2.0 - exp2(_2093 * _2075))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2085;
        }
        else
        {
            float _2237 = 1.0 / cbSceneParam._m0[80u].x;
            float _2238 = isnan(_2076) ? _2075 : (isnan(_2075) ? _2076 : max(_2075, _2076));
            float _2239 = isnan(_2076) ? _2075 : (isnan(_2075) ? _2076 : min(_2075, _2076));
            float _2248 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : min(_2238, 0.0));
            float _2249 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : min(_2239, 0.0));
            _2302 = ((abs(_2082 / _2071) * cbSceneParam._m0[80u].y) * ((((_2248 - _2249) * 2.0) - ((exp2(_2091 * (isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0)))) - exp2(_2091 * (isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0))))) * _2237)) - ((exp2(_2093 * _2248) - exp2(_2093 * _2249)) * _2237))) + (_2085 * cbSceneParam._m0[80u].z);
        }
        vec4 _2304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1995, _1996, 1.0), 0.0);
        float _2313 = exp2((_2302 * (-1.44269502162933349609375)) * (1.0 - _2304.w));
        float _2314 = log2(_2313);
        float _2330 = log2(_2015);
        _2095 = (exp2(_2330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2314 * cbSceneParam._m0[78u].x)) * _2304.x) / cbSceneParam._m0[78u].x)) + _2012;
        _2097 = (exp2(_2330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2314 * cbSceneParam._m0[78u].y)) * _2304.y) / cbSceneParam._m0[78u].y)) + _2013;
        _2099 = (exp2(_2330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2314 * cbSceneParam._m0[78u].z)) * _2304.z) / cbSceneParam._m0[78u].z)) + _2014;
        _2101 = _2313 * _2015;
    }
    else
    {
        _2095 = _2012;
        _2097 = _2013;
        _2099 = _2014;
        _2101 = _2015;
    }
    float _2113 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2114 = _2113 == 3.0;
    float _2115 = log2(_2101);
    float _2122 = exp2(_2115 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)));
    float _2123 = exp2(_2115 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)));
    float _2124 = exp2(_2115 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)));
    float _2133 = (_2113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2133 * (_2114 ? _2122 : (_2122 + (cbSceneParam._m0[72u].w * _2095)));
    SV_Target.y = _2133 * (_2114 ? _2123 : (_2123 + (cbSceneParam._m0[72u].w * _2097)));
    SV_Target.z = _2133 * (_2114 ? _2124 : (_2124 + (cbSceneParam._m0[72u].w * _2099)));
    SV_Target.w = cbInstanceData._m0[_1987].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1987].w;
}


