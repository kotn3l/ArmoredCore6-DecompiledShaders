#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1036;
float _3164;
float _3165;
float _3166;
float _3167;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _393 = ((_387 * _381) + (_355 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _394 = ((_387 * _382) + (_356 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    float _414 = (_390 > 0.0) ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_395 + (-0.5)) + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_396 + (-0.5)) + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    vec4 _482 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _486 = _482.z;
    float _489 = (_482.x * 2.0) + (-1.0);
    float _490 = (_482.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3186 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _496 = sqrt(1.0 - (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))));
    float _497 = _486 * _288;
    float _504 = (cbMtdParam._m0[15u].w * ((_327 - _497) + ((_486 - _327) * _288))) + _497;
    float _508 = (cbMtdParam._m0[16u].x * _355) + _489;
    float _509 = (cbMtdParam._m0[16u].x * _356) + _490;
    float _512 = fma(_496, _197, fma(_509, _204, _508 * _190));
    float _515 = fma(_496, _198, fma(_509, _205, _508 * _191));
    float _518 = fma(_496, _199, fma(_509, _206, _508 * _192));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _523 = _522 * _512;
    float _524 = _522 * _515;
    float _525 = _522 * _518;
    float _3197 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _526 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3219 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3230 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _550 = _261 * _549;
    float _551 = _262 * _549;
    float _552 = _263 * _549;
    vec4 _557 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _559 = _557.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _717 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _723 = (cbMatDynParam._m0[5u].x * _717) + cbMatDynParam._m0[5u].y;
        float _3241 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _728 = (cbMatDynParam._m0[5u].z * _717) + cbMatDynParam._m0[5u].w;
        float _3252 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) - _724)) + _724) < ((_559 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _572 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _573 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _592 = fma(_525, cbSceneParam._m0[5u].z, fma(_524, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _523));
    float _595 = fma(_525, cbSceneParam._m0[6u].z, fma(_524, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _523));
    float _598 = fma(_525, cbSceneParam._m0[7u].z, fma(_524, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _523));
    uint _611 = uint(roundEven(NORMAL.w)) * 13u;
    uint _613 = _611 + 9u;
    uint _614 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3263 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _572, cbSceneParam._m0[86u].y * _573));
    float _637 = _634.x * TEXCOORD.z;
    float _638 = dot(vec3(_523, _524, _525), vec3(_550, _551, _552));
    float _641 = _638 * 2.0;
    float _645 = (_641 * _523) - _550;
    float _646 = (_641 * _524) - _551;
    float _647 = (_641 * _525) - _552;
    float _651 = abs(dot(vec3(_550, _551, _552), vec3(_523, _524, _525)));
    float _3296 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _653 = sqrt(_526);
    float _666 = exp2((_653 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_653 * 3.0));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _762 = fma(_706, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698));
        float _766 = fma(_706, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698));
        float _770 = fma(_706, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698));
        float _793 = _698 + _523;
        float _794 = _702 + _524;
        float _795 = _706 + _525;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _762;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _766;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _770;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_762 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_766 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_770 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_523, _524, _525), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3322 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3333 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3344 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_523, _524, _525), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3377 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_523, _524, _525), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3410 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1037 = _865;
        _1038 = _864;
        _1039 = _876;
        _1040 = _875;
        _1041 = _874;
        _1042 = _886;
        _1043 = _885;
        _1044 = _884;
        _1045 = _899;
        _1046 = _898;
        _1047 = _897;
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _1036;
        _1037 = _1036;
        _1038 = _1036;
        _1039 = _1036;
        _1040 = _1036;
        _1041 = _1036;
        _1042 = _1036;
        _1043 = _1036;
        _1044 = _1036;
        _1045 = _1036;
        _1046 = _1036;
        _1047 = _1036;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1079 = fma(_706, cbModelParam._m0[30u].z, fma(_702, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _698));
        float _1083 = fma(_706, cbModelParam._m0[31u].z, fma(_702, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _698));
        float _1087 = fma(_706, cbModelParam._m0[32u].z, fma(_702, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _698));
        float _1110 = _698 + _523;
        float _1111 = _702 + _524;
        float _1112 = _706 + _525;
        float _1122 = fma(_1112, cbModelParam._m0[30u].z, fma(_1111, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1110)) - _1079;
        float _1123 = fma(_1112, cbModelParam._m0[31u].z, fma(_1111, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1110)) - _1083;
        float _1124 = fma(_1112, cbModelParam._m0[32u].z, fma(_1111, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1110)) - _1087;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1079 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1083 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[35u].z) + ((((((_1087 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1178 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1145.x + (-0.5));
        float _1180 = _1178 * (_1145.y + (-0.5));
        float _1181 = _1178 * (_1145.z + (-0.5));
        float _1188 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1152.x + (-0.5));
        float _1190 = _1188 * (_1152.y + (-0.5));
        float _1191 = _1188 * (_1152.z + (-0.5));
        float _1198 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1159.x + (-0.5));
        float _1200 = _1198 * (_1159.y + (-0.5));
        float _1201 = _1198 * (_1159.z + (-0.5));
        float _1208 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1166.x + (-0.5));
        float _1210 = _1208 * (_1166.y + (-0.5));
        float _1211 = _1208 * (_1166.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_523, _524, _525), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3473 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_1242 + 1.0))) + _1247) * _1212;
        float _1257 = _1180 * 0.5;
        float _1258 = _1190 * 0.5;
        float _1259 = _1200 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_523, _524, _525), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3506 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_1284 + 1.0))) + _1289) * _1213;
        float _1299 = _1181 * 0.5;
        float _1300 = _1191 * 0.5;
        float _1301 = _1201 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_523, _524, _525), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3539 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_1326 + 1.0))) + _1331) * _1214;
        _1348 = _1181;
        _1349 = _1180;
        _1350 = _1179;
        _1351 = _1191;
        _1352 = _1190;
        _1353 = _1189;
        _1354 = _1201;
        _1355 = _1200;
        _1356 = _1199;
        _1357 = _1214;
        _1358 = _1213;
        _1359 = _1212;
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1036;
        _1349 = _1036;
        _1350 = _1036;
        _1351 = _1036;
        _1352 = _1036;
        _1353 = _1036;
        _1354 = _1036;
        _1355 = _1036;
        _1356 = _1036;
        _1357 = _1036;
        _1358 = _1036;
        _1359 = _1036;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1048)) + _1048;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1050)) + _1050;
    float _1395 = fma(_1374, cbSceneParam._m0[89u].z, fma(_1373, cbSceneParam._m0[89u].y, _1372 * cbSceneParam._m0[89u].x));
    float _1398 = fma(_1374, cbSceneParam._m0[90u].z, fma(_1373, cbSceneParam._m0[90u].y, _1372 * cbSceneParam._m0[90u].x));
    float _1401 = fma(_1374, cbSceneParam._m0[91u].z, fma(_1373, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1372));
    float _1416 = _645 * 0.5;
    float _1417 = _646 * 0.5;
    float _1418 = _647 * 0.5;
    float _1419 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1422 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1425 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1459;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1432 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1035, _1039, _1042, _1045));
        float _1436 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1440 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1447 = dot(vec4(cbModelParam._m0[39u]), vec4(_1416, _1417, _1418, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1470;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1461 = dot(vec4(cbModelParam._m0[40u]), vec4(_1416, _1417, _1418, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1474 = (_1470 * cbModelParam._m0[1u].x) + (_1459 * (1.0 - cbModelParam._m0[1u].x));
    float _1484 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _526);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1484 : min(cbModelParam._m0[25u].z, _1484));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_706, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_706, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_706, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_647, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645));
        float _1547 = fma(_647, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645));
        float _1550 = fma(_647, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1578 = frontier_phi_25_23_ladder;
        }
        float _1924;
        if (_1547 > 0.0)
        {
            _1924 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1924 = frontier_phi_34_30_ladder;
        }
        float _2248;
        if (_1550 > 0.0)
        {
            _2248 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2248 = frontier_phi_48_41_ladder;
        }
        float _2250 = isnan(_1924) ? _1578 : (isnan(_1578) ? _1924 : min(_1578, _1924));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1544) + _1533;
        float _2256 = (_2251 * _1547) + _1537;
        float _2257 = (_2251 * _1550) + _1541;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2258;
        float _2261 = _2258 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2257 > _2261) || ((_2257 < _2259) || ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 < _2259) || (_2255 > _2261))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2257, cbModelParam._m0[9u].z, fma(_2256, cbModelParam._m0[9u].y, _2255 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2257, cbModelParam._m0[10u].z, fma(_2256, cbModelParam._m0[10u].y, _2255 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2257, cbModelParam._m0[11u].z, fma(_2256, cbModelParam._m0[11u].y, _2255 * cbModelParam._m0[11u].x))), _1485);
            frontier_phi_24_48_ladder = _2399.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2399.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2399.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_24_48_ladder_2;
        _1568 = frontier_phi_24_48_ladder_1;
        _1570 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_645, _646, _647), _1485);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _526);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_706, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_706, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_706, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_647, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645));
        float _1642 = fma(_647, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645));
        float _1645 = fma(_647, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645));
        float _1929;
        if (_1639 > 0.0)
        {
            _1929 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1929 = frontier_phi_36_32_ladder;
        }
        float _2274;
        if (_1642 > 0.0)
        {
            _2274 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2274 = frontier_phi_50_43_ladder;
        }
        float _2464;
        if (_1645 > 0.0)
        {
            _2464 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2464 = frontier_phi_68_61_ladder;
        }
        float _2466 = isnan(_2274) ? _1929 : (isnan(_1929) ? _2274 : min(_1929, _2274));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1639) + _1628;
        float _2472 = (_2467 * _1642) + _1632;
        float _2473 = (_2467 * _1645) + _1636;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2474;
        float _2477 = _2474 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2473 > _2477) || ((_2473 < _2475) || ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 < _2475) || (_2471 > _2477))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2473, cbModelParam._m0[17u].z, fma(_2472, cbModelParam._m0[17u].y, _2471 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2473, cbModelParam._m0[18u].z, fma(_2472, cbModelParam._m0[18u].y, _2471 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2473, cbModelParam._m0[19u].z, fma(_2472, cbModelParam._m0[19u].y, _2471 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_33_68_ladder = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_33_68_ladder_2;
        _1666 = frontier_phi_33_68_ladder;
        _1668 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_645, _646, _647), _1575);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1680 = ((((1.0 - _666) * ((_653 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_666 * _653)) * _637;
    float _1681 = _1680 * ((cbModelParam._m0[1u].w * (_1664 - _1566)) + _1566);
    float _1682 = _1680 * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1683 = _1680 * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_611 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1710 = _637 + (-1.0);
    float _1713 = (cbLight._m0[_1705].x * _1710) + 1.0;
    float _1714 = (cbLight._m0[_1705].y * _1710) + 1.0;
    uint _1715 = _1704 + 5u;
    float _1721 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1725 = _1704 + 4u;
    float _1731 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
    uint _1735 = _1704 | 1u;
    float _1746 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_523, _524, _525));
    float _1749 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_523, _524, _525));
    float _3675 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _3686 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1754 = (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.3183098733425140380859375;
    float _1756 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.3183098733425140380859375;
    float _1763 = ((cbLight._m0[_1715].x * _1721) * _1756) + ((cbLight._m0[_1725].x * _1731) * _1754);
    float _1764 = ((_1721 * cbLight._m0[_1715].y) * _1756) + ((_1731 * cbLight._m0[_1725].y) * _1754);
    float _1765 = ((_1721 * cbLight._m0[_1715].z) * _1756) + ((_1731 * cbLight._m0[_1725].z) * _1754);
    uint _1767 = _1704 + 8u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _526) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1704].x + _550;
    float _1783 = cbLight._m0[_1704].y + _551;
    float _1784 = cbLight._m0[_1704].z + _552;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1704].xyz));
    float _3697 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _1796 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _1797 = dot(vec3(_523, _524, _525), vec3(_1789, _1790, _1791));
    float _3719 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1789, _1790, _1791));
    float _3730 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1781 * _1781;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1821 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1796 * ((_1795 * _1821) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1821) + _1781) * _1795))) * _1795;
    float _3741 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    uint _1845 = _1704 + 9u;
    float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _526) * 0.949999988079071044921875);
    float _1857 = _1856 * _1856;
    float _1858 = cbLight._m0[_1735].x + _550;
    float _1859 = cbLight._m0[_1735].y + _551;
    float _1860 = cbLight._m0[_1735].z + _552;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1865 = _1864 * _1858;
    float _1866 = _1864 * _1859;
    float _1867 = _1864 * _1860;
    float _1868 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1735].xyz));
    float _3752 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1872 = dot(vec3(_523, _524, _525), vec3(_1865, _1866, _1867));
    float _3763 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1865, _1866, _1867));
    float _3774 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1857 * _1857;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1894 = 1.0 - _1857;
    float _1904 = (0.5 / (((_1796 * ((_1871 * _1894) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1894) + _1857) * _1871))) * _1871;
    float _3785 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    float _1916 = (((_1893 * cbLight._m0[_1845].x) * _1906) * _1721) + (((_1820 * cbLight._m0[_1767].x) * _1834) * _1731);
    float _1917 = (((_1893 * cbLight._m0[_1845].y) * _1906) * _1721) + (((_1820 * cbLight._m0[_1767].y) * _1834) * _1731);
    float _1918 = (((_1893 * cbLight._m0[_1845].z) * _1906) * _1721) + (((_1820 * cbLight._m0[_1767].z) * _1834) * _1731);
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    if (_1702.y == 0u)
    {
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1973;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1973;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1973;
        uvec4 _1988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1989 = _1988.x;
        uint _2000 = uint((float(_1988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _573) / _1989))) + floor(float(uint(cbSceneParam._m0[85u].x * _572) / _1989)));
        float _2010 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2011 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        uint _2014 = uint(isnan(14.0) ? _2011 : (isnan(_2011) ? 14.0 : min(_2011, 14.0)));
        uvec4 _2019 = texelFetch(g_lightClusterGridBuffer, int(((_2014 << 2u) + (_2000 << 6u)) >> 2u));
        uint _2020 = _2019.x;
        uint _2021 = _1988.z;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        float _2135;
        float _2137;
        if (((((1u << ((_2021 >> 4u) & 15u)) + 4294967295u) & _2020) == 0u) || ((_2021 & 240u) == 0u))
        {
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
            _2135 = 0.0;
            _2137 = 0.0;
        }
        else
        {
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2136;
            float _2138;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            float _2315 = 0.0;
            float _2316 = 0.0;
            uint _2317 = 0u;
            uint _2326;
            bool _2327;
            for (;;)
            {
                _2326 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2317 << 2u)) >> 2u)).x;
                _2327 = _2326 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2327)
                {
                    frontier_phi_63_pred = _2313;
                    frontier_phi_63_pred_1 = _2316;
                    frontier_phi_63_pred_2 = _2315;
                    frontier_phi_63_pred_3 = _2314;
                    frontier_phi_63_pred_4 = _2312;
                    frontier_phi_63_pred_5 = _2311;
                }
                else
                {
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    uint _2513;
                    _2507 = _2311;
                    _2508 = _2312;
                    _2509 = _2313;
                    _2510 = _2314;
                    _2511 = _2315;
                    _2512 = _2316;
                    _2513 = _2326;
                    float _2408;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    for (;;)
                    {
                        uint _2517 = uint(findLSB(_2513)) + (_2317 << 5u);
                        uint _2514 = (_2513 + 4294967295u) & _2513;
                        uint _2519 = _2517 * 48u;
                        vec4 _2533 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 3u)).x));
                        uint _2539 = (_2517 * 48u) + 4u;
                        vec4 _2552 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2539)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 3u)).x));
                        uint _2558 = (_2517 * 48u) + 8u;
                        vec3 _2569 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2558)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 2u)).x));
                        float _2573 = _2533.x - _1974;
                        float _2574 = _2533.y - _1975;
                        float _2575 = _2533.z - _1976;
                        float _2576 = dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575));
                        float _2579 = inversesqrt(_2576);
                        float _2580 = _2579 * _2573;
                        float _2581 = _2579 * _2574;
                        float _2582 = _2579 * _2575;
                        float _2583 = dot(vec3(_592, _595, _598), vec3(_2580, _2581, _2582));
                        float _2588 = 1.0 - (_2576 * _2533.w);
                        float _3806 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                        float _2589 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
                        float _2590 = sqrt(_2576) * _2552.w;
                        float _2593 = 1.39999997615814208984375 / (_2590 + 1.39999997615814208984375);
                        float _2594 = _2593 * _2593;
                        float _2597 = ((1.0 - _2594) * _2583) + _2594;
                        float _2600 = _2590 * _2590;
                        float _2604 = ((isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))) * _2589) / ((_2600 * 0.699999988079071044921875) + 1.0);
                        float _2608 = (-0.0) - _1974;
                        float _2609 = (-0.0) - _1975;
                        float _2610 = (-0.0) - _1976;
                        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
                        float _2615 = _2614 * _2608;
                        float _2616 = _2614 * _2609;
                        float _2617 = _2614 * _2610;
                        float _2625 = exp2(log2(1.0 / ((_2600 * 3.5) + 5.0)) * 0.25);
                        float _2626 = 1.0 - _653;
                        float _2633 = sqrt(1.0 - ((1.0 - (_2626 * _2626)) * (1.0 - (_2625 * _2625))));
                        float _2634 = _2633 * _2633;
                        float _2635 = _2634 * _2634;
                        float _2636 = _2615 + _2580;
                        float _2637 = _2616 + _2581;
                        float _2638 = _2617 + _2582;
                        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
                        float _2646 = dot(vec3(_592, _595, _598), vec3(_2615, _2616, _2617));
                        float _3822 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                        float _2649 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
                        float _2650 = dot(vec3(_592, _595, _598), vec3(_2642 * _2636, _2642 * _2637, _2642 * _2638));
                        float _3833 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
                        float _2653 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
                        float _2657 = ((_2653 * _2653) * (_2635 + (-1.0))) + 1.0;
                        float _2658 = _2593 * _2634;
                        float _2659 = _2658 * _2658;
                        float _2662 = ((1.0 - _2659) * _2583) + _2659;
                        float _3844 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                        float _2664 = 1.0 - _2634;
                        float _2674 = (0.5 / (((_2663 * ((_2649 * _2664) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2664) + _2634) * _2649))) * _2663;
                        float _3855 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2685 = (((_2635 * 3.1415927410125732421875) * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) / ((_2657 * _2657) * ((_2600 * 2.1991131305694580078125) + 3.141590118408203125))) * _2589;
                        _2411 = (_2604 * _2552.x) + _2510;
                        _2412 = (_2604 * _2552.y) + _2511;
                        _2413 = (_2604 * _2552.z) + _2512;
                        _2408 = (_2685 * _2569.x) + _2507;
                        _2409 = (_2685 * _2569.y) + _2508;
                        _2410 = (_2685 * _2569.z) + _2509;
                        if (_2514 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2507 = _2408;
                            _2508 = _2409;
                            _2509 = _2410;
                            _2510 = _2411;
                            _2511 = _2412;
                            _2512 = _2413;
                            _2513 = _2514;
                        }
                    }
                    frontier_phi_63_pred = _2410;
                    frontier_phi_63_pred_1 = _2413;
                    frontier_phi_63_pred_2 = _2412;
                    frontier_phi_63_pred_3 = _2411;
                    frontier_phi_63_pred_4 = _2409;
                    frontier_phi_63_pred_5 = _2408;
                }
                _2132 = frontier_phi_63_pred;
                _2138 = frontier_phi_63_pred_1;
                _2136 = frontier_phi_63_pred_2;
                _2134 = frontier_phi_63_pred_3;
                _2130 = frontier_phi_63_pred_4;
                _2128 = frontier_phi_63_pred_5;
                uint _2318 = _2317 + 1u;
                if (_2318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2311 = _2128;
                    _2312 = _2130;
                    _2313 = _2132;
                    _2314 = _2134;
                    _2315 = _2136;
                    _2316 = _2138;
                    _2317 = _2318;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
            _2135 = _2136;
            _2137 = _2138;
        }
        uvec4 _2141 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2142 = _2141.z;
        uint _2144 = (_2142 >> 8u) & 15u;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        if (((4294967295u << _2144) & _2020) == 0u)
        {
            _2279 = _2127;
            _2281 = _2129;
            _2283 = _2131;
            _2285 = _2133;
            _2287 = _2135;
            _2289 = _2137;
        }
        else
        {
            float _2304 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _2305 = _2304 * _1974;
            float _2306 = _2304 * _1975;
            float _2307 = _2304 * _1976;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2144 < ((_2142 >> 12u) & 15u))
            {
                float _2280;
                float _2282;
                float _2284;
                float _2286;
                float _2288;
                float _2290;
                float _2490 = _2127;
                float _2491 = _2129;
                float _2492 = _2131;
                float _2493 = _2133;
                float _2494 = _2135;
                float _2495 = _2137;
                uint _2496 = _2144;
                uint _2505;
                bool _2506;
                for (;;)
                {
                    _2505 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2496 << 2u)) >> 2u)).x;
                    _2506 = _2505 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2506)
                    {
                        frontier_phi_77_pred = _2495;
                        frontier_phi_77_pred_1 = _2494;
                        frontier_phi_77_pred_2 = _2493;
                        frontier_phi_77_pred_3 = _2492;
                        frontier_phi_77_pred_4 = _2491;
                        frontier_phi_77_pred_5 = _2490;
                    }
                    else
                    {
                        float _2720;
                        float _2721;
                        float _2722;
                        float _2723;
                        float _2724;
                        float _2725;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _2733 = _2490;
                        float _2734 = _2491;
                        float _2735 = _2492;
                        float _2736 = _2493;
                        float _2737 = _2494;
                        float _2738 = _2495;
                        uint _2739 = _2505;
                        uint _2740;
                        vec4 _2765;
                        float _2766;
                        vec4 _2781;
                        vec3 _2793;
                        vec4 _2808;
                        vec4 _2823;
                        float _2869;
                        bool _2870;
                        for (;;)
                        {
                            uint _2750 = ((_2496 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2739));
                            _2740 = (_2739 + 4294967295u) & _2739;
                            uint _2752 = _2750 * 40u;
                            _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            _2766 = _2765.w;
                            uint _2768 = (_2750 * 40u) + 4u;
                            _2781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 3u)).x));
                            uint _2783 = (_2750 * 40u) + 8u;
                            _2793 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 2u)).x));
                            uint _2795 = (_2750 * 40u) + 16u;
                            _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2810 = (_2750 * 40u) + 20u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            uint _2825 = (_2750 * 40u) + 24u;
                            vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            uint _2844 = (_2750 * 40u) + 28u;
                            vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            _2869 = fma(_1976, _2857.z, fma(_1975, _2857.y, _2857.x * _1974)) + _2857.w;
                            _2870 = !((fma(_1976, _2838.z, fma(_1975, _2838.y, _2838.x * _1974)) + _2838.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2870)
                            {
                                float _2897 = _2765.x - _1974;
                                float _2898 = _2765.y - _1975;
                                float _2899 = _2765.z - _1976;
                                float _2900 = dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899));
                                float _2903 = inversesqrt(_2900);
                                float _2904 = _2903 * _2897;
                                float _2905 = _2903 * _2898;
                                float _2906 = _2903 * _2899;
                                float _2910 = 1.0 - (_2900 / (_2766 * _2766));
                                float _3866 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2911 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                                float _2915 = sqrt(_2900) * _2781.w;
                                float _2917 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                                float _2918 = _2917 * _2917;
                                float _2921 = ((1.0 - _2918) * dot(vec3(_2904, _2905, _2906), vec3(_592, _595, _598))) + _2918;
                                float _2924 = _2915 * _2915;
                                float _2928 = (fma(_1976, _2808.z, fma(_1975, _2808.y, _2808.x * _1974)) + _2808.w) / _2869;
                                float _2929 = (fma(_1976, _2823.z, fma(_1975, _2823.y, _2823.x * _1974)) + _2823.w) / _2869;
                                float _2933 = 1.0 - dot(vec2(_2928, _2929), vec2(_2928, _2929));
                                float _3882 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2934 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                                float _2935 = _2934 * (((isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))) * _2911) / ((_2924 * 0.699999988079071044921875) + 1.0));
                                float _2947 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                                float _2948 = 1.0 - _653;
                                float _2955 = sqrt(1.0 - ((1.0 - (_2948 * _2948)) * (1.0 - (_2947 * _2947))));
                                float _2956 = _2955 * _2955;
                                float _2957 = _2956 * _2956;
                                float _2958 = _2904 - _2305;
                                float _2959 = _2905 - _2306;
                                float _2960 = _2906 - _2307;
                                float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                                float _2968 = dot(vec3(_592, _595, _598), vec3((-0.0) - _2305, (-0.0) - _2306, (-0.0) - _2307));
                                float _3893 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2971 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
                                float _2972 = dot(vec3(_592, _595, _598), vec3(_2964 * _2958, _2964 * _2959, _2964 * _2960));
                                float _3904 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2975 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _2979 = ((_2975 * _2975) * (_2957 + (-1.0))) + 1.0;
                                float _2980 = _2917 * _2956;
                                float _2981 = _2980 * _2980;
                                float _2987 = ((1.0 - _2981) * dot(vec3(_592, _595, _598), vec3(_2904, _2905, _2906))) + _2981;
                                float _3915 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2988 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                                float _2989 = 1.0 - _2956;
                                float _2999 = (0.5 / (((_2988 * ((_2971 * _2989) + _2956)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2956) * _2971))) * _2988;
                                float _3926 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3009 = (_2934 * _2911) * (((_2957 * 3.1415927410125732421875) * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) / ((_2979 * _2979) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2935 * _2781.x;
                                frontier_phi_83_pred_1 = _2935 * _2781.z;
                                frontier_phi_83_pred_2 = _2935 * _2781.y;
                                frontier_phi_83_pred_3 = _3009 * _2793.z;
                                frontier_phi_83_pred_4 = _3009 * _2793.y;
                                frontier_phi_83_pred_5 = _3009 * _2793.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3016 = frontier_phi_83_pred;
                            _3018 = frontier_phi_83_pred_1;
                            _3017 = frontier_phi_83_pred_2;
                            _3015 = frontier_phi_83_pred_3;
                            _3014 = frontier_phi_83_pred_4;
                            _3013 = frontier_phi_83_pred_5;
                            _2723 = _3016 + _2736;
                            _2724 = _3017 + _2737;
                            _2725 = _3018 + _2738;
                            _2720 = _3013 + _2733;
                            _2721 = _3014 + _2734;
                            _2722 = _3015 + _2735;
                            if (_2740 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2723;
                                _2737 = _2724;
                                _2738 = _2725;
                                _2739 = _2740;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2725;
                        frontier_phi_77_pred_1 = _2724;
                        frontier_phi_77_pred_2 = _2723;
                        frontier_phi_77_pred_3 = _2722;
                        frontier_phi_77_pred_4 = _2721;
                        frontier_phi_77_pred_5 = _2720;
                    }
                    _2290 = frontier_phi_77_pred;
                    _2288 = frontier_phi_77_pred_1;
                    _2286 = frontier_phi_77_pred_2;
                    _2284 = frontier_phi_77_pred_3;
                    _2282 = frontier_phi_77_pred_4;
                    _2280 = frontier_phi_77_pred_5;
                    uint _2497 = _2496 + 1u;
                    if (_2497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2490 = _2280;
                        _2491 = _2282;
                        _2492 = _2284;
                        _2493 = _2286;
                        _2494 = _2288;
                        _2495 = _2290;
                        _2496 = _2497;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2282;
                frontier_phi_52_53_ladder_1 = _2290;
                frontier_phi_52_53_ladder_2 = _2288;
                frontier_phi_52_53_ladder_3 = _2286;
                frontier_phi_52_53_ladder_4 = _2284;
                frontier_phi_52_53_ladder_5 = _2280;
            }
            else
            {
                frontier_phi_52_53_ladder = _2129;
                frontier_phi_52_53_ladder_1 = _2137;
                frontier_phi_52_53_ladder_2 = _2135;
                frontier_phi_52_53_ladder_3 = _2133;
                frontier_phi_52_53_ladder_4 = _2131;
                frontier_phi_52_53_ladder_5 = _2127;
            }
            _2279 = frontier_phi_52_53_ladder_5;
            _2281 = frontier_phi_52_53_ladder;
            _2283 = frontier_phi_52_53_ladder_4;
            _2285 = frontier_phi_52_53_ladder_3;
            _2287 = frontier_phi_52_53_ladder_2;
            _2289 = frontier_phi_52_53_ladder_1;
        }
        float _2294 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
        _2033 = (_2294 * _2285) + _1763;
        _2035 = (_2294 * _2287) + _1764;
        _2037 = (_2294 * _2289) + _1765;
        _2039 = ((_2279 * 0.039999999105930328369140625) * _2294) + _1916;
        _2041 = ((_2281 * 0.039999999105930328369140625) * _2294) + _1917;
        _2043 = ((_2283 * 0.039999999105930328369140625) * _2294) + _1918;
    }
    else
    {
        _2033 = _1763;
        _2035 = _1764;
        _2037 = _1765;
        _2039 = _1916;
        _2041 = _1917;
        _2043 = _1918;
    }
    uint _2049 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _3942 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3953 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3964 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _2074 = (((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_2033 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _637))) + ((_2039 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + (((_454 - (_454 * _288)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2049].x);
    float _2076 = ((((_455 - (_455 * _288)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2049].y) + ((_2041 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_2035 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _637)));
    float _2078 = (((cbMtdParam._m0[9u].z * (_456 - (_456 * _288))) * cbInstanceData._m0[_2049].z) + ((_2043 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2037 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _637)));
    float _2079 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2080 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    uint _2082 = _611 + 6u;
    float _2090 = _572 / cbSceneParam._m0[86u].x;
    float _2091 = _573 / cbSceneParam._m0[86u].y;
    vec4 _2105 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2090, _2091, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2107 = _2105.x;
    float _2108 = _2105.y;
    float _2109 = _2105.z;
    float _2110 = _2105.w;
    float _2190;
    float _2192;
    float _2194;
    float _2196;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2152 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2153 = _2152 / _545;
        float _2164 = _2153 * _261;
        float _2165 = _262 * _2153;
        float _2166 = (-0.0) - _2165;
        float _2167 = _2153 * _263;
        float _2169 = (cbSceneParam._m0[77u].w * _2166) / _2152;
        float _2170 = _2169 + cbSceneParam._m0[79u].w;
        float _2171 = cbSceneParam._m0[79u].w - _2165;
        float _2177 = sqrt(((_2164 * _2164) + (_2165 * _2165)) + (_2167 * _2167));
        float _2180 = (1.0 - (cbSceneParam._m0[77u].w / _2152)) * _2177;
        float _2186 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2188 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2421;
        if (abs((_2166 - _2169) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2421 = ((((_2170 > 0.0) ? exp2(_2186 * _2170) : (2.0 - exp2(_2188 * _2170))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2180;
        }
        else
        {
            float _2340 = 1.0 / cbSceneParam._m0[80u].x;
            float _2341 = isnan(_2171) ? _2170 : (isnan(_2170) ? _2171 : max(_2170, _2171));
            float _2342 = isnan(_2171) ? _2170 : (isnan(_2170) ? _2171 : min(_2170, _2171));
            float _2351 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : min(_2341, 0.0));
            float _2352 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : min(_2342, 0.0));
            _2421 = ((abs(_2177 / _2166) * cbSceneParam._m0[80u].y) * ((((_2351 - _2352) * 2.0) - ((exp2(_2186 * (isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0)))) - exp2(_2186 * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0))))) * _2340)) - ((exp2(_2188 * _2351) - exp2(_2188 * _2352)) * _2340))) + (_2180 * cbSceneParam._m0[80u].z);
        }
        vec4 _2423 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2090, _2091, 1.0), 0.0);
        float _2432 = exp2((_2421 * (-1.44269502162933349609375)) * (1.0 - _2423.w));
        float _2433 = log2(_2432);
        float _2449 = log2(_2110);
        _2190 = (exp2(_2449 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2433 * cbSceneParam._m0[78u].x)) * _2423.x) / cbSceneParam._m0[78u].x)) + _2107;
        _2192 = (exp2(_2449 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2433 * cbSceneParam._m0[78u].y)) * _2423.y) / cbSceneParam._m0[78u].y)) + _2108;
        _2194 = (exp2(_2449 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2433 * cbSceneParam._m0[78u].z)) * _2423.z) / cbSceneParam._m0[78u].z)) + _2109;
        _2196 = _2432 * _2110;
    }
    else
    {
        _2190 = _2107;
        _2192 = _2108;
        _2194 = _2109;
        _2196 = _2110;
    }
    bool _2459;
    vec4 _2206;
    vec4 _2228;
    float _2230;
    float _2234;
    float _2235;
    float _2236;
    float _2237;
    bool _2247;
    for (;;)
    {
        _2206 = cbMatDynParam._m0[0u];
        float _2208 = roundEven(_2206.y);
        bool _2209 = _2208 == 3.0;
        float _2210 = log2(_2196);
        float _2217 = exp2(_2210 * cbSceneParam._m0[78u].x) * _2079;
        float _2218 = exp2(_2210 * cbSceneParam._m0[78u].y) * _2080;
        float _2219 = exp2(_2210 * cbSceneParam._m0[78u].z) * _2081;
        float _2226 = _559 + (-0.5);
        _2228 = cbMtdParam._m0[1u];
        _2230 = _2228.y * _2226;
        float _2233 = (_2208 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2234 = _2233 * (_2209 ? _2217 : (_2217 + (cbSceneParam._m0[72u].w * _2190)));
        _2235 = _2233 * (_2209 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2192)));
        _2236 = _2233 * (_2209 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2194)));
        _2237 = _2226 * 0.999000012874603271484375;
        _2247 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2247)
        {
            if ((cbInstanceData._m0[_611 + 7u].x + _2237) < 0.5)
            {
                _2459 = true;
                break;
            }
        }
        uint _2375 = _613 + uint(_2206.w);
        if ((cbInstanceData._m0[_2375].w < 1.0) && ((cbInstanceData._m0[_2375].w + _2237) < 0.5))
        {
            _2459 = true;
            break;
        }
        if ((_2230 + 1.0) < _2228.x)
        {
            _2459 = true;
            break;
        }
        _2459 = false;
        break;
    }
    float _2690;
    if (_2459)
    {
        discard_state = true;
        _2690 = 0.0;
    }
    else
    {
        _2690 = cbInstanceData._m0[_2082].w;
    }
    SV_Target.x = _2234;
    SV_Target.y = _2235;
    SV_Target.z = _2236;
    SV_Target.w = _2690;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2082].w;
    discard_exit();
}


