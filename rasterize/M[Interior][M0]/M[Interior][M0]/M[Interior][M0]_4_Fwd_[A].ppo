#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _989;
float _3118;
float _3119;
float _3120;
float _3121;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    float _376 = (_352 > 0.0) ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_357 + (-0.5)) + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_358 + (-0.5)) + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    vec4 _444 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _452 = (_444.x * 2.0) + (-1.0);
    float _454 = (_444.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _3140 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0))));
    float _461 = _444.z * _286;
    float _464 = fma(_460, _195, fma(_454, _202, _452 * _188));
    float _467 = fma(_460, _196, fma(_454, _203, _452 * _189));
    float _470 = fma(_460, _197, fma(_454, _204, _452 * _190));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3151 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _478 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
    float _3162 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3173 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3184 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _501 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _502 = _259 * _501;
    float _503 = _260 * _501;
    float _504 = _261 * _501;
    vec4 _509 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _511 = _509.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _670 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _676 = (cbMatDynParam._m0[5u].x * _670) + cbMatDynParam._m0[5u].y;
        float _3195 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
        float _681 = (cbMatDynParam._m0[5u].z * _670) + cbMatDynParam._m0[5u].w;
        float _3206 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0))) - _677)) + _677) < ((_511 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _524 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _525 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _545 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _548 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _551 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _564 = uint(roundEven(NORMAL.w)) * 13u;
    uint _566 = _564 + 9u;
    uint _567 = _566 + uint(cbMatDynParam._m0[0u].w);
    float _573 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0)))) * cbInstanceData._m0[_567].x;
    float _574 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0)))) * cbInstanceData._m0[_567].y;
    float _575 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0)))) * cbInstanceData._m0[_567].z;
    float _3217 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _3228 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _3239 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    vec4 _587 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _524, cbSceneParam._m0[86u].y * _525));
    float _590 = _587.x * TEXCOORD.z;
    float _591 = dot(vec3(_475, _476, _477), vec3(_502, _503, _504));
    float _594 = _591 * 2.0;
    float _598 = (_594 * _475) - _502;
    float _599 = (_594 * _476) - _503;
    float _600 = (_594 * _477) - _504;
    float _604 = abs(dot(vec3(_502, _503, _504), vec3(_475, _476, _477)));
    float _3250 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _606 = sqrt(_478);
    float _619 = exp2((_606 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_606 * 3.0));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _988;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _715 = fma(_659, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _651));
        float _719 = fma(_659, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _651));
        float _723 = fma(_659, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _651));
        float _746 = _651 + _475;
        float _747 = _655 + _476;
        float _748 = _659 + _477;
        float _758 = fma(_748, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746)) - _715;
        float _759 = fma(_748, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746)) - _719;
        float _760 = fma(_748, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746)) - _723;
        float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
        float _777 = ((_764 * _758) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_715 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_764 * _759) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_719 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_764 * _760) / cbModelParam._m0[34u].z) + ((((((_723 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        float _816 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_782.x + (-0.5));
        float _818 = _816 * (_782.y + (-0.5));
        float _819 = _816 * (_782.z + (-0.5));
        float _826 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_789.x + (-0.5));
        float _828 = _826 * (_789.y + (-0.5));
        float _829 = _826 * (_789.z + (-0.5));
        float _836 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_796.x + (-0.5));
        float _838 = _836 * (_796.y + (-0.5));
        float _839 = _836 * (_796.z + (-0.5));
        float _846 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_803.x + (-0.5));
        float _848 = _846 * (_803.y + (-0.5));
        float _849 = _846 * (_803.z + (-0.5));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = _817 * 0.5;
        float _854 = _827 * 0.5;
        float _855 = _837 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _870 = (dot(vec3(_475, _476, _477), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3276 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _880 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3287 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3298 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * (_882 + 1.0))) + _887) * _850;
        float _897 = _818 * 0.5;
        float _898 = _828 * 0.5;
        float _899 = _838 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(_475, _476, _477), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3331 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_924 + 1.0))) + _929) * _851;
        float _939 = _819 * 0.5;
        float _940 = _829 * 0.5;
        float _941 = _839 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_475, _476, _477), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3364 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_966 + 1.0))) + _971) * _852;
        _988 = _819;
        _990 = _818;
        _991 = _817;
        _992 = _829;
        _993 = _828;
        _994 = _827;
        _995 = _839;
        _996 = _838;
        _997 = _837;
        _998 = _852;
        _999 = _851;
        _1000 = _850;
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
    }
    else
    {
        _988 = _989;
        _990 = _989;
        _991 = _989;
        _992 = _989;
        _993 = _989;
        _994 = _989;
        _995 = _989;
        _996 = _989;
        _997 = _989;
        _998 = _989;
        _999 = _989;
        _1000 = _989;
        _1001 = 0.0;
        _1002 = 0.0;
        _1003 = 0.0;
    }
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1032 = fma(_659, cbModelParam._m0[30u].z, fma(_655, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _651));
        float _1036 = fma(_659, cbModelParam._m0[31u].z, fma(_655, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _651));
        float _1040 = fma(_659, cbModelParam._m0[32u].z, fma(_655, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _651));
        float _1063 = _651 + _475;
        float _1064 = _655 + _476;
        float _1065 = _659 + _477;
        float _1075 = fma(_1065, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063)) - _1032;
        float _1076 = fma(_1065, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063)) - _1036;
        float _1077 = fma(_1065, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063)) - _1040;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1032 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1036 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[35u].z) + ((((((_1040 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1131 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1098.x + (-0.5));
        float _1133 = _1131 * (_1098.y + (-0.5));
        float _1134 = _1131 * (_1098.z + (-0.5));
        float _1141 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1105.x + (-0.5));
        float _1143 = _1141 * (_1105.y + (-0.5));
        float _1144 = _1141 * (_1105.z + (-0.5));
        float _1151 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1112.x + (-0.5));
        float _1153 = _1151 * (_1112.y + (-0.5));
        float _1154 = _1151 * (_1112.z + (-0.5));
        float _1161 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1119.x + (-0.5));
        float _1163 = _1161 * (_1119.y + (-0.5));
        float _1164 = _1161 * (_1119.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_475, _476, _477), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3427 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1195 + 1.0))) + _1200) * _1165;
        float _1210 = _1133 * 0.5;
        float _1211 = _1143 * 0.5;
        float _1212 = _1153 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_475, _476, _477), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3460 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1237 + 1.0))) + _1242) * _1166;
        float _1252 = _1134 * 0.5;
        float _1253 = _1144 * 0.5;
        float _1254 = _1154 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_475, _476, _477), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3493 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1279 + 1.0))) + _1284) * _1167;
        _1301 = _1134;
        _1302 = _1133;
        _1303 = _1132;
        _1304 = _1144;
        _1305 = _1143;
        _1306 = _1142;
        _1307 = _1154;
        _1308 = _1153;
        _1309 = _1152;
        _1310 = _1167;
        _1311 = _1166;
        _1312 = _1165;
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _989;
        _1302 = _989;
        _1303 = _989;
        _1304 = _989;
        _1305 = _989;
        _1306 = _989;
        _1307 = _989;
        _1308 = _989;
        _1309 = _989;
        _1310 = _989;
        _1311 = _989;
        _1312 = _989;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1001)) + _1001;
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1002)) + _1002;
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1003)) + _1003;
    float _1348 = fma(_1327, cbSceneParam._m0[89u].z, fma(_1326, cbSceneParam._m0[89u].y, _1325 * cbSceneParam._m0[89u].x));
    float _1351 = fma(_1327, cbSceneParam._m0[90u].z, fma(_1326, cbSceneParam._m0[90u].y, _1325 * cbSceneParam._m0[90u].x));
    float _1354 = fma(_1327, cbSceneParam._m0[91u].z, fma(_1326, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1325));
    float _1369 = _598 * 0.5;
    float _1370 = _599 * 0.5;
    float _1371 = _600 * 0.5;
    float _1372 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1375 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1378 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1412;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1385 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_988, _992, _995, _998));
        float _1389 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_990, _993, _996, _999));
        float _1393 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_991, _994, _997, _1000));
        float _1400 = dot(vec4(cbModelParam._m0[39u]), vec4(_1369, _1370, _1371, 1.0));
        _1412 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1412 = 1.0;
    }
    float _1423;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1414 = dot(vec4(cbModelParam._m0[40u]), vec4(_1369, _1370, _1371, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1427 = (_1423 * cbModelParam._m0[1u].x) + (_1412 * (1.0 - cbModelParam._m0[1u].x));
    float _1437 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1437 : min(cbModelParam._m0[25u].z, _1437));
    float _1519;
    float _1521;
    float _1523;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1486 = fma(_659, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651)) + cbModelParam._m0[13u].w;
        float _1490 = fma(_659, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651)) + cbModelParam._m0[14u].w;
        float _1494 = fma(_659, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651)) + cbModelParam._m0[15u].w;
        float _1497 = fma(_600, cbModelParam._m0[13u].z, fma(_599, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598));
        float _1500 = fma(_600, cbModelParam._m0[14u].z, fma(_599, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598));
        float _1503 = fma(_600, cbModelParam._m0[15u].z, fma(_599, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598));
        float _1531;
        if (_1497 > 0.0)
        {
            _1531 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1531 = frontier_phi_25_23_ladder;
        }
        float _1877;
        if (_1500 > 0.0)
        {
            _1877 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1877 = frontier_phi_34_30_ladder;
        }
        float _2201;
        if (_1503 > 0.0)
        {
            _2201 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2201 = frontier_phi_48_41_ladder;
        }
        float _2203 = isnan(_1877) ? _1531 : (isnan(_1531) ? _1877 : min(_1531, _1877));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1497) + _1486;
        float _2209 = (_2204 * _1500) + _1490;
        float _2210 = (_2204 * _1503) + _1494;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2211;
        float _2214 = _2211 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2210 > _2214) || ((_2210 < _2212) || ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 < _2212) || (_2208 > _2214))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2210, cbModelParam._m0[9u].z, fma(_2209, cbModelParam._m0[9u].y, _2208 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2210, cbModelParam._m0[10u].z, fma(_2209, cbModelParam._m0[10u].y, _2208 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2210, cbModelParam._m0[11u].z, fma(_2209, cbModelParam._m0[11u].y, _2208 * cbModelParam._m0[11u].x))), _1438);
            frontier_phi_24_48_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1519 = frontier_phi_24_48_ladder_2;
        _1521 = frontier_phi_24_48_ladder_1;
        _1523 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_598, _599, _600), _1438);
        _1519 = _1507.x * cbModelParam._m0[1u].y;
        _1521 = _1507.y * cbModelParam._m0[1u].y;
        _1523 = _1507.z * cbModelParam._m0[1u].y;
    }
    float _1527 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1527 : min(cbModelParam._m0[25u].w, _1527));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1581 = fma(_659, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651)) + cbModelParam._m0[21u].w;
        float _1585 = fma(_659, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651)) + cbModelParam._m0[22u].w;
        float _1589 = fma(_659, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651)) + cbModelParam._m0[23u].w;
        float _1592 = fma(_600, cbModelParam._m0[21u].z, fma(_599, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598));
        float _1595 = fma(_600, cbModelParam._m0[22u].z, fma(_599, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598));
        float _1598 = fma(_600, cbModelParam._m0[23u].z, fma(_599, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598));
        float _1882;
        if (_1592 > 0.0)
        {
            _1882 = abs((1.0 - _1581) / _1592);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1581 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1882 = frontier_phi_36_32_ladder;
        }
        float _2227;
        if (_1595 > 0.0)
        {
            _2227 = abs((1.0 - _1585) / _1595);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1585 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2227 = frontier_phi_50_43_ladder;
        }
        float _2417;
        if (_1598 > 0.0)
        {
            _2417 = abs((1.0 - _1589) / _1598);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1589 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2417 = frontier_phi_68_61_ladder;
        }
        float _2419 = isnan(_2227) ? _1882 : (isnan(_1882) ? _2227 : min(_1882, _2227));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1592) + _1581;
        float _2425 = (_2420 * _1595) + _1585;
        float _2426 = (_2420 * _1598) + _1589;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2427;
        float _2430 = _2427 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2426 > _2430) || ((_2426 < _2428) || ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 < _2428) || (_2424 > _2430))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2426, cbModelParam._m0[17u].z, fma(_2425, cbModelParam._m0[17u].y, _2424 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2426, cbModelParam._m0[18u].z, fma(_2425, cbModelParam._m0[18u].y, _2424 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2426, cbModelParam._m0[19u].z, fma(_2425, cbModelParam._m0[19u].y, _2424 * cbModelParam._m0[19u].x))), _1528);
            frontier_phi_33_68_ladder = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1617 = frontier_phi_33_68_ladder_2;
        _1619 = frontier_phi_33_68_ladder;
        _1621 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_598, _599, _600), _1528);
        _1617 = _1601.x * cbModelParam._m0[1u].z;
        _1619 = _1601.y * cbModelParam._m0[1u].z;
        _1621 = _1601.z * cbModelParam._m0[1u].z;
    }
    float _1633 = ((((1.0 - _619) * ((_606 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_619 * _606)) * _590;
    float _1634 = _1633 * ((cbModelParam._m0[1u].w * (_1617 - _1519)) + _1519);
    float _1635 = _1633 * ((cbModelParam._m0[1u].w * (_1619 - _1521)) + _1521);
    float _1636 = _1633 * ((cbModelParam._m0[1u].w * (_1621 - _1523)) + _1523);
    float _1639 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, _1634 * cbSceneParam._m0[91u].x));
    uvec4 _1655 = floatBitsToUint(cbInstanceData._m0[_564 + 5u]);
    uint _1657 = _1655.x * 14u;
    uint _1658 = _1657 + 13u;
    float _1663 = _590 + (-1.0);
    float _1666 = (cbLight._m0[_1658].x * _1663) + 1.0;
    float _1667 = (cbLight._m0[_1658].y * _1663) + 1.0;
    uint _1668 = _1657 + 5u;
    float _1674 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
    uint _1678 = _1657 + 4u;
    float _1684 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
    uint _1688 = _1657 | 1u;
    float _1699 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_475, _476, _477));
    float _1702 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_475, _476, _477));
    float _3629 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _3640 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1707 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.3183098733425140380859375;
    float _1709 = (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.3183098733425140380859375;
    float _1716 = ((cbLight._m0[_1668].x * _1674) * _1709) + ((cbLight._m0[_1678].x * _1684) * _1707);
    float _1717 = ((_1674 * cbLight._m0[_1668].y) * _1709) + ((_1684 * cbLight._m0[_1678].y) * _1707);
    float _1718 = ((_1674 * cbLight._m0[_1668].z) * _1709) + ((_1684 * cbLight._m0[_1678].z) * _1707);
    uint _1720 = _1657 + 8u;
    float _1733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1657].w)) * _478) * 0.949999988079071044921875);
    float _1734 = _1733 * _1733;
    float _1735 = cbLight._m0[_1657].x + _502;
    float _1736 = cbLight._m0[_1657].y + _503;
    float _1737 = cbLight._m0[_1657].z + _504;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1742 = _1741 * _1735;
    float _1743 = _1741 * _1736;
    float _1744 = _1741 * _1737;
    float _1745 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1657].xyz));
    float _3651 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _1749 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _1750 = dot(vec3(_475, _476, _477), vec3(_1742, _1743, _1744));
    float _3673 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_1742, _1743, _1744));
    float _3684 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1734 * _1734;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1773 = (exp2(log2(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1774 = 1.0 - _1734;
    float _1785 = (0.5 / (((_1749 * ((_1748 * _1774) + _1734)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1774) + _1734) * _1748))) * _1748;
    float _3695 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1787 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    uint _1798 = _1657 + 9u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _478) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1688].x + _502;
    float _1812 = cbLight._m0[_1688].y + _503;
    float _1813 = cbLight._m0[_1688].z + _504;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1688].xyz));
    float _3706 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _1825 = dot(vec3(_475, _476, _477), vec3(_1818, _1819, _1820));
    float _3717 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1818, _1819, _1820));
    float _3728 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = _1810 * _1810;
    float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
    float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1847 = 1.0 - _1810;
    float _1857 = (0.5 / (((_1749 * ((_1824 * _1847) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1847) + _1810) * _1824))) * _1824;
    float _3739 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
    float _1869 = (((_1846 * cbLight._m0[_1798].x) * _1859) * _1674) + (((_1773 * cbLight._m0[_1720].x) * _1787) * _1684);
    float _1870 = (((_1846 * cbLight._m0[_1798].y) * _1859) * _1674) + (((_1773 * cbLight._m0[_1720].y) * _1787) * _1684);
    float _1871 = (((_1846 * cbLight._m0[_1798].z) * _1859) * _1674) + (((_1773 * cbLight._m0[_1720].z) * _1787) * _1684);
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    float _1994;
    float _1996;
    if (_1655.y == 0u)
    {
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1926;
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1926;
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1926;
        uvec4 _1941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1942 = _1941.x;
        uint _1953 = uint((float(_1941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _525) / _1942))) + floor(float(uint(cbSceneParam._m0[85u].x * _524) / _1942)));
        float _1963 = (log2(_1929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1964 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        uint _1967 = uint(isnan(14.0) ? _1964 : (isnan(_1964) ? 14.0 : min(_1964, 14.0)));
        uvec4 _1972 = texelFetch(g_lightClusterGridBuffer, int(((_1967 << 2u) + (_1953 << 6u)) >> 2u));
        uint _1973 = _1972.x;
        uint _1974 = _1941.z;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        float _2088;
        float _2090;
        if (((((1u << ((_1974 >> 4u) & 15u)) + 4294967295u) & _1973) == 0u) || ((_1974 & 240u) == 0u))
        {
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
            _2088 = 0.0;
            _2090 = 0.0;
        }
        else
        {
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2089;
            float _2091;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            uint _2270 = 0u;
            uint _2279;
            bool _2280;
            for (;;)
            {
                _2279 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2270 << 2u)) >> 2u)).x;
                _2280 = _2279 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2280)
                {
                    frontier_phi_63_pred = _2266;
                    frontier_phi_63_pred_1 = _2269;
                    frontier_phi_63_pred_2 = _2268;
                    frontier_phi_63_pred_3 = _2267;
                    frontier_phi_63_pred_4 = _2265;
                    frontier_phi_63_pred_5 = _2264;
                }
                else
                {
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    uint _2466;
                    _2460 = _2264;
                    _2461 = _2265;
                    _2462 = _2266;
                    _2463 = _2267;
                    _2464 = _2268;
                    _2465 = _2269;
                    _2466 = _2279;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    for (;;)
                    {
                        uint _2470 = uint(findLSB(_2466)) + (_2270 << 5u);
                        uint _2467 = (_2466 + 4294967295u) & _2466;
                        uint _2472 = _2470 * 48u;
                        vec4 _2486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2472)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 3u)).x));
                        uint _2492 = (_2470 * 48u) + 4u;
                        vec4 _2505 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 3u)).x));
                        uint _2511 = (_2470 * 48u) + 8u;
                        vec3 _2522 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x));
                        float _2526 = _2486.x - _1927;
                        float _2527 = _2486.y - _1928;
                        float _2528 = _2486.z - _1929;
                        float _2529 = dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528));
                        float _2532 = inversesqrt(_2529);
                        float _2533 = _2532 * _2526;
                        float _2534 = _2532 * _2527;
                        float _2535 = _2532 * _2528;
                        float _2536 = dot(vec3(_545, _548, _551), vec3(_2533, _2534, _2535));
                        float _2541 = 1.0 - (_2529 * _2486.w);
                        float _3760 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
                        float _2542 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                        float _2543 = sqrt(_2529) * _2505.w;
                        float _2546 = 1.39999997615814208984375 / (_2543 + 1.39999997615814208984375);
                        float _2547 = _2546 * _2546;
                        float _2550 = ((1.0 - _2547) * _2536) + _2547;
                        float _2553 = _2543 * _2543;
                        float _2557 = ((isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))) * _2542) / ((_2553 * 0.699999988079071044921875) + 1.0);
                        float _2561 = (-0.0) - _1927;
                        float _2562 = (-0.0) - _1928;
                        float _2563 = (-0.0) - _1929;
                        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
                        float _2568 = _2567 * _2561;
                        float _2569 = _2567 * _2562;
                        float _2570 = _2567 * _2563;
                        float _2578 = exp2(log2(1.0 / ((_2553 * 3.5) + 5.0)) * 0.25);
                        float _2579 = 1.0 - _606;
                        float _2586 = sqrt(1.0 - ((1.0 - (_2579 * _2579)) * (1.0 - (_2578 * _2578))));
                        float _2587 = _2586 * _2586;
                        float _2588 = _2587 * _2587;
                        float _2589 = _2568 + _2533;
                        float _2590 = _2569 + _2534;
                        float _2591 = _2570 + _2535;
                        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
                        float _2599 = dot(vec3(_545, _548, _551), vec3(_2568, _2569, _2570));
                        float _3776 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2602 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
                        float _2603 = dot(vec3(_545, _548, _551), vec3(_2595 * _2589, _2595 * _2590, _2595 * _2591));
                        float _3787 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                        float _2606 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                        float _2610 = ((_2606 * _2606) * (_2588 + (-1.0))) + 1.0;
                        float _2611 = _2546 * _2587;
                        float _2612 = _2611 * _2611;
                        float _2615 = ((1.0 - _2612) * _2536) + _2612;
                        float _3798 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                        float _2616 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
                        float _2617 = 1.0 - _2587;
                        float _2627 = (0.5 / (((_2616 * ((_2602 * _2617) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2617) + _2587) * _2602))) * _2616;
                        float _3809 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                        float _2638 = (((_2588 * 3.1415927410125732421875) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) / ((_2610 * _2610) * ((_2553 * 2.1991131305694580078125) + 3.141590118408203125))) * _2542;
                        _2364 = (_2557 * _2505.x) + _2463;
                        _2365 = (_2557 * _2505.y) + _2464;
                        _2366 = (_2557 * _2505.z) + _2465;
                        _2361 = (_2638 * _2522.x) + _2460;
                        _2362 = (_2638 * _2522.y) + _2461;
                        _2363 = (_2638 * _2522.z) + _2462;
                        if (_2467 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2460 = _2361;
                            _2461 = _2362;
                            _2462 = _2363;
                            _2463 = _2364;
                            _2464 = _2365;
                            _2465 = _2366;
                            _2466 = _2467;
                        }
                    }
                    frontier_phi_63_pred = _2363;
                    frontier_phi_63_pred_1 = _2366;
                    frontier_phi_63_pred_2 = _2365;
                    frontier_phi_63_pred_3 = _2364;
                    frontier_phi_63_pred_4 = _2362;
                    frontier_phi_63_pred_5 = _2361;
                }
                _2085 = frontier_phi_63_pred;
                _2091 = frontier_phi_63_pred_1;
                _2089 = frontier_phi_63_pred_2;
                _2087 = frontier_phi_63_pred_3;
                _2083 = frontier_phi_63_pred_4;
                _2081 = frontier_phi_63_pred_5;
                uint _2271 = _2270 + 1u;
                if (_2271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2264 = _2081;
                    _2265 = _2083;
                    _2266 = _2085;
                    _2267 = _2087;
                    _2268 = _2089;
                    _2269 = _2091;
                    _2270 = _2271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
            _2088 = _2089;
            _2090 = _2091;
        }
        uvec4 _2094 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2095 = _2094.z;
        uint _2097 = (_2095 >> 8u) & 15u;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        if (((4294967295u << _2097) & _1973) == 0u)
        {
            _2232 = _2080;
            _2234 = _2082;
            _2236 = _2084;
            _2238 = _2086;
            _2240 = _2088;
            _2242 = _2090;
        }
        else
        {
            float _2257 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
            float _2258 = _2257 * _1927;
            float _2259 = _2257 * _1928;
            float _2260 = _2257 * _1929;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2097 < ((_2095 >> 12u) & 15u))
            {
                float _2233;
                float _2235;
                float _2237;
                float _2239;
                float _2241;
                float _2243;
                float _2443 = _2080;
                float _2444 = _2082;
                float _2445 = _2084;
                float _2446 = _2086;
                float _2447 = _2088;
                float _2448 = _2090;
                uint _2449 = _2097;
                uint _2458;
                bool _2459;
                for (;;)
                {
                    _2458 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2449 << 2u)) >> 2u)).x;
                    _2459 = _2458 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2459)
                    {
                        frontier_phi_77_pred = _2448;
                        frontier_phi_77_pred_1 = _2447;
                        frontier_phi_77_pred_2 = _2446;
                        frontier_phi_77_pred_3 = _2445;
                        frontier_phi_77_pred_4 = _2444;
                        frontier_phi_77_pred_5 = _2443;
                    }
                    else
                    {
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2678;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2686 = _2443;
                        float _2687 = _2444;
                        float _2688 = _2445;
                        float _2689 = _2446;
                        float _2690 = _2447;
                        float _2691 = _2448;
                        uint _2692 = _2458;
                        uint _2693;
                        vec4 _2718;
                        float _2719;
                        vec4 _2734;
                        vec3 _2746;
                        vec4 _2761;
                        vec4 _2777;
                        float _2823;
                        bool _2824;
                        for (;;)
                        {
                            uint _2703 = ((_2449 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2692));
                            _2693 = (_2692 + 4294967295u) & _2692;
                            uint _2705 = _2703 * 40u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            _2719 = _2718.w;
                            uint _2721 = (_2703 * 40u) + 4u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            uint _2736 = (_2703 * 40u) + 8u;
                            _2746 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x));
                            uint _2748 = (_2703 * 40u) + 16u;
                            _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            uint _2764 = (_2703 * 40u) + 20u;
                            _2777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 3u)).x));
                            uint _2779 = (_2703 * 40u) + 24u;
                            vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            uint _2798 = (_2703 * 40u) + 28u;
                            vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            _2823 = fma(_1929, _2811.z, fma(_1928, _2811.y, _2811.x * _1927)) + _2811.w;
                            _2824 = !((fma(_1929, _2792.z, fma(_1928, _2792.y, _2792.x * _1927)) + _2792.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2824)
                            {
                                float _2851 = _2718.x - _1927;
                                float _2852 = _2718.y - _1928;
                                float _2853 = _2718.z - _1929;
                                float _2854 = dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853));
                                float _2857 = inversesqrt(_2854);
                                float _2858 = _2857 * _2851;
                                float _2859 = _2857 * _2852;
                                float _2860 = _2857 * _2853;
                                float _2864 = 1.0 - (_2854 / (_2719 * _2719));
                                float _3820 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                                float _2865 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
                                float _2869 = sqrt(_2854) * _2734.w;
                                float _2871 = 1.39999997615814208984375 / (_2869 + 1.39999997615814208984375);
                                float _2872 = _2871 * _2871;
                                float _2875 = ((1.0 - _2872) * dot(vec3(_2858, _2859, _2860), vec3(_545, _548, _551))) + _2872;
                                float _2878 = _2869 * _2869;
                                float _2882 = (fma(_1929, _2761.z, fma(_1928, _2761.y, _2761.x * _1927)) + _2761.w) / _2823;
                                float _2883 = (fma(_1929, _2777.z, fma(_1928, _2777.y, _2777.x * _1927)) + _2777.w) / _2823;
                                float _2887 = 1.0 - dot(vec2(_2882, _2883), vec2(_2882, _2883));
                                float _3836 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                                float _2888 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                                float _2889 = _2888 * (((isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))) * _2865) / ((_2878 * 0.699999988079071044921875) + 1.0));
                                float _2901 = exp2(log2(1.0 / ((_2878 * 3.5) + 5.0)) * 0.25);
                                float _2902 = 1.0 - _606;
                                float _2909 = sqrt(1.0 - ((1.0 - (_2902 * _2902)) * (1.0 - (_2901 * _2901))));
                                float _2910 = _2909 * _2909;
                                float _2911 = _2910 * _2910;
                                float _2912 = _2858 - _2258;
                                float _2913 = _2859 - _2259;
                                float _2914 = _2860 - _2260;
                                float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                                float _2922 = dot(vec3(_545, _548, _551), vec3((-0.0) - _2258, (-0.0) - _2259, (-0.0) - _2260));
                                float _3847 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                                float _2925 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
                                float _2926 = dot(vec3(_545, _548, _551), vec3(_2918 * _2912, _2918 * _2913, _2918 * _2914));
                                float _3858 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                                float _2929 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                                float _2933 = ((_2929 * _2929) * (_2911 + (-1.0))) + 1.0;
                                float _2934 = _2871 * _2910;
                                float _2935 = _2934 * _2934;
                                float _2941 = ((1.0 - _2935) * dot(vec3(_545, _548, _551), vec3(_2858, _2859, _2860))) + _2935;
                                float _3869 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2942 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                                float _2943 = 1.0 - _2910;
                                float _2953 = (0.5 / (((_2942 * ((_2925 * _2943) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2942 * _2943) + _2910) * _2925))) * _2942;
                                float _3880 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2963 = (_2888 * _2865) * (((_2911 * 3.1415927410125732421875) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) / ((_2933 * _2933) * ((_2878 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2889 * _2734.x;
                                frontier_phi_83_pred_1 = _2889 * _2734.z;
                                frontier_phi_83_pred_2 = _2889 * _2734.y;
                                frontier_phi_83_pred_3 = _2963 * _2746.z;
                                frontier_phi_83_pred_4 = _2963 * _2746.y;
                                frontier_phi_83_pred_5 = _2963 * _2746.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2970 = frontier_phi_83_pred;
                            _2972 = frontier_phi_83_pred_1;
                            _2971 = frontier_phi_83_pred_2;
                            _2969 = frontier_phi_83_pred_3;
                            _2968 = frontier_phi_83_pred_4;
                            _2967 = frontier_phi_83_pred_5;
                            _2676 = _2970 + _2689;
                            _2677 = _2971 + _2690;
                            _2678 = _2972 + _2691;
                            _2673 = _2967 + _2686;
                            _2674 = _2968 + _2687;
                            _2675 = _2969 + _2688;
                            if (_2693 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2676;
                                _2690 = _2677;
                                _2691 = _2678;
                                _2692 = _2693;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2678;
                        frontier_phi_77_pred_1 = _2677;
                        frontier_phi_77_pred_2 = _2676;
                        frontier_phi_77_pred_3 = _2675;
                        frontier_phi_77_pred_4 = _2674;
                        frontier_phi_77_pred_5 = _2673;
                    }
                    _2243 = frontier_phi_77_pred;
                    _2241 = frontier_phi_77_pred_1;
                    _2239 = frontier_phi_77_pred_2;
                    _2237 = frontier_phi_77_pred_3;
                    _2235 = frontier_phi_77_pred_4;
                    _2233 = frontier_phi_77_pred_5;
                    uint _2450 = _2449 + 1u;
                    if (_2450 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2443 = _2233;
                        _2444 = _2235;
                        _2445 = _2237;
                        _2446 = _2239;
                        _2447 = _2241;
                        _2448 = _2243;
                        _2449 = _2450;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2235;
                frontier_phi_52_53_ladder_1 = _2243;
                frontier_phi_52_53_ladder_2 = _2241;
                frontier_phi_52_53_ladder_3 = _2239;
                frontier_phi_52_53_ladder_4 = _2237;
                frontier_phi_52_53_ladder_5 = _2233;
            }
            else
            {
                frontier_phi_52_53_ladder = _2082;
                frontier_phi_52_53_ladder_1 = _2090;
                frontier_phi_52_53_ladder_2 = _2088;
                frontier_phi_52_53_ladder_3 = _2086;
                frontier_phi_52_53_ladder_4 = _2084;
                frontier_phi_52_53_ladder_5 = _2080;
            }
            _2232 = frontier_phi_52_53_ladder_5;
            _2234 = frontier_phi_52_53_ladder;
            _2236 = frontier_phi_52_53_ladder_4;
            _2238 = frontier_phi_52_53_ladder_3;
            _2240 = frontier_phi_52_53_ladder_2;
            _2242 = frontier_phi_52_53_ladder_1;
        }
        float _2247 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
        _1986 = (_2247 * _2238) + _1716;
        _1988 = (_2247 * _2240) + _1717;
        _1990 = (_2247 * _2242) + _1718;
        _1992 = ((_2232 * 0.039999999105930328369140625) * _2247) + _1869;
        _1994 = ((_2234 * 0.039999999105930328369140625) * _2247) + _1870;
        _1996 = ((_2236 * 0.039999999105930328369140625) * _2247) + _1871;
    }
    else
    {
        _1986 = _1716;
        _1988 = _1717;
        _1990 = _1718;
        _1992 = _1869;
        _1994 = _1870;
        _1996 = _1871;
    }
    uint _2002 = _566 + uint(cbMatDynParam._m0[0u].w);
    float _3896 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3907 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3918 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _2027 = (((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1986 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _590))) + ((_1992 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1427)) * cbPerFrame._m0[3u].x)) + (((_416 - (_416 * _286)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2002].x);
    float _2029 = ((((_417 - (_417 * _286)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2002].y) + ((_1994 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1427)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1988 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _590)));
    float _2031 = (((cbMtdParam._m0[9u].z * (_418 - (_418 * _286))) * cbInstanceData._m0[_2002].z) + ((_1996 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1427)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1990 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _590)));
    float _2032 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2033 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2034 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    uint _2035 = _564 + 6u;
    float _2043 = _524 / cbSceneParam._m0[86u].x;
    float _2044 = _525 / cbSceneParam._m0[86u].y;
    vec4 _2058 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2043, _2044, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2060 = _2058.x;
    float _2061 = _2058.y;
    float _2062 = _2058.z;
    float _2063 = _2058.w;
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2105 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2106 = _2105 / _497;
        float _2117 = _2106 * _259;
        float _2118 = _260 * _2106;
        float _2119 = (-0.0) - _2118;
        float _2120 = _2106 * _261;
        float _2122 = (cbSceneParam._m0[77u].w * _2119) / _2105;
        float _2123 = _2122 + cbSceneParam._m0[79u].w;
        float _2124 = cbSceneParam._m0[79u].w - _2118;
        float _2130 = sqrt(((_2117 * _2117) + (_2118 * _2118)) + (_2120 * _2120));
        float _2133 = (1.0 - (cbSceneParam._m0[77u].w / _2105)) * _2130;
        float _2139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2374;
        if (abs((_2119 - _2122) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2374 = ((((_2123 > 0.0) ? exp2(_2139 * _2123) : (2.0 - exp2(_2141 * _2123))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2133;
        }
        else
        {
            float _2293 = 1.0 / cbSceneParam._m0[80u].x;
            float _2294 = isnan(_2124) ? _2123 : (isnan(_2123) ? _2124 : max(_2123, _2124));
            float _2295 = isnan(_2124) ? _2123 : (isnan(_2123) ? _2124 : min(_2123, _2124));
            float _2304 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : min(_2294, 0.0));
            float _2305 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : min(_2295, 0.0));
            _2374 = ((abs(_2130 / _2119) * cbSceneParam._m0[80u].y) * ((((_2304 - _2305) * 2.0) - ((exp2(_2139 * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)))) - exp2(_2139 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))))) * _2293)) - ((exp2(_2141 * _2304) - exp2(_2141 * _2305)) * _2293))) + (_2133 * cbSceneParam._m0[80u].z);
        }
        vec4 _2376 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2043, _2044, 1.0), 0.0);
        float _2385 = exp2((_2374 * (-1.44269502162933349609375)) * (1.0 - _2376.w));
        float _2386 = log2(_2385);
        float _2402 = log2(_2063);
        _2143 = (exp2(_2402 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2386 * cbSceneParam._m0[78u].x)) * _2376.x) / cbSceneParam._m0[78u].x)) + _2060;
        _2145 = (exp2(_2402 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2386 * cbSceneParam._m0[78u].y)) * _2376.y) / cbSceneParam._m0[78u].y)) + _2061;
        _2147 = (exp2(_2402 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2386 * cbSceneParam._m0[78u].z)) * _2376.z) / cbSceneParam._m0[78u].z)) + _2062;
        _2149 = _2385 * _2063;
    }
    else
    {
        _2143 = _2060;
        _2145 = _2061;
        _2147 = _2062;
        _2149 = _2063;
    }
    bool _2412;
    vec4 _2159;
    vec4 _2181;
    float _2183;
    float _2187;
    float _2188;
    float _2189;
    float _2190;
    bool _2200;
    for (;;)
    {
        _2159 = cbMatDynParam._m0[0u];
        float _2161 = roundEven(_2159.y);
        bool _2162 = _2161 == 3.0;
        float _2163 = log2(_2149);
        float _2170 = exp2(_2163 * cbSceneParam._m0[78u].x) * _2032;
        float _2171 = exp2(_2163 * cbSceneParam._m0[78u].y) * _2033;
        float _2172 = exp2(_2163 * cbSceneParam._m0[78u].z) * _2034;
        float _2179 = _511 + (-0.5);
        _2181 = cbMtdParam._m0[1u];
        _2183 = _2181.y * _2179;
        float _2186 = (_2161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2187 = _2186 * (_2162 ? _2170 : (_2170 + (cbSceneParam._m0[72u].w * _2143)));
        _2188 = _2186 * (_2162 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2145)));
        _2189 = _2186 * (_2162 ? _2172 : (_2172 + (cbSceneParam._m0[72u].w * _2147)));
        _2190 = _2179 * 0.999000012874603271484375;
        _2200 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2200)
        {
            if ((cbInstanceData._m0[_564 + 7u].x + _2190) < 0.5)
            {
                _2412 = true;
                break;
            }
        }
        uint _2328 = _566 + uint(_2159.w);
        if ((cbInstanceData._m0[_2328].w < 1.0) && ((cbInstanceData._m0[_2328].w + _2190) < 0.5))
        {
            _2412 = true;
            break;
        }
        if ((_2183 + 1.0) < _2181.x)
        {
            _2412 = true;
            break;
        }
        _2412 = false;
        break;
    }
    float _2643;
    if (_2412)
    {
        discard_state = true;
        _2643 = 0.0;
    }
    else
    {
        _2643 = cbInstanceData._m0[_2035].w;
    }
    SV_Target.x = _2187;
    SV_Target.y = _2188;
    SV_Target.z = _2189;
    SV_Target.w = _2643;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2035].w;
    discard_exit();
}


