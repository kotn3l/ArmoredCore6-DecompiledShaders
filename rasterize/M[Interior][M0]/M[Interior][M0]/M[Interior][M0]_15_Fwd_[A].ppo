#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1136;
float _3271;
float _3272;
float _3273;
float _3274;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    bool _376 = _354 > 0.0;
    float _378 = _376 ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = _359 + (-0.5);
    float _388 = _360 + (-0.5);
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_385 + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_388 + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _432 = (_418 - (_418 * _288)) * cbMtdParam._m0[9u].x;
    float _433 = (_419 - (_419 * _288)) * cbMtdParam._m0[9u].y;
    float _434 = cbMtdParam._m0[9u].z * (_420 - (_420 * _288));
    float _456 = (cbMtdParam._m0[21u].x * _347) * _353;
    float _458 = (cbMtdParam._m0[20u].w * _348) * _353;
    bool _459 = _456 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _464 = frontier_phi_11_10_ladder;
    }
    bool _466 = _458 > 0.0;
    float _471;
    if (_466)
    {
        _471 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _471 = frontier_phi_15_14_ladder;
    }
    float _474 = _376 ? (cbMtdParam._m0[16u].z / _354) : 5000.0;
    float _475 = isnan(_471) ? _464 : (isnan(_464) ? _471 : min(_464, _471));
    float _476 = isnan(_474) ? _475 : (isnan(_475) ? _474 : min(_475, _474));
    float _480 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _484 = ((_476 * _354) + _480) / _480;
    float _489 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _491 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _507 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_476 * _456)) / _484) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_476 * _458)) / _484) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512 = _507.x * cbMtdParam._m0[10u].x;
    float _513 = _507.y * cbMtdParam._m0[10u].y;
    float _514 = _507.z * cbMtdParam._m0[10u].z;
    float _522;
    if (_459)
    {
        _522 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_466)
    {
        _528 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_474) ? _530 : (isnan(_530) ? _474 : min(_530, _474));
    float _538 = ((_531 * _354) + _480) / _480;
    vec4 _552 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_531 * _456)) / _538) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_531 * _458)) / _538) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _554 = _552.w;
    float _556 = _554 - (_554 * _288);
    float _567 = 0.5 - (_288 * 0.5);
    float _577 = (((_432 - _301) + (_556 * ((_512 - _432) - (_512 * _288)))) * _567) + _301;
    float _578 = (((_433 - _303) + (_556 * ((_513 - _433) - (_513 * _288)))) * _567) + _303;
    float _579 = (((_434 - _305) + (_556 * ((_514 - _434) - (_514 * _288)))) * _567) + _305;
    vec4 _591 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _599 = (_591.x * 2.0) + (-1.0);
    float _601 = (_591.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_599, _601), vec2(_599, _601));
    float _3313 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _607 = sqrt(1.0 - (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))));
    float _608 = _591.z * _288;
    float _611 = fma(_607, _197, fma(_601, _204, _599 * _190));
    float _614 = fma(_607, _198, fma(_601, _205, _599 * _191));
    float _617 = fma(_607, _199, fma(_601, _206, _599 * _192));
    float _621 = inversesqrt(dot(vec3(_611, _614, _617), vec3(_611, _614, _617)));
    float _622 = _621 * _611;
    float _623 = _621 * _614;
    float _624 = _621 * _617;
    float _3324 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _625 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3346 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3357 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _649 = _261 * _648;
    float _650 = _262 * _648;
    float _651 = _263 * _648;
    vec4 _656 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _658 = _656.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _817 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _823 = (cbMatDynParam._m0[5u].x * _817) + cbMatDynParam._m0[5u].y;
        float _3368 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _828 = (cbMatDynParam._m0[5u].z * _817) + cbMatDynParam._m0[5u].w;
        float _3379 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) - _824)) + _824) < ((_658 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _671 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _672 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _692 = fma(_624, cbSceneParam._m0[5u].z, fma(_623, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _622));
    float _695 = fma(_624, cbSceneParam._m0[6u].z, fma(_623, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _622));
    float _698 = fma(_624, cbSceneParam._m0[7u].z, fma(_623, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _622));
    uint _711 = uint(roundEven(NORMAL.w)) * 13u;
    uint _713 = _711 + 9u;
    uint _714 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3390 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _671, cbSceneParam._m0[86u].y * _672));
    float _737 = _734.x * TEXCOORD.z;
    float _738 = dot(vec3(_622, _623, _624), vec3(_649, _650, _651));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _622) - _649;
    float _746 = (_741 * _623) - _650;
    float _747 = (_741 * _624) - _651;
    float _751 = abs(dot(vec3(_649, _650, _651), vec3(_622, _623, _624)));
    float _3423 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _753 = sqrt(_625);
    float _766 = exp2((_753 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_753 * 3.0));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _862 = fma(_806, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798));
        float _866 = fma(_806, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798));
        float _870 = fma(_806, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798));
        float _893 = _798 + _622;
        float _894 = _802 + _623;
        float _895 = _806 + _624;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _862;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _866;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _870;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_862 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_866 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_870 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_622, _623, _624), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3471 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_622, _623, _624), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3504 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_622, _623, _624), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3537 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1179 = fma(_806, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _798));
        float _1183 = fma(_806, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _798));
        float _1187 = fma(_806, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _798));
        float _1210 = _798 + _622;
        float _1211 = _802 + _623;
        float _1212 = _806 + _624;
        float _1222 = fma(_1212, cbModelParam._m0[30u].z, fma(_1211, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1210)) - _1179;
        float _1223 = fma(_1212, cbModelParam._m0[31u].z, fma(_1211, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1210)) - _1183;
        float _1224 = fma(_1212, cbModelParam._m0[32u].z, fma(_1211, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1210)) - _1187;
        float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
        float _1241 = ((_1228 * _1222) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1179 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1228 * _1223) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1183 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1228 * _1224) / cbModelParam._m0[35u].z) + ((((((_1187 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1278 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1245.x + (-0.5));
        float _1280 = _1278 * (_1245.y + (-0.5));
        float _1281 = _1278 * (_1245.z + (-0.5));
        float _1288 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1252.x + (-0.5));
        float _1290 = _1288 * (_1252.y + (-0.5));
        float _1291 = _1288 * (_1252.z + (-0.5));
        float _1298 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1259.x + (-0.5));
        float _1300 = _1298 * (_1259.y + (-0.5));
        float _1301 = _1298 * (_1259.z + (-0.5));
        float _1308 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1266.x + (-0.5));
        float _1310 = _1308 * (_1266.y + (-0.5));
        float _1311 = _1308 * (_1266.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_622, _623, _624), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3600 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1342 + 1.0))) + _1347) * _1312;
        float _1357 = _1280 * 0.5;
        float _1358 = _1290 * 0.5;
        float _1359 = _1300 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_622, _623, _624), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3633 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1384 + 1.0))) + _1389) * _1313;
        float _1399 = _1281 * 0.5;
        float _1400 = _1291 * 0.5;
        float _1401 = _1301 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_622, _623, _624), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3666 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1426 + 1.0))) + _1431) * _1314;
        _1448 = _1281;
        _1449 = _1280;
        _1450 = _1279;
        _1451 = _1291;
        _1452 = _1290;
        _1453 = _1289;
        _1454 = _1301;
        _1455 = _1300;
        _1456 = _1299;
        _1457 = _1314;
        _1458 = _1313;
        _1459 = _1312;
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = _1136;
        _1457 = _1136;
        _1458 = _1136;
        _1459 = _1136;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1148)) + _1148;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1149)) + _1149;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1150)) + _1150;
    float _1495 = fma(_1474, cbSceneParam._m0[89u].z, fma(_1473, cbSceneParam._m0[89u].y, _1472 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1474, cbSceneParam._m0[90u].z, fma(_1473, cbSceneParam._m0[90u].y, _1472 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1474, cbSceneParam._m0[91u].z, fma(_1473, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1472));
    float _1516 = _745 * 0.5;
    float _1517 = _746 * 0.5;
    float _1518 = _747 * 0.5;
    float _1519 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1522 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1525 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1559;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1532 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1536 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1540 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1547 = dot(vec4(cbModelParam._m0[39u]), vec4(_1516, _1517, _1518, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1570;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1561 = dot(vec4(cbModelParam._m0[40u]), vec4(_1516, _1517, _1518, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1574 = (_1570 * cbModelParam._m0[1u].x) + (_1559 * (1.0 - cbModelParam._m0[1u].x));
    float _1584 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _625);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1584 : min(cbModelParam._m0[25u].z, _1584));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1633 = fma(_806, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798)) + cbModelParam._m0[13u].w;
        float _1637 = fma(_806, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798)) + cbModelParam._m0[14u].w;
        float _1641 = fma(_806, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798)) + cbModelParam._m0[15u].w;
        float _1644 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1647 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1650 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1678;
        if (_1644 > 0.0)
        {
            _1678 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1678 = frontier_phi_41_39_ladder;
        }
        float _2023;
        if (_1647 > 0.0)
        {
            _2023 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2023 = frontier_phi_50_46_ladder;
        }
        float _2331;
        if (_1650 > 0.0)
        {
            _2331 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2331 = frontier_phi_64_57_ladder;
        }
        float _2333 = isnan(_2023) ? _1678 : (isnan(_1678) ? _2023 : min(_1678, _2023));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1644) + _1633;
        float _2339 = (_2334 * _1647) + _1637;
        float _2340 = (_2334 * _1650) + _1641;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1585);
            frontier_phi_40_64_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1666 = frontier_phi_40_64_ladder_2;
        _1668 = frontier_phi_40_64_ladder_1;
        _1670 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1585);
        _1666 = _1654.x * cbModelParam._m0[1u].y;
        _1668 = _1654.y * cbModelParam._m0[1u].y;
        _1670 = _1654.z * cbModelParam._m0[1u].y;
    }
    float _1674 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _625);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1674 : min(cbModelParam._m0[25u].w, _1674));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1727 = fma(_806, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798)) + cbModelParam._m0[21u].w;
        float _1731 = fma(_806, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798)) + cbModelParam._m0[22u].w;
        float _1735 = fma(_806, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798)) + cbModelParam._m0[23u].w;
        float _1738 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1741 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1744 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _2028;
        if (_1738 > 0.0)
        {
            _2028 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2028 = frontier_phi_52_48_ladder;
        }
        float _2357;
        if (_1741 > 0.0)
        {
            _2357 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2357 = frontier_phi_66_59_ladder;
        }
        float _2547;
        if (_1744 > 0.0)
        {
            _2547 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2547 = frontier_phi_84_77_ladder;
        }
        float _2549 = isnan(_2357) ? _2028 : (isnan(_2028) ? _2357 : min(_2028, _2357));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1738) + _1727;
        float _2555 = (_2550 * _1741) + _1731;
        float _2556 = (_2550 * _1744) + _1735;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1675);
            frontier_phi_49_84_ladder = _2798.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2798.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2798.x * cbModelParam._m0[1u].z;
        }
        _1763 = frontier_phi_49_84_ladder_2;
        _1765 = frontier_phi_49_84_ladder_1;
        _1767 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1675);
        _1763 = _1747.x * cbModelParam._m0[1u].z;
        _1765 = _1747.y * cbModelParam._m0[1u].z;
        _1767 = _1747.z * cbModelParam._m0[1u].z;
    }
    float _1779 = ((((1.0 - _766) * ((_753 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_766 * _753)) * _737;
    float _1780 = _1779 * ((cbModelParam._m0[1u].w * (_1763 - _1666)) + _1666);
    float _1781 = _1779 * ((cbModelParam._m0[1u].w * (_1765 - _1668)) + _1668);
    float _1782 = _1779 * ((cbModelParam._m0[1u].w * (_1767 - _1670)) + _1670);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1780 * cbSceneParam._m0[91u].x));
    uvec4 _1801 = floatBitsToUint(cbInstanceData._m0[_711 + 5u]);
    uint _1803 = _1801.x * 14u;
    uint _1804 = _1803 + 13u;
    float _1809 = _737 + (-1.0);
    float _1812 = (cbLight._m0[_1804].x * _1809) + 1.0;
    float _1813 = (cbLight._m0[_1804].y * _1809) + 1.0;
    uint _1814 = _1803 + 5u;
    float _1820 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
    uint _1824 = _1803 + 4u;
    float _1830 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1834 = _1803 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_622, _623, _624));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_622, _623, _624));
    float _3802 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _3813 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1814].x * _1820) * _1855) + ((cbLight._m0[_1824].x * _1830) * _1853);
    float _1863 = ((_1820 * cbLight._m0[_1814].y) * _1855) + ((_1830 * cbLight._m0[_1824].y) * _1853);
    float _1864 = ((_1820 * cbLight._m0[_1814].z) * _1855) + ((_1830 * cbLight._m0[_1824].z) * _1853);
    uint _1866 = _1803 + 8u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _625) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1803].x + _649;
    float _1882 = cbLight._m0[_1803].y + _650;
    float _1883 = cbLight._m0[_1803].z + _651;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_1803].xyz));
    float _3824 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _1895 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1896 = dot(vec3(_622, _623, _624), vec3(_1888, _1889, _1890));
    float _3846 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1900 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_1888, _1889, _1890));
    float _3857 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1904 = _1880 * _1880;
    float _1908 = ((_1899 * _1899) * (_1904 + (-1.0))) + 1.0;
    float _1919 = (exp2(log2(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1920 = 1.0 - _1880;
    float _1931 = (0.5 / (((_1895 * ((_1894 * _1920) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1895 * _1920) + _1880) * _1894))) * _1894;
    float _3868 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1904 / ((_1908 * _1908) * 3.141590118408203125));
    uint _1944 = _1803 + 9u;
    float _1955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _625) * 0.949999988079071044921875);
    float _1956 = _1955 * _1955;
    float _1957 = cbLight._m0[_1834].x + _649;
    float _1958 = cbLight._m0[_1834].y + _650;
    float _1959 = cbLight._m0[_1834].z + _651;
    float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
    float _1964 = _1963 * _1957;
    float _1965 = _1963 * _1958;
    float _1966 = _1963 * _1959;
    float _1967 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_1834].xyz));
    float _3879 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1971 = dot(vec3(_622, _623, _624), vec3(_1964, _1965, _1966));
    float _3890 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1975 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1964, _1965, _1966));
    float _3901 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1979 = _1956 * _1956;
    float _1983 = ((_1974 * _1974) * (_1979 + (-1.0))) + 1.0;
    float _1992 = (exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1993 = 1.0 - _1956;
    float _2003 = (0.5 / (((_1895 * ((_1970 * _1993) + _1956)) + 9.9999999392252902907785028219223e-09) + (((_1895 * _1993) + _1956) * _1970))) * _1970;
    float _3912 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2005 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1979 / ((_1983 * _1983) * 3.141590118408203125));
    float _2015 = (((_1992 * cbLight._m0[_1944].x) * _2005) * _1820) + (((_1919 * cbLight._m0[_1866].x) * _1933) * _1830);
    float _2016 = (((_1992 * cbLight._m0[_1944].y) * _2005) * _1820) + (((_1919 * cbLight._m0[_1866].y) * _1933) * _1830);
    float _2017 = (((_1992 * cbLight._m0[_1944].z) * _2005) * _1820) + (((_1919 * cbLight._m0[_1866].z) * _1933) * _1830);
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    float _2142;
    if (_1801.y == 0u)
    {
        float _2072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2072;
        float _2074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2072;
        float _2075 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2072;
        uvec4 _2087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2088 = _2087.x;
        uint _2099 = uint((float(_2087.y) * floor(float(uint(cbSceneParam._m0[85u].y * _672) / _2088))) + floor(float(uint(cbSceneParam._m0[85u].x * _671) / _2088)));
        float _2109 = (log2(_2075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2110 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        uint _2113 = uint(isnan(14.0) ? _2110 : (isnan(_2110) ? 14.0 : min(_2110, 14.0)));
        uvec4 _2118 = texelFetch(g_lightClusterGridBuffer, int(((_2113 << 2u) + (_2099 << 6u)) >> 2u));
        uint _2119 = _2118.x;
        uint _2120 = _2087.z;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        float _2220;
        if (((((1u << ((_2120 >> 4u) & 15u)) + 4294967295u) & _2119) == 0u) || ((_2120 & 240u) == 0u))
        {
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
            _2218 = 0.0;
            _2220 = 0.0;
        }
        else
        {
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2219;
            float _2221;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            float _2397 = 0.0;
            float _2398 = 0.0;
            float _2399 = 0.0;
            uint _2400 = 0u;
            uint _2409;
            bool _2410;
            for (;;)
            {
                _2409 = texelFetch(g_lightClassification, int((((_2113 << 5u) + (_2099 << 9u)) + (_2400 << 2u)) >> 2u)).x;
                _2410 = _2409 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2410)
                {
                    frontier_phi_79_pred = _2399;
                    frontier_phi_79_pred_1 = _2398;
                    frontier_phi_79_pred_2 = _2397;
                    frontier_phi_79_pred_3 = _2396;
                    frontier_phi_79_pred_4 = _2395;
                    frontier_phi_79_pred_5 = _2394;
                }
                else
                {
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    uint _2596;
                    _2590 = _2394;
                    _2591 = _2395;
                    _2592 = _2396;
                    _2593 = _2397;
                    _2594 = _2398;
                    _2595 = _2399;
                    _2596 = _2409;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    for (;;)
                    {
                        uint _2600 = uint(findLSB(_2596)) + (_2400 << 5u);
                        uint _2597 = (_2596 + 4294967295u) & _2596;
                        uint _2602 = _2600 * 48u;
                        vec4 _2616 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2622 = (_2600 * 48u) + 4u;
                        vec4 _2635 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 3u)).x));
                        uint _2641 = (_2600 * 48u) + 8u;
                        vec3 _2652 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2641)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 2u)).x));
                        float _2656 = _2616.x - _2073;
                        float _2657 = _2616.y - _2074;
                        float _2658 = _2616.z - _2075;
                        float _2659 = dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658));
                        float _2662 = inversesqrt(_2659);
                        float _2663 = _2662 * _2656;
                        float _2664 = _2662 * _2657;
                        float _2665 = _2662 * _2658;
                        float _2666 = dot(vec3(_692, _695, _698), vec3(_2663, _2664, _2665));
                        float _2671 = 1.0 - (_2659 * _2616.w);
                        float _3933 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2672 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2673 = sqrt(_2659) * _2635.w;
                        float _2676 = 1.39999997615814208984375 / (_2673 + 1.39999997615814208984375);
                        float _2677 = _2676 * _2676;
                        float _2680 = ((1.0 - _2677) * _2666) + _2677;
                        float _2683 = _2673 * _2673;
                        float _2687 = ((isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0))) * _2672) / ((_2683 * 0.699999988079071044921875) + 1.0);
                        float _2691 = (-0.0) - _2073;
                        float _2692 = (-0.0) - _2074;
                        float _2693 = (-0.0) - _2075;
                        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
                        float _2698 = _2697 * _2691;
                        float _2699 = _2697 * _2692;
                        float _2700 = _2697 * _2693;
                        float _2708 = exp2(log2(1.0 / ((_2683 * 3.5) + 5.0)) * 0.25);
                        float _2709 = 1.0 - _753;
                        float _2716 = sqrt(1.0 - ((1.0 - (_2709 * _2709)) * (1.0 - (_2708 * _2708))));
                        float _2717 = _2716 * _2716;
                        float _2718 = _2717 * _2717;
                        float _2719 = _2698 + _2663;
                        float _2720 = _2699 + _2664;
                        float _2721 = _2700 + _2665;
                        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
                        float _2729 = dot(vec3(_692, _695, _698), vec3(_2698, _2699, _2700));
                        float _3949 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2732 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2733 = dot(vec3(_692, _695, _698), vec3(_2725 * _2719, _2725 * _2720, _2725 * _2721));
                        float _3960 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2736 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2740 = ((_2736 * _2736) * (_2718 + (-1.0))) + 1.0;
                        float _2741 = _2676 * _2717;
                        float _2742 = _2741 * _2741;
                        float _2745 = ((1.0 - _2742) * _2666) + _2742;
                        float _3971 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2746 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2747 = 1.0 - _2717;
                        float _2757 = (0.5 / (((_2746 * ((_2732 * _2747) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2746 * _2747) + _2717) * _2732))) * _2746;
                        float _3982 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2768 = (((_2718 * 3.1415927410125732421875) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) / ((_2740 * _2740) * ((_2683 * 2.1991131305694580078125) + 3.141590118408203125))) * _2672;
                        _2494 = (_2687 * _2635.x) + _2593;
                        _2495 = (_2687 * _2635.y) + _2594;
                        _2496 = (_2687 * _2635.z) + _2595;
                        _2491 = (_2768 * _2652.x) + _2590;
                        _2492 = (_2768 * _2652.y) + _2591;
                        _2493 = (_2768 * _2652.z) + _2592;
                        if (_2597 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2590 = _2491;
                            _2591 = _2492;
                            _2592 = _2493;
                            _2593 = _2494;
                            _2594 = _2495;
                            _2595 = _2496;
                            _2596 = _2597;
                        }
                    }
                    frontier_phi_79_pred = _2496;
                    frontier_phi_79_pred_1 = _2495;
                    frontier_phi_79_pred_2 = _2494;
                    frontier_phi_79_pred_3 = _2493;
                    frontier_phi_79_pred_4 = _2492;
                    frontier_phi_79_pred_5 = _2491;
                }
                _2221 = frontier_phi_79_pred;
                _2219 = frontier_phi_79_pred_1;
                _2217 = frontier_phi_79_pred_2;
                _2215 = frontier_phi_79_pred_3;
                _2213 = frontier_phi_79_pred_4;
                _2211 = frontier_phi_79_pred_5;
                uint _2401 = _2400 + 1u;
                if (_2401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2394 = _2211;
                    _2395 = _2213;
                    _2396 = _2215;
                    _2397 = _2217;
                    _2398 = _2219;
                    _2399 = _2221;
                    _2400 = _2401;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
            _2218 = _2219;
            _2220 = _2221;
        }
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.z;
        uint _2227 = (_2225 >> 8u) & 15u;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        if (((4294967295u << _2227) & _2119) == 0u)
        {
            _2362 = _2210;
            _2364 = _2212;
            _2366 = _2214;
            _2368 = _2216;
            _2370 = _2218;
            _2372 = _2220;
        }
        else
        {
            float _2387 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
            float _2388 = _2387 * _2073;
            float _2389 = _2387 * _2074;
            float _2390 = _2387 * _2075;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2227 < ((_2225 >> 12u) & 15u))
            {
                float _2363;
                float _2365;
                float _2367;
                float _2369;
                float _2371;
                float _2373;
                float _2573 = _2210;
                float _2574 = _2212;
                float _2575 = _2214;
                float _2576 = _2216;
                float _2577 = _2218;
                float _2578 = _2220;
                uint _2579 = _2227;
                uint _2588;
                bool _2589;
                for (;;)
                {
                    _2588 = texelFetch(g_lightClassification, int((((_2113 << 5u) + (_2099 << 9u)) + (_2579 << 2u)) >> 2u)).x;
                    _2589 = _2588 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2589)
                    {
                        frontier_phi_93_pred = _2577;
                        frontier_phi_93_pred_1 = _2576;
                        frontier_phi_93_pred_2 = _2575;
                        frontier_phi_93_pred_3 = _2574;
                        frontier_phi_93_pred_4 = _2573;
                        frontier_phi_93_pred_5 = _2578;
                    }
                    else
                    {
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _2816 = _2573;
                        float _2817 = _2574;
                        float _2818 = _2575;
                        float _2819 = _2576;
                        float _2820 = _2577;
                        float _2821 = _2578;
                        uint _2822 = _2588;
                        uint _2823;
                        vec4 _2848;
                        float _2849;
                        vec4 _2864;
                        vec3 _2876;
                        vec4 _2891;
                        vec4 _2906;
                        float _2952;
                        bool _2953;
                        for (;;)
                        {
                            uint _2833 = ((_2579 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2822));
                            _2823 = (_2822 + 4294967295u) & _2822;
                            uint _2835 = _2833 * 40u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            _2849 = _2848.w;
                            uint _2851 = (_2833 * 40u) + 4u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2866 = (_2833 * 40u) + 8u;
                            _2876 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x));
                            uint _2878 = (_2833 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2893 = (_2833 * 40u) + 20u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2833 * 40u) + 24u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2927 = (_2833 * 40u) + 28u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2952 = fma(_2075, _2940.z, fma(_2074, _2940.y, _2940.x * _2073)) + _2940.w;
                            _2953 = !((fma(_2075, _2921.z, fma(_2074, _2921.y, _2921.x * _2073)) + _2921.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2953)
                            {
                                float _2980 = _2848.x - _2073;
                                float _2981 = _2848.y - _2074;
                                float _2982 = _2848.z - _2075;
                                float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                                float _2986 = inversesqrt(_2983);
                                float _2987 = _2986 * _2980;
                                float _2988 = _2986 * _2981;
                                float _2989 = _2986 * _2982;
                                float _2993 = 1.0 - (_2983 / (_2849 * _2849));
                                float _3993 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2994 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _2998 = sqrt(_2983) * _2864.w;
                                float _3000 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                                float _3001 = _3000 * _3000;
                                float _3004 = ((1.0 - _3001) * dot(vec3(_2987, _2988, _2989), vec3(_692, _695, _698))) + _3001;
                                float _3007 = _2998 * _2998;
                                float _3011 = (fma(_2075, _2891.z, fma(_2074, _2891.y, _2891.x * _2073)) + _2891.w) / _2952;
                                float _3012 = (fma(_2075, _2906.z, fma(_2074, _2906.y, _2906.x * _2073)) + _2906.w) / _2952;
                                float _3016 = 1.0 - dot(vec2(_3011, _3012), vec2(_3011, _3012));
                                float _4009 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3017 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3018 = _3017 * (((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2994) / ((_3007 * 0.699999988079071044921875) + 1.0));
                                float _3030 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                                float _3031 = 1.0 - _753;
                                float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                                float _3039 = _3038 * _3038;
                                float _3040 = _3039 * _3039;
                                float _3041 = _2987 - _2388;
                                float _3042 = _2988 - _2389;
                                float _3043 = _2989 - _2390;
                                float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                                float _3051 = dot(vec3(_692, _695, _698), vec3((-0.0) - _2388, (-0.0) - _2389, (-0.0) - _2390));
                                float _4020 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3054 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3055 = dot(vec3(_692, _695, _698), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                                float _4031 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3058 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                                float _3063 = _3000 * _3039;
                                float _3064 = _3063 * _3063;
                                float _3070 = ((1.0 - _3064) * dot(vec3(_692, _695, _698), vec3(_2987, _2988, _2989))) + _3064;
                                float _4042 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3072 = 1.0 - _3039;
                                float _3082 = (0.5 / (((_3071 * ((_3054 * _3072) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3071 * _3072) + _3039) * _3054))) * _3071;
                                float _4053 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3092 = (_3017 * _2994) * (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_3062 * _3062) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3018 * _2864.z;
                                frontier_phi_99_pred_1 = _3018 * _2864.y;
                                frontier_phi_99_pred_2 = _3018 * _2864.x;
                                frontier_phi_99_pred_3 = _3092 * _2876.z;
                                frontier_phi_99_pred_4 = _3092 * _2876.y;
                                frontier_phi_99_pred_5 = _3092 * _2876.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3101 = frontier_phi_99_pred;
                            _3100 = frontier_phi_99_pred_1;
                            _3099 = frontier_phi_99_pred_2;
                            _3098 = frontier_phi_99_pred_3;
                            _3097 = frontier_phi_99_pred_4;
                            _3096 = frontier_phi_99_pred_5;
                            _2806 = _3099 + _2819;
                            _2807 = _3100 + _2820;
                            _2808 = _3101 + _2821;
                            _2803 = _3096 + _2816;
                            _2804 = _3097 + _2817;
                            _2805 = _3098 + _2818;
                            if (_2823 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2823;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2807;
                        frontier_phi_93_pred_1 = _2806;
                        frontier_phi_93_pred_2 = _2805;
                        frontier_phi_93_pred_3 = _2804;
                        frontier_phi_93_pred_4 = _2803;
                        frontier_phi_93_pred_5 = _2808;
                    }
                    _2371 = frontier_phi_93_pred;
                    _2369 = frontier_phi_93_pred_1;
                    _2367 = frontier_phi_93_pred_2;
                    _2365 = frontier_phi_93_pred_3;
                    _2363 = frontier_phi_93_pred_4;
                    _2373 = frontier_phi_93_pred_5;
                    uint _2580 = _2579 + 1u;
                    if (_2580 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2573 = _2363;
                        _2574 = _2365;
                        _2575 = _2367;
                        _2576 = _2369;
                        _2577 = _2371;
                        _2578 = _2373;
                        _2579 = _2580;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2373;
                frontier_phi_68_69_ladder_1 = _2371;
                frontier_phi_68_69_ladder_2 = _2369;
                frontier_phi_68_69_ladder_3 = _2367;
                frontier_phi_68_69_ladder_4 = _2363;
                frontier_phi_68_69_ladder_5 = _2365;
            }
            else
            {
                frontier_phi_68_69_ladder = _2220;
                frontier_phi_68_69_ladder_1 = _2218;
                frontier_phi_68_69_ladder_2 = _2216;
                frontier_phi_68_69_ladder_3 = _2214;
                frontier_phi_68_69_ladder_4 = _2210;
                frontier_phi_68_69_ladder_5 = _2212;
            }
            _2362 = frontier_phi_68_69_ladder_4;
            _2364 = frontier_phi_68_69_ladder_5;
            _2366 = frontier_phi_68_69_ladder_3;
            _2368 = frontier_phi_68_69_ladder_2;
            _2370 = frontier_phi_68_69_ladder_1;
            _2372 = frontier_phi_68_69_ladder;
        }
        float _2377 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2132 = (_2377 * _2368) + _1862;
        _2134 = (_2377 * _2370) + _1863;
        _2136 = (_2377 * _2372) + _1864;
        _2138 = ((_2362 * 0.039999999105930328369140625) * _2377) + _2015;
        _2140 = ((_2364 * 0.039999999105930328369140625) * _2377) + _2016;
        _2142 = ((_2366 * 0.039999999105930328369140625) * _2377) + _2017;
    }
    else
    {
        _2132 = _1862;
        _2134 = _1863;
        _2136 = _1864;
        _2138 = _2015;
        _2140 = _2016;
        _2142 = _2017;
    }
    float _4069 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4080 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4091 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2159 = ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2132 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _737))) + ((_2138 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    float _2160 = ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2134 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _737))) + ((_2140 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    float _2161 = ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2136 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _737))) + ((_2142 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    float _2162 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2164 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    uint _2165 = _711 + 6u;
    float _2173 = _671 / cbSceneParam._m0[86u].x;
    float _2174 = _672 / cbSceneParam._m0[86u].y;
    vec4 _2188 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2173, _2174, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2190 = _2188.x;
    float _2191 = _2188.y;
    float _2192 = _2188.z;
    float _2193 = _2188.w;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _2235 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _2236 = _2235 / _644;
        float _2247 = _2236 * _261;
        float _2248 = _262 * _2236;
        float _2249 = (-0.0) - _2248;
        float _2250 = _2236 * _263;
        float _2252 = (cbSceneParam._m0[77u].w * _2249) / _2235;
        float _2253 = _2252 + cbSceneParam._m0[79u].w;
        float _2254 = cbSceneParam._m0[79u].w - _2248;
        float _2260 = sqrt(((_2247 * _2247) + (_2248 * _2248)) + (_2250 * _2250));
        float _2263 = (1.0 - (cbSceneParam._m0[77u].w / _2235)) * _2260;
        float _2269 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2271 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2504;
        if (abs((_2249 - _2252) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2504 = ((((_2253 > 0.0) ? exp2(_2269 * _2253) : (2.0 - exp2(_2271 * _2253))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2263;
        }
        else
        {
            float _2423 = 1.0 / cbSceneParam._m0[80u].x;
            float _2424 = isnan(_2254) ? _2253 : (isnan(_2253) ? _2254 : max(_2253, _2254));
            float _2425 = isnan(_2254) ? _2253 : (isnan(_2253) ? _2254 : min(_2253, _2254));
            float _2434 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : min(_2424, 0.0));
            float _2435 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : min(_2425, 0.0));
            _2504 = ((abs(_2260 / _2249) * cbSceneParam._m0[80u].y) * ((((_2434 - _2435) * 2.0) - ((exp2(_2269 * (isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0)))) - exp2(_2269 * (isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0))))) * _2423)) - ((exp2(_2271 * _2434) - exp2(_2271 * _2435)) * _2423))) + (_2263 * cbSceneParam._m0[80u].z);
        }
        vec4 _2506 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2173, _2174, 1.0), 0.0);
        float _2515 = exp2((_2504 * (-1.44269502162933349609375)) * (1.0 - _2506.w));
        float _2516 = log2(_2515);
        float _2532 = log2(_2193);
        _2273 = (exp2(_2532 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2516 * cbSceneParam._m0[78u].x)) * _2506.x) / cbSceneParam._m0[78u].x)) + _2190;
        _2275 = (exp2(_2532 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2516 * cbSceneParam._m0[78u].y)) * _2506.y) / cbSceneParam._m0[78u].y)) + _2191;
        _2277 = (exp2(_2532 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2516 * cbSceneParam._m0[78u].z)) * _2506.z) / cbSceneParam._m0[78u].z)) + _2192;
        _2279 = _2515 * _2193;
    }
    else
    {
        _2273 = _2190;
        _2275 = _2191;
        _2277 = _2192;
        _2279 = _2193;
    }
    bool _2542;
    vec4 _2289;
    vec4 _2311;
    float _2313;
    float _2317;
    float _2318;
    float _2319;
    float _2320;
    bool _2330;
    for (;;)
    {
        _2289 = cbMatDynParam._m0[0u];
        float _2291 = roundEven(_2289.y);
        bool _2292 = _2291 == 3.0;
        float _2293 = log2(_2279);
        float _2300 = exp2(_2293 * cbSceneParam._m0[78u].x) * _2162;
        float _2301 = exp2(_2293 * cbSceneParam._m0[78u].y) * _2163;
        float _2302 = exp2(_2293 * cbSceneParam._m0[78u].z) * _2164;
        float _2309 = _658 + (-0.5);
        _2311 = cbMtdParam._m0[1u];
        _2313 = _2311.y * _2309;
        float _2316 = (_2291 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2317 = _2316 * (_2292 ? _2300 : (_2300 + (cbSceneParam._m0[72u].w * _2273)));
        _2318 = _2316 * (_2292 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2275)));
        _2319 = _2316 * (_2292 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2277)));
        _2320 = _2309 * 0.999000012874603271484375;
        _2330 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2330)
        {
            if ((cbInstanceData._m0[_711 + 7u].x + _2320) < 0.5)
            {
                _2542 = true;
                break;
            }
        }
        uint _2458 = _713 + uint(_2289.w);
        if ((cbInstanceData._m0[_2458].w < 1.0) && ((cbInstanceData._m0[_2458].w + _2320) < 0.5))
        {
            _2542 = true;
            break;
        }
        if ((_2313 + 1.0) < _2311.x)
        {
            _2542 = true;
            break;
        }
        _2542 = false;
        break;
    }
    float _2773;
    if (_2542)
    {
        discard_state = true;
        _2773 = 0.0;
    }
    else
    {
        _2773 = cbInstanceData._m0[_2165].w;
    }
    SV_Target.x = _2317;
    SV_Target.y = _2318;
    SV_Target.z = _2319;
    SV_Target.w = _2773;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2165].w;
    discard_exit();
}


