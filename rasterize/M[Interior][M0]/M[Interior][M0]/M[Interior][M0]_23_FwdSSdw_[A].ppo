#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _428;
float _3242;
float _3243;
float _3244;
float _3245;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _343 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _359 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _366 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _375 = cbMtdParam._m0[23u].x + _263;
    float _376 = cbMtdParam._m0[23u].y + _264;
    float _377 = cbMtdParam._m0[23u].z + _265;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_359 * _192, _359 * _193, _359 * _194));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_366 * _206, _366 * _207, _366 * _208));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _397 * _393;
    float _403 = ((cbMtdParam._m0[19u].w * _391) * _397) + (_351 * cbMtdParam._m0[20u].y);
    float _404 = ((cbMtdParam._m0[20u].x * _392) * _397) + (_353 * cbMtdParam._m0[20u].z);
    float _407 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _408 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _426;
    float _429;
    float _431;
    if (_403 > 0.0)
    {
        float _412 = (1.0 - _407) / _403;
        _426 = _412;
        _429 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_412 * _398)) * 0.16666667163372039794921875;
        _431 = (fract((_412 * _404) + _408) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_403 < 0.0)
        {
            float _427 = ((-0.0) - _407) / _403;
            frontier_phi_3_2_ladder = _427;
            frontier_phi_3_2_ladder_1 = (fract((_427 * _404) + _408) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_427 * _398) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _428;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _426 = frontier_phi_3_2_ladder;
        _429 = frontier_phi_3_2_ladder_2;
        _431 = frontier_phi_3_2_ladder_1;
    }
    float _457;
    float _459;
    float _461;
    if (_404 > 0.0)
    {
        float _444 = (1.0 - _408) / _404;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_444 < _426)
        {
            frontier_phi_8_5_ladder = (fract(_444 * _398) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_444 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _444;
        }
        else
        {
            frontier_phi_8_5_ladder = _431;
            frontier_phi_8_5_ladder_1 = _429;
            frontier_phi_8_5_ladder_2 = _426;
        }
        _457 = frontier_phi_8_5_ladder_2;
        _459 = frontier_phi_8_5_ladder_1;
        _461 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_404 < 0.0)
        {
            float _458 = ((-0.0) - _408) / _404;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_458 < _426)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_458 * _398) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_458 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _458;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _431;
                frontier_phi_8_6_ladder_9_ladder_1 = _429;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _431;
            frontier_phi_8_6_ladder_1 = _429;
            frontier_phi_8_6_ladder_2 = _426;
        }
        _457 = frontier_phi_8_6_ladder_2;
        _459 = frontier_phi_8_6_ladder_1;
        _461 = frontier_phi_8_6_ladder;
    }
    float _465 = (_398 > 0.0) ? (cbMtdParam._m0[16u].w / _398) : 5000.0;
    float _478;
    float _479;
    if (_465 < _457)
    {
        _478 = ((_407 + cbMtdParam._m0[17u].x) + (_465 * _403)) * 0.16666667163372039794921875;
        _479 = (((_465 * _404) + _408) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _478 = _459;
        _479 = _461;
    }
    vec4 _481 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_478, _479));
    float _486 = _481.x * cbMtdParam._m0[13u].x;
    float _487 = _481.y * cbMtdParam._m0[13u].y;
    float _488 = _481.z * cbMtdParam._m0[13u].z;
    vec4 _506 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _510 = _506.z;
    float _513 = (_506.x * 2.0) + (-1.0);
    float _514 = (_506.y * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3254 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _520 = sqrt(1.0 - (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))));
    float _521 = _510 * _290;
    float _531 = (cbMtdParam._m0[15u].w * ((_347 - _521) + ((_510 - _347) * _290))) + _521;
    float _539 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _290))) + _513;
    float _540 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _290))) + _514;
    float _543 = fma(_520, _199, fma(_540, _206, _539 * _192));
    float _546 = fma(_520, _200, fma(_540, _207, _539 * _193));
    float _549 = fma(_520, _201, fma(_540, _208, _539 * _194));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3265 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _557 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3287 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3298 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _576 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _581 = _263 * _580;
    float _582 = _264 * _580;
    float _583 = _265 * _580;
    vec4 _588 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _590 = _588.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _752 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _758 = (cbMatDynParam._m0[5u].x * _752) + cbMatDynParam._m0[5u].y;
        float _3309 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _763 = (cbMatDynParam._m0[5u].z * _752) + cbMatDynParam._m0[5u].w;
        float _3320 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) - _759)) + _759) < ((_590 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _628 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _631 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _634 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _647 = uint(roundEven(NORMAL.w)) * 13u;
    uint _648 = _647 + 9u;
    uint _649 = _648 + uint(cbMatDynParam._m0[0u].w);
    float _655 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_649].x;
    float _656 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_649].y;
    float _657 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_649].z;
    float _3331 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    vec4 _669 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _672 = _669.x * TEXCOORD.z;
    float _673 = dot(vec3(_554, _555, _556), vec3(_581, _582, _583));
    float _676 = _673 * 2.0;
    float _680 = (_676 * _554) - _581;
    float _681 = (_676 * _555) - _582;
    float _682 = (_676 * _556) - _583;
    float _686 = abs(dot(vec3(_581, _582, _583), vec3(_554, _555, _556)));
    float _3364 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _688 = sqrt(_557);
    float _701 = exp2((_688 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_688 * 3.0));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _797 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _801 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _805 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _829 = _733 + _554;
        float _830 = _737 + _555;
        float _831 = _741 + _556;
        float _841 = fma(_831, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829)) - _797;
        float _842 = fma(_831, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829)) - _801;
        float _843 = fma(_831, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829)) - _805;
        float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
        float _860 = ((_847 * _841) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_797 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_847 * _842) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_801 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_847 * _843) / cbModelParam._m0[34u].z) + ((((((_805 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        float _899 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_865.x + (-0.5));
        float _901 = _899 * (_865.y + (-0.5));
        float _902 = _899 * (_865.z + (-0.5));
        float _909 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_872.x + (-0.5));
        float _911 = _909 * (_872.y + (-0.5));
        float _912 = _909 * (_872.z + (-0.5));
        float _919 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_879.x + (-0.5));
        float _921 = _919 * (_879.y + (-0.5));
        float _922 = _919 * (_879.z + (-0.5));
        float _929 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_886.x + (-0.5));
        float _931 = _929 * (_886.y + (-0.5));
        float _932 = _929 * (_886.z + (-0.5));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = _900 * 0.5;
        float _937 = _910 * 0.5;
        float _938 = _920 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _953 = (dot(vec3(_554, _555, _556), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _963 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3412 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_965 + 1.0))) + _970) * _933;
        float _980 = _901 * 0.5;
        float _981 = _911 * 0.5;
        float _982 = _921 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_554, _555, _556), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3445 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_1007 + 1.0))) + _1012) * _934;
        float _1022 = _902 * 0.5;
        float _1023 = _912 * 0.5;
        float _1024 = _922 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_554, _555, _556), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3478 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1049 + 1.0))) + _1054) * _935;
        _1071 = _902;
        _1072 = _901;
        _1073 = _900;
        _1074 = _912;
        _1075 = _911;
        _1076 = _910;
        _1077 = _922;
        _1078 = _921;
        _1079 = _920;
        _1080 = _935;
        _1081 = _934;
        _1082 = _933;
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
    }
    else
    {
        _1071 = _428;
        _1072 = _428;
        _1073 = _428;
        _1074 = _428;
        _1075 = _428;
        _1076 = _428;
        _1077 = _428;
        _1078 = _428;
        _1079 = _428;
        _1080 = _428;
        _1081 = _428;
        _1082 = _428;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1118 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1122 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1145 = _733 + _554;
        float _1146 = _737 + _555;
        float _1147 = _741 + _556;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_554, _555, _556), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3541 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_554, _555, _556), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3574 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_554, _555, _556), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3607 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _428;
        _1384 = _428;
        _1385 = _428;
        _1386 = _428;
        _1387 = _428;
        _1388 = _428;
        _1389 = _428;
        _1390 = _428;
        _1391 = _428;
        _1392 = _428;
        _1393 = _428;
        _1394 = _428;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1084)) + _1084;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _680 * 0.5;
    float _1452 = _681 * 0.5;
    float _1453 = _682 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1568 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1572 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1576 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1579 = fma(_682, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680));
        float _1582 = fma(_682, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680));
        float _1585 = fma(_682, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680));
        float _1613;
        if (_1579 > 0.0)
        {
            _1613 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1613 = frontier_phi_29_27_ladder;
        }
        float _1986;
        if (_1582 > 0.0)
        {
            _1986 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1986 = frontier_phi_38_34_ladder;
        }
        float _2310;
        if (_1585 > 0.0)
        {
            _2310 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2310 = frontier_phi_52_45_ladder;
        }
        float _2312 = isnan(_1986) ? _1613 : (isnan(_1613) ? _1986 : min(_1613, _1986));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1579) + _1568;
        float _2318 = (_2313 * _1582) + _1572;
        float _2319 = (_2313 * _1585) + _1576;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2321 = (-1.0) - _2320;
        float _2323 = _2320 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2319 > _2323) || ((_2319 < _2321) || ((_2318 > _2323) || ((_2318 < _2321) || ((_2317 < _2321) || (_2317 > _2323))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2319, cbModelParam._m0[9u].z, fma(_2318, cbModelParam._m0[9u].y, _2317 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2319, cbModelParam._m0[10u].z, fma(_2318, cbModelParam._m0[10u].y, _2317 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2319, cbModelParam._m0[11u].z, fma(_2318, cbModelParam._m0[11u].y, _2317 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_28_52_ladder = _2461.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2461.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2461.x * cbModelParam._m0[1u].y;
        }
        _1601 = frontier_phi_28_52_ladder_2;
        _1603 = frontier_phi_28_52_ladder_1;
        _1605 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_680, _681, _682), _1520);
        _1601 = _1589.x * cbModelParam._m0[1u].y;
        _1603 = _1589.y * cbModelParam._m0[1u].y;
        _1605 = _1589.z * cbModelParam._m0[1u].y;
    }
    float _1609 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1609 : min(cbModelParam._m0[25u].w, _1609));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_682, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680));
        float _1679 = fma(_682, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680));
        float _1682 = fma(_682, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680));
        float _1991;
        if (_1676 > 0.0)
        {
            _1991 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1991 = frontier_phi_40_36_ladder;
        }
        float _2336;
        if (_1679 > 0.0)
        {
            _2336 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2336 = frontier_phi_54_47_ladder;
        }
        float _2526;
        if (_1682 > 0.0)
        {
            _2526 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2526 = frontier_phi_72_65_ladder;
        }
        float _2528 = isnan(_2336) ? _1991 : (isnan(_1991) ? _2336 : min(_1991, _2336));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1676) + _1665;
        float _2534 = (_2529 * _1679) + _1669;
        float _2535 = (_2529 * _1682) + _1673;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1610);
            frontier_phi_37_72_ladder = _2777.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2777.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2777.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_37_72_ladder_2;
        _1703 = frontier_phi_37_72_ladder_1;
        _1705 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_680, _681, _682), _1610);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1717 = ((((1.0 - _701) * ((_688 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_701 * _688)) * _672;
    float _1718 = _1717 * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1719 = _1717 * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1720 = _1717 * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    vec4 _1737 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_608, _609));
    float _1739 = _1737.w;
    float _1751 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1739);
    float _1752 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1739);
    float _1753 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1739);
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_647 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1765 = _672 + (-1.0);
    float _1768 = (cbLight._m0[_1760].x * _1765) + 1.0;
    float _1769 = (cbLight._m0[_1760].y * _1765) + 1.0;
    uint _1770 = _1759 + 5u;
    float _1776 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1780 = _1759 + 4u;
    float _1790 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1794 = _1759 | 1u;
    float _1805 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_554, _555, _556));
    float _1808 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_554, _555, _556));
    float _3743 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _3754 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1813 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.3183098733425140380859375;
    float _1815 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1822 = ((cbLight._m0[_1770].x * _1776) * _1815) + (((cbLight._m0[_1780].x * _1751) * _1790) * _1813);
    float _1823 = ((_1776 * cbLight._m0[_1770].y) * _1815) + (((cbLight._m0[_1780].y * _1752) * _1790) * _1813);
    float _1824 = ((_1776 * cbLight._m0[_1770].z) * _1815) + (((cbLight._m0[_1780].z * _1753) * _1790) * _1813);
    uint _1826 = _1759 + 8u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _557) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1759].x + _581;
    float _1842 = cbLight._m0[_1759].y + _582;
    float _1843 = cbLight._m0[_1759].z + _583;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1759].xyz));
    float _3765 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _1855 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1856 = dot(vec3(_554, _555, _556), vec3(_1848, _1849, _1850));
    float _3787 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1848, _1849, _1850));
    float _3798 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1840 * _1840;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1880 = 1.0 - _1840;
    float _1891 = (0.5 / (((_1855 * ((_1854 * _1880) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1880) + _1840) * _1854))) * _1854;
    float _3809 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    uint _1907 = _1759 + 9u;
    float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _557) * 0.949999988079071044921875);
    float _1919 = _1918 * _1918;
    float _1920 = cbLight._m0[_1794].x + _581;
    float _1921 = cbLight._m0[_1794].y + _582;
    float _1922 = cbLight._m0[_1794].z + _583;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1927 = _1926 * _1920;
    float _1928 = _1926 * _1921;
    float _1929 = _1926 * _1922;
    float _1930 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1794].xyz));
    float _3820 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1934 = dot(vec3(_554, _555, _556), vec3(_1927, _1928, _1929));
    float _3831 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1938 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1927, _1928, _1929));
    float _3842 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1942 = _1919 * _1919;
    float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
    float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1956 = 1.0 - _1919;
    float _1966 = (0.5 / (((_1855 * ((_1933 * _1956) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1956) + _1919) * _1933))) * _1933;
    float _3853 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
    float _1978 = (((_1955 * cbLight._m0[_1907].x) * _1968) * _1776) + ((((cbLight._m0[_1826].x * _1751) * _1879) * _1893) * _1790);
    float _1979 = (((_1955 * cbLight._m0[_1907].y) * _1968) * _1776) + ((((cbLight._m0[_1826].y * _1752) * _1879) * _1893) * _1790);
    float _1980 = (((_1955 * cbLight._m0[_1907].z) * _1968) * _1776) + ((((cbLight._m0[_1826].z * _1753) * _1879) * _1893) * _1790);
    float _2095;
    float _2097;
    float _2099;
    float _2101;
    float _2103;
    float _2105;
    if (_1757.y == 0u)
    {
        float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2035;
        float _2037 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2035;
        float _2038 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2035;
        uvec4 _2050 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2051 = _2050.x;
        uint _2062 = uint((float(_2050.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2051))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2051)));
        float _2072 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2073 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        uint _2076 = uint(isnan(14.0) ? _2073 : (isnan(_2073) ? 14.0 : min(_2073, 14.0)));
        uvec4 _2081 = texelFetch(g_lightClusterGridBuffer, int(((_2076 << 2u) + (_2062 << 6u)) >> 2u));
        uint _2082 = _2081.x;
        uint _2083 = _2050.z;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        if (((((1u << ((_2083 >> 4u) & 15u)) + 4294967295u) & _2082) == 0u) || ((_2083 & 240u) == 0u))
        {
            _2189 = 0.0;
            _2191 = 0.0;
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
        }
        else
        {
            float _2190;
            float _2192;
            float _2194;
            float _2196;
            float _2198;
            float _2200;
            float _2373 = 0.0;
            float _2374 = 0.0;
            float _2375 = 0.0;
            float _2376 = 0.0;
            float _2377 = 0.0;
            float _2378 = 0.0;
            uint _2379 = 0u;
            uint _2388;
            bool _2389;
            for (;;)
            {
                _2388 = texelFetch(g_lightClassification, int((((_2076 << 5u) + (_2062 << 9u)) + (_2379 << 2u)) >> 2u)).x;
                _2389 = _2388 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2389)
                {
                    frontier_phi_67_pred = _2376;
                    frontier_phi_67_pred_1 = _2375;
                    frontier_phi_67_pred_2 = _2374;
                    frontier_phi_67_pred_3 = _2373;
                    frontier_phi_67_pred_4 = _2377;
                    frontier_phi_67_pred_5 = _2378;
                }
                else
                {
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    uint _2575;
                    _2569 = _2373;
                    _2570 = _2374;
                    _2571 = _2375;
                    _2572 = _2376;
                    _2573 = _2377;
                    _2574 = _2378;
                    _2575 = _2388;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    for (;;)
                    {
                        uint _2579 = uint(findLSB(_2575)) + (_2379 << 5u);
                        uint _2576 = (_2575 + 4294967295u) & _2575;
                        uint _2581 = _2579 * 48u;
                        vec4 _2595 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2581)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 3u)).x));
                        uint _2601 = (_2579 * 48u) + 4u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2601)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 3u)).x));
                        uint _2620 = (_2579 * 48u) + 8u;
                        vec3 _2631 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x));
                        float _2635 = _2595.x - _2036;
                        float _2636 = _2595.y - _2037;
                        float _2637 = _2595.z - _2038;
                        float _2638 = dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637));
                        float _2641 = inversesqrt(_2638);
                        float _2642 = _2641 * _2635;
                        float _2643 = _2641 * _2636;
                        float _2644 = _2641 * _2637;
                        float _2645 = dot(vec3(_628, _631, _634), vec3(_2642, _2643, _2644));
                        float _2650 = 1.0 - (_2638 * _2595.w);
                        float _3874 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
                        float _2651 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                        float _2652 = sqrt(_2638) * _2614.w;
                        float _2655 = 1.39999997615814208984375 / (_2652 + 1.39999997615814208984375);
                        float _2656 = _2655 * _2655;
                        float _2659 = ((1.0 - _2656) * _2645) + _2656;
                        float _2662 = _2652 * _2652;
                        float _2666 = ((isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0))) * _2651) / ((_2662 * 0.699999988079071044921875) + 1.0);
                        float _2670 = (-0.0) - _2036;
                        float _2671 = (-0.0) - _2037;
                        float _2672 = (-0.0) - _2038;
                        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2687 = exp2(log2(1.0 / ((_2662 * 3.5) + 5.0)) * 0.25);
                        float _2688 = 1.0 - _688;
                        float _2695 = sqrt(1.0 - ((1.0 - (_2688 * _2688)) * (1.0 - (_2687 * _2687))));
                        float _2696 = _2695 * _2695;
                        float _2697 = _2696 * _2696;
                        float _2698 = _2677 + _2642;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
                        float _2708 = dot(vec3(_628, _631, _634), vec3(_2677, _2678, _2679));
                        float _3890 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2711 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                        float _2712 = dot(vec3(_628, _631, _634), vec3(_2704 * _2698, _2704 * _2699, _2704 * _2700));
                        float _3901 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2715 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                        float _2719 = ((_2715 * _2715) * (_2697 + (-1.0))) + 1.0;
                        float _2720 = _2655 * _2696;
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2645) + _2721;
                        float _3912 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2726 = 1.0 - _2696;
                        float _2736 = (0.5 / (((_2725 * ((_2711 * _2726) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2725 * _2726) + _2696) * _2711))) * _2725;
                        float _3923 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2747 = (((_2697 * 3.1415927410125732421875) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) / ((_2719 * _2719) * ((_2662 * 2.1991131305694580078125) + 3.141590118408203125))) * _2651;
                        _2473 = (_2666 * _2614.x) + _2572;
                        _2474 = (_2666 * _2614.y) + _2573;
                        _2475 = (_2666 * _2614.z) + _2574;
                        _2470 = (_2747 * _2631.x) + _2569;
                        _2471 = (_2747 * _2631.y) + _2570;
                        _2472 = (_2747 * _2631.z) + _2571;
                        if (_2576 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2569 = _2470;
                            _2570 = _2471;
                            _2571 = _2472;
                            _2572 = _2473;
                            _2573 = _2474;
                            _2574 = _2475;
                            _2575 = _2576;
                        }
                    }
                    frontier_phi_67_pred = _2473;
                    frontier_phi_67_pred_1 = _2472;
                    frontier_phi_67_pred_2 = _2471;
                    frontier_phi_67_pred_3 = _2470;
                    frontier_phi_67_pred_4 = _2474;
                    frontier_phi_67_pred_5 = _2475;
                }
                _2196 = frontier_phi_67_pred;
                _2194 = frontier_phi_67_pred_1;
                _2192 = frontier_phi_67_pred_2;
                _2190 = frontier_phi_67_pred_3;
                _2198 = frontier_phi_67_pred_4;
                _2200 = frontier_phi_67_pred_5;
                uint _2380 = _2379 + 1u;
                if (_2380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2373 = _2190;
                    _2374 = _2192;
                    _2375 = _2194;
                    _2376 = _2196;
                    _2377 = _2198;
                    _2378 = _2200;
                    _2379 = _2380;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2189 = _2190;
            _2191 = _2192;
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
        }
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.z;
        uint _2206 = (_2204 >> 8u) & 15u;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        if (((4294967295u << _2206) & _2082) == 0u)
        {
            _2341 = _2189;
            _2343 = _2191;
            _2345 = _2193;
            _2347 = _2195;
            _2349 = _2197;
            _2351 = _2199;
        }
        else
        {
            float _2366 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float _2367 = _2366 * _2036;
            float _2368 = _2366 * _2037;
            float _2369 = _2366 * _2038;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2206 < ((_2204 >> 12u) & 15u))
            {
                float _2342;
                float _2344;
                float _2346;
                float _2348;
                float _2350;
                float _2352;
                float _2552 = _2189;
                float _2553 = _2191;
                float _2554 = _2193;
                float _2555 = _2195;
                float _2556 = _2197;
                float _2557 = _2199;
                uint _2558 = _2206;
                uint _2567;
                bool _2568;
                for (;;)
                {
                    _2567 = texelFetch(g_lightClassification, int((((_2076 << 5u) + (_2062 << 9u)) + (_2558 << 2u)) >> 2u)).x;
                    _2568 = _2567 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2568)
                    {
                        frontier_phi_81_pred = _2555;
                        frontier_phi_81_pred_1 = _2554;
                        frontier_phi_81_pred_2 = _2553;
                        frontier_phi_81_pred_3 = _2552;
                        frontier_phi_81_pred_4 = _2557;
                        frontier_phi_81_pred_5 = _2556;
                    }
                    else
                    {
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _2795 = _2552;
                        float _2796 = _2553;
                        float _2797 = _2554;
                        float _2798 = _2555;
                        float _2799 = _2556;
                        float _2800 = _2557;
                        uint _2801 = _2567;
                        uint _2802;
                        vec4 _2827;
                        float _2828;
                        vec4 _2843;
                        vec3 _2855;
                        vec4 _2870;
                        vec4 _2885;
                        float _2931;
                        bool _2932;
                        for (;;)
                        {
                            uint _2812 = ((_2558 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2801));
                            _2802 = (_2801 + 4294967295u) & _2801;
                            uint _2814 = _2812 * 40u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            _2828 = _2827.w;
                            uint _2830 = (_2812 * 40u) + 4u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            uint _2845 = (_2812 * 40u) + 8u;
                            _2855 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x));
                            uint _2857 = (_2812 * 40u) + 16u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2872 = (_2812 * 40u) + 20u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2887 = (_2812 * 40u) + 24u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2906 = (_2812 * 40u) + 28u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2931 = fma(_2038, _2919.z, fma(_2037, _2919.y, _2919.x * _2036)) + _2919.w;
                            _2932 = !((fma(_2038, _2900.z, fma(_2037, _2900.y, _2900.x * _2036)) + _2900.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2932)
                            {
                                float _2959 = _2827.x - _2036;
                                float _2960 = _2827.y - _2037;
                                float _2961 = _2827.z - _2038;
                                float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                                float _2965 = inversesqrt(_2962);
                                float _2966 = _2965 * _2959;
                                float _2967 = _2965 * _2960;
                                float _2968 = _2965 * _2961;
                                float _2972 = 1.0 - (_2962 / (_2828 * _2828));
                                float _3934 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                                float _2977 = sqrt(_2962) * _2843.w;
                                float _2979 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                                float _2980 = _2979 * _2979;
                                float _2983 = ((1.0 - _2980) * dot(vec3(_2966, _2967, _2968), vec3(_628, _631, _634))) + _2980;
                                float _2986 = _2977 * _2977;
                                float _2990 = (fma(_2038, _2870.z, fma(_2037, _2870.y, _2870.x * _2036)) + _2870.w) / _2931;
                                float _2991 = (fma(_2038, _2885.z, fma(_2037, _2885.y, _2885.x * _2036)) + _2885.w) / _2931;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _3950 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2973) / ((_2986 * 0.699999988079071044921875) + 1.0));
                                float _3009 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                                float _3010 = 1.0 - _688;
                                float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                                float _3018 = _3017 * _3017;
                                float _3019 = _3018 * _3018;
                                float _3020 = _2966 - _2367;
                                float _3021 = _2967 - _2368;
                                float _3022 = _2968 - _2369;
                                float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                                float _3030 = dot(vec3(_628, _631, _634), vec3((-0.0) - _2367, (-0.0) - _2368, (-0.0) - _2369));
                                float _3961 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _3034 = dot(vec3(_628, _631, _634), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                                float _3972 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                                float _3042 = _2979 * _3018;
                                float _3043 = _3042 * _3042;
                                float _3049 = ((1.0 - _3043) * dot(vec3(_628, _631, _634), vec3(_2966, _2967, _2968))) + _3043;
                                float _3983 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _3051 = 1.0 - _3018;
                                float _3061 = (0.5 / (((_3050 * ((_3033 * _3051) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3018) * _3033))) * _3050;
                                float _3994 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3071 = (_2996 * _2973) * (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) / ((_3041 * _3041) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2997 * _2843.x;
                                frontier_phi_87_pred_1 = _3071 * _2855.z;
                                frontier_phi_87_pred_2 = _3071 * _2855.y;
                                frontier_phi_87_pred_3 = _3071 * _2855.x;
                                frontier_phi_87_pred_4 = _2997 * _2843.z;
                                frontier_phi_87_pred_5 = _2997 * _2843.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3078 = frontier_phi_87_pred;
                            _3077 = frontier_phi_87_pred_1;
                            _3076 = frontier_phi_87_pred_2;
                            _3075 = frontier_phi_87_pred_3;
                            _3080 = frontier_phi_87_pred_4;
                            _3079 = frontier_phi_87_pred_5;
                            _2785 = _3078 + _2798;
                            _2786 = _3079 + _2799;
                            _2787 = _3080 + _2800;
                            _2782 = _3075 + _2795;
                            _2783 = _3076 + _2796;
                            _2784 = _3077 + _2797;
                            if (_2802 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2802;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2785;
                        frontier_phi_81_pred_1 = _2784;
                        frontier_phi_81_pred_2 = _2783;
                        frontier_phi_81_pred_3 = _2782;
                        frontier_phi_81_pred_4 = _2787;
                        frontier_phi_81_pred_5 = _2786;
                    }
                    _2348 = frontier_phi_81_pred;
                    _2346 = frontier_phi_81_pred_1;
                    _2344 = frontier_phi_81_pred_2;
                    _2342 = frontier_phi_81_pred_3;
                    _2352 = frontier_phi_81_pred_4;
                    _2350 = frontier_phi_81_pred_5;
                    uint _2559 = _2558 + 1u;
                    if (_2559 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2552 = _2342;
                        _2553 = _2344;
                        _2554 = _2346;
                        _2555 = _2348;
                        _2556 = _2350;
                        _2557 = _2352;
                        _2558 = _2559;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2352;
                frontier_phi_56_57_ladder_1 = _2350;
                frontier_phi_56_57_ladder_2 = _2348;
                frontier_phi_56_57_ladder_3 = _2344;
                frontier_phi_56_57_ladder_4 = _2342;
                frontier_phi_56_57_ladder_5 = _2346;
            }
            else
            {
                frontier_phi_56_57_ladder = _2199;
                frontier_phi_56_57_ladder_1 = _2197;
                frontier_phi_56_57_ladder_2 = _2195;
                frontier_phi_56_57_ladder_3 = _2191;
                frontier_phi_56_57_ladder_4 = _2189;
                frontier_phi_56_57_ladder_5 = _2193;
            }
            _2341 = frontier_phi_56_57_ladder_4;
            _2343 = frontier_phi_56_57_ladder_3;
            _2345 = frontier_phi_56_57_ladder_5;
            _2347 = frontier_phi_56_57_ladder_2;
            _2349 = frontier_phi_56_57_ladder_1;
            _2351 = frontier_phi_56_57_ladder;
        }
        float _2356 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _2095 = (_2356 * _2347) + _1822;
        _2097 = (_2356 * _2349) + _1823;
        _2099 = (_2356 * _2351) + _1824;
        _2101 = ((_2341 * 0.039999999105930328369140625) * _2356) + _1978;
        _2103 = ((_2343 * 0.039999999105930328369140625) * _2356) + _1979;
        _2105 = ((_2345 * 0.039999999105930328369140625) * _2356) + _1980;
    }
    else
    {
        _2095 = _1822;
        _2097 = _1823;
        _2099 = _1824;
        _2101 = _1978;
        _2103 = _1979;
        _2105 = _1980;
    }
    uint _2111 = _648 + uint(cbMatDynParam._m0[0u].w);
    float _4010 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4021 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4032 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _2136 = (((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2095 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _672))) + ((_2101 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2111].x * (_486 - (_486 * _290)));
    float _2138 = ((cbInstanceData._m0[_2111].y * (_487 - (_487 * _290))) + ((_2103 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2097 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _672)));
    float _2140 = ((cbInstanceData._m0[_2111].z * (_488 - (_488 * _290))) + ((_2105 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2099 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _672)));
    float _2141 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2142 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    uint _2144 = _647 + 6u;
    float _2152 = _608 / cbSceneParam._m0[86u].x;
    float _2153 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2167 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2152, _2153, (log2((isnan(cbSceneParam._m0[77u].w) ? _576 : (isnan(_576) ? cbSceneParam._m0[77u].w : min(_576, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2169 = _2167.x;
    float _2170 = _2167.y;
    float _2171 = _2167.z;
    float _2172 = _2167.w;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_576 > cbSceneParam._m0[78u].w)
    {
        float _2214 = isnan(_576) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _576 : min(cbSceneParam._m0[80u].w, _576));
        float _2215 = _2214 / _576;
        float _2226 = _2215 * _263;
        float _2227 = _264 * _2215;
        float _2228 = (-0.0) - _2227;
        float _2229 = _2215 * _265;
        float _2231 = (cbSceneParam._m0[77u].w * _2228) / _2214;
        float _2232 = _2231 + cbSceneParam._m0[79u].w;
        float _2233 = cbSceneParam._m0[79u].w - _2227;
        float _2239 = sqrt(((_2226 * _2226) + (_2227 * _2227)) + (_2229 * _2229));
        float _2242 = (1.0 - (cbSceneParam._m0[77u].w / _2214)) * _2239;
        float _2248 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2250 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2483;
        if (abs((_2228 - _2231) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2483 = ((((_2232 > 0.0) ? exp2(_2248 * _2232) : (2.0 - exp2(_2250 * _2232))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2242;
        }
        else
        {
            float _2402 = 1.0 / cbSceneParam._m0[80u].x;
            float _2403 = isnan(_2233) ? _2232 : (isnan(_2232) ? _2233 : max(_2232, _2233));
            float _2404 = isnan(_2233) ? _2232 : (isnan(_2232) ? _2233 : min(_2232, _2233));
            float _2413 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : min(_2403, 0.0));
            float _2414 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : min(_2404, 0.0));
            _2483 = ((abs(_2239 / _2228) * cbSceneParam._m0[80u].y) * ((((_2413 - _2414) * 2.0) - ((exp2(_2248 * (isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0)))) - exp2(_2248 * (isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0))))) * _2402)) - ((exp2(_2250 * _2413) - exp2(_2250 * _2414)) * _2402))) + (_2242 * cbSceneParam._m0[80u].z);
        }
        vec4 _2485 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2152, _2153, 1.0), 0.0);
        float _2494 = exp2((_2483 * (-1.44269502162933349609375)) * (1.0 - _2485.w));
        float _2495 = log2(_2494);
        float _2511 = log2(_2172);
        _2252 = (exp2(_2511 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2495 * cbSceneParam._m0[78u].x)) * _2485.x) / cbSceneParam._m0[78u].x)) + _2169;
        _2254 = (exp2(_2511 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2495 * cbSceneParam._m0[78u].y)) * _2485.y) / cbSceneParam._m0[78u].y)) + _2170;
        _2256 = (exp2(_2511 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2495 * cbSceneParam._m0[78u].z)) * _2485.z) / cbSceneParam._m0[78u].z)) + _2171;
        _2258 = _2494 * _2172;
    }
    else
    {
        _2252 = _2169;
        _2254 = _2170;
        _2256 = _2171;
        _2258 = _2172;
    }
    bool _2521;
    vec4 _2268;
    vec4 _2290;
    float _2292;
    float _2296;
    float _2297;
    float _2298;
    float _2299;
    bool _2309;
    for (;;)
    {
        _2268 = cbMatDynParam._m0[0u];
        float _2270 = roundEven(_2268.y);
        bool _2271 = _2270 == 3.0;
        float _2272 = log2(_2258);
        float _2279 = exp2(_2272 * cbSceneParam._m0[78u].x) * _2141;
        float _2280 = exp2(_2272 * cbSceneParam._m0[78u].y) * _2142;
        float _2281 = exp2(_2272 * cbSceneParam._m0[78u].z) * _2143;
        float _2288 = _590 + (-0.5);
        _2290 = cbMtdParam._m0[1u];
        _2292 = _2290.y * _2288;
        float _2295 = (_2270 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2296 = _2295 * (_2271 ? _2279 : (_2279 + (cbSceneParam._m0[72u].w * _2252)));
        _2297 = _2295 * (_2271 ? _2280 : (_2280 + (cbSceneParam._m0[72u].w * _2254)));
        _2298 = _2295 * (_2271 ? _2281 : (_2281 + (cbSceneParam._m0[72u].w * _2256)));
        _2299 = _2288 * 0.999000012874603271484375;
        _2309 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2309)
        {
            if ((cbInstanceData._m0[_647 + 7u].x + _2299) < 0.5)
            {
                _2521 = true;
                break;
            }
        }
        uint _2437 = _648 + uint(_2268.w);
        if ((cbInstanceData._m0[_2437].w < 1.0) && ((cbInstanceData._m0[_2437].w + _2299) < 0.5))
        {
            _2521 = true;
            break;
        }
        if ((_2292 + 1.0) < _2290.x)
        {
            _2521 = true;
            break;
        }
        _2521 = false;
        break;
    }
    float _2752;
    if (_2521)
    {
        discard_state = true;
        _2752 = 0.0;
    }
    else
    {
        _2752 = cbInstanceData._m0[_2144].w;
    }
    SV_Target.x = _2296;
    SV_Target.y = _2297;
    SV_Target.z = _2298;
    SV_Target.w = _2752;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2144].w;
    discard_exit();
}


