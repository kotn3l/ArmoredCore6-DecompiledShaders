#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _800;
float _2758;
float _2759;
float _2760;
float _2761;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _242);
    float _253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _242);
    float _254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _242);
    float _280 = cbMtdParam._m0[22u].y + _252;
    float _281 = cbMtdParam._m0[22u].z + _253;
    float _282 = cbMtdParam._m0[22u].w + _254;
    float _299 = (-0.0) - dot(vec3(_280, _281, _282), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _300 = (-0.0) - dot(vec3(_280, _281, _282), vec3(_194 * TANGENT.x, _194 * TANGENT.y, _194 * TANGENT.z));
    float _301 = (-0.0) - dot(vec3(_280, _281, _282), vec3((-0.0) - (NORMAL.x * _190), (-0.0) - (NORMAL.y * _190), (-0.0) - (NORMAL.z * _190)));
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _305 * _301;
    float _308 = (cbMtdParam._m0[19u].x * _299) * _305;
    float _310 = (cbMtdParam._m0[18u].w * _300) * _305;
    float _311 = fract(TEXCOORD.x);
    float _312 = fract(TEXCOORD.y);
    float _318;
    if (_308 > 0.0)
    {
        _318 = (1.0 - _311) / _308;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _311) / _308;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _318 = frontier_phi_3_2_ladder;
    }
    float _326;
    if (_310 > 0.0)
    {
        _326 = (1.0 - _312) / _310;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _312) / _310;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _326 = frontier_phi_7_6_ladder;
    }
    float _330 = (_306 > 0.0) ? (cbMtdParam._m0[15u].x / _306) : 5000.0;
    float _331 = isnan(_326) ? _318 : (isnan(_318) ? _326 : min(_318, _326));
    float _332 = isnan(_330) ? _331 : (isnan(_331) ? _330 : min(_331, _330));
    float _336 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _343 = ((_332 * _306) + _336) / _336;
    vec4 _369 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_311 + (-0.5)) + (_332 * _308)) / _343) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_312 + (-0.5)) + (_332 * _310)) / _343) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _380 = cbMtdParam._m0[9u].x * _369.x;
    float _381 = cbMtdParam._m0[9u].y * _369.y;
    float _382 = cbMtdParam._m0[9u].z * _369.z;
    float _2780 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _2791 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _2802 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _401 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _405 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _406 = _252 * _405;
    float _407 = _253 * _405;
    float _408 = _254 * _405;
    vec4 _413 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _415 = _413.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _512 = sqrt(((_252 * _252) + (_253 * _253)) + (_254 * _254));
        float _519 = (cbMatDynParam._m0[5u].x * _512) + cbMatDynParam._m0[5u].y;
        float _2813 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
        float _520 = isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0));
        float _524 = (cbMatDynParam._m0[5u].z * _512) + cbMatDynParam._m0[5u].w;
        float _2824 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0))) - _520)) + _520) < ((_415 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _428 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _429 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _442 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0)))) * cbInstanceData._m0[_445].z;
    float _2835 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0));
    float _2846 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0));
    float _2857 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
    vec4 _465 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _428, cbSceneParam._m0[86u].y * _429));
    float _468 = _465.x * TEXCOORD.z;
    float _469 = (-0.0) - _406;
    float _470 = (-0.0) - _407;
    float _471 = (-0.0) - _408;
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _799;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = (cbModelParam._m0[37u].x * ((((fma(_501, cbModelParam._m0[26u].z, fma(_497, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _493)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _588 = (cbModelParam._m0[37u].y * ((((fma(_501, cbModelParam._m0[27u].z, fma(_497, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _493)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _589 = (((((fma(_501, cbModelParam._m0[28u].z, fma(_497, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _493)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _626 * (_592.x + (-0.5));
        float _629 = _626 * (_592.y + (-0.5));
        float _630 = _626 * (_592.z + (-0.5));
        float _637 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_599.x + (-0.5));
        float _639 = _637 * (_599.y + (-0.5));
        float _640 = _637 * (_599.z + (-0.5));
        float _647 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _648 = _647 * (_606.x + (-0.5));
        float _649 = _647 * (_606.y + (-0.5));
        float _650 = _647 * (_606.z + (-0.5));
        float _657 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_613.x + (-0.5));
        float _659 = _657 * (_613.y + (-0.5));
        float _660 = _657 * (_613.z + (-0.5));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = _628 * 0.5;
        float _665 = _638 * 0.5;
        float _666 = _648 * 0.5;
        float _667 = dot(vec3(_664, _665, _666), vec3(_664, _665, _666));
        float _672 = (_667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_667);
        float _681 = (dot(vec3(0.0), vec3(_672 * _664, _672 * _665, _672 * _666)) + 1.0) * 0.5;
        float _2883 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _691 = sqrt(((_665 * _665) + (_664 * _664)) + (_666 * _666)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _2894 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _2894 : (isnan(_2894) ? 1.0 : min(_2894, 1.0));
        float _693 = _692 * 2.0;
        float _697 = (1.0 - _692) / (_692 + 1.0);
        float _2905 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0));
        float _707 = ((((1.0 - _698) * (_693 + 2.0)) * exp2(log2(isnan(1.0) ? _2883 : (isnan(_2883) ? 1.0 : min(_2883, 1.0))) * (_693 + 1.0))) + _698) * _661;
        float _708 = _629 * 0.5;
        float _709 = _639 * 0.5;
        float _710 = _649 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _724 = (dot(vec3(0.0), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _2916 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _733 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _2927 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _2938 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0))) * (_735 + 1.0))) + _740) * _662;
        float _750 = _630 * 0.5;
        float _751 = _640 * 0.5;
        float _752 = _650 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(0.0), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _2949 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _2960 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _2971 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0))) * (_777 + 1.0))) + _782) * _663;
        _799 = _630;
        _801 = _629;
        _802 = _628;
        _803 = _640;
        _804 = _639;
        _805 = _638;
        _806 = _650;
        _807 = _649;
        _808 = _648;
        _809 = _663;
        _810 = _662;
        _811 = _661;
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
    }
    else
    {
        _799 = _800;
        _801 = _800;
        _802 = _800;
        _803 = _800;
        _804 = _800;
        _805 = _800;
        _806 = _800;
        _807 = _800;
        _808 = _800;
        _809 = _800;
        _810 = _800;
        _811 = _800;
        _812 = 0.0;
        _813 = 0.0;
        _814 = 0.0;
    }
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _871 = (cbModelParam._m0[38u].x * ((((fma(_501, cbModelParam._m0[30u].z, fma(_497, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _493)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _872 = (cbModelParam._m0[38u].y * ((((fma(_501, cbModelParam._m0[31u].z, fma(_497, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _493)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _873 = (((((fma(_501, cbModelParam._m0[32u].z, fma(_497, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _493)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        float _908 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_875.x + (-0.5));
        float _910 = _908 * (_875.y + (-0.5));
        float _911 = _908 * (_875.z + (-0.5));
        float _918 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_882.x + (-0.5));
        float _920 = _918 * (_882.y + (-0.5));
        float _921 = _918 * (_882.z + (-0.5));
        float _928 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_889.x + (-0.5));
        float _930 = _928 * (_889.y + (-0.5));
        float _931 = _928 * (_889.z + (-0.5));
        float _938 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_896.x + (-0.5));
        float _940 = _938 * (_896.y + (-0.5));
        float _941 = _938 * (_896.z + (-0.5));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = _909 * 0.5;
        float _946 = _919 * 0.5;
        float _947 = _929 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(0.0), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3012 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3023 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3034 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0))) * (_972 + 1.0))) + _977) * _942;
        float _987 = _910 * 0.5;
        float _988 = _920 * 0.5;
        float _989 = _930 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(0.0), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3045 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3056 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3067 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) * (_1014 + 1.0))) + _1019) * _943;
        float _1029 = _911 * 0.5;
        float _1030 = _921 * 0.5;
        float _1031 = _931 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(0.0), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3078 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3089 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3100 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * (_1056 + 1.0))) + _1061) * _944;
        _1078 = _911;
        _1079 = _910;
        _1080 = _909;
        _1081 = _921;
        _1082 = _920;
        _1083 = _919;
        _1084 = _931;
        _1085 = _930;
        _1086 = _929;
        _1087 = _944;
        _1088 = _943;
        _1089 = _942;
        _1090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
    }
    else
    {
        _1078 = _800;
        _1079 = _800;
        _1080 = _800;
        _1081 = _800;
        _1082 = _800;
        _1083 = _800;
        _1084 = _800;
        _1085 = _800;
        _1086 = _800;
        _1087 = _800;
        _1088 = _800;
        _1089 = _800;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1102 = (cbModelParam._m0[1u].x * (_1090 - _812)) + _812;
    float _1103 = (cbModelParam._m0[1u].x * (_1091 - _813)) + _813;
    float _1104 = (cbModelParam._m0[1u].x * (_1092 - _814)) + _814;
    float _1125 = fma(_1104, cbSceneParam._m0[89u].z, fma(_1103, cbSceneParam._m0[89u].y, _1102 * cbSceneParam._m0[89u].x));
    float _1128 = fma(_1104, cbSceneParam._m0[90u].z, fma(_1103, cbSceneParam._m0[90u].y, _1102 * cbSceneParam._m0[90u].x));
    float _1131 = fma(_1104, cbSceneParam._m0[91u].z, fma(_1103, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1102));
    float _1146 = _406 * (-0.5);
    float _1147 = _407 * (-0.5);
    float _1148 = _408 * (-0.5);
    float _1149 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1152 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_1079, _1082, _1085, _1088));
    float _1155 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_1078, _1081, _1084, _1087));
    float _1189;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1162 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_799, _803, _806, _809));
        float _1166 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_801, _804, _807, _810));
        float _1170 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_802, _805, _808, _811));
        float _1177 = dot(vec4(cbModelParam._m0[39u]), vec4(_1146, _1147, _1148, 1.0));
        _1189 = dot(vec3(isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1177) ? 0.0 : (isnan(0.0) ? _1177 : max(0.0, _1177))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1189 = 1.0;
    }
    float _1200;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1191 = dot(vec4(cbModelParam._m0[40u]), vec4(_1146, _1147, _1148, 1.0));
        _1200 = dot(vec3(isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1191) ? 0.0 : (isnan(0.0) ? _1191 : max(0.0, _1191))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1200 = 1.0;
    }
    float _1204 = (_1200 * cbModelParam._m0[1u].x) + (_1189 * (1.0 - cbModelParam._m0[1u].x));
    float _1213 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1295;
    float _1297;
    float _1299;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1262 = fma(_501, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493)) + cbModelParam._m0[13u].w;
        float _1266 = fma(_501, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493)) + cbModelParam._m0[14u].w;
        float _1270 = fma(_501, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493)) + cbModelParam._m0[15u].w;
        float _1273 = fma(_471, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469));
        float _1276 = fma(_471, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469));
        float _1279 = fma(_471, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469));
        float _1305;
        if (_1273 > 0.0)
        {
            _1305 = abs((1.0 - _1262) / _1273);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1273 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1262 + 1.0) / _1273);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1305 = frontier_phi_25_23_ladder;
        }
        float _1627;
        if (_1276 > 0.0)
        {
            _1627 = abs((1.0 - _1266) / _1276);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1276 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1266 + 1.0) / _1276);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1627 = frontier_phi_34_30_ladder;
        }
        float _1938;
        if (_1279 > 0.0)
        {
            _1938 = abs((1.0 - _1270) / _1279);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1270 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1938 = frontier_phi_48_41_ladder;
        }
        float _1940 = isnan(_1627) ? _1305 : (isnan(_1305) ? _1627 : min(_1305, _1627));
        float _1941 = isnan(_1938) ? _1940 : (isnan(_1940) ? _1938 : min(_1940, _1938));
        float _1945 = (_1941 * _1273) + _1262;
        float _1946 = (_1941 * _1276) + _1266;
        float _1947 = (_1941 * _1279) + _1270;
        float _1948 = _1941 * 9.9999997473787516355514526367188e-05;
        float _1949 = (-1.0) - _1948;
        float _1951 = _1948 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1947 > _1951) || ((_1947 < _1949) || ((_1946 > _1951) || ((_1946 < _1949) || ((_1945 < _1949) || (_1945 > _1951))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1947, cbModelParam._m0[9u].z, fma(_1946, cbModelParam._m0[9u].y, _1945 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1947, cbModelParam._m0[10u].z, fma(_1946, cbModelParam._m0[10u].y, _1945 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1947, cbModelParam._m0[11u].z, fma(_1946, cbModelParam._m0[11u].y, _1945 * cbModelParam._m0[11u].x))), _1213);
            frontier_phi_24_48_ladder = _2086.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2086.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2086.x * cbModelParam._m0[1u].y;
        }
        _1295 = frontier_phi_24_48_ladder_2;
        _1297 = frontier_phi_24_48_ladder_1;
        _1299 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1283 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_469, _470, _471), _1213);
        _1295 = _1283.x * cbModelParam._m0[1u].y;
        _1297 = _1283.y * cbModelParam._m0[1u].y;
        _1299 = _1283.z * cbModelParam._m0[1u].y;
    }
    float _1302 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1355 = fma(_501, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493)) + cbModelParam._m0[21u].w;
        float _1359 = fma(_501, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493)) + cbModelParam._m0[22u].w;
        float _1363 = fma(_501, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493)) + cbModelParam._m0[23u].w;
        float _1366 = fma(_471, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469));
        float _1369 = fma(_471, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469));
        float _1372 = fma(_471, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469));
        float _1632;
        if (_1366 > 0.0)
        {
            _1632 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1632 = frontier_phi_36_32_ladder;
        }
        float _1964;
        if (_1369 > 0.0)
        {
            _1964 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1964 = frontier_phi_50_43_ladder;
        }
        float _2151;
        if (_1372 > 0.0)
        {
            _2151 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2151 = frontier_phi_68_61_ladder;
        }
        float _2153 = isnan(_1964) ? _1632 : (isnan(_1632) ? _1964 : min(_1632, _1964));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1366) + _1355;
        float _2159 = (_2154 * _1369) + _1359;
        float _2160 = (_2154 * _1372) + _1363;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2161;
        float _2164 = _2161 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2160 > _2164) || ((_2160 < _2162) || ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 < _2162) || (_2158 > _2164))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2160, cbModelParam._m0[17u].z, fma(_2159, cbModelParam._m0[17u].y, _2158 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2160, cbModelParam._m0[18u].z, fma(_2159, cbModelParam._m0[18u].y, _2158 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2160, cbModelParam._m0[19u].z, fma(_2159, cbModelParam._m0[19u].y, _2158 * cbModelParam._m0[19u].x))), _1302);
            frontier_phi_33_68_ladder = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1391 = frontier_phi_33_68_ladder_2;
        _1393 = frontier_phi_33_68_ladder;
        _1395 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_469, _470, _471), _1302);
        _1391 = _1375.x * cbModelParam._m0[1u].z;
        _1393 = _1375.y * cbModelParam._m0[1u].z;
        _1395 = _1375.z * cbModelParam._m0[1u].z;
    }
    float _1407 = _468 * 0.01200000010430812835693359375;
    float _1409 = _1407 * ((cbModelParam._m0[1u].w * (_1391 - _1295)) + _1295);
    float _1410 = _1407 * ((cbModelParam._m0[1u].w * (_1393 - _1297)) + _1297);
    float _1411 = _1407 * ((cbModelParam._m0[1u].w * (_1395 - _1299)) + _1299);
    float _1414 = fma(_1411, cbSceneParam._m0[89u].z, fma(_1410, cbSceneParam._m0[89u].y, _1409 * cbSceneParam._m0[89u].x));
    float _1417 = fma(_1411, cbSceneParam._m0[90u].z, fma(_1410, cbSceneParam._m0[90u].y, _1409 * cbSceneParam._m0[90u].x));
    float _1420 = fma(_1411, cbSceneParam._m0[91u].z, fma(_1410, cbSceneParam._m0[91u].y, _1409 * cbSceneParam._m0[91u].x));
    vec4 _1428 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_428, _429));
    float _1430 = _1428.w;
    float _1443 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1430);
    float _1444 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1430);
    float _1445 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1430);
    uvec4 _1449 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1451 = _1449.x * 14u;
    uint _1452 = _1451 + 13u;
    float _1457 = _468 + (-1.0);
    float _1461 = (cbLight._m0[_1452].x * _1457) + 1.0;
    float _1462 = (cbLight._m0[_1452].y * _1457) + 1.0;
    uint _1463 = _1451 + 5u;
    float _1469 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
    uint _1473 = _1451 + 4u;
    float _1482 = isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0));
    uint _1486 = _1451 | 1u;
    float _1497 = dot(vec3(cbLight._m0[_1451].xyz), vec3(0.0));
    float _1500 = dot(vec3(cbLight._m0[_1486].xyz), vec3(0.0));
    float _3236 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
    float _3247 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
    float _1505 = (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))) * 0.3183098733425140380859375;
    float _1507 = (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))) * 0.3183098733425140380859375;
    float _1514 = ((cbLight._m0[_1463].x * _1469) * _1507) + (((cbLight._m0[_1473].x * _1443) * _1482) * _1505);
    float _1515 = ((_1469 * cbLight._m0[_1463].y) * _1507) + (((cbLight._m0[_1473].y * _1444) * _1482) * _1505);
    float _1516 = ((_1469 * cbLight._m0[_1463].z) * _1507) + (((cbLight._m0[_1473].z * _1445) * _1482) * _1505);
    uint _1517 = _1451 + 8u;
    float _1523 = cbLight._m0[_1451].x + _406;
    float _1524 = cbLight._m0[_1451].y + _407;
    float _1525 = cbLight._m0[_1451].z + _408;
    float _1529 = inversesqrt(dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525)));
    float _1533 = dot(vec3(0.0), vec3(cbLight._m0[_1451].xyz));
    float _3258 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _1536 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
    float _1537 = dot(vec3(0.0), vec3(_406, _407, _408));
    float _3269 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _1540 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _1541 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_1523 * _1529, _1524 * _1529, _1525 * _1529));
    float _3280 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1552 = (exp2(log2(1.0 - (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1558 = (0.5 / ((_1536 + 9.9999999392252902907785028219223e-09) + _1540)) * _1536;
    float _3291 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
    float _1560 = (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * 0.31831014156341552734375;
    uint _1574 = _1451 + 9u;
    float _1580 = cbLight._m0[_1486].x + _406;
    float _1581 = cbLight._m0[_1486].y + _407;
    float _1582 = cbLight._m0[_1486].z + _408;
    float _1586 = inversesqrt(dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582)));
    float _1590 = dot(vec3(0.0), vec3(cbLight._m0[_1486].xyz));
    float _3302 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1593 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _1594 = dot(vec3(cbLight._m0[_1486].xyz), vec3(_1580 * _1586, _1581 * _1586, _1582 * _1586));
    float _3313 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1603 = (exp2(log2(1.0 - (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1607 = (0.5 / ((_1593 + 9.9999999392252902907785028219223e-09) + _1540)) * _1593;
    float _3324 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1609 = (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * 0.31831014156341552734375;
    float _1619 = (((_1603 * cbLight._m0[_1574].x) * _1609) * _1469) + ((((cbLight._m0[_1517].x * _1443) * _1552) * _1560) * _1482);
    float _1620 = (((_1603 * cbLight._m0[_1574].y) * _1609) * _1469) + ((((cbLight._m0[_1517].y * _1444) * _1552) * _1560) * _1482);
    float _1621 = (((_1603 * cbLight._m0[_1574].z) * _1609) * _1469) + ((((cbLight._m0[_1517].z * _1445) * _1552) * _1560) * _1482);
    float _1737;
    float _1739;
    float _1741;
    float _1743;
    float _1745;
    float _1747;
    if (_1449.y == 0u)
    {
        float _1677 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1678 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1677;
        float _1679 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1677;
        float _1680 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1677;
        uvec4 _1692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1693 = _1692.x;
        uint _1704 = uint((float(_1692.y) * floor(float(uint(cbSceneParam._m0[85u].y * _429) / _1693))) + floor(float(uint(cbSceneParam._m0[85u].x * _428) / _1693)));
        float _1714 = (log2(_1680 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1715 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        uint _1718 = uint(isnan(14.0) ? _1715 : (isnan(_1715) ? 14.0 : min(_1715, 14.0)));
        uvec4 _1723 = texelFetch(g_lightClusterGridBuffer, int(((_1718 << 2u) + (_1704 << 6u)) >> 2u));
        uint _1724 = _1723.x;
        uint _1725 = _1692.z;
        float _1815;
        float _1817;
        float _1819;
        float _1821;
        float _1823;
        float _1825;
        if (((((1u << ((_1725 >> 4u) & 15u)) + 4294967295u) & _1724) == 0u) || ((_1725 & 240u) == 0u))
        {
            _1815 = 0.0;
            _1817 = 0.0;
            _1819 = 0.0;
            _1821 = 0.0;
            _1823 = 0.0;
            _1825 = 0.0;
        }
        else
        {
            float _1816;
            float _1818;
            float _1820;
            float _1822;
            float _1824;
            float _1826;
            float _1998 = 0.0;
            float _1999 = 0.0;
            float _2000 = 0.0;
            float _2001 = 0.0;
            float _2002 = 0.0;
            float _2003 = 0.0;
            uint _2004 = 0u;
            uint _2013;
            bool _2014;
            for (;;)
            {
                _2013 = texelFetch(g_lightClassification, int((((_1718 << 5u) + (_1704 << 9u)) + (_2004 << 2u)) >> 2u)).x;
                _2014 = _2013 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2014)
                {
                    frontier_phi_63_pred = _2000;
                    frontier_phi_63_pred_1 = _2003;
                    frontier_phi_63_pred_2 = _2002;
                    frontier_phi_63_pred_3 = _2001;
                    frontier_phi_63_pred_4 = _1999;
                    frontier_phi_63_pred_5 = _1998;
                }
                else
                {
                    float _2194;
                    float _2195;
                    float _2196;
                    float _2197;
                    float _2198;
                    float _2199;
                    uint _2200;
                    _2194 = _1998;
                    _2195 = _1999;
                    _2196 = _2000;
                    _2197 = _2001;
                    _2198 = _2002;
                    _2199 = _2003;
                    _2200 = _2013;
                    float _2095;
                    float _2096;
                    float _2097;
                    float _2098;
                    float _2099;
                    float _2100;
                    for (;;)
                    {
                        uint _2204 = uint(findLSB(_2200)) + (_2004 << 5u);
                        uint _2201 = (_2200 + 4294967295u) & _2200;
                        uint _2206 = _2204 * 48u;
                        vec4 _2220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2206)).x, texelFetch(g_PointLightRenderingBuffer, int(_2206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2206 + 3u)).x));
                        uint _2226 = (_2204 * 48u) + 4u;
                        vec4 _2239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2226)).x, texelFetch(g_PointLightRenderingBuffer, int(_2226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2226 + 3u)).x));
                        uint _2245 = (_2204 * 48u) + 8u;
                        vec3 _2256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2245)).x, texelFetch(g_PointLightRenderingBuffer, int(_2245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2245 + 2u)).x));
                        float _2260 = _2220.x - _1678;
                        float _2261 = _2220.y - _1679;
                        float _2262 = _2220.z - _1680;
                        float _2263 = dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262));
                        float _2266 = inversesqrt(_2263);
                        float _2275 = 1.0 - (_2263 * _2220.w);
                        float _3345 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
                        float _2276 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
                        float _2277 = sqrt(_2263) * _2239.w;
                        float _2280 = 1.39999997615814208984375 / (_2277 + 1.39999997615814208984375);
                        float _2281 = _2280 * _2280;
                        float _2284 = ((1.0 - _2281) * dot(vec3(0.0), vec3(_2266 * _2260, _2266 * _2261, _2266 * _2262))) + _2281;
                        float _2287 = _2277 * _2277;
                        float _2291 = ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _2276) / ((_2287 * 0.699999988079071044921875) + 1.0);
                        float _2295 = (-0.0) - _1678;
                        float _2296 = (-0.0) - _1679;
                        float _2297 = (-0.0) - _1680;
                        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
                        float _2305 = dot(vec3(0.0), vec3(_2301 * _2295, _2301 * _2296, _2301 * _2297));
                        float _3361 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
                        float _3372 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
                        float _2309 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
                        float _2313 = (0.5 / (((isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) + 9.9999999392252902907785028219223e-09) + _2309)) * _2309;
                        float _3383 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
                        float _2322 = (((isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 3.1415927410125732421875) / ((_2287 * 2.1991131305694580078125) + 3.141590118408203125)) * _2276;
                        _2098 = (_2291 * _2239.x) + _2197;
                        _2099 = (_2291 * _2239.y) + _2198;
                        _2100 = (_2291 * _2239.z) + _2199;
                        _2095 = (_2322 * _2256.x) + _2194;
                        _2096 = (_2322 * _2256.y) + _2195;
                        _2097 = (_2322 * _2256.z) + _2196;
                        if (_2201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2194 = _2095;
                            _2195 = _2096;
                            _2196 = _2097;
                            _2197 = _2098;
                            _2198 = _2099;
                            _2199 = _2100;
                            _2200 = _2201;
                        }
                    }
                    frontier_phi_63_pred = _2097;
                    frontier_phi_63_pred_1 = _2100;
                    frontier_phi_63_pred_2 = _2099;
                    frontier_phi_63_pred_3 = _2098;
                    frontier_phi_63_pred_4 = _2096;
                    frontier_phi_63_pred_5 = _2095;
                }
                _1820 = frontier_phi_63_pred;
                _1826 = frontier_phi_63_pred_1;
                _1824 = frontier_phi_63_pred_2;
                _1822 = frontier_phi_63_pred_3;
                _1818 = frontier_phi_63_pred_4;
                _1816 = frontier_phi_63_pred_5;
                uint _2005 = _2004 + 1u;
                if (_2005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1998 = _1816;
                    _1999 = _1818;
                    _2000 = _1820;
                    _2001 = _1822;
                    _2002 = _1824;
                    _2003 = _1826;
                    _2004 = _2005;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1815 = _1816;
            _1817 = _1818;
            _1819 = _1820;
            _1821 = _1822;
            _1823 = _1824;
            _1825 = _1826;
        }
        uvec4 _1829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1830 = _1829.z;
        uint _1832 = (_1830 >> 8u) & 15u;
        float _1969;
        float _1971;
        float _1973;
        float _1975;
        float _1977;
        float _1979;
        if (((4294967295u << _1832) & _1724) == 0u)
        {
            _1969 = _1815;
            _1971 = _1817;
            _1973 = _1819;
            _1975 = _1821;
            _1977 = _1823;
            _1979 = _1825;
        }
        else
        {
            float _1994 = inversesqrt(dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_1832 < ((_1830 >> 12u) & 15u))
            {
                float _1970;
                float _1972;
                float _1974;
                float _1976;
                float _1978;
                float _1980;
                float _2177 = _1815;
                float _2178 = _1817;
                float _2179 = _1819;
                float _2180 = _1821;
                float _2181 = _1823;
                float _2182 = _1825;
                uint _2183 = _1832;
                uint _2192;
                bool _2193;
                for (;;)
                {
                    _2192 = texelFetch(g_lightClassification, int((((_1718 << 5u) + (_1704 << 9u)) + (_2183 << 2u)) >> 2u)).x;
                    _2193 = _2192 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2193)
                    {
                        frontier_phi_77_pred = _2182;
                        frontier_phi_77_pred_1 = _2181;
                        frontier_phi_77_pred_2 = _2180;
                        frontier_phi_77_pred_3 = _2179;
                        frontier_phi_77_pred_4 = _2178;
                        frontier_phi_77_pred_5 = _2177;
                    }
                    else
                    {
                        float _2357;
                        float _2358;
                        float _2359;
                        float _2360;
                        float _2361;
                        float _2362;
                        float _2607;
                        float _2608;
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2370 = _2177;
                        float _2371 = _2178;
                        float _2372 = _2179;
                        float _2373 = _2180;
                        float _2374 = _2181;
                        float _2375 = _2182;
                        uint _2376 = _2192;
                        uint _2377;
                        vec4 _2402;
                        float _2403;
                        vec4 _2418;
                        vec3 _2430;
                        vec4 _2445;
                        vec4 _2461;
                        float _2507;
                        bool _2508;
                        for (;;)
                        {
                            uint _2387 = ((_2183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2376));
                            _2377 = (_2376 + 4294967295u) & _2376;
                            uint _2389 = _2387 * 40u;
                            _2402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2389 + 3u)).x));
                            _2403 = _2402.w;
                            uint _2405 = (_2387 * 40u) + 4u;
                            _2418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2405 + 3u)).x));
                            uint _2420 = (_2387 * 40u) + 8u;
                            _2430 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 2u)).x));
                            uint _2432 = (_2387 * 40u) + 16u;
                            _2445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 3u)).x));
                            uint _2448 = (_2387 * 40u) + 20u;
                            _2461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2448 + 3u)).x));
                            uint _2463 = (_2387 * 40u) + 24u;
                            vec4 _2476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2463 + 3u)).x));
                            uint _2482 = (_2387 * 40u) + 28u;
                            vec4 _2495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 3u)).x));
                            _2507 = fma(_1680, _2495.z, fma(_1679, _2495.y, _2495.x * _1678)) + _2495.w;
                            _2508 = !((fma(_1680, _2476.z, fma(_1679, _2476.y, _2476.x * _1678)) + _2476.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2508)
                            {
                                float _2535 = _2402.x - _1678;
                                float _2536 = _2402.y - _1679;
                                float _2537 = _2402.z - _1680;
                                float _2538 = dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537));
                                float _2541 = inversesqrt(_2538);
                                float _2542 = _2541 * _2535;
                                float _2543 = _2541 * _2536;
                                float _2544 = _2541 * _2537;
                                float _2548 = 1.0 - (_2538 / (_2403 * _2403));
                                float _3394 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
                                float _2549 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
                                float _2553 = sqrt(_2538) * _2418.w;
                                float _2555 = 1.39999997615814208984375 / (_2553 + 1.39999997615814208984375);
                                float _2556 = _2555 * _2555;
                                float _2557 = 1.0 - _2556;
                                float _2559 = (_2557 * dot(vec3(_2542, _2543, _2544), vec3(0.0))) + _2556;
                                float _2562 = _2553 * _2553;
                                float _2566 = (fma(_1680, _2445.z, fma(_1679, _2445.y, _2445.x * _1678)) + _2445.w) / _2507;
                                float _2567 = (fma(_1680, _2461.z, fma(_1679, _2461.y, _2461.x * _1678)) + _2461.w) / _2507;
                                float _2571 = 1.0 - dot(vec2(_2566, _2567), vec2(_2566, _2567));
                                float _3410 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
                                float _2572 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
                                float _2573 = _2572 * (((isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))) * _2549) / ((_2562 * 0.699999988079071044921875) + 1.0));
                                float _2583 = dot(vec3(0.0), vec3((-0.0) - (_1678 * _1994), (-0.0) - (_1679 * _1994), (-0.0) - (_1680 * _1994)));
                                float _3421 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                                float _2591 = (_2557 * dot(vec3(0.0), vec3(_2542, _2543, _2544))) + _2556;
                                float _3432 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                                float _2592 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
                                float _2596 = (0.5 / (((isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) + 9.9999999392252902907785028219223e-09) + _2592)) * _2592;
                                float _3443 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                                float _2603 = (_2572 * _2549) * (((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 3.1415927410125732421875) / ((_2562 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2573 * _2418.x;
                                frontier_phi_83_pred_1 = _2573 * _2418.z;
                                frontier_phi_83_pred_2 = _2573 * _2418.y;
                                frontier_phi_83_pred_3 = _2603 * _2430.z;
                                frontier_phi_83_pred_4 = _2603 * _2430.y;
                                frontier_phi_83_pred_5 = _2603 * _2430.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2610 = frontier_phi_83_pred;
                            _2612 = frontier_phi_83_pred_1;
                            _2611 = frontier_phi_83_pred_2;
                            _2609 = frontier_phi_83_pred_3;
                            _2608 = frontier_phi_83_pred_4;
                            _2607 = frontier_phi_83_pred_5;
                            _2360 = _2610 + _2373;
                            _2361 = _2611 + _2374;
                            _2362 = _2612 + _2375;
                            _2357 = _2607 + _2370;
                            _2358 = _2608 + _2371;
                            _2359 = _2609 + _2372;
                            if (_2377 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2370 = _2357;
                                _2371 = _2358;
                                _2372 = _2359;
                                _2373 = _2360;
                                _2374 = _2361;
                                _2375 = _2362;
                                _2376 = _2377;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2362;
                        frontier_phi_77_pred_1 = _2361;
                        frontier_phi_77_pred_2 = _2360;
                        frontier_phi_77_pred_3 = _2359;
                        frontier_phi_77_pred_4 = _2358;
                        frontier_phi_77_pred_5 = _2357;
                    }
                    _1980 = frontier_phi_77_pred;
                    _1978 = frontier_phi_77_pred_1;
                    _1976 = frontier_phi_77_pred_2;
                    _1974 = frontier_phi_77_pred_3;
                    _1972 = frontier_phi_77_pred_4;
                    _1970 = frontier_phi_77_pred_5;
                    uint _2184 = _2183 + 1u;
                    if (_2184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2177 = _1970;
                        _2178 = _1972;
                        _2179 = _1974;
                        _2180 = _1976;
                        _2181 = _1978;
                        _2182 = _1980;
                        _2183 = _2184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1972;
                frontier_phi_52_53_ladder_1 = _1980;
                frontier_phi_52_53_ladder_2 = _1978;
                frontier_phi_52_53_ladder_3 = _1976;
                frontier_phi_52_53_ladder_4 = _1974;
                frontier_phi_52_53_ladder_5 = _1970;
            }
            else
            {
                frontier_phi_52_53_ladder = _1817;
                frontier_phi_52_53_ladder_1 = _1825;
                frontier_phi_52_53_ladder_2 = _1823;
                frontier_phi_52_53_ladder_3 = _1821;
                frontier_phi_52_53_ladder_4 = _1819;
                frontier_phi_52_53_ladder_5 = _1815;
            }
            _1969 = frontier_phi_52_53_ladder_5;
            _1971 = frontier_phi_52_53_ladder;
            _1973 = frontier_phi_52_53_ladder_4;
            _1975 = frontier_phi_52_53_ladder_3;
            _1977 = frontier_phi_52_53_ladder_2;
            _1979 = frontier_phi_52_53_ladder_1;
        }
        float _1984 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
        _1737 = (_1984 * _1975) + _1514;
        _1739 = (_1984 * _1977) + _1515;
        _1741 = (_1984 * _1979) + _1516;
        _1743 = ((_1969 * 0.039999999105930328369140625) * _1984) + _1619;
        _1745 = ((_1971 * 0.039999999105930328369140625) * _1984) + _1620;
        _1747 = ((_1973 * 0.039999999105930328369140625) * _1984) + _1621;
    }
    else
    {
        _1737 = _1514;
        _1739 = _1515;
        _1741 = _1516;
        _1743 = _1619;
        _1745 = _1620;
        _1747 = _1621;
    }
    float _3459 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3470 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3481 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _1764 = ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1737 + ((isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))) * _468))) + ((_1743 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _1204)) * cbPerFrame._m0[3u].x);
    float _1765 = ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1739 + ((isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))) * _468))) + ((_1745 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _1204)) * cbPerFrame._m0[3u].x);
    float _1766 = ((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1741 + ((isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))) * _468))) + ((_1747 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _1204)) * cbPerFrame._m0[3u].x);
    float _1767 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    uint _1770 = _442 + 6u;
    float _1778 = _428 / cbSceneParam._m0[86u].x;
    float _1779 = _429 / cbSceneParam._m0[86u].y;
    vec4 _1793 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1778, _1779, (log2((isnan(cbSceneParam._m0[77u].w) ? _401 : (isnan(_401) ? cbSceneParam._m0[77u].w : min(_401, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1795 = _1793.x;
    float _1796 = _1793.y;
    float _1797 = _1793.z;
    float _1798 = _1793.w;
    float _1878;
    float _1880;
    float _1882;
    float _1884;
    if (_401 > cbSceneParam._m0[78u].w)
    {
        float _1840 = isnan(_401) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _401 : min(cbSceneParam._m0[80u].w, _401));
        float _1841 = _1840 / _401;
        float _1852 = _1841 * _252;
        float _1853 = _253 * _1841;
        float _1854 = (-0.0) - _1853;
        float _1855 = _1841 * _254;
        float _1857 = (cbSceneParam._m0[77u].w * _1854) / _1840;
        float _1858 = _1857 + cbSceneParam._m0[79u].w;
        float _1859 = cbSceneParam._m0[79u].w - _1853;
        float _1865 = sqrt(((_1852 * _1852) + (_1853 * _1853)) + (_1855 * _1855));
        float _1868 = (1.0 - (cbSceneParam._m0[77u].w / _1840)) * _1865;
        float _1874 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1876 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2108;
        if (abs((_1854 - _1857) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2108 = ((((_1858 > 0.0) ? exp2(_1874 * _1858) : (2.0 - exp2(_1876 * _1858))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1868;
        }
        else
        {
            float _2027 = 1.0 / cbSceneParam._m0[80u].x;
            float _2028 = isnan(_1859) ? _1858 : (isnan(_1858) ? _1859 : max(_1858, _1859));
            float _2029 = isnan(_1859) ? _1858 : (isnan(_1858) ? _1859 : min(_1858, _1859));
            float _2038 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : min(_2028, 0.0));
            float _2039 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : min(_2029, 0.0));
            _2108 = ((abs(_1865 / _1854) * cbSceneParam._m0[80u].y) * ((((_2038 - _2039) * 2.0) - ((exp2(_1874 * (isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)))) - exp2(_1874 * (isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))))) * _2027)) - ((exp2(_1876 * _2038) - exp2(_1876 * _2039)) * _2027))) + (_1868 * cbSceneParam._m0[80u].z);
        }
        vec4 _2110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1778, _1779, 1.0), 0.0);
        float _2119 = exp2((_2108 * (-1.44269502162933349609375)) * (1.0 - _2110.w));
        float _2120 = log2(_2119);
        float _2136 = log2(_1798);
        _1878 = (exp2(_2136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2120 * cbSceneParam._m0[78u].x)) * _2110.x) / cbSceneParam._m0[78u].x)) + _1795;
        _1880 = (exp2(_2136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2120 * cbSceneParam._m0[78u].y)) * _2110.y) / cbSceneParam._m0[78u].y)) + _1796;
        _1882 = (exp2(_2136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2120 * cbSceneParam._m0[78u].z)) * _2110.z) / cbSceneParam._m0[78u].z)) + _1797;
        _1884 = _2119 * _1798;
    }
    else
    {
        _1878 = _1795;
        _1880 = _1796;
        _1882 = _1797;
        _1884 = _1798;
    }
    bool _2146;
    vec4 _1894;
    vec4 _1917;
    float _1919;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    bool _1937;
    for (;;)
    {
        _1894 = cbMatDynParam._m0[0u];
        float _1896 = roundEven(_1894.y);
        bool _1897 = _1896 == 3.0;
        float _1899 = log2(_1884);
        float _1906 = exp2(_1899 * cbSceneParam._m0[78u].x) * _1767;
        float _1907 = exp2(_1899 * cbSceneParam._m0[78u].y) * _1768;
        float _1908 = exp2(_1899 * cbSceneParam._m0[78u].z) * _1769;
        float _1915 = _415 + (-0.5);
        _1917 = cbMtdParam._m0[1u];
        _1919 = _1917.y * _1915;
        float _1922 = (_1896 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1923 = _1922 * (_1897 ? _1906 : (_1906 + (cbSceneParam._m0[72u].w * _1878)));
        _1924 = _1922 * (_1897 ? _1907 : (_1907 + (cbSceneParam._m0[72u].w * _1880)));
        _1925 = _1922 * (_1897 ? _1908 : (_1908 + (cbSceneParam._m0[72u].w * _1882)));
        _1926 = _1915 * 0.999000012874603271484375;
        _1937 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1937)
        {
            if ((cbInstanceData._m0[_442 + 7u].x + _1926) < 0.5)
            {
                _2146 = true;
                break;
            }
        }
        uint _2062 = _444 + uint(_1894.w);
        if ((cbInstanceData._m0[_2062].w < 1.0) && ((cbInstanceData._m0[_2062].w + _1926) < 0.5))
        {
            _2146 = true;
            break;
        }
        if ((_1919 + 1.0) < _1917.x)
        {
            _2146 = true;
            break;
        }
        _2146 = false;
        break;
    }
    float _2327;
    if (_2146)
    {
        discard_state = true;
        _2327 = 0.0;
    }
    else
    {
        _2327 = cbInstanceData._m0[_1770].w;
    }
    SV_Target.x = _1923;
    SV_Target.y = _1924;
    SV_Target.z = _1925;
    SV_Target.w = _2327;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1770].w;
    discard_exit();
}


