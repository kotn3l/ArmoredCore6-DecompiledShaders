#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1137;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _393 = (_389 * _383) + (_357 * cbMtdParam._m0[20u].y);
    float _394 = (_389 * _384) + (_358 * cbMtdParam._m0[20u].z);
    float _395 = _393 * cbMtdParam._m0[19u].x;
    float _396 = _394 * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    bool _414 = _392 > 0.0;
    float _416 = _414 ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = _397 + (-0.5);
    float _426 = _398 + (-0.5);
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_423 + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_426 + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _470 = (_456 - (_456 * _290)) * cbMtdParam._m0[9u].x;
    float _471 = (_457 - (_457 * _290)) * cbMtdParam._m0[9u].y;
    float _472 = cbMtdParam._m0[9u].z * (_458 - (_458 * _290));
    float _490 = _393 * cbMtdParam._m0[21u].x;
    float _491 = _394 * cbMtdParam._m0[20u].w;
    bool _492 = _490 > 0.0;
    float _497;
    if (_492)
    {
        _497 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _497 = frontier_phi_11_10_ladder;
    }
    bool _499 = _491 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _504 = frontier_phi_15_14_ladder;
    }
    float _507 = _414 ? (cbMtdParam._m0[16u].z / _392) : 5000.0;
    float _508 = isnan(_504) ? _497 : (isnan(_497) ? _504 : min(_497, _504));
    float _509 = isnan(_507) ? _508 : (isnan(_508) ? _507 : min(_508, _507));
    float _513 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _517 = ((_509 * _392) + _513) / _513;
    float _522 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _524 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _540 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_509 * _490)) / _517) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_509 * _491)) / _517) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _545 = _540.x * cbMtdParam._m0[10u].x;
    float _546 = _540.y * cbMtdParam._m0[10u].y;
    float _547 = _540.z * cbMtdParam._m0[10u].z;
    float _555;
    if (_492)
    {
        _555 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _555 = frontier_phi_19_18_ladder;
    }
    float _561;
    if (_499)
    {
        _561 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _561 = frontier_phi_23_22_ladder;
    }
    float _563 = isnan(_561) ? _555 : (isnan(_555) ? _561 : min(_555, _561));
    float _564 = isnan(_507) ? _563 : (isnan(_563) ? _507 : min(_563, _507));
    float _571 = ((_564 * _392) + _513) / _513;
    vec4 _585 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_564 * _490)) / _571) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_564 * _491)) / _571) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _587 = _585.w;
    float _589 = _587 - (_587 * _290);
    float _600 = 0.5 - (_290 * 0.5);
    float _610 = (((_470 - _303) + (_589 * ((_545 - _470) - (_545 * _290)))) * _600) + _303;
    float _611 = (((_471 - _305) + (_589 * ((_546 - _471) - (_546 * _290)))) * _600) + _305;
    float _612 = (((_472 - _307) + (_589 * ((_547 - _472) - (_547 * _290)))) * _600) + _307;
    vec4 _624 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _628 = _624.z;
    float _631 = (_624.x * 2.0) + (-1.0);
    float _632 = (_624.y * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3531 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))));
    float _639 = _628 * _290;
    float _646 = (cbMtdParam._m0[15u].w * ((_329 - _639) + ((_628 - _329) * _290))) + _639;
    float _650 = (cbMtdParam._m0[16u].x * _357) + _631;
    float _651 = (cbMtdParam._m0[16u].x * _358) + _632;
    float _654 = fma(_638, _199, fma(_651, _206, _650 * _192));
    float _657 = fma(_638, _200, fma(_651, _207, _650 * _193));
    float _660 = fma(_638, _201, fma(_651, _208, _650 * _194));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3542 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _668 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3564 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3575 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _687 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _691 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _692 = _263 * _691;
    float _693 = _264 * _691;
    float _694 = _265 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _724 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _727 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _740 = uint(roundEven(NORMAL.w)) * 13u;
    uint _743 = (_740 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_743].z;
    float _3586 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _766 = _763.x * TEXCOORD.z;
    float _767 = dot(vec3(_665, _666, _667), vec3(_692, _693, _694));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _665) - _692;
    float _775 = (_770 * _666) - _693;
    float _776 = (_770 * _667) - _694;
    float _780 = abs(dot(vec3(_692, _693, _694), vec3(_665, _666, _667)));
    float _3619 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_668);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1136;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _863 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _867 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _871 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _894 = _827 + _665;
        float _895 = _831 + _666;
        float _896 = _835 + _667;
        float _906 = fma(_896, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894)) - _863;
        float _907 = fma(_896, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894)) - _867;
        float _908 = fma(_896, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894)) - _871;
        float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
        float _925 = ((_912 * _906) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_863 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_912 * _907) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_867 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_912 * _908) / cbModelParam._m0[34u].z) + ((((((_871 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        float _964 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_930.x + (-0.5));
        float _966 = _964 * (_930.y + (-0.5));
        float _967 = _964 * (_930.z + (-0.5));
        float _974 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_937.x + (-0.5));
        float _976 = _974 * (_937.y + (-0.5));
        float _977 = _974 * (_937.z + (-0.5));
        float _984 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_944.x + (-0.5));
        float _986 = _984 * (_944.y + (-0.5));
        float _987 = _984 * (_944.z + (-0.5));
        float _994 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_951.x + (-0.5));
        float _996 = _994 * (_951.y + (-0.5));
        float _997 = _994 * (_951.z + (-0.5));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = _965 * 0.5;
        float _1002 = _975 * 0.5;
        float _1003 = _985 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1018 = (dot(vec3(_665, _666, _667), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1028 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3667 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1030 + 1.0))) + _1035) * _998;
        float _1045 = _966 * 0.5;
        float _1046 = _976 * 0.5;
        float _1047 = _986 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_665, _666, _667), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3700 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1072 + 1.0))) + _1077) * _999;
        float _1087 = _967 * 0.5;
        float _1088 = _977 * 0.5;
        float _1089 = _987 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_665, _666, _667), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3733 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1114 + 1.0))) + _1119) * _1000;
        _1136 = _967;
        _1138 = _966;
        _1139 = _965;
        _1140 = _977;
        _1141 = _976;
        _1142 = _975;
        _1143 = _987;
        _1144 = _986;
        _1145 = _985;
        _1146 = _1000;
        _1147 = _999;
        _1148 = _998;
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
    }
    else
    {
        _1136 = _1137;
        _1138 = _1137;
        _1139 = _1137;
        _1140 = _1137;
        _1141 = _1137;
        _1142 = _1137;
        _1143 = _1137;
        _1144 = _1137;
        _1145 = _1137;
        _1146 = _1137;
        _1147 = _1137;
        _1148 = _1137;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1177 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1181 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1185 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1208 = _827 + _665;
        float _1209 = _831 + _666;
        float _1210 = _835 + _667;
        float _1220 = fma(_1210, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208)) - _1177;
        float _1221 = fma(_1210, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208)) - _1181;
        float _1222 = fma(_1210, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208)) - _1185;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1177 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1181 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[35u].z) + ((((((_1185 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1276 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1243.x + (-0.5));
        float _1278 = _1276 * (_1243.y + (-0.5));
        float _1279 = _1276 * (_1243.z + (-0.5));
        float _1286 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1250.x + (-0.5));
        float _1288 = _1286 * (_1250.y + (-0.5));
        float _1289 = _1286 * (_1250.z + (-0.5));
        float _1296 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1257.x + (-0.5));
        float _1298 = _1296 * (_1257.y + (-0.5));
        float _1299 = _1296 * (_1257.z + (-0.5));
        float _1306 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1264.x + (-0.5));
        float _1308 = _1306 * (_1264.y + (-0.5));
        float _1309 = _1306 * (_1264.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_665, _666, _667), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3796 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1340 + 1.0))) + _1345) * _1310;
        float _1355 = _1278 * 0.5;
        float _1356 = _1288 * 0.5;
        float _1357 = _1298 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_665, _666, _667), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3829 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1382 + 1.0))) + _1387) * _1311;
        float _1397 = _1279 * 0.5;
        float _1398 = _1289 * 0.5;
        float _1399 = _1299 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_665, _666, _667), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3862 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1424 + 1.0))) + _1429) * _1312;
        _1446 = _1279;
        _1447 = _1278;
        _1448 = _1277;
        _1449 = _1289;
        _1450 = _1288;
        _1451 = _1287;
        _1452 = _1299;
        _1453 = _1298;
        _1454 = _1297;
        _1455 = _1312;
        _1456 = _1311;
        _1457 = _1310;
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1137;
        _1447 = _1137;
        _1448 = _1137;
        _1449 = _1137;
        _1450 = _1137;
        _1451 = _1137;
        _1452 = _1137;
        _1453 = _1137;
        _1454 = _1137;
        _1455 = _1137;
        _1456 = _1137;
        _1457 = _1137;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1150)) + _1150;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1151)) + _1151;
    float _1493 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1470));
    float _1514 = _774 * 0.5;
    float _1515 = _775 * 0.5;
    float _1516 = _776 * 0.5;
    float _1517 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1520 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1523 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1557;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1530 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1136, _1140, _1143, _1146));
        float _1534 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1538 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1545 = dot(vec4(cbModelParam._m0[39u]), vec4(_1514, _1515, _1516, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1568;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1559 = dot(vec4(cbModelParam._m0[40u]), vec4(_1514, _1515, _1516, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1572 = (_1568 * cbModelParam._m0[1u].x) + (_1557 * (1.0 - cbModelParam._m0[1u].x));
    float _1582 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1582 : min(cbModelParam._m0[25u].z, _1582));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1631 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1635 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1639 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1642 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1645 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1648 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1676;
        if (_1642 > 0.0)
        {
            _1676 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1676 = frontier_phi_38_36_ladder;
        }
        float _1844;
        if (_1645 > 0.0)
        {
            _1844 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1844 = frontier_phi_47_43_ladder;
        }
        float _2288;
        if (_1648 > 0.0)
        {
            _2288 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2288 = frontier_phi_59_54_ladder;
        }
        float _2290 = isnan(_1844) ? _1676 : (isnan(_1676) ? _1844 : min(_1676, _1844));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1642) + _1631;
        float _2296 = (_2291 * _1645) + _1635;
        float _2297 = (_2291 * _1648) + _1639;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1583);
            frontier_phi_37_59_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1664 = frontier_phi_37_59_ladder_2;
        _1666 = frontier_phi_37_59_ladder_1;
        _1668 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1583);
        _1664 = _1652.x * cbModelParam._m0[1u].y;
        _1666 = _1652.y * cbModelParam._m0[1u].y;
        _1668 = _1652.z * cbModelParam._m0[1u].y;
    }
    float _1672 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1672 : min(cbModelParam._m0[25u].w, _1672));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1739 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1742 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _1849;
        if (_1736 > 0.0)
        {
            _1849 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1849 = frontier_phi_49_45_ladder;
        }
        float _2315;
        if (_1739 > 0.0)
        {
            _2315 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2315 = frontier_phi_61_56_ladder;
        }
        float _2652;
        if (_1742 > 0.0)
        {
            _2652 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2652 = frontier_phi_73_68_ladder;
        }
        float _2654 = isnan(_2315) ? _1849 : (isnan(_1849) ? _2315 : min(_1849, _2315));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _1736) + _1725;
        float _2660 = (_2655 * _1739) + _1729;
        float _2661 = (_2655 * _1742) + _1733;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1673);
            frontier_phi_46_73_ladder = _2782.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2782.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2782.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_46_73_ladder_2;
        _1763 = frontier_phi_46_73_ladder_1;
        _1765 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1673);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1777 = ((((1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _782)) * _766;
    float _1778 = _1777 * ((cbModelParam._m0[1u].w * (_1761 - _1664)) + _1664);
    float _1779 = _1777 * ((cbModelParam._m0[1u].w * (_1763 - _1666)) + _1666);
    float _1780 = _1777 * ((cbModelParam._m0[1u].w * (_1765 - _1668)) + _1668);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    float _1823 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1831 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1835 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1836 = _1823 / _1835;
    float _1837 = _1827 / _1835;
    float _1838 = _1831 / _1835;
    float _1985;
    float _1986;
    float _1987;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1865 = ((uint(_1838 > cbSceneParam._m0[59u].y) + uint(_1838 > cbSceneParam._m0[59u].x)) + uint(_1838 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1866 = _1865 + 43u;
        uint _1874 = _1865 + 44u;
        uint _1882 = _1865 + 45u;
        uint _1890 = _1865 + 46u;
        float _1901 = fma(_1835, cbSceneParam._m0[_1866].w, fma(_1831, cbSceneParam._m0[_1866].z, fma(_1827, cbSceneParam._m0[_1866].y, _1823 * cbSceneParam._m0[_1866].x)));
        float _1905 = fma(_1835, cbSceneParam._m0[_1874].w, fma(_1831, cbSceneParam._m0[_1874].z, fma(_1827, cbSceneParam._m0[_1874].y, _1823 * cbSceneParam._m0[_1874].x)));
        float _1913 = fma(_1835, cbSceneParam._m0[_1890].w, fma(_1831, cbSceneParam._m0[_1890].z, fma(_1827, cbSceneParam._m0[_1890].y, _1823 * cbSceneParam._m0[_1890].x)));
        float _1918 = cbSceneParam._m0[33u].z * _1913;
        float _1920 = cbSceneParam._m0[33u].w * _1913;
        float _1923 = fma(_1835, cbSceneParam._m0[_1882].w, fma(_1831, cbSceneParam._m0[_1882].z, fma(_1827, cbSceneParam._m0[_1882].y, _1823 * cbSceneParam._m0[_1882].x))) / _1913;
        float _1971 = (cbSceneParam._m0[33u].x - sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838))) * cbSceneParam._m0[33u].y;
        float _3988 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1978 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 + _1901) / _1913, (_1920 + _1905) / _1913), _1923), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1920 + _1901) / _1913, (_1905 - _1918) / _1913), _1923), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 - _1918) / _1913, (_1905 - _1920) / _1913), _1923), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 - _1920) / _1913, (_1918 + _1905) / _1913), _1923), 0.0)).x), vec4(0.25)));
        _1985 = 1.0 - (_1978 * cbSceneParam._m0[34u].x);
        _1986 = 1.0 - (_1978 * cbSceneParam._m0[34u].y);
        _1987 = 1.0 - (_1978 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1985 = 1.0;
        _1986 = 1.0;
        _1987 = 1.0;
    }
    float _2051;
    float _2053;
    float _2055;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2039 = fma(_1835, cbSceneParam._m0[63u].w, fma(_1831, cbSceneParam._m0[63u].z, fma(_1827, cbSceneParam._m0[63u].y, _1823 * cbSceneParam._m0[63u].x)));
        float _2040 = fma(_1835, cbSceneParam._m0[60u].w, fma(_1831, cbSceneParam._m0[60u].z, fma(_1827, cbSceneParam._m0[60u].y, _1823 * cbSceneParam._m0[60u].x))) / _2039;
        float _2041 = fma(_1835, cbSceneParam._m0[61u].w, fma(_1831, cbSceneParam._m0[61u].z, fma(_1827, cbSceneParam._m0[61u].y, _1823 * cbSceneParam._m0[61u].x))) / _2039;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2040 >= cbSceneParam._m0[64u].x) && (_2041 >= cbSceneParam._m0[64u].y)) && (_2040 <= cbSceneParam._m0[64u].z)) && (_2041 <= cbSceneParam._m0[64u].w))
        {
            float _2328 = fma(_1835, cbSceneParam._m0[62u].w, fma(_1831, cbSceneParam._m0[62u].z, fma(_1827, cbSceneParam._m0[62u].y, _1823 * cbSceneParam._m0[62u].x))) / _2039;
            float _2332 = isnan(cbSceneParam._m0[41u].w) ? _2328 : (isnan(_2328) ? cbSceneParam._m0[41u].w : max(_2328, cbSceneParam._m0[41u].w));
            float _2375 = (cbSceneParam._m0[33u].x - sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838))) * cbSceneParam._m0[33u].y;
            float _4004 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
            float _2382 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2040, cbSceneParam._m0[33u].w + _2041), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2040, _2041 - cbSceneParam._m0[33u].z), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2040 - cbSceneParam._m0[33u].z, _2041 - cbSceneParam._m0[33u].w), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2040 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2041), _2332), 0.0)).x), vec4(0.25)));
            float _2386 = 1.0 - (_2382 * cbSceneParam._m0[34u].x);
            float _2387 = 1.0 - (_2382 * cbSceneParam._m0[34u].y);
            float _2388 = 1.0 - (_2382 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2388) ? _1987 : (isnan(_1987) ? _2388 : min(_1987, _2388));
            frontier_phi_58_57_ladder_1 = isnan(_2387) ? _1986 : (isnan(_1986) ? _2387 : min(_1986, _2387));
            frontier_phi_58_57_ladder_2 = isnan(_2386) ? _1985 : (isnan(_1985) ? _2386 : min(_1985, _2386));
        }
        else
        {
            frontier_phi_58_57_ladder = _1987;
            frontier_phi_58_57_ladder_1 = _1986;
            frontier_phi_58_57_ladder_2 = _1985;
        }
        _2051 = frontier_phi_58_57_ladder_2;
        _2053 = frontier_phi_58_57_ladder_1;
        _2055 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2051 = _1985;
        _2053 = _1986;
        _2055 = _1987;
    }
    uvec4 _2060 = floatBitsToUint(cbInstanceData._m0[_740 + 5u]);
    uint _2062 = _2060.x * 14u;
    uint _2063 = _2062 + 13u;
    float _2068 = _766 + (-1.0);
    float _2071 = (cbLight._m0[_2063].x * _2068) + 1.0;
    float _2072 = (cbLight._m0[_2063].y * _2068) + 1.0;
    uint _2073 = _2062 + 5u;
    float _2079 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2083 = _2062 + 4u;
    float _2092 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2096 = _2062 | 1u;
    float _2107 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_665, _666, _667));
    float _2110 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_665, _666, _667));
    float _4040 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _4051 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2115 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _2117 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _2124 = ((cbLight._m0[_2073].x * _2079) * _2117) + (((cbLight._m0[_2083].x * _2051) * _2092) * _2115);
    float _2125 = ((_2079 * cbLight._m0[_2073].y) * _2117) + (((cbLight._m0[_2083].y * _2053) * _2092) * _2115);
    float _2126 = ((_2079 * cbLight._m0[_2073].z) * _2117) + (((cbLight._m0[_2083].z * _2055) * _2092) * _2115);
    uint _2128 = _2062 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _668) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_2062].x + _692;
    float _2144 = cbLight._m0[_2062].y + _693;
    float _2145 = cbLight._m0[_2062].z + _694;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2062].xyz));
    float _4062 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2157 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2158 = dot(vec3(_665, _666, _667), vec3(_2150, _2151, _2152));
    float _4084 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2150, _2151, _2152));
    float _4095 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2157 * ((_2156 * _2182) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2182) + _2142) * _2156))) * _2156;
    float _4106 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2209 = _2062 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _668) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2096].x + _692;
    float _2223 = cbLight._m0[_2096].y + _693;
    float _2224 = cbLight._m0[_2096].z + _694;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2096].xyz));
    float _4117 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2236 = dot(vec3(_665, _666, _667), vec3(_2229, _2230, _2231));
    float _4128 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2229, _2230, _2231));
    float _4139 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2221;
    float _2268 = (0.5 / (((_2157 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2258) + _2221) * _2235))) * _2235;
    float _4150 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2280 = (((_2257 * cbLight._m0[_2209].x) * _2270) * _2079) + ((((cbLight._m0[_2128].x * _2051) * _2181) * _2195) * _2092);
    float _2281 = (((_2257 * cbLight._m0[_2209].y) * _2270) * _2079) + ((((cbLight._m0[_2128].y * _2053) * _2181) * _2195) * _2092);
    float _2282 = (((_2257 * cbLight._m0[_2209].z) * _2270) * _2079) + ((((cbLight._m0[_2128].z * _2055) * _2181) * _2195) * _2092);
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_2060.y == 0u)
    {
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.x;
        uint _2412 = uint((float(_2400.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2401))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2401)));
        float _2422 = (log2(_1838 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2423 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        uint _2426 = uint(isnan(14.0) ? _2423 : (isnan(_2423) ? 14.0 : min(_2423, 14.0)));
        uvec4 _2431 = texelFetch(g_lightClusterGridBuffer, int(((_2426 << 2u) + (_2412 << 6u)) >> 2u));
        uint _2432 = _2431.x;
        uint _2433 = _2400.z;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((((1u << ((_2433 >> 4u) & 15u)) + 4294967295u) & _2432) == 0u) || ((_2433 & 240u) == 0u))
        {
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
        }
        else
        {
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            uint _2716 = 0u;
            uint _2725;
            bool _2726;
            for (;;)
            {
                _2725 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                _2726 = _2725 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2726)
                {
                    frontier_phi_82_pred = _2710;
                    frontier_phi_82_pred_1 = _2715;
                    frontier_phi_82_pred_2 = _2714;
                    frontier_phi_82_pred_3 = _2713;
                    frontier_phi_82_pred_4 = _2712;
                    frontier_phi_82_pred_5 = _2711;
                }
                else
                {
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    uint _2861;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2725;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2865 = uint(findLSB(_2861)) + (_2716 << 5u);
                        uint _2862 = (_2861 + 4294967295u) & _2861;
                        uint _2867 = _2865 * 48u;
                        vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2887 = (_2865 * 48u) + 4u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2906 = (_2865 * 48u) + 8u;
                        vec3 _2917 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x));
                        float _2921 = _2881.x - _1836;
                        float _2922 = _2881.y - _1837;
                        float _2923 = _2881.z - _1838;
                        float _2924 = dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923));
                        float _2927 = inversesqrt(_2924);
                        float _2928 = _2927 * _2921;
                        float _2929 = _2927 * _2922;
                        float _2930 = _2927 * _2923;
                        float _2931 = dot(vec3(_721, _724, _727), vec3(_2928, _2929, _2930));
                        float _2936 = 1.0 - (_2924 * _2881.w);
                        float _4171 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2938 = sqrt(_2924) * _2900.w;
                        float _2941 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                        float _2942 = _2941 * _2941;
                        float _2945 = ((1.0 - _2942) * _2931) + _2942;
                        float _2948 = _2938 * _2938;
                        float _2952 = ((isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * _2937) / ((_2948 * 0.699999988079071044921875) + 1.0);
                        float _2956 = (-0.0) - _1836;
                        float _2957 = (-0.0) - _1837;
                        float _2958 = (-0.0) - _1838;
                        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2972 = exp2(log2(1.0 / ((_2948 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _782;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2963 + _2928;
                        float _2984 = _2964 + _2929;
                        float _2985 = _2965 + _2930;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_721, _724, _727), vec3(_2963, _2964, _2965));
                        float _4187 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2997 = dot(vec3(_721, _724, _727), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4198 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2941 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2931) + _3006;
                        float _4209 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4220 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3032 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) / ((_3004 * _3004) * ((_2948 * 2.1991131305694580078125) + 3.141590118408203125))) * _2937;
                        _2790 = (_2952 * _2900.x) + _2858;
                        _2791 = (_2952 * _2900.y) + _2859;
                        _2792 = (_2952 * _2900.z) + _2860;
                        _2787 = (_3032 * _2917.x) + _2855;
                        _2788 = (_3032 * _2917.y) + _2856;
                        _2789 = (_3032 * _2917.z) + _2857;
                        if (_2862 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2862;
                        }
                    }
                    frontier_phi_82_pred = _2787;
                    frontier_phi_82_pred_1 = _2792;
                    frontier_phi_82_pred_2 = _2791;
                    frontier_phi_82_pred_3 = _2790;
                    frontier_phi_82_pred_4 = _2789;
                    frontier_phi_82_pred_5 = _2788;
                }
                _2541 = frontier_phi_82_pred;
                _2551 = frontier_phi_82_pred_1;
                _2549 = frontier_phi_82_pred_2;
                _2547 = frontier_phi_82_pred_3;
                _2545 = frontier_phi_82_pred_4;
                _2543 = frontier_phi_82_pred_5;
                uint _2717 = _2716 + 1u;
                if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2710 = _2541;
                    _2711 = _2543;
                    _2712 = _2545;
                    _2713 = _2547;
                    _2714 = _2549;
                    _2715 = _2551;
                    _2716 = _2717;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
        }
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.z;
        uint _2557 = (_2555 >> 8u) & 15u;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((4294967295u << _2557) & _2432) == 0u)
        {
            _2678 = _2540;
            _2680 = _2542;
            _2682 = _2544;
            _2684 = _2546;
            _2686 = _2548;
            _2688 = _2550;
        }
        else
        {
            float _2703 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
            float _2704 = _2703 * _1836;
            float _2705 = _2703 * _1837;
            float _2706 = _2703 * _1838;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2557 < ((_2555 >> 12u) & 15u))
            {
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2838 = _2540;
                float _2839 = _2542;
                float _2840 = _2544;
                float _2841 = _2546;
                float _2842 = _2548;
                float _2843 = _2550;
                uint _2844 = _2557;
                uint _2853;
                bool _2854;
                for (;;)
                {
                    _2853 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                    _2854 = _2853 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2854)
                    {
                        frontier_phi_88_pred = _2841;
                        frontier_phi_88_pred_1 = _2842;
                        frontier_phi_88_pred_2 = _2843;
                        frontier_phi_88_pred_3 = _2840;
                        frontier_phi_88_pred_4 = _2839;
                        frontier_phi_88_pred_5 = _2838;
                    }
                    else
                    {
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        uint _3056 = _2853;
                        uint _3057;
                        vec4 _3082;
                        float _3083;
                        vec4 _3098;
                        vec3 _3110;
                        vec4 _3125;
                        vec4 _3140;
                        float _3186;
                        bool _3187;
                        for (;;)
                        {
                            uint _3067 = ((_2844 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3056));
                            _3057 = (_3056 + 4294967295u) & _3056;
                            uint _3069 = _3067 * 40u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3083 = _3082.w;
                            uint _3085 = (_3067 * 40u) + 4u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3067 * 40u) + 8u;
                            _3110 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x));
                            uint _3112 = (_3067 * 40u) + 16u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3067 * 40u) + 20u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3142 = (_3067 * 40u) + 24u;
                            vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3161 = (_3067 * 40u) + 28u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3186 = fma(_1838, _3174.z, fma(_1837, _3174.y, _3174.x * _1836)) + _3174.w;
                            _3187 = !((fma(_1838, _3155.z, fma(_1837, _3155.y, _3155.x * _1836)) + _3155.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3187)
                            {
                                float _3214 = _3082.x - _1836;
                                float _3215 = _3082.y - _1837;
                                float _3216 = _3082.z - _1838;
                                float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                                float _3220 = inversesqrt(_3217);
                                float _3221 = _3220 * _3214;
                                float _3222 = _3220 * _3215;
                                float _3223 = _3220 * _3216;
                                float _3227 = 1.0 - (_3217 / (_3083 * _3083));
                                float _4231 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3232 = sqrt(_3217) * _3098.w;
                                float _3234 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                                float _3235 = _3234 * _3234;
                                float _3238 = ((1.0 - _3235) * dot(vec3(_3221, _3222, _3223), vec3(_721, _724, _727))) + _3235;
                                float _3241 = _3232 * _3232;
                                float _3245 = (fma(_1838, _3125.z, fma(_1837, _3125.y, _3125.x * _1836)) + _3125.w) / _3186;
                                float _3246 = (fma(_1838, _3140.z, fma(_1837, _3140.y, _3140.x * _1836)) + _3140.w) / _3186;
                                float _3250 = 1.0 - dot(vec2(_3245, _3246), vec2(_3245, _3246));
                                float _4247 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3252 = _3251 * (((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3228) / ((_3241 * 0.699999988079071044921875) + 1.0));
                                float _3264 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                                float _3265 = 1.0 - _782;
                                float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                                float _3273 = _3272 * _3272;
                                float _3274 = _3273 * _3273;
                                float _3275 = _3221 - _2704;
                                float _3276 = _3222 - _2705;
                                float _3277 = _3223 - _2706;
                                float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                                float _3285 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2704, (-0.0) - _2705, (-0.0) - _2706));
                                float _4258 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3288 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3289 = dot(vec3(_721, _724, _727), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                                float _4269 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                                float _3297 = _3234 * _3273;
                                float _3298 = _3297 * _3297;
                                float _3304 = ((1.0 - _3298) * dot(vec3(_721, _724, _727), vec3(_3221, _3222, _3223))) + _3298;
                                float _4280 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3306 = 1.0 - _3273;
                                float _3316 = (0.5 / (((_3305 * ((_3288 * _3306) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3273) * _3288))) * _3305;
                                float _4291 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3326 = (_3251 * _3228) * (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) / ((_3296 * _3296) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3326 * _3110.x;
                                frontier_phi_94_pred_1 = _3326 * _3110.y;
                                frontier_phi_94_pred_2 = _3252 * _3098.z;
                                frontier_phi_94_pred_3 = _3252 * _3098.y;
                                frontier_phi_94_pred_4 = _3252 * _3098.x;
                                frontier_phi_94_pred_5 = _3326 * _3110.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3330 = frontier_phi_94_pred;
                            _3331 = frontier_phi_94_pred_1;
                            _3335 = frontier_phi_94_pred_2;
                            _3334 = frontier_phi_94_pred_3;
                            _3333 = frontier_phi_94_pred_4;
                            _3332 = frontier_phi_94_pred_5;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            _3042 = _3335 + _3055;
                            _3037 = _3330 + _3050;
                            _3038 = _3331 + _3051;
                            _3039 = _3332 + _3052;
                            if (_3057 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3057;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3040;
                        frontier_phi_88_pred_1 = _3041;
                        frontier_phi_88_pred_2 = _3042;
                        frontier_phi_88_pred_3 = _3039;
                        frontier_phi_88_pred_4 = _3038;
                        frontier_phi_88_pred_5 = _3037;
                    }
                    _2685 = frontier_phi_88_pred;
                    _2687 = frontier_phi_88_pred_1;
                    _2689 = frontier_phi_88_pred_2;
                    _2683 = frontier_phi_88_pred_3;
                    _2681 = frontier_phi_88_pred_4;
                    _2679 = frontier_phi_88_pred_5;
                    uint _2845 = _2844 + 1u;
                    if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2838 = _2679;
                        _2839 = _2681;
                        _2840 = _2683;
                        _2841 = _2685;
                        _2842 = _2687;
                        _2843 = _2689;
                        _2844 = _2845;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2687;
                frontier_phi_75_76_ladder_1 = _2689;
                frontier_phi_75_76_ladder_2 = _2685;
                frontier_phi_75_76_ladder_3 = _2683;
                frontier_phi_75_76_ladder_4 = _2681;
                frontier_phi_75_76_ladder_5 = _2679;
            }
            else
            {
                frontier_phi_75_76_ladder = _2548;
                frontier_phi_75_76_ladder_1 = _2550;
                frontier_phi_75_76_ladder_2 = _2546;
                frontier_phi_75_76_ladder_3 = _2544;
                frontier_phi_75_76_ladder_4 = _2542;
                frontier_phi_75_76_ladder_5 = _2540;
            }
            _2678 = frontier_phi_75_76_ladder_5;
            _2680 = frontier_phi_75_76_ladder_4;
            _2682 = frontier_phi_75_76_ladder_3;
            _2684 = frontier_phi_75_76_ladder_2;
            _2686 = frontier_phi_75_76_ladder;
            _2688 = frontier_phi_75_76_ladder_1;
        }
        float _2693 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2445 = (_2693 * _2684) + _2124;
        _2447 = (_2693 * _2686) + _2125;
        _2449 = (_2693 * _2688) + _2126;
        _2451 = ((_2678 * 0.039999999105930328369140625) * _2693) + _2280;
        _2453 = ((_2680 * 0.039999999105930328369140625) * _2693) + _2281;
        _2455 = ((_2682 * 0.039999999105930328369140625) * _2693) + _2282;
    }
    else
    {
        _2445 = _2124;
        _2447 = _2125;
        _2449 = _2126;
        _2451 = _2280;
        _2453 = _2281;
        _2455 = _2282;
    }
    float _4307 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4318 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4329 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2472 = ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2445 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _766))) + ((_2451 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2473 = ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2447 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _766))) + ((_2453 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2474 = ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2449 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _766))) + ((_2455 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    uint _2478 = _740 + 6u;
    float _2486 = _700 / cbSceneParam._m0[86u].x;
    float _2487 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2501 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, (log2((isnan(cbSceneParam._m0[77u].w) ? _687 : (isnan(_687) ? cbSceneParam._m0[77u].w : min(_687, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2503 = _2501.x;
    float _2504 = _2501.y;
    float _2505 = _2501.z;
    float _2506 = _2501.w;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_687 > cbSceneParam._m0[78u].w)
    {
        float _2565 = isnan(_687) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _687 : min(cbSceneParam._m0[80u].w, _687));
        float _2566 = _2565 / _687;
        float _2577 = _2566 * _263;
        float _2578 = _264 * _2566;
        float _2579 = (-0.0) - _2578;
        float _2580 = _2566 * _265;
        float _2582 = (cbSceneParam._m0[77u].w * _2579) / _2565;
        float _2583 = _2582 + cbSceneParam._m0[79u].w;
        float _2584 = cbSceneParam._m0[79u].w - _2578;
        float _2590 = sqrt(((_2577 * _2577) + (_2578 * _2578)) + (_2580 * _2580));
        float _2593 = (1.0 - (cbSceneParam._m0[77u].w / _2565)) * _2590;
        float _2598 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2600 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2579 - _2582) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2583 > 0.0) ? exp2(_2598 * _2583) : (2.0 - exp2(_2600 * _2583))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2593;
        }
        else
        {
            float _2739 = 1.0 / cbSceneParam._m0[80u].x;
            float _2740 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : max(_2583, _2584));
            float _2741 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : min(_2583, _2584));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            _2800 = ((abs(_2590 / _2579) * cbSceneParam._m0[80u].y) * ((((_2750 - _2751) * 2.0) - ((exp2(_2598 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0)))) - exp2(_2598 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))))) * _2739)) - ((exp2(_2600 * _2750) - exp2(_2600 * _2751)) * _2739))) + (_2593 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2506);
        _2602 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2503;
        _2604 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2504;
        _2606 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2505;
        _2608 = _2811 * _2506;
    }
    else
    {
        _2602 = _2503;
        _2604 = _2504;
        _2606 = _2505;
        _2608 = _2506;
    }
    float _2620 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2621 = _2620 == 3.0;
    float _2622 = log2(_2608);
    float _2629 = exp2(_2622 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)));
    float _2630 = exp2(_2622 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)));
    float _2631 = exp2(_2622 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0)));
    float _2640 = (_2620 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2640 * (_2621 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.y = _2640 * (_2621 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.z = _2640 * (_2621 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.w = cbInstanceData._m0[_2478].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2478].w;
}


