#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1180;
float _3339;
float _3340;
float _3341;
float _3342;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _395 = (_391 * _385) + (_359 * cbMtdParam._m0[20u].y);
    float _396 = (_391 * _386) + (_360 * cbMtdParam._m0[20u].z);
    float _397 = _395 * cbMtdParam._m0[19u].x;
    float _398 = _396 * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    bool _416 = _394 > 0.0;
    float _418 = _416 ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = _399 + (-0.5);
    float _428 = _400 + (-0.5);
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_425 + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_428 + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _472 = (_458 - (_458 * _292)) * cbMtdParam._m0[9u].x;
    float _473 = (_459 - (_459 * _292)) * cbMtdParam._m0[9u].y;
    float _474 = cbMtdParam._m0[9u].z * (_460 - (_460 * _292));
    float _492 = _395 * cbMtdParam._m0[21u].x;
    float _493 = _396 * cbMtdParam._m0[20u].w;
    bool _494 = _492 > 0.0;
    float _499;
    if (_494)
    {
        _499 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _499 = frontier_phi_11_10_ladder;
    }
    bool _501 = _493 > 0.0;
    float _506;
    if (_501)
    {
        _506 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _506 = frontier_phi_15_14_ladder;
    }
    float _509 = _416 ? (cbMtdParam._m0[16u].z / _394) : 5000.0;
    float _510 = isnan(_506) ? _499 : (isnan(_499) ? _506 : min(_499, _506));
    float _511 = isnan(_509) ? _510 : (isnan(_510) ? _509 : min(_510, _509));
    float _515 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _519 = ((_511 * _394) + _515) / _515;
    float _524 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _526 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _542 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_511 * _492)) / _519) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_511 * _493)) / _519) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _547 = _542.x * cbMtdParam._m0[10u].x;
    float _548 = _542.y * cbMtdParam._m0[10u].y;
    float _549 = _542.z * cbMtdParam._m0[10u].z;
    float _557;
    if (_494)
    {
        _557 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _557 = frontier_phi_19_18_ladder;
    }
    float _563;
    if (_501)
    {
        _563 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _563 = frontier_phi_23_22_ladder;
    }
    float _565 = isnan(_563) ? _557 : (isnan(_557) ? _563 : min(_557, _563));
    float _566 = isnan(_509) ? _565 : (isnan(_565) ? _509 : min(_565, _509));
    float _573 = ((_566 * _394) + _515) / _515;
    vec4 _587 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_566 * _492)) / _573) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_566 * _493)) / _573) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _589 = _587.w;
    float _591 = _589 - (_589 * _292);
    float _602 = 0.5 - (_292 * 0.5);
    float _612 = (((_472 - _305) + (_591 * ((_547 - _472) - (_547 * _292)))) * _602) + _305;
    float _613 = (((_473 - _307) + (_591 * ((_548 - _473) - (_548 * _292)))) * _602) + _307;
    float _614 = (((_474 - _309) + (_591 * ((_549 - _474) - (_549 * _292)))) * _602) + _309;
    vec4 _626 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _630 = _626.z;
    float _633 = (_626.x * 2.0) + (-1.0);
    float _634 = (_626.y * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3381 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))));
    float _641 = _630 * _292;
    float _648 = (cbMtdParam._m0[15u].w * ((_331 - _641) + ((_630 - _331) * _292))) + _641;
    float _652 = (cbMtdParam._m0[16u].x * _359) + _633;
    float _653 = (cbMtdParam._m0[16u].x * _360) + _634;
    float _656 = fma(_640, _201, fma(_653, _208, _652 * _194));
    float _659 = fma(_640, _202, fma(_653, _209, _652 * _195));
    float _662 = fma(_640, _203, fma(_653, _210, _652 * _196));
    float _666 = inversesqrt(dot(vec3(_656, _659, _662), vec3(_656, _659, _662)));
    float _667 = _666 * _656;
    float _668 = _666 * _659;
    float _669 = _666 * _662;
    float _3392 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _670 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3414 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3425 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _689 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _694 = _265 * _693;
    float _695 = _266 * _693;
    float _696 = _267 * _693;
    vec4 _701 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _703 = _701.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _861 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _867 = (cbMatDynParam._m0[5u].x * _861) + cbMatDynParam._m0[5u].y;
        float _3436 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _872 = (cbMatDynParam._m0[5u].z * _861) + cbMatDynParam._m0[5u].w;
        float _3447 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) - _868)) + _868) < ((_703 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_669, cbSceneParam._m0[5u].z, fma(_668, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _667));
    float _739 = fma(_669, cbSceneParam._m0[6u].z, fma(_668, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _667));
    float _742 = fma(_669, cbSceneParam._m0[7u].z, fma(_668, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _667));
    uint _755 = uint(roundEven(NORMAL.w)) * 13u;
    uint _757 = _755 + 9u;
    uint _758 = _757 + uint(cbMatDynParam._m0[0u].w);
    float _764 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_758].x;
    float _765 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_758].y;
    float _766 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_758].z;
    float _3458 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    vec4 _778 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _716, cbSceneParam._m0[86u].y * _717));
    float _781 = _778.x * TEXCOORD.z;
    float _782 = dot(vec3(_667, _668, _669), vec3(_694, _695, _696));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _667) - _694;
    float _790 = (_785 * _668) - _695;
    float _791 = (_785 * _669) - _696;
    float _795 = abs(dot(vec3(_694, _695, _696), vec3(_667, _668, _669)));
    float _3491 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_670);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1179;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _906 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _910 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _914 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _937 = _842 + _667;
        float _938 = _846 + _668;
        float _939 = _850 + _669;
        float _949 = fma(_939, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937)) - _906;
        float _950 = fma(_939, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937)) - _910;
        float _951 = fma(_939, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937)) - _914;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_906 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_910 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[34u].z) + ((((((_914 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1007 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_973.x + (-0.5));
        float _1009 = _1007 * (_973.y + (-0.5));
        float _1010 = _1007 * (_973.z + (-0.5));
        float _1017 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_980.x + (-0.5));
        float _1019 = _1017 * (_980.y + (-0.5));
        float _1020 = _1017 * (_980.z + (-0.5));
        float _1027 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_987.x + (-0.5));
        float _1029 = _1027 * (_987.y + (-0.5));
        float _1030 = _1027 * (_987.z + (-0.5));
        float _1037 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_994.x + (-0.5));
        float _1039 = _1037 * (_994.y + (-0.5));
        float _1040 = _1037 * (_994.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1061 = (dot(vec3(_667, _668, _669), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1071 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3539 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_1073 + 1.0))) + _1078) * _1041;
        float _1088 = _1009 * 0.5;
        float _1089 = _1019 * 0.5;
        float _1090 = _1029 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_667, _668, _669), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3572 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1115 + 1.0))) + _1120) * _1042;
        float _1130 = _1010 * 0.5;
        float _1131 = _1020 * 0.5;
        float _1132 = _1030 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_667, _668, _669), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3605 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1157 + 1.0))) + _1162) * _1043;
        _1179 = _1010;
        _1181 = _1009;
        _1182 = _1008;
        _1183 = _1020;
        _1184 = _1019;
        _1185 = _1018;
        _1186 = _1030;
        _1187 = _1029;
        _1188 = _1028;
        _1189 = _1043;
        _1190 = _1042;
        _1191 = _1041;
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _1180;
        _1181 = _1180;
        _1182 = _1180;
        _1183 = _1180;
        _1184 = _1180;
        _1185 = _1180;
        _1186 = _1180;
        _1187 = _1180;
        _1188 = _1180;
        _1189 = _1180;
        _1190 = _1180;
        _1191 = _1180;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1227 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1231 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1254 = _842 + _667;
        float _1255 = _846 + _668;
        float _1256 = _850 + _669;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_667, _668, _669), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3668 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_667, _668, _669), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3701 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_667, _668, _669), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3734 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1180;
        _1493 = _1180;
        _1494 = _1180;
        _1495 = _1180;
        _1496 = _1180;
        _1497 = _1180;
        _1498 = _1180;
        _1499 = _1180;
        _1500 = _1180;
        _1501 = _1180;
        _1502 = _1180;
        _1503 = _1180;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1192)) + _1192;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1193)) + _1193;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _789 * 0.5;
    float _1561 = _790 * 0.5;
    float _1562 = _791 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1603;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1179, _1183, _1186, _1189));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1614;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1605 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1618 = (_1614 * cbModelParam._m0[1u].x) + (_1603 * (1.0 - cbModelParam._m0[1u].x));
    float _1628 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _670);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1628 : min(cbModelParam._m0[25u].z, _1628));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1677 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1681 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1685 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1688 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1691 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1694 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1722;
        if (_1688 > 0.0)
        {
            _1722 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1722 = frontier_phi_41_39_ladder;
        }
        float _2091;
        if (_1691 > 0.0)
        {
            _2091 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2091 = frontier_phi_50_46_ladder;
        }
        float _2399;
        if (_1694 > 0.0)
        {
            _2399 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2399 = frontier_phi_64_57_ladder;
        }
        float _2401 = isnan(_2091) ? _1722 : (isnan(_1722) ? _2091 : min(_1722, _2091));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1688) + _1677;
        float _2407 = (_2402 * _1691) + _1681;
        float _2408 = (_2402 * _1694) + _1685;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2409;
        float _2412 = _2409 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2408 > _2412) || ((_2408 < _2410) || ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 < _2410) || (_2406 > _2412))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2408, cbModelParam._m0[9u].z, fma(_2407, cbModelParam._m0[9u].y, _2406 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2408, cbModelParam._m0[10u].z, fma(_2407, cbModelParam._m0[10u].y, _2406 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2408, cbModelParam._m0[11u].z, fma(_2407, cbModelParam._m0[11u].y, _2406 * cbModelParam._m0[11u].x))), _1629);
            frontier_phi_40_64_ladder = _2550.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2550.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2550.x * cbModelParam._m0[1u].y;
        }
        _1710 = frontier_phi_40_64_ladder_2;
        _1712 = frontier_phi_40_64_ladder_1;
        _1714 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1629);
        _1710 = _1698.x * cbModelParam._m0[1u].y;
        _1712 = _1698.y * cbModelParam._m0[1u].y;
        _1714 = _1698.z * cbModelParam._m0[1u].y;
    }
    float _1718 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _670);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1718 : min(cbModelParam._m0[25u].w, _1718));
    float _1807;
    float _1809;
    float _1811;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1771 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1775 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1779 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1782 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1785 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1788 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _2096;
        if (_1782 > 0.0)
        {
            _2096 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2096 = frontier_phi_52_48_ladder;
        }
        float _2425;
        if (_1785 > 0.0)
        {
            _2425 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2425 = frontier_phi_66_59_ladder;
        }
        float _2615;
        if (_1788 > 0.0)
        {
            _2615 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2615 = frontier_phi_84_77_ladder;
        }
        float _2617 = isnan(_2425) ? _2096 : (isnan(_2096) ? _2425 : min(_2096, _2425));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1782) + _1771;
        float _2623 = (_2618 * _1785) + _1775;
        float _2624 = (_2618 * _1788) + _1779;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1719);
            frontier_phi_49_84_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _1807 = frontier_phi_49_84_ladder_2;
        _1809 = frontier_phi_49_84_ladder_1;
        _1811 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1719);
        _1807 = _1791.x * cbModelParam._m0[1u].z;
        _1809 = _1791.y * cbModelParam._m0[1u].z;
        _1811 = _1791.z * cbModelParam._m0[1u].z;
    }
    float _1823 = ((((1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_810 * _797)) * _781;
    float _1824 = _1823 * ((cbModelParam._m0[1u].w * (_1807 - _1710)) + _1710);
    float _1825 = _1823 * ((cbModelParam._m0[1u].w * (_1809 - _1712)) + _1712);
    float _1826 = _1823 * ((cbModelParam._m0[1u].w * (_1811 - _1714)) + _1714);
    float _1829 = fma(_1826, cbSceneParam._m0[89u].z, fma(_1825, cbSceneParam._m0[89u].y, _1824 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1826, cbSceneParam._m0[90u].z, fma(_1825, cbSceneParam._m0[90u].y, _1824 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1826, cbSceneParam._m0[91u].z, fma(_1825, cbSceneParam._m0[91u].y, _1824 * cbSceneParam._m0[91u].x));
    vec4 _1843 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_716, _717));
    float _1845 = _1843.w;
    float _1857 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1845);
    float _1858 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1845);
    float _1859 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1845);
    uvec4 _1863 = floatBitsToUint(cbInstanceData._m0[_755 + 5u]);
    uint _1865 = _1863.x * 14u;
    uint _1866 = _1865 + 13u;
    float _1871 = _781 + (-1.0);
    float _1874 = (cbLight._m0[_1866].x * _1871) + 1.0;
    float _1875 = (cbLight._m0[_1866].y * _1871) + 1.0;
    uint _1876 = _1865 + 5u;
    float _1882 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1886 = _1865 + 4u;
    float _1895 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1899 = _1865 | 1u;
    float _1910 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_667, _668, _669));
    float _1913 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_667, _668, _669));
    float _3870 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _3881 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1918 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.3183098733425140380859375;
    float _1920 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.3183098733425140380859375;
    float _1927 = ((cbLight._m0[_1876].x * _1882) * _1920) + (((cbLight._m0[_1886].x * _1857) * _1895) * _1918);
    float _1928 = ((_1882 * cbLight._m0[_1876].y) * _1920) + (((cbLight._m0[_1886].y * _1858) * _1895) * _1918);
    float _1929 = ((_1882 * cbLight._m0[_1876].z) * _1920) + (((cbLight._m0[_1886].z * _1859) * _1895) * _1918);
    uint _1931 = _1865 + 8u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _670) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1865].x + _694;
    float _1947 = cbLight._m0[_1865].y + _695;
    float _1948 = cbLight._m0[_1865].z + _696;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1865].xyz));
    float _3892 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1960 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1961 = dot(vec3(_667, _668, _669), vec3(_1953, _1954, _1955));
    float _3914 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_1953, _1954, _1955));
    float _3925 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1945 * _1945;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = 1.0 - _1945;
    float _1996 = (0.5 / (((_1960 * ((_1959 * _1985) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _1985) + _1945) * _1959))) * _1959;
    float _3936 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    uint _2012 = _1865 + 9u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _670) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1899].x + _694;
    float _2026 = cbLight._m0[_1899].y + _695;
    float _2027 = cbLight._m0[_1899].z + _696;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1899].xyz));
    float _3947 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _2039 = dot(vec3(_667, _668, _669), vec3(_2032, _2033, _2034));
    float _3958 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2032, _2033, _2034));
    float _3969 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2024 * _2024;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2061 = 1.0 - _2024;
    float _2071 = (0.5 / (((_1960 * ((_2038 * _2061) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2061) + _2024) * _2038))) * _2038;
    float _3980 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    float _2083 = (((_2060 * cbLight._m0[_2012].x) * _2073) * _1882) + ((((cbLight._m0[_1931].x * _1857) * _1984) * _1998) * _1895);
    float _2084 = (((_2060 * cbLight._m0[_2012].y) * _2073) * _1882) + ((((cbLight._m0[_1931].y * _1858) * _1984) * _1998) * _1895);
    float _2085 = (((_2060 * cbLight._m0[_2012].z) * _2073) * _1882) + ((((cbLight._m0[_1931].z * _1859) * _1984) * _1998) * _1895);
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    if (_1863.y == 0u)
    {
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2140;
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2140;
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2140;
        uvec4 _2155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2156 = _2155.x;
        uint _2167 = uint((float(_2155.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _2156))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _2156)));
        float _2177 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2178 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        uint _2181 = uint(isnan(14.0) ? _2178 : (isnan(_2178) ? 14.0 : min(_2178, 14.0)));
        uvec4 _2186 = texelFetch(g_lightClusterGridBuffer, int(((_2181 << 2u) + (_2167 << 6u)) >> 2u));
        uint _2187 = _2186.x;
        uint _2188 = _2155.z;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        if (((((1u << ((_2188 >> 4u) & 15u)) + 4294967295u) & _2187) == 0u) || ((_2188 & 240u) == 0u))
        {
            _2278 = 0.0;
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
        }
        else
        {
            float _2279;
            float _2281;
            float _2283;
            float _2285;
            float _2287;
            float _2289;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            uint _2468 = 0u;
            uint _2477;
            bool _2478;
            for (;;)
            {
                _2477 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2468 << 2u)) >> 2u)).x;
                _2478 = _2477 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2478)
                {
                    frontier_phi_79_pred = _2467;
                    frontier_phi_79_pred_1 = _2466;
                    frontier_phi_79_pred_2 = _2465;
                    frontier_phi_79_pred_3 = _2464;
                    frontier_phi_79_pred_4 = _2463;
                    frontier_phi_79_pred_5 = _2462;
                }
                else
                {
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    uint _2664;
                    _2658 = _2462;
                    _2659 = _2463;
                    _2660 = _2464;
                    _2661 = _2465;
                    _2662 = _2466;
                    _2663 = _2467;
                    _2664 = _2477;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    for (;;)
                    {
                        uint _2668 = uint(findLSB(_2664)) + (_2468 << 5u);
                        uint _2665 = (_2664 + 4294967295u) & _2664;
                        uint _2670 = _2668 * 48u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 3u)).x));
                        uint _2690 = (_2668 * 48u) + 4u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2709 = (_2668 * 48u) + 8u;
                        vec3 _2720 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x));
                        float _2724 = _2684.x - _2141;
                        float _2725 = _2684.y - _2142;
                        float _2726 = _2684.z - _2143;
                        float _2727 = dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726));
                        float _2730 = inversesqrt(_2727);
                        float _2731 = _2730 * _2724;
                        float _2732 = _2730 * _2725;
                        float _2733 = _2730 * _2726;
                        float _2734 = dot(vec3(_736, _739, _742), vec3(_2731, _2732, _2733));
                        float _2739 = 1.0 - (_2727 * _2684.w);
                        float _4001 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2741 = sqrt(_2727) * _2703.w;
                        float _2744 = 1.39999997615814208984375 / (_2741 + 1.39999997615814208984375);
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2734) + _2745;
                        float _2751 = _2741 * _2741;
                        float _2755 = ((isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))) * _2740) / ((_2751 * 0.699999988079071044921875) + 1.0);
                        float _2759 = (-0.0) - _2141;
                        float _2760 = (-0.0) - _2142;
                        float _2761 = (-0.0) - _2143;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2776 = exp2(log2(1.0 / ((_2751 * 3.5) + 5.0)) * 0.25);
                        float _2777 = 1.0 - _797;
                        float _2784 = sqrt(1.0 - ((1.0 - (_2777 * _2777)) * (1.0 - (_2776 * _2776))));
                        float _2785 = _2784 * _2784;
                        float _2786 = _2785 * _2785;
                        float _2787 = _2766 + _2731;
                        float _2788 = _2767 + _2732;
                        float _2789 = _2768 + _2733;
                        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                        float _2797 = dot(vec3(_736, _739, _742), vec3(_2766, _2767, _2768));
                        float _4017 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2801 = dot(vec3(_736, _739, _742), vec3(_2793 * _2787, _2793 * _2788, _2793 * _2789));
                        float _4028 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2804 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2808 = ((_2804 * _2804) * (_2786 + (-1.0))) + 1.0;
                        float _2809 = _2744 * _2785;
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2734) + _2810;
                        float _4039 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2815 = 1.0 - _2785;
                        float _2825 = (0.5 / (((_2814 * ((_2800 * _2815) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2814 * _2815) + _2785) * _2800))) * _2814;
                        float _4050 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2836 = (((_2786 * 3.1415927410125732421875) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) / ((_2808 * _2808) * ((_2751 * 2.1991131305694580078125) + 3.141590118408203125))) * _2740;
                        _2562 = (_2755 * _2703.x) + _2661;
                        _2563 = (_2755 * _2703.y) + _2662;
                        _2564 = (_2755 * _2703.z) + _2663;
                        _2559 = (_2836 * _2720.x) + _2658;
                        _2560 = (_2836 * _2720.y) + _2659;
                        _2561 = (_2836 * _2720.z) + _2660;
                        if (_2665 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2658 = _2559;
                            _2659 = _2560;
                            _2660 = _2561;
                            _2661 = _2562;
                            _2662 = _2563;
                            _2663 = _2564;
                            _2664 = _2665;
                        }
                    }
                    frontier_phi_79_pred = _2564;
                    frontier_phi_79_pred_1 = _2563;
                    frontier_phi_79_pred_2 = _2562;
                    frontier_phi_79_pred_3 = _2561;
                    frontier_phi_79_pred_4 = _2560;
                    frontier_phi_79_pred_5 = _2559;
                }
                _2289 = frontier_phi_79_pred;
                _2287 = frontier_phi_79_pred_1;
                _2285 = frontier_phi_79_pred_2;
                _2283 = frontier_phi_79_pred_3;
                _2281 = frontier_phi_79_pred_4;
                _2279 = frontier_phi_79_pred_5;
                uint _2469 = _2468 + 1u;
                if (_2469 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2462 = _2279;
                    _2463 = _2281;
                    _2464 = _2283;
                    _2465 = _2285;
                    _2466 = _2287;
                    _2467 = _2289;
                    _2468 = _2469;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2278 = _2279;
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
        }
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.z;
        uint _2295 = (_2293 >> 8u) & 15u;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((4294967295u << _2295) & _2187) == 0u)
        {
            _2430 = _2278;
            _2432 = _2280;
            _2434 = _2282;
            _2436 = _2284;
            _2438 = _2286;
            _2440 = _2288;
        }
        else
        {
            float _2455 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _2456 = _2455 * _2141;
            float _2457 = _2455 * _2142;
            float _2458 = _2455 * _2143;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2295 < ((_2293 >> 12u) & 15u))
            {
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2641 = _2278;
                float _2642 = _2280;
                float _2643 = _2282;
                float _2644 = _2284;
                float _2645 = _2286;
                float _2646 = _2288;
                uint _2647 = _2295;
                uint _2656;
                bool _2657;
                for (;;)
                {
                    _2656 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                    _2657 = _2656 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2657)
                    {
                        frontier_phi_93_pred = _2645;
                        frontier_phi_93_pred_1 = _2644;
                        frontier_phi_93_pred_2 = _2643;
                        frontier_phi_93_pred_3 = _2642;
                        frontier_phi_93_pred_4 = _2641;
                        frontier_phi_93_pred_5 = _2646;
                    }
                    else
                    {
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _2884 = _2641;
                        float _2885 = _2642;
                        float _2886 = _2643;
                        float _2887 = _2644;
                        float _2888 = _2645;
                        float _2889 = _2646;
                        uint _2890 = _2656;
                        uint _2891;
                        vec4 _2916;
                        float _2917;
                        vec4 _2932;
                        vec3 _2944;
                        vec4 _2959;
                        vec4 _2974;
                        float _3020;
                        bool _3021;
                        for (;;)
                        {
                            uint _2901 = ((_2647 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2890));
                            _2891 = (_2890 + 4294967295u) & _2890;
                            uint _2903 = _2901 * 40u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2917 = _2916.w;
                            uint _2919 = (_2901 * 40u) + 4u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2934 = (_2901 * 40u) + 8u;
                            _2944 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x));
                            uint _2946 = (_2901 * 40u) + 16u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2961 = (_2901 * 40u) + 20u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2901 * 40u) + 24u;
                            vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2995 = (_2901 * 40u) + 28u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            _3020 = fma(_2143, _3008.z, fma(_2142, _3008.y, _3008.x * _2141)) + _3008.w;
                            _3021 = !((fma(_2143, _2989.z, fma(_2142, _2989.y, _2989.x * _2141)) + _2989.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3021)
                            {
                                float _3048 = _2916.x - _2141;
                                float _3049 = _2916.y - _2142;
                                float _3050 = _2916.z - _2143;
                                float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                                float _3054 = inversesqrt(_3051);
                                float _3055 = _3054 * _3048;
                                float _3056 = _3054 * _3049;
                                float _3057 = _3054 * _3050;
                                float _3061 = 1.0 - (_3051 / (_2917 * _2917));
                                float _4061 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3066 = sqrt(_3051) * _2932.w;
                                float _3068 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                                float _3069 = _3068 * _3068;
                                float _3072 = ((1.0 - _3069) * dot(vec3(_3055, _3056, _3057), vec3(_736, _739, _742))) + _3069;
                                float _3075 = _3066 * _3066;
                                float _3079 = (fma(_2143, _2959.z, fma(_2142, _2959.y, _2959.x * _2141)) + _2959.w) / _3020;
                                float _3080 = (fma(_2143, _2974.z, fma(_2142, _2974.y, _2974.x * _2141)) + _2974.w) / _3020;
                                float _3084 = 1.0 - dot(vec2(_3079, _3080), vec2(_3079, _3080));
                                float _4077 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3086 = _3085 * (((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3062) / ((_3075 * 0.699999988079071044921875) + 1.0));
                                float _3098 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                                float _3099 = 1.0 - _797;
                                float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                                float _3107 = _3106 * _3106;
                                float _3108 = _3107 * _3107;
                                float _3109 = _3055 - _2456;
                                float _3110 = _3056 - _2457;
                                float _3111 = _3057 - _2458;
                                float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                                float _3119 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2456, (-0.0) - _2457, (-0.0) - _2458));
                                float _4088 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3122 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3123 = dot(vec3(_736, _739, _742), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                                float _4099 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3126 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                                float _3131 = _3068 * _3107;
                                float _3132 = _3131 * _3131;
                                float _3138 = ((1.0 - _3132) * dot(vec3(_736, _739, _742), vec3(_3055, _3056, _3057))) + _3132;
                                float _4110 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3140 = 1.0 - _3107;
                                float _3150 = (0.5 / (((_3139 * ((_3122 * _3140) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3139 * _3140) + _3107) * _3122))) * _3139;
                                float _4121 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3160 = (_3085 * _3062) * (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) / ((_3130 * _3130) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3086 * _2932.z;
                                frontier_phi_99_pred_1 = _3086 * _2932.y;
                                frontier_phi_99_pred_2 = _3086 * _2932.x;
                                frontier_phi_99_pred_3 = _3160 * _2944.z;
                                frontier_phi_99_pred_4 = _3160 * _2944.y;
                                frontier_phi_99_pred_5 = _3160 * _2944.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3169 = frontier_phi_99_pred;
                            _3168 = frontier_phi_99_pred_1;
                            _3167 = frontier_phi_99_pred_2;
                            _3166 = frontier_phi_99_pred_3;
                            _3165 = frontier_phi_99_pred_4;
                            _3164 = frontier_phi_99_pred_5;
                            _2874 = _3167 + _2887;
                            _2875 = _3168 + _2888;
                            _2876 = _3169 + _2889;
                            _2871 = _3164 + _2884;
                            _2872 = _3165 + _2885;
                            _2873 = _3166 + _2886;
                            if (_2891 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2891;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2875;
                        frontier_phi_93_pred_1 = _2874;
                        frontier_phi_93_pred_2 = _2873;
                        frontier_phi_93_pred_3 = _2872;
                        frontier_phi_93_pred_4 = _2871;
                        frontier_phi_93_pred_5 = _2876;
                    }
                    _2439 = frontier_phi_93_pred;
                    _2437 = frontier_phi_93_pred_1;
                    _2435 = frontier_phi_93_pred_2;
                    _2433 = frontier_phi_93_pred_3;
                    _2431 = frontier_phi_93_pred_4;
                    _2441 = frontier_phi_93_pred_5;
                    uint _2648 = _2647 + 1u;
                    if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2641 = _2431;
                        _2642 = _2433;
                        _2643 = _2435;
                        _2644 = _2437;
                        _2645 = _2439;
                        _2646 = _2441;
                        _2647 = _2648;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2441;
                frontier_phi_68_69_ladder_1 = _2439;
                frontier_phi_68_69_ladder_2 = _2437;
                frontier_phi_68_69_ladder_3 = _2435;
                frontier_phi_68_69_ladder_4 = _2431;
                frontier_phi_68_69_ladder_5 = _2433;
            }
            else
            {
                frontier_phi_68_69_ladder = _2288;
                frontier_phi_68_69_ladder_1 = _2286;
                frontier_phi_68_69_ladder_2 = _2284;
                frontier_phi_68_69_ladder_3 = _2282;
                frontier_phi_68_69_ladder_4 = _2278;
                frontier_phi_68_69_ladder_5 = _2280;
            }
            _2430 = frontier_phi_68_69_ladder_4;
            _2432 = frontier_phi_68_69_ladder_5;
            _2434 = frontier_phi_68_69_ladder_3;
            _2436 = frontier_phi_68_69_ladder_2;
            _2438 = frontier_phi_68_69_ladder_1;
            _2440 = frontier_phi_68_69_ladder;
        }
        float _2445 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2200 = (_2445 * _2436) + _1927;
        _2202 = (_2445 * _2438) + _1928;
        _2204 = (_2445 * _2440) + _1929;
        _2206 = ((_2430 * 0.039999999105930328369140625) * _2445) + _2083;
        _2208 = ((_2432 * 0.039999999105930328369140625) * _2445) + _2084;
        _2210 = ((_2434 * 0.039999999105930328369140625) * _2445) + _2085;
    }
    else
    {
        _2200 = _1927;
        _2202 = _1928;
        _2204 = _1929;
        _2206 = _2083;
        _2208 = _2084;
        _2210 = _2085;
    }
    float _4137 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4148 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4159 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _2227 = ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2200 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _781))) + ((_2206 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2228 = ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2202 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _781))) + ((_2208 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2229 = ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2204 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _781))) + ((_2210 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2230 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    uint _2233 = _755 + 6u;
    float _2241 = _716 / cbSceneParam._m0[86u].x;
    float _2242 = _717 / cbSceneParam._m0[86u].y;
    vec4 _2256 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2241, _2242, (log2((isnan(cbSceneParam._m0[77u].w) ? _689 : (isnan(_689) ? cbSceneParam._m0[77u].w : min(_689, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2258 = _2256.x;
    float _2259 = _2256.y;
    float _2260 = _2256.z;
    float _2261 = _2256.w;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_689 > cbSceneParam._m0[78u].w)
    {
        float _2303 = isnan(_689) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _689 : min(cbSceneParam._m0[80u].w, _689));
        float _2304 = _2303 / _689;
        float _2315 = _2304 * _265;
        float _2316 = _266 * _2304;
        float _2317 = (-0.0) - _2316;
        float _2318 = _2304 * _267;
        float _2320 = (cbSceneParam._m0[77u].w * _2317) / _2303;
        float _2321 = _2320 + cbSceneParam._m0[79u].w;
        float _2322 = cbSceneParam._m0[79u].w - _2316;
        float _2328 = sqrt(((_2315 * _2315) + (_2316 * _2316)) + (_2318 * _2318));
        float _2331 = (1.0 - (cbSceneParam._m0[77u].w / _2303)) * _2328;
        float _2337 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2339 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2572;
        if (abs((_2317 - _2320) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2572 = ((((_2321 > 0.0) ? exp2(_2337 * _2321) : (2.0 - exp2(_2339 * _2321))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2331;
        }
        else
        {
            float _2491 = 1.0 / cbSceneParam._m0[80u].x;
            float _2492 = isnan(_2322) ? _2321 : (isnan(_2321) ? _2322 : max(_2321, _2322));
            float _2493 = isnan(_2322) ? _2321 : (isnan(_2321) ? _2322 : min(_2321, _2322));
            float _2502 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : min(_2492, 0.0));
            float _2503 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : min(_2493, 0.0));
            _2572 = ((abs(_2328 / _2317) * cbSceneParam._m0[80u].y) * ((((_2502 - _2503) * 2.0) - ((exp2(_2337 * (isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0)))) - exp2(_2337 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0))))) * _2491)) - ((exp2(_2339 * _2502) - exp2(_2339 * _2503)) * _2491))) + (_2331 * cbSceneParam._m0[80u].z);
        }
        vec4 _2574 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2241, _2242, 1.0), 0.0);
        float _2583 = exp2((_2572 * (-1.44269502162933349609375)) * (1.0 - _2574.w));
        float _2584 = log2(_2583);
        float _2600 = log2(_2261);
        _2341 = (exp2(_2600 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].x)) * _2574.x) / cbSceneParam._m0[78u].x)) + _2258;
        _2343 = (exp2(_2600 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].y)) * _2574.y) / cbSceneParam._m0[78u].y)) + _2259;
        _2345 = (exp2(_2600 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].z)) * _2574.z) / cbSceneParam._m0[78u].z)) + _2260;
        _2347 = _2583 * _2261;
    }
    else
    {
        _2341 = _2258;
        _2343 = _2259;
        _2345 = _2260;
        _2347 = _2261;
    }
    bool _2610;
    vec4 _2357;
    vec4 _2379;
    float _2381;
    float _2385;
    float _2386;
    float _2387;
    float _2388;
    bool _2398;
    for (;;)
    {
        _2357 = cbMatDynParam._m0[0u];
        float _2359 = roundEven(_2357.y);
        bool _2360 = _2359 == 3.0;
        float _2361 = log2(_2347);
        float _2368 = exp2(_2361 * cbSceneParam._m0[78u].x) * _2230;
        float _2369 = exp2(_2361 * cbSceneParam._m0[78u].y) * _2231;
        float _2370 = exp2(_2361 * cbSceneParam._m0[78u].z) * _2232;
        float _2377 = _703 + (-0.5);
        _2379 = cbMtdParam._m0[1u];
        _2381 = _2379.y * _2377;
        float _2384 = (_2359 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2385 = _2384 * (_2360 ? _2368 : (_2368 + (cbSceneParam._m0[72u].w * _2341)));
        _2386 = _2384 * (_2360 ? _2369 : (_2369 + (cbSceneParam._m0[72u].w * _2343)));
        _2387 = _2384 * (_2360 ? _2370 : (_2370 + (cbSceneParam._m0[72u].w * _2345)));
        _2388 = _2377 * 0.999000012874603271484375;
        _2398 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2398)
        {
            if ((cbInstanceData._m0[_755 + 7u].x + _2388) < 0.5)
            {
                _2610 = true;
                break;
            }
        }
        uint _2526 = _757 + uint(_2357.w);
        if ((cbInstanceData._m0[_2526].w < 1.0) && ((cbInstanceData._m0[_2526].w + _2388) < 0.5))
        {
            _2610 = true;
            break;
        }
        if ((_2381 + 1.0) < _2379.x)
        {
            _2610 = true;
            break;
        }
        _2610 = false;
        break;
    }
    float _2841;
    if (_2610)
    {
        discard_state = true;
        _2841 = 0.0;
    }
    else
    {
        _2841 = cbInstanceData._m0[_2233].w;
    }
    SV_Target.x = _2385;
    SV_Target.y = _2386;
    SV_Target.z = _2387;
    SV_Target.w = _2841;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2233].w;
    discard_exit();
}


