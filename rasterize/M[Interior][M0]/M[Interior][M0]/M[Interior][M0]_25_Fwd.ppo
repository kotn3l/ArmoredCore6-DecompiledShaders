#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1133;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _321 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _325 = _321.z;
    float _348 = (_321.x * 2.0) + (-1.0);
    float _350 = (_321.y * 2.0) + (-1.0);
    float _353 = _348 - (_348 * _286);
    float _354 = _350 - (_350 * _286);
    float _363 = cbMtdParam._m0[22u].y + _259;
    float _364 = cbMtdParam._m0[22u].z + _260;
    float _365 = cbMtdParam._m0[22u].w + _261;
    float _379 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_188, _189, _190));
    float _380 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_202, _203, _204));
    float _381 = (-0.0) - dot(vec3(_363, _364, _365), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _388 = _385 * _381;
    float _389 = (_385 * _379) + (_353 * cbMtdParam._m0[20u].y);
    float _390 = (_385 * _380) + (_354 * cbMtdParam._m0[20u].z);
    float _391 = _389 * cbMtdParam._m0[19u].x;
    float _392 = _390 * cbMtdParam._m0[18u].w;
    float _393 = fract(TEXCOORD.x);
    float _394 = fract(TEXCOORD.y);
    float _400;
    if (_391 > 0.0)
    {
        _400 = (1.0 - _393) / _391;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_391 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _393) / _391;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _400 = frontier_phi_3_2_ladder;
    }
    float _408;
    if (_392 > 0.0)
    {
        _408 = (1.0 - _394) / _392;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_392 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _394) / _392;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _408 = frontier_phi_7_6_ladder;
    }
    bool _410 = _388 > 0.0;
    float _412 = _410 ? (cbMtdParam._m0[15u].x / _388) : 5000.0;
    float _413 = isnan(_408) ? _400 : (isnan(_400) ? _408 : min(_400, _408));
    float _414 = isnan(_412) ? _413 : (isnan(_413) ? _412 : min(_413, _412));
    float _418 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _419 = _393 + (-0.5);
    float _422 = _394 + (-0.5);
    float _425 = ((_414 * _388) + _418) / _418;
    vec4 _450 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_419 + (_414 * _391)) / _425) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_422 + (_414 * _392)) / _425) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _466 = (_452 - (_452 * _286)) * cbMtdParam._m0[9u].x;
    float _467 = (_453 - (_453 * _286)) * cbMtdParam._m0[9u].y;
    float _468 = cbMtdParam._m0[9u].z * (_454 - (_454 * _286));
    float _486 = _389 * cbMtdParam._m0[21u].x;
    float _487 = _390 * cbMtdParam._m0[20u].w;
    bool _488 = _486 > 0.0;
    float _493;
    if (_488)
    {
        _493 = (1.0 - _393) / _486;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_486 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _393) / _486;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _493 = frontier_phi_11_10_ladder;
    }
    bool _495 = _487 > 0.0;
    float _500;
    if (_495)
    {
        _500 = (1.0 - _394) / _487;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_487 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _394) / _487;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _500 = frontier_phi_15_14_ladder;
    }
    float _503 = _410 ? (cbMtdParam._m0[16u].z / _388) : 5000.0;
    float _504 = isnan(_500) ? _493 : (isnan(_493) ? _500 : min(_493, _500));
    float _505 = isnan(_503) ? _504 : (isnan(_504) ? _503 : min(_504, _503));
    float _509 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _513 = ((_505 * _388) + _509) / _509;
    float _518 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _520 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _536 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_419 + (_505 * _486)) / _513) + 0.5) + _518) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_422 + (_505 * _487)) / _513) + 0.5) + _520) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _541 = _536.x * cbMtdParam._m0[10u].x;
    float _542 = _536.y * cbMtdParam._m0[10u].y;
    float _543 = _536.z * cbMtdParam._m0[10u].z;
    float _551;
    if (_488)
    {
        _551 = (1.0 - _393) / _486;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_486 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _393) / _486;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _551 = frontier_phi_19_18_ladder;
    }
    float _557;
    if (_495)
    {
        _557 = (1.0 - _394) / _487;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_487 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _394) / _487;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _557 = frontier_phi_23_22_ladder;
    }
    float _559 = isnan(_557) ? _551 : (isnan(_551) ? _557 : min(_551, _557));
    float _560 = isnan(_503) ? _559 : (isnan(_559) ? _503 : min(_559, _503));
    float _567 = ((_560 * _388) + _509) / _509;
    vec4 _581 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_419 + (_560 * _486)) / _567) + 0.5) + _518) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_422 + (_560 * _487)) / _567) + 0.5) + _520) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _583 = _581.w;
    float _585 = _583 - (_583 * _286);
    float _596 = 0.5 - (_286 * 0.5);
    float _606 = (((_466 - _299) + (_585 * ((_541 - _466) - (_541 * _286)))) * _596) + _299;
    float _607 = (((_467 - _301) + (_585 * ((_542 - _467) - (_542 * _286)))) * _596) + _301;
    float _608 = (((_468 - _303) + (_585 * ((_543 - _468) - (_543 * _286)))) * _596) + _303;
    vec4 _620 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _624 = _620.z;
    float _627 = (_620.x * 2.0) + (-1.0);
    float _628 = (_620.y * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3244 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _634 = sqrt(1.0 - (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))));
    float _635 = _624 * _286;
    float _642 = (cbMtdParam._m0[15u].w * ((_325 - _635) + ((_624 - _325) * _286))) + _635;
    float _646 = (cbMtdParam._m0[16u].x * _353) + _627;
    float _647 = (cbMtdParam._m0[16u].x * _354) + _628;
    float _650 = fma(_634, _195, fma(_647, _202, _646 * _188));
    float _653 = fma(_634, _196, fma(_647, _203, _646 * _189));
    float _656 = fma(_634, _197, fma(_647, _204, _646 * _190));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _3255 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _664 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
    float _3266 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3277 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3288 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _683 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _687 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _688 = _259 * _687;
    float _689 = _260 * _687;
    float _690 = _261 * _687;
    float _696 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _697 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _717 = fma(_663, cbSceneParam._m0[5u].z, fma(_662, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _661));
    float _720 = fma(_663, cbSceneParam._m0[6u].z, fma(_662, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _661));
    float _723 = fma(_663, cbSceneParam._m0[7u].z, fma(_662, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _661));
    uint _736 = uint(roundEven(NORMAL.w)) * 13u;
    uint _739 = (_736 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3299 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _3321 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    vec4 _759 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _696, cbSceneParam._m0[86u].y * _697));
    float _762 = _759.x * TEXCOORD.z;
    float _763 = dot(vec3(_661, _662, _663), vec3(_688, _689, _690));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _661) - _688;
    float _771 = (_766 * _662) - _689;
    float _772 = (_766 * _663) - _690;
    float _776 = abs(dot(vec3(_688, _689, _690), vec3(_661, _662, _663)));
    float _3332 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = sqrt(_664);
    float _791 = exp2((_778 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_778 * 3.0));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1132;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _859 = fma(_831, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823));
        float _863 = fma(_831, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823));
        float _867 = fma(_831, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823));
        float _890 = _823 + _661;
        float _891 = _827 + _662;
        float _892 = _831 + _663;
        float _902 = fma(_892, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890)) - _859;
        float _903 = fma(_892, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890)) - _863;
        float _904 = fma(_892, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890)) - _867;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_859 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_863 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[34u].z) + ((((((_867 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _960 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_926.x + (-0.5));
        float _962 = _960 * (_926.y + (-0.5));
        float _963 = _960 * (_926.z + (-0.5));
        float _970 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_933.x + (-0.5));
        float _972 = _970 * (_933.y + (-0.5));
        float _973 = _970 * (_933.z + (-0.5));
        float _980 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_940.x + (-0.5));
        float _982 = _980 * (_940.y + (-0.5));
        float _983 = _980 * (_940.z + (-0.5));
        float _990 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_947.x + (-0.5));
        float _992 = _990 * (_947.y + (-0.5));
        float _993 = _990 * (_947.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1014 = (dot(vec3(_661, _662, _663), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3358 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1024 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3369 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3380 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * (_1026 + 1.0))) + _1031) * _994;
        float _1041 = _962 * 0.5;
        float _1042 = _972 * 0.5;
        float _1043 = _982 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_661, _662, _663), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3391 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3402 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3413 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * (_1068 + 1.0))) + _1073) * _995;
        float _1083 = _963 * 0.5;
        float _1084 = _973 * 0.5;
        float _1085 = _983 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_661, _662, _663), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3424 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3435 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3446 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (_1110 + 1.0))) + _1115) * _996;
        _1132 = _963;
        _1134 = _962;
        _1135 = _961;
        _1136 = _973;
        _1137 = _972;
        _1138 = _971;
        _1139 = _983;
        _1140 = _982;
        _1141 = _981;
        _1142 = _996;
        _1143 = _995;
        _1144 = _994;
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _1133;
        _1134 = _1133;
        _1135 = _1133;
        _1136 = _1133;
        _1137 = _1133;
        _1138 = _1133;
        _1139 = _1133;
        _1140 = _1133;
        _1141 = _1133;
        _1142 = _1133;
        _1143 = _1133;
        _1144 = _1133;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1173 = fma(_831, cbModelParam._m0[30u].z, fma(_827, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823));
        float _1177 = fma(_831, cbModelParam._m0[31u].z, fma(_827, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823));
        float _1181 = fma(_831, cbModelParam._m0[32u].z, fma(_827, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823));
        float _1204 = _823 + _661;
        float _1205 = _827 + _662;
        float _1206 = _831 + _663;
        float _1216 = fma(_1206, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204)) - _1173;
        float _1217 = fma(_1206, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204)) - _1177;
        float _1218 = fma(_1206, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204)) - _1181;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1173 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1177 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[35u].z) + ((((((_1181 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1272 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1239.x + (-0.5));
        float _1274 = _1272 * (_1239.y + (-0.5));
        float _1275 = _1272 * (_1239.z + (-0.5));
        float _1282 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1246.x + (-0.5));
        float _1284 = _1282 * (_1246.y + (-0.5));
        float _1285 = _1282 * (_1246.z + (-0.5));
        float _1292 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1253.x + (-0.5));
        float _1294 = _1292 * (_1253.y + (-0.5));
        float _1295 = _1292 * (_1253.z + (-0.5));
        float _1302 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1260.x + (-0.5));
        float _1304 = _1302 * (_1260.y + (-0.5));
        float _1305 = _1302 * (_1260.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_661, _662, _663), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3509 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_1336 + 1.0))) + _1341) * _1306;
        float _1351 = _1274 * 0.5;
        float _1352 = _1284 * 0.5;
        float _1353 = _1294 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_661, _662, _663), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3542 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1378 + 1.0))) + _1383) * _1307;
        float _1393 = _1275 * 0.5;
        float _1394 = _1285 * 0.5;
        float _1395 = _1295 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_661, _662, _663), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3575 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1420 + 1.0))) + _1425) * _1308;
        _1442 = _1275;
        _1443 = _1274;
        _1444 = _1273;
        _1445 = _1285;
        _1446 = _1284;
        _1447 = _1283;
        _1448 = _1295;
        _1449 = _1294;
        _1450 = _1293;
        _1451 = _1308;
        _1452 = _1307;
        _1453 = _1306;
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1133;
        _1443 = _1133;
        _1444 = _1133;
        _1445 = _1133;
        _1446 = _1133;
        _1447 = _1133;
        _1448 = _1133;
        _1449 = _1133;
        _1450 = _1133;
        _1451 = _1133;
        _1452 = _1133;
        _1453 = _1133;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1145)) + _1145;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1146)) + _1146;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1147)) + _1147;
    float _1489 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1466));
    float _1510 = _770 * 0.5;
    float _1511 = _771 * 0.5;
    float _1512 = _772 * 0.5;
    float _1513 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1516 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1519 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1553;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1526 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1132, _1136, _1139, _1142));
        float _1530 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1534 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1541 = dot(vec4(cbModelParam._m0[39u]), vec4(_1510, _1511, _1512, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1564;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1555 = dot(vec4(cbModelParam._m0[40u]), vec4(_1510, _1511, _1512, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1568 = (_1564 * cbModelParam._m0[1u].x) + (_1553 * (1.0 - cbModelParam._m0[1u].x));
    float _1578 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _664);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1578 : min(cbModelParam._m0[25u].z, _1578));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1627 = fma(_831, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823)) + cbModelParam._m0[13u].w;
        float _1631 = fma(_831, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823)) + cbModelParam._m0[14u].w;
        float _1635 = fma(_831, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823)) + cbModelParam._m0[15u].w;
        float _1638 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1641 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1644 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1672;
        if (_1638 > 0.0)
        {
            _1672 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1672 = frontier_phi_38_36_ladder;
        }
        float _2017;
        if (_1641 > 0.0)
        {
            _2017 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2017 = frontier_phi_47_43_ladder;
        }
        float _2317;
        if (_1644 > 0.0)
        {
            _2317 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2317 = frontier_phi_61_54_ladder;
        }
        float _2319 = isnan(_2017) ? _1672 : (isnan(_1672) ? _2017 : min(_1672, _2017));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1638) + _1627;
        float _2325 = (_2320 * _1641) + _1631;
        float _2326 = (_2320 * _1644) + _1635;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2327;
        float _2330 = _2327 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2326 > _2330) || ((_2326 < _2328) || ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 < _2328) || (_2324 > _2330))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2326, cbModelParam._m0[9u].z, fma(_2325, cbModelParam._m0[9u].y, _2324 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2326, cbModelParam._m0[10u].z, fma(_2325, cbModelParam._m0[10u].y, _2324 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2326, cbModelParam._m0[11u].z, fma(_2325, cbModelParam._m0[11u].y, _2324 * cbModelParam._m0[11u].x))), _1579);
            frontier_phi_37_61_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1660 = frontier_phi_37_61_ladder_2;
        _1662 = frontier_phi_37_61_ladder_1;
        _1664 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1579);
        _1660 = _1648.x * cbModelParam._m0[1u].y;
        _1662 = _1648.y * cbModelParam._m0[1u].y;
        _1664 = _1648.z * cbModelParam._m0[1u].y;
    }
    float _1668 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _664);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1668 : min(cbModelParam._m0[25u].w, _1668));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1721 = fma(_831, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823)) + cbModelParam._m0[21u].w;
        float _1725 = fma(_831, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823)) + cbModelParam._m0[22u].w;
        float _1729 = fma(_831, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823)) + cbModelParam._m0[23u].w;
        float _1732 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1735 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1738 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _2022;
        if (_1732 > 0.0)
        {
            _2022 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2022 = frontier_phi_49_45_ladder;
        }
        float _2343;
        if (_1735 > 0.0)
        {
            _2343 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2343 = frontier_phi_63_56_ladder;
        }
        float _2512;
        if (_1738 > 0.0)
        {
            _2512 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2512 = frontier_phi_77_72_ladder;
        }
        float _2514 = isnan(_2343) ? _2022 : (isnan(_2022) ? _2343 : min(_2022, _2343));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1732) + _1721;
        float _2520 = (_2515 * _1735) + _1725;
        float _2521 = (_2515 * _1738) + _1729;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1669);
            frontier_phi_46_77_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1757 = frontier_phi_46_77_ladder_2;
        _1759 = frontier_phi_46_77_ladder_1;
        _1761 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1669);
        _1757 = _1741.x * cbModelParam._m0[1u].z;
        _1759 = _1741.y * cbModelParam._m0[1u].z;
        _1761 = _1741.z * cbModelParam._m0[1u].z;
    }
    float _1773 = ((((1.0 - _791) * ((_778 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_791 * _778)) * _762;
    float _1774 = _1773 * ((cbModelParam._m0[1u].w * (_1757 - _1660)) + _1660);
    float _1775 = _1773 * ((cbModelParam._m0[1u].w * (_1759 - _1662)) + _1662);
    float _1776 = _1773 * ((cbModelParam._m0[1u].w * (_1761 - _1664)) + _1664);
    float _1779 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1774 * cbSceneParam._m0[91u].x));
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_736 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1803 = _762 + (-1.0);
    float _1806 = (cbLight._m0[_1798].x * _1803) + 1.0;
    float _1807 = (cbLight._m0[_1798].y * _1803) + 1.0;
    uint _1808 = _1797 + 5u;
    float _1814 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1818 = _1797 + 4u;
    float _1824 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1828 = _1797 | 1u;
    float _1839 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_661, _662, _663));
    float _1842 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_661, _662, _663));
    float _3711 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _3722 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1847 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.3183098733425140380859375;
    float _1849 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.3183098733425140380859375;
    float _1856 = ((cbLight._m0[_1808].x * _1814) * _1849) + ((cbLight._m0[_1818].x * _1824) * _1847);
    float _1857 = ((_1814 * cbLight._m0[_1808].y) * _1849) + ((_1824 * cbLight._m0[_1818].y) * _1847);
    float _1858 = ((_1814 * cbLight._m0[_1808].z) * _1849) + ((_1824 * cbLight._m0[_1818].z) * _1847);
    uint _1860 = _1797 + 8u;
    float _1873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _664) * 0.949999988079071044921875);
    float _1874 = _1873 * _1873;
    float _1875 = cbLight._m0[_1797].x + _688;
    float _1876 = cbLight._m0[_1797].y + _689;
    float _1877 = cbLight._m0[_1797].z + _690;
    float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
    float _1882 = _1881 * _1875;
    float _1883 = _1881 * _1876;
    float _1884 = _1881 * _1877;
    float _1885 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1797].xyz));
    float _3733 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _1889 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _1890 = dot(vec3(_661, _662, _663), vec3(_1882, _1883, _1884));
    float _3755 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _1894 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1882, _1883, _1884));
    float _3766 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1898 = _1874 * _1874;
    float _1902 = ((_1893 * _1893) * (_1898 + (-1.0))) + 1.0;
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1914 = 1.0 - _1874;
    float _1925 = (0.5 / (((_1889 * ((_1888 * _1914) + _1874)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1914) + _1874) * _1888))) * _1888;
    float _3777 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1927 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1898 / ((_1902 * _1902) * 3.141590118408203125));
    uint _1938 = _1797 + 9u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1828].w)) * _664) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1828].x + _688;
    float _1952 = cbLight._m0[_1828].y + _689;
    float _1953 = cbLight._m0[_1828].z + _690;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1828].xyz));
    float _3788 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1965 = dot(vec3(_661, _662, _663), vec3(_1958, _1959, _1960));
    float _3799 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_1958, _1959, _1960));
    float _3810 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1973 = _1950 * _1950;
    float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = 1.0 - _1950;
    float _1997 = (0.5 / (((_1889 * ((_1964 * _1987) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1987) + _1950) * _1964))) * _1964;
    float _3821 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
    float _2009 = (((_1986 * cbLight._m0[_1938].x) * _1999) * _1814) + (((_1913 * cbLight._m0[_1860].x) * _1927) * _1824);
    float _2010 = (((_1986 * cbLight._m0[_1938].y) * _1999) * _1814) + (((_1913 * cbLight._m0[_1860].y) * _1927) * _1824);
    float _2011 = (((_1986 * cbLight._m0[_1938].z) * _1999) * _1814) + (((_1913 * cbLight._m0[_1860].z) * _1927) * _1824);
    float _2126;
    float _2128;
    float _2130;
    float _2132;
    float _2134;
    float _2136;
    if (_1795.y == 0u)
    {
        float _2066 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2067 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2066;
        float _2068 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2066;
        float _2069 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2066;
        uvec4 _2081 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2082 = _2081.x;
        uint _2093 = uint((float(_2081.y) * floor(float(uint(cbSceneParam._m0[85u].y * _697) / _2082))) + floor(float(uint(cbSceneParam._m0[85u].x * _696) / _2082)));
        float _2103 = (log2(_2069 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2104 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        uint _2107 = uint(isnan(14.0) ? _2104 : (isnan(_2104) ? 14.0 : min(_2104, 14.0)));
        uvec4 _2112 = texelFetch(g_lightClusterGridBuffer, int(((_2107 << 2u) + (_2093 << 6u)) >> 2u));
        uint _2113 = _2112.x;
        uint _2114 = _2081.z;
        float _2204;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        if (((((1u << ((_2114 >> 4u) & 15u)) + 4294967295u) & _2113) == 0u) || ((_2114 & 240u) == 0u))
        {
            _2204 = 0.0;
            _2206 = 0.0;
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
        }
        else
        {
            float _2205;
            float _2207;
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2380 = 0.0;
            float _2381 = 0.0;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            uint _2386 = 0u;
            uint _2395;
            bool _2396;
            for (;;)
            {
                _2395 = texelFetch(g_lightClassification, int((((_2107 << 5u) + (_2093 << 9u)) + (_2386 << 2u)) >> 2u)).x;
                _2396 = _2395 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2396)
                {
                    frontier_phi_74_pred = _2383;
                    frontier_phi_74_pred_1 = _2382;
                    frontier_phi_74_pred_2 = _2381;
                    frontier_phi_74_pred_3 = _2380;
                    frontier_phi_74_pred_4 = _2384;
                    frontier_phi_74_pred_5 = _2385;
                }
                else
                {
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    uint _2561;
                    _2555 = _2380;
                    _2556 = _2381;
                    _2557 = _2382;
                    _2558 = _2383;
                    _2559 = _2384;
                    _2560 = _2385;
                    _2561 = _2395;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    for (;;)
                    {
                        uint _2565 = uint(findLSB(_2561)) + (_2386 << 5u);
                        uint _2562 = (_2561 + 4294967295u) & _2561;
                        uint _2567 = _2565 * 48u;
                        vec4 _2581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 3u)).x));
                        uint _2587 = (_2565 * 48u) + 4u;
                        vec4 _2600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2587)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 3u)).x));
                        uint _2606 = (_2565 * 48u) + 8u;
                        vec3 _2617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2606)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 2u)).x));
                        float _2621 = _2581.x - _2067;
                        float _2622 = _2581.y - _2068;
                        float _2623 = _2581.z - _2069;
                        float _2624 = dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623));
                        float _2627 = inversesqrt(_2624);
                        float _2628 = _2627 * _2621;
                        float _2629 = _2627 * _2622;
                        float _2630 = _2627 * _2623;
                        float _2631 = dot(vec3(_717, _720, _723), vec3(_2628, _2629, _2630));
                        float _2636 = 1.0 - (_2624 * _2581.w);
                        float _3842 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2637 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
                        float _2638 = sqrt(_2624) * _2600.w;
                        float _2641 = 1.39999997615814208984375 / (_2638 + 1.39999997615814208984375);
                        float _2642 = _2641 * _2641;
                        float _2645 = ((1.0 - _2642) * _2631) + _2642;
                        float _2648 = _2638 * _2638;
                        float _2652 = ((isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))) * _2637) / ((_2648 * 0.699999988079071044921875) + 1.0);
                        float _2656 = (-0.0) - _2067;
                        float _2657 = (-0.0) - _2068;
                        float _2658 = (-0.0) - _2069;
                        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
                        float _2663 = _2662 * _2656;
                        float _2664 = _2662 * _2657;
                        float _2665 = _2662 * _2658;
                        float _2673 = exp2(log2(1.0 / ((_2648 * 3.5) + 5.0)) * 0.25);
                        float _2674 = 1.0 - _778;
                        float _2681 = sqrt(1.0 - ((1.0 - (_2674 * _2674)) * (1.0 - (_2673 * _2673))));
                        float _2682 = _2681 * _2681;
                        float _2683 = _2682 * _2682;
                        float _2684 = _2663 + _2628;
                        float _2685 = _2664 + _2629;
                        float _2686 = _2665 + _2630;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2694 = dot(vec3(_717, _720, _723), vec3(_2663, _2664, _2665));
                        float _3858 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                        float _2697 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                        float _2698 = dot(vec3(_717, _720, _723), vec3(_2690 * _2684, _2690 * _2685, _2690 * _2686));
                        float _3869 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2701 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                        float _2705 = ((_2701 * _2701) * (_2683 + (-1.0))) + 1.0;
                        float _2706 = _2641 * _2682;
                        float _2707 = _2706 * _2706;
                        float _2710 = ((1.0 - _2707) * _2631) + _2707;
                        float _3880 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2711 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
                        float _2712 = 1.0 - _2682;
                        float _2722 = (0.5 / (((_2711 * ((_2697 * _2712) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2712) + _2682) * _2697))) * _2711;
                        float _3891 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2733 = (((_2683 * 3.1415927410125732421875) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) / ((_2705 * _2705) * ((_2648 * 2.1991131305694580078125) + 3.141590118408203125))) * _2637;
                        _2464 = (_2652 * _2600.x) + _2558;
                        _2465 = (_2652 * _2600.y) + _2559;
                        _2466 = (_2652 * _2600.z) + _2560;
                        _2461 = (_2733 * _2617.x) + _2555;
                        _2462 = (_2733 * _2617.y) + _2556;
                        _2463 = (_2733 * _2617.z) + _2557;
                        if (_2562 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2555 = _2461;
                            _2556 = _2462;
                            _2557 = _2463;
                            _2558 = _2464;
                            _2559 = _2465;
                            _2560 = _2466;
                            _2561 = _2562;
                        }
                    }
                    frontier_phi_74_pred = _2464;
                    frontier_phi_74_pred_1 = _2463;
                    frontier_phi_74_pred_2 = _2462;
                    frontier_phi_74_pred_3 = _2461;
                    frontier_phi_74_pred_4 = _2465;
                    frontier_phi_74_pred_5 = _2466;
                }
                _2211 = frontier_phi_74_pred;
                _2209 = frontier_phi_74_pred_1;
                _2207 = frontier_phi_74_pred_2;
                _2205 = frontier_phi_74_pred_3;
                _2213 = frontier_phi_74_pred_4;
                _2215 = frontier_phi_74_pred_5;
                uint _2387 = _2386 + 1u;
                if (_2387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2380 = _2205;
                    _2381 = _2207;
                    _2382 = _2209;
                    _2383 = _2211;
                    _2384 = _2213;
                    _2385 = _2215;
                    _2386 = _2387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2204 = _2205;
            _2206 = _2207;
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
        }
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.z;
        uint _2221 = (_2219 >> 8u) & 15u;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((4294967295u << _2221) & _2113) == 0u)
        {
            _2348 = _2204;
            _2350 = _2206;
            _2352 = _2208;
            _2354 = _2210;
            _2356 = _2212;
            _2358 = _2214;
        }
        else
        {
            float _2373 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
            float _2374 = _2373 * _2067;
            float _2375 = _2373 * _2068;
            float _2376 = _2373 * _2069;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2221 < ((_2219 >> 12u) & 15u))
            {
                float _2349;
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2538 = _2204;
                float _2539 = _2206;
                float _2540 = _2208;
                float _2541 = _2210;
                float _2542 = _2212;
                float _2543 = _2214;
                uint _2544 = _2221;
                uint _2553;
                bool _2554;
                for (;;)
                {
                    _2553 = texelFetch(g_lightClassification, int((((_2107 << 5u) + (_2093 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                    _2554 = _2553 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2554)
                    {
                        frontier_phi_83_pred = _2541;
                        frontier_phi_83_pred_1 = _2540;
                        frontier_phi_83_pred_2 = _2539;
                        frontier_phi_83_pred_3 = _2538;
                        frontier_phi_83_pred_4 = _2543;
                        frontier_phi_83_pred_5 = _2542;
                    }
                    else
                    {
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _2772 = _2538;
                        float _2773 = _2539;
                        float _2774 = _2540;
                        float _2775 = _2541;
                        float _2776 = _2542;
                        float _2777 = _2543;
                        uint _2778 = _2553;
                        uint _2779;
                        vec4 _2804;
                        float _2805;
                        vec4 _2820;
                        vec3 _2832;
                        vec4 _2847;
                        vec4 _2862;
                        float _2908;
                        bool _2909;
                        for (;;)
                        {
                            uint _2789 = ((_2544 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2778));
                            _2779 = (_2778 + 4294967295u) & _2778;
                            uint _2791 = _2789 * 40u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            _2805 = _2804.w;
                            uint _2807 = (_2789 * 40u) + 4u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2822 = (_2789 * 40u) + 8u;
                            _2832 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x));
                            uint _2834 = (_2789 * 40u) + 16u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2849 = (_2789 * 40u) + 20u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2864 = (_2789 * 40u) + 24u;
                            vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2883 = (_2789 * 40u) + 28u;
                            vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            _2908 = fma(_2069, _2896.z, fma(_2068, _2896.y, _2896.x * _2067)) + _2896.w;
                            _2909 = !((fma(_2069, _2877.z, fma(_2068, _2877.y, _2877.x * _2067)) + _2877.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2909)
                            {
                                float _2936 = _2804.x - _2067;
                                float _2937 = _2804.y - _2068;
                                float _2938 = _2804.z - _2069;
                                float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                                float _2942 = inversesqrt(_2939);
                                float _2943 = _2942 * _2936;
                                float _2944 = _2942 * _2937;
                                float _2945 = _2942 * _2938;
                                float _2949 = 1.0 - (_2939 / (_2805 * _2805));
                                float _3902 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2950 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                                float _2954 = sqrt(_2939) * _2820.w;
                                float _2956 = 1.39999997615814208984375 / (_2954 + 1.39999997615814208984375);
                                float _2957 = _2956 * _2956;
                                float _2960 = ((1.0 - _2957) * dot(vec3(_2943, _2944, _2945), vec3(_717, _720, _723))) + _2957;
                                float _2963 = _2954 * _2954;
                                float _2967 = (fma(_2069, _2847.z, fma(_2068, _2847.y, _2847.x * _2067)) + _2847.w) / _2908;
                                float _2968 = (fma(_2069, _2862.z, fma(_2068, _2862.y, _2862.x * _2067)) + _2862.w) / _2908;
                                float _2972 = 1.0 - dot(vec2(_2967, _2968), vec2(_2967, _2968));
                                float _3918 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
                                float _2974 = _2973 * (((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2950) / ((_2963 * 0.699999988079071044921875) + 1.0));
                                float _2986 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                                float _2987 = 1.0 - _778;
                                float _2994 = sqrt(1.0 - ((1.0 - (_2987 * _2987)) * (1.0 - (_2986 * _2986))));
                                float _2995 = _2994 * _2994;
                                float _2996 = _2995 * _2995;
                                float _2997 = _2943 - _2374;
                                float _2998 = _2944 - _2375;
                                float _2999 = _2945 - _2376;
                                float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                                float _3007 = dot(vec3(_717, _720, _723), vec3((-0.0) - _2374, (-0.0) - _2375, (-0.0) - _2376));
                                float _3929 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3010 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                                float _3011 = dot(vec3(_717, _720, _723), vec3(_3003 * _2997, _3003 * _2998, _3003 * _2999));
                                float _3940 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3014 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                                float _3018 = ((_3014 * _3014) * (_2996 + (-1.0))) + 1.0;
                                float _3019 = _2956 * _2995;
                                float _3020 = _3019 * _3019;
                                float _3026 = ((1.0 - _3020) * dot(vec3(_717, _720, _723), vec3(_2943, _2944, _2945))) + _3020;
                                float _3951 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                                float _3028 = 1.0 - _2995;
                                float _3038 = (0.5 / (((_3027 * ((_3010 * _3028) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_3027 * _3028) + _2995) * _3010))) * _3027;
                                float _3962 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3048 = (_2973 * _2950) * (((_2996 * 3.1415927410125732421875) * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) / ((_3018 * _3018) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2974 * _2820.x;
                                frontier_phi_89_pred_1 = _3048 * _2832.z;
                                frontier_phi_89_pred_2 = _3048 * _2832.y;
                                frontier_phi_89_pred_3 = _3048 * _2832.x;
                                frontier_phi_89_pred_4 = _2974 * _2820.z;
                                frontier_phi_89_pred_5 = _2974 * _2820.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3055 = frontier_phi_89_pred;
                            _3054 = frontier_phi_89_pred_1;
                            _3053 = frontier_phi_89_pred_2;
                            _3052 = frontier_phi_89_pred_3;
                            _3057 = frontier_phi_89_pred_4;
                            _3056 = frontier_phi_89_pred_5;
                            _2762 = _3055 + _2775;
                            _2763 = _3056 + _2776;
                            _2764 = _3057 + _2777;
                            _2759 = _3052 + _2772;
                            _2760 = _3053 + _2773;
                            _2761 = _3054 + _2774;
                            if (_2779 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2779;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2762;
                        frontier_phi_83_pred_1 = _2761;
                        frontier_phi_83_pred_2 = _2760;
                        frontier_phi_83_pred_3 = _2759;
                        frontier_phi_83_pred_4 = _2764;
                        frontier_phi_83_pred_5 = _2763;
                    }
                    _2355 = frontier_phi_83_pred;
                    _2353 = frontier_phi_83_pred_1;
                    _2351 = frontier_phi_83_pred_2;
                    _2349 = frontier_phi_83_pred_3;
                    _2359 = frontier_phi_83_pred_4;
                    _2357 = frontier_phi_83_pred_5;
                    uint _2545 = _2544 + 1u;
                    if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2538 = _2349;
                        _2539 = _2351;
                        _2540 = _2353;
                        _2541 = _2355;
                        _2542 = _2357;
                        _2543 = _2359;
                        _2544 = _2545;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2359;
                frontier_phi_65_66_ladder_1 = _2357;
                frontier_phi_65_66_ladder_2 = _2353;
                frontier_phi_65_66_ladder_3 = _2351;
                frontier_phi_65_66_ladder_4 = _2355;
                frontier_phi_65_66_ladder_5 = _2349;
            }
            else
            {
                frontier_phi_65_66_ladder = _2214;
                frontier_phi_65_66_ladder_1 = _2212;
                frontier_phi_65_66_ladder_2 = _2208;
                frontier_phi_65_66_ladder_3 = _2206;
                frontier_phi_65_66_ladder_4 = _2210;
                frontier_phi_65_66_ladder_5 = _2204;
            }
            _2348 = frontier_phi_65_66_ladder_5;
            _2350 = frontier_phi_65_66_ladder_3;
            _2352 = frontier_phi_65_66_ladder_2;
            _2354 = frontier_phi_65_66_ladder_4;
            _2356 = frontier_phi_65_66_ladder_1;
            _2358 = frontier_phi_65_66_ladder;
        }
        float _2363 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2126 = (_2363 * _2354) + _1856;
        _2128 = (_2363 * _2356) + _1857;
        _2130 = (_2363 * _2358) + _1858;
        _2132 = ((_2348 * 0.039999999105930328369140625) * _2363) + _2009;
        _2134 = ((_2350 * 0.039999999105930328369140625) * _2363) + _2010;
        _2136 = ((_2352 * 0.039999999105930328369140625) * _2363) + _2011;
    }
    else
    {
        _2126 = _1856;
        _2128 = _1857;
        _2130 = _1858;
        _2132 = _2009;
        _2134 = _2010;
        _2136 = _2011;
    }
    float _3978 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _3989 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4000 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _2153 = ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_2126 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _762))) + ((_2132 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2154 = ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2128 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _762))) + ((_2134 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2155 = ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2130 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _762))) + ((_2136 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    uint _2159 = _736 + 6u;
    float _2167 = _696 / cbSceneParam._m0[86u].x;
    float _2168 = _697 / cbSceneParam._m0[86u].y;
    vec4 _2182 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2167, _2168, (log2((isnan(cbSceneParam._m0[77u].w) ? _683 : (isnan(_683) ? cbSceneParam._m0[77u].w : min(_683, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2184 = _2182.x;
    float _2185 = _2182.y;
    float _2186 = _2182.z;
    float _2187 = _2182.w;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_683 > cbSceneParam._m0[78u].w)
    {
        float _2229 = isnan(_683) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _683 : min(cbSceneParam._m0[80u].w, _683));
        float _2230 = _2229 / _683;
        float _2241 = _2230 * _259;
        float _2242 = _260 * _2230;
        float _2243 = (-0.0) - _2242;
        float _2244 = _2230 * _261;
        float _2246 = (cbSceneParam._m0[77u].w * _2243) / _2229;
        float _2247 = _2246 + cbSceneParam._m0[79u].w;
        float _2248 = cbSceneParam._m0[79u].w - _2242;
        float _2254 = sqrt(((_2241 * _2241) + (_2242 * _2242)) + (_2244 * _2244));
        float _2257 = (1.0 - (cbSceneParam._m0[77u].w / _2229)) * _2254;
        float _2263 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2265 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2474;
        if (abs((_2243 - _2246) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2474 = ((((_2247 > 0.0) ? exp2(_2263 * _2247) : (2.0 - exp2(_2265 * _2247))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2257;
        }
        else
        {
            float _2409 = 1.0 / cbSceneParam._m0[80u].x;
            float _2410 = isnan(_2248) ? _2247 : (isnan(_2247) ? _2248 : max(_2247, _2248));
            float _2411 = isnan(_2248) ? _2247 : (isnan(_2247) ? _2248 : min(_2247, _2248));
            float _2420 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : min(_2410, 0.0));
            float _2421 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : min(_2411, 0.0));
            _2474 = ((abs(_2254 / _2243) * cbSceneParam._m0[80u].y) * ((((_2420 - _2421) * 2.0) - ((exp2(_2263 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0)))) - exp2(_2263 * (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))))) * _2409)) - ((exp2(_2265 * _2420) - exp2(_2265 * _2421)) * _2409))) + (_2257 * cbSceneParam._m0[80u].z);
        }
        vec4 _2476 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2167, _2168, 1.0), 0.0);
        float _2485 = exp2((_2474 * (-1.44269502162933349609375)) * (1.0 - _2476.w));
        float _2486 = log2(_2485);
        float _2502 = log2(_2187);
        _2267 = (exp2(_2502 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2486 * cbSceneParam._m0[78u].x)) * _2476.x) / cbSceneParam._m0[78u].x)) + _2184;
        _2269 = (exp2(_2502 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2486 * cbSceneParam._m0[78u].y)) * _2476.y) / cbSceneParam._m0[78u].y)) + _2185;
        _2271 = (exp2(_2502 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2486 * cbSceneParam._m0[78u].z)) * _2476.z) / cbSceneParam._m0[78u].z)) + _2186;
        _2273 = _2485 * _2187;
    }
    else
    {
        _2267 = _2184;
        _2269 = _2185;
        _2271 = _2186;
        _2273 = _2187;
    }
    float _2285 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2286 = _2285 == 3.0;
    float _2287 = log2(_2273);
    float _2294 = exp2(_2287 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0)));
    float _2295 = exp2(_2287 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0)));
    float _2296 = exp2(_2287 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0)));
    float _2305 = (_2285 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2305 * (_2286 ? _2294 : (_2294 + (cbSceneParam._m0[72u].w * _2267)));
    SV_Target.y = _2305 * (_2286 ? _2295 : (_2295 + (cbSceneParam._m0[72u].w * _2269)));
    SV_Target.z = _2305 * (_2286 ? _2296 : (_2296 + (cbSceneParam._m0[72u].w * _2271)));
    SV_Target.w = cbInstanceData._m0[_2159].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2159].w;
}


