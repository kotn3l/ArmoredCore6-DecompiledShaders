#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _342;
uint _1842;
uint _1843;
uint _1844;
uint _2087;
uint _2088;
uint _2089;
float _2328;
float _2329;
float _2330;
float _2331;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _170 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _171 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _176 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _177 = _176 * _169;
    float _178 = _176 * _170;
    float _179 = _176 * _171;
    float _183 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _187 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _188 = _187 * TANGENT.x;
    float _189 = _187 * TANGENT.y;
    float _190 = _187 * TANGENT.z;
    float _235 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _245 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _235);
    float _246 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _235);
    float _247 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _235);
    float _272 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _279 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _288 = cbMtdParam._m0[23u].x + _245;
    float _289 = cbMtdParam._m0[23u].y + _246;
    float _290 = cbMtdParam._m0[23u].z + _247;
    float _307 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_272 * _177, _272 * _178, _272 * _179));
    float _308 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_279 * _188, _279 * _189, _279 * _190));
    float _309 = (-0.0) - dot(vec3(_288, _289, _290), vec3((-0.0) - (NORMAL.x * _183), (-0.0) - (NORMAL.y * _183), (-0.0) - (NORMAL.z * _183)));
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _313 * _309;
    float _316 = (cbMtdParam._m0[19u].w * _307) * _313;
    float _318 = (cbMtdParam._m0[20u].x * _308) * _313;
    float _321 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _322 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _340;
    float _343;
    float _345;
    if (_316 > 0.0)
    {
        float _326 = (1.0 - _321) / _316;
        _340 = _326;
        _343 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_326 * _314)) * 0.16666667163372039794921875;
        _345 = (fract((_326 * _318) + _322) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_316 < 0.0)
        {
            float _341 = ((-0.0) - _321) / _316;
            frontier_phi_3_2_ladder = _341;
            frontier_phi_3_2_ladder_1 = (fract((_341 * _318) + _322) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_341 * _314) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _342;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _340 = frontier_phi_3_2_ladder;
        _343 = frontier_phi_3_2_ladder_2;
        _345 = frontier_phi_3_2_ladder_1;
    }
    float _371;
    float _373;
    float _375;
    if (_318 > 0.0)
    {
        float _358 = (1.0 - _322) / _318;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_358 < _340)
        {
            frontier_phi_8_5_ladder = (fract(_358 * _314) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_358 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _358;
        }
        else
        {
            frontier_phi_8_5_ladder = _345;
            frontier_phi_8_5_ladder_1 = _343;
            frontier_phi_8_5_ladder_2 = _340;
        }
        _371 = frontier_phi_8_5_ladder_2;
        _373 = frontier_phi_8_5_ladder_1;
        _375 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_318 < 0.0)
        {
            float _372 = ((-0.0) - _322) / _318;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_372 < _340)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_372 * _314) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_372 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _372;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _345;
                frontier_phi_8_6_ladder_9_ladder_1 = _343;
                frontier_phi_8_6_ladder_9_ladder_2 = _340;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _345;
            frontier_phi_8_6_ladder_1 = _343;
            frontier_phi_8_6_ladder_2 = _340;
        }
        _371 = frontier_phi_8_6_ladder_2;
        _373 = frontier_phi_8_6_ladder_1;
        _375 = frontier_phi_8_6_ladder;
    }
    float _379 = (_314 > 0.0) ? (cbMtdParam._m0[16u].w / _314) : 5000.0;
    float _392;
    float _393;
    if (_379 < _371)
    {
        _392 = ((_321 + cbMtdParam._m0[17u].x) + (_379 * _316)) * 0.16666667163372039794921875;
        _393 = (((_379 * _318) + _322) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _392 = _373;
        _393 = _375;
    }
    vec4 _396 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_392, _393));
    float _420 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _424 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _425 = _245 * _424;
    float _426 = _246 * _424;
    float _427 = _247 * _424;
    vec4 _432 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _434 = _432.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _509 = sqrt(((_245 * _245) + (_246 * _246)) + (_247 * _247));
        float _516 = (cbMatDynParam._m0[5u].x * _509) + cbMatDynParam._m0[5u].y;
        float _2340 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
        float _517 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
        float _521 = (cbMatDynParam._m0[5u].z * _509) + cbMatDynParam._m0[5u].w;
        float _2351 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0))) - _517)) + _517) < ((_434 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _452 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _453 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _462 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_452 * cbSceneParam._m0[86u].x, _453 * cbSceneParam._m0[86u].y));
    float _465 = _462.x * TEXCOORD.z;
    float _466 = (-0.0) - _425;
    float _467 = (-0.0) - _426;
    float _468 = (-0.0) - _427;
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _662;
    float _663;
    float _664;
    float _665;
    float _666;
    float _667;
    float _668;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _584 = (cbModelParam._m0[37u].x * ((((fma(_498, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _586 = (cbModelParam._m0[37u].y * ((((fma(_498, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _587 = (((((fma(_498, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_584, _586, _587), 0.0);
        float _624 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _635 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _645 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _655 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_611.x + (-0.5));
        float _657 = _655 * (_611.y + (-0.5));
        float _658 = _655 * (_611.z + (-0.5));
        _662 = _624 * (_590.z + (-0.5));
        _663 = _624 * (_590.y + (-0.5));
        _664 = _624 * (_590.x + (-0.5));
        _665 = _635 * (_597.z + (-0.5));
        _666 = _635 * (_597.y + (-0.5));
        _667 = _635 * (_597.x + (-0.5));
        _668 = _645 * (_604.z + (-0.5));
        _669 = _645 * (_604.y + (-0.5));
        _670 = _645 * (_604.x + (-0.5));
        _671 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        _672 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        _673 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    }
    else
    {
        _662 = _342;
        _663 = _342;
        _664 = _342;
        _665 = _342;
        _666 = _342;
        _667 = _342;
        _668 = _342;
        _669 = _342;
        _670 = _342;
        _671 = _342;
        _672 = _342;
        _673 = _342;
    }
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _730 = (cbModelParam._m0[38u].x * ((((fma(_498, cbModelParam._m0[30u].z, fma(_494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _490)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _731 = (cbModelParam._m0[38u].y * ((((fma(_498, cbModelParam._m0[31u].z, fma(_494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _490)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _732 = (((((fma(_498, cbModelParam._m0[32u].z, fma(_494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _490)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        float _767 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _777 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _787 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _797 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_755.x + (-0.5));
        float _799 = _797 * (_755.y + (-0.5));
        float _800 = _797 * (_755.z + (-0.5));
        _804 = _767 * (_734.z + (-0.5));
        _805 = _767 * (_734.y + (-0.5));
        _806 = _767 * (_734.x + (-0.5));
        _807 = _777 * (_741.z + (-0.5));
        _808 = _777 * (_741.y + (-0.5));
        _809 = _777 * (_741.x + (-0.5));
        _810 = _787 * (_748.z + (-0.5));
        _811 = _787 * (_748.y + (-0.5));
        _812 = _787 * (_748.x + (-0.5));
        _813 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        _814 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        _815 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    }
    else
    {
        _804 = _342;
        _805 = _342;
        _806 = _342;
        _807 = _342;
        _808 = _342;
        _809 = _342;
        _810 = _342;
        _811 = _342;
        _812 = _342;
        _813 = _342;
        _814 = _342;
        _815 = _342;
    }
    float _830 = _425 * (-0.5);
    float _831 = _426 * (-0.5);
    float _832 = _427 * (-0.5);
    float _833 = dot(vec4(_830, _831, _832, 1.0), vec4(_806, _809, _812, _815));
    float _836 = dot(vec4(_830, _831, _832, 1.0), vec4(_805, _808, _811, _814));
    float _839 = dot(vec4(_830, _831, _832, 1.0), vec4(_804, _807, _810, _813));
    float _874;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _846 = dot(vec4(_830, _831, _832, 1.0), vec4(_662, _665, _668, _671));
        float _850 = dot(vec4(_830, _831, _832, 1.0), vec4(_663, _666, _669, _672));
        float _854 = dot(vec4(_830, _831, _832, 1.0), vec4(_664, _667, _670, _673));
        float _861 = dot(vec4(cbModelParam._m0[39u]), vec4(_830, _831, _832, 1.0));
        _874 = dot(vec3(isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)), isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)), isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_861) ? 0.0 : (isnan(0.0) ? _861 : max(0.0, _861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _874 = 1.0;
    }
    float _885;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _876 = dot(vec4(cbModelParam._m0[40u]), vec4(_830, _831, _832, 1.0));
        _885 = dot(vec3(isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)), isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)), isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_876) ? 0.0 : (isnan(0.0) ? _876 : max(0.0, _876))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _885 = 1.0;
    }
    float _889 = (_885 * cbModelParam._m0[1u].x) + (_874 * (1.0 - cbModelParam._m0[1u].x));
    float _896 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _979;
    float _981;
    float _983;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _946 = fma(_498, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490)) + cbModelParam._m0[13u].w;
        float _950 = fma(_498, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490)) + cbModelParam._m0[14u].w;
        float _954 = fma(_498, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490)) + cbModelParam._m0[15u].w;
        float _957 = fma(_468, cbModelParam._m0[13u].z, fma(_467, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _466));
        float _960 = fma(_468, cbModelParam._m0[14u].z, fma(_467, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _466));
        float _963 = fma(_468, cbModelParam._m0[15u].z, fma(_467, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _466));
        float _989;
        if (_957 > 0.0)
        {
            _989 = abs((1.0 - _946) / _957);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_957 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_946 + 1.0) / _957);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _989 = frontier_phi_29_27_ladder;
        }
        float _1269;
        if (_960 > 0.0)
        {
            _1269 = abs((1.0 - _950) / _960);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_960 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_950 + 1.0) / _960);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1269 = frontier_phi_38_34_ladder;
        }
        float _1574;
        if (_963 > 0.0)
        {
            _1574 = abs((1.0 - _954) / _963);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_963 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_954 + 1.0) / _963);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1574 = frontier_phi_52_45_ladder;
        }
        float _1576 = isnan(_1269) ? _989 : (isnan(_989) ? _1269 : min(_989, _1269));
        float _1577 = isnan(_1574) ? _1576 : (isnan(_1576) ? _1574 : min(_1576, _1574));
        float _1581 = (_1577 * _957) + _946;
        float _1582 = (_1577 * _960) + _950;
        float _1583 = (_1577 * _963) + _954;
        float _1584 = _1577 * 9.9999997473787516355514526367188e-05;
        float _1585 = (-1.0) - _1584;
        float _1587 = _1584 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1583 > _1587) || ((_1583 < _1585) || ((_1582 > _1587) || ((_1582 < _1585) || ((_1581 < _1585) || (_1581 > _1587))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1583, cbModelParam._m0[9u].z, fma(_1582, cbModelParam._m0[9u].y, _1581 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1583, cbModelParam._m0[10u].z, fma(_1582, cbModelParam._m0[10u].y, _1581 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1583, cbModelParam._m0[11u].z, fma(_1582, cbModelParam._m0[11u].y, _1581 * cbModelParam._m0[11u].x))), _896);
            frontier_phi_28_52_ladder = _1710.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _1710.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _1710.x * cbModelParam._m0[1u].y;
        }
        _979 = frontier_phi_28_52_ladder_2;
        _981 = frontier_phi_28_52_ladder_1;
        _983 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_466, _467, _468), _896);
        _979 = _967.x * cbModelParam._m0[1u].y;
        _981 = _967.y * cbModelParam._m0[1u].y;
        _983 = _967.z * cbModelParam._m0[1u].y;
    }
    float _986 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1077;
    float _1079;
    float _1081;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1041 = fma(_498, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490)) + cbModelParam._m0[21u].w;
        float _1045 = fma(_498, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490)) + cbModelParam._m0[22u].w;
        float _1049 = fma(_498, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490)) + cbModelParam._m0[23u].w;
        float _1052 = fma(_468, cbModelParam._m0[21u].z, fma(_467, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _466));
        float _1055 = fma(_468, cbModelParam._m0[22u].z, fma(_467, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _466));
        float _1058 = fma(_468, cbModelParam._m0[23u].z, fma(_467, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _466));
        float _1274;
        if (_1052 > 0.0)
        {
            _1274 = abs((1.0 - _1041) / _1052);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1052 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1041 + 1.0) / _1052);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1274 = frontier_phi_40_36_ladder;
        }
        float _1600;
        if (_1055 > 0.0)
        {
            _1600 = abs((1.0 - _1045) / _1055);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1055 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1045 + 1.0) / _1055);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1600 = frontier_phi_54_47_ladder;
        }
        float _1772;
        if (_1058 > 0.0)
        {
            _1772 = abs((1.0 - _1049) / _1058);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1058 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1049 + 1.0) / _1058);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _1772 = frontier_phi_72_65_ladder;
        }
        float _1774 = isnan(_1600) ? _1274 : (isnan(_1274) ? _1600 : min(_1274, _1600));
        float _1775 = isnan(_1772) ? _1774 : (isnan(_1774) ? _1772 : min(_1774, _1772));
        float _1779 = (_1775 * _1052) + _1041;
        float _1780 = (_1775 * _1055) + _1045;
        float _1781 = (_1775 * _1058) + _1049;
        float _1782 = _1775 * 9.9999997473787516355514526367188e-05;
        float _1783 = (-1.0) - _1782;
        float _1785 = _1782 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_1781 > _1785) || ((_1781 < _1783) || ((_1780 > _1785) || ((_1780 < _1783) || ((_1779 < _1783) || (_1779 > _1785))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1781, cbModelParam._m0[17u].z, fma(_1780, cbModelParam._m0[17u].y, _1779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1781, cbModelParam._m0[18u].z, fma(_1780, cbModelParam._m0[18u].y, _1779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1781, cbModelParam._m0[19u].z, fma(_1780, cbModelParam._m0[19u].y, _1779 * cbModelParam._m0[19u].x))), _986);
            frontier_phi_37_72_ladder = _1950.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _1950.x * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _1950.y * cbModelParam._m0[1u].z;
        }
        _1077 = frontier_phi_37_72_ladder_1;
        _1079 = frontier_phi_37_72_ladder_2;
        _1081 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_466, _467, _468), _986);
        _1077 = _1061.x * cbModelParam._m0[1u].z;
        _1079 = _1061.y * cbModelParam._m0[1u].z;
        _1081 = _1061.z * cbModelParam._m0[1u].z;
    }
    float _1093 = _465 * 0.01200000010430812835693359375;
    float _1095 = _1093 * ((cbModelParam._m0[1u].w * (_1077 - _979)) + _979);
    float _1096 = _1093 * ((cbModelParam._m0[1u].w * (_1079 - _981)) + _981);
    float _1097 = _1093 * ((cbModelParam._m0[1u].w * (_1081 - _983)) + _983);
    float _1118 = fma(_1097, cbSceneParam._m0[89u].z, fma(_1096, cbSceneParam._m0[89u].y, _1095 * cbSceneParam._m0[89u].x));
    float _1121 = fma(_1097, cbSceneParam._m0[90u].z, fma(_1096, cbSceneParam._m0[90u].y, _1095 * cbSceneParam._m0[90u].x));
    float _1124 = fma(_1097, cbSceneParam._m0[91u].z, fma(_1096, cbSceneParam._m0[91u].y, _1095 * cbSceneParam._m0[91u].x));
    uint _1131 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1135 = floatBitsToUint(cbInstanceData._m0[_1131 + 5u]);
    uint _1137 = _1135.x * 14u;
    uint _1138 = _1137 + 13u;
    float _1143 = _465 + (-1.0);
    float _1147 = (cbLight._m0[_1138].x * _1143) + 1.0;
    float _1148 = (cbLight._m0[_1138].y * _1143) + 1.0;
    uint _1149 = _1137 + 8u;
    float _1160 = cbLight._m0[_1137].x + _425;
    float _1161 = cbLight._m0[_1137].y + _426;
    float _1162 = cbLight._m0[_1137].z + _427;
    float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
    float _1170 = dot(vec3(0.0), vec3(cbLight._m0[_1137].xyz));
    float _2477 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
    float _1174 = dot(vec3(0.0), vec3(_425, _426, _427));
    float _2488 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _2488 : (isnan(_2488) ? 1.0 : min(_2488, 1.0));
    float _1178 = dot(vec3(cbLight._m0[_1137].xyz), vec3(_1160 * _1166, _1161 * _1166, _1162 * _1166));
    float _2499 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1189 = (exp2(log2(1.0 - (isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1195 = (0.5 / ((_1173 + 9.9999999392252902907785028219223e-09) + _1177)) * _1173;
    float _2510 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1197 = (isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0))) * 0.31831014156341552734375;
    float _1199 = isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0));
    uint _1209 = _1137 + 9u;
    uint _1215 = _1137 | 1u;
    float _1221 = cbLight._m0[_1215].x + _425;
    float _1222 = cbLight._m0[_1215].y + _426;
    float _1223 = cbLight._m0[_1215].z + _427;
    float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
    float _1231 = dot(vec3(0.0), vec3(cbLight._m0[_1215].xyz));
    float _2526 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1234 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
    float _1235 = dot(vec3(cbLight._m0[_1215].xyz), vec3(_1221 * _1227, _1222 * _1227, _1223 * _1227));
    float _2537 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1244 = (exp2(log2(1.0 - (isnan(1.0) ? _2537 : (isnan(_2537) ? 1.0 : min(_2537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1248 = (0.5 / ((_1234 + 9.9999999392252902907785028219223e-09) + _1177)) * _1234;
    float _2548 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _1250 = (isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0))) * 0.31831014156341552734375;
    float _1251 = isnan(1.0) ? _1148 : (isnan(_1148) ? 1.0 : min(_1148, 1.0));
    float _1261 = (((_1244 * cbLight._m0[_1209].x) * _1250) * _1251) + (((_1189 * cbLight._m0[_1149].x) * _1197) * _1199);
    float _1262 = (((_1244 * cbLight._m0[_1209].y) * _1250) * _1251) + (((_1189 * cbLight._m0[_1149].y) * _1197) * _1199);
    float _1263 = (((_1244 * cbLight._m0[_1209].z) * _1250) * _1251) + (((_1189 * cbLight._m0[_1149].z) * _1197) * _1199);
    float _1380;
    float _1382;
    float _1384;
    if (_1135.y == 0u)
    {
        float _1319 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1320 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1319;
        float _1321 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1319;
        float _1322 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1319;
        uvec4 _1334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1335 = _1334.x;
        uint _1346 = uint((float(_1334.y) * floor(float(uint(cbSceneParam._m0[85u].y * _453) / _1335))) + floor(float(uint(cbSceneParam._m0[85u].x * _452) / _1335)));
        float _1356 = (log2(_1322 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1357 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        uint _1360 = uint(isnan(14.0) ? _1357 : (isnan(_1357) ? 14.0 : min(_1357, 14.0)));
        uvec4 _1365 = texelFetch(g_lightClusterGridBuffer, int(((_1360 << 2u) + (_1346 << 6u)) >> 2u));
        uint _1366 = _1365.x;
        uint _1367 = _1334.z;
        float _1457;
        float _1459;
        float _1461;
        if (((((1u << ((_1367 >> 4u) & 15u)) + 4294967295u) & _1366) == 0u) || ((_1367 & 240u) == 0u))
        {
            _1457 = 0.0;
            _1459 = 0.0;
            _1461 = 0.0;
        }
        else
        {
            float _1458;
            float _1460;
            float _1462;
            float _1625 = 0.0;
            float _1626 = 0.0;
            float _1627 = 0.0;
            uint _1628 = 0u;
            uint _1637;
            bool _1638;
            for (;;)
            {
                _1637 = texelFetch(g_lightClassification, int((((_1360 << 5u) + (_1346 << 9u)) + (_1628 << 2u)) >> 2u)).x;
                _1638 = _1637 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                if (_1638)
                {
                    frontier_phi_67_pred = _1627;
                    frontier_phi_67_pred_1 = _1626;
                    frontier_phi_67_pred_2 = _1625;
                }
                else
                {
                    float _1812;
                    float _1813;
                    float _1814;
                    uint _1815;
                    _1812 = _1625;
                    _1813 = _1626;
                    _1814 = _1627;
                    _1815 = _1637;
                    float _1719;
                    float _1720;
                    float _1721;
                    for (;;)
                    {
                        uint _1819 = uint(findLSB(_1815)) + (_1628 << 5u);
                        uint _1816 = (_1815 + 4294967295u) & _1815;
                        uint _1821 = _1819 * 48u;
                        vec4 _1835 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1821)).x, texelFetch(g_PointLightRenderingBuffer, int(_1821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1821 + 3u)).x));
                        uint _1852 = (_1819 * 48u) + 8u;
                        vec3 _1863 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1852)).x, texelFetch(g_PointLightRenderingBuffer, int(_1852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1852 + 2u)).x));
                        float _1867 = _1835.x - _1320;
                        float _1868 = _1835.y - _1321;
                        float _1869 = _1835.z - _1322;
                        float _1870 = dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869));
                        float _1873 = inversesqrt(_1870);
                        float _1882 = 1.0 - (_1870 * _1835.w);
                        float _2574 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
                        float _1884 = sqrt(_1870) * uintBitsToFloat(uvec4(_1842, _1843, _1844, texelFetch(g_PointLightRenderingBuffer, int(((_1819 * 48u) + 4u) + 3u)).x)).w;
                        float _1887 = 1.39999997615814208984375 / (_1884 + 1.39999997615814208984375);
                        float _1888 = _1887 * _1887;
                        float _1891 = ((1.0 - _1888) * dot(vec3(0.0), vec3(_1873 * _1867, _1873 * _1868, _1873 * _1869))) + _1888;
                        float _1893 = (-0.0) - _1320;
                        float _1894 = (-0.0) - _1321;
                        float _1895 = (-0.0) - _1322;
                        float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
                        float _1903 = dot(vec3(0.0), vec3(_1899 * _1893, _1899 * _1894, _1899 * _1895));
                        float _2585 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
                        float _2596 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
                        float _1907 = isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0));
                        float _1911 = (0.5 / (((isnan(1.0) ? _2585 : (isnan(_2585) ? 1.0 : min(_2585, 1.0))) + 9.9999999392252902907785028219223e-09) + _1907)) * _1907;
                        float _2607 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
                        float _1920 = (((isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0))) * 3.1415927410125732421875) / (((_1884 * _1884) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2574 : (isnan(_2574) ? 1.0 : min(_2574, 1.0)));
                        _1719 = (_1920 * _1863.x) + _1812;
                        _1720 = (_1920 * _1863.y) + _1813;
                        _1721 = (_1920 * _1863.z) + _1814;
                        if (_1816 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1812 = _1719;
                            _1813 = _1720;
                            _1814 = _1721;
                            _1815 = _1816;
                        }
                    }
                    frontier_phi_67_pred = _1721;
                    frontier_phi_67_pred_1 = _1720;
                    frontier_phi_67_pred_2 = _1719;
                }
                _1462 = frontier_phi_67_pred;
                _1460 = frontier_phi_67_pred_1;
                _1458 = frontier_phi_67_pred_2;
                uint _1629 = _1628 + 1u;
                if (_1629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1625 = _1458;
                    _1626 = _1460;
                    _1627 = _1462;
                    _1628 = _1629;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1457 = _1458;
            _1459 = _1460;
            _1461 = _1462;
        }
        uvec4 _1465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1466 = _1465.z;
        uint _1468 = (_1466 >> 8u) & 15u;
        float _1605;
        float _1607;
        float _1609;
        if (((4294967295u << _1468) & _1366) == 0u)
        {
            _1605 = _1457;
            _1607 = _1459;
            _1609 = _1461;
        }
        else
        {
            float _1621 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            if (_1468 < ((_1466 >> 12u) & 15u))
            {
                float _1606;
                float _1608;
                float _1610;
                float _1798 = _1457;
                float _1799 = _1459;
                float _1800 = _1461;
                uint _1801 = _1468;
                uint _1810;
                bool _1811;
                for (;;)
                {
                    _1810 = texelFetch(g_lightClassification, int((((_1360 << 5u) + (_1346 << 9u)) + (_1801 << 2u)) >> 2u)).x;
                    _1811 = _1810 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    if (_1811)
                    {
                        frontier_phi_81_pred = _1798;
                        frontier_phi_81_pred_1 = _1800;
                        frontier_phi_81_pred_2 = _1799;
                    }
                    else
                    {
                        float _1955;
                        float _1956;
                        float _1957;
                        float _2176;
                        float _2177;
                        float _2178;
                        float _1965 = _1798;
                        float _1966 = _1799;
                        float _1967 = _1800;
                        uint _1968 = _1810;
                        uint _1969;
                        uint _1979;
                        vec4 _1994;
                        float _1995;
                        vec3 _2007;
                        vec4 _2022;
                        vec4 _2037;
                        float _2083;
                        bool _2084;
                        for (;;)
                        {
                            _1979 = ((_1801 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1968));
                            _1969 = (_1968 + 4294967295u) & _1968;
                            uint _1981 = _1979 * 40u;
                            _1994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 3u)).x));
                            _1995 = _1994.w;
                            uint _1997 = (_1979 * 40u) + 8u;
                            _2007 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1997 + 2u)).x));
                            uint _2009 = (_1979 * 40u) + 16u;
                            _2022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2009 + 3u)).x));
                            uint _2024 = (_1979 * 40u) + 20u;
                            _2037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 3u)).x));
                            uint _2039 = (_1979 * 40u) + 24u;
                            vec4 _2052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2039 + 3u)).x));
                            uint _2058 = (_1979 * 40u) + 28u;
                            vec4 _2071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2058 + 3u)).x));
                            _2083 = fma(_1322, _2071.z, fma(_1321, _2071.y, _2071.x * _1320)) + _2071.w;
                            _2084 = !((fma(_1322, _2052.z, fma(_1321, _2052.y, _2052.x * _1320)) + _2052.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            if (_2084)
                            {
                                float _2118 = _1994.x - _1320;
                                float _2119 = _1994.y - _1321;
                                float _2120 = _1994.z - _1322;
                                float _2121 = dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120));
                                float _2124 = inversesqrt(_2121);
                                float _2131 = 1.0 - (_2121 / (_1995 * _1995));
                                float _2618 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
                                float _2133 = sqrt(_2121) * uintBitsToFloat(uvec4(_2087, _2088, _2089, texelFetch(g_SpotLightRenderingBuffer, int(((_1979 * 40u) + 4u) + 3u)).x)).w;
                                float _2135 = 1.39999997615814208984375 / (_2133 + 1.39999997615814208984375);
                                float _2136 = _2135 * _2135;
                                float _2139 = (fma(_1322, _2022.z, fma(_1321, _2022.y, _2022.x * _1320)) + _2022.w) / _2083;
                                float _2140 = (fma(_1322, _2037.z, fma(_1321, _2037.y, _2037.x * _1320)) + _2037.w) / _2083;
                                float _2144 = 1.0 - dot(vec2(_2139, _2140), vec2(_2139, _2140));
                                float _2629 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
                                float _2152 = dot(vec3(0.0), vec3((-0.0) - (_1320 * _1621), (-0.0) - (_1321 * _1621), (-0.0) - (_1322 * _1621)));
                                float _2640 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
                                float _2160 = ((1.0 - _2136) * dot(vec3(0.0), vec3(_2124 * _2118, _2124 * _2119, _2124 * _2120))) + _2136;
                                float _2651 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
                                float _2161 = isnan(1.0) ? _2651 : (isnan(_2651) ? 1.0 : min(_2651, 1.0));
                                float _2165 = (0.5 / (((isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0))) + 9.9999999392252902907785028219223e-09) + _2161)) * _2161;
                                float _2662 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
                                float _2172 = ((isnan(1.0) ? _2629 : (isnan(_2629) ? 1.0 : min(_2629, 1.0))) * (isnan(1.0) ? _2618 : (isnan(_2618) ? 1.0 : min(_2618, 1.0)))) * (((isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0))) * 3.1415927410125732421875) / (((_2133 * _2133) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2172 * _2007.x;
                                frontier_phi_87_pred_1 = _2172 * _2007.y;
                                frontier_phi_87_pred_2 = _2172 * _2007.z;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                            }
                            _2176 = frontier_phi_87_pred;
                            _2177 = frontier_phi_87_pred_1;
                            _2178 = frontier_phi_87_pred_2;
                            _1955 = _2176 + _1965;
                            _1956 = _2177 + _1966;
                            _1957 = _2178 + _1967;
                            if (_1969 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1965 = _1955;
                                _1966 = _1956;
                                _1967 = _1957;
                                _1968 = _1969;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _1955;
                        frontier_phi_81_pred_1 = _1957;
                        frontier_phi_81_pred_2 = _1956;
                    }
                    _1606 = frontier_phi_81_pred;
                    _1610 = frontier_phi_81_pred_1;
                    _1608 = frontier_phi_81_pred_2;
                    uint _1802 = _1801 + 1u;
                    if (_1802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1798 = _1606;
                        _1799 = _1608;
                        _1800 = _1610;
                        _1801 = _1802;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _1610;
                frontier_phi_56_57_ladder_1 = _1608;
                frontier_phi_56_57_ladder_2 = _1606;
            }
            else
            {
                frontier_phi_56_57_ladder = _1461;
                frontier_phi_56_57_ladder_1 = _1459;
                frontier_phi_56_57_ladder_2 = _1457;
            }
            _1605 = frontier_phi_56_57_ladder_2;
            _1607 = frontier_phi_56_57_ladder_1;
            _1609 = frontier_phi_56_57_ladder;
        }
        float _1614 = isnan(1.0) ? _465 : (isnan(_465) ? 1.0 : min(_465, 1.0));
        _1380 = ((_1605 * 0.039999999105930328369140625) * _1614) + _1261;
        _1382 = ((_1607 * 0.039999999105930328369140625) * _1614) + _1262;
        _1384 = ((_1609 * 0.039999999105930328369140625) * _1614) + _1263;
    }
    else
    {
        _1380 = _1261;
        _1382 = _1262;
        _1384 = _1263;
    }
    uint _1390 = _1131 + 9u;
    uint _1391 = _1390 + uint(cbMatDynParam._m0[0u].w);
    float _1406 = ((_396.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1391].x) + ((_1380 + ((isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))) * _889)) * cbPerFrame._m0[3u].x);
    float _1407 = ((_396.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1391].y) + ((_1382 + ((isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))) * _889)) * cbPerFrame._m0[3u].x);
    float _1408 = ((_396.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1391].z) + ((_1384 + ((isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))) * _889)) * cbPerFrame._m0[3u].x);
    float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
    float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
    float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
    uint _1412 = _1131 + 6u;
    float _1420 = _452 / cbSceneParam._m0[86u].x;
    float _1421 = _453 / cbSceneParam._m0[86u].y;
    vec4 _1435 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1420, _1421, (log2((isnan(cbSceneParam._m0[77u].w) ? _420 : (isnan(_420) ? cbSceneParam._m0[77u].w : min(_420, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1437 = _1435.x;
    float _1438 = _1435.y;
    float _1439 = _1435.z;
    float _1440 = _1435.w;
    float _1514;
    float _1516;
    float _1518;
    float _1520;
    if (_420 > cbSceneParam._m0[78u].w)
    {
        float _1476 = isnan(_420) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _420 : min(cbSceneParam._m0[80u].w, _420));
        float _1477 = _1476 / _420;
        float _1488 = _1477 * _245;
        float _1489 = _246 * _1477;
        float _1490 = (-0.0) - _1489;
        float _1491 = _1477 * _247;
        float _1493 = (cbSceneParam._m0[77u].w * _1490) / _1476;
        float _1494 = _1493 + cbSceneParam._m0[79u].w;
        float _1495 = cbSceneParam._m0[79u].w - _1489;
        float _1501 = sqrt(((_1488 * _1488) + (_1489 * _1489)) + (_1491 * _1491));
        float _1504 = (1.0 - (cbSceneParam._m0[77u].w / _1476)) * _1501;
        float _1510 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1512 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1729;
        if (abs((_1490 - _1493) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1729 = ((((_1494 > 0.0) ? exp2(_1510 * _1494) : (2.0 - exp2(_1512 * _1494))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1504;
        }
        else
        {
            float _1651 = 1.0 / cbSceneParam._m0[80u].x;
            float _1652 = isnan(_1495) ? _1494 : (isnan(_1494) ? _1495 : max(_1494, _1495));
            float _1653 = isnan(_1495) ? _1494 : (isnan(_1494) ? _1495 : min(_1494, _1495));
            float _1662 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : min(_1652, 0.0));
            float _1663 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : min(_1653, 0.0));
            _1729 = ((abs(_1501 / _1490) * cbSceneParam._m0[80u].y) * ((((_1662 - _1663) * 2.0) - ((exp2(_1510 * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)))) - exp2(_1510 * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))))) * _1651)) - ((exp2(_1512 * _1662) - exp2(_1512 * _1663)) * _1651))) + (_1504 * cbSceneParam._m0[80u].z);
        }
        vec4 _1731 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1420, _1421, 1.0), 0.0);
        float _1740 = exp2((_1729 * (-1.44269502162933349609375)) * (1.0 - _1731.w));
        float _1741 = log2(_1740);
        float _1757 = log2(_1440);
        _1514 = (exp2(_1757 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1741 * cbSceneParam._m0[78u].x)) * _1731.x) / cbSceneParam._m0[78u].x)) + _1437;
        _1516 = (exp2(_1757 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1741 * cbSceneParam._m0[78u].y)) * _1731.y) / cbSceneParam._m0[78u].y)) + _1438;
        _1518 = (exp2(_1757 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1741 * cbSceneParam._m0[78u].z)) * _1731.z) / cbSceneParam._m0[78u].z)) + _1439;
        _1520 = _1740 * _1440;
    }
    else
    {
        _1514 = _1437;
        _1516 = _1438;
        _1518 = _1439;
        _1520 = _1440;
    }
    bool _1767;
    vec4 _1530;
    vec4 _1553;
    float _1555;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    bool _1573;
    for (;;)
    {
        _1530 = cbMatDynParam._m0[0u];
        float _1532 = roundEven(_1530.y);
        bool _1533 = _1532 == 3.0;
        float _1535 = log2(_1520);
        float _1542 = exp2(_1535 * cbSceneParam._m0[78u].x) * _1409;
        float _1543 = exp2(_1535 * cbSceneParam._m0[78u].y) * _1410;
        float _1544 = exp2(_1535 * cbSceneParam._m0[78u].z) * _1411;
        float _1551 = _434 + (-0.5);
        _1553 = cbMtdParam._m0[1u];
        _1555 = _1553.y * _1551;
        float _1558 = (_1532 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1559 = _1558 * (_1533 ? _1542 : (_1542 + (cbSceneParam._m0[72u].w * _1514)));
        _1560 = _1558 * (_1533 ? _1543 : (_1543 + (cbSceneParam._m0[72u].w * _1516)));
        _1561 = _1558 * (_1533 ? _1544 : (_1544 + (cbSceneParam._m0[72u].w * _1518)));
        _1562 = _1551 * 0.999000012874603271484375;
        _1573 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1573)
        {
            if ((cbInstanceData._m0[_1131 + 7u].x + _1562) < 0.5)
            {
                _1767 = true;
                break;
            }
        }
        uint _1686 = _1390 + uint(_1530.w);
        if ((cbInstanceData._m0[_1686].w < 1.0) && ((cbInstanceData._m0[_1686].w + _1562) < 0.5))
        {
            _1767 = true;
            break;
        }
        if ((_1555 + 1.0) < _1553.x)
        {
            _1767 = true;
            break;
        }
        _1767 = false;
        break;
    }
    float _1925;
    if (_1767)
    {
        discard_state = true;
        _1925 = 0.0;
    }
    else
    {
        _1925 = cbInstanceData._m0[_1412].w;
    }
    SV_Target.x = _1559;
    SV_Target.y = _1560;
    SV_Target.z = _1561;
    SV_Target.w = _1925;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1412].w;
    discard_exit();
}


