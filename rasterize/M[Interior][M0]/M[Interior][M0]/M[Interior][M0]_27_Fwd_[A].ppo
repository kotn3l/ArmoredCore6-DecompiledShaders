#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _426;
float _3211;
float _3212;
float _3213;
float _3214;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _341 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _351 = (_341.y * 2.0) + (-1.0);
    float _357 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _364 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _373 = cbMtdParam._m0[23u].x + _261;
    float _374 = cbMtdParam._m0[23u].y + _262;
    float _375 = cbMtdParam._m0[23u].z + _263;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_357 * _190, _357 * _191, _357 * _192));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_364 * _204, _364 * _205, _364 * _206));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _395 * _391;
    float _401 = ((cbMtdParam._m0[19u].w * _389) * _395) + (_349 * cbMtdParam._m0[20u].y);
    float _402 = ((cbMtdParam._m0[20u].x * _390) * _395) + (_351 * cbMtdParam._m0[20u].z);
    float _405 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _406 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _424;
    float _427;
    float _429;
    if (_401 > 0.0)
    {
        float _410 = (1.0 - _405) / _401;
        _424 = _410;
        _427 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_410 * _396)) * 0.16666667163372039794921875;
        _429 = (fract((_410 * _402) + _406) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_401 < 0.0)
        {
            float _425 = ((-0.0) - _405) / _401;
            frontier_phi_3_2_ladder = _425;
            frontier_phi_3_2_ladder_1 = (fract((_425 * _402) + _406) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_425 * _396) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _426;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _424 = frontier_phi_3_2_ladder;
        _427 = frontier_phi_3_2_ladder_2;
        _429 = frontier_phi_3_2_ladder_1;
    }
    float _455;
    float _457;
    float _459;
    if (_402 > 0.0)
    {
        float _442 = (1.0 - _406) / _402;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_442 < _424)
        {
            frontier_phi_8_5_ladder = (fract(_442 * _396) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_442 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _442;
        }
        else
        {
            frontier_phi_8_5_ladder = _429;
            frontier_phi_8_5_ladder_1 = _427;
            frontier_phi_8_5_ladder_2 = _424;
        }
        _455 = frontier_phi_8_5_ladder_2;
        _457 = frontier_phi_8_5_ladder_1;
        _459 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_402 < 0.0)
        {
            float _456 = ((-0.0) - _406) / _402;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_456 < _424)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_456 * _396) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_456 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _456;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _429;
                frontier_phi_8_6_ladder_9_ladder_1 = _427;
                frontier_phi_8_6_ladder_9_ladder_2 = _424;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _429;
            frontier_phi_8_6_ladder_1 = _427;
            frontier_phi_8_6_ladder_2 = _424;
        }
        _455 = frontier_phi_8_6_ladder_2;
        _457 = frontier_phi_8_6_ladder_1;
        _459 = frontier_phi_8_6_ladder;
    }
    float _463 = (_396 > 0.0) ? (cbMtdParam._m0[16u].w / _396) : 5000.0;
    float _476;
    float _477;
    if (_463 < _455)
    {
        _476 = ((_405 + cbMtdParam._m0[17u].x) + (_463 * _401)) * 0.16666667163372039794921875;
        _477 = (((_463 * _402) + _406) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _476 = _457;
        _477 = _459;
    }
    vec4 _479 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_476, _477));
    float _484 = _479.x * cbMtdParam._m0[13u].x;
    float _485 = _479.y * cbMtdParam._m0[13u].y;
    float _486 = _479.z * cbMtdParam._m0[13u].z;
    float _491 = 0.5 - (_288 * 0.5);
    float _501 = (((_484 - _301) - (_484 * _288)) * _491) + _301;
    float _502 = (((_485 - _303) - (_485 * _288)) * _491) + _303;
    float _503 = (((_486 - _305) - (_486 * _288)) * _491) + _305;
    vec4 _515 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _519 = _515.z;
    float _522 = (_515.x * 2.0) + (-1.0);
    float _523 = (_515.y * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3223 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))));
    float _530 = _519 * _288;
    float _540 = (cbMtdParam._m0[15u].w * ((_345 - _530) + ((_519 - _345) * _288))) + _530;
    float _548 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _288))) + _522;
    float _549 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _288))) + _523;
    float _552 = fma(_529, _197, fma(_549, _204, _548 * _190));
    float _555 = fma(_529, _198, fma(_549, _205, _548 * _191));
    float _558 = fma(_529, _199, fma(_549, _206, _548 * _192));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3234 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _566 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _3245 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3256 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3267 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _589 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _590 = _261 * _589;
    float _591 = _262 * _589;
    float _592 = _263 * _589;
    vec4 _597 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _599 = _597.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _761 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _767 = (cbMatDynParam._m0[5u].x * _761) + cbMatDynParam._m0[5u].y;
        float _3278 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _772 = (cbMatDynParam._m0[5u].z * _761) + cbMatDynParam._m0[5u].w;
        float _3289 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) - _768)) + _768) < ((_599 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _640 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _643 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    uint _656 = uint(roundEven(NORMAL.w)) * 13u;
    uint _657 = _656 + 9u;
    uint _658 = _657 + uint(cbMatDynParam._m0[0u].w);
    float _664 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * cbInstanceData._m0[_658].x;
    float _665 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_658].y;
    float _666 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_658].z;
    float _3300 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _3311 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _681 = _678.x * TEXCOORD.z;
    float _682 = dot(vec3(_563, _564, _565), vec3(_590, _591, _592));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _563) - _590;
    float _690 = (_685 * _564) - _591;
    float _691 = (_685 * _565) - _592;
    float _695 = abs(dot(vec3(_590, _591, _592), vec3(_563, _564, _565)));
    float _3333 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_566);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _810 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _814 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _838 = _742 + _563;
        float _839 = _746 + _564;
        float _840 = _750 + _565;
        float _850 = fma(_840, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838)) - _806;
        float _851 = fma(_840, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838)) - _810;
        float _852 = fma(_840, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838)) - _814;
        float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
        float _869 = ((_856 * _850) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_856 * _851) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_856 * _852) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        float _908 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_874.x + (-0.5));
        float _910 = _908 * (_874.y + (-0.5));
        float _911 = _908 * (_874.z + (-0.5));
        float _918 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_881.x + (-0.5));
        float _920 = _918 * (_881.y + (-0.5));
        float _921 = _918 * (_881.z + (-0.5));
        float _928 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_888.x + (-0.5));
        float _930 = _928 * (_888.y + (-0.5));
        float _931 = _928 * (_888.z + (-0.5));
        float _938 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_895.x + (-0.5));
        float _940 = _938 * (_895.y + (-0.5));
        float _941 = _938 * (_895.z + (-0.5));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = _909 * 0.5;
        float _946 = _919 * 0.5;
        float _947 = _929 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _962 = (dot(vec3(_563, _564, _565), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _972 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3381 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_974 + 1.0))) + _979) * _942;
        float _989 = _910 * 0.5;
        float _990 = _920 * 0.5;
        float _991 = _930 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_563, _564, _565), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3414 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_1016 + 1.0))) + _1021) * _943;
        float _1031 = _911 * 0.5;
        float _1032 = _921 * 0.5;
        float _1033 = _931 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_563, _564, _565), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3447 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_1058 + 1.0))) + _1063) * _944;
        _1080 = _911;
        _1081 = _910;
        _1082 = _909;
        _1083 = _921;
        _1084 = _920;
        _1085 = _919;
        _1086 = _931;
        _1087 = _930;
        _1088 = _929;
        _1089 = _944;
        _1090 = _943;
        _1091 = _942;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _426;
        _1081 = _426;
        _1082 = _426;
        _1083 = _426;
        _1084 = _426;
        _1085 = _426;
        _1086 = _426;
        _1087 = _426;
        _1088 = _426;
        _1089 = _426;
        _1090 = _426;
        _1091 = _426;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1127 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1131 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1154 = _742 + _563;
        float _1155 = _746 + _564;
        float _1156 = _750 + _565;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_563, _564, _565), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3510 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_563, _564, _565), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3543 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_563, _564, _565), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3576 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _426;
        _1393 = _426;
        _1394 = _426;
        _1395 = _426;
        _1396 = _426;
        _1397 = _426;
        _1398 = _426;
        _1399 = _426;
        _1400 = _426;
        _1401 = _426;
        _1402 = _426;
        _1403 = _426;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _689 * 0.5;
    float _1461 = _690 * 0.5;
    float _1462 = _691 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _566);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1577 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1581 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1585 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1588 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1591 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1594 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1622;
        if (_1588 > 0.0)
        {
            _1622 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1622 = frontier_phi_29_27_ladder;
        }
        float _1971;
        if (_1591 > 0.0)
        {
            _1971 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1971 = frontier_phi_38_34_ladder;
        }
        float _2279;
        if (_1594 > 0.0)
        {
            _2279 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2279 = frontier_phi_52_45_ladder;
        }
        float _2281 = isnan(_1971) ? _1622 : (isnan(_1622) ? _1971 : min(_1622, _1971));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1588) + _1577;
        float _2287 = (_2282 * _1591) + _1581;
        float _2288 = (_2282 * _1594) + _1585;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2289;
        float _2292 = _2289 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2288 > _2292) || ((_2288 < _2290) || ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 < _2290) || (_2286 > _2292))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_28_52_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1610 = frontier_phi_28_52_ladder_2;
        _1612 = frontier_phi_28_52_ladder_1;
        _1614 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1529);
        _1610 = _1598.x * cbModelParam._m0[1u].y;
        _1612 = _1598.y * cbModelParam._m0[1u].y;
        _1614 = _1598.z * cbModelParam._m0[1u].y;
    }
    float _1618 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _566);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1618 : min(cbModelParam._m0[25u].w, _1618));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1674 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1678 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1682 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1685 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1688 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1691 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1976;
        if (_1685 > 0.0)
        {
            _1976 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1976 = frontier_phi_40_36_ladder;
        }
        float _2305;
        if (_1688 > 0.0)
        {
            _2305 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2305 = frontier_phi_54_47_ladder;
        }
        float _2495;
        if (_1691 > 0.0)
        {
            _2495 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2495 = frontier_phi_72_65_ladder;
        }
        float _2497 = isnan(_2305) ? _1976 : (isnan(_1976) ? _2305 : min(_1976, _2305));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _1685) + _1674;
        float _2503 = (_2498 * _1688) + _1678;
        float _2504 = (_2498 * _1691) + _1682;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2505;
        float _2508 = _2505 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2504 > _2508) || ((_2504 < _2506) || ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 < _2506) || (_2502 > _2508))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2504, cbModelParam._m0[17u].z, fma(_2503, cbModelParam._m0[17u].y, _2502 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2504, cbModelParam._m0[18u].z, fma(_2503, cbModelParam._m0[18u].y, _2502 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2504, cbModelParam._m0[19u].z, fma(_2503, cbModelParam._m0[19u].y, _2502 * cbModelParam._m0[19u].x))), _1619);
            frontier_phi_37_72_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1710 = frontier_phi_37_72_ladder_2;
        _1712 = frontier_phi_37_72_ladder_1;
        _1714 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1619);
        _1710 = _1694.x * cbModelParam._m0[1u].z;
        _1712 = _1694.y * cbModelParam._m0[1u].z;
        _1714 = _1694.z * cbModelParam._m0[1u].z;
    }
    float _1726 = ((((1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_710 * _697)) * _681;
    float _1727 = _1726 * ((cbModelParam._m0[1u].w * (_1710 - _1610)) + _1610);
    float _1728 = _1726 * ((cbModelParam._m0[1u].w * (_1712 - _1612)) + _1612);
    float _1729 = _1726 * ((cbModelParam._m0[1u].w * (_1714 - _1614)) + _1614);
    float _1732 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, _1727 * cbSceneParam._m0[91u].x));
    uvec4 _1748 = floatBitsToUint(cbInstanceData._m0[_656 + 5u]);
    uint _1750 = _1748.x * 14u;
    uint _1751 = _1750 + 13u;
    float _1756 = _681 + (-1.0);
    float _1759 = (cbLight._m0[_1751].x * _1756) + 1.0;
    float _1760 = (cbLight._m0[_1751].y * _1756) + 1.0;
    uint _1761 = _1750 + 5u;
    float _1767 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1771 = _1750 + 4u;
    float _1778 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1782 = _1750 | 1u;
    float _1793 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_563, _564, _565));
    float _1796 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_563, _564, _565));
    float _3712 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _3723 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1801 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1803 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1810 = ((cbLight._m0[_1761].x * _1767) * _1803) + ((cbLight._m0[_1771].x * _1778) * _1801);
    float _1811 = ((_1767 * cbLight._m0[_1761].y) * _1803) + ((_1778 * cbLight._m0[_1771].y) * _1801);
    float _1812 = ((_1767 * cbLight._m0[_1761].z) * _1803) + ((_1778 * cbLight._m0[_1771].z) * _1801);
    uint _1814 = _1750 + 8u;
    float _1827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _566) * 0.949999988079071044921875);
    float _1828 = _1827 * _1827;
    float _1829 = cbLight._m0[_1750].x + _590;
    float _1830 = cbLight._m0[_1750].y + _591;
    float _1831 = cbLight._m0[_1750].z + _592;
    float _1835 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
    float _1836 = _1835 * _1829;
    float _1837 = _1835 * _1830;
    float _1838 = _1835 * _1831;
    float _1839 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1750].xyz));
    float _3734 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1843 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _1844 = dot(vec3(_563, _564, _565), vec3(_1836, _1837, _1838));
    float _3756 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1836, _1837, _1838));
    float _3767 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1828 * _1828;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1867 = (exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1868 = 1.0 - _1828;
    float _1879 = (0.5 / (((_1843 * ((_1842 * _1868) + _1828)) + 9.9999999392252902907785028219223e-09) + (((_1843 * _1868) + _1828) * _1842))) * _1842;
    float _3778 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    uint _1892 = _1750 + 9u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _566) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1782].x + _590;
    float _1906 = cbLight._m0[_1782].y + _591;
    float _1907 = cbLight._m0[_1782].z + _592;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1782].xyz));
    float _3789 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1919 = dot(vec3(_563, _564, _565), vec3(_1912, _1913, _1914));
    float _3800 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1912, _1913, _1914));
    float _3811 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1904 * _1904;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1940 = (exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1941 = 1.0 - _1904;
    float _1951 = (0.5 / (((_1843 * ((_1918 * _1941) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1843 * _1941) + _1904) * _1918))) * _1918;
    float _3822 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1953 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    float _1963 = (((_1940 * cbLight._m0[_1892].x) * _1953) * _1767) + (((_1867 * cbLight._m0[_1814].x) * _1881) * _1778);
    float _1964 = (((_1940 * cbLight._m0[_1892].y) * _1953) * _1767) + (((_1867 * cbLight._m0[_1814].y) * _1881) * _1778);
    float _1965 = (((_1940 * cbLight._m0[_1892].z) * _1953) * _1767) + (((_1867 * cbLight._m0[_1814].z) * _1881) * _1778);
    float _2080;
    float _2082;
    float _2084;
    float _2086;
    float _2088;
    float _2090;
    if (_1748.y == 0u)
    {
        float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2021 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2020;
        float _2022 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2020;
        float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2020;
        uvec4 _2035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2036 = _2035.x;
        uint _2047 = uint((float(_2035.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2036))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2036)));
        float _2057 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2058 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        uint _2061 = uint(isnan(14.0) ? _2058 : (isnan(_2058) ? 14.0 : min(_2058, 14.0)));
        uvec4 _2066 = texelFetch(g_lightClusterGridBuffer, int(((_2061 << 2u) + (_2047 << 6u)) >> 2u));
        uint _2067 = _2066.x;
        uint _2068 = _2035.z;
        float _2158;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        if (((((1u << ((_2068 >> 4u) & 15u)) + 4294967295u) & _2067) == 0u) || ((_2068 & 240u) == 0u))
        {
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
        }
        else
        {
            float _2159;
            float _2161;
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2342 = 0.0;
            float _2343 = 0.0;
            float _2344 = 0.0;
            float _2345 = 0.0;
            float _2346 = 0.0;
            float _2347 = 0.0;
            uint _2348 = 0u;
            uint _2357;
            bool _2358;
            for (;;)
            {
                _2357 = texelFetch(g_lightClassification, int((((_2061 << 5u) + (_2047 << 9u)) + (_2348 << 2u)) >> 2u)).x;
                _2358 = _2357 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2358)
                {
                    frontier_phi_67_pred = _2345;
                    frontier_phi_67_pred_1 = _2344;
                    frontier_phi_67_pred_2 = _2343;
                    frontier_phi_67_pred_3 = _2342;
                    frontier_phi_67_pred_4 = _2346;
                    frontier_phi_67_pred_5 = _2347;
                }
                else
                {
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    uint _2544;
                    _2538 = _2342;
                    _2539 = _2343;
                    _2540 = _2344;
                    _2541 = _2345;
                    _2542 = _2346;
                    _2543 = _2347;
                    _2544 = _2357;
                    float _2439;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    for (;;)
                    {
                        uint _2548 = uint(findLSB(_2544)) + (_2348 << 5u);
                        uint _2545 = (_2544 + 4294967295u) & _2544;
                        uint _2550 = _2548 * 48u;
                        vec4 _2564 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 3u)).x));
                        uint _2570 = (_2548 * 48u) + 4u;
                        vec4 _2583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 3u)).x));
                        uint _2589 = (_2548 * 48u) + 8u;
                        vec3 _2600 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2589)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 2u)).x));
                        float _2604 = _2564.x - _2021;
                        float _2605 = _2564.y - _2022;
                        float _2606 = _2564.z - _2023;
                        float _2607 = dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606));
                        float _2610 = inversesqrt(_2607);
                        float _2611 = _2610 * _2604;
                        float _2612 = _2610 * _2605;
                        float _2613 = _2610 * _2606;
                        float _2614 = dot(vec3(_637, _640, _643), vec3(_2611, _2612, _2613));
                        float _2619 = 1.0 - (_2607 * _2564.w);
                        float _3843 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                        float _2620 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
                        float _2621 = sqrt(_2607) * _2583.w;
                        float _2624 = 1.39999997615814208984375 / (_2621 + 1.39999997615814208984375);
                        float _2625 = _2624 * _2624;
                        float _2628 = ((1.0 - _2625) * _2614) + _2625;
                        float _2631 = _2621 * _2621;
                        float _2635 = ((isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0))) * _2620) / ((_2631 * 0.699999988079071044921875) + 1.0);
                        float _2639 = (-0.0) - _2021;
                        float _2640 = (-0.0) - _2022;
                        float _2641 = (-0.0) - _2023;
                        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
                        float _2646 = _2645 * _2639;
                        float _2647 = _2645 * _2640;
                        float _2648 = _2645 * _2641;
                        float _2656 = exp2(log2(1.0 / ((_2631 * 3.5) + 5.0)) * 0.25);
                        float _2657 = 1.0 - _697;
                        float _2664 = sqrt(1.0 - ((1.0 - (_2657 * _2657)) * (1.0 - (_2656 * _2656))));
                        float _2665 = _2664 * _2664;
                        float _2666 = _2665 * _2665;
                        float _2667 = _2646 + _2611;
                        float _2668 = _2647 + _2612;
                        float _2669 = _2648 + _2613;
                        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
                        float _2677 = dot(vec3(_637, _640, _643), vec3(_2646, _2647, _2648));
                        float _3859 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2680 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
                        float _2681 = dot(vec3(_637, _640, _643), vec3(_2673 * _2667, _2673 * _2668, _2673 * _2669));
                        float _3870 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2684 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                        float _2688 = ((_2684 * _2684) * (_2666 + (-1.0))) + 1.0;
                        float _2689 = _2624 * _2665;
                        float _2690 = _2689 * _2689;
                        float _2693 = ((1.0 - _2690) * _2614) + _2690;
                        float _3881 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2694 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                        float _2695 = 1.0 - _2665;
                        float _2705 = (0.5 / (((_2694 * ((_2680 * _2695) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2694 * _2695) + _2665) * _2680))) * _2694;
                        float _3892 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2716 = (((_2666 * 3.1415927410125732421875) * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) / ((_2688 * _2688) * ((_2631 * 2.1991131305694580078125) + 3.141590118408203125))) * _2620;
                        _2442 = (_2635 * _2583.x) + _2541;
                        _2443 = (_2635 * _2583.y) + _2542;
                        _2444 = (_2635 * _2583.z) + _2543;
                        _2439 = (_2716 * _2600.x) + _2538;
                        _2440 = (_2716 * _2600.y) + _2539;
                        _2441 = (_2716 * _2600.z) + _2540;
                        if (_2545 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2538 = _2439;
                            _2539 = _2440;
                            _2540 = _2441;
                            _2541 = _2442;
                            _2542 = _2443;
                            _2543 = _2444;
                            _2544 = _2545;
                        }
                    }
                    frontier_phi_67_pred = _2442;
                    frontier_phi_67_pred_1 = _2441;
                    frontier_phi_67_pred_2 = _2440;
                    frontier_phi_67_pred_3 = _2439;
                    frontier_phi_67_pred_4 = _2443;
                    frontier_phi_67_pred_5 = _2444;
                }
                _2165 = frontier_phi_67_pred;
                _2163 = frontier_phi_67_pred_1;
                _2161 = frontier_phi_67_pred_2;
                _2159 = frontier_phi_67_pred_3;
                _2167 = frontier_phi_67_pred_4;
                _2169 = frontier_phi_67_pred_5;
                uint _2349 = _2348 + 1u;
                if (_2349 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2342 = _2159;
                    _2343 = _2161;
                    _2344 = _2163;
                    _2345 = _2165;
                    _2346 = _2167;
                    _2347 = _2169;
                    _2348 = _2349;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
        }
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.z;
        uint _2175 = (_2173 >> 8u) & 15u;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        float _2320;
        if (((4294967295u << _2175) & _2067) == 0u)
        {
            _2310 = _2158;
            _2312 = _2160;
            _2314 = _2162;
            _2316 = _2164;
            _2318 = _2166;
            _2320 = _2168;
        }
        else
        {
            float _2335 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float _2336 = _2335 * _2021;
            float _2337 = _2335 * _2022;
            float _2338 = _2335 * _2023;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2175 < ((_2173 >> 12u) & 15u))
            {
                float _2311;
                float _2313;
                float _2315;
                float _2317;
                float _2319;
                float _2321;
                float _2521 = _2158;
                float _2522 = _2160;
                float _2523 = _2162;
                float _2524 = _2164;
                float _2525 = _2166;
                float _2526 = _2168;
                uint _2527 = _2175;
                uint _2536;
                bool _2537;
                for (;;)
                {
                    _2536 = texelFetch(g_lightClassification, int((((_2061 << 5u) + (_2047 << 9u)) + (_2527 << 2u)) >> 2u)).x;
                    _2537 = _2536 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2537)
                    {
                        frontier_phi_81_pred = _2524;
                        frontier_phi_81_pred_1 = _2523;
                        frontier_phi_81_pred_2 = _2522;
                        frontier_phi_81_pred_3 = _2521;
                        frontier_phi_81_pred_4 = _2526;
                        frontier_phi_81_pred_5 = _2525;
                    }
                    else
                    {
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _2764 = _2521;
                        float _2765 = _2522;
                        float _2766 = _2523;
                        float _2767 = _2524;
                        float _2768 = _2525;
                        float _2769 = _2526;
                        uint _2770 = _2536;
                        uint _2771;
                        vec4 _2796;
                        float _2797;
                        vec4 _2812;
                        vec3 _2824;
                        vec4 _2839;
                        vec4 _2854;
                        float _2900;
                        bool _2901;
                        for (;;)
                        {
                            uint _2781 = ((_2527 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2770));
                            _2771 = (_2770 + 4294967295u) & _2770;
                            uint _2783 = _2781 * 40u;
                            _2796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 3u)).x));
                            _2797 = _2796.w;
                            uint _2799 = (_2781 * 40u) + 4u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            uint _2814 = (_2781 * 40u) + 8u;
                            _2824 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x));
                            uint _2826 = (_2781 * 40u) + 16u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2841 = (_2781 * 40u) + 20u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2781 * 40u) + 24u;
                            vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2875 = (_2781 * 40u) + 28u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            _2900 = fma(_2023, _2888.z, fma(_2022, _2888.y, _2888.x * _2021)) + _2888.w;
                            _2901 = !((fma(_2023, _2869.z, fma(_2022, _2869.y, _2869.x * _2021)) + _2869.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2901)
                            {
                                float _2928 = _2796.x - _2021;
                                float _2929 = _2796.y - _2022;
                                float _2930 = _2796.z - _2023;
                                float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                                float _2934 = inversesqrt(_2931);
                                float _2935 = _2934 * _2928;
                                float _2936 = _2934 * _2929;
                                float _2937 = _2934 * _2930;
                                float _2941 = 1.0 - (_2931 / (_2797 * _2797));
                                float _3903 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2942 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                                float _2946 = sqrt(_2931) * _2812.w;
                                float _2948 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                                float _2949 = _2948 * _2948;
                                float _2952 = ((1.0 - _2949) * dot(vec3(_2935, _2936, _2937), vec3(_637, _640, _643))) + _2949;
                                float _2955 = _2946 * _2946;
                                float _2959 = (fma(_2023, _2839.z, fma(_2022, _2839.y, _2839.x * _2021)) + _2839.w) / _2900;
                                float _2960 = (fma(_2023, _2854.z, fma(_2022, _2854.y, _2854.x * _2021)) + _2854.w) / _2900;
                                float _2964 = 1.0 - dot(vec2(_2959, _2960), vec2(_2959, _2960));
                                float _3919 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2965 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                                float _2966 = _2965 * (((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2942) / ((_2955 * 0.699999988079071044921875) + 1.0));
                                float _2978 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                                float _2979 = 1.0 - _697;
                                float _2986 = sqrt(1.0 - ((1.0 - (_2979 * _2979)) * (1.0 - (_2978 * _2978))));
                                float _2987 = _2986 * _2986;
                                float _2988 = _2987 * _2987;
                                float _2989 = _2935 - _2336;
                                float _2990 = _2936 - _2337;
                                float _2991 = _2937 - _2338;
                                float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                                float _2999 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2336, (-0.0) - _2337, (-0.0) - _2338));
                                float _3930 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3002 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _3003 = dot(vec3(_637, _640, _643), vec3(_2995 * _2989, _2995 * _2990, _2995 * _2991));
                                float _3941 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3006 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _3010 = ((_3006 * _3006) * (_2988 + (-1.0))) + 1.0;
                                float _3011 = _2948 * _2987;
                                float _3012 = _3011 * _3011;
                                float _3018 = ((1.0 - _3012) * dot(vec3(_637, _640, _643), vec3(_2935, _2936, _2937))) + _3012;
                                float _3952 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _3020 = 1.0 - _2987;
                                float _3030 = (0.5 / (((_3019 * ((_3002 * _3020) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2987) * _3002))) * _3019;
                                float _3963 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3040 = (_2965 * _2942) * (((_2988 * 3.1415927410125732421875) * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) / ((_3010 * _3010) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2966 * _2812.x;
                                frontier_phi_87_pred_1 = _3040 * _2824.z;
                                frontier_phi_87_pred_2 = _3040 * _2824.y;
                                frontier_phi_87_pred_3 = _3040 * _2824.x;
                                frontier_phi_87_pred_4 = _2966 * _2812.z;
                                frontier_phi_87_pred_5 = _2966 * _2812.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3047 = frontier_phi_87_pred;
                            _3046 = frontier_phi_87_pred_1;
                            _3045 = frontier_phi_87_pred_2;
                            _3044 = frontier_phi_87_pred_3;
                            _3049 = frontier_phi_87_pred_4;
                            _3048 = frontier_phi_87_pred_5;
                            _2754 = _3047 + _2767;
                            _2755 = _3048 + _2768;
                            _2756 = _3049 + _2769;
                            _2751 = _3044 + _2764;
                            _2752 = _3045 + _2765;
                            _2753 = _3046 + _2766;
                            if (_2771 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2771;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2754;
                        frontier_phi_81_pred_1 = _2753;
                        frontier_phi_81_pred_2 = _2752;
                        frontier_phi_81_pred_3 = _2751;
                        frontier_phi_81_pred_4 = _2756;
                        frontier_phi_81_pred_5 = _2755;
                    }
                    _2317 = frontier_phi_81_pred;
                    _2315 = frontier_phi_81_pred_1;
                    _2313 = frontier_phi_81_pred_2;
                    _2311 = frontier_phi_81_pred_3;
                    _2321 = frontier_phi_81_pred_4;
                    _2319 = frontier_phi_81_pred_5;
                    uint _2528 = _2527 + 1u;
                    if (_2528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2521 = _2311;
                        _2522 = _2313;
                        _2523 = _2315;
                        _2524 = _2317;
                        _2525 = _2319;
                        _2526 = _2321;
                        _2527 = _2528;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2321;
                frontier_phi_56_57_ladder_1 = _2319;
                frontier_phi_56_57_ladder_2 = _2317;
                frontier_phi_56_57_ladder_3 = _2313;
                frontier_phi_56_57_ladder_4 = _2311;
                frontier_phi_56_57_ladder_5 = _2315;
            }
            else
            {
                frontier_phi_56_57_ladder = _2168;
                frontier_phi_56_57_ladder_1 = _2166;
                frontier_phi_56_57_ladder_2 = _2164;
                frontier_phi_56_57_ladder_3 = _2160;
                frontier_phi_56_57_ladder_4 = _2158;
                frontier_phi_56_57_ladder_5 = _2162;
            }
            _2310 = frontier_phi_56_57_ladder_4;
            _2312 = frontier_phi_56_57_ladder_3;
            _2314 = frontier_phi_56_57_ladder_5;
            _2316 = frontier_phi_56_57_ladder_2;
            _2318 = frontier_phi_56_57_ladder_1;
            _2320 = frontier_phi_56_57_ladder;
        }
        float _2325 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2080 = (_2325 * _2316) + _1810;
        _2082 = (_2325 * _2318) + _1811;
        _2084 = (_2325 * _2320) + _1812;
        _2086 = ((_2310 * 0.039999999105930328369140625) * _2325) + _1963;
        _2088 = ((_2312 * 0.039999999105930328369140625) * _2325) + _1964;
        _2090 = ((_2314 * 0.039999999105930328369140625) * _2325) + _1965;
    }
    else
    {
        _2080 = _1810;
        _2082 = _1811;
        _2084 = _1812;
        _2086 = _1963;
        _2088 = _1964;
        _2090 = _1965;
    }
    float _3979 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3990 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4001 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _2107 = ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2080 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _681))) + ((_2086 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2108 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2082 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _681))) + ((_2088 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2109 = ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2084 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _681))) + ((_2090 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2110 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    uint _2113 = _656 + 6u;
    float _2121 = _617 / cbSceneParam._m0[86u].x;
    float _2122 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2136 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2121, _2122, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2138 = _2136.x;
    float _2139 = _2136.y;
    float _2140 = _2136.z;
    float _2141 = _2136.w;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2183 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2184 = _2183 / _585;
        float _2195 = _2184 * _261;
        float _2196 = _262 * _2184;
        float _2197 = (-0.0) - _2196;
        float _2198 = _2184 * _263;
        float _2200 = (cbSceneParam._m0[77u].w * _2197) / _2183;
        float _2201 = _2200 + cbSceneParam._m0[79u].w;
        float _2202 = cbSceneParam._m0[79u].w - _2196;
        float _2208 = sqrt(((_2195 * _2195) + (_2196 * _2196)) + (_2198 * _2198));
        float _2211 = (1.0 - (cbSceneParam._m0[77u].w / _2183)) * _2208;
        float _2217 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2219 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2452;
        if (abs((_2197 - _2200) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2452 = ((((_2201 > 0.0) ? exp2(_2217 * _2201) : (2.0 - exp2(_2219 * _2201))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2211;
        }
        else
        {
            float _2371 = 1.0 / cbSceneParam._m0[80u].x;
            float _2372 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : max(_2201, _2202));
            float _2373 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : min(_2201, _2202));
            float _2382 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : min(_2372, 0.0));
            float _2383 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : min(_2373, 0.0));
            _2452 = ((abs(_2208 / _2197) * cbSceneParam._m0[80u].y) * ((((_2382 - _2383) * 2.0) - ((exp2(_2217 * (isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0)))) - exp2(_2217 * (isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0))))) * _2371)) - ((exp2(_2219 * _2382) - exp2(_2219 * _2383)) * _2371))) + (_2211 * cbSceneParam._m0[80u].z);
        }
        vec4 _2454 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2121, _2122, 1.0), 0.0);
        float _2463 = exp2((_2452 * (-1.44269502162933349609375)) * (1.0 - _2454.w));
        float _2464 = log2(_2463);
        float _2480 = log2(_2141);
        _2221 = (exp2(_2480 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].x)) * _2454.x) / cbSceneParam._m0[78u].x)) + _2138;
        _2223 = (exp2(_2480 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].y)) * _2454.y) / cbSceneParam._m0[78u].y)) + _2139;
        _2225 = (exp2(_2480 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].z)) * _2454.z) / cbSceneParam._m0[78u].z)) + _2140;
        _2227 = _2463 * _2141;
    }
    else
    {
        _2221 = _2138;
        _2223 = _2139;
        _2225 = _2140;
        _2227 = _2141;
    }
    bool _2490;
    vec4 _2237;
    vec4 _2259;
    float _2261;
    float _2265;
    float _2266;
    float _2267;
    float _2268;
    bool _2278;
    for (;;)
    {
        _2237 = cbMatDynParam._m0[0u];
        float _2239 = roundEven(_2237.y);
        bool _2240 = _2239 == 3.0;
        float _2241 = log2(_2227);
        float _2248 = exp2(_2241 * cbSceneParam._m0[78u].x) * _2110;
        float _2249 = exp2(_2241 * cbSceneParam._m0[78u].y) * _2111;
        float _2250 = exp2(_2241 * cbSceneParam._m0[78u].z) * _2112;
        float _2257 = _599 + (-0.5);
        _2259 = cbMtdParam._m0[1u];
        _2261 = _2259.y * _2257;
        float _2264 = (_2239 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2265 = _2264 * (_2240 ? _2248 : (_2248 + (cbSceneParam._m0[72u].w * _2221)));
        _2266 = _2264 * (_2240 ? _2249 : (_2249 + (cbSceneParam._m0[72u].w * _2223)));
        _2267 = _2264 * (_2240 ? _2250 : (_2250 + (cbSceneParam._m0[72u].w * _2225)));
        _2268 = _2257 * 0.999000012874603271484375;
        _2278 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2278)
        {
            if ((cbInstanceData._m0[_656 + 7u].x + _2268) < 0.5)
            {
                _2490 = true;
                break;
            }
        }
        uint _2406 = _657 + uint(_2237.w);
        if ((cbInstanceData._m0[_2406].w < 1.0) && ((cbInstanceData._m0[_2406].w + _2268) < 0.5))
        {
            _2490 = true;
            break;
        }
        if ((_2261 + 1.0) < _2259.x)
        {
            _2490 = true;
            break;
        }
        _2490 = false;
        break;
    }
    float _2721;
    if (_2490)
    {
        discard_state = true;
        _2721 = 0.0;
    }
    else
    {
        _2721 = cbInstanceData._m0[_2113].w;
    }
    SV_Target.x = _2265;
    SV_Target.y = _2266;
    SV_Target.z = _2267;
    SV_Target.w = _2721;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2113].w;
    discard_exit();
}


