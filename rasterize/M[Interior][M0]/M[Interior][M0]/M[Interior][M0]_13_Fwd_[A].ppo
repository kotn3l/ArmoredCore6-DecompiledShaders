#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1048;
float _3025;
float _3026;
float _3027;
float _3028;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    float _285 = cbMtdParam._m0[22u].y + _257;
    float _286 = cbMtdParam._m0[22u].z + _258;
    float _287 = cbMtdParam._m0[22u].w + _259;
    float _301 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _302 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_199 * TANGENT.x, _199 * TANGENT.y, _199 * TANGENT.z));
    float _303 = (-0.0) - dot(vec3(_285, _286, _287), vec3((-0.0) - (_192 * NORMAL.x), (-0.0) - (_192 * NORMAL.y), (-0.0) - (_192 * NORMAL.z)));
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _307 * _303;
    float _310 = (cbMtdParam._m0[19u].x * _301) * _307;
    float _312 = (cbMtdParam._m0[18u].w * _302) * _307;
    float _313 = fract(TEXCOORD.x);
    float _314 = fract(TEXCOORD.y);
    float _320;
    if (_310 > 0.0)
    {
        _320 = (1.0 - _313) / _310;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _313) / _310;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _320 = frontier_phi_3_2_ladder;
    }
    float _328;
    if (_312 > 0.0)
    {
        _328 = (1.0 - _314) / _312;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _314) / _312;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _328 = frontier_phi_7_6_ladder;
    }
    bool _330 = _308 > 0.0;
    float _332 = _330 ? (cbMtdParam._m0[15u].x / _308) : 5000.0;
    float _333 = isnan(_328) ? _320 : (isnan(_320) ? _328 : min(_320, _328));
    float _334 = isnan(_332) ? _333 : (isnan(_333) ? _332 : min(_333, _332));
    float _338 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _339 = _313 + (-0.5);
    float _342 = _314 + (-0.5);
    float _345 = ((_334 * _308) + _338) / _338;
    vec4 _371 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_339 + (_334 * _310)) / _345) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_342 + (_334 * _312)) / _345) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _382 = cbMtdParam._m0[9u].x * _371.x;
    float _383 = cbMtdParam._m0[9u].y * _371.y;
    float _384 = cbMtdParam._m0[9u].z * _371.z;
    float _406 = (cbMtdParam._m0[21u].x * _301) * _307;
    float _408 = (cbMtdParam._m0[20u].w * _302) * _307;
    bool _409 = _406 > 0.0;
    float _414;
    if (_409)
    {
        _414 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _414 = frontier_phi_11_10_ladder;
    }
    bool _416 = _408 > 0.0;
    float _421;
    if (_416)
    {
        _421 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _421 = frontier_phi_15_14_ladder;
    }
    float _424 = _330 ? (cbMtdParam._m0[16u].z / _308) : 5000.0;
    float _425 = isnan(_421) ? _414 : (isnan(_414) ? _421 : min(_414, _421));
    float _426 = isnan(_424) ? _425 : (isnan(_425) ? _424 : min(_425, _424));
    float _430 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _434 = ((_426 * _308) + _430) / _430;
    float _439 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _441 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _457 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_426 * _406)) / _434) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_426 * _408)) / _434) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _469;
    if (_409)
    {
        _469 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _469 = frontier_phi_19_18_ladder;
    }
    float _475;
    if (_416)
    {
        _475 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _475 = frontier_phi_23_22_ladder;
    }
    float _477 = isnan(_475) ? _469 : (isnan(_469) ? _475 : min(_469, _475));
    float _478 = isnan(_424) ? _477 : (isnan(_477) ? _424 : min(_477, _424));
    float _485 = ((_478 * _308) + _430) / _430;
    vec4 _499 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_478 * _406)) / _485) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_478 * _408)) / _485) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _501 = _499.w;
    float _508 = (_501 * ((_457.x * cbMtdParam._m0[10u].x) - _382)) + _382;
    float _509 = (_501 * ((_457.y * cbMtdParam._m0[10u].y) - _383)) + _383;
    float _510 = (_501 * ((_457.z * cbMtdParam._m0[10u].z) - _384)) + _384;
    float _525 = (cbMtdParam._m0[21u].z * _301) * _307;
    float _527 = (cbMtdParam._m0[21u].y * _302) * _307;
    bool _528 = _525 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _313) / _525;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _313) / _525;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _533 = frontier_phi_27_26_ladder;
    }
    bool _535 = _527 > 0.0;
    float _540;
    if (_535)
    {
        _540 = (1.0 - _314) / _527;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _314) / _527;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _540 = frontier_phi_31_30_ladder;
    }
    float _543 = _330 ? (cbMtdParam._m0[18u].x / _308) : 5000.0;
    float _544 = isnan(_540) ? _533 : (isnan(_533) ? _540 : min(_533, _540));
    float _545 = isnan(_543) ? _544 : (isnan(_544) ? _543 : min(_544, _543));
    float _549 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _553 = ((_545 * _308) + _549) / _549;
    float _558 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _560 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _577 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_339 + (_545 * _525)) / _553) + 0.5) + _558) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_342 + (_545 * _527)) / _553) + 0.5) + _560) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _589;
    if (_528)
    {
        _589 = (1.0 - _313) / _525;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _313) / _525;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _589 = frontier_phi_35_34_ladder;
    }
    float _595;
    if (_535)
    {
        _595 = (1.0 - _314) / _527;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _314) / _527;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _595 = frontier_phi_39_38_ladder;
    }
    float _597 = isnan(_595) ? _589 : (isnan(_589) ? _595 : min(_589, _595));
    float _598 = isnan(_543) ? _597 : (isnan(_597) ? _543 : min(_597, _543));
    float _605 = ((_598 * _308) + _549) / _549;
    vec4 _619 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_339 + (_598 * _525)) / _605) + 0.5) + _558) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_342 + (_598 * _527)) / _605) + 0.5) + _560) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _621 = _619.w;
    float _628 = (_621 * ((_577.x * cbMtdParam._m0[14u].x) - _508)) + _508;
    float _629 = (_621 * ((_577.y * cbMtdParam._m0[14u].y) - _509)) + _509;
    float _630 = (_621 * ((_577.z * cbMtdParam._m0[14u].z) - _510)) + _510;
    float _3087 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3098 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3109 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _649 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _653 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _654 = _257 * _653;
    float _655 = _258 * _653;
    float _656 = _259 * _653;
    vec4 _661 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _663 = _661.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _760 = sqrt(((_257 * _257) + (_258 * _258)) + (_259 * _259));
        float _767 = (cbMatDynParam._m0[5u].x * _760) + cbMatDynParam._m0[5u].y;
        float _3120 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _772 = (cbMatDynParam._m0[5u].z * _760) + cbMatDynParam._m0[5u].w;
        float _3131 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0))) - _768)) + _768) < ((_663 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _690 = uint(roundEven(NORMAL.w)) * 13u;
    uint _692 = _690 + 9u;
    uint _693 = _692 + uint(cbMatDynParam._m0[0u].w);
    float _699 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0)))) * cbInstanceData._m0[_693].x;
    float _700 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0)))) * cbInstanceData._m0[_693].y;
    float _701 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0)))) * cbInstanceData._m0[_693].z;
    float _3142 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
    float _3153 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    float _3164 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
    vec4 _713 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _716 = _713.x * TEXCOORD.z;
    float _717 = (-0.0) - _654;
    float _718 = (-0.0) - _655;
    float _719 = (-0.0) - _656;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1047;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = (cbModelParam._m0[37u].x * ((((fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _836 = (cbModelParam._m0[37u].y * ((((fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _837 = (((((fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _874 * (_840.x + (-0.5));
        float _877 = _874 * (_840.y + (-0.5));
        float _878 = _874 * (_840.z + (-0.5));
        float _885 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_847.x + (-0.5));
        float _887 = _885 * (_847.y + (-0.5));
        float _888 = _885 * (_847.z + (-0.5));
        float _895 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_854.x + (-0.5));
        float _897 = _895 * (_854.y + (-0.5));
        float _898 = _895 * (_854.z + (-0.5));
        float _905 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_861.x + (-0.5));
        float _907 = _905 * (_861.y + (-0.5));
        float _908 = _905 * (_861.z + (-0.5));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = _876 * 0.5;
        float _913 = _886 * 0.5;
        float _914 = _896 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _929 = (dot(vec3(0.0), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3190 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _939 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3201 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3212 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) * (_941 + 1.0))) + _946) * _909;
        float _956 = _877 * 0.5;
        float _957 = _887 * 0.5;
        float _958 = _897 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(0.0), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3223 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3234 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3245 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (_983 + 1.0))) + _988) * _910;
        float _998 = _878 * 0.5;
        float _999 = _888 * 0.5;
        float _1000 = _898 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(0.0), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3278 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_1025 + 1.0))) + _1030) * _911;
        _1047 = _878;
        _1049 = _877;
        _1050 = _876;
        _1051 = _888;
        _1052 = _887;
        _1053 = _886;
        _1054 = _898;
        _1055 = _897;
        _1056 = _896;
        _1057 = _911;
        _1058 = _910;
        _1059 = _909;
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
    }
    else
    {
        _1047 = _1048;
        _1049 = _1048;
        _1050 = _1048;
        _1051 = _1048;
        _1052 = _1048;
        _1053 = _1048;
        _1054 = _1048;
        _1055 = _1048;
        _1056 = _1048;
        _1057 = _1048;
        _1058 = _1048;
        _1059 = _1048;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1119 = (cbModelParam._m0[38u].x * ((((fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1120 = (cbModelParam._m0[38u].y * ((((fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1121 = (((((fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(0.0), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3341 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(0.0), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3374 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(0.0), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3407 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1048;
        _1327 = _1048;
        _1328 = _1048;
        _1329 = _1048;
        _1330 = _1048;
        _1331 = _1048;
        _1332 = _1048;
        _1333 = _1048;
        _1334 = _1048;
        _1335 = _1048;
        _1336 = _1048;
        _1337 = _1048;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1060)) + _1060;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1061)) + _1061;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1062)) + _1062;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _654 * (-0.5);
    float _1395 = _655 * (-0.5);
    float _1396 = _656 * (-0.5);
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1047, _1051, _1054, _1057));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1461 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1522 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1525 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1551;
        if (_1519 > 0.0)
        {
            _1551 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1551 = frontier_phi_57_55_ladder;
        }
        float _1847;
        if (_1522 > 0.0)
        {
            _1847 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1847 = frontier_phi_66_62_ladder;
        }
        float _2158;
        if (_1525 > 0.0)
        {
            _2158 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2158 = frontier_phi_80_73_ladder;
        }
        float _2160 = isnan(_1847) ? _1551 : (isnan(_1551) ? _1847 : min(_1551, _1847));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1519) + _1508;
        float _2166 = (_2161 * _1522) + _1512;
        float _2167 = (_2161 * _1525) + _1516;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2168;
        float _2171 = _2168 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2167 > _2171) || ((_2167 < _2169) || ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 < _2169) || (_2165 > _2171))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1461);
            frontier_phi_56_80_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_56_80_ladder_2;
        _1543 = frontier_phi_56_80_ladder_1;
        _1545 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1461);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1548 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1600 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1604 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1608 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1611 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1614 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1617 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1852;
        if (_1611 > 0.0)
        {
            _1852 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1852 = frontier_phi_68_64_ladder;
        }
        float _2184;
        if (_1614 > 0.0)
        {
            _2184 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2184 = frontier_phi_82_75_ladder;
        }
        float _2371;
        if (_1617 > 0.0)
        {
            _2371 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2371 = frontier_phi_100_93_ladder;
        }
        float _2373 = isnan(_2184) ? _1852 : (isnan(_1852) ? _2184 : min(_1852, _2184));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1611) + _1600;
        float _2379 = (_2374 * _1614) + _1604;
        float _2380 = (_2374 * _1617) + _1608;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_65_100_ladder = _2572.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2572.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2572.z * cbModelParam._m0[1u].z;
        }
        _1636 = frontier_phi_65_100_ladder_1;
        _1638 = frontier_phi_65_100_ladder;
        _1640 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1548);
        _1636 = _1620.x * cbModelParam._m0[1u].z;
        _1638 = _1620.y * cbModelParam._m0[1u].z;
        _1640 = _1620.z * cbModelParam._m0[1u].z;
    }
    float _1652 = _716 * 0.01200000010430812835693359375;
    float _1654 = _1652 * ((cbModelParam._m0[1u].w * (_1636 - _1541)) + _1541);
    float _1655 = _1652 * ((cbModelParam._m0[1u].w * (_1638 - _1543)) + _1543);
    float _1656 = _1652 * ((cbModelParam._m0[1u].w * (_1640 - _1545)) + _1545);
    float _1659 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, _1654 * cbSceneParam._m0[91u].x));
    uvec4 _1675 = floatBitsToUint(cbInstanceData._m0[_690 + 5u]);
    uint _1677 = _1675.x * 14u;
    uint _1678 = _1677 + 13u;
    float _1683 = _716 + (-1.0);
    float _1687 = (cbLight._m0[_1678].x * _1683) + 1.0;
    float _1688 = (cbLight._m0[_1678].y * _1683) + 1.0;
    uint _1689 = _1677 + 5u;
    float _1695 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1699 = _1677 + 4u;
    float _1705 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1709 = _1677 | 1u;
    float _1720 = dot(vec3(cbLight._m0[_1677].xyz), vec3(0.0));
    float _1723 = dot(vec3(cbLight._m0[_1709].xyz), vec3(0.0));
    float _3543 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _3554 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1728 = (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.3183098733425140380859375;
    float _1730 = (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * 0.3183098733425140380859375;
    float _1737 = ((cbLight._m0[_1689].x * _1695) * _1730) + ((cbLight._m0[_1699].x * _1705) * _1728);
    float _1738 = ((_1695 * cbLight._m0[_1689].y) * _1730) + ((_1705 * cbLight._m0[_1699].y) * _1728);
    float _1739 = ((_1695 * cbLight._m0[_1689].z) * _1730) + ((_1705 * cbLight._m0[_1699].z) * _1728);
    uint _1740 = _1677 + 8u;
    float _1746 = cbLight._m0[_1677].x + _654;
    float _1747 = cbLight._m0[_1677].y + _655;
    float _1748 = cbLight._m0[_1677].z + _656;
    float _1752 = inversesqrt(dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748)));
    float _1756 = dot(vec3(0.0), vec3(cbLight._m0[_1677].xyz));
    float _3565 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _1760 = dot(vec3(0.0), vec3(_654, _655, _656));
    float _3576 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _1764 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1746 * _1752, _1747 * _1752, _1748 * _1752));
    float _3587 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1775 = (exp2(log2(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = (0.5 / ((_1759 + 9.9999999392252902907785028219223e-09) + _1763)) * _1759;
    float _3598 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1783 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.31831014156341552734375;
    uint _1794 = _1677 + 9u;
    float _1800 = cbLight._m0[_1709].x + _654;
    float _1801 = cbLight._m0[_1709].y + _655;
    float _1802 = cbLight._m0[_1709].z + _656;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1810 = dot(vec3(0.0), vec3(cbLight._m0[_1709].xyz));
    float _3609 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1800 * _1806, _1801 * _1806, _1802 * _1806));
    float _3620 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1823 = (exp2(log2(1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1827 = (0.5 / ((_1813 + 9.9999999392252902907785028219223e-09) + _1763)) * _1813;
    float _3631 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * 0.31831014156341552734375;
    float _1839 = (((_1823 * cbLight._m0[_1794].x) * _1829) * _1695) + (((_1775 * cbLight._m0[_1740].x) * _1783) * _1705);
    float _1840 = (((_1823 * cbLight._m0[_1794].y) * _1829) * _1695) + (((_1775 * cbLight._m0[_1740].y) * _1783) * _1705);
    float _1841 = (((_1823 * cbLight._m0[_1794].z) * _1829) * _1695) + (((_1775 * cbLight._m0[_1740].z) * _1783) * _1705);
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    if (_1675.y == 0u)
    {
        float _1897 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1898 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1897;
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1897;
        float _1900 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1897;
        uvec4 _1912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1913 = _1912.x;
        uint _1924 = uint((float(_1912.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _1913))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _1913)));
        float _1934 = (log2(_1900 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1935 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        uint _1938 = uint(isnan(14.0) ? _1935 : (isnan(_1935) ? 14.0 : min(_1935, 14.0)));
        uvec4 _1943 = texelFetch(g_lightClusterGridBuffer, int(((_1938 << 2u) + (_1924 << 6u)) >> 2u));
        uint _1944 = _1943.x;
        uint _1945 = _1912.z;
        float _2035;
        float _2037;
        float _2039;
        float _2041;
        float _2043;
        float _2045;
        if (((((1u << ((_1945 >> 4u) & 15u)) + 4294967295u) & _1944) == 0u) || ((_1945 & 240u) == 0u))
        {
            _2035 = 0.0;
            _2037 = 0.0;
            _2039 = 0.0;
            _2041 = 0.0;
            _2043 = 0.0;
            _2045 = 0.0;
        }
        else
        {
            float _2036;
            float _2038;
            float _2040;
            float _2042;
            float _2044;
            float _2046;
            float _2218 = 0.0;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            float _2222 = 0.0;
            float _2223 = 0.0;
            uint _2224 = 0u;
            uint _2233;
            bool _2234;
            for (;;)
            {
                _2233 = texelFetch(g_lightClassification, int((((_1938 << 5u) + (_1924 << 9u)) + (_2224 << 2u)) >> 2u)).x;
                _2234 = _2233 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2234)
                {
                    frontier_phi_95_pred = _2219;
                    frontier_phi_95_pred_1 = _2218;
                    frontier_phi_95_pred_2 = _2220;
                    frontier_phi_95_pred_3 = _2223;
                    frontier_phi_95_pred_4 = _2222;
                    frontier_phi_95_pred_5 = _2221;
                }
                else
                {
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    uint _2420;
                    _2414 = _2218;
                    _2415 = _2219;
                    _2416 = _2220;
                    _2417 = _2221;
                    _2418 = _2222;
                    _2419 = _2223;
                    _2420 = _2233;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    for (;;)
                    {
                        uint _2424 = uint(findLSB(_2420)) + (_2224 << 5u);
                        uint _2421 = (_2420 + 4294967295u) & _2420;
                        uint _2426 = _2424 * 48u;
                        vec4 _2440 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2426)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 3u)).x));
                        uint _2446 = (_2424 * 48u) + 4u;
                        vec4 _2459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2446)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 3u)).x));
                        uint _2465 = (_2424 * 48u) + 8u;
                        vec3 _2476 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x));
                        float _2480 = _2440.x - _1898;
                        float _2481 = _2440.y - _1899;
                        float _2482 = _2440.z - _1900;
                        float _2483 = dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482));
                        float _2486 = inversesqrt(_2483);
                        float _2495 = 1.0 - (_2483 * _2440.w);
                        float _3652 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
                        float _2496 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
                        float _2497 = sqrt(_2483) * _2459.w;
                        float _2500 = 1.39999997615814208984375 / (_2497 + 1.39999997615814208984375);
                        float _2501 = _2500 * _2500;
                        float _2504 = ((1.0 - _2501) * dot(vec3(0.0), vec3(_2486 * _2480, _2486 * _2481, _2486 * _2482))) + _2501;
                        float _2507 = _2497 * _2497;
                        float _2511 = ((isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0))) * _2496) / ((_2507 * 0.699999988079071044921875) + 1.0);
                        float _2515 = (-0.0) - _1898;
                        float _2516 = (-0.0) - _1899;
                        float _2517 = (-0.0) - _1900;
                        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
                        float _2525 = dot(vec3(0.0), vec3(_2521 * _2515, _2521 * _2516, _2521 * _2517));
                        float _3668 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
                        float _3679 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2529 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
                        float _2533 = (0.5 / (((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) + 9.9999999392252902907785028219223e-09) + _2529)) * _2529;
                        float _3690 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2542 = (((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * 3.1415927410125732421875) / ((_2507 * 2.1991131305694580078125) + 3.141590118408203125)) * _2496;
                        _2318 = (_2511 * _2459.x) + _2417;
                        _2319 = (_2511 * _2459.y) + _2418;
                        _2320 = (_2511 * _2459.z) + _2419;
                        _2315 = (_2542 * _2476.x) + _2414;
                        _2316 = (_2542 * _2476.y) + _2415;
                        _2317 = (_2542 * _2476.z) + _2416;
                        if (_2421 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2414 = _2315;
                            _2415 = _2316;
                            _2416 = _2317;
                            _2417 = _2318;
                            _2418 = _2319;
                            _2419 = _2320;
                            _2420 = _2421;
                        }
                    }
                    frontier_phi_95_pred = _2316;
                    frontier_phi_95_pred_1 = _2315;
                    frontier_phi_95_pred_2 = _2317;
                    frontier_phi_95_pred_3 = _2320;
                    frontier_phi_95_pred_4 = _2319;
                    frontier_phi_95_pred_5 = _2318;
                }
                _2038 = frontier_phi_95_pred;
                _2036 = frontier_phi_95_pred_1;
                _2040 = frontier_phi_95_pred_2;
                _2046 = frontier_phi_95_pred_3;
                _2044 = frontier_phi_95_pred_4;
                _2042 = frontier_phi_95_pred_5;
                uint _2225 = _2224 + 1u;
                if (_2225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2218 = _2036;
                    _2219 = _2038;
                    _2220 = _2040;
                    _2221 = _2042;
                    _2222 = _2044;
                    _2223 = _2046;
                    _2224 = _2225;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2035 = _2036;
            _2037 = _2038;
            _2039 = _2040;
            _2041 = _2042;
            _2043 = _2044;
            _2045 = _2046;
        }
        uvec4 _2049 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2050 = _2049.z;
        uint _2052 = (_2050 >> 8u) & 15u;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        if (((4294967295u << _2052) & _1944) == 0u)
        {
            _2189 = _2035;
            _2191 = _2037;
            _2193 = _2039;
            _2195 = _2041;
            _2197 = _2043;
            _2199 = _2045;
        }
        else
        {
            float _2214 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2052 < ((_2050 >> 12u) & 15u))
            {
                float _2190;
                float _2192;
                float _2194;
                float _2196;
                float _2198;
                float _2200;
                float _2397 = _2035;
                float _2398 = _2037;
                float _2399 = _2039;
                float _2400 = _2041;
                float _2401 = _2043;
                float _2402 = _2045;
                uint _2403 = _2052;
                uint _2412;
                bool _2413;
                for (;;)
                {
                    _2412 = texelFetch(g_lightClassification, int((((_1938 << 5u) + (_1924 << 9u)) + (_2403 << 2u)) >> 2u)).x;
                    _2413 = _2412 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2413)
                    {
                        frontier_phi_109_pred = _2398;
                        frontier_phi_109_pred_1 = _2397;
                        frontier_phi_109_pred_2 = _2402;
                        frontier_phi_109_pred_3 = _2401;
                        frontier_phi_109_pred_4 = _2400;
                        frontier_phi_109_pred_5 = _2399;
                    }
                    else
                    {
                        float _2577;
                        float _2578;
                        float _2579;
                        float _2580;
                        float _2581;
                        float _2582;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2590 = _2397;
                        float _2591 = _2398;
                        float _2592 = _2399;
                        float _2593 = _2400;
                        float _2594 = _2401;
                        float _2595 = _2402;
                        uint _2596 = _2412;
                        uint _2597;
                        vec4 _2622;
                        float _2623;
                        vec4 _2638;
                        vec3 _2650;
                        vec4 _2665;
                        vec4 _2680;
                        float _2726;
                        bool _2727;
                        for (;;)
                        {
                            uint _2607 = ((_2403 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2596));
                            _2597 = (_2596 + 4294967295u) & _2596;
                            uint _2609 = _2607 * 40u;
                            _2622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 3u)).x));
                            _2623 = _2622.w;
                            uint _2625 = (_2607 * 40u) + 4u;
                            _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            uint _2640 = (_2607 * 40u) + 8u;
                            _2650 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x));
                            uint _2652 = (_2607 * 40u) + 16u;
                            _2665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 3u)).x));
                            uint _2667 = (_2607 * 40u) + 20u;
                            _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            uint _2682 = (_2607 * 40u) + 24u;
                            vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2701 = (_2607 * 40u) + 28u;
                            vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            _2726 = fma(_1900, _2714.z, fma(_1899, _2714.y, _2714.x * _1898)) + _2714.w;
                            _2727 = !((fma(_1900, _2695.z, fma(_1899, _2695.y, _2695.x * _1898)) + _2695.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_2727)
                            {
                                float _2754 = _2622.x - _1898;
                                float _2755 = _2622.y - _1899;
                                float _2756 = _2622.z - _1900;
                                float _2757 = dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756));
                                float _2760 = inversesqrt(_2757);
                                float _2761 = _2760 * _2754;
                                float _2762 = _2760 * _2755;
                                float _2763 = _2760 * _2756;
                                float _2767 = 1.0 - (_2757 / (_2623 * _2623));
                                float _3701 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                                float _2768 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
                                float _2772 = sqrt(_2757) * _2638.w;
                                float _2774 = 1.39999997615814208984375 / (_2772 + 1.39999997615814208984375);
                                float _2775 = _2774 * _2774;
                                float _2776 = 1.0 - _2775;
                                float _2778 = (_2776 * dot(vec3(_2761, _2762, _2763), vec3(0.0))) + _2775;
                                float _2781 = _2772 * _2772;
                                float _2785 = (fma(_1900, _2665.z, fma(_1899, _2665.y, _2665.x * _1898)) + _2665.w) / _2726;
                                float _2786 = (fma(_1900, _2680.z, fma(_1899, _2680.y, _2680.x * _1898)) + _2680.w) / _2726;
                                float _2790 = 1.0 - dot(vec2(_2785, _2786), vec2(_2785, _2786));
                                float _3717 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                                float _2791 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
                                float _2792 = _2791 * (((isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))) * _2768) / ((_2781 * 0.699999988079071044921875) + 1.0));
                                float _2802 = dot(vec3(0.0), vec3((-0.0) - (_1898 * _2214), (-0.0) - (_1899 * _2214), (-0.0) - (_1900 * _2214)));
                                float _3728 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2810 = (_2776 * dot(vec3(0.0), vec3(_2761, _2762, _2763))) + _2775;
                                float _3739 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                                float _2811 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
                                float _2815 = (0.5 / (((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) + 9.9999999392252902907785028219223e-09) + _2811)) * _2811;
                                float _3750 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                                float _2822 = (_2791 * _2768) * (((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 3.1415927410125732421875) / ((_2781 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2792 * _2638.y;
                                frontier_phi_115_pred_1 = _2792 * _2638.x;
                                frontier_phi_115_pred_2 = _2822 * _2650.z;
                                frontier_phi_115_pred_3 = _2822 * _2650.y;
                                frontier_phi_115_pred_4 = _2822 * _2650.x;
                                frontier_phi_115_pred_5 = _2792 * _2638.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _2830 = frontier_phi_115_pred;
                            _2829 = frontier_phi_115_pred_1;
                            _2828 = frontier_phi_115_pred_2;
                            _2827 = frontier_phi_115_pred_3;
                            _2826 = frontier_phi_115_pred_4;
                            _2831 = frontier_phi_115_pred_5;
                            _2580 = _2829 + _2593;
                            _2581 = _2830 + _2594;
                            _2582 = _2831 + _2595;
                            _2577 = _2826 + _2590;
                            _2578 = _2827 + _2591;
                            _2579 = _2828 + _2592;
                            if (_2597 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2590 = _2577;
                                _2591 = _2578;
                                _2592 = _2579;
                                _2593 = _2580;
                                _2594 = _2581;
                                _2595 = _2582;
                                _2596 = _2597;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2578;
                        frontier_phi_109_pred_1 = _2577;
                        frontier_phi_109_pred_2 = _2582;
                        frontier_phi_109_pred_3 = _2581;
                        frontier_phi_109_pred_4 = _2580;
                        frontier_phi_109_pred_5 = _2579;
                    }
                    _2192 = frontier_phi_109_pred;
                    _2190 = frontier_phi_109_pred_1;
                    _2200 = frontier_phi_109_pred_2;
                    _2198 = frontier_phi_109_pred_3;
                    _2196 = frontier_phi_109_pred_4;
                    _2194 = frontier_phi_109_pred_5;
                    uint _2404 = _2403 + 1u;
                    if (_2404 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2397 = _2190;
                        _2398 = _2192;
                        _2399 = _2194;
                        _2400 = _2196;
                        _2401 = _2198;
                        _2402 = _2200;
                        _2403 = _2404;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2190;
                frontier_phi_84_85_ladder_1 = _2194;
                frontier_phi_84_85_ladder_2 = _2200;
                frontier_phi_84_85_ladder_3 = _2198;
                frontier_phi_84_85_ladder_4 = _2196;
                frontier_phi_84_85_ladder_5 = _2192;
            }
            else
            {
                frontier_phi_84_85_ladder = _2035;
                frontier_phi_84_85_ladder_1 = _2039;
                frontier_phi_84_85_ladder_2 = _2045;
                frontier_phi_84_85_ladder_3 = _2043;
                frontier_phi_84_85_ladder_4 = _2041;
                frontier_phi_84_85_ladder_5 = _2037;
            }
            _2189 = frontier_phi_84_85_ladder;
            _2191 = frontier_phi_84_85_ladder_5;
            _2193 = frontier_phi_84_85_ladder_1;
            _2195 = frontier_phi_84_85_ladder_4;
            _2197 = frontier_phi_84_85_ladder_3;
            _2199 = frontier_phi_84_85_ladder_2;
        }
        float _2204 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
        _1957 = (_2204 * _2195) + _1737;
        _1959 = (_2204 * _2197) + _1738;
        _1961 = (_2204 * _2199) + _1739;
        _1963 = ((_2189 * 0.039999999105930328369140625) * _2204) + _1839;
        _1965 = ((_2191 * 0.039999999105930328369140625) * _2204) + _1840;
        _1967 = ((_2193 * 0.039999999105930328369140625) * _2204) + _1841;
    }
    else
    {
        _1957 = _1737;
        _1959 = _1738;
        _1961 = _1739;
        _1963 = _1839;
        _1965 = _1840;
        _1967 = _1841;
    }
    float _3766 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3777 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3788 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _1984 = ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1957 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _716))) + ((_1963 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _1985 = ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1959 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _716))) + ((_1965 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _1986 = ((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1961 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _716))) + ((_1967 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _1987 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    uint _1990 = _690 + 6u;
    float _1998 = _676 / cbSceneParam._m0[86u].x;
    float _1999 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2013 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1998, _1999, (log2((isnan(cbSceneParam._m0[77u].w) ? _649 : (isnan(_649) ? cbSceneParam._m0[77u].w : min(_649, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2015 = _2013.x;
    float _2016 = _2013.y;
    float _2017 = _2013.z;
    float _2018 = _2013.w;
    float _2098;
    float _2100;
    float _2102;
    float _2104;
    if (_649 > cbSceneParam._m0[78u].w)
    {
        float _2060 = isnan(_649) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _649 : min(cbSceneParam._m0[80u].w, _649));
        float _2061 = _2060 / _649;
        float _2072 = _2061 * _257;
        float _2073 = _258 * _2061;
        float _2074 = (-0.0) - _2073;
        float _2075 = _2061 * _259;
        float _2077 = (cbSceneParam._m0[77u].w * _2074) / _2060;
        float _2078 = _2077 + cbSceneParam._m0[79u].w;
        float _2079 = cbSceneParam._m0[79u].w - _2073;
        float _2085 = sqrt(((_2072 * _2072) + (_2073 * _2073)) + (_2075 * _2075));
        float _2088 = (1.0 - (cbSceneParam._m0[77u].w / _2060)) * _2085;
        float _2094 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2096 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2328;
        if (abs((_2074 - _2077) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2328 = ((((_2078 > 0.0) ? exp2(_2094 * _2078) : (2.0 - exp2(_2096 * _2078))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2088;
        }
        else
        {
            float _2247 = 1.0 / cbSceneParam._m0[80u].x;
            float _2248 = isnan(_2079) ? _2078 : (isnan(_2078) ? _2079 : max(_2078, _2079));
            float _2249 = isnan(_2079) ? _2078 : (isnan(_2078) ? _2079 : min(_2078, _2079));
            float _2258 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : min(_2248, 0.0));
            float _2259 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : min(_2249, 0.0));
            _2328 = ((abs(_2085 / _2074) * cbSceneParam._m0[80u].y) * ((((_2258 - _2259) * 2.0) - ((exp2(_2094 * (isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0)))) - exp2(_2094 * (isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))))) * _2247)) - ((exp2(_2096 * _2258) - exp2(_2096 * _2259)) * _2247))) + (_2088 * cbSceneParam._m0[80u].z);
        }
        vec4 _2330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1998, _1999, 1.0), 0.0);
        float _2339 = exp2((_2328 * (-1.44269502162933349609375)) * (1.0 - _2330.w));
        float _2340 = log2(_2339);
        float _2356 = log2(_2018);
        _2098 = (exp2(_2356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].x)) * _2330.x) / cbSceneParam._m0[78u].x)) + _2015;
        _2100 = (exp2(_2356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].y)) * _2330.y) / cbSceneParam._m0[78u].y)) + _2016;
        _2102 = (exp2(_2356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2340 * cbSceneParam._m0[78u].z)) * _2330.z) / cbSceneParam._m0[78u].z)) + _2017;
        _2104 = _2339 * _2018;
    }
    else
    {
        _2098 = _2015;
        _2100 = _2016;
        _2102 = _2017;
        _2104 = _2018;
    }
    bool _2366;
    vec4 _2114;
    vec4 _2137;
    float _2139;
    float _2143;
    float _2144;
    float _2145;
    float _2146;
    bool _2157;
    for (;;)
    {
        _2114 = cbMatDynParam._m0[0u];
        float _2116 = roundEven(_2114.y);
        bool _2117 = _2116 == 3.0;
        float _2119 = log2(_2104);
        float _2126 = exp2(_2119 * cbSceneParam._m0[78u].x) * _1987;
        float _2127 = exp2(_2119 * cbSceneParam._m0[78u].y) * _1988;
        float _2128 = exp2(_2119 * cbSceneParam._m0[78u].z) * _1989;
        float _2135 = _663 + (-0.5);
        _2137 = cbMtdParam._m0[1u];
        _2139 = _2137.y * _2135;
        float _2142 = (_2116 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2143 = _2142 * (_2117 ? _2126 : (_2126 + (cbSceneParam._m0[72u].w * _2098)));
        _2144 = _2142 * (_2117 ? _2127 : (_2127 + (cbSceneParam._m0[72u].w * _2100)));
        _2145 = _2142 * (_2117 ? _2128 : (_2128 + (cbSceneParam._m0[72u].w * _2102)));
        _2146 = _2135 * 0.999000012874603271484375;
        _2157 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2157)
        {
            if ((cbInstanceData._m0[_690 + 7u].x + _2146) < 0.5)
            {
                _2366 = true;
                break;
            }
        }
        uint _2282 = _692 + uint(_2114.w);
        if ((cbInstanceData._m0[_2282].w < 1.0) && ((cbInstanceData._m0[_2282].w + _2146) < 0.5))
        {
            _2366 = true;
            break;
        }
        if ((_2139 + 1.0) < _2137.x)
        {
            _2366 = true;
            break;
        }
        _2366 = false;
        break;
    }
    float _2547;
    if (_2366)
    {
        discard_state = true;
        _2547 = 0.0;
    }
    else
    {
        _2547 = cbInstanceData._m0[_1990].w;
    }
    SV_Target.x = _2143;
    SV_Target.y = _2144;
    SV_Target.z = _2145;
    SV_Target.w = _2547;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1990].w;
    discard_exit();
}


