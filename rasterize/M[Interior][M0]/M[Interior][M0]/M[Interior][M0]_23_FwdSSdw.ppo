#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _424;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _339 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = _339.z;
    float _347 = (_339.x * 2.0) + (-1.0);
    float _349 = (_339.y * 2.0) + (-1.0);
    float _355 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _362 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _371 = cbMtdParam._m0[23u].x + _259;
    float _372 = cbMtdParam._m0[23u].y + _260;
    float _373 = cbMtdParam._m0[23u].z + _261;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_355 * _188, _355 * _189, _355 * _190));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_362 * _202, _362 * _203, _362 * _204));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _393 * _389;
    float _399 = ((cbMtdParam._m0[19u].w * _387) * _393) + (_347 * cbMtdParam._m0[20u].y);
    float _400 = ((cbMtdParam._m0[20u].x * _388) * _393) + (_349 * cbMtdParam._m0[20u].z);
    float _403 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _404 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _422;
    float _425;
    float _427;
    if (_399 > 0.0)
    {
        float _408 = (1.0 - _403) / _399;
        _422 = _408;
        _425 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_408 * _394)) * 0.16666667163372039794921875;
        _427 = (fract((_408 * _400) + _404) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_399 < 0.0)
        {
            float _423 = ((-0.0) - _403) / _399;
            frontier_phi_3_2_ladder = (fract((_423 * _400) + _404) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _423;
            frontier_phi_3_2_ladder_2 = (fract(_423 * _394) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _424;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _422 = frontier_phi_3_2_ladder_1;
        _425 = frontier_phi_3_2_ladder_2;
        _427 = frontier_phi_3_2_ladder;
    }
    float _453;
    float _455;
    float _457;
    if (_400 > 0.0)
    {
        float _440 = (1.0 - _404) / _400;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_440 < _422)
        {
            frontier_phi_8_5_ladder = (fract((_440 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _440;
            frontier_phi_8_5_ladder_2 = (fract(_440 * _394) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _425;
            frontier_phi_8_5_ladder_1 = _422;
            frontier_phi_8_5_ladder_2 = _427;
        }
        _453 = frontier_phi_8_5_ladder_1;
        _455 = frontier_phi_8_5_ladder;
        _457 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_400 < 0.0)
        {
            float _454 = ((-0.0) - _404) / _400;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_454 < _422)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_454 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _454;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_454 * _394) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _425;
                frontier_phi_8_6_ladder_9_ladder_1 = _422;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _425;
            frontier_phi_8_6_ladder_1 = _422;
            frontier_phi_8_6_ladder_2 = _427;
        }
        _453 = frontier_phi_8_6_ladder_1;
        _455 = frontier_phi_8_6_ladder;
        _457 = frontier_phi_8_6_ladder_2;
    }
    float _461 = (_394 > 0.0) ? (cbMtdParam._m0[16u].w / _394) : 5000.0;
    float _474;
    float _475;
    if (_461 < _453)
    {
        _474 = ((_403 + cbMtdParam._m0[17u].x) + (_461 * _399)) * 0.16666667163372039794921875;
        _475 = (((_461 * _400) + _404) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _474 = _455;
        _475 = _457;
    }
    vec4 _477 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_474, _475));
    float _482 = _477.x * cbMtdParam._m0[13u].x;
    float _483 = _477.y * cbMtdParam._m0[13u].y;
    float _484 = _477.z * cbMtdParam._m0[13u].z;
    vec4 _502 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _506 = _502.z;
    float _509 = (_502.x * 2.0) + (-1.0);
    float _510 = (_502.y * 2.0) + (-1.0);
    float _511 = dot(vec2(_509, _510), vec2(_509, _510));
    float _3143 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _516 = sqrt(1.0 - (isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))));
    float _517 = _506 * _286;
    float _527 = (cbMtdParam._m0[15u].w * ((_343 - _517) + ((_506 - _343) * _286))) + _517;
    float _535 = (cbMtdParam._m0[16u].x * (_347 - (_347 * _286))) + _509;
    float _536 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _286))) + _510;
    float _539 = fma(_516, _195, fma(_536, _202, _535 * _188));
    float _542 = fma(_516, _196, fma(_536, _203, _535 * _189));
    float _545 = fma(_516, _197, fma(_536, _204, _535 * _190));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    float _550 = _549 * _539;
    float _551 = _549 * _542;
    float _552 = _549 * _545;
    float _3154 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _553 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
    float _3165 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3176 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3187 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _572 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _577 = _259 * _576;
    float _578 = _260 * _576;
    float _579 = _261 * _576;
    float _585 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _586 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _606 = fma(_552, cbSceneParam._m0[5u].z, fma(_551, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _550));
    float _609 = fma(_552, cbSceneParam._m0[6u].z, fma(_551, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _550));
    float _612 = fma(_552, cbSceneParam._m0[7u].z, fma(_551, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _550));
    uint _625 = uint(roundEven(NORMAL.w)) * 13u;
    uint _626 = _625 + 9u;
    uint _627 = _626 + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3198 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _3209 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    vec4 _647 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _585, cbSceneParam._m0[86u].y * _586));
    float _650 = _647.x * TEXCOORD.z;
    float _651 = dot(vec3(_550, _551, _552), vec3(_577, _578, _579));
    float _654 = _651 * 2.0;
    float _658 = (_654 * _550) - _577;
    float _659 = (_654 * _551) - _578;
    float _660 = (_654 * _552) - _579;
    float _664 = abs(dot(vec3(_577, _578, _579), vec3(_550, _551, _552)));
    float _3231 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _666 = sqrt(_553);
    float _679 = exp2((_666 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_666 * 3.0));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _752 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _756 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _760 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _784 = _711 + _550;
        float _785 = _715 + _551;
        float _786 = _719 + _552;
        float _796 = fma(_786, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784)) - _752;
        float _797 = fma(_786, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784)) - _756;
        float _798 = fma(_786, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784)) - _760;
        float _802 = inversesqrt(dot(vec3(_796, _797, _798), vec3(_796, _797, _798)));
        float _815 = ((_802 * _796) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_752 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_802 * _797) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_756 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_802 * _798) / cbModelParam._m0[34u].z) + ((((((_760 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        float _854 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_820.x + (-0.5));
        float _856 = _854 * (_820.y + (-0.5));
        float _857 = _854 * (_820.z + (-0.5));
        float _864 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_827.x + (-0.5));
        float _866 = _864 * (_827.y + (-0.5));
        float _867 = _864 * (_827.z + (-0.5));
        float _874 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_834.x + (-0.5));
        float _876 = _874 * (_834.y + (-0.5));
        float _877 = _874 * (_834.z + (-0.5));
        float _884 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_841.x + (-0.5));
        float _886 = _884 * (_841.y + (-0.5));
        float _887 = _884 * (_841.z + (-0.5));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = _855 * 0.5;
        float _892 = _865 * 0.5;
        float _893 = _875 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _908 = (dot(vec3(_550, _551, _552), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3257 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _918 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3268 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3279 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_920 + 1.0))) + _925) * _888;
        float _935 = _856 * 0.5;
        float _936 = _866 * 0.5;
        float _937 = _876 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_550, _551, _552), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3290 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3301 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3312 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * (_962 + 1.0))) + _967) * _889;
        float _977 = _857 * 0.5;
        float _978 = _867 * 0.5;
        float _979 = _877 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_550, _551, _552), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3345 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_1004 + 1.0))) + _1009) * _890;
        _1026 = _857;
        _1027 = _856;
        _1028 = _855;
        _1029 = _867;
        _1030 = _866;
        _1031 = _865;
        _1032 = _877;
        _1033 = _876;
        _1034 = _875;
        _1035 = _890;
        _1036 = _889;
        _1037 = _888;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
    }
    else
    {
        _1026 = _424;
        _1027 = _424;
        _1028 = _424;
        _1029 = _424;
        _1030 = _424;
        _1031 = _424;
        _1032 = _424;
        _1033 = _424;
        _1034 = _424;
        _1035 = _424;
        _1036 = _424;
        _1037 = _424;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1066 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1070 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1074 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1097 = _711 + _550;
        float _1098 = _715 + _551;
        float _1099 = _719 + _552;
        float _1109 = fma(_1099, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1066 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1070 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[35u].z) + ((((((_1074 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1165 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1132.x + (-0.5));
        float _1167 = _1165 * (_1132.y + (-0.5));
        float _1168 = _1165 * (_1132.z + (-0.5));
        float _1175 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1139.x + (-0.5));
        float _1177 = _1175 * (_1139.y + (-0.5));
        float _1178 = _1175 * (_1139.z + (-0.5));
        float _1185 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1146.x + (-0.5));
        float _1187 = _1185 * (_1146.y + (-0.5));
        float _1188 = _1185 * (_1146.z + (-0.5));
        float _1195 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1153.x + (-0.5));
        float _1197 = _1195 * (_1153.y + (-0.5));
        float _1198 = _1195 * (_1153.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_550, _551, _552), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3408 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_1229 + 1.0))) + _1234) * _1199;
        float _1244 = _1167 * 0.5;
        float _1245 = _1177 * 0.5;
        float _1246 = _1187 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_550, _551, _552), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3441 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_1271 + 1.0))) + _1276) * _1200;
        float _1286 = _1168 * 0.5;
        float _1287 = _1178 * 0.5;
        float _1288 = _1188 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_550, _551, _552), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3474 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1313 + 1.0))) + _1318) * _1201;
        _1335 = _1168;
        _1336 = _1167;
        _1337 = _1166;
        _1338 = _1178;
        _1339 = _1177;
        _1340 = _1176;
        _1341 = _1188;
        _1342 = _1187;
        _1343 = _1186;
        _1344 = _1201;
        _1345 = _1200;
        _1346 = _1199;
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _424;
        _1336 = _424;
        _1337 = _424;
        _1338 = _424;
        _1339 = _424;
        _1340 = _424;
        _1341 = _424;
        _1342 = _424;
        _1343 = _424;
        _1344 = _424;
        _1345 = _424;
        _1346 = _424;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1039)) + _1039;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1382 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1359));
    float _1403 = _658 * 0.5;
    float _1404 = _659 * 0.5;
    float _1405 = _660 * 0.5;
    float _1406 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1409 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1412 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1446;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1419 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1423 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1427 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1434 = dot(vec4(cbModelParam._m0[39u]), vec4(_1403, _1404, _1405, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1457;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1448 = dot(vec4(cbModelParam._m0[40u]), vec4(_1403, _1404, _1405, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1461 = (_1457 * cbModelParam._m0[1u].x) + (_1446 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _553);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1471 : min(cbModelParam._m0[25u].z, _1471));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1520 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1524 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1528 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1531 = fma(_660, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658));
        float _1534 = fma(_660, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658));
        float _1537 = fma(_660, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658));
        float _1565;
        if (_1531 > 0.0)
        {
            _1565 = abs((1.0 - _1520) / _1531);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1520 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1565 = frontier_phi_26_24_ladder;
        }
        float _1938;
        if (_1534 > 0.0)
        {
            _1938 = abs((1.0 - _1524) / _1534);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1524 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1938 = frontier_phi_35_31_ladder;
        }
        float _2254;
        if (_1537 > 0.0)
        {
            _2254 = abs((1.0 - _1528) / _1537);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1528 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2254 = frontier_phi_49_42_ladder;
        }
        float _2256 = isnan(_1938) ? _1565 : (isnan(_1565) ? _1938 : min(_1565, _1938));
        float _2257 = isnan(_2254) ? _2256 : (isnan(_2256) ? _2254 : min(_2256, _2254));
        float _2261 = (_2257 * _1531) + _1520;
        float _2262 = (_2257 * _1534) + _1524;
        float _2263 = (_2257 * _1537) + _1528;
        float _2264 = _2257 * 9.9999997473787516355514526367188e-05;
        float _2265 = (-1.0) - _2264;
        float _2267 = _2264 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2263 > _2267) || ((_2263 < _2265) || ((_2262 > _2267) || ((_2262 < _2265) || ((_2261 < _2265) || (_2261 > _2267))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2263, cbModelParam._m0[9u].z, fma(_2262, cbModelParam._m0[9u].y, _2261 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2263, cbModelParam._m0[10u].z, fma(_2262, cbModelParam._m0[10u].y, _2261 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2263, cbModelParam._m0[11u].z, fma(_2262, cbModelParam._m0[11u].y, _2261 * cbModelParam._m0[11u].x))), _1472);
            frontier_phi_25_49_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1553 = frontier_phi_25_49_ladder_2;
        _1555 = frontier_phi_25_49_ladder_1;
        _1557 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_658, _659, _660), _1472);
        _1553 = _1541.x * cbModelParam._m0[1u].y;
        _1555 = _1541.y * cbModelParam._m0[1u].y;
        _1557 = _1541.z * cbModelParam._m0[1u].y;
    }
    float _1561 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _553);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1561 : min(cbModelParam._m0[25u].w, _1561));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1617 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1621 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1625 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1628 = fma(_660, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658));
        float _1631 = fma(_660, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658));
        float _1634 = fma(_660, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658));
        float _1943;
        if (_1628 > 0.0)
        {
            _1943 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1943 = frontier_phi_37_33_ladder;
        }
        float _2280;
        if (_1631 > 0.0)
        {
            _2280 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2280 = frontier_phi_51_44_ladder;
        }
        float _2449;
        if (_1634 > 0.0)
        {
            _2449 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2449 = frontier_phi_65_60_ladder;
        }
        float _2451 = isnan(_2280) ? _1943 : (isnan(_1943) ? _2280 : min(_1943, _2280));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1628) + _1617;
        float _2457 = (_2452 * _1631) + _1621;
        float _2458 = (_2452 * _1634) + _1625;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2459;
        float _2462 = _2459 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2458 > _2462) || ((_2458 < _2460) || ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 < _2460) || (_2456 > _2462))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2458, cbModelParam._m0[17u].z, fma(_2457, cbModelParam._m0[17u].y, _2456 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2458, cbModelParam._m0[18u].z, fma(_2457, cbModelParam._m0[18u].y, _2456 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2458, cbModelParam._m0[19u].z, fma(_2457, cbModelParam._m0[19u].y, _2456 * cbModelParam._m0[19u].x))), _1562);
            frontier_phi_34_65_ladder = _2691.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2691.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2691.z * cbModelParam._m0[1u].z;
        }
        _1653 = frontier_phi_34_65_ladder_1;
        _1655 = frontier_phi_34_65_ladder;
        _1657 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_658, _659, _660), _1562);
        _1653 = _1637.x * cbModelParam._m0[1u].z;
        _1655 = _1637.y * cbModelParam._m0[1u].z;
        _1657 = _1637.z * cbModelParam._m0[1u].z;
    }
    float _1669 = ((((1.0 - _679) * ((_666 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_679 * _666)) * _650;
    float _1670 = _1669 * ((cbModelParam._m0[1u].w * (_1653 - _1553)) + _1553);
    float _1671 = _1669 * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1672 = _1669 * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1675 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, _1670 * cbSceneParam._m0[91u].x));
    vec4 _1689 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_585, _586));
    float _1691 = _1689.w;
    float _1703 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1691);
    float _1704 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1691);
    float _1705 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1691);
    uvec4 _1709 = floatBitsToUint(cbInstanceData._m0[_625 + 5u]);
    uint _1711 = _1709.x * 14u;
    uint _1712 = _1711 + 13u;
    float _1717 = _650 + (-1.0);
    float _1720 = (cbLight._m0[_1712].x * _1717) + 1.0;
    float _1721 = (cbLight._m0[_1712].y * _1717) + 1.0;
    uint _1722 = _1711 + 5u;
    float _1728 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1732 = _1711 + 4u;
    float _1742 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1746 = _1711 | 1u;
    float _1757 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_550, _551, _552));
    float _1760 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_550, _551, _552));
    float _3610 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _3621 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1765 = (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * 0.3183098733425140380859375;
    float _1767 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.3183098733425140380859375;
    float _1774 = ((cbLight._m0[_1722].x * _1728) * _1767) + (((cbLight._m0[_1732].x * _1703) * _1742) * _1765);
    float _1775 = ((_1728 * cbLight._m0[_1722].y) * _1767) + (((cbLight._m0[_1732].y * _1704) * _1742) * _1765);
    float _1776 = ((_1728 * cbLight._m0[_1722].z) * _1767) + (((cbLight._m0[_1732].z * _1705) * _1742) * _1765);
    uint _1778 = _1711 + 8u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _553) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1711].x + _577;
    float _1794 = cbLight._m0[_1711].y + _578;
    float _1795 = cbLight._m0[_1711].z + _579;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1711].xyz));
    float _3632 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _1807 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _1808 = dot(vec3(_550, _551, _552), vec3(_1800, _1801, _1802));
    float _3654 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1800, _1801, _1802));
    float _3665 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1792 * _1792;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1832 = 1.0 - _1792;
    float _1843 = (0.5 / (((_1807 * ((_1806 * _1832) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1832) + _1792) * _1806))) * _1806;
    float _3676 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    uint _1859 = _1711 + 9u;
    float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1746].w)) * _553) * 0.949999988079071044921875);
    float _1871 = _1870 * _1870;
    float _1872 = cbLight._m0[_1746].x + _577;
    float _1873 = cbLight._m0[_1746].y + _578;
    float _1874 = cbLight._m0[_1746].z + _579;
    float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
    float _1879 = _1878 * _1872;
    float _1880 = _1878 * _1873;
    float _1881 = _1878 * _1874;
    float _1882 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1746].xyz));
    float _3687 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _1886 = dot(vec3(_550, _551, _552), vec3(_1879, _1880, _1881));
    float _3698 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _1890 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1879, _1880, _1881));
    float _3709 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1894 = _1871 * _1871;
    float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
    float _1907 = (exp2(log2(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1908 = 1.0 - _1871;
    float _1918 = (0.5 / (((_1807 * ((_1885 * _1908) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1908) + _1871) * _1885))) * _1885;
    float _3720 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
    float _1930 = (((_1907 * cbLight._m0[_1859].x) * _1920) * _1728) + ((((cbLight._m0[_1778].x * _1703) * _1831) * _1845) * _1742);
    float _1931 = (((_1907 * cbLight._m0[_1859].y) * _1920) * _1728) + ((((cbLight._m0[_1778].y * _1704) * _1831) * _1845) * _1742);
    float _1932 = (((_1907 * cbLight._m0[_1859].z) * _1920) * _1728) + ((((cbLight._m0[_1778].z * _1705) * _1831) * _1845) * _1742);
    float _2047;
    float _2049;
    float _2051;
    float _2053;
    float _2055;
    float _2057;
    if (_1709.y == 0u)
    {
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1988 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1987;
        float _1989 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1987;
        float _1990 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1987;
        uvec4 _2002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2003 = _2002.x;
        uint _2014 = uint((float(_2002.y) * floor(float(uint(cbSceneParam._m0[85u].y * _586) / _2003))) + floor(float(uint(cbSceneParam._m0[85u].x * _585) / _2003)));
        float _2024 = (log2(_1990 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2025 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        uint _2028 = uint(isnan(14.0) ? _2025 : (isnan(_2025) ? 14.0 : min(_2025, 14.0)));
        uvec4 _2033 = texelFetch(g_lightClusterGridBuffer, int(((_2028 << 2u) + (_2014 << 6u)) >> 2u));
        uint _2034 = _2033.x;
        uint _2035 = _2002.z;
        float _2141;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        float _2151;
        if (((((1u << ((_2035 >> 4u) & 15u)) + 4294967295u) & _2034) == 0u) || ((_2035 & 240u) == 0u))
        {
            _2141 = 0.0;
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
        }
        else
        {
            float _2142;
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2152;
            float _2317 = 0.0;
            float _2318 = 0.0;
            float _2319 = 0.0;
            float _2320 = 0.0;
            float _2321 = 0.0;
            float _2322 = 0.0;
            uint _2323 = 0u;
            uint _2332;
            bool _2333;
            for (;;)
            {
                _2332 = texelFetch(g_lightClassification, int((((_2028 << 5u) + (_2014 << 9u)) + (_2323 << 2u)) >> 2u)).x;
                _2333 = _2332 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2333)
                {
                    frontier_phi_62_pred = _2318;
                    frontier_phi_62_pred_1 = _2317;
                    frontier_phi_62_pred_2 = _2319;
                    frontier_phi_62_pred_3 = _2322;
                    frontier_phi_62_pred_4 = _2321;
                    frontier_phi_62_pred_5 = _2320;
                }
                else
                {
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    uint _2498;
                    _2492 = _2317;
                    _2493 = _2318;
                    _2494 = _2319;
                    _2495 = _2320;
                    _2496 = _2321;
                    _2497 = _2322;
                    _2498 = _2332;
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    for (;;)
                    {
                        uint _2502 = uint(findLSB(_2498)) + (_2323 << 5u);
                        uint _2499 = (_2498 + 4294967295u) & _2498;
                        uint _2504 = _2502 * 48u;
                        vec4 _2518 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 3u)).x));
                        uint _2524 = (_2502 * 48u) + 4u;
                        vec4 _2537 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2524)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 3u)).x));
                        uint _2543 = (_2502 * 48u) + 8u;
                        vec3 _2554 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2543)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 2u)).x));
                        float _2558 = _2518.x - _1988;
                        float _2559 = _2518.y - _1989;
                        float _2560 = _2518.z - _1990;
                        float _2561 = dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560));
                        float _2564 = inversesqrt(_2561);
                        float _2565 = _2564 * _2558;
                        float _2566 = _2564 * _2559;
                        float _2567 = _2564 * _2560;
                        float _2568 = dot(vec3(_606, _609, _612), vec3(_2565, _2566, _2567));
                        float _2573 = 1.0 - (_2561 * _2518.w);
                        float _3741 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2574 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                        float _2575 = sqrt(_2561) * _2537.w;
                        float _2578 = 1.39999997615814208984375 / (_2575 + 1.39999997615814208984375);
                        float _2579 = _2578 * _2578;
                        float _2582 = ((1.0 - _2579) * _2568) + _2579;
                        float _2585 = _2575 * _2575;
                        float _2589 = ((isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))) * _2574) / ((_2585 * 0.699999988079071044921875) + 1.0);
                        float _2593 = (-0.0) - _1988;
                        float _2594 = (-0.0) - _1989;
                        float _2595 = (-0.0) - _1990;
                        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
                        float _2600 = _2599 * _2593;
                        float _2601 = _2599 * _2594;
                        float _2602 = _2599 * _2595;
                        float _2610 = exp2(log2(1.0 / ((_2585 * 3.5) + 5.0)) * 0.25);
                        float _2611 = 1.0 - _666;
                        float _2618 = sqrt(1.0 - ((1.0 - (_2611 * _2611)) * (1.0 - (_2610 * _2610))));
                        float _2619 = _2618 * _2618;
                        float _2620 = _2619 * _2619;
                        float _2621 = _2600 + _2565;
                        float _2622 = _2601 + _2566;
                        float _2623 = _2602 + _2567;
                        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
                        float _2631 = dot(vec3(_606, _609, _612), vec3(_2600, _2601, _2602));
                        float _3757 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
                        float _2634 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                        float _2635 = dot(vec3(_606, _609, _612), vec3(_2627 * _2621, _2627 * _2622, _2627 * _2623));
                        float _3768 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                        float _2638 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                        float _2642 = ((_2638 * _2638) * (_2620 + (-1.0))) + 1.0;
                        float _2643 = _2578 * _2619;
                        float _2644 = _2643 * _2643;
                        float _2647 = ((1.0 - _2644) * _2568) + _2644;
                        float _3779 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2648 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                        float _2649 = 1.0 - _2619;
                        float _2659 = (0.5 / (((_2648 * ((_2634 * _2649) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2648 * _2649) + _2619) * _2634))) * _2648;
                        float _3790 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2670 = (((_2620 * 3.1415927410125732421875) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) / ((_2642 * _2642) * ((_2585 * 2.1991131305694580078125) + 3.141590118408203125))) * _2574;
                        _2401 = (_2589 * _2537.x) + _2495;
                        _2402 = (_2589 * _2537.y) + _2496;
                        _2403 = (_2589 * _2537.z) + _2497;
                        _2398 = (_2670 * _2554.x) + _2492;
                        _2399 = (_2670 * _2554.y) + _2493;
                        _2400 = (_2670 * _2554.z) + _2494;
                        if (_2499 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2492 = _2398;
                            _2493 = _2399;
                            _2494 = _2400;
                            _2495 = _2401;
                            _2496 = _2402;
                            _2497 = _2403;
                            _2498 = _2499;
                        }
                    }
                    frontier_phi_62_pred = _2399;
                    frontier_phi_62_pred_1 = _2398;
                    frontier_phi_62_pred_2 = _2400;
                    frontier_phi_62_pred_3 = _2403;
                    frontier_phi_62_pred_4 = _2402;
                    frontier_phi_62_pred_5 = _2401;
                }
                _2144 = frontier_phi_62_pred;
                _2142 = frontier_phi_62_pred_1;
                _2146 = frontier_phi_62_pred_2;
                _2152 = frontier_phi_62_pred_3;
                _2150 = frontier_phi_62_pred_4;
                _2148 = frontier_phi_62_pred_5;
                uint _2324 = _2323 + 1u;
                if (_2324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2317 = _2142;
                    _2318 = _2144;
                    _2319 = _2146;
                    _2320 = _2148;
                    _2321 = _2150;
                    _2322 = _2152;
                    _2323 = _2324;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2141 = _2142;
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
        }
        uvec4 _2155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2156 = _2155.z;
        uint _2158 = (_2156 >> 8u) & 15u;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        if (((4294967295u << _2158) & _2034) == 0u)
        {
            _2285 = _2141;
            _2287 = _2143;
            _2289 = _2145;
            _2291 = _2147;
            _2293 = _2149;
            _2295 = _2151;
        }
        else
        {
            float _2310 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
            float _2311 = _2310 * _1988;
            float _2312 = _2310 * _1989;
            float _2313 = _2310 * _1990;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2158 < ((_2156 >> 12u) & 15u))
            {
                float _2286;
                float _2288;
                float _2290;
                float _2292;
                float _2294;
                float _2296;
                float _2475 = _2141;
                float _2476 = _2143;
                float _2477 = _2145;
                float _2478 = _2147;
                float _2479 = _2149;
                float _2480 = _2151;
                uint _2481 = _2158;
                uint _2490;
                bool _2491;
                for (;;)
                {
                    _2490 = texelFetch(g_lightClassification, int((((_2028 << 5u) + (_2014 << 9u)) + (_2481 << 2u)) >> 2u)).x;
                    _2491 = _2490 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2491)
                    {
                        frontier_phi_71_pred = _2476;
                        frontier_phi_71_pred_1 = _2475;
                        frontier_phi_71_pred_2 = _2480;
                        frontier_phi_71_pred_3 = _2479;
                        frontier_phi_71_pred_4 = _2478;
                        frontier_phi_71_pred_5 = _2477;
                    }
                    else
                    {
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2709 = _2475;
                        float _2710 = _2476;
                        float _2711 = _2477;
                        float _2712 = _2478;
                        float _2713 = _2479;
                        float _2714 = _2480;
                        uint _2715 = _2490;
                        uint _2716;
                        vec4 _2741;
                        float _2742;
                        vec4 _2757;
                        vec3 _2769;
                        vec4 _2784;
                        vec4 _2799;
                        float _2845;
                        bool _2846;
                        for (;;)
                        {
                            uint _2726 = ((_2481 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2715));
                            _2716 = (_2715 + 4294967295u) & _2715;
                            uint _2728 = _2726 * 40u;
                            _2741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 3u)).x));
                            _2742 = _2741.w;
                            uint _2744 = (_2726 * 40u) + 4u;
                            _2757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 3u)).x));
                            uint _2759 = (_2726 * 40u) + 8u;
                            _2769 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x));
                            uint _2771 = (_2726 * 40u) + 16u;
                            _2784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 3u)).x));
                            uint _2786 = (_2726 * 40u) + 20u;
                            _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            uint _2801 = (_2726 * 40u) + 24u;
                            vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2820 = (_2726 * 40u) + 28u;
                            vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            _2845 = fma(_1990, _2833.z, fma(_1989, _2833.y, _2833.x * _1988)) + _2833.w;
                            _2846 = !((fma(_1990, _2814.z, fma(_1989, _2814.y, _2814.x * _1988)) + _2814.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2846)
                            {
                                float _2873 = _2741.x - _1988;
                                float _2874 = _2741.y - _1989;
                                float _2875 = _2741.z - _1990;
                                float _2876 = dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875));
                                float _2879 = inversesqrt(_2876);
                                float _2880 = _2879 * _2873;
                                float _2881 = _2879 * _2874;
                                float _2882 = _2879 * _2875;
                                float _2886 = 1.0 - (_2876 / (_2742 * _2742));
                                float _3801 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2887 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
                                float _2891 = sqrt(_2876) * _2757.w;
                                float _2893 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                                float _2894 = _2893 * _2893;
                                float _2897 = ((1.0 - _2894) * dot(vec3(_2880, _2881, _2882), vec3(_606, _609, _612))) + _2894;
                                float _2900 = _2891 * _2891;
                                float _2904 = (fma(_1990, _2784.z, fma(_1989, _2784.y, _2784.x * _1988)) + _2784.w) / _2845;
                                float _2905 = (fma(_1990, _2799.z, fma(_1989, _2799.y, _2799.x * _1988)) + _2799.w) / _2845;
                                float _2909 = 1.0 - dot(vec2(_2904, _2905), vec2(_2904, _2905));
                                float _3817 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2910 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
                                float _2911 = _2910 * (((isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))) * _2887) / ((_2900 * 0.699999988079071044921875) + 1.0));
                                float _2923 = exp2(log2(1.0 / ((_2900 * 3.5) + 5.0)) * 0.25);
                                float _2924 = 1.0 - _666;
                                float _2931 = sqrt(1.0 - ((1.0 - (_2924 * _2924)) * (1.0 - (_2923 * _2923))));
                                float _2932 = _2931 * _2931;
                                float _2933 = _2932 * _2932;
                                float _2934 = _2880 - _2311;
                                float _2935 = _2881 - _2312;
                                float _2936 = _2882 - _2313;
                                float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                                float _2944 = dot(vec3(_606, _609, _612), vec3((-0.0) - _2311, (-0.0) - _2312, (-0.0) - _2313));
                                float _3828 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2947 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                                float _2948 = dot(vec3(_606, _609, _612), vec3(_2940 * _2934, _2940 * _2935, _2940 * _2936));
                                float _3839 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2951 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                                float _2955 = ((_2951 * _2951) * (_2933 + (-1.0))) + 1.0;
                                float _2956 = _2893 * _2932;
                                float _2957 = _2956 * _2956;
                                float _2963 = ((1.0 - _2957) * dot(vec3(_606, _609, _612), vec3(_2880, _2881, _2882))) + _2957;
                                float _3850 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2964 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                                float _2965 = 1.0 - _2932;
                                float _2975 = (0.5 / (((_2964 * ((_2947 * _2965) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2964 * _2965) + _2932) * _2947))) * _2964;
                                float _3861 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2985 = (_2910 * _2887) * (((_2933 * 3.1415927410125732421875) * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) / ((_2955 * _2955) * ((_2900 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2985 * _2769.y;
                                frontier_phi_77_pred_1 = _2985 * _2769.x;
                                frontier_phi_77_pred_2 = _2911 * _2757.z;
                                frontier_phi_77_pred_3 = _2911 * _2757.y;
                                frontier_phi_77_pred_4 = _2911 * _2757.x;
                                frontier_phi_77_pred_5 = _2985 * _2769.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2990 = frontier_phi_77_pred;
                            _2989 = frontier_phi_77_pred_1;
                            _2994 = frontier_phi_77_pred_2;
                            _2993 = frontier_phi_77_pred_3;
                            _2992 = frontier_phi_77_pred_4;
                            _2991 = frontier_phi_77_pred_5;
                            _2699 = _2992 + _2712;
                            _2700 = _2993 + _2713;
                            _2701 = _2994 + _2714;
                            _2696 = _2989 + _2709;
                            _2697 = _2990 + _2710;
                            _2698 = _2991 + _2711;
                            if (_2716 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2709 = _2696;
                                _2710 = _2697;
                                _2711 = _2698;
                                _2712 = _2699;
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2716;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2697;
                        frontier_phi_71_pred_1 = _2696;
                        frontier_phi_71_pred_2 = _2701;
                        frontier_phi_71_pred_3 = _2700;
                        frontier_phi_71_pred_4 = _2699;
                        frontier_phi_71_pred_5 = _2698;
                    }
                    _2288 = frontier_phi_71_pred;
                    _2286 = frontier_phi_71_pred_1;
                    _2296 = frontier_phi_71_pred_2;
                    _2294 = frontier_phi_71_pred_3;
                    _2292 = frontier_phi_71_pred_4;
                    _2290 = frontier_phi_71_pred_5;
                    uint _2482 = _2481 + 1u;
                    if (_2482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2475 = _2286;
                        _2476 = _2288;
                        _2477 = _2290;
                        _2478 = _2292;
                        _2479 = _2294;
                        _2480 = _2296;
                        _2481 = _2482;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2296;
                frontier_phi_53_54_ladder_1 = _2292;
                frontier_phi_53_54_ladder_2 = _2290;
                frontier_phi_53_54_ladder_3 = _2288;
                frontier_phi_53_54_ladder_4 = _2286;
                frontier_phi_53_54_ladder_5 = _2294;
            }
            else
            {
                frontier_phi_53_54_ladder = _2151;
                frontier_phi_53_54_ladder_1 = _2147;
                frontier_phi_53_54_ladder_2 = _2145;
                frontier_phi_53_54_ladder_3 = _2143;
                frontier_phi_53_54_ladder_4 = _2141;
                frontier_phi_53_54_ladder_5 = _2149;
            }
            _2285 = frontier_phi_53_54_ladder_4;
            _2287 = frontier_phi_53_54_ladder_3;
            _2289 = frontier_phi_53_54_ladder_2;
            _2291 = frontier_phi_53_54_ladder_1;
            _2293 = frontier_phi_53_54_ladder_5;
            _2295 = frontier_phi_53_54_ladder;
        }
        float _2300 = isnan(1.0) ? _650 : (isnan(_650) ? 1.0 : min(_650, 1.0));
        _2047 = (_2300 * _2291) + _1774;
        _2049 = (_2300 * _2293) + _1775;
        _2051 = (_2300 * _2295) + _1776;
        _2053 = ((_2285 * 0.039999999105930328369140625) * _2300) + _1930;
        _2055 = ((_2287 * 0.039999999105930328369140625) * _2300) + _1931;
        _2057 = ((_2289 * 0.039999999105930328369140625) * _2300) + _1932;
    }
    else
    {
        _2047 = _1774;
        _2049 = _1775;
        _2051 = _1776;
        _2053 = _1930;
        _2055 = _1931;
        _2057 = _1932;
    }
    uint _2063 = _626 + uint(cbMatDynParam._m0[0u].w);
    float _3877 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3888 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3899 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _2088 = (((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_2047 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _650))) + ((_2053 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2063].x * (_482 - (_482 * _286)));
    float _2090 = ((cbInstanceData._m0[_2063].y * (_483 - (_483 * _286))) + ((_2055 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_2049 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _650)));
    float _2092 = ((cbInstanceData._m0[_2063].z * (_484 - (_484 * _286))) + ((_2057 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_2051 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _650)));
    uint _2096 = _625 + 6u;
    float _2104 = _585 / cbSceneParam._m0[86u].x;
    float _2105 = _586 / cbSceneParam._m0[86u].y;
    vec4 _2119 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2104, _2105, (log2((isnan(cbSceneParam._m0[77u].w) ? _572 : (isnan(_572) ? cbSceneParam._m0[77u].w : min(_572, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2121 = _2119.x;
    float _2122 = _2119.y;
    float _2123 = _2119.z;
    float _2124 = _2119.w;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    if (_572 > cbSceneParam._m0[78u].w)
    {
        float _2166 = isnan(_572) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _572 : min(cbSceneParam._m0[80u].w, _572));
        float _2167 = _2166 / _572;
        float _2178 = _2167 * _259;
        float _2179 = _260 * _2167;
        float _2180 = (-0.0) - _2179;
        float _2181 = _2167 * _261;
        float _2183 = (cbSceneParam._m0[77u].w * _2180) / _2166;
        float _2184 = _2183 + cbSceneParam._m0[79u].w;
        float _2185 = cbSceneParam._m0[79u].w - _2179;
        float _2191 = sqrt(((_2178 * _2178) + (_2179 * _2179)) + (_2181 * _2181));
        float _2194 = (1.0 - (cbSceneParam._m0[77u].w / _2166)) * _2191;
        float _2200 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2202 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2411;
        if (abs((_2180 - _2183) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2411 = ((((_2184 > 0.0) ? exp2(_2200 * _2184) : (2.0 - exp2(_2202 * _2184))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2194;
        }
        else
        {
            float _2346 = 1.0 / cbSceneParam._m0[80u].x;
            float _2347 = isnan(_2185) ? _2184 : (isnan(_2184) ? _2185 : max(_2184, _2185));
            float _2348 = isnan(_2185) ? _2184 : (isnan(_2184) ? _2185 : min(_2184, _2185));
            float _2357 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : min(_2347, 0.0));
            float _2358 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : min(_2348, 0.0));
            _2411 = ((abs(_2191 / _2180) * cbSceneParam._m0[80u].y) * ((((_2357 - _2358) * 2.0) - ((exp2(_2200 * (isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0)))) - exp2(_2200 * (isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0))))) * _2346)) - ((exp2(_2202 * _2357) - exp2(_2202 * _2358)) * _2346))) + (_2194 * cbSceneParam._m0[80u].z);
        }
        vec4 _2413 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2104, _2105, 1.0), 0.0);
        float _2422 = exp2((_2411 * (-1.44269502162933349609375)) * (1.0 - _2413.w));
        float _2423 = log2(_2422);
        float _2439 = log2(_2124);
        _2204 = (exp2(_2439 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].x)) * _2413.x) / cbSceneParam._m0[78u].x)) + _2121;
        _2206 = (exp2(_2439 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].y)) * _2413.y) / cbSceneParam._m0[78u].y)) + _2122;
        _2208 = (exp2(_2439 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].z)) * _2413.z) / cbSceneParam._m0[78u].z)) + _2123;
        _2210 = _2422 * _2124;
    }
    else
    {
        _2204 = _2121;
        _2206 = _2122;
        _2208 = _2123;
        _2210 = _2124;
    }
    float _2222 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2223 = _2222 == 3.0;
    float _2224 = log2(_2210);
    float _2231 = exp2(_2224 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0)));
    float _2232 = exp2(_2224 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0)));
    float _2233 = exp2(_2224 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0)));
    float _2242 = (_2222 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2242 * (_2223 ? _2231 : (_2231 + (cbSceneParam._m0[72u].w * _2204)));
    SV_Target.y = _2242 * (_2223 ? _2232 : (_2232 + (cbSceneParam._m0[72u].w * _2206)));
    SV_Target.z = _2242 * (_2223 ? _2233 : (_2233 + (cbSceneParam._m0[72u].w * _2208)));
    SV_Target.w = cbInstanceData._m0[_2096].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2096].w;
}


