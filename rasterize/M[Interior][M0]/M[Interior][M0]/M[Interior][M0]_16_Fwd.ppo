#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1220;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    bool _374 = _352 > 0.0;
    float _376 = _374 ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _383 = _357 + (-0.5);
    float _386 = _358 + (-0.5);
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_383 + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_386 + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _430 = (_416 - (_416 * _286)) * cbMtdParam._m0[9u].x;
    float _431 = (_417 - (_417 * _286)) * cbMtdParam._m0[9u].y;
    float _432 = cbMtdParam._m0[9u].z * (_418 - (_418 * _286));
    float _454 = (cbMtdParam._m0[21u].x * _345) * _351;
    float _456 = (cbMtdParam._m0[20u].w * _346) * _351;
    bool _457 = _454 > 0.0;
    float _462;
    if (_457)
    {
        _462 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _462 = frontier_phi_11_10_ladder;
    }
    bool _464 = _456 > 0.0;
    float _469;
    if (_464)
    {
        _469 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _469 = frontier_phi_15_14_ladder;
    }
    float _472 = _374 ? (cbMtdParam._m0[16u].z / _352) : 5000.0;
    float _473 = isnan(_469) ? _462 : (isnan(_462) ? _469 : min(_462, _469));
    float _474 = isnan(_472) ? _473 : (isnan(_473) ? _472 : min(_473, _472));
    float _478 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _482 = ((_474 * _352) + _478) / _478;
    float _487 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _489 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _505 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_474 * _454)) / _482) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_474 * _456)) / _482) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _510 = _505.x * cbMtdParam._m0[10u].x;
    float _511 = _505.y * cbMtdParam._m0[10u].y;
    float _512 = _505.z * cbMtdParam._m0[10u].z;
    float _520;
    if (_457)
    {
        _520 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_464)
    {
        _526 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_472) ? _528 : (isnan(_528) ? _472 : min(_528, _472));
    float _536 = ((_529 * _352) + _478) / _478;
    vec4 _550 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_529 * _454)) / _536) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_529 * _456)) / _536) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _552 = _550.w;
    float _554 = _552 - (_552 * _286);
    float _564 = (_554 * ((_510 - _430) - (_510 * _286))) + _430;
    float _565 = (_554 * ((_511 - _431) - (_511 * _286))) + _431;
    float _566 = (_554 * ((_512 - _432) - (_512 * _286))) + _432;
    float _581 = (cbMtdParam._m0[21u].z * _345) * _351;
    float _583 = (cbMtdParam._m0[21u].y * _346) * _351;
    bool _584 = _581 > 0.0;
    float _589;
    if (_584)
    {
        _589 = (1.0 - _357) / _581;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _357) / _581;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _589 = frontier_phi_27_26_ladder;
    }
    bool _591 = _583 > 0.0;
    float _596;
    if (_591)
    {
        _596 = (1.0 - _358) / _583;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _358) / _583;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _596 = frontier_phi_31_30_ladder;
    }
    float _599 = _374 ? (cbMtdParam._m0[18u].x / _352) : 5000.0;
    float _600 = isnan(_596) ? _589 : (isnan(_589) ? _596 : min(_589, _596));
    float _601 = isnan(_599) ? _600 : (isnan(_600) ? _599 : min(_600, _599));
    float _605 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _609 = ((_601 * _352) + _605) / _605;
    float _614 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _616 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _633 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_383 + (_601 * _581)) / _609) + 0.5) + _614) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_386 + (_601 * _583)) / _609) + 0.5) + _616) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _638 = _633.x * cbMtdParam._m0[14u].x;
    float _639 = _633.y * cbMtdParam._m0[14u].y;
    float _640 = _633.z * cbMtdParam._m0[14u].z;
    float _648;
    if (_584)
    {
        _648 = (1.0 - _357) / _581;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _357) / _581;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _648 = frontier_phi_35_34_ladder;
    }
    float _654;
    if (_591)
    {
        _654 = (1.0 - _358) / _583;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _358) / _583;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _654 = frontier_phi_39_38_ladder;
    }
    float _656 = isnan(_654) ? _648 : (isnan(_648) ? _654 : min(_648, _654));
    float _657 = isnan(_599) ? _656 : (isnan(_656) ? _599 : min(_656, _599));
    float _664 = ((_657 * _352) + _605) / _605;
    vec4 _678 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_383 + (_657 * _581)) / _664) + 0.5) + _614) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_386 + (_657 * _583)) / _664) + 0.5) + _616) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _680 = _678.w;
    float _682 = _680 - (_680 * _286);
    float _693 = 0.5 - (_286 * 0.5);
    float _703 = (((_564 - _299) + (_682 * ((_638 - _564) - (_638 * _286)))) * _693) + _299;
    float _704 = (((_565 - _301) + (_682 * ((_639 - _565) - (_639 * _286)))) * _693) + _301;
    float _705 = (((_566 - _303) + (_682 * ((_640 - _566) - (_640 * _286)))) * _693) + _303;
    vec4 _717 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _725 = (_717.x * 2.0) + (-1.0);
    float _727 = (_717.y * 2.0) + (-1.0);
    float _728 = dot(vec2(_725, _727), vec2(_725, _727));
    float _3374 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _733 = sqrt(1.0 - (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))));
    float _734 = _717.z * _286;
    float _737 = fma(_733, _195, fma(_727, _202, _725 * _188));
    float _740 = fma(_733, _196, fma(_727, _203, _725 * _189));
    float _743 = fma(_733, _197, fma(_727, _204, _725 * _190));
    float _747 = inversesqrt(dot(vec3(_737, _740, _743), vec3(_737, _740, _743)));
    float _748 = _747 * _737;
    float _749 = _747 * _740;
    float _750 = _747 * _743;
    float _3385 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _751 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3407 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3418 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _770 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _774 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _775 = _259 * _774;
    float _776 = _260 * _774;
    float _777 = _261 * _774;
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _804 = fma(_750, cbSceneParam._m0[5u].z, fma(_749, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _748));
    float _807 = fma(_750, cbSceneParam._m0[6u].z, fma(_749, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _748));
    float _810 = fma(_750, cbSceneParam._m0[7u].z, fma(_749, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _748));
    uint _823 = uint(roundEven(NORMAL.w)) * 13u;
    uint _826 = (_823 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _832 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_826].x;
    float _833 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_826].y;
    float _834 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_826].z;
    float _3429 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    vec4 _846 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _849 = _846.x * TEXCOORD.z;
    float _850 = dot(vec3(_748, _749, _750), vec3(_775, _776, _777));
    float _853 = _850 * 2.0;
    float _857 = (_853 * _748) - _775;
    float _858 = (_853 * _749) - _776;
    float _859 = (_853 * _750) - _777;
    float _863 = abs(dot(vec3(_775, _776, _777), vec3(_748, _749, _750)));
    float _3462 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _865 = sqrt(_751);
    float _878 = exp2((_865 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_865 * 3.0));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1219;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _946 = fma(_918, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910));
        float _950 = fma(_918, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910));
        float _954 = fma(_918, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910));
        float _977 = _910 + _748;
        float _978 = _914 + _749;
        float _979 = _918 + _750;
        float _989 = fma(_979, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977)) - _946;
        float _990 = fma(_979, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977)) - _950;
        float _991 = fma(_979, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977)) - _954;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_946 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_950 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[34u].z) + ((((((_954 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1047 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1013.x + (-0.5));
        float _1049 = _1047 * (_1013.y + (-0.5));
        float _1050 = _1047 * (_1013.z + (-0.5));
        float _1057 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1020.x + (-0.5));
        float _1059 = _1057 * (_1020.y + (-0.5));
        float _1060 = _1057 * (_1020.z + (-0.5));
        float _1067 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1027.x + (-0.5));
        float _1069 = _1067 * (_1027.y + (-0.5));
        float _1070 = _1067 * (_1027.z + (-0.5));
        float _1077 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1034.x + (-0.5));
        float _1079 = _1077 * (_1034.y + (-0.5));
        float _1080 = _1077 * (_1034.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1101 = (dot(vec3(_748, _749, _750), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1111 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3510 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1113 + 1.0))) + _1118) * _1081;
        float _1128 = _1049 * 0.5;
        float _1129 = _1059 * 0.5;
        float _1130 = _1069 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_748, _749, _750), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3543 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1155 + 1.0))) + _1160) * _1082;
        float _1170 = _1050 * 0.5;
        float _1171 = _1060 * 0.5;
        float _1172 = _1070 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_748, _749, _750), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3576 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1197 + 1.0))) + _1202) * _1083;
        _1219 = _1050;
        _1221 = _1049;
        _1222 = _1048;
        _1223 = _1060;
        _1224 = _1059;
        _1225 = _1058;
        _1226 = _1070;
        _1227 = _1069;
        _1228 = _1068;
        _1229 = _1083;
        _1230 = _1082;
        _1231 = _1081;
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _1220;
        _1221 = _1220;
        _1222 = _1220;
        _1223 = _1220;
        _1224 = _1220;
        _1225 = _1220;
        _1226 = _1220;
        _1227 = _1220;
        _1228 = _1220;
        _1229 = _1220;
        _1230 = _1220;
        _1231 = _1220;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_918, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910));
        float _1264 = fma(_918, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910));
        float _1268 = fma(_918, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910));
        float _1291 = _910 + _748;
        float _1292 = _914 + _749;
        float _1293 = _918 + _750;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_748, _749, _750), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3639 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_748, _749, _750), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3672 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_748, _749, _750), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3705 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1220;
        _1530 = _1220;
        _1531 = _1220;
        _1532 = _1220;
        _1533 = _1220;
        _1534 = _1220;
        _1535 = _1220;
        _1536 = _1220;
        _1537 = _1220;
        _1538 = _1220;
        _1539 = _1220;
        _1540 = _1220;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1232)) + _1232;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1233)) + _1233;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1234)) + _1234;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _857 * 0.5;
    float _1598 = _858 * 0.5;
    float _1599 = _859 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1219, _1223, _1226, _1229));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _751);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_918, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_918, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_918, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_859, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857));
        float _1727 = fma(_859, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857));
        float _1730 = fma(_859, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1758 = frontier_phi_54_52_ladder;
        }
        float _2103;
        if (_1727 > 0.0)
        {
            _2103 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2103 = frontier_phi_63_59_ladder;
        }
        float _2403;
        if (_1730 > 0.0)
        {
            _2403 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2403 = frontier_phi_77_70_ladder;
        }
        float _2405 = isnan(_2103) ? _1758 : (isnan(_1758) ? _2103 : min(_1758, _2103));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1724) + _1713;
        float _2411 = (_2406 * _1727) + _1717;
        float _2412 = (_2406 * _1730) + _1721;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2413;
        float _2416 = _2413 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2412 > _2416) || ((_2412 < _2414) || ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 < _2414) || (_2410 > _2416))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_53_77_ladder = _2538.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2538.z * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_53_77_ladder;
        _1748 = frontier_phi_53_77_ladder_1;
        _1750 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_857, _858, _859), _1666);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _751);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_918, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_918, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_918, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_859, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857));
        float _1821 = fma(_859, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857));
        float _1824 = fma(_859, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857));
        float _2108;
        if (_1818 > 0.0)
        {
            _2108 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2108 = frontier_phi_65_61_ladder;
        }
        float _2429;
        if (_1821 > 0.0)
        {
            _2429 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2429 = frontier_phi_79_72_ladder;
        }
        float _2598;
        if (_1824 > 0.0)
        {
            _2598 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2598 = frontier_phi_93_88_ladder;
        }
        float _2600 = isnan(_2429) ? _2108 : (isnan(_2108) ? _2429 : min(_2108, _2429));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1818) + _1807;
        float _2606 = (_2601 * _1821) + _1811;
        float _2607 = (_2601 * _1824) + _1815;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_62_93_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_62_93_ladder_2;
        _1845 = frontier_phi_62_93_ladder_1;
        _1847 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_857, _858, _859), _1755);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1859 = ((((1.0 - _878) * ((_865 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_878 * _865)) * _849;
    float _1860 = _1859 * ((cbModelParam._m0[1u].w * (_1843 - _1746)) + _1746);
    float _1861 = _1859 * ((cbModelParam._m0[1u].w * (_1845 - _1748)) + _1748);
    float _1862 = _1859 * ((cbModelParam._m0[1u].w * (_1847 - _1750)) + _1750);
    float _1865 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    uvec4 _1881 = floatBitsToUint(cbInstanceData._m0[_823 + 5u]);
    uint _1883 = _1881.x * 14u;
    uint _1884 = _1883 + 13u;
    float _1889 = _849 + (-1.0);
    float _1892 = (cbLight._m0[_1884].x * _1889) + 1.0;
    float _1893 = (cbLight._m0[_1884].y * _1889) + 1.0;
    uint _1894 = _1883 + 5u;
    float _1900 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1904 = _1883 + 4u;
    float _1910 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1914 = _1883 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_748, _749, _750));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_748, _749, _750));
    float _3841 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _3852 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1894].x * _1900) * _1935) + ((cbLight._m0[_1904].x * _1910) * _1933);
    float _1943 = ((_1900 * cbLight._m0[_1894].y) * _1935) + ((_1910 * cbLight._m0[_1904].y) * _1933);
    float _1944 = ((_1900 * cbLight._m0[_1894].z) * _1935) + ((_1910 * cbLight._m0[_1904].z) * _1933);
    uint _1946 = _1883 + 8u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _751) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1883].x + _775;
    float _1962 = cbLight._m0[_1883].y + _776;
    float _1963 = cbLight._m0[_1883].z + _777;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_1883].xyz));
    float _3863 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _1975 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1976 = dot(vec3(_748, _749, _750), vec3(_1968, _1969, _1970));
    float _3885 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_1968, _1969, _1970));
    float _3896 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1960 * _1960;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1999 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2000 = 1.0 - _1960;
    float _2011 = (0.5 / (((_1975 * ((_1974 * _2000) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2000) + _1960) * _1974))) * _1974;
    float _3907 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    uint _2024 = _1883 + 9u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _751) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1914].x + _775;
    float _2038 = cbLight._m0[_1914].y + _776;
    float _2039 = cbLight._m0[_1914].z + _777;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_748, _749, _750), vec3(cbLight._m0[_1914].xyz));
    float _3918 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _2051 = dot(vec3(_748, _749, _750), vec3(_2044, _2045, _2046));
    float _3929 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _2055 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2044, _2045, _2046));
    float _3940 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2059 = _2036 * _2036;
    float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
    float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2073 = 1.0 - _2036;
    float _2083 = (0.5 / (((_1975 * ((_2050 * _2073) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2073) + _2036) * _2050))) * _2050;
    float _3951 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2085 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
    float _2095 = (((_2072 * cbLight._m0[_2024].x) * _2085) * _1900) + (((_1999 * cbLight._m0[_1946].x) * _2013) * _1910);
    float _2096 = (((_2072 * cbLight._m0[_2024].y) * _2085) * _1900) + (((_1999 * cbLight._m0[_1946].y) * _2013) * _1910);
    float _2097 = (((_2072 * cbLight._m0[_2024].z) * _2085) * _1900) + (((_1999 * cbLight._m0[_1946].z) * _2013) * _1910);
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    if (_1881.y == 0u)
    {
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2152;
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2152;
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2152;
        uvec4 _2167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2168 = _2167.x;
        uint _2179 = uint((float(_2167.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2168))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2168)));
        float _2189 = (log2(_2155 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2190 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        uint _2193 = uint(isnan(14.0) ? _2190 : (isnan(_2190) ? 14.0 : min(_2190, 14.0)));
        uvec4 _2198 = texelFetch(g_lightClusterGridBuffer, int(((_2193 << 2u) + (_2179 << 6u)) >> 2u));
        uint _2199 = _2198.x;
        uint _2200 = _2167.z;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((((1u << ((_2200 >> 4u) & 15u)) + 4294967295u) & _2199) == 0u) || ((_2200 & 240u) == 0u))
        {
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
        }
        else
        {
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            uint _2472 = 0u;
            uint _2481;
            bool _2482;
            for (;;)
            {
                _2481 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2472 << 2u)) >> 2u)).x;
                _2482 = _2481 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2482)
                {
                    frontier_phi_90_pred = _2471;
                    frontier_phi_90_pred_1 = _2466;
                    frontier_phi_90_pred_2 = _2467;
                    frontier_phi_90_pred_3 = _2468;
                    frontier_phi_90_pred_4 = _2469;
                    frontier_phi_90_pred_5 = _2470;
                }
                else
                {
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    uint _2647;
                    _2641 = _2466;
                    _2642 = _2467;
                    _2643 = _2468;
                    _2644 = _2469;
                    _2645 = _2470;
                    _2646 = _2471;
                    _2647 = _2481;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    for (;;)
                    {
                        uint _2651 = uint(findLSB(_2647)) + (_2472 << 5u);
                        uint _2648 = (_2647 + 4294967295u) & _2647;
                        uint _2653 = _2651 * 48u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2673 = (_2651 * 48u) + 4u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2692 = (_2651 * 48u) + 8u;
                        vec3 _2703 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x));
                        float _2707 = _2667.x - _2153;
                        float _2708 = _2667.y - _2154;
                        float _2709 = _2667.z - _2155;
                        float _2710 = dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709));
                        float _2713 = inversesqrt(_2710);
                        float _2714 = _2713 * _2707;
                        float _2715 = _2713 * _2708;
                        float _2716 = _2713 * _2709;
                        float _2717 = dot(vec3(_804, _807, _810), vec3(_2714, _2715, _2716));
                        float _2722 = 1.0 - (_2710 * _2667.w);
                        float _3972 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2723 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2724 = sqrt(_2710) * _2686.w;
                        float _2727 = 1.39999997615814208984375 / (_2724 + 1.39999997615814208984375);
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * _2717) + _2728;
                        float _2734 = _2724 * _2724;
                        float _2738 = ((isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))) * _2723) / ((_2734 * 0.699999988079071044921875) + 1.0);
                        float _2742 = (-0.0) - _2153;
                        float _2743 = (-0.0) - _2154;
                        float _2744 = (-0.0) - _2155;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2749 = _2748 * _2742;
                        float _2750 = _2748 * _2743;
                        float _2751 = _2748 * _2744;
                        float _2759 = exp2(log2(1.0 / ((_2734 * 3.5) + 5.0)) * 0.25);
                        float _2760 = 1.0 - _865;
                        float _2767 = sqrt(1.0 - ((1.0 - (_2760 * _2760)) * (1.0 - (_2759 * _2759))));
                        float _2768 = _2767 * _2767;
                        float _2769 = _2768 * _2768;
                        float _2770 = _2749 + _2714;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2780 = dot(vec3(_804, _807, _810), vec3(_2749, _2750, _2751));
                        float _3988 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2784 = dot(vec3(_804, _807, _810), vec3(_2776 * _2770, _2776 * _2771, _2776 * _2772));
                        float _3999 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2791 = ((_2787 * _2787) * (_2769 + (-1.0))) + 1.0;
                        float _2792 = _2727 * _2768;
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * _2717) + _2793;
                        float _4010 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2798 = 1.0 - _2768;
                        float _2808 = (0.5 / (((_2797 * ((_2783 * _2798) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2797 * _2798) + _2768) * _2783))) * _2797;
                        float _4021 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2819 = (((_2769 * 3.1415927410125732421875) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) / ((_2791 * _2791) * ((_2734 * 2.1991131305694580078125) + 3.141590118408203125))) * _2723;
                        _2550 = (_2738 * _2686.x) + _2644;
                        _2551 = (_2738 * _2686.y) + _2645;
                        _2552 = (_2738 * _2686.z) + _2646;
                        _2547 = (_2819 * _2703.x) + _2641;
                        _2548 = (_2819 * _2703.y) + _2642;
                        _2549 = (_2819 * _2703.z) + _2643;
                        if (_2648 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2641 = _2547;
                            _2642 = _2548;
                            _2643 = _2549;
                            _2644 = _2550;
                            _2645 = _2551;
                            _2646 = _2552;
                            _2647 = _2648;
                        }
                    }
                    frontier_phi_90_pred = _2552;
                    frontier_phi_90_pred_1 = _2547;
                    frontier_phi_90_pred_2 = _2548;
                    frontier_phi_90_pred_3 = _2549;
                    frontier_phi_90_pred_4 = _2550;
                    frontier_phi_90_pred_5 = _2551;
                }
                _2301 = frontier_phi_90_pred;
                _2291 = frontier_phi_90_pred_1;
                _2293 = frontier_phi_90_pred_2;
                _2295 = frontier_phi_90_pred_3;
                _2297 = frontier_phi_90_pred_4;
                _2299 = frontier_phi_90_pred_5;
                uint _2473 = _2472 + 1u;
                if (_2473 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2466 = _2291;
                    _2467 = _2293;
                    _2468 = _2295;
                    _2469 = _2297;
                    _2470 = _2299;
                    _2471 = _2301;
                    _2472 = _2473;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
        }
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.z;
        uint _2307 = (_2305 >> 8u) & 15u;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        if (((4294967295u << _2307) & _2199) == 0u)
        {
            _2434 = _2290;
            _2436 = _2292;
            _2438 = _2294;
            _2440 = _2296;
            _2442 = _2298;
            _2444 = _2300;
        }
        else
        {
            float _2459 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
            float _2460 = _2459 * _2153;
            float _2461 = _2459 * _2154;
            float _2462 = _2459 * _2155;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2307 < ((_2305 >> 12u) & 15u))
            {
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2445;
                float _2624 = _2290;
                float _2625 = _2292;
                float _2626 = _2294;
                float _2627 = _2296;
                float _2628 = _2298;
                float _2629 = _2300;
                uint _2630 = _2307;
                uint _2639;
                bool _2640;
                for (;;)
                {
                    _2639 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                    _2640 = _2639 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2640)
                    {
                        frontier_phi_99_pred = _2627;
                        frontier_phi_99_pred_1 = _2626;
                        frontier_phi_99_pred_2 = _2625;
                        frontier_phi_99_pred_3 = _2624;
                        frontier_phi_99_pred_4 = _2629;
                        frontier_phi_99_pred_5 = _2628;
                    }
                    else
                    {
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _2858 = _2624;
                        float _2859 = _2625;
                        float _2860 = _2626;
                        float _2861 = _2627;
                        float _2862 = _2628;
                        float _2863 = _2629;
                        uint _2864 = _2639;
                        uint _2865;
                        vec4 _2890;
                        float _2891;
                        vec4 _2906;
                        vec3 _2918;
                        vec4 _2933;
                        vec4 _2948;
                        float _2994;
                        bool _2995;
                        for (;;)
                        {
                            uint _2875 = ((_2630 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2864));
                            _2865 = (_2864 + 4294967295u) & _2864;
                            uint _2877 = _2875 * 40u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2891 = _2890.w;
                            uint _2893 = (_2875 * 40u) + 4u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2875 * 40u) + 8u;
                            _2918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x));
                            uint _2920 = (_2875 * 40u) + 16u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2935 = (_2875 * 40u) + 20u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2950 = (_2875 * 40u) + 24u;
                            vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2969 = (_2875 * 40u) + 28u;
                            vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            _2994 = fma(_2155, _2982.z, fma(_2154, _2982.y, _2982.x * _2153)) + _2982.w;
                            _2995 = !((fma(_2155, _2963.z, fma(_2154, _2963.y, _2963.x * _2153)) + _2963.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2995)
                            {
                                float _3022 = _2890.x - _2153;
                                float _3023 = _2890.y - _2154;
                                float _3024 = _2890.z - _2155;
                                float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                                float _3028 = inversesqrt(_3025);
                                float _3029 = _3028 * _3022;
                                float _3030 = _3028 * _3023;
                                float _3031 = _3028 * _3024;
                                float _3035 = 1.0 - (_3025 / (_2891 * _2891));
                                float _4032 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3040 = sqrt(_3025) * _2906.w;
                                float _3042 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                                float _3043 = _3042 * _3042;
                                float _3046 = ((1.0 - _3043) * dot(vec3(_3029, _3030, _3031), vec3(_804, _807, _810))) + _3043;
                                float _3049 = _3040 * _3040;
                                float _3053 = (fma(_2155, _2933.z, fma(_2154, _2933.y, _2933.x * _2153)) + _2933.w) / _2994;
                                float _3054 = (fma(_2155, _2948.z, fma(_2154, _2948.y, _2948.x * _2153)) + _2948.w) / _2994;
                                float _3058 = 1.0 - dot(vec2(_3053, _3054), vec2(_3053, _3054));
                                float _4048 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3060 = _3059 * (((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3036) / ((_3049 * 0.699999988079071044921875) + 1.0));
                                float _3072 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                                float _3073 = 1.0 - _865;
                                float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                                float _3081 = _3080 * _3080;
                                float _3082 = _3081 * _3081;
                                float _3083 = _3029 - _2460;
                                float _3084 = _3030 - _2461;
                                float _3085 = _3031 - _2462;
                                float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                                float _3093 = dot(vec3(_804, _807, _810), vec3((-0.0) - _2460, (-0.0) - _2461, (-0.0) - _2462));
                                float _4059 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3096 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3097 = dot(vec3(_804, _807, _810), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                                float _4070 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3100 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                                float _3105 = _3042 * _3081;
                                float _3106 = _3105 * _3105;
                                float _3112 = ((1.0 - _3106) * dot(vec3(_804, _807, _810), vec3(_3029, _3030, _3031))) + _3106;
                                float _4081 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3114 = 1.0 - _3081;
                                float _3124 = (0.5 / (((_3113 * ((_3096 * _3114) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3113 * _3114) + _3081) * _3096))) * _3113;
                                float _4092 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3134 = (_3059 * _3036) * (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) / ((_3104 * _3104) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3060 * _2906.z;
                                frontier_phi_105_pred_1 = _3134 * _2918.x;
                                frontier_phi_105_pred_2 = _3134 * _2918.y;
                                frontier_phi_105_pred_3 = _3134 * _2918.z;
                                frontier_phi_105_pred_4 = _3060 * _2906.x;
                                frontier_phi_105_pred_5 = _3060 * _2906.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3143 = frontier_phi_105_pred;
                            _3138 = frontier_phi_105_pred_1;
                            _3139 = frontier_phi_105_pred_2;
                            _3140 = frontier_phi_105_pred_3;
                            _3141 = frontier_phi_105_pred_4;
                            _3142 = frontier_phi_105_pred_5;
                            _2848 = _3141 + _2861;
                            _2849 = _3142 + _2862;
                            _2850 = _3143 + _2863;
                            _2845 = _3138 + _2858;
                            _2846 = _3139 + _2859;
                            _2847 = _3140 + _2860;
                            if (_2865 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2865;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2848;
                        frontier_phi_99_pred_1 = _2847;
                        frontier_phi_99_pred_2 = _2846;
                        frontier_phi_99_pred_3 = _2845;
                        frontier_phi_99_pred_4 = _2850;
                        frontier_phi_99_pred_5 = _2849;
                    }
                    _2441 = frontier_phi_99_pred;
                    _2439 = frontier_phi_99_pred_1;
                    _2437 = frontier_phi_99_pred_2;
                    _2435 = frontier_phi_99_pred_3;
                    _2445 = frontier_phi_99_pred_4;
                    _2443 = frontier_phi_99_pred_5;
                    uint _2631 = _2630 + 1u;
                    if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2624 = _2435;
                        _2625 = _2437;
                        _2626 = _2439;
                        _2627 = _2441;
                        _2628 = _2443;
                        _2629 = _2445;
                        _2630 = _2631;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2445;
                frontier_phi_81_82_ladder_1 = _2441;
                frontier_phi_81_82_ladder_2 = _2439;
                frontier_phi_81_82_ladder_3 = _2437;
                frontier_phi_81_82_ladder_4 = _2435;
                frontier_phi_81_82_ladder_5 = _2443;
            }
            else
            {
                frontier_phi_81_82_ladder = _2300;
                frontier_phi_81_82_ladder_1 = _2296;
                frontier_phi_81_82_ladder_2 = _2294;
                frontier_phi_81_82_ladder_3 = _2292;
                frontier_phi_81_82_ladder_4 = _2290;
                frontier_phi_81_82_ladder_5 = _2298;
            }
            _2434 = frontier_phi_81_82_ladder_4;
            _2436 = frontier_phi_81_82_ladder_3;
            _2438 = frontier_phi_81_82_ladder_2;
            _2440 = frontier_phi_81_82_ladder_1;
            _2442 = frontier_phi_81_82_ladder_5;
            _2444 = frontier_phi_81_82_ladder;
        }
        float _2449 = isnan(1.0) ? _849 : (isnan(_849) ? 1.0 : min(_849, 1.0));
        _2212 = (_2449 * _2440) + _1942;
        _2214 = (_2449 * _2442) + _1943;
        _2216 = (_2449 * _2444) + _1944;
        _2218 = ((_2434 * 0.039999999105930328369140625) * _2449) + _2095;
        _2220 = ((_2436 * 0.039999999105930328369140625) * _2449) + _2096;
        _2222 = ((_2438 * 0.039999999105930328369140625) * _2449) + _2097;
    }
    else
    {
        _2212 = _1942;
        _2214 = _1943;
        _2216 = _1944;
        _2218 = _2095;
        _2220 = _2096;
        _2222 = _2097;
    }
    float _4108 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4119 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4130 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2239 = ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2212 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _849))) + ((_2218 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2240 = ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2214 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _849))) + ((_2220 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2241 = ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2216 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _849))) + ((_2222 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    uint _2245 = _823 + 6u;
    float _2253 = _783 / cbSceneParam._m0[86u].x;
    float _2254 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2268 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2253, _2254, (log2((isnan(cbSceneParam._m0[77u].w) ? _770 : (isnan(_770) ? cbSceneParam._m0[77u].w : min(_770, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2270 = _2268.x;
    float _2271 = _2268.y;
    float _2272 = _2268.z;
    float _2273 = _2268.w;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_770 > cbSceneParam._m0[78u].w)
    {
        float _2315 = isnan(_770) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _770 : min(cbSceneParam._m0[80u].w, _770));
        float _2316 = _2315 / _770;
        float _2327 = _2316 * _259;
        float _2328 = _260 * _2316;
        float _2329 = (-0.0) - _2328;
        float _2330 = _2316 * _261;
        float _2332 = (cbSceneParam._m0[77u].w * _2329) / _2315;
        float _2333 = _2332 + cbSceneParam._m0[79u].w;
        float _2334 = cbSceneParam._m0[79u].w - _2328;
        float _2340 = sqrt(((_2327 * _2327) + (_2328 * _2328)) + (_2330 * _2330));
        float _2343 = (1.0 - (cbSceneParam._m0[77u].w / _2315)) * _2340;
        float _2349 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2351 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2560;
        if (abs((_2329 - _2332) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2560 = ((((_2333 > 0.0) ? exp2(_2349 * _2333) : (2.0 - exp2(_2351 * _2333))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2343;
        }
        else
        {
            float _2495 = 1.0 / cbSceneParam._m0[80u].x;
            float _2496 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : max(_2333, _2334));
            float _2497 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : min(_2333, _2334));
            float _2506 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : min(_2496, 0.0));
            float _2507 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : min(_2497, 0.0));
            _2560 = ((abs(_2340 / _2329) * cbSceneParam._m0[80u].y) * ((((_2506 - _2507) * 2.0) - ((exp2(_2349 * (isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0)))) - exp2(_2349 * (isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0))))) * _2495)) - ((exp2(_2351 * _2506) - exp2(_2351 * _2507)) * _2495))) + (_2343 * cbSceneParam._m0[80u].z);
        }
        vec4 _2562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2253, _2254, 1.0), 0.0);
        float _2571 = exp2((_2560 * (-1.44269502162933349609375)) * (1.0 - _2562.w));
        float _2572 = log2(_2571);
        float _2588 = log2(_2273);
        _2353 = (exp2(_2588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].x)) * _2562.x) / cbSceneParam._m0[78u].x)) + _2270;
        _2355 = (exp2(_2588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].y)) * _2562.y) / cbSceneParam._m0[78u].y)) + _2271;
        _2357 = (exp2(_2588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].z)) * _2562.z) / cbSceneParam._m0[78u].z)) + _2272;
        _2359 = _2571 * _2273;
    }
    else
    {
        _2353 = _2270;
        _2355 = _2271;
        _2357 = _2272;
        _2359 = _2273;
    }
    float _2371 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2372 = _2371 == 3.0;
    float _2373 = log2(_2359);
    float _2380 = exp2(_2373 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0)));
    float _2381 = exp2(_2373 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0)));
    float _2382 = exp2(_2373 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0)));
    float _2391 = (_2371 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2391 * (_2372 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2353)));
    SV_Target.y = _2391 * (_2372 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2355)));
    SV_Target.z = _2391 * (_2372 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2357)));
    SV_Target.w = cbInstanceData._m0[_2245].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2245].w;
}


