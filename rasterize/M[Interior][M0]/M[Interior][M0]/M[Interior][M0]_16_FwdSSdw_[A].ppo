#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1267;
float _3449;
float _3450;
float _3451;
float _3452;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _335 = cbMtdParam._m0[22u].y + _265;
    float _336 = cbMtdParam._m0[22u].z + _266;
    float _337 = cbMtdParam._m0[22u].w + _267;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_194, _195, _196));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_208, _209, _210));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _360 = (cbMtdParam._m0[19u].x * _351) * _357;
    float _362 = (cbMtdParam._m0[18u].w * _352) * _357;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_360 > 0.0)
    {
        _370 = (1.0 - _363) / _360;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _360;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[15u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_389 + (_384 * _360)) / _395) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _436 = (_422 - (_422 * _292)) * cbMtdParam._m0[9u].x;
    float _437 = (_423 - (_423 * _292)) * cbMtdParam._m0[9u].y;
    float _438 = cbMtdParam._m0[9u].z * (_424 - (_424 * _292));
    float _460 = (cbMtdParam._m0[21u].x * _351) * _357;
    float _462 = (cbMtdParam._m0[20u].w * _352) * _357;
    bool _463 = _460 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _468 = frontier_phi_11_10_ladder;
    }
    bool _470 = _462 > 0.0;
    float _475;
    if (_470)
    {
        _475 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _475 = frontier_phi_15_14_ladder;
    }
    float _478 = _380 ? (cbMtdParam._m0[16u].z / _358) : 5000.0;
    float _479 = isnan(_475) ? _468 : (isnan(_468) ? _475 : min(_468, _475));
    float _480 = isnan(_478) ? _479 : (isnan(_479) ? _478 : min(_479, _478));
    float _484 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _488 = ((_480 * _358) + _484) / _484;
    float _493 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _495 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _511 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_480 * _460)) / _488) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_480 * _462)) / _488) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516 = _511.x * cbMtdParam._m0[10u].x;
    float _517 = _511.y * cbMtdParam._m0[10u].y;
    float _518 = _511.z * cbMtdParam._m0[10u].z;
    float _526;
    if (_463)
    {
        _526 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _526 = frontier_phi_19_18_ladder;
    }
    float _532;
    if (_470)
    {
        _532 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _532 = frontier_phi_23_22_ladder;
    }
    float _534 = isnan(_532) ? _526 : (isnan(_526) ? _532 : min(_526, _532));
    float _535 = isnan(_478) ? _534 : (isnan(_534) ? _478 : min(_534, _478));
    float _542 = ((_535 * _358) + _484) / _484;
    vec4 _556 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_535 * _460)) / _542) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_535 * _462)) / _542) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _558 = _556.w;
    float _560 = _558 - (_558 * _292);
    float _570 = (_560 * ((_516 - _436) - (_516 * _292))) + _436;
    float _571 = (_560 * ((_517 - _437) - (_517 * _292))) + _437;
    float _572 = (_560 * ((_518 - _438) - (_518 * _292))) + _438;
    float _587 = (cbMtdParam._m0[21u].z * _351) * _357;
    float _589 = (cbMtdParam._m0[21u].y * _352) * _357;
    bool _590 = _587 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _595 = frontier_phi_27_26_ladder;
    }
    bool _597 = _589 > 0.0;
    float _602;
    if (_597)
    {
        _602 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _602 = frontier_phi_31_30_ladder;
    }
    float _605 = _380 ? (cbMtdParam._m0[18u].x / _358) : 5000.0;
    float _606 = isnan(_602) ? _595 : (isnan(_595) ? _602 : min(_595, _602));
    float _607 = isnan(_605) ? _606 : (isnan(_606) ? _605 : min(_606, _605));
    float _611 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _615 = ((_607 * _358) + _611) / _611;
    float _620 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _622 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _639 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_607 * _587)) / _615) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_607 * _589)) / _615) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _644 = _639.x * cbMtdParam._m0[14u].x;
    float _645 = _639.y * cbMtdParam._m0[14u].y;
    float _646 = _639.z * cbMtdParam._m0[14u].z;
    float _654;
    if (_590)
    {
        _654 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _654 = frontier_phi_35_34_ladder;
    }
    float _660;
    if (_597)
    {
        _660 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _660 = frontier_phi_39_38_ladder;
    }
    float _662 = isnan(_660) ? _654 : (isnan(_654) ? _660 : min(_654, _660));
    float _663 = isnan(_605) ? _662 : (isnan(_662) ? _605 : min(_662, _605));
    float _670 = ((_663 * _358) + _611) / _611;
    vec4 _684 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_663 * _587)) / _670) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_663 * _589)) / _670) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _686 = _684.w;
    float _688 = _686 - (_686 * _292);
    float _699 = 0.5 - (_292 * 0.5);
    float _709 = (((_570 - _305) + (_688 * ((_644 - _570) - (_644 * _292)))) * _699) + _305;
    float _710 = (((_571 - _307) + (_688 * ((_645 - _571) - (_645 * _292)))) * _699) + _307;
    float _711 = (((_572 - _309) + (_688 * ((_646 - _572) - (_646 * _292)))) * _699) + _309;
    vec4 _723 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _731 = (_723.x * 2.0) + (-1.0);
    float _733 = (_723.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_731, _733), vec2(_731, _733));
    float _3511 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _739 = sqrt(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))));
    float _740 = _723.z * _292;
    float _743 = fma(_739, _201, fma(_733, _208, _731 * _194));
    float _746 = fma(_739, _202, fma(_733, _209, _731 * _195));
    float _749 = fma(_739, _203, fma(_733, _210, _731 * _196));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _3522 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _757 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3544 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _3555 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _780 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _781 = _265 * _780;
    float _782 = _266 * _780;
    float _783 = _267 * _780;
    vec4 _788 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _790 = _788.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _948 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _954 = (cbMatDynParam._m0[5u].x * _948) + cbMatDynParam._m0[5u].y;
        float _3566 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _959 = (cbMatDynParam._m0[5u].z * _948) + cbMatDynParam._m0[5u].w;
        float _3577 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) - _955)) + _955) < ((_790 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _803 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _804 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _823 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _826 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _829 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _842 = uint(roundEven(NORMAL.w)) * 13u;
    uint _844 = _842 + 9u;
    uint _845 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3588 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    vec4 _865 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _803, cbSceneParam._m0[86u].y * _804));
    float _868 = _865.x * TEXCOORD.z;
    float _869 = dot(vec3(_754, _755, _756), vec3(_781, _782, _783));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _754) - _781;
    float _877 = (_872 * _755) - _782;
    float _878 = (_872 * _756) - _783;
    float _882 = abs(dot(vec3(_781, _782, _783), vec3(_754, _755, _756)));
    float _3621 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_757);
    float _897 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _993 = fma(_937, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929));
        float _997 = fma(_937, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929));
        float _1001 = fma(_937, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929));
        float _1024 = _929 + _754;
        float _1025 = _933 + _755;
        float _1026 = _937 + _756;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _993;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _997;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _1001;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_993 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_997 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_1001 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_754, _755, _756), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3669 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_754, _755, _756), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3702 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_754, _755, _756), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3735 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_937, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929));
        float _1314 = fma(_937, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929));
        float _1318 = fma(_937, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929));
        float _1341 = _929 + _754;
        float _1342 = _933 + _755;
        float _1343 = _937 + _756;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_754, _755, _756), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3798 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_754, _755, _756), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _3831 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_754, _755, _756), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _3864 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = _1267;
        _1589 = _1267;
        _1590 = _1267;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1279)) + _1279;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1280)) + _1280;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1281)) + _1281;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _876 * 0.5;
    float _1648 = _877 * 0.5;
    float _1649 = _878 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1763 = fma(_937, cbModelParam._m0[13u].z, fma(_933, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929)) + cbModelParam._m0[13u].w;
        float _1767 = fma(_937, cbModelParam._m0[14u].z, fma(_933, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929)) + cbModelParam._m0[14u].w;
        float _1771 = fma(_937, cbModelParam._m0[15u].z, fma(_933, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929)) + cbModelParam._m0[15u].w;
        float _1774 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1777 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1780 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1808;
        if (_1774 > 0.0)
        {
            _1808 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1808 = frontier_phi_57_55_ladder;
        }
        float _2177;
        if (_1777 > 0.0)
        {
            _2177 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2177 = frontier_phi_66_62_ladder;
        }
        float _2485;
        if (_1780 > 0.0)
        {
            _2485 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2485 = frontier_phi_80_73_ladder;
        }
        float _2487 = isnan(_2177) ? _1808 : (isnan(_1808) ? _2177 : min(_1808, _2177));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1774) + _1763;
        float _2493 = (_2488 * _1777) + _1767;
        float _2494 = (_2488 * _1780) + _1771;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2494, cbModelParam._m0[9u].z, fma(_2493, cbModelParam._m0[9u].y, _2492 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2494, cbModelParam._m0[10u].z, fma(_2493, cbModelParam._m0[10u].y, _2492 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2494, cbModelParam._m0[11u].z, fma(_2493, cbModelParam._m0[11u].y, _2492 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_56_80_ladder = _2636.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2636.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2636.x * cbModelParam._m0[1u].y;
        }
        _1796 = frontier_phi_56_80_ladder_2;
        _1798 = frontier_phi_56_80_ladder_1;
        _1800 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1716);
        _1796 = _1784.x * cbModelParam._m0[1u].y;
        _1798 = _1784.y * cbModelParam._m0[1u].y;
        _1800 = _1784.z * cbModelParam._m0[1u].y;
    }
    float _1804 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1804 : min(cbModelParam._m0[25u].w, _1804));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1857 = fma(_937, cbModelParam._m0[21u].z, fma(_933, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929)) + cbModelParam._m0[21u].w;
        float _1861 = fma(_937, cbModelParam._m0[22u].z, fma(_933, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929)) + cbModelParam._m0[22u].w;
        float _1865 = fma(_937, cbModelParam._m0[23u].z, fma(_933, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929)) + cbModelParam._m0[23u].w;
        float _1868 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1871 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1874 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _2182;
        if (_1868 > 0.0)
        {
            _2182 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2182 = frontier_phi_68_64_ladder;
        }
        float _2511;
        if (_1871 > 0.0)
        {
            _2511 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2511 = frontier_phi_82_75_ladder;
        }
        float _2701;
        if (_1874 > 0.0)
        {
            _2701 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2701 = frontier_phi_100_93_ladder;
        }
        float _2703 = isnan(_2511) ? _2182 : (isnan(_2182) ? _2511 : min(_2182, _2511));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _1868) + _1857;
        float _2709 = (_2704 * _1871) + _1861;
        float _2710 = (_2704 * _1874) + _1865;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _1805);
            frontier_phi_65_100_ladder = _2952.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2952.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2952.z * cbModelParam._m0[1u].z;
        }
        _1893 = frontier_phi_65_100_ladder_1;
        _1895 = frontier_phi_65_100_ladder;
        _1897 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1805);
        _1893 = _1877.x * cbModelParam._m0[1u].z;
        _1895 = _1877.y * cbModelParam._m0[1u].z;
        _1897 = _1877.z * cbModelParam._m0[1u].z;
    }
    float _1909 = ((((1.0 - _897) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_897 * _884)) * _868;
    float _1910 = _1909 * ((cbModelParam._m0[1u].w * (_1893 - _1796)) + _1796);
    float _1911 = _1909 * ((cbModelParam._m0[1u].w * (_1895 - _1798)) + _1798);
    float _1912 = _1909 * ((cbModelParam._m0[1u].w * (_1897 - _1800)) + _1800);
    float _1915 = fma(_1912, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1912, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1912, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, _1910 * cbSceneParam._m0[91u].x));
    vec4 _1929 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_803, _804));
    float _1931 = _1929.w;
    float _1943 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1931);
    float _1944 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1931);
    float _1945 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1931);
    uvec4 _1949 = floatBitsToUint(cbInstanceData._m0[_842 + 5u]);
    uint _1951 = _1949.x * 14u;
    uint _1952 = _1951 + 13u;
    float _1957 = _868 + (-1.0);
    float _1960 = (cbLight._m0[_1952].x * _1957) + 1.0;
    float _1961 = (cbLight._m0[_1952].y * _1957) + 1.0;
    uint _1962 = _1951 + 5u;
    float _1968 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1972 = _1951 + 4u;
    float _1981 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1985 = _1951 | 1u;
    float _1996 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_754, _755, _756));
    float _1999 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_754, _755, _756));
    float _4000 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _4011 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2004 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.3183098733425140380859375;
    float _2006 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _2013 = ((cbLight._m0[_1962].x * _1968) * _2006) + (((cbLight._m0[_1972].x * _1943) * _1981) * _2004);
    float _2014 = ((_1968 * cbLight._m0[_1962].y) * _2006) + (((cbLight._m0[_1972].y * _1944) * _1981) * _2004);
    float _2015 = ((_1968 * cbLight._m0[_1962].z) * _2006) + (((cbLight._m0[_1972].z * _1945) * _1981) * _2004);
    uint _2017 = _1951 + 8u;
    float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _757) * 0.949999988079071044921875);
    float _2031 = _2030 * _2030;
    float _2032 = cbLight._m0[_1951].x + _781;
    float _2033 = cbLight._m0[_1951].y + _782;
    float _2034 = cbLight._m0[_1951].z + _783;
    float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
    float _2039 = _2038 * _2032;
    float _2040 = _2038 * _2033;
    float _2041 = _2038 * _2034;
    float _2042 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_1951].xyz));
    float _4022 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2046 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _2047 = dot(vec3(_754, _755, _756), vec3(_2039, _2040, _2041));
    float _4044 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2051 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_2039, _2040, _2041));
    float _4055 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2055 = _2031 * _2031;
    float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
    float _2070 = (exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2071 = 1.0 - _2031;
    float _2082 = (0.5 / (((_2046 * ((_2045 * _2071) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2071) + _2031) * _2045))) * _2045;
    float _4066 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
    uint _2098 = _1951 + 9u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _757) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1985].x + _781;
    float _2112 = cbLight._m0[_1985].y + _782;
    float _2113 = cbLight._m0[_1985].z + _783;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_1985].xyz));
    float _4077 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _2125 = dot(vec3(_754, _755, _756), vec3(_2118, _2119, _2120));
    float _4088 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2118, _2119, _2120));
    float _4099 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2110 * _2110;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2110;
    float _2157 = (0.5 / (((_2046 * ((_2124 * _2147) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2147) + _2110) * _2124))) * _2124;
    float _4110 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    float _2169 = (((_2146 * cbLight._m0[_2098].x) * _2159) * _1968) + ((((cbLight._m0[_2017].x * _1943) * _2070) * _2084) * _1981);
    float _2170 = (((_2146 * cbLight._m0[_2098].y) * _2159) * _1968) + ((((cbLight._m0[_2017].y * _1944) * _2070) * _2084) * _1981);
    float _2171 = (((_2146 * cbLight._m0[_2098].z) * _2159) * _1968) + ((((cbLight._m0[_2017].z * _1945) * _2070) * _2084) * _1981);
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_1949.y == 0u)
    {
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2226;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2226;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2226;
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.x;
        uint _2253 = uint((float(_2241.y) * floor(float(uint(cbSceneParam._m0[85u].y * _804) / _2242))) + floor(float(uint(cbSceneParam._m0[85u].x * _803) / _2242)));
        float _2263 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2264 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        uint _2267 = uint(isnan(14.0) ? _2264 : (isnan(_2264) ? 14.0 : min(_2264, 14.0)));
        uvec4 _2272 = texelFetch(g_lightClusterGridBuffer, int(((_2267 << 2u) + (_2253 << 6u)) >> 2u));
        uint _2273 = _2272.x;
        uint _2274 = _2241.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2274 >> 4u) & 15u)) + 4294967295u) & _2273) == 0u) || ((_2274 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            uint _2554 = 0u;
            uint _2563;
            bool _2564;
            for (;;)
            {
                _2563 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2554 << 2u)) >> 2u)).x;
                _2564 = _2563 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2564)
                {
                    frontier_phi_95_pred = _2549;
                    frontier_phi_95_pred_1 = _2548;
                    frontier_phi_95_pred_2 = _2550;
                    frontier_phi_95_pred_3 = _2553;
                    frontier_phi_95_pred_4 = _2552;
                    frontier_phi_95_pred_5 = _2551;
                }
                else
                {
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    uint _2750;
                    _2744 = _2548;
                    _2745 = _2549;
                    _2746 = _2550;
                    _2747 = _2551;
                    _2748 = _2552;
                    _2749 = _2553;
                    _2750 = _2563;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    for (;;)
                    {
                        uint _2754 = uint(findLSB(_2750)) + (_2554 << 5u);
                        uint _2751 = (_2750 + 4294967295u) & _2750;
                        uint _2756 = _2754 * 48u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 3u)).x));
                        uint _2776 = (_2754 * 48u) + 4u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 3u)).x));
                        uint _2795 = (_2754 * 48u) + 8u;
                        vec3 _2806 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x));
                        float _2810 = _2770.x - _2227;
                        float _2811 = _2770.y - _2228;
                        float _2812 = _2770.z - _2229;
                        float _2813 = dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812));
                        float _2816 = inversesqrt(_2813);
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2820 = dot(vec3(_823, _826, _829), vec3(_2817, _2818, _2819));
                        float _2825 = 1.0 - (_2813 * _2770.w);
                        float _4131 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2827 = sqrt(_2813) * _2789.w;
                        float _2830 = 1.39999997615814208984375 / (_2827 + 1.39999997615814208984375);
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2820) + _2831;
                        float _2837 = _2827 * _2827;
                        float _2841 = ((isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))) * _2826) / ((_2837 * 0.699999988079071044921875) + 1.0);
                        float _2845 = (-0.0) - _2227;
                        float _2846 = (-0.0) - _2228;
                        float _2847 = (-0.0) - _2229;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2862 = exp2(log2(1.0 / ((_2837 * 3.5) + 5.0)) * 0.25);
                        float _2863 = 1.0 - _884;
                        float _2870 = sqrt(1.0 - ((1.0 - (_2863 * _2863)) * (1.0 - (_2862 * _2862))));
                        float _2871 = _2870 * _2870;
                        float _2872 = _2871 * _2871;
                        float _2873 = _2852 + _2817;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2883 = dot(vec3(_823, _826, _829), vec3(_2852, _2853, _2854));
                        float _4147 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2887 = dot(vec3(_823, _826, _829), vec3(_2879 * _2873, _2879 * _2874, _2879 * _2875));
                        float _4158 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2894 = ((_2890 * _2890) * (_2872 + (-1.0))) + 1.0;
                        float _2895 = _2830 * _2871;
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2820) + _2896;
                        float _4169 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2901 = 1.0 - _2871;
                        float _2911 = (0.5 / (((_2900 * ((_2886 * _2901) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _2901) + _2871) * _2886))) * _2900;
                        float _4180 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2922 = (((_2872 * 3.1415927410125732421875) * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) / ((_2894 * _2894) * ((_2837 * 2.1991131305694580078125) + 3.141590118408203125))) * _2826;
                        _2648 = (_2841 * _2789.x) + _2747;
                        _2649 = (_2841 * _2789.y) + _2748;
                        _2650 = (_2841 * _2789.z) + _2749;
                        _2645 = (_2922 * _2806.x) + _2744;
                        _2646 = (_2922 * _2806.y) + _2745;
                        _2647 = (_2922 * _2806.z) + _2746;
                        if (_2751 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2744 = _2645;
                            _2745 = _2646;
                            _2746 = _2647;
                            _2747 = _2648;
                            _2748 = _2649;
                            _2749 = _2650;
                            _2750 = _2751;
                        }
                    }
                    frontier_phi_95_pred = _2646;
                    frontier_phi_95_pred_1 = _2645;
                    frontier_phi_95_pred_2 = _2647;
                    frontier_phi_95_pred_3 = _2650;
                    frontier_phi_95_pred_4 = _2649;
                    frontier_phi_95_pred_5 = _2648;
                }
                _2367 = frontier_phi_95_pred;
                _2365 = frontier_phi_95_pred_1;
                _2369 = frontier_phi_95_pred_2;
                _2375 = frontier_phi_95_pred_3;
                _2373 = frontier_phi_95_pred_4;
                _2371 = frontier_phi_95_pred_5;
                uint _2555 = _2554 + 1u;
                if (_2555 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2548 = _2365;
                    _2549 = _2367;
                    _2550 = _2369;
                    _2551 = _2371;
                    _2552 = _2373;
                    _2553 = _2375;
                    _2554 = _2555;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((4294967295u << _2381) & _2273) == 0u)
        {
            _2516 = _2364;
            _2518 = _2366;
            _2520 = _2368;
            _2522 = _2370;
            _2524 = _2372;
            _2526 = _2374;
        }
        else
        {
            float _2541 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _2542 = _2541 * _2227;
            float _2543 = _2541 * _2228;
            float _2544 = _2541 * _2229;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2727 = _2364;
                float _2728 = _2366;
                float _2729 = _2368;
                float _2730 = _2370;
                float _2731 = _2372;
                float _2732 = _2374;
                uint _2733 = _2381;
                uint _2742;
                bool _2743;
                for (;;)
                {
                    _2742 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                    _2743 = _2742 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2743)
                    {
                        frontier_phi_109_pred = _2728;
                        frontier_phi_109_pred_1 = _2727;
                        frontier_phi_109_pred_2 = _2732;
                        frontier_phi_109_pred_3 = _2731;
                        frontier_phi_109_pred_4 = _2730;
                        frontier_phi_109_pred_5 = _2729;
                    }
                    else
                    {
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _2970 = _2727;
                        float _2971 = _2728;
                        float _2972 = _2729;
                        float _2973 = _2730;
                        float _2974 = _2731;
                        float _2975 = _2732;
                        uint _2976 = _2742;
                        uint _2977;
                        vec4 _3002;
                        float _3003;
                        vec4 _3018;
                        vec3 _3030;
                        vec4 _3045;
                        vec4 _3060;
                        float _3106;
                        bool _3107;
                        for (;;)
                        {
                            uint _2987 = ((_2733 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2976));
                            _2977 = (_2976 + 4294967295u) & _2976;
                            uint _2989 = _2987 * 40u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3003 = _3002.w;
                            uint _3005 = (_2987 * 40u) + 4u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2987 * 40u) + 8u;
                            _3030 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x));
                            uint _3032 = (_2987 * 40u) + 16u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_2987 * 40u) + 20u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_2987 * 40u) + 24u;
                            vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3081 = (_2987 * 40u) + 28u;
                            vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3106 = fma(_2229, _3094.z, fma(_2228, _3094.y, _3094.x * _2227)) + _3094.w;
                            _3107 = !((fma(_2229, _3075.z, fma(_2228, _3075.y, _3075.x * _2227)) + _3075.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3107)
                            {
                                float _3134 = _3002.x - _2227;
                                float _3135 = _3002.y - _2228;
                                float _3136 = _3002.z - _2229;
                                float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                                float _3140 = inversesqrt(_3137);
                                float _3141 = _3140 * _3134;
                                float _3142 = _3140 * _3135;
                                float _3143 = _3140 * _3136;
                                float _3147 = 1.0 - (_3137 / (_3003 * _3003));
                                float _4191 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3152 = sqrt(_3137) * _3018.w;
                                float _3154 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                                float _3155 = _3154 * _3154;
                                float _3158 = ((1.0 - _3155) * dot(vec3(_3141, _3142, _3143), vec3(_823, _826, _829))) + _3155;
                                float _3161 = _3152 * _3152;
                                float _3165 = (fma(_2229, _3045.z, fma(_2228, _3045.y, _3045.x * _2227)) + _3045.w) / _3106;
                                float _3166 = (fma(_2229, _3060.z, fma(_2228, _3060.y, _3060.x * _2227)) + _3060.w) / _3106;
                                float _3170 = 1.0 - dot(vec2(_3165, _3166), vec2(_3165, _3166));
                                float _4207 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3172 = _3171 * (((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3148) / ((_3161 * 0.699999988079071044921875) + 1.0));
                                float _3184 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                                float _3185 = 1.0 - _884;
                                float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                                float _3193 = _3192 * _3192;
                                float _3194 = _3193 * _3193;
                                float _3195 = _3141 - _2542;
                                float _3196 = _3142 - _2543;
                                float _3197 = _3143 - _2544;
                                float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                                float _3205 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2542, (-0.0) - _2543, (-0.0) - _2544));
                                float _4218 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3209 = dot(vec3(_823, _826, _829), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                                float _4229 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                                float _3217 = _3154 * _3193;
                                float _3218 = _3217 * _3217;
                                float _3224 = ((1.0 - _3218) * dot(vec3(_823, _826, _829), vec3(_3141, _3142, _3143))) + _3218;
                                float _4240 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3226 = 1.0 - _3193;
                                float _3236 = (0.5 / (((_3225 * ((_3208 * _3226) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3193) * _3208))) * _3225;
                                float _4251 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3246 = (_3171 * _3148) * (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) / ((_3216 * _3216) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3172 * _3018.y;
                                frontier_phi_115_pred_1 = _3172 * _3018.x;
                                frontier_phi_115_pred_2 = _3246 * _3030.z;
                                frontier_phi_115_pred_3 = _3246 * _3030.y;
                                frontier_phi_115_pred_4 = _3246 * _3030.x;
                                frontier_phi_115_pred_5 = _3172 * _3018.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3254 = frontier_phi_115_pred;
                            _3253 = frontier_phi_115_pred_1;
                            _3252 = frontier_phi_115_pred_2;
                            _3251 = frontier_phi_115_pred_3;
                            _3250 = frontier_phi_115_pred_4;
                            _3255 = frontier_phi_115_pred_5;
                            _2960 = _3253 + _2973;
                            _2961 = _3254 + _2974;
                            _2962 = _3255 + _2975;
                            _2957 = _3250 + _2970;
                            _2958 = _3251 + _2971;
                            _2959 = _3252 + _2972;
                            if (_2977 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2977;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2958;
                        frontier_phi_109_pred_1 = _2957;
                        frontier_phi_109_pred_2 = _2962;
                        frontier_phi_109_pred_3 = _2961;
                        frontier_phi_109_pred_4 = _2960;
                        frontier_phi_109_pred_5 = _2959;
                    }
                    _2519 = frontier_phi_109_pred;
                    _2517 = frontier_phi_109_pred_1;
                    _2527 = frontier_phi_109_pred_2;
                    _2525 = frontier_phi_109_pred_3;
                    _2523 = frontier_phi_109_pred_4;
                    _2521 = frontier_phi_109_pred_5;
                    uint _2734 = _2733 + 1u;
                    if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2727 = _2517;
                        _2728 = _2519;
                        _2729 = _2521;
                        _2730 = _2523;
                        _2731 = _2525;
                        _2732 = _2527;
                        _2733 = _2734;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2517;
                frontier_phi_84_85_ladder_1 = _2521;
                frontier_phi_84_85_ladder_2 = _2527;
                frontier_phi_84_85_ladder_3 = _2525;
                frontier_phi_84_85_ladder_4 = _2523;
                frontier_phi_84_85_ladder_5 = _2519;
            }
            else
            {
                frontier_phi_84_85_ladder = _2364;
                frontier_phi_84_85_ladder_1 = _2368;
                frontier_phi_84_85_ladder_2 = _2374;
                frontier_phi_84_85_ladder_3 = _2372;
                frontier_phi_84_85_ladder_4 = _2370;
                frontier_phi_84_85_ladder_5 = _2366;
            }
            _2516 = frontier_phi_84_85_ladder;
            _2518 = frontier_phi_84_85_ladder_5;
            _2520 = frontier_phi_84_85_ladder_1;
            _2522 = frontier_phi_84_85_ladder_4;
            _2524 = frontier_phi_84_85_ladder_3;
            _2526 = frontier_phi_84_85_ladder_2;
        }
        float _2531 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2286 = (_2531 * _2522) + _2013;
        _2288 = (_2531 * _2524) + _2014;
        _2290 = (_2531 * _2526) + _2015;
        _2292 = ((_2516 * 0.039999999105930328369140625) * _2531) + _2169;
        _2294 = ((_2518 * 0.039999999105930328369140625) * _2531) + _2170;
        _2296 = ((_2520 * 0.039999999105930328369140625) * _2531) + _2171;
    }
    else
    {
        _2286 = _2013;
        _2288 = _2014;
        _2290 = _2015;
        _2292 = _2169;
        _2294 = _2170;
        _2296 = _2171;
    }
    float _4267 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4278 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4289 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2313 = ((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2286 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _868))) + ((_2292 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2314 = ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2288 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _868))) + ((_2294 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2290 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _868))) + ((_2296 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2316 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    uint _2319 = _842 + 6u;
    float _2327 = _803 / cbSceneParam._m0[86u].x;
    float _2328 = _804 / cbSceneParam._m0[86u].y;
    vec4 _2342 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2344 = _2342.x;
    float _2345 = _2342.y;
    float _2346 = _2342.z;
    float _2347 = _2342.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2390 = _2389 / _776;
        float _2401 = _2390 * _265;
        float _2402 = _266 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2404 = _2390 * _267;
        float _2406 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2402;
        float _2414 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2414;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2658;
        if (abs((_2403 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2658 = ((((_2407 > 0.0) ? exp2(_2423 * _2407) : (2.0 - exp2(_2425 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2577 = 1.0 / cbSceneParam._m0[80u].x;
            float _2578 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2579 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            _2658 = ((abs(_2414 / _2403) * cbSceneParam._m0[80u].y) * ((((_2588 - _2589) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0))))) * _2577)) - ((exp2(_2425 * _2588) - exp2(_2425 * _2589)) * _2577))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2660 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, 1.0), 0.0);
        float _2669 = exp2((_2658 * (-1.44269502162933349609375)) * (1.0 - _2660.w));
        float _2670 = log2(_2669);
        float _2686 = log2(_2347);
        _2427 = (exp2(_2686 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].x)) * _2660.x) / cbSceneParam._m0[78u].x)) + _2344;
        _2429 = (exp2(_2686 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].y)) * _2660.y) / cbSceneParam._m0[78u].y)) + _2345;
        _2431 = (exp2(_2686 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].z)) * _2660.z) / cbSceneParam._m0[78u].z)) + _2346;
        _2433 = _2669 * _2347;
    }
    else
    {
        _2427 = _2344;
        _2429 = _2345;
        _2431 = _2346;
        _2433 = _2347;
    }
    bool _2696;
    vec4 _2443;
    vec4 _2465;
    float _2467;
    float _2471;
    float _2472;
    float _2473;
    float _2474;
    bool _2484;
    for (;;)
    {
        _2443 = cbMatDynParam._m0[0u];
        float _2445 = roundEven(_2443.y);
        bool _2446 = _2445 == 3.0;
        float _2447 = log2(_2433);
        float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * _2316;
        float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * _2317;
        float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * _2318;
        float _2463 = _790 + (-0.5);
        _2465 = cbMtdParam._m0[1u];
        _2467 = _2465.y * _2463;
        float _2470 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2471 = _2470 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
        _2472 = _2470 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
        _2473 = _2470 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
        _2474 = _2463 * 0.999000012874603271484375;
        _2484 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2484)
        {
            if ((cbInstanceData._m0[_842 + 7u].x + _2474) < 0.5)
            {
                _2696 = true;
                break;
            }
        }
        uint _2612 = _844 + uint(_2443.w);
        if ((cbInstanceData._m0[_2612].w < 1.0) && ((cbInstanceData._m0[_2612].w + _2474) < 0.5))
        {
            _2696 = true;
            break;
        }
        if ((_2467 + 1.0) < _2465.x)
        {
            _2696 = true;
            break;
        }
        _2696 = false;
        break;
    }
    float _2927;
    if (_2696)
    {
        discard_state = true;
        _2927 = 0.0;
    }
    else
    {
        _2927 = cbInstanceData._m0[_2319].w;
    }
    SV_Target.x = _2471;
    SV_Target.y = _2472;
    SV_Target.z = _2473;
    SV_Target.w = _2927;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2319].w;
    discard_exit();
}


