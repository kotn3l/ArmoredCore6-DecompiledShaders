#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _326 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _333 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _342 = cbMtdParam._m0[23u].x + _257;
    float _343 = cbMtdParam._m0[23u].y + _258;
    float _344 = cbMtdParam._m0[23u].z + _259;
    float _358 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_326 * _186, _326 * _187, _326 * _188));
    float _359 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_333 * _200, _333 * _201, _333 * _202));
    float _360 = (-0.0) - dot(vec3(_342, _343, _344), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _364 * _360;
    float _367 = (cbMtdParam._m0[19u].w * _358) * _364;
    float _369 = (cbMtdParam._m0[20u].x * _359) * _364;
    float _372 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _373 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _391;
    float _394;
    float _396;
    if (_367 > 0.0)
    {
        float _377 = (1.0 - _372) / _367;
        _391 = _377;
        _394 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_377 * _365)) * 0.16666667163372039794921875;
        _396 = (fract((_377 * _369) + _373) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _392 = ((-0.0) - _372) / _367;
            frontier_phi_3_2_ladder = (fract((_392 * _369) + _373) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _392;
            frontier_phi_3_2_ladder_2 = (fract(_392 * _365) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _393;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _391 = frontier_phi_3_2_ladder_1;
        _394 = frontier_phi_3_2_ladder_2;
        _396 = frontier_phi_3_2_ladder;
    }
    float _422;
    float _424;
    float _426;
    if (_369 > 0.0)
    {
        float _409 = (1.0 - _373) / _369;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_409 < _391)
        {
            frontier_phi_8_5_ladder = (fract((_409 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _409;
            frontier_phi_8_5_ladder_2 = (fract(_409 * _365) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _394;
            frontier_phi_8_5_ladder_1 = _391;
            frontier_phi_8_5_ladder_2 = _396;
        }
        _422 = frontier_phi_8_5_ladder_1;
        _424 = frontier_phi_8_5_ladder;
        _426 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_369 < 0.0)
        {
            float _423 = ((-0.0) - _373) / _369;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_423 < _391)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_423 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _423;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_423 * _365) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _394;
                frontier_phi_8_6_ladder_9_ladder_1 = _391;
                frontier_phi_8_6_ladder_9_ladder_2 = _396;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _394;
            frontier_phi_8_6_ladder_1 = _391;
            frontier_phi_8_6_ladder_2 = _396;
        }
        _422 = frontier_phi_8_6_ladder_1;
        _424 = frontier_phi_8_6_ladder;
        _426 = frontier_phi_8_6_ladder_2;
    }
    float _430 = (_365 > 0.0) ? (cbMtdParam._m0[16u].w / _365) : 5000.0;
    float _443;
    float _444;
    if (_430 < _422)
    {
        _443 = ((_372 + cbMtdParam._m0[17u].x) + (_430 * _367)) * 0.16666667163372039794921875;
        _444 = (((_430 * _369) + _373) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _443 = _424;
        _444 = _426;
    }
    vec4 _446 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_443, _444));
    float _451 = _446.x * cbMtdParam._m0[13u].x;
    float _452 = _446.y * cbMtdParam._m0[13u].y;
    float _453 = _446.z * cbMtdParam._m0[13u].z;
    vec4 _471 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _479 = (_471.x * 2.0) + (-1.0);
    float _481 = (_471.y * 2.0) + (-1.0);
    float _482 = dot(vec2(_479, _481), vec2(_479, _481));
    float _3097 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _487 = sqrt(1.0 - (isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))));
    float _488 = _471.z * _284;
    float _491 = fma(_487, _193, fma(_481, _200, _479 * _186));
    float _494 = fma(_487, _194, fma(_481, _201, _479 * _187));
    float _497 = fma(_487, _195, fma(_481, _202, _479 * _188));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3108 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _505 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
    float _3119 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3130 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3141 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _529 = _257 * _528;
    float _530 = _258 * _528;
    float _531 = _259 * _528;
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _559 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _562 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _565 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _578 = uint(roundEven(NORMAL.w)) * 13u;
    uint _579 = _578 + 9u;
    uint _580 = _579 + uint(cbMatDynParam._m0[0u].w);
    float _586 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0)))) * cbInstanceData._m0[_580].x;
    float _587 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0)))) * cbInstanceData._m0[_580].y;
    float _588 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0)))) * cbInstanceData._m0[_580].z;
    float _3152 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
    float _3163 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
    float _3174 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _603 = _600.x * TEXCOORD.z;
    float _604 = dot(vec3(_502, _503, _504), vec3(_529, _530, _531));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _502) - _529;
    float _612 = (_607 * _503) - _530;
    float _613 = (_607 * _504) - _531;
    float _617 = abs(dot(vec3(_529, _530, _531), vec3(_502, _503, _504)));
    float _3185 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _619 = sqrt(_505);
    float _632 = exp2((_619 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _709 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _713 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _737 = _664 + _502;
        float _738 = _668 + _503;
        float _739 = _672 + _504;
        float _749 = fma(_739, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737)) - _705;
        float _750 = fma(_739, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737)) - _709;
        float _751 = fma(_739, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737)) - _713;
        float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
        float _768 = ((_755 * _749) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_755 * _750) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_755 * _751) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        float _807 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_773.x + (-0.5));
        float _809 = _807 * (_773.y + (-0.5));
        float _810 = _807 * (_773.z + (-0.5));
        float _817 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_780.x + (-0.5));
        float _819 = _817 * (_780.y + (-0.5));
        float _820 = _817 * (_780.z + (-0.5));
        float _827 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_787.x + (-0.5));
        float _829 = _827 * (_787.y + (-0.5));
        float _830 = _827 * (_787.z + (-0.5));
        float _837 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_794.x + (-0.5));
        float _839 = _837 * (_794.y + (-0.5));
        float _840 = _837 * (_794.z + (-0.5));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = _808 * 0.5;
        float _845 = _818 * 0.5;
        float _846 = _828 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _861 = (dot(vec3(_502, _503, _504), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3211 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _871 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3222 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3233 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))) * (_873 + 1.0))) + _878) * _841;
        float _888 = _809 * 0.5;
        float _889 = _819 * 0.5;
        float _890 = _829 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_502, _503, _504), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3244 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3255 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3266 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * (_915 + 1.0))) + _920) * _842;
        float _930 = _810 * 0.5;
        float _931 = _820 * 0.5;
        float _932 = _830 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_502, _503, _504), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3299 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_957 + 1.0))) + _962) * _843;
        _979 = _810;
        _980 = _809;
        _981 = _808;
        _982 = _820;
        _983 = _819;
        _984 = _818;
        _985 = _830;
        _986 = _829;
        _987 = _828;
        _988 = _843;
        _989 = _842;
        _990 = _841;
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
    }
    else
    {
        _979 = _393;
        _980 = _393;
        _981 = _393;
        _982 = _393;
        _983 = _393;
        _984 = _393;
        _985 = _393;
        _986 = _393;
        _987 = _393;
        _988 = _393;
        _989 = _393;
        _990 = _393;
        _991 = 0.0;
        _992 = 0.0;
        _993 = 0.0;
    }
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1019 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1023 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1027 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1050 = _664 + _502;
        float _1051 = _668 + _503;
        float _1052 = _672 + _504;
        float _1062 = fma(_1052, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050)) - _1019;
        float _1063 = fma(_1052, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050)) - _1023;
        float _1064 = fma(_1052, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050)) - _1027;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1019 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1023 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[35u].z) + ((((((_1027 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1118 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1085.x + (-0.5));
        float _1120 = _1118 * (_1085.y + (-0.5));
        float _1121 = _1118 * (_1085.z + (-0.5));
        float _1128 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1092.x + (-0.5));
        float _1130 = _1128 * (_1092.y + (-0.5));
        float _1131 = _1128 * (_1092.z + (-0.5));
        float _1138 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1099.x + (-0.5));
        float _1140 = _1138 * (_1099.y + (-0.5));
        float _1141 = _1138 * (_1099.z + (-0.5));
        float _1148 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1106.x + (-0.5));
        float _1150 = _1148 * (_1106.y + (-0.5));
        float _1151 = _1148 * (_1106.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_502, _503, _504), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3362 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_1182 + 1.0))) + _1187) * _1152;
        float _1197 = _1120 * 0.5;
        float _1198 = _1130 * 0.5;
        float _1199 = _1140 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_502, _503, _504), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3395 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_1224 + 1.0))) + _1229) * _1153;
        float _1239 = _1121 * 0.5;
        float _1240 = _1131 * 0.5;
        float _1241 = _1141 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_502, _503, _504), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3428 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_1266 + 1.0))) + _1271) * _1154;
        _1288 = _1121;
        _1289 = _1120;
        _1290 = _1119;
        _1291 = _1131;
        _1292 = _1130;
        _1293 = _1129;
        _1294 = _1141;
        _1295 = _1140;
        _1296 = _1139;
        _1297 = _1154;
        _1298 = _1153;
        _1299 = _1152;
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
    }
    else
    {
        _1288 = _393;
        _1289 = _393;
        _1290 = _393;
        _1291 = _393;
        _1292 = _393;
        _1293 = _393;
        _1294 = _393;
        _1295 = _393;
        _1296 = _393;
        _1297 = _393;
        _1298 = _393;
        _1299 = _393;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _992)) + _992;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1335 = fma(_1314, cbSceneParam._m0[89u].z, fma(_1313, cbSceneParam._m0[89u].y, _1312 * cbSceneParam._m0[89u].x));
    float _1338 = fma(_1314, cbSceneParam._m0[90u].z, fma(_1313, cbSceneParam._m0[90u].y, _1312 * cbSceneParam._m0[90u].x));
    float _1341 = fma(_1314, cbSceneParam._m0[91u].z, fma(_1313, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1312));
    float _1356 = _611 * 0.5;
    float _1357 = _612 * 0.5;
    float _1358 = _613 * 0.5;
    float _1359 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1362 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1365 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1399;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1372 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_979, _982, _985, _988));
        float _1376 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_980, _983, _986, _989));
        float _1380 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_981, _984, _987, _990));
        float _1387 = dot(vec4(cbModelParam._m0[39u]), vec4(_1356, _1357, _1358, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1387) ? 0.0 : (isnan(0.0) ? _1387 : max(0.0, _1387))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1410;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1401 = dot(vec4(cbModelParam._m0[40u]), vec4(_1356, _1357, _1358, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1401) ? 0.0 : (isnan(0.0) ? _1401 : max(0.0, _1401))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1414 = (_1410 * cbModelParam._m0[1u].x) + (_1399 * (1.0 - cbModelParam._m0[1u].x));
    float _1424 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1425 = isnan(_1424) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1424 : min(cbModelParam._m0[25u].z, _1424));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1474 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1478 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1482 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1485 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1488 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1491 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1519;
        if (_1485 > 0.0)
        {
            _1519 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1519 = frontier_phi_26_24_ladder;
        }
        float _1892;
        if (_1488 > 0.0)
        {
            _1892 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1892 = frontier_phi_35_31_ladder;
        }
        float _2208;
        if (_1491 > 0.0)
        {
            _2208 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2208 = frontier_phi_49_42_ladder;
        }
        float _2210 = isnan(_1892) ? _1519 : (isnan(_1519) ? _1892 : min(_1519, _1892));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1485) + _1474;
        float _2216 = (_2211 * _1488) + _1478;
        float _2217 = (_2211 * _1491) + _1482;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2218;
        float _2221 = _2218 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2217 > _2221) || ((_2217 < _2219) || ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 < _2219) || (_2215 > _2221))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1425);
            frontier_phi_25_49_ladder = _2343.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2343.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2343.x * cbModelParam._m0[1u].y;
        }
        _1507 = frontier_phi_25_49_ladder_2;
        _1509 = frontier_phi_25_49_ladder_1;
        _1511 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1425);
        _1507 = _1495.x * cbModelParam._m0[1u].y;
        _1509 = _1495.y * cbModelParam._m0[1u].y;
        _1511 = _1495.z * cbModelParam._m0[1u].y;
    }
    float _1515 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1515 : min(cbModelParam._m0[25u].w, _1515));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1571 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1575 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1579 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1582 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1585 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1588 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1897;
        if (_1582 > 0.0)
        {
            _1897 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1897 = frontier_phi_37_33_ladder;
        }
        float _2234;
        if (_1585 > 0.0)
        {
            _2234 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2234 = frontier_phi_51_44_ladder;
        }
        float _2403;
        if (_1588 > 0.0)
        {
            _2403 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2403 = frontier_phi_65_60_ladder;
        }
        float _2405 = isnan(_2234) ? _1897 : (isnan(_1897) ? _2234 : min(_1897, _2234));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1582) + _1571;
        float _2411 = (_2406 * _1585) + _1575;
        float _2412 = (_2406 * _1588) + _1579;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2413;
        float _2416 = _2413 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2412 > _2416) || ((_2412 < _2414) || ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 < _2414) || (_2410 > _2416))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2412, cbModelParam._m0[17u].z, fma(_2411, cbModelParam._m0[17u].y, _2410 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2412, cbModelParam._m0[18u].z, fma(_2411, cbModelParam._m0[18u].y, _2410 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2412, cbModelParam._m0[19u].z, fma(_2411, cbModelParam._m0[19u].y, _2410 * cbModelParam._m0[19u].x))), _1516);
            frontier_phi_34_65_ladder = _2645.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2645.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2645.z * cbModelParam._m0[1u].z;
        }
        _1607 = frontier_phi_34_65_ladder_1;
        _1609 = frontier_phi_34_65_ladder;
        _1611 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1516);
        _1607 = _1591.x * cbModelParam._m0[1u].z;
        _1609 = _1591.y * cbModelParam._m0[1u].z;
        _1611 = _1591.z * cbModelParam._m0[1u].z;
    }
    float _1623 = ((((1.0 - _632) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_632 * _619)) * _603;
    float _1624 = _1623 * ((cbModelParam._m0[1u].w * (_1607 - _1507)) + _1507);
    float _1625 = _1623 * ((cbModelParam._m0[1u].w * (_1609 - _1509)) + _1509);
    float _1626 = _1623 * ((cbModelParam._m0[1u].w * (_1611 - _1511)) + _1511);
    float _1629 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1624 * cbSceneParam._m0[91u].x));
    vec4 _1643 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_537, _538));
    float _1645 = _1643.w;
    float _1657 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1645);
    float _1658 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1645);
    float _1659 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1645);
    uvec4 _1663 = floatBitsToUint(cbInstanceData._m0[_578 + 5u]);
    uint _1665 = _1663.x * 14u;
    uint _1666 = _1665 + 13u;
    float _1671 = _603 + (-1.0);
    float _1674 = (cbLight._m0[_1666].x * _1671) + 1.0;
    float _1675 = (cbLight._m0[_1666].y * _1671) + 1.0;
    uint _1676 = _1665 + 5u;
    float _1682 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1686 = _1665 + 4u;
    float _1696 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1700 = _1665 | 1u;
    float _1711 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_502, _503, _504));
    float _1714 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_502, _503, _504));
    float _3564 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _3575 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1719 = (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * 0.3183098733425140380859375;
    float _1721 = (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.3183098733425140380859375;
    float _1728 = ((cbLight._m0[_1676].x * _1682) * _1721) + (((cbLight._m0[_1686].x * _1657) * _1696) * _1719);
    float _1729 = ((_1682 * cbLight._m0[_1676].y) * _1721) + (((cbLight._m0[_1686].y * _1658) * _1696) * _1719);
    float _1730 = ((_1682 * cbLight._m0[_1676].z) * _1721) + (((cbLight._m0[_1686].z * _1659) * _1696) * _1719);
    uint _1732 = _1665 + 8u;
    float _1745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1665].w)) * _505) * 0.949999988079071044921875);
    float _1746 = _1745 * _1745;
    float _1747 = cbLight._m0[_1665].x + _529;
    float _1748 = cbLight._m0[_1665].y + _530;
    float _1749 = cbLight._m0[_1665].z + _531;
    float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
    float _1754 = _1753 * _1747;
    float _1755 = _1753 * _1748;
    float _1756 = _1753 * _1749;
    float _1757 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1665].xyz));
    float _3586 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _1761 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _1762 = dot(vec3(_502, _503, _504), vec3(_1754, _1755, _1756));
    float _3608 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_1754, _1755, _1756));
    float _3619 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1746 * _1746;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1786 = 1.0 - _1746;
    float _1797 = (0.5 / (((_1761 * ((_1760 * _1786) + _1746)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1786) + _1746) * _1760))) * _1760;
    float _3630 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1799 = (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    uint _1813 = _1665 + 9u;
    float _1824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1700].w)) * _505) * 0.949999988079071044921875);
    float _1825 = _1824 * _1824;
    float _1826 = cbLight._m0[_1700].x + _529;
    float _1827 = cbLight._m0[_1700].y + _530;
    float _1828 = cbLight._m0[_1700].z + _531;
    float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
    float _1833 = _1832 * _1826;
    float _1834 = _1832 * _1827;
    float _1835 = _1832 * _1828;
    float _1836 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1700].xyz));
    float _3641 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _1840 = dot(vec3(_502, _503, _504), vec3(_1833, _1834, _1835));
    float _3652 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _1844 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1833, _1834, _1835));
    float _3663 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1848 = _1825 * _1825;
    float _1852 = ((_1843 * _1843) * (_1848 + (-1.0))) + 1.0;
    float _1861 = (exp2(log2(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1862 = 1.0 - _1825;
    float _1872 = (0.5 / (((_1761 * ((_1839 * _1862) + _1825)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1862) + _1825) * _1839))) * _1839;
    float _3674 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1874 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1848 / ((_1852 * _1852) * 3.141590118408203125));
    float _1884 = (((_1861 * cbLight._m0[_1813].x) * _1874) * _1682) + ((((cbLight._m0[_1732].x * _1657) * _1785) * _1799) * _1696);
    float _1885 = (((_1861 * cbLight._m0[_1813].y) * _1874) * _1682) + ((((cbLight._m0[_1732].y * _1658) * _1785) * _1799) * _1696);
    float _1886 = (((_1861 * cbLight._m0[_1813].z) * _1874) * _1682) + ((((cbLight._m0[_1732].z * _1659) * _1785) * _1799) * _1696);
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    if (_1663.y == 0u)
    {
        float _1941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1941;
        float _1943 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1941;
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1941;
        uvec4 _1956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1957 = _1956.x;
        uint _1968 = uint((float(_1956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _1957))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _1957)));
        float _1978 = (log2(_1944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1979 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        uint _1982 = uint(isnan(14.0) ? _1979 : (isnan(_1979) ? 14.0 : min(_1979, 14.0)));
        uvec4 _1987 = texelFetch(g_lightClusterGridBuffer, int(((_1982 << 2u) + (_1968 << 6u)) >> 2u));
        uint _1988 = _1987.x;
        uint _1989 = _1956.z;
        float _2095;
        float _2097;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        if (((((1u << ((_1989 >> 4u) & 15u)) + 4294967295u) & _1988) == 0u) || ((_1989 & 240u) == 0u))
        {
            _2095 = 0.0;
            _2097 = 0.0;
            _2099 = 0.0;
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
        }
        else
        {
            float _2096;
            float _2098;
            float _2100;
            float _2102;
            float _2104;
            float _2106;
            float _2271 = 0.0;
            float _2272 = 0.0;
            float _2273 = 0.0;
            float _2274 = 0.0;
            float _2275 = 0.0;
            float _2276 = 0.0;
            uint _2277 = 0u;
            uint _2286;
            bool _2287;
            for (;;)
            {
                _2286 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2277 << 2u)) >> 2u)).x;
                _2287 = _2286 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2287)
                {
                    frontier_phi_62_pred = _2272;
                    frontier_phi_62_pred_1 = _2271;
                    frontier_phi_62_pred_2 = _2273;
                    frontier_phi_62_pred_3 = _2276;
                    frontier_phi_62_pred_4 = _2275;
                    frontier_phi_62_pred_5 = _2274;
                }
                else
                {
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    uint _2452;
                    _2446 = _2271;
                    _2447 = _2272;
                    _2448 = _2273;
                    _2449 = _2274;
                    _2450 = _2275;
                    _2451 = _2276;
                    _2452 = _2286;
                    float _2352;
                    float _2353;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    for (;;)
                    {
                        uint _2456 = uint(findLSB(_2452)) + (_2277 << 5u);
                        uint _2453 = (_2452 + 4294967295u) & _2452;
                        uint _2458 = _2456 * 48u;
                        vec4 _2472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2458)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 3u)).x));
                        uint _2478 = (_2456 * 48u) + 4u;
                        vec4 _2491 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 3u)).x));
                        uint _2497 = (_2456 * 48u) + 8u;
                        vec3 _2508 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2497)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 2u)).x));
                        float _2512 = _2472.x - _1942;
                        float _2513 = _2472.y - _1943;
                        float _2514 = _2472.z - _1944;
                        float _2515 = dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514));
                        float _2518 = inversesqrt(_2515);
                        float _2519 = _2518 * _2512;
                        float _2520 = _2518 * _2513;
                        float _2521 = _2518 * _2514;
                        float _2522 = dot(vec3(_559, _562, _565), vec3(_2519, _2520, _2521));
                        float _2527 = 1.0 - (_2515 * _2472.w);
                        float _3695 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
                        float _2528 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                        float _2529 = sqrt(_2515) * _2491.w;
                        float _2532 = 1.39999997615814208984375 / (_2529 + 1.39999997615814208984375);
                        float _2533 = _2532 * _2532;
                        float _2536 = ((1.0 - _2533) * _2522) + _2533;
                        float _2539 = _2529 * _2529;
                        float _2543 = ((isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0))) * _2528) / ((_2539 * 0.699999988079071044921875) + 1.0);
                        float _2547 = (-0.0) - _1942;
                        float _2548 = (-0.0) - _1943;
                        float _2549 = (-0.0) - _1944;
                        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
                        float _2554 = _2553 * _2547;
                        float _2555 = _2553 * _2548;
                        float _2556 = _2553 * _2549;
                        float _2564 = exp2(log2(1.0 / ((_2539 * 3.5) + 5.0)) * 0.25);
                        float _2565 = 1.0 - _619;
                        float _2572 = sqrt(1.0 - ((1.0 - (_2565 * _2565)) * (1.0 - (_2564 * _2564))));
                        float _2573 = _2572 * _2572;
                        float _2574 = _2573 * _2573;
                        float _2575 = _2554 + _2519;
                        float _2576 = _2555 + _2520;
                        float _2577 = _2556 + _2521;
                        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
                        float _2585 = dot(vec3(_559, _562, _565), vec3(_2554, _2555, _2556));
                        float _3711 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2588 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
                        float _2589 = dot(vec3(_559, _562, _565), vec3(_2581 * _2575, _2581 * _2576, _2581 * _2577));
                        float _3722 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                        float _2592 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                        float _2596 = ((_2592 * _2592) * (_2574 + (-1.0))) + 1.0;
                        float _2597 = _2532 * _2573;
                        float _2598 = _2597 * _2597;
                        float _2601 = ((1.0 - _2598) * _2522) + _2598;
                        float _3733 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                        float _2602 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
                        float _2603 = 1.0 - _2573;
                        float _2613 = (0.5 / (((_2602 * ((_2588 * _2603) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2603) + _2573) * _2588))) * _2602;
                        float _3744 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                        float _2624 = (((_2574 * 3.1415927410125732421875) * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) / ((_2596 * _2596) * ((_2539 * 2.1991131305694580078125) + 3.141590118408203125))) * _2528;
                        _2355 = (_2543 * _2491.x) + _2449;
                        _2356 = (_2543 * _2491.y) + _2450;
                        _2357 = (_2543 * _2491.z) + _2451;
                        _2352 = (_2624 * _2508.x) + _2446;
                        _2353 = (_2624 * _2508.y) + _2447;
                        _2354 = (_2624 * _2508.z) + _2448;
                        if (_2453 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2446 = _2352;
                            _2447 = _2353;
                            _2448 = _2354;
                            _2449 = _2355;
                            _2450 = _2356;
                            _2451 = _2357;
                            _2452 = _2453;
                        }
                    }
                    frontier_phi_62_pred = _2353;
                    frontier_phi_62_pred_1 = _2352;
                    frontier_phi_62_pred_2 = _2354;
                    frontier_phi_62_pred_3 = _2357;
                    frontier_phi_62_pred_4 = _2356;
                    frontier_phi_62_pred_5 = _2355;
                }
                _2098 = frontier_phi_62_pred;
                _2096 = frontier_phi_62_pred_1;
                _2100 = frontier_phi_62_pred_2;
                _2106 = frontier_phi_62_pred_3;
                _2104 = frontier_phi_62_pred_4;
                _2102 = frontier_phi_62_pred_5;
                uint _2278 = _2277 + 1u;
                if (_2278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2271 = _2096;
                    _2272 = _2098;
                    _2273 = _2100;
                    _2274 = _2102;
                    _2275 = _2104;
                    _2276 = _2106;
                    _2277 = _2278;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2095 = _2096;
            _2097 = _2098;
            _2099 = _2100;
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
        }
        uvec4 _2109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2110 = _2109.z;
        uint _2112 = (_2110 >> 8u) & 15u;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        if (((4294967295u << _2112) & _1988) == 0u)
        {
            _2239 = _2095;
            _2241 = _2097;
            _2243 = _2099;
            _2245 = _2101;
            _2247 = _2103;
            _2249 = _2105;
        }
        else
        {
            float _2264 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
            float _2265 = _2264 * _1942;
            float _2266 = _2264 * _1943;
            float _2267 = _2264 * _1944;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2112 < ((_2110 >> 12u) & 15u))
            {
                float _2240;
                float _2242;
                float _2244;
                float _2246;
                float _2248;
                float _2250;
                float _2429 = _2095;
                float _2430 = _2097;
                float _2431 = _2099;
                float _2432 = _2101;
                float _2433 = _2103;
                float _2434 = _2105;
                uint _2435 = _2112;
                uint _2444;
                bool _2445;
                for (;;)
                {
                    _2444 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2435 << 2u)) >> 2u)).x;
                    _2445 = _2444 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2445)
                    {
                        frontier_phi_71_pred = _2430;
                        frontier_phi_71_pred_1 = _2429;
                        frontier_phi_71_pred_2 = _2434;
                        frontier_phi_71_pred_3 = _2433;
                        frontier_phi_71_pred_4 = _2432;
                        frontier_phi_71_pred_5 = _2431;
                    }
                    else
                    {
                        float _2650;
                        float _2651;
                        float _2652;
                        float _2653;
                        float _2654;
                        float _2655;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2663 = _2429;
                        float _2664 = _2430;
                        float _2665 = _2431;
                        float _2666 = _2432;
                        float _2667 = _2433;
                        float _2668 = _2434;
                        uint _2669 = _2444;
                        uint _2670;
                        vec4 _2695;
                        float _2696;
                        vec4 _2711;
                        vec3 _2723;
                        vec4 _2738;
                        vec4 _2753;
                        float _2799;
                        bool _2800;
                        for (;;)
                        {
                            uint _2680 = ((_2435 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2669));
                            _2670 = (_2669 + 4294967295u) & _2669;
                            uint _2682 = _2680 * 40u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            _2696 = _2695.w;
                            uint _2698 = (_2680 * 40u) + 4u;
                            _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2713 = (_2680 * 40u) + 8u;
                            _2723 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 2u)).x));
                            uint _2725 = (_2680 * 40u) + 16u;
                            _2738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 3u)).x));
                            uint _2740 = (_2680 * 40u) + 20u;
                            _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            uint _2755 = (_2680 * 40u) + 24u;
                            vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            uint _2774 = (_2680 * 40u) + 28u;
                            vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            _2799 = fma(_1944, _2787.z, fma(_1943, _2787.y, _2787.x * _1942)) + _2787.w;
                            _2800 = !((fma(_1944, _2768.z, fma(_1943, _2768.y, _2768.x * _1942)) + _2768.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2800)
                            {
                                float _2827 = _2695.x - _1942;
                                float _2828 = _2695.y - _1943;
                                float _2829 = _2695.z - _1944;
                                float _2830 = dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829));
                                float _2833 = inversesqrt(_2830);
                                float _2834 = _2833 * _2827;
                                float _2835 = _2833 * _2828;
                                float _2836 = _2833 * _2829;
                                float _2840 = 1.0 - (_2830 / (_2696 * _2696));
                                float _3755 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2841 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                                float _2845 = sqrt(_2830) * _2711.w;
                                float _2847 = 1.39999997615814208984375 / (_2845 + 1.39999997615814208984375);
                                float _2848 = _2847 * _2847;
                                float _2851 = ((1.0 - _2848) * dot(vec3(_2834, _2835, _2836), vec3(_559, _562, _565))) + _2848;
                                float _2854 = _2845 * _2845;
                                float _2858 = (fma(_1944, _2738.z, fma(_1943, _2738.y, _2738.x * _1942)) + _2738.w) / _2799;
                                float _2859 = (fma(_1944, _2753.z, fma(_1943, _2753.y, _2753.x * _1942)) + _2753.w) / _2799;
                                float _2863 = 1.0 - dot(vec2(_2858, _2859), vec2(_2858, _2859));
                                float _3771 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                                float _2864 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                                float _2865 = _2864 * (((isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))) * _2841) / ((_2854 * 0.699999988079071044921875) + 1.0));
                                float _2877 = exp2(log2(1.0 / ((_2854 * 3.5) + 5.0)) * 0.25);
                                float _2878 = 1.0 - _619;
                                float _2885 = sqrt(1.0 - ((1.0 - (_2878 * _2878)) * (1.0 - (_2877 * _2877))));
                                float _2886 = _2885 * _2885;
                                float _2887 = _2886 * _2886;
                                float _2888 = _2834 - _2265;
                                float _2889 = _2835 - _2266;
                                float _2890 = _2836 - _2267;
                                float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                                float _2898 = dot(vec3(_559, _562, _565), vec3((-0.0) - _2265, (-0.0) - _2266, (-0.0) - _2267));
                                float _3782 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2901 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
                                float _2902 = dot(vec3(_559, _562, _565), vec3(_2894 * _2888, _2894 * _2889, _2894 * _2890));
                                float _3793 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2905 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                                float _2909 = ((_2905 * _2905) * (_2887 + (-1.0))) + 1.0;
                                float _2910 = _2847 * _2886;
                                float _2911 = _2910 * _2910;
                                float _2917 = ((1.0 - _2911) * dot(vec3(_559, _562, _565), vec3(_2834, _2835, _2836))) + _2911;
                                float _3804 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                                float _2918 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
                                float _2919 = 1.0 - _2886;
                                float _2929 = (0.5 / (((_2918 * ((_2901 * _2919) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2918 * _2919) + _2886) * _2901))) * _2918;
                                float _3815 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2939 = (_2864 * _2841) * (((_2887 * 3.1415927410125732421875) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) / ((_2909 * _2909) * ((_2854 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2939 * _2723.y;
                                frontier_phi_77_pred_1 = _2939 * _2723.x;
                                frontier_phi_77_pred_2 = _2865 * _2711.z;
                                frontier_phi_77_pred_3 = _2865 * _2711.y;
                                frontier_phi_77_pred_4 = _2865 * _2711.x;
                                frontier_phi_77_pred_5 = _2939 * _2723.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2944 = frontier_phi_77_pred;
                            _2943 = frontier_phi_77_pred_1;
                            _2948 = frontier_phi_77_pred_2;
                            _2947 = frontier_phi_77_pred_3;
                            _2946 = frontier_phi_77_pred_4;
                            _2945 = frontier_phi_77_pred_5;
                            _2653 = _2946 + _2666;
                            _2654 = _2947 + _2667;
                            _2655 = _2948 + _2668;
                            _2650 = _2943 + _2663;
                            _2651 = _2944 + _2664;
                            _2652 = _2945 + _2665;
                            if (_2670 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2663 = _2650;
                                _2664 = _2651;
                                _2665 = _2652;
                                _2666 = _2653;
                                _2667 = _2654;
                                _2668 = _2655;
                                _2669 = _2670;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2651;
                        frontier_phi_71_pred_1 = _2650;
                        frontier_phi_71_pred_2 = _2655;
                        frontier_phi_71_pred_3 = _2654;
                        frontier_phi_71_pred_4 = _2653;
                        frontier_phi_71_pred_5 = _2652;
                    }
                    _2242 = frontier_phi_71_pred;
                    _2240 = frontier_phi_71_pred_1;
                    _2250 = frontier_phi_71_pred_2;
                    _2248 = frontier_phi_71_pred_3;
                    _2246 = frontier_phi_71_pred_4;
                    _2244 = frontier_phi_71_pred_5;
                    uint _2436 = _2435 + 1u;
                    if (_2436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2429 = _2240;
                        _2430 = _2242;
                        _2431 = _2244;
                        _2432 = _2246;
                        _2433 = _2248;
                        _2434 = _2250;
                        _2435 = _2436;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2250;
                frontier_phi_53_54_ladder_1 = _2246;
                frontier_phi_53_54_ladder_2 = _2244;
                frontier_phi_53_54_ladder_3 = _2242;
                frontier_phi_53_54_ladder_4 = _2240;
                frontier_phi_53_54_ladder_5 = _2248;
            }
            else
            {
                frontier_phi_53_54_ladder = _2105;
                frontier_phi_53_54_ladder_1 = _2101;
                frontier_phi_53_54_ladder_2 = _2099;
                frontier_phi_53_54_ladder_3 = _2097;
                frontier_phi_53_54_ladder_4 = _2095;
                frontier_phi_53_54_ladder_5 = _2103;
            }
            _2239 = frontier_phi_53_54_ladder_4;
            _2241 = frontier_phi_53_54_ladder_3;
            _2243 = frontier_phi_53_54_ladder_2;
            _2245 = frontier_phi_53_54_ladder_1;
            _2247 = frontier_phi_53_54_ladder_5;
            _2249 = frontier_phi_53_54_ladder;
        }
        float _2254 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2001 = (_2254 * _2245) + _1728;
        _2003 = (_2254 * _2247) + _1729;
        _2005 = (_2254 * _2249) + _1730;
        _2007 = ((_2239 * 0.039999999105930328369140625) * _2254) + _1884;
        _2009 = ((_2241 * 0.039999999105930328369140625) * _2254) + _1885;
        _2011 = ((_2243 * 0.039999999105930328369140625) * _2254) + _1886;
    }
    else
    {
        _2001 = _1728;
        _2003 = _1729;
        _2005 = _1730;
        _2007 = _1884;
        _2009 = _1885;
        _2011 = _1886;
    }
    uint _2017 = _579 + uint(cbMatDynParam._m0[0u].w);
    float _3831 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3842 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3853 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _2042 = (((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_2001 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _603))) + ((_2007 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1414)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2017].x * (_451 - (_451 * _284)));
    float _2044 = ((cbInstanceData._m0[_2017].y * (_452 - (_452 * _284))) + ((_2009 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1414)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_2003 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _603)));
    float _2046 = ((cbInstanceData._m0[_2017].z * (_453 - (_453 * _284))) + ((_2011 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1414)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_2005 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _603)));
    uint _2050 = _578 + 6u;
    float _2058 = _537 / cbSceneParam._m0[86u].x;
    float _2059 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2073 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2058, _2059, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2075 = _2073.x;
    float _2076 = _2073.y;
    float _2077 = _2073.z;
    float _2078 = _2073.w;
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2120 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2121 = _2120 / _524;
        float _2132 = _2121 * _257;
        float _2133 = _258 * _2121;
        float _2134 = (-0.0) - _2133;
        float _2135 = _2121 * _259;
        float _2137 = (cbSceneParam._m0[77u].w * _2134) / _2120;
        float _2138 = _2137 + cbSceneParam._m0[79u].w;
        float _2139 = cbSceneParam._m0[79u].w - _2133;
        float _2145 = sqrt(((_2132 * _2132) + (_2133 * _2133)) + (_2135 * _2135));
        float _2148 = (1.0 - (cbSceneParam._m0[77u].w / _2120)) * _2145;
        float _2154 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2156 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2365;
        if (abs((_2134 - _2137) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2365 = ((((_2138 > 0.0) ? exp2(_2154 * _2138) : (2.0 - exp2(_2156 * _2138))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2148;
        }
        else
        {
            float _2300 = 1.0 / cbSceneParam._m0[80u].x;
            float _2301 = isnan(_2139) ? _2138 : (isnan(_2138) ? _2139 : max(_2138, _2139));
            float _2302 = isnan(_2139) ? _2138 : (isnan(_2138) ? _2139 : min(_2138, _2139));
            float _2311 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : min(_2301, 0.0));
            float _2312 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : min(_2302, 0.0));
            _2365 = ((abs(_2145 / _2134) * cbSceneParam._m0[80u].y) * ((((_2311 - _2312) * 2.0) - ((exp2(_2154 * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)))) - exp2(_2154 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))))) * _2300)) - ((exp2(_2156 * _2311) - exp2(_2156 * _2312)) * _2300))) + (_2148 * cbSceneParam._m0[80u].z);
        }
        vec4 _2367 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2058, _2059, 1.0), 0.0);
        float _2376 = exp2((_2365 * (-1.44269502162933349609375)) * (1.0 - _2367.w));
        float _2377 = log2(_2376);
        float _2393 = log2(_2078);
        _2158 = (exp2(_2393 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].x)) * _2367.x) / cbSceneParam._m0[78u].x)) + _2075;
        _2160 = (exp2(_2393 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].y)) * _2367.y) / cbSceneParam._m0[78u].y)) + _2076;
        _2162 = (exp2(_2393 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].z)) * _2367.z) / cbSceneParam._m0[78u].z)) + _2077;
        _2164 = _2376 * _2078;
    }
    else
    {
        _2158 = _2075;
        _2160 = _2076;
        _2162 = _2077;
        _2164 = _2078;
    }
    float _2176 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2177 = _2176 == 3.0;
    float _2178 = log2(_2164);
    float _2185 = exp2(_2178 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2186 = exp2(_2178 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)));
    float _2187 = exp2(_2178 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0)));
    float _2196 = (_2176 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2196 * (_2177 ? _2185 : (_2185 + (cbSceneParam._m0[72u].w * _2158)));
    SV_Target.y = _2196 * (_2177 ? _2186 : (_2186 + (cbSceneParam._m0[72u].w * _2160)));
    SV_Target.z = _2196 * (_2177 ? _2187 : (_2187 + (cbSceneParam._m0[72u].w * _2162)));
    SV_Target.w = cbInstanceData._m0[_2050].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2050].w;
}


