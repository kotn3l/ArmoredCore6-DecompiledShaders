#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1122;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _321 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _325 = _321.z;
    float _348 = (_321.x * 2.0) + (-1.0);
    float _350 = (_321.y * 2.0) + (-1.0);
    float _353 = _348 - (_348 * _286);
    float _354 = _350 - (_350 * _286);
    float _363 = cbMtdParam._m0[22u].y + _259;
    float _364 = cbMtdParam._m0[22u].z + _260;
    float _365 = cbMtdParam._m0[22u].w + _261;
    float _379 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_188, _189, _190));
    float _380 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_202, _203, _204));
    float _381 = (-0.0) - dot(vec3(_363, _364, _365), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _388 = _385 * _381;
    float _389 = (_385 * _379) + (_353 * cbMtdParam._m0[20u].y);
    float _390 = (_385 * _380) + (_354 * cbMtdParam._m0[20u].z);
    float _391 = _389 * cbMtdParam._m0[19u].x;
    float _392 = _390 * cbMtdParam._m0[18u].w;
    float _393 = fract(TEXCOORD.x);
    float _394 = fract(TEXCOORD.y);
    float _400;
    if (_391 > 0.0)
    {
        _400 = (1.0 - _393) / _391;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_391 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _393) / _391;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _400 = frontier_phi_3_2_ladder;
    }
    float _408;
    if (_392 > 0.0)
    {
        _408 = (1.0 - _394) / _392;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_392 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _394) / _392;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _408 = frontier_phi_7_6_ladder;
    }
    bool _410 = _388 > 0.0;
    float _412 = _410 ? (cbMtdParam._m0[15u].x / _388) : 5000.0;
    float _413 = isnan(_408) ? _400 : (isnan(_400) ? _408 : min(_400, _408));
    float _414 = isnan(_412) ? _413 : (isnan(_413) ? _412 : min(_413, _412));
    float _418 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _419 = _393 + (-0.5);
    float _422 = _394 + (-0.5);
    float _425 = ((_414 * _388) + _418) / _418;
    vec4 _450 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_419 + (_414 * _391)) / _425) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_422 + (_414 * _392)) / _425) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _466 = (_452 - (_452 * _286)) * cbMtdParam._m0[9u].x;
    float _467 = (_453 - (_453 * _286)) * cbMtdParam._m0[9u].y;
    float _468 = cbMtdParam._m0[9u].z * (_454 - (_454 * _286));
    float _486 = _389 * cbMtdParam._m0[21u].x;
    float _487 = _390 * cbMtdParam._m0[20u].w;
    bool _488 = _486 > 0.0;
    float _493;
    if (_488)
    {
        _493 = (1.0 - _393) / _486;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_486 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _393) / _486;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _493 = frontier_phi_11_10_ladder;
    }
    bool _495 = _487 > 0.0;
    float _500;
    if (_495)
    {
        _500 = (1.0 - _394) / _487;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_487 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _394) / _487;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _500 = frontier_phi_15_14_ladder;
    }
    float _503 = _410 ? (cbMtdParam._m0[16u].z / _388) : 5000.0;
    float _504 = isnan(_500) ? _493 : (isnan(_493) ? _500 : min(_493, _500));
    float _505 = isnan(_503) ? _504 : (isnan(_504) ? _503 : min(_504, _503));
    float _509 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _513 = ((_505 * _388) + _509) / _509;
    float _518 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _520 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _536 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_419 + (_505 * _486)) / _513) + 0.5) + _518) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_422 + (_505 * _487)) / _513) + 0.5) + _520) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _541 = _536.x * cbMtdParam._m0[10u].x;
    float _542 = _536.y * cbMtdParam._m0[10u].y;
    float _543 = _536.z * cbMtdParam._m0[10u].z;
    float _551;
    if (_488)
    {
        _551 = (1.0 - _393) / _486;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_486 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _393) / _486;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _551 = frontier_phi_19_18_ladder;
    }
    float _557;
    if (_495)
    {
        _557 = (1.0 - _394) / _487;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_487 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _394) / _487;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _557 = frontier_phi_23_22_ladder;
    }
    float _559 = isnan(_557) ? _551 : (isnan(_551) ? _557 : min(_551, _557));
    float _560 = isnan(_503) ? _559 : (isnan(_559) ? _503 : min(_559, _503));
    float _567 = ((_560 * _388) + _509) / _509;
    vec4 _581 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_419 + (_560 * _486)) / _567) + 0.5) + _518) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_422 + (_560 * _487)) / _567) + 0.5) + _520) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _583 = _581.w;
    float _585 = _583 - (_583 * _286);
    vec4 _609 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _613 = _609.z;
    float _616 = (_609.x * 2.0) + (-1.0);
    float _617 = (_609.y * 2.0) + (-1.0);
    float _618 = dot(vec2(_616, _617), vec2(_616, _617));
    float _3249 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _623 = sqrt(1.0 - (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))));
    float _624 = _613 * _286;
    float _631 = (cbMtdParam._m0[15u].w * ((_325 - _624) + ((_613 - _325) * _286))) + _624;
    float _635 = (cbMtdParam._m0[16u].x * _353) + _616;
    float _636 = (cbMtdParam._m0[16u].x * _354) + _617;
    float _639 = fma(_623, _195, fma(_636, _202, _635 * _188));
    float _642 = fma(_623, _196, fma(_636, _203, _635 * _189));
    float _645 = fma(_623, _197, fma(_636, _204, _635 * _190));
    float _649 = inversesqrt(dot(vec3(_639, _642, _645), vec3(_639, _642, _645)));
    float _650 = _649 * _639;
    float _651 = _649 * _642;
    float _652 = _649 * _645;
    float _3260 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _653 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3282 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3293 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _672 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _677 = _259 * _676;
    float _678 = _260 * _676;
    float _679 = _261 * _676;
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _706 = fma(_652, cbSceneParam._m0[5u].z, fma(_651, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _650));
    float _709 = fma(_652, cbSceneParam._m0[6u].z, fma(_651, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _650));
    float _712 = fma(_652, cbSceneParam._m0[7u].z, fma(_651, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _650));
    uint _725 = uint(roundEven(NORMAL.w)) * 13u;
    uint _727 = _725 + 9u;
    uint _728 = _727 + uint(cbMatDynParam._m0[0u].w);
    float _734 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_728].x;
    float _735 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_728].y;
    float _736 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_728].z;
    float _3304 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    vec4 _748 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _751 = _748.x * TEXCOORD.z;
    float _752 = dot(vec3(_650, _651, _652), vec3(_677, _678, _679));
    float _755 = _752 * 2.0;
    float _759 = (_755 * _650) - _677;
    float _760 = (_755 * _651) - _678;
    float _761 = (_755 * _652) - _679;
    float _765 = abs(dot(vec3(_677, _678, _679), vec3(_650, _651, _652)));
    float _3337 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _767 = sqrt(_653);
    float _780 = exp2((_767 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_767 * 3.0));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1121;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _848 = fma(_820, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812));
        float _852 = fma(_820, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812));
        float _856 = fma(_820, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812));
        float _879 = _812 + _650;
        float _880 = _816 + _651;
        float _881 = _820 + _652;
        float _891 = fma(_881, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879)) - _848;
        float _892 = fma(_881, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879)) - _852;
        float _893 = fma(_881, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879)) - _856;
        float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
        float _910 = ((_897 * _891) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_848 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_897 * _892) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_852 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_897 * _893) / cbModelParam._m0[34u].z) + ((((((_856 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        float _949 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_915.x + (-0.5));
        float _951 = _949 * (_915.y + (-0.5));
        float _952 = _949 * (_915.z + (-0.5));
        float _959 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_922.x + (-0.5));
        float _961 = _959 * (_922.y + (-0.5));
        float _962 = _959 * (_922.z + (-0.5));
        float _969 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_929.x + (-0.5));
        float _971 = _969 * (_929.y + (-0.5));
        float _972 = _969 * (_929.z + (-0.5));
        float _979 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_936.x + (-0.5));
        float _981 = _979 * (_936.y + (-0.5));
        float _982 = _979 * (_936.z + (-0.5));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = _950 * 0.5;
        float _987 = _960 * 0.5;
        float _988 = _970 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1003 = (dot(vec3(_650, _651, _652), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1013 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3385 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_1015 + 1.0))) + _1020) * _983;
        float _1030 = _951 * 0.5;
        float _1031 = _961 * 0.5;
        float _1032 = _971 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_650, _651, _652), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3418 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_1057 + 1.0))) + _1062) * _984;
        float _1072 = _952 * 0.5;
        float _1073 = _962 * 0.5;
        float _1074 = _972 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_650, _651, _652), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3451 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_1099 + 1.0))) + _1104) * _985;
        _1121 = _952;
        _1123 = _951;
        _1124 = _950;
        _1125 = _962;
        _1126 = _961;
        _1127 = _960;
        _1128 = _972;
        _1129 = _971;
        _1130 = _970;
        _1131 = _985;
        _1132 = _984;
        _1133 = _983;
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _1122;
        _1123 = _1122;
        _1124 = _1122;
        _1125 = _1122;
        _1126 = _1122;
        _1127 = _1122;
        _1128 = _1122;
        _1129 = _1122;
        _1130 = _1122;
        _1131 = _1122;
        _1132 = _1122;
        _1133 = _1122;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
    }
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1162 = fma(_820, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _812));
        float _1166 = fma(_820, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _812));
        float _1170 = fma(_820, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _812));
        float _1193 = _812 + _650;
        float _1194 = _816 + _651;
        float _1195 = _820 + _652;
        float _1205 = fma(_1195, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193)) - _1162;
        float _1206 = fma(_1195, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193)) - _1166;
        float _1207 = fma(_1195, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193)) - _1170;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1162 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1166 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[35u].z) + ((((((_1170 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1261 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1228.x + (-0.5));
        float _1263 = _1261 * (_1228.y + (-0.5));
        float _1264 = _1261 * (_1228.z + (-0.5));
        float _1271 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1235.x + (-0.5));
        float _1273 = _1271 * (_1235.y + (-0.5));
        float _1274 = _1271 * (_1235.z + (-0.5));
        float _1281 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1242.x + (-0.5));
        float _1283 = _1281 * (_1242.y + (-0.5));
        float _1284 = _1281 * (_1242.z + (-0.5));
        float _1291 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1249.x + (-0.5));
        float _1293 = _1291 * (_1249.y + (-0.5));
        float _1294 = _1291 * (_1249.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_650, _651, _652), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3514 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1325 + 1.0))) + _1330) * _1295;
        float _1340 = _1263 * 0.5;
        float _1341 = _1273 * 0.5;
        float _1342 = _1283 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_650, _651, _652), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3547 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1367 + 1.0))) + _1372) * _1296;
        float _1382 = _1264 * 0.5;
        float _1383 = _1274 * 0.5;
        float _1384 = _1284 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_650, _651, _652), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3580 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1409 + 1.0))) + _1414) * _1297;
        _1431 = _1264;
        _1432 = _1263;
        _1433 = _1262;
        _1434 = _1274;
        _1435 = _1273;
        _1436 = _1272;
        _1437 = _1284;
        _1438 = _1283;
        _1439 = _1282;
        _1440 = _1297;
        _1441 = _1296;
        _1442 = _1295;
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1122;
        _1432 = _1122;
        _1433 = _1122;
        _1434 = _1122;
        _1435 = _1122;
        _1436 = _1122;
        _1437 = _1122;
        _1438 = _1122;
        _1439 = _1122;
        _1440 = _1122;
        _1441 = _1122;
        _1442 = _1122;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1134)) + _1134;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1135)) + _1135;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1136)) + _1136;
    float _1478 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1455));
    float _1499 = _759 * 0.5;
    float _1500 = _760 * 0.5;
    float _1501 = _761 * 0.5;
    float _1502 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1505 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1508 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1542;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1515 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1121, _1125, _1128, _1131));
        float _1519 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1523 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1530 = dot(vec4(cbModelParam._m0[39u]), vec4(_1499, _1500, _1501, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1553;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1544 = dot(vec4(cbModelParam._m0[40u]), vec4(_1499, _1500, _1501, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1557 = (_1553 * cbModelParam._m0[1u].x) + (_1542 * (1.0 - cbModelParam._m0[1u].x));
    float _1567 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _653);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1567 : min(cbModelParam._m0[25u].z, _1567));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1616 = fma(_820, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812)) + cbModelParam._m0[13u].w;
        float _1620 = fma(_820, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812)) + cbModelParam._m0[14u].w;
        float _1624 = fma(_820, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812)) + cbModelParam._m0[15u].w;
        float _1627 = fma(_761, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759));
        float _1630 = fma(_761, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759));
        float _1633 = fma(_761, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759));
        float _1661;
        if (_1627 > 0.0)
        {
            _1661 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1661 = frontier_phi_38_36_ladder;
        }
        float _2006;
        if (_1630 > 0.0)
        {
            _2006 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2006 = frontier_phi_47_43_ladder;
        }
        float _2322;
        if (_1633 > 0.0)
        {
            _2322 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2322 = frontier_phi_61_54_ladder;
        }
        float _2324 = isnan(_2006) ? _1661 : (isnan(_1661) ? _2006 : min(_1661, _2006));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1627) + _1616;
        float _2330 = (_2325 * _1630) + _1620;
        float _2331 = (_2325 * _1633) + _1624;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2332;
        float _2335 = _2332 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2331 > _2335) || ((_2331 < _2333) || ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 < _2333) || (_2329 > _2335))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1568);
            frontier_phi_37_61_ladder = _2457.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2457.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2457.x * cbModelParam._m0[1u].y;
        }
        _1649 = frontier_phi_37_61_ladder_2;
        _1651 = frontier_phi_37_61_ladder_1;
        _1653 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_759, _760, _761), _1568);
        _1649 = _1637.x * cbModelParam._m0[1u].y;
        _1651 = _1637.y * cbModelParam._m0[1u].y;
        _1653 = _1637.z * cbModelParam._m0[1u].y;
    }
    float _1657 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _653);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1657 : min(cbModelParam._m0[25u].w, _1657));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_820, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_820, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_820, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_761, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759));
        float _1724 = fma(_761, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759));
        float _1727 = fma(_761, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759));
        float _2011;
        if (_1721 > 0.0)
        {
            _2011 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2011 = frontier_phi_49_45_ladder;
        }
        float _2348;
        if (_1724 > 0.0)
        {
            _2348 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2348 = frontier_phi_63_56_ladder;
        }
        float _2517;
        if (_1727 > 0.0)
        {
            _2517 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2517 = frontier_phi_77_72_ladder;
        }
        float _2519 = isnan(_2348) ? _2011 : (isnan(_2011) ? _2348 : min(_2011, _2348));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1721) + _1710;
        float _2525 = (_2520 * _1724) + _1714;
        float _2526 = (_2520 * _1727) + _1718;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1658);
            frontier_phi_46_77_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_46_77_ladder_2;
        _1748 = frontier_phi_46_77_ladder_1;
        _1750 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_759, _760, _761), _1658);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1762 = ((((1.0 - _780) * ((_767 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_780 * _767)) * _751;
    float _1763 = _1762 * ((cbModelParam._m0[1u].w * (_1746 - _1649)) + _1649);
    float _1764 = _1762 * ((cbModelParam._m0[1u].w * (_1748 - _1651)) + _1651);
    float _1765 = _1762 * ((cbModelParam._m0[1u].w * (_1750 - _1653)) + _1653);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_725 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1792 = _751 + (-1.0);
    float _1795 = (cbLight._m0[_1787].x * _1792) + 1.0;
    float _1796 = (cbLight._m0[_1787].y * _1792) + 1.0;
    uint _1797 = _1786 + 5u;
    float _1803 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1807 = _1786 + 4u;
    float _1813 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1817 = _1786 | 1u;
    float _1828 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_650, _651, _652));
    float _1831 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_650, _651, _652));
    float _3716 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _3727 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1836 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.3183098733425140380859375;
    float _1838 = (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.3183098733425140380859375;
    float _1845 = ((cbLight._m0[_1797].x * _1803) * _1838) + ((cbLight._m0[_1807].x * _1813) * _1836);
    float _1846 = ((_1803 * cbLight._m0[_1797].y) * _1838) + ((_1813 * cbLight._m0[_1807].y) * _1836);
    float _1847 = ((_1803 * cbLight._m0[_1797].z) * _1838) + ((_1813 * cbLight._m0[_1807].z) * _1836);
    uint _1849 = _1786 + 8u;
    float _1862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _653) * 0.949999988079071044921875);
    float _1863 = _1862 * _1862;
    float _1864 = cbLight._m0[_1786].x + _677;
    float _1865 = cbLight._m0[_1786].y + _678;
    float _1866 = cbLight._m0[_1786].z + _679;
    float _1870 = inversesqrt(dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866)));
    float _1871 = _1870 * _1864;
    float _1872 = _1870 * _1865;
    float _1873 = _1870 * _1866;
    float _1874 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1786].xyz));
    float _3738 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _1878 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _1879 = dot(vec3(_650, _651, _652), vec3(_1871, _1872, _1873));
    float _3760 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1871, _1872, _1873));
    float _3771 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1863 * _1863;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1902 = (exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1903 = 1.0 - _1863;
    float _1914 = (0.5 / (((_1878 * ((_1877 * _1903) + _1863)) + 9.9999999392252902907785028219223e-09) + (((_1878 * _1903) + _1863) * _1877))) * _1877;
    float _3782 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1916 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    uint _1927 = _1786 + 9u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _653) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1817].x + _677;
    float _1941 = cbLight._m0[_1817].y + _678;
    float _1942 = cbLight._m0[_1817].z + _679;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1817].xyz));
    float _3793 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1954 = dot(vec3(_650, _651, _652), vec3(_1947, _1948, _1949));
    float _3804 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1947, _1948, _1949));
    float _3815 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1939 * _1939;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1976 = 1.0 - _1939;
    float _1986 = (0.5 / (((_1878 * ((_1953 * _1976) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1878 * _1976) + _1939) * _1953))) * _1953;
    float _3826 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    float _1998 = (((_1975 * cbLight._m0[_1927].x) * _1988) * _1803) + (((_1902 * cbLight._m0[_1849].x) * _1916) * _1813);
    float _1999 = (((_1975 * cbLight._m0[_1927].y) * _1988) * _1803) + (((_1902 * cbLight._m0[_1849].y) * _1916) * _1813);
    float _2000 = (((_1975 * cbLight._m0[_1927].z) * _1988) * _1803) + (((_1902 * cbLight._m0[_1849].z) * _1916) * _1813);
    float _2115;
    float _2117;
    float _2119;
    float _2121;
    float _2123;
    float _2125;
    if (_1784.y == 0u)
    {
        float _2055 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2056 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2055;
        float _2057 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2055;
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2055;
        uvec4 _2070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2071 = _2070.x;
        uint _2082 = uint((float(_2070.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2071))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2071)));
        float _2092 = (log2(_2058 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2093 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        uint _2096 = uint(isnan(14.0) ? _2093 : (isnan(_2093) ? 14.0 : min(_2093, 14.0)));
        uvec4 _2101 = texelFetch(g_lightClusterGridBuffer, int(((_2096 << 2u) + (_2082 << 6u)) >> 2u));
        uint _2102 = _2101.x;
        uint _2103 = _2070.z;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        if (((((1u << ((_2103 >> 4u) & 15u)) + 4294967295u) & _2102) == 0u) || ((_2103 & 240u) == 0u))
        {
            _2209 = 0.0;
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
        }
        else
        {
            float _2210;
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2220;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            uint _2391 = 0u;
            uint _2400;
            bool _2401;
            for (;;)
            {
                _2400 = texelFetch(g_lightClassification, int((((_2096 << 5u) + (_2082 << 9u)) + (_2391 << 2u)) >> 2u)).x;
                _2401 = _2400 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2401)
                {
                    frontier_phi_74_pred = _2388;
                    frontier_phi_74_pred_1 = _2387;
                    frontier_phi_74_pred_2 = _2386;
                    frontier_phi_74_pred_3 = _2385;
                    frontier_phi_74_pred_4 = _2389;
                    frontier_phi_74_pred_5 = _2390;
                }
                else
                {
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    uint _2566;
                    _2560 = _2385;
                    _2561 = _2386;
                    _2562 = _2387;
                    _2563 = _2388;
                    _2564 = _2389;
                    _2565 = _2390;
                    _2566 = _2400;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    for (;;)
                    {
                        uint _2570 = uint(findLSB(_2566)) + (_2391 << 5u);
                        uint _2567 = (_2566 + 4294967295u) & _2566;
                        uint _2572 = _2570 * 48u;
                        vec4 _2586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2572)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 3u)).x));
                        uint _2592 = (_2570 * 48u) + 4u;
                        vec4 _2605 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2592)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 3u)).x));
                        uint _2611 = (_2570 * 48u) + 8u;
                        vec3 _2622 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x));
                        float _2626 = _2586.x - _2056;
                        float _2627 = _2586.y - _2057;
                        float _2628 = _2586.z - _2058;
                        float _2629 = dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628));
                        float _2632 = inversesqrt(_2629);
                        float _2633 = _2632 * _2626;
                        float _2634 = _2632 * _2627;
                        float _2635 = _2632 * _2628;
                        float _2636 = dot(vec3(_706, _709, _712), vec3(_2633, _2634, _2635));
                        float _2641 = 1.0 - (_2629 * _2586.w);
                        float _3847 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2642 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
                        float _2643 = sqrt(_2629) * _2605.w;
                        float _2646 = 1.39999997615814208984375 / (_2643 + 1.39999997615814208984375);
                        float _2647 = _2646 * _2646;
                        float _2650 = ((1.0 - _2647) * _2636) + _2647;
                        float _2653 = _2643 * _2643;
                        float _2657 = ((isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0))) * _2642) / ((_2653 * 0.699999988079071044921875) + 1.0);
                        float _2661 = (-0.0) - _2056;
                        float _2662 = (-0.0) - _2057;
                        float _2663 = (-0.0) - _2058;
                        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
                        float _2668 = _2667 * _2661;
                        float _2669 = _2667 * _2662;
                        float _2670 = _2667 * _2663;
                        float _2678 = exp2(log2(1.0 / ((_2653 * 3.5) + 5.0)) * 0.25);
                        float _2679 = 1.0 - _767;
                        float _2686 = sqrt(1.0 - ((1.0 - (_2679 * _2679)) * (1.0 - (_2678 * _2678))));
                        float _2687 = _2686 * _2686;
                        float _2688 = _2687 * _2687;
                        float _2689 = _2668 + _2633;
                        float _2690 = _2669 + _2634;
                        float _2691 = _2670 + _2635;
                        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
                        float _2699 = dot(vec3(_706, _709, _712), vec3(_2668, _2669, _2670));
                        float _3863 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2702 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
                        float _2703 = dot(vec3(_706, _709, _712), vec3(_2695 * _2689, _2695 * _2690, _2695 * _2691));
                        float _3874 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                        float _2706 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                        float _2710 = ((_2706 * _2706) * (_2688 + (-1.0))) + 1.0;
                        float _2711 = _2646 * _2687;
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2636) + _2712;
                        float _3885 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                        float _2717 = 1.0 - _2687;
                        float _2727 = (0.5 / (((_2716 * ((_2702 * _2717) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2716 * _2717) + _2687) * _2702))) * _2716;
                        float _3896 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2738 = (((_2688 * 3.1415927410125732421875) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) / ((_2710 * _2710) * ((_2653 * 2.1991131305694580078125) + 3.141590118408203125))) * _2642;
                        _2469 = (_2657 * _2605.x) + _2563;
                        _2470 = (_2657 * _2605.y) + _2564;
                        _2471 = (_2657 * _2605.z) + _2565;
                        _2466 = (_2738 * _2622.x) + _2560;
                        _2467 = (_2738 * _2622.y) + _2561;
                        _2468 = (_2738 * _2622.z) + _2562;
                        if (_2567 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2560 = _2466;
                            _2561 = _2467;
                            _2562 = _2468;
                            _2563 = _2469;
                            _2564 = _2470;
                            _2565 = _2471;
                            _2566 = _2567;
                        }
                    }
                    frontier_phi_74_pred = _2469;
                    frontier_phi_74_pred_1 = _2468;
                    frontier_phi_74_pred_2 = _2467;
                    frontier_phi_74_pred_3 = _2466;
                    frontier_phi_74_pred_4 = _2470;
                    frontier_phi_74_pred_5 = _2471;
                }
                _2216 = frontier_phi_74_pred;
                _2214 = frontier_phi_74_pred_1;
                _2212 = frontier_phi_74_pred_2;
                _2210 = frontier_phi_74_pred_3;
                _2218 = frontier_phi_74_pred_4;
                _2220 = frontier_phi_74_pred_5;
                uint _2392 = _2391 + 1u;
                if (_2392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2385 = _2210;
                    _2386 = _2212;
                    _2387 = _2214;
                    _2388 = _2216;
                    _2389 = _2218;
                    _2390 = _2220;
                    _2391 = _2392;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2209 = _2210;
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
        }
        uvec4 _2223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2224 = _2223.z;
        uint _2226 = (_2224 >> 8u) & 15u;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((4294967295u << _2226) & _2102) == 0u)
        {
            _2353 = _2209;
            _2355 = _2211;
            _2357 = _2213;
            _2359 = _2215;
            _2361 = _2217;
            _2363 = _2219;
        }
        else
        {
            float _2378 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
            float _2379 = _2378 * _2056;
            float _2380 = _2378 * _2057;
            float _2381 = _2378 * _2058;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2226 < ((_2224 >> 12u) & 15u))
            {
                float _2354;
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2543 = _2209;
                float _2544 = _2211;
                float _2545 = _2213;
                float _2546 = _2215;
                float _2547 = _2217;
                float _2548 = _2219;
                uint _2549 = _2226;
                uint _2558;
                bool _2559;
                for (;;)
                {
                    _2558 = texelFetch(g_lightClassification, int((((_2096 << 5u) + (_2082 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                    _2559 = _2558 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2559)
                    {
                        frontier_phi_83_pred = _2546;
                        frontier_phi_83_pred_1 = _2545;
                        frontier_phi_83_pred_2 = _2544;
                        frontier_phi_83_pred_3 = _2543;
                        frontier_phi_83_pred_4 = _2548;
                        frontier_phi_83_pred_5 = _2547;
                    }
                    else
                    {
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _2777 = _2543;
                        float _2778 = _2544;
                        float _2779 = _2545;
                        float _2780 = _2546;
                        float _2781 = _2547;
                        float _2782 = _2548;
                        uint _2783 = _2558;
                        uint _2784;
                        vec4 _2809;
                        float _2810;
                        vec4 _2825;
                        vec3 _2837;
                        vec4 _2852;
                        vec4 _2867;
                        float _2913;
                        bool _2914;
                        for (;;)
                        {
                            uint _2794 = ((_2549 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2783));
                            _2784 = (_2783 + 4294967295u) & _2783;
                            uint _2796 = _2794 * 40u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            _2810 = _2809.w;
                            uint _2812 = (_2794 * 40u) + 4u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2794 * 40u) + 8u;
                            _2837 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x));
                            uint _2839 = (_2794 * 40u) + 16u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2854 = (_2794 * 40u) + 20u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2869 = (_2794 * 40u) + 24u;
                            vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2888 = (_2794 * 40u) + 28u;
                            vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2913 = fma(_2058, _2901.z, fma(_2057, _2901.y, _2901.x * _2056)) + _2901.w;
                            _2914 = !((fma(_2058, _2882.z, fma(_2057, _2882.y, _2882.x * _2056)) + _2882.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2914)
                            {
                                float _2941 = _2809.x - _2056;
                                float _2942 = _2809.y - _2057;
                                float _2943 = _2809.z - _2058;
                                float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                                float _2947 = inversesqrt(_2944);
                                float _2948 = _2947 * _2941;
                                float _2949 = _2947 * _2942;
                                float _2950 = _2947 * _2943;
                                float _2954 = 1.0 - (_2944 / (_2810 * _2810));
                                float _3907 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2955 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                                float _2959 = sqrt(_2944) * _2825.w;
                                float _2961 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                                float _2962 = _2961 * _2961;
                                float _2965 = ((1.0 - _2962) * dot(vec3(_2948, _2949, _2950), vec3(_706, _709, _712))) + _2962;
                                float _2968 = _2959 * _2959;
                                float _2972 = (fma(_2058, _2852.z, fma(_2057, _2852.y, _2852.x * _2056)) + _2852.w) / _2913;
                                float _2973 = (fma(_2058, _2867.z, fma(_2057, _2867.y, _2867.x * _2056)) + _2867.w) / _2913;
                                float _2977 = 1.0 - dot(vec2(_2972, _2973), vec2(_2972, _2973));
                                float _3923 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                                float _2979 = _2978 * (((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2955) / ((_2968 * 0.699999988079071044921875) + 1.0));
                                float _2991 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                                float _2992 = 1.0 - _767;
                                float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                                float _3000 = _2999 * _2999;
                                float _3001 = _3000 * _3000;
                                float _3002 = _2948 - _2379;
                                float _3003 = _2949 - _2380;
                                float _3004 = _2950 - _2381;
                                float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                                float _3012 = dot(vec3(_706, _709, _712), vec3((-0.0) - _2379, (-0.0) - _2380, (-0.0) - _2381));
                                float _3934 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3015 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                                float _3016 = dot(vec3(_706, _709, _712), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                                float _3945 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3019 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                                float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                                float _3024 = _2961 * _3000;
                                float _3025 = _3024 * _3024;
                                float _3031 = ((1.0 - _3025) * dot(vec3(_706, _709, _712), vec3(_2948, _2949, _2950))) + _3025;
                                float _3956 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _3033 = 1.0 - _3000;
                                float _3043 = (0.5 / (((_3032 * ((_3015 * _3033) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3000) * _3015))) * _3032;
                                float _3967 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3053 = (_2978 * _2955) * (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) / ((_3023 * _3023) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2979 * _2825.x;
                                frontier_phi_89_pred_1 = _3053 * _2837.z;
                                frontier_phi_89_pred_2 = _3053 * _2837.y;
                                frontier_phi_89_pred_3 = _3053 * _2837.x;
                                frontier_phi_89_pred_4 = _2979 * _2825.z;
                                frontier_phi_89_pred_5 = _2979 * _2825.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3060 = frontier_phi_89_pred;
                            _3059 = frontier_phi_89_pred_1;
                            _3058 = frontier_phi_89_pred_2;
                            _3057 = frontier_phi_89_pred_3;
                            _3062 = frontier_phi_89_pred_4;
                            _3061 = frontier_phi_89_pred_5;
                            _2767 = _3060 + _2780;
                            _2768 = _3061 + _2781;
                            _2769 = _3062 + _2782;
                            _2764 = _3057 + _2777;
                            _2765 = _3058 + _2778;
                            _2766 = _3059 + _2779;
                            if (_2784 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2784;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2767;
                        frontier_phi_83_pred_1 = _2766;
                        frontier_phi_83_pred_2 = _2765;
                        frontier_phi_83_pred_3 = _2764;
                        frontier_phi_83_pred_4 = _2769;
                        frontier_phi_83_pred_5 = _2768;
                    }
                    _2360 = frontier_phi_83_pred;
                    _2358 = frontier_phi_83_pred_1;
                    _2356 = frontier_phi_83_pred_2;
                    _2354 = frontier_phi_83_pred_3;
                    _2364 = frontier_phi_83_pred_4;
                    _2362 = frontier_phi_83_pred_5;
                    uint _2550 = _2549 + 1u;
                    if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2543 = _2354;
                        _2544 = _2356;
                        _2545 = _2358;
                        _2546 = _2360;
                        _2547 = _2362;
                        _2548 = _2364;
                        _2549 = _2550;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2364;
                frontier_phi_65_66_ladder_1 = _2362;
                frontier_phi_65_66_ladder_2 = _2358;
                frontier_phi_65_66_ladder_3 = _2356;
                frontier_phi_65_66_ladder_4 = _2360;
                frontier_phi_65_66_ladder_5 = _2354;
            }
            else
            {
                frontier_phi_65_66_ladder = _2219;
                frontier_phi_65_66_ladder_1 = _2217;
                frontier_phi_65_66_ladder_2 = _2213;
                frontier_phi_65_66_ladder_3 = _2211;
                frontier_phi_65_66_ladder_4 = _2215;
                frontier_phi_65_66_ladder_5 = _2209;
            }
            _2353 = frontier_phi_65_66_ladder_5;
            _2355 = frontier_phi_65_66_ladder_3;
            _2357 = frontier_phi_65_66_ladder_2;
            _2359 = frontier_phi_65_66_ladder_4;
            _2361 = frontier_phi_65_66_ladder_1;
            _2363 = frontier_phi_65_66_ladder;
        }
        float _2368 = isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0));
        _2115 = (_2368 * _2359) + _1845;
        _2117 = (_2368 * _2361) + _1846;
        _2119 = (_2368 * _2363) + _1847;
        _2121 = ((_2353 * 0.039999999105930328369140625) * _2368) + _1998;
        _2123 = ((_2355 * 0.039999999105930328369140625) * _2368) + _1999;
        _2125 = ((_2357 * 0.039999999105930328369140625) * _2368) + _2000;
    }
    else
    {
        _2115 = _1845;
        _2117 = _1846;
        _2119 = _1847;
        _2121 = _1998;
        _2123 = _1999;
        _2125 = _2000;
    }
    uint _2131 = _727 + uint(cbMatDynParam._m0[0u].w);
    float _3983 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3994 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4005 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _2156 = (((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_2115 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _751))) + ((_2121 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1557)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2131].x * ((_585 * ((_541 - _466) - (_541 * _286))) + _466));
    float _2158 = ((cbInstanceData._m0[_2131].y * ((_585 * ((_542 - _467) - (_542 * _286))) + _467)) + ((_2123 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1557)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_2117 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _751)));
    float _2160 = ((cbInstanceData._m0[_2131].z * ((_585 * ((_543 - _468) - (_543 * _286))) + _468)) + ((_2125 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1557)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2119 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _751)));
    uint _2164 = _725 + 6u;
    float _2172 = _685 / cbSceneParam._m0[86u].x;
    float _2173 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2187 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2172, _2173, (log2((isnan(cbSceneParam._m0[77u].w) ? _672 : (isnan(_672) ? cbSceneParam._m0[77u].w : min(_672, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2189 = _2187.x;
    float _2190 = _2187.y;
    float _2191 = _2187.z;
    float _2192 = _2187.w;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_672 > cbSceneParam._m0[78u].w)
    {
        float _2234 = isnan(_672) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _672 : min(cbSceneParam._m0[80u].w, _672));
        float _2235 = _2234 / _672;
        float _2246 = _2235 * _259;
        float _2247 = _260 * _2235;
        float _2248 = (-0.0) - _2247;
        float _2249 = _2235 * _261;
        float _2251 = (cbSceneParam._m0[77u].w * _2248) / _2234;
        float _2252 = _2251 + cbSceneParam._m0[79u].w;
        float _2253 = cbSceneParam._m0[79u].w - _2247;
        float _2259 = sqrt(((_2246 * _2246) + (_2247 * _2247)) + (_2249 * _2249));
        float _2262 = (1.0 - (cbSceneParam._m0[77u].w / _2234)) * _2259;
        float _2268 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2270 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2479;
        if (abs((_2248 - _2251) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2479 = ((((_2252 > 0.0) ? exp2(_2268 * _2252) : (2.0 - exp2(_2270 * _2252))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2262;
        }
        else
        {
            float _2414 = 1.0 / cbSceneParam._m0[80u].x;
            float _2415 = isnan(_2253) ? _2252 : (isnan(_2252) ? _2253 : max(_2252, _2253));
            float _2416 = isnan(_2253) ? _2252 : (isnan(_2252) ? _2253 : min(_2252, _2253));
            float _2425 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : min(_2415, 0.0));
            float _2426 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : min(_2416, 0.0));
            _2479 = ((abs(_2259 / _2248) * cbSceneParam._m0[80u].y) * ((((_2425 - _2426) * 2.0) - ((exp2(_2268 * (isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0)))) - exp2(_2268 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0))))) * _2414)) - ((exp2(_2270 * _2425) - exp2(_2270 * _2426)) * _2414))) + (_2262 * cbSceneParam._m0[80u].z);
        }
        vec4 _2481 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2172, _2173, 1.0), 0.0);
        float _2490 = exp2((_2479 * (-1.44269502162933349609375)) * (1.0 - _2481.w));
        float _2491 = log2(_2490);
        float _2507 = log2(_2192);
        _2272 = (exp2(_2507 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2491 * cbSceneParam._m0[78u].x)) * _2481.x) / cbSceneParam._m0[78u].x)) + _2189;
        _2274 = (exp2(_2507 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2491 * cbSceneParam._m0[78u].y)) * _2481.y) / cbSceneParam._m0[78u].y)) + _2190;
        _2276 = (exp2(_2507 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2491 * cbSceneParam._m0[78u].z)) * _2481.z) / cbSceneParam._m0[78u].z)) + _2191;
        _2278 = _2490 * _2192;
    }
    else
    {
        _2272 = _2189;
        _2274 = _2190;
        _2276 = _2191;
        _2278 = _2192;
    }
    float _2290 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2291 = _2290 == 3.0;
    float _2292 = log2(_2278);
    float _2299 = exp2(_2292 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0)));
    float _2300 = exp2(_2292 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)));
    float _2301 = exp2(_2292 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)));
    float _2310 = (_2290 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2310 * (_2291 ? _2299 : (_2299 + (cbSceneParam._m0[72u].w * _2272)));
    SV_Target.y = _2310 * (_2291 ? _2300 : (_2300 + (cbSceneParam._m0[72u].w * _2274)));
    SV_Target.z = _2310 * (_2291 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2276)));
    SV_Target.w = cbInstanceData._m0[_2164].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2164].w;
}


