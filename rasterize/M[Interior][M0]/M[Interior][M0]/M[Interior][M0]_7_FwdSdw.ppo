#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _342;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _170 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _171 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _176 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _177 = _176 * _169;
    float _178 = _176 * _170;
    float _179 = _176 * _171;
    float _183 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _187 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _188 = _187 * TANGENT.x;
    float _189 = _187 * TANGENT.y;
    float _190 = _187 * TANGENT.z;
    float _235 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _245 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _235);
    float _246 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _235);
    float _247 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _235);
    float _272 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _279 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _288 = cbMtdParam._m0[23u].x + _245;
    float _289 = cbMtdParam._m0[23u].y + _246;
    float _290 = cbMtdParam._m0[23u].z + _247;
    float _307 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_272 * _177, _272 * _178, _272 * _179));
    float _308 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_279 * _188, _279 * _189, _279 * _190));
    float _309 = (-0.0) - dot(vec3(_288, _289, _290), vec3((-0.0) - (NORMAL.x * _183), (-0.0) - (NORMAL.y * _183), (-0.0) - (NORMAL.z * _183)));
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _313 * _309;
    float _316 = (cbMtdParam._m0[19u].w * _307) * _313;
    float _318 = (cbMtdParam._m0[20u].x * _308) * _313;
    float _321 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _322 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _340;
    float _343;
    float _345;
    if (_316 > 0.0)
    {
        float _326 = (1.0 - _321) / _316;
        _340 = _326;
        _343 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_326 * _314)) * 0.16666667163372039794921875;
        _345 = (fract((_326 * _318) + _322) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_316 < 0.0)
        {
            float _341 = ((-0.0) - _321) / _316;
            frontier_phi_3_2_ladder = (fract(_341 * _314) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _341;
            frontier_phi_3_2_ladder_2 = (fract((_341 * _318) + _322) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _342;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _340 = frontier_phi_3_2_ladder_1;
        _343 = frontier_phi_3_2_ladder;
        _345 = frontier_phi_3_2_ladder_2;
    }
    float _371;
    float _373;
    float _375;
    if (_318 > 0.0)
    {
        float _358 = (1.0 - _322) / _318;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_358 < _340)
        {
            frontier_phi_8_5_ladder = (fract(_358 * _314) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_358 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _358;
        }
        else
        {
            frontier_phi_8_5_ladder = _345;
            frontier_phi_8_5_ladder_1 = _343;
            frontier_phi_8_5_ladder_2 = _340;
        }
        _371 = frontier_phi_8_5_ladder_2;
        _373 = frontier_phi_8_5_ladder_1;
        _375 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_318 < 0.0)
        {
            float _372 = ((-0.0) - _322) / _318;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_372 < _340)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_372 * _314) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_372 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _372;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _345;
                frontier_phi_8_6_ladder_9_ladder_1 = _343;
                frontier_phi_8_6_ladder_9_ladder_2 = _340;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _345;
            frontier_phi_8_6_ladder_1 = _343;
            frontier_phi_8_6_ladder_2 = _340;
        }
        _371 = frontier_phi_8_6_ladder_2;
        _373 = frontier_phi_8_6_ladder_1;
        _375 = frontier_phi_8_6_ladder;
    }
    float _379 = (_314 > 0.0) ? (cbMtdParam._m0[16u].w / _314) : 5000.0;
    float _392;
    float _393;
    if (_379 < _371)
    {
        _392 = ((_321 + cbMtdParam._m0[17u].x) + (_379 * _316)) * 0.16666667163372039794921875;
        _393 = (((_379 * _318) + _322) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _392 = _373;
        _393 = _375;
    }
    vec4 _396 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_392, _393));
    float _402 = _396.x * cbMtdParam._m0[13u].x;
    float _403 = _396.y * cbMtdParam._m0[13u].y;
    float _404 = _396.z * cbMtdParam._m0[13u].z;
    float _2968 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _2979 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _2990 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _423 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _427 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _428 = _245 * _427;
    float _429 = _246 * _427;
    float _430 = _247 * _427;
    float _436 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _437 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _450 = uint(roundEven(NORMAL.w)) * 13u;
    uint _452 = (_450 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3001 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0));
    float _3012 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0));
    float _3023 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _436, cbSceneParam._m0[86u].y * _437));
    float _475 = _472.x * TEXCOORD.z;
    float _476 = (-0.0) - _428;
    float _477 = (-0.0) - _429;
    float _478 = (-0.0) - _430;
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = (cbModelParam._m0[37u].x * ((((fma(_508, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _500)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _572 = (cbModelParam._m0[37u].y * ((((fma(_508, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _500)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _573 = (((((fma(_508, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _500)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_570, _572, _573), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_570, _572, _573), 0.0);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_570, _572, _573), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_570, _572, _573), 0.0);
        float _610 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _612 = _610 * (_576.x + (-0.5));
        float _613 = _610 * (_576.y + (-0.5));
        float _614 = _610 * (_576.z + (-0.5));
        float _621 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _622 = _621 * (_583.x + (-0.5));
        float _623 = _621 * (_583.y + (-0.5));
        float _624 = _621 * (_583.z + (-0.5));
        float _631 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _632 = _631 * (_590.x + (-0.5));
        float _633 = _631 * (_590.y + (-0.5));
        float _634 = _631 * (_590.z + (-0.5));
        float _641 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _642 = _641 * (_597.x + (-0.5));
        float _643 = _641 * (_597.y + (-0.5));
        float _644 = _641 * (_597.z + (-0.5));
        float _645 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _646 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _647 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _648 = _612 * 0.5;
        float _649 = _622 * 0.5;
        float _650 = _632 * 0.5;
        float _651 = dot(vec3(_648, _649, _650), vec3(_648, _649, _650));
        float _656 = (_651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_651);
        float _665 = (dot(vec3(0.0), vec3(_656 * _648, _656 * _649, _656 * _650)) + 1.0) * 0.5;
        float _3049 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _675 = sqrt(((_649 * _649) + (_648 * _648)) + (_650 * _650)) / (_645 + 9.9999997473787516355514526367188e-06);
        float _3060 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _677 = _676 * 2.0;
        float _681 = (1.0 - _676) / (_676 + 1.0);
        float _3071 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0));
        float _691 = ((((1.0 - _682) * (_677 + 2.0)) * exp2(log2(isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0))) * (_677 + 1.0))) + _682) * _645;
        float _692 = _613 * 0.5;
        float _693 = _623 * 0.5;
        float _694 = _633 * 0.5;
        float _695 = dot(vec3(_692, _693, _694), vec3(_692, _693, _694));
        float _700 = (_695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_695);
        float _708 = (dot(vec3(0.0), vec3(_700 * _692, _700 * _693, _700 * _694)) + 1.0) * 0.5;
        float _3082 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _717 = sqrt(((_693 * _693) + (_692 * _692)) + (_694 * _694)) / (_646 + 9.9999997473787516355514526367188e-06);
        float _3093 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _719 = _718 * 2.0;
        float _723 = (1.0 - _718) / (_718 + 1.0);
        float _3104 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
        float _733 = ((((1.0 - _724) * (_719 + 2.0)) * exp2(log2(isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0))) * (_719 + 1.0))) + _724) * _646;
        float _734 = _614 * 0.5;
        float _735 = _624 * 0.5;
        float _736 = _634 * 0.5;
        float _737 = dot(vec3(_734, _735, _736), vec3(_734, _735, _736));
        float _742 = (_737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_737);
        float _750 = (dot(vec3(0.0), vec3(_742 * _734, _742 * _735, _742 * _736)) + 1.0) * 0.5;
        float _3115 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _759 = sqrt(((_735 * _735) + (_734 * _734)) + (_736 * _736)) / (_647 + 9.9999997473787516355514526367188e-06);
        float _3126 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3137 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0))) * (_761 + 1.0))) + _766) * _647;
        _783 = _614;
        _784 = _613;
        _785 = _612;
        _786 = _624;
        _787 = _623;
        _788 = _622;
        _789 = _634;
        _790 = _633;
        _791 = _632;
        _792 = _647;
        _793 = _646;
        _794 = _645;
        _795 = cbModelParam._m0[36u].z * (isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0)));
        _796 = cbModelParam._m0[36u].z * (isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0)));
        _797 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
    }
    else
    {
        _783 = _342;
        _784 = _342;
        _785 = _342;
        _786 = _342;
        _787 = _342;
        _788 = _342;
        _789 = _342;
        _790 = _342;
        _791 = _342;
        _792 = _342;
        _793 = _342;
        _794 = _342;
        _795 = 0.0;
        _796 = 0.0;
        _797 = 0.0;
    }
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _851 = (cbModelParam._m0[38u].x * ((((fma(_508, cbModelParam._m0[30u].z, fma(_504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _500)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _852 = (cbModelParam._m0[38u].y * ((((fma(_508, cbModelParam._m0[31u].z, fma(_504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _500)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _853 = (((((fma(_508, cbModelParam._m0[32u].z, fma(_504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _500)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _888 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_855.x + (-0.5));
        float _890 = _888 * (_855.y + (-0.5));
        float _891 = _888 * (_855.z + (-0.5));
        float _898 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_862.x + (-0.5));
        float _900 = _898 * (_862.y + (-0.5));
        float _901 = _898 * (_862.z + (-0.5));
        float _908 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_869.x + (-0.5));
        float _910 = _908 * (_869.y + (-0.5));
        float _911 = _908 * (_869.z + (-0.5));
        float _918 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_876.x + (-0.5));
        float _920 = _918 * (_876.y + (-0.5));
        float _921 = _918 * (_876.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(0.0), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3178 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3189 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3200 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0))) * (_952 + 1.0))) + _957) * _922;
        float _967 = _890 * 0.5;
        float _968 = _900 * 0.5;
        float _969 = _910 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(0.0), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3211 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3222 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3233 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))) * (_994 + 1.0))) + _999) * _923;
        float _1009 = _891 * 0.5;
        float _1010 = _901 * 0.5;
        float _1011 = _911 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(0.0), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3244 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3255 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3266 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * (_1036 + 1.0))) + _1041) * _924;
        _1058 = _891;
        _1059 = _890;
        _1060 = _889;
        _1061 = _901;
        _1062 = _900;
        _1063 = _899;
        _1064 = _911;
        _1065 = _910;
        _1066 = _909;
        _1067 = _924;
        _1068 = _923;
        _1069 = _922;
        _1070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _342;
        _1059 = _342;
        _1060 = _342;
        _1061 = _342;
        _1062 = _342;
        _1063 = _342;
        _1064 = _342;
        _1065 = _342;
        _1066 = _342;
        _1067 = _342;
        _1068 = _342;
        _1069 = _342;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
    }
    float _1082 = (cbModelParam._m0[1u].x * (_1070 - _795)) + _795;
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _796)) + _796;
    float _1084 = (cbModelParam._m0[1u].x * (_1072 - _797)) + _797;
    float _1105 = fma(_1084, cbSceneParam._m0[89u].z, fma(_1083, cbSceneParam._m0[89u].y, _1082 * cbSceneParam._m0[89u].x));
    float _1108 = fma(_1084, cbSceneParam._m0[90u].z, fma(_1083, cbSceneParam._m0[90u].y, _1082 * cbSceneParam._m0[90u].x));
    float _1111 = fma(_1084, cbSceneParam._m0[91u].z, fma(_1083, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1082));
    float _1126 = _428 * (-0.5);
    float _1127 = _429 * (-0.5);
    float _1128 = _430 * (-0.5);
    float _1129 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1060, _1063, _1066, _1069));
    float _1132 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1135 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1058, _1061, _1064, _1067));
    float _1169;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1142 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_783, _786, _789, _792));
        float _1146 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_784, _787, _790, _793));
        float _1150 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_785, _788, _791, _794));
        float _1157 = dot(vec4(cbModelParam._m0[39u]), vec4(_1126, _1127, _1128, 1.0));
        _1169 = dot(vec3(isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)), isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1157) ? 0.0 : (isnan(0.0) ? _1157 : max(0.0, _1157))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1169 = 1.0;
    }
    float _1180;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1171 = dot(vec4(cbModelParam._m0[40u]), vec4(_1126, _1127, _1128, 1.0));
        _1180 = dot(vec3(isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1171) ? 0.0 : (isnan(0.0) ? _1171 : max(0.0, _1171))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1180 = 1.0;
    }
    float _1184 = (_1180 * cbModelParam._m0[1u].x) + (_1169 * (1.0 - cbModelParam._m0[1u].x));
    float _1194 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1277;
    float _1279;
    float _1281;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1244 = fma(_508, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500)) + cbModelParam._m0[13u].w;
        float _1248 = fma(_508, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500)) + cbModelParam._m0[14u].w;
        float _1252 = fma(_508, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500)) + cbModelParam._m0[15u].w;
        float _1255 = fma(_478, cbModelParam._m0[13u].z, fma(_477, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _476));
        float _1258 = fma(_478, cbModelParam._m0[14u].z, fma(_477, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _476));
        float _1261 = fma(_478, cbModelParam._m0[15u].z, fma(_477, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _476));
        float _1287;
        if (_1255 > 0.0)
        {
            _1287 = abs((1.0 - _1244) / _1255);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1255 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1244 + 1.0) / _1255);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1287 = frontier_phi_26_24_ladder;
        }
        float _1460;
        if (_1258 > 0.0)
        {
            _1460 = abs((1.0 - _1248) / _1258);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1248 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1460 = frontier_phi_35_31_ladder;
        }
        float _1857;
        if (_1261 > 0.0)
        {
            _1857 = abs((1.0 - _1252) / _1261);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1252 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _1857 = frontier_phi_47_42_ladder;
        }
        float _1859 = isnan(_1460) ? _1287 : (isnan(_1287) ? _1460 : min(_1287, _1460));
        float _1860 = isnan(_1857) ? _1859 : (isnan(_1859) ? _1857 : min(_1859, _1857));
        float _1864 = (_1860 * _1255) + _1244;
        float _1865 = (_1860 * _1258) + _1248;
        float _1866 = (_1860 * _1261) + _1252;
        float _1867 = _1860 * 9.9999997473787516355514526367188e-05;
        float _1869 = (-1.0) - _1867;
        float _1871 = _1867 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_1866 > _1871) || ((_1866 < _1869) || ((_1865 > _1871) || ((_1865 < _1869) || ((_1864 < _1869) || (_1864 > _1871))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1866, cbModelParam._m0[9u].z, fma(_1865, cbModelParam._m0[9u].y, _1864 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1866, cbModelParam._m0[10u].z, fma(_1865, cbModelParam._m0[10u].y, _1864 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1866, cbModelParam._m0[11u].z, fma(_1865, cbModelParam._m0[11u].y, _1864 * cbModelParam._m0[11u].x))), _1194);
            frontier_phi_25_47_ladder = _2101.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2101.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2101.x * cbModelParam._m0[1u].y;
        }
        _1277 = frontier_phi_25_47_ladder_2;
        _1279 = frontier_phi_25_47_ladder_1;
        _1281 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1265 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_476, _477, _478), _1194);
        _1277 = _1265.x * cbModelParam._m0[1u].y;
        _1279 = _1265.y * cbModelParam._m0[1u].y;
        _1281 = _1265.z * cbModelParam._m0[1u].y;
    }
    float _1284 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1339 = fma(_508, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500)) + cbModelParam._m0[21u].w;
        float _1343 = fma(_508, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500)) + cbModelParam._m0[22u].w;
        float _1347 = fma(_508, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500)) + cbModelParam._m0[23u].w;
        float _1350 = fma(_478, cbModelParam._m0[21u].z, fma(_477, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _476));
        float _1353 = fma(_478, cbModelParam._m0[22u].z, fma(_477, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _476));
        float _1356 = fma(_478, cbModelParam._m0[23u].z, fma(_477, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _476));
        float _1465;
        if (_1350 > 0.0)
        {
            _1465 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1465 = frontier_phi_37_33_ladder;
        }
        float _1884;
        if (_1353 > 0.0)
        {
            _1884 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _1884 = frontier_phi_49_44_ladder;
        }
        float _2223;
        if (_1356 > 0.0)
        {
            _2223 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2223 = frontier_phi_61_56_ladder;
        }
        float _2225 = isnan(_1884) ? _1465 : (isnan(_1465) ? _1884 : min(_1465, _1884));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1350) + _1339;
        float _2231 = (_2226 * _1353) + _1343;
        float _2232 = (_2226 * _1356) + _1347;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2233;
        float _2236 = _2233 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2232 > _2236) || ((_2232 < _2234) || ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 < _2234) || (_2230 > _2236))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2232, cbModelParam._m0[17u].z, fma(_2231, cbModelParam._m0[17u].y, _2230 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2232, cbModelParam._m0[18u].z, fma(_2231, cbModelParam._m0[18u].y, _2230 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2232, cbModelParam._m0[19u].z, fma(_2231, cbModelParam._m0[19u].y, _2230 * cbModelParam._m0[19u].x))), _1284);
            frontier_phi_34_61_ladder = _2350.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2350.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2350.x * cbModelParam._m0[1u].z;
        }
        _1375 = frontier_phi_34_61_ladder_2;
        _1377 = frontier_phi_34_61_ladder_1;
        _1379 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_476, _477, _478), _1284);
        _1375 = _1359.x * cbModelParam._m0[1u].z;
        _1377 = _1359.y * cbModelParam._m0[1u].z;
        _1379 = _1359.z * cbModelParam._m0[1u].z;
    }
    float _1391 = _475 * 0.01200000010430812835693359375;
    float _1393 = _1391 * ((cbModelParam._m0[1u].w * (_1375 - _1277)) + _1277);
    float _1394 = _1391 * ((cbModelParam._m0[1u].w * (_1377 - _1279)) + _1279);
    float _1395 = _1391 * ((cbModelParam._m0[1u].w * (_1379 - _1281)) + _1281);
    float _1398 = fma(_1395, cbSceneParam._m0[89u].z, fma(_1394, cbSceneParam._m0[89u].y, _1393 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1395, cbSceneParam._m0[90u].z, fma(_1394, cbSceneParam._m0[90u].y, _1393 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1395, cbSceneParam._m0[91u].z, fma(_1394, cbSceneParam._m0[91u].y, _1393 * cbSceneParam._m0[91u].x));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1452 = _1439 / _1451;
    float _1453 = _1443 / _1451;
    float _1454 = _1447 / _1451;
    float _1602;
    float _1603;
    float _1604;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1481 = ((uint(_1454 > cbSceneParam._m0[59u].y) + uint(_1454 > cbSceneParam._m0[59u].x)) + uint(_1454 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1482 = _1481 + 43u;
        uint _1490 = _1481 + 44u;
        uint _1498 = _1481 + 45u;
        uint _1506 = _1481 + 46u;
        float _1517 = fma(_1451, cbSceneParam._m0[_1482].w, fma(_1447, cbSceneParam._m0[_1482].z, fma(_1443, cbSceneParam._m0[_1482].y, _1439 * cbSceneParam._m0[_1482].x)));
        float _1521 = fma(_1451, cbSceneParam._m0[_1490].w, fma(_1447, cbSceneParam._m0[_1490].z, fma(_1443, cbSceneParam._m0[_1490].y, _1439 * cbSceneParam._m0[_1490].x)));
        float _1529 = fma(_1451, cbSceneParam._m0[_1506].w, fma(_1447, cbSceneParam._m0[_1506].z, fma(_1443, cbSceneParam._m0[_1506].y, _1439 * cbSceneParam._m0[_1506].x)));
        float _1534 = cbSceneParam._m0[33u].z * _1529;
        float _1536 = cbSceneParam._m0[33u].w * _1529;
        float _1539 = fma(_1451, cbSceneParam._m0[_1498].w, fma(_1447, cbSceneParam._m0[_1498].z, fma(_1443, cbSceneParam._m0[_1498].y, _1439 * cbSceneParam._m0[_1498].x))) / _1529;
        float _1587 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
        float _3392 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1595 = (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1534 + _1517) / _1529, (_1536 + _1521) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1536 + _1517) / _1529, (_1521 - _1534) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1534) / _1529, (_1521 - _1536) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1536) / _1529, (_1534 + _1521) / _1529), _1539), 0.0)).x), vec4(0.25)));
        _1602 = 1.0 - (_1595 * cbSceneParam._m0[34u].x);
        _1603 = 1.0 - (_1595 * cbSceneParam._m0[34u].y);
        _1604 = 1.0 - (_1595 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1602 = 1.0;
        _1603 = 1.0;
        _1604 = 1.0;
    }
    float _1668;
    float _1670;
    float _1672;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1656 = fma(_1451, cbSceneParam._m0[63u].w, fma(_1447, cbSceneParam._m0[63u].z, fma(_1443, cbSceneParam._m0[63u].y, _1439 * cbSceneParam._m0[63u].x)));
        float _1657 = fma(_1451, cbSceneParam._m0[60u].w, fma(_1447, cbSceneParam._m0[60u].z, fma(_1443, cbSceneParam._m0[60u].y, _1439 * cbSceneParam._m0[60u].x))) / _1656;
        float _1658 = fma(_1451, cbSceneParam._m0[61u].w, fma(_1447, cbSceneParam._m0[61u].z, fma(_1443, cbSceneParam._m0[61u].y, _1439 * cbSceneParam._m0[61u].x))) / _1656;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1657 >= cbSceneParam._m0[64u].x) && (_1658 >= cbSceneParam._m0[64u].y)) && (_1657 <= cbSceneParam._m0[64u].z)) && (_1658 <= cbSceneParam._m0[64u].w))
        {
            float _1897 = fma(_1451, cbSceneParam._m0[62u].w, fma(_1447, cbSceneParam._m0[62u].z, fma(_1443, cbSceneParam._m0[62u].y, _1439 * cbSceneParam._m0[62u].x))) / _1656;
            float _1901 = isnan(cbSceneParam._m0[41u].w) ? _1897 : (isnan(_1897) ? cbSceneParam._m0[41u].w : max(_1897, cbSceneParam._m0[41u].w));
            float _1944 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
            float _3408 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
            float _1951 = (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1657, cbSceneParam._m0[33u].w + _1658), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1657, _1658 - cbSceneParam._m0[33u].z), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1657 - cbSceneParam._m0[33u].z, _1658 - cbSceneParam._m0[33u].w), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1657 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1658), _1901), 0.0)).x), vec4(0.25)));
            float _1955 = 1.0 - (_1951 * cbSceneParam._m0[34u].x);
            float _1956 = 1.0 - (_1951 * cbSceneParam._m0[34u].y);
            float _1957 = 1.0 - (_1951 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_1957) ? _1604 : (isnan(_1604) ? _1957 : min(_1604, _1957));
            frontier_phi_46_45_ladder_1 = isnan(_1956) ? _1603 : (isnan(_1603) ? _1956 : min(_1603, _1956));
            frontier_phi_46_45_ladder_2 = isnan(_1955) ? _1602 : (isnan(_1602) ? _1955 : min(_1602, _1955));
        }
        else
        {
            frontier_phi_46_45_ladder = _1604;
            frontier_phi_46_45_ladder_1 = _1603;
            frontier_phi_46_45_ladder_2 = _1602;
        }
        _1668 = frontier_phi_46_45_ladder_2;
        _1670 = frontier_phi_46_45_ladder_1;
        _1672 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1668 = _1602;
        _1670 = _1603;
        _1672 = _1604;
    }
    uvec4 _1678 = floatBitsToUint(cbInstanceData._m0[_450 + 5u]);
    uint _1680 = _1678.x * 14u;
    uint _1681 = _1680 + 13u;
    float _1686 = _475 + (-1.0);
    float _1690 = (cbLight._m0[_1681].x * _1686) + 1.0;
    float _1691 = (cbLight._m0[_1681].y * _1686) + 1.0;
    uint _1692 = _1680 + 5u;
    float _1698 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1702 = _1680 + 4u;
    float _1712 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1716 = _1680 | 1u;
    float _1727 = dot(vec3(cbLight._m0[_1680].xyz), vec3(0.0));
    float _1730 = dot(vec3(cbLight._m0[_1716].xyz), vec3(0.0));
    float _3444 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _3455 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1735 = (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * 0.3183098733425140380859375;
    float _1737 = (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * 0.3183098733425140380859375;
    float _1744 = ((cbLight._m0[_1692].x * _1698) * _1737) + (((cbLight._m0[_1702].x * _1668) * _1712) * _1735);
    float _1745 = ((_1698 * cbLight._m0[_1692].y) * _1737) + (((cbLight._m0[_1702].y * _1670) * _1712) * _1735);
    float _1746 = ((_1698 * cbLight._m0[_1692].z) * _1737) + (((cbLight._m0[_1702].z * _1672) * _1712) * _1735);
    uint _1747 = _1680 + 8u;
    float _1753 = cbLight._m0[_1680].x + _428;
    float _1754 = cbLight._m0[_1680].y + _429;
    float _1755 = cbLight._m0[_1680].z + _430;
    float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
    float _1763 = dot(vec3(0.0), vec3(cbLight._m0[_1680].xyz));
    float _3466 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _1767 = dot(vec3(0.0), vec3(_428, _429, _430));
    float _3477 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1753 * _1759, _1754 * _1759, _1755 * _1759));
    float _3488 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1782 = (exp2(log2(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1788 = (0.5 / ((_1766 + 9.9999999392252902907785028219223e-09) + _1770)) * _1766;
    float _3499 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.31831014156341552734375;
    uint _1804 = _1680 + 9u;
    float _1810 = cbLight._m0[_1716].x + _428;
    float _1811 = cbLight._m0[_1716].y + _429;
    float _1812 = cbLight._m0[_1716].z + _430;
    float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
    float _1820 = dot(vec3(0.0), vec3(cbLight._m0[_1716].xyz));
    float _3510 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1810 * _1816, _1811 * _1816, _1812 * _1816));
    float _3521 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1833 = (exp2(log2(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1837 = (0.5 / ((_1823 + 9.9999999392252902907785028219223e-09) + _1770)) * _1823;
    float _3532 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.31831014156341552734375;
    float _1849 = (((_1833 * cbLight._m0[_1804].x) * _1839) * _1698) + ((((cbLight._m0[_1747].x * _1668) * _1782) * _1790) * _1712);
    float _1850 = (((_1833 * cbLight._m0[_1804].y) * _1839) * _1698) + ((((cbLight._m0[_1747].y * _1670) * _1782) * _1790) * _1712);
    float _1851 = (((_1833 * cbLight._m0[_1804].z) * _1839) * _1698) + ((((cbLight._m0[_1747].z * _1672) * _1782) * _1790) * _1712);
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    if (_1678.y == 0u)
    {
        uvec4 _1969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1970 = _1969.x;
        uint _1981 = uint((float(_1969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _437) / _1970))) + floor(float(uint(cbSceneParam._m0[85u].x * _436) / _1970)));
        float _1991 = (log2(_1454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1992 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        uint _1995 = uint(isnan(14.0) ? _1992 : (isnan(_1992) ? 14.0 : min(_1992, 14.0)));
        uvec4 _2001 = texelFetch(g_lightClusterGridBuffer, int(((_1995 << 2u) + (_1981 << 6u)) >> 2u));
        uint _2002 = _2001.x;
        uint _2003 = _1969.z;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        if (((((1u << ((_2003 >> 4u) & 15u)) + 4294967295u) & _2002) == 0u) || ((_2003 & 240u) == 0u))
        {
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
        }
        else
        {
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            uint _2284 = 0u;
            uint _2293;
            bool _2294;
            for (;;)
            {
                _2293 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2284 << 2u)) >> 2u)).x;
                _2294 = _2293 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2294)
                {
                    frontier_phi_70_pred = _2281;
                    frontier_phi_70_pred_1 = _2283;
                    frontier_phi_70_pred_2 = _2282;
                    frontier_phi_70_pred_3 = _2280;
                    frontier_phi_70_pred_4 = _2279;
                    frontier_phi_70_pred_5 = _2278;
                }
                else
                {
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    uint _2429;
                    _2423 = _2278;
                    _2424 = _2279;
                    _2425 = _2280;
                    _2426 = _2281;
                    _2427 = _2282;
                    _2428 = _2283;
                    _2429 = _2293;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    for (;;)
                    {
                        uint _2433 = uint(findLSB(_2429)) + (_2284 << 5u);
                        uint _2430 = (_2429 + 4294967295u) & _2429;
                        uint _2435 = _2433 * 48u;
                        vec4 _2449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2435)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 3u)).x));
                        uint _2455 = (_2433 * 48u) + 4u;
                        vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2455)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 3u)).x));
                        uint _2474 = (_2433 * 48u) + 8u;
                        vec3 _2485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2474)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 2u)).x));
                        float _2489 = _2449.x - _1452;
                        float _2490 = _2449.y - _1453;
                        float _2491 = _2449.z - _1454;
                        float _2492 = dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491));
                        float _2495 = inversesqrt(_2492);
                        float _2504 = 1.0 - (_2492 * _2449.w);
                        float _3553 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2505 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
                        float _2506 = sqrt(_2492) * _2468.w;
                        float _2509 = 1.39999997615814208984375 / (_2506 + 1.39999997615814208984375);
                        float _2510 = _2509 * _2509;
                        float _2513 = ((1.0 - _2510) * dot(vec3(0.0), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491))) + _2510;
                        float _2516 = _2506 * _2506;
                        float _2520 = ((isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0))) * _2505) / ((_2516 * 0.699999988079071044921875) + 1.0);
                        float _2524 = (-0.0) - _1452;
                        float _2525 = (-0.0) - _1453;
                        float _2526 = (-0.0) - _1454;
                        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
                        float _2534 = dot(vec3(0.0), vec3(_2530 * _2524, _2530 * _2525, _2530 * _2526));
                        float _3569 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _3580 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _2538 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
                        float _2542 = (0.5 / (((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) + 9.9999999392252902907785028219223e-09) + _2538)) * _2538;
                        float _3591 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
                        float _2551 = (((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 3.1415927410125732421875) / ((_2516 * 2.1991131305694580078125) + 3.141590118408203125)) * _2505;
                        _2358 = (_2520 * _2468.x) + _2426;
                        _2359 = (_2520 * _2468.y) + _2427;
                        _2360 = (_2520 * _2468.z) + _2428;
                        _2355 = (_2551 * _2485.x) + _2423;
                        _2356 = (_2551 * _2485.y) + _2424;
                        _2357 = (_2551 * _2485.z) + _2425;
                        if (_2430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2423 = _2355;
                            _2424 = _2356;
                            _2425 = _2357;
                            _2426 = _2358;
                            _2427 = _2359;
                            _2428 = _2360;
                            _2429 = _2430;
                        }
                    }
                    frontier_phi_70_pred = _2358;
                    frontier_phi_70_pred_1 = _2360;
                    frontier_phi_70_pred_2 = _2359;
                    frontier_phi_70_pred_3 = _2357;
                    frontier_phi_70_pred_4 = _2356;
                    frontier_phi_70_pred_5 = _2355;
                }
                _2117 = frontier_phi_70_pred;
                _2121 = frontier_phi_70_pred_1;
                _2119 = frontier_phi_70_pred_2;
                _2115 = frontier_phi_70_pred_3;
                _2113 = frontier_phi_70_pred_4;
                _2111 = frontier_phi_70_pred_5;
                uint _2285 = _2284 + 1u;
                if (_2285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2278 = _2111;
                    _2279 = _2113;
                    _2280 = _2115;
                    _2281 = _2117;
                    _2282 = _2119;
                    _2283 = _2121;
                    _2284 = _2285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
        }
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.z;
        uint _2127 = (_2125 >> 8u) & 15u;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        if (((4294967295u << _2127) & _2002) == 0u)
        {
            _2249 = _2110;
            _2251 = _2112;
            _2253 = _2114;
            _2255 = _2116;
            _2257 = _2118;
            _2259 = _2120;
        }
        else
        {
            float _2274 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2127 < ((_2125 >> 12u) & 15u))
            {
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2406 = _2110;
                float _2407 = _2112;
                float _2408 = _2114;
                float _2409 = _2116;
                float _2410 = _2118;
                float _2411 = _2120;
                uint _2412 = _2127;
                uint _2421;
                bool _2422;
                for (;;)
                {
                    _2421 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2412 << 2u)) >> 2u)).x;
                    _2422 = _2421 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2422)
                    {
                        frontier_phi_76_pred = _2411;
                        frontier_phi_76_pred_1 = _2410;
                        frontier_phi_76_pred_2 = _2409;
                        frontier_phi_76_pred_3 = _2408;
                        frontier_phi_76_pred_4 = _2407;
                        frontier_phi_76_pred_5 = _2406;
                    }
                    else
                    {
                        float _2556;
                        float _2557;
                        float _2558;
                        float _2559;
                        float _2560;
                        float _2561;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2569 = _2406;
                        float _2570 = _2407;
                        float _2571 = _2408;
                        float _2572 = _2409;
                        float _2573 = _2410;
                        float _2574 = _2411;
                        uint _2575 = _2421;
                        uint _2576;
                        vec4 _2601;
                        float _2602;
                        vec4 _2617;
                        vec3 _2629;
                        vec4 _2644;
                        vec4 _2659;
                        float _2705;
                        bool _2706;
                        for (;;)
                        {
                            uint _2586 = ((_2412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2575));
                            _2576 = (_2575 + 4294967295u) & _2575;
                            uint _2588 = _2586 * 40u;
                            _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            _2602 = _2601.w;
                            uint _2604 = (_2586 * 40u) + 4u;
                            _2617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 3u)).x));
                            uint _2619 = (_2586 * 40u) + 8u;
                            _2629 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x));
                            uint _2631 = (_2586 * 40u) + 16u;
                            _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            uint _2646 = (_2586 * 40u) + 20u;
                            _2659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 3u)).x));
                            uint _2661 = (_2586 * 40u) + 24u;
                            vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            uint _2680 = (_2586 * 40u) + 28u;
                            vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 3u)).x));
                            _2705 = fma(_1454, _2693.z, fma(_1453, _2693.y, _2693.x * _1452)) + _2693.w;
                            _2706 = !((fma(_1454, _2674.z, fma(_1453, _2674.y, _2674.x * _1452)) + _2674.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_2706)
                            {
                                float _2733 = _2601.x - _1452;
                                float _2734 = _2601.y - _1453;
                                float _2735 = _2601.z - _1454;
                                float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                                float _2739 = inversesqrt(_2736);
                                float _2740 = _2739 * _2733;
                                float _2741 = _2739 * _2734;
                                float _2742 = _2739 * _2735;
                                float _2746 = 1.0 - (_2736 / (_2602 * _2602));
                                float _3602 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2747 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
                                float _2751 = sqrt(_2736) * _2617.w;
                                float _2753 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                                float _2754 = _2753 * _2753;
                                float _2755 = 1.0 - _2754;
                                float _2757 = (_2755 * dot(vec3(_2740, _2741, _2742), vec3(0.0))) + _2754;
                                float _2760 = _2751 * _2751;
                                float _2764 = (fma(_1454, _2644.z, fma(_1453, _2644.y, _2644.x * _1452)) + _2644.w) / _2705;
                                float _2765 = (fma(_1454, _2659.z, fma(_1453, _2659.y, _2659.x * _1452)) + _2659.w) / _2705;
                                float _2769 = 1.0 - dot(vec2(_2764, _2765), vec2(_2764, _2765));
                                float _3618 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                                float _2770 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
                                float _2771 = _2770 * (((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2747) / ((_2760 * 0.699999988079071044921875) + 1.0));
                                float _2781 = dot(vec3(0.0), vec3((-0.0) - (_1452 * _2274), (-0.0) - (_1453 * _2274), (-0.0) - (_1454 * _2274)));
                                float _3629 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                                float _2789 = (_2755 * dot(vec3(0.0), vec3(_2740, _2741, _2742))) + _2754;
                                float _3640 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                                float _2790 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
                                float _2794 = (0.5 / (((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) + 9.9999999392252902907785028219223e-09) + _2790)) * _2790;
                                float _3651 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2801 = (_2770 * _2747) * (((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * 3.1415927410125732421875) / ((_2760 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_82_pred = _2771 * _2617.z;
                                frontier_phi_82_pred_1 = _2771 * _2617.y;
                                frontier_phi_82_pred_2 = _2771 * _2617.x;
                                frontier_phi_82_pred_3 = _2801 * _2629.z;
                                frontier_phi_82_pred_4 = _2801 * _2629.y;
                                frontier_phi_82_pred_5 = _2801 * _2629.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _2810 = frontier_phi_82_pred;
                            _2809 = frontier_phi_82_pred_1;
                            _2808 = frontier_phi_82_pred_2;
                            _2807 = frontier_phi_82_pred_3;
                            _2806 = frontier_phi_82_pred_4;
                            _2805 = frontier_phi_82_pred_5;
                            _2559 = _2808 + _2572;
                            _2560 = _2809 + _2573;
                            _2561 = _2810 + _2574;
                            _2556 = _2805 + _2569;
                            _2557 = _2806 + _2570;
                            _2558 = _2807 + _2571;
                            if (_2576 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2569 = _2556;
                                _2570 = _2557;
                                _2571 = _2558;
                                _2572 = _2559;
                                _2573 = _2560;
                                _2574 = _2561;
                                _2575 = _2576;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2561;
                        frontier_phi_76_pred_1 = _2560;
                        frontier_phi_76_pred_2 = _2559;
                        frontier_phi_76_pred_3 = _2558;
                        frontier_phi_76_pred_4 = _2557;
                        frontier_phi_76_pred_5 = _2556;
                    }
                    _2260 = frontier_phi_76_pred;
                    _2258 = frontier_phi_76_pred_1;
                    _2256 = frontier_phi_76_pred_2;
                    _2254 = frontier_phi_76_pred_3;
                    _2252 = frontier_phi_76_pred_4;
                    _2250 = frontier_phi_76_pred_5;
                    uint _2413 = _2412 + 1u;
                    if (_2413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2406 = _2250;
                        _2407 = _2252;
                        _2408 = _2254;
                        _2409 = _2256;
                        _2410 = _2258;
                        _2411 = _2260;
                        _2412 = _2413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2258;
                frontier_phi_63_64_ladder_1 = _2260;
                frontier_phi_63_64_ladder_2 = _2256;
                frontier_phi_63_64_ladder_3 = _2254;
                frontier_phi_63_64_ladder_4 = _2252;
                frontier_phi_63_64_ladder_5 = _2250;
            }
            else
            {
                frontier_phi_63_64_ladder = _2118;
                frontier_phi_63_64_ladder_1 = _2120;
                frontier_phi_63_64_ladder_2 = _2116;
                frontier_phi_63_64_ladder_3 = _2114;
                frontier_phi_63_64_ladder_4 = _2112;
                frontier_phi_63_64_ladder_5 = _2110;
            }
            _2249 = frontier_phi_63_64_ladder_5;
            _2251 = frontier_phi_63_64_ladder_4;
            _2253 = frontier_phi_63_64_ladder_3;
            _2255 = frontier_phi_63_64_ladder_2;
            _2257 = frontier_phi_63_64_ladder;
            _2259 = frontier_phi_63_64_ladder_1;
        }
        float _2264 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2015 = (_2264 * _2255) + _1744;
        _2017 = (_2264 * _2257) + _1745;
        _2019 = (_2264 * _2259) + _1746;
        _2021 = ((_2249 * 0.039999999105930328369140625) * _2264) + _1849;
        _2023 = ((_2251 * 0.039999999105930328369140625) * _2264) + _1850;
        _2025 = ((_2253 * 0.039999999105930328369140625) * _2264) + _1851;
    }
    else
    {
        _2015 = _1744;
        _2017 = _1745;
        _2019 = _1746;
        _2021 = _1849;
        _2023 = _1850;
        _2025 = _1851;
    }
    float _3667 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3678 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3689 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2042 = ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_2015 + ((isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))) * _475))) + ((_2021 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    float _2043 = ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_2017 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _475))) + ((_2023 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    float _2044 = ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_2019 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _475))) + ((_2025 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    uint _2048 = _450 + 6u;
    float _2056 = _436 / cbSceneParam._m0[86u].x;
    float _2057 = _437 / cbSceneParam._m0[86u].y;
    vec4 _2071 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2056, _2057, (log2((isnan(cbSceneParam._m0[77u].w) ? _423 : (isnan(_423) ? cbSceneParam._m0[77u].w : min(_423, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2073 = _2071.x;
    float _2074 = _2071.y;
    float _2075 = _2071.z;
    float _2076 = _2071.w;
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    if (_423 > cbSceneParam._m0[78u].w)
    {
        float _2135 = isnan(_423) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _423 : min(cbSceneParam._m0[80u].w, _423));
        float _2136 = _2135 / _423;
        float _2147 = _2136 * _245;
        float _2148 = _246 * _2136;
        float _2149 = (-0.0) - _2148;
        float _2150 = _2136 * _247;
        float _2152 = (cbSceneParam._m0[77u].w * _2149) / _2135;
        float _2153 = _2152 + cbSceneParam._m0[79u].w;
        float _2154 = cbSceneParam._m0[79u].w - _2148;
        float _2160 = sqrt(((_2147 * _2147) + (_2148 * _2148)) + (_2150 * _2150));
        float _2163 = (1.0 - (cbSceneParam._m0[77u].w / _2135)) * _2160;
        float _2168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2368;
        if (abs((_2149 - _2152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2368 = ((((_2153 > 0.0) ? exp2(_2168 * _2153) : (2.0 - exp2(_2170 * _2153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2163;
        }
        else
        {
            float _2307 = 1.0 / cbSceneParam._m0[80u].x;
            float _2308 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : max(_2153, _2154));
            float _2309 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : min(_2153, _2154));
            float _2318 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : min(_2308, 0.0));
            float _2319 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : min(_2309, 0.0));
            _2368 = ((abs(_2160 / _2149) * cbSceneParam._m0[80u].y) * ((((_2318 - _2319) * 2.0) - ((exp2(_2168 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)))) - exp2(_2168 * (isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))))) * _2307)) - ((exp2(_2170 * _2318) - exp2(_2170 * _2319)) * _2307))) + (_2163 * cbSceneParam._m0[80u].z);
        }
        vec4 _2370 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2056, _2057, 1.0), 0.0);
        float _2379 = exp2((_2368 * (-1.44269502162933349609375)) * (1.0 - _2370.w));
        float _2380 = log2(_2379);
        float _2396 = log2(_2076);
        _2172 = (exp2(_2396 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].x)) * _2370.x) / cbSceneParam._m0[78u].x)) + _2073;
        _2174 = (exp2(_2396 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].y)) * _2370.y) / cbSceneParam._m0[78u].y)) + _2074;
        _2176 = (exp2(_2396 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].z)) * _2370.z) / cbSceneParam._m0[78u].z)) + _2075;
        _2178 = _2379 * _2076;
    }
    else
    {
        _2172 = _2073;
        _2174 = _2074;
        _2176 = _2075;
        _2178 = _2076;
    }
    float _2190 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2191 = _2190 == 3.0;
    float _2193 = log2(_2178);
    float _2200 = exp2(_2193 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2201 = exp2(_2193 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)));
    float _2202 = exp2(_2193 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)));
    float _2211 = (_2190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2211 * (_2191 ? _2200 : (_2200 + (cbSceneParam._m0[72u].w * _2172)));
    SV_Target.y = _2211 * (_2191 ? _2201 : (_2201 + (cbSceneParam._m0[72u].w * _2174)));
    SV_Target.z = _2211 * (_2191 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2176)));
    SV_Target.w = cbInstanceData._m0[_2048].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2048].w;
}


