#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1002;
float _3139;
float _3140;
float _3141;
float _3142;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_359 + (-0.5)) + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _436 = 0.5 - (_288 * 0.5);
    float _443 = ((((_418 - (_418 * _288)) * cbMtdParam._m0[9u].x) - _301) * _436) + _301;
    float _444 = ((((_419 - (_419 * _288)) * cbMtdParam._m0[9u].y) - _303) * _436) + _303;
    float _445 = (((cbMtdParam._m0[9u].z * (_420 - (_420 * _288))) - _305) * _436) + _305;
    vec4 _457 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _465 = (_457.x * 2.0) + (-1.0);
    float _467 = (_457.y * 2.0) + (-1.0);
    float _468 = dot(vec2(_465, _467), vec2(_465, _467));
    float _3161 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0))));
    float _474 = _457.z * _288;
    float _477 = fma(_473, _197, fma(_467, _204, _465 * _190));
    float _480 = fma(_473, _198, fma(_467, _205, _465 * _191));
    float _483 = fma(_473, _199, fma(_467, _206, _465 * _192));
    float _487 = inversesqrt(dot(vec3(_477, _480, _483), vec3(_477, _480, _483)));
    float _488 = _487 * _477;
    float _489 = _487 * _480;
    float _490 = _487 * _483;
    float _3172 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _491 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _3183 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3194 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3205 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _510 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _515 = _261 * _514;
    float _516 = _262 * _514;
    float _517 = _263 * _514;
    vec4 _522 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _524 = _522.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _683 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _689 = (cbMatDynParam._m0[5u].x * _683) + cbMatDynParam._m0[5u].y;
        float _3216 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _694 = (cbMatDynParam._m0[5u].z * _683) + cbMatDynParam._m0[5u].w;
        float _3227 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0))) - _690)) + _690) < ((_524 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_490, cbSceneParam._m0[5u].z, fma(_489, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _488));
    float _561 = fma(_490, cbSceneParam._m0[6u].z, fma(_489, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _488));
    float _564 = fma(_490, cbSceneParam._m0[7u].z, fma(_489, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _488));
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _579 = _577 + 9u;
    uint _580 = _579 + uint(cbMatDynParam._m0[0u].w);
    float _586 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_580].x;
    float _587 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_580].y;
    float _588 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_580].z;
    float _3238 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _3249 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _603 = _600.x * TEXCOORD.z;
    float _604 = dot(vec3(_488, _489, _490), vec3(_515, _516, _517));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _488) - _515;
    float _612 = (_607 * _489) - _516;
    float _613 = (_607 * _490) - _517;
    float _617 = abs(dot(vec3(_515, _516, _517), vec3(_488, _489, _490)));
    float _3271 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _619 = sqrt(_491);
    float _632 = exp2((_619 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1001;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _732 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _736 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _759 = _664 + _488;
        float _760 = _668 + _489;
        float _761 = _672 + _490;
        float _771 = fma(_761, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759)) - _728;
        float _772 = fma(_761, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759)) - _732;
        float _773 = fma(_761, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759)) - _736;
        float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
        float _790 = ((_777 * _771) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_777 * _772) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_777 * _773) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_795.x + (-0.5));
        float _831 = _829 * (_795.y + (-0.5));
        float _832 = _829 * (_795.z + (-0.5));
        float _839 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_802.x + (-0.5));
        float _841 = _839 * (_802.y + (-0.5));
        float _842 = _839 * (_802.z + (-0.5));
        float _849 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_809.x + (-0.5));
        float _851 = _849 * (_809.y + (-0.5));
        float _852 = _849 * (_809.z + (-0.5));
        float _859 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_816.x + (-0.5));
        float _861 = _859 * (_816.y + (-0.5));
        float _862 = _859 * (_816.z + (-0.5));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = _830 * 0.5;
        float _867 = _840 * 0.5;
        float _868 = _850 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _883 = (dot(vec3(_488, _489, _490), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _893 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3319 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_895 + 1.0))) + _900) * _863;
        float _910 = _831 * 0.5;
        float _911 = _841 * 0.5;
        float _912 = _851 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_488, _489, _490), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3352 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_937 + 1.0))) + _942) * _864;
        float _952 = _832 * 0.5;
        float _953 = _842 * 0.5;
        float _954 = _852 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_488, _489, _490), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3385 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_979 + 1.0))) + _984) * _865;
        _1001 = _832;
        _1003 = _831;
        _1004 = _830;
        _1005 = _842;
        _1006 = _841;
        _1007 = _840;
        _1008 = _852;
        _1009 = _851;
        _1010 = _850;
        _1011 = _865;
        _1012 = _864;
        _1013 = _863;
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
    }
    else
    {
        _1001 = _1002;
        _1003 = _1002;
        _1004 = _1002;
        _1005 = _1002;
        _1006 = _1002;
        _1007 = _1002;
        _1008 = _1002;
        _1009 = _1002;
        _1010 = _1002;
        _1011 = _1002;
        _1012 = _1002;
        _1013 = _1002;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1049 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1053 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1076 = _664 + _488;
        float _1077 = _668 + _489;
        float _1078 = _672 + _490;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_488, _489, _490), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3448 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_488, _489, _490), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3481 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_488, _489, _490), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3514 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1002;
        _1315 = _1002;
        _1316 = _1002;
        _1317 = _1002;
        _1318 = _1002;
        _1319 = _1002;
        _1320 = _1002;
        _1321 = _1002;
        _1322 = _1002;
        _1323 = _1002;
        _1324 = _1002;
        _1325 = _1002;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1014)) + _1014;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1015)) + _1015;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _611 * 0.5;
    float _1383 = _612 * 0.5;
    float _1384 = _613 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1001, _1005, _1008, _1011));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _491);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1513 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1516 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1544 = frontier_phi_25_23_ladder;
        }
        float _1914;
        if (_1513 > 0.0)
        {
            _1914 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1914 = frontier_phi_34_30_ladder;
        }
        float _2222;
        if (_1516 > 0.0)
        {
            _2222 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2222 = frontier_phi_48_41_ladder;
        }
        float _2224 = isnan(_1914) ? _1544 : (isnan(_1544) ? _1914 : min(_1544, _1914));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1510) + _1499;
        float _2230 = (_2225 * _1513) + _1503;
        float _2231 = (_2225 * _1516) + _1507;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2232;
        float _2235 = _2232 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2231 > _2235) || ((_2231 < _2233) || ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 < _2233) || (_2229 > _2235))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2231, cbModelParam._m0[9u].z, fma(_2230, cbModelParam._m0[9u].y, _2229 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2231, cbModelParam._m0[10u].z, fma(_2230, cbModelParam._m0[10u].y, _2229 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2231, cbModelParam._m0[11u].z, fma(_2230, cbModelParam._m0[11u].y, _2229 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_24_48_ladder = _2373.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2373.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2373.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_24_48_ladder_2;
        _1534 = frontier_phi_24_48_ladder_1;
        _1536 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1451);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _491);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1594 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1598 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1602 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1605 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1608 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1611 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1919;
        if (_1605 > 0.0)
        {
            _1919 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1919 = frontier_phi_36_32_ladder;
        }
        float _2248;
        if (_1608 > 0.0)
        {
            _2248 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2248 = frontier_phi_50_43_ladder;
        }
        float _2438;
        if (_1611 > 0.0)
        {
            _2438 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2438 = frontier_phi_68_61_ladder;
        }
        float _2440 = isnan(_2248) ? _1919 : (isnan(_1919) ? _2248 : min(_1919, _2248));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1605) + _1594;
        float _2446 = (_2441 * _1608) + _1598;
        float _2447 = (_2441 * _1611) + _1602;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_33_68_ladder = _2689.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2689.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2689.x * cbModelParam._m0[1u].z;
        }
        _1630 = frontier_phi_33_68_ladder_2;
        _1632 = frontier_phi_33_68_ladder;
        _1634 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1541);
        _1630 = _1614.x * cbModelParam._m0[1u].z;
        _1632 = _1614.y * cbModelParam._m0[1u].z;
        _1634 = _1614.z * cbModelParam._m0[1u].z;
    }
    float _1646 = ((((1.0 - _632) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_632 * _619)) * _603;
    float _1647 = _1646 * ((cbModelParam._m0[1u].w * (_1630 - _1532)) + _1532);
    float _1648 = _1646 * ((cbModelParam._m0[1u].w * (_1632 - _1534)) + _1534);
    float _1649 = _1646 * ((cbModelParam._m0[1u].w * (_1634 - _1536)) + _1536);
    float _1652 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, _1647 * cbSceneParam._m0[91u].x));
    vec4 _1666 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_537, _538));
    float _1668 = _1666.w;
    float _1680 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1668);
    float _1681 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1668);
    float _1682 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1668);
    uvec4 _1686 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1688 = _1686.x * 14u;
    uint _1689 = _1688 + 13u;
    float _1694 = _603 + (-1.0);
    float _1697 = (cbLight._m0[_1689].x * _1694) + 1.0;
    float _1698 = (cbLight._m0[_1689].y * _1694) + 1.0;
    uint _1699 = _1688 + 5u;
    float _1705 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1709 = _1688 + 4u;
    float _1718 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1722 = _1688 | 1u;
    float _1733 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_488, _489, _490));
    float _1736 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_488, _489, _490));
    float _3650 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _3661 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1741 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.3183098733425140380859375;
    float _1743 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.3183098733425140380859375;
    float _1750 = ((cbLight._m0[_1699].x * _1705) * _1743) + (((cbLight._m0[_1709].x * _1680) * _1718) * _1741);
    float _1751 = ((_1705 * cbLight._m0[_1699].y) * _1743) + (((cbLight._m0[_1709].y * _1681) * _1718) * _1741);
    float _1752 = ((_1705 * cbLight._m0[_1699].z) * _1743) + (((cbLight._m0[_1709].z * _1682) * _1718) * _1741);
    uint _1754 = _1688 + 8u;
    float _1767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _491) * 0.949999988079071044921875);
    float _1768 = _1767 * _1767;
    float _1769 = cbLight._m0[_1688].x + _515;
    float _1770 = cbLight._m0[_1688].y + _516;
    float _1771 = cbLight._m0[_1688].z + _517;
    float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
    float _1776 = _1775 * _1769;
    float _1777 = _1775 * _1770;
    float _1778 = _1775 * _1771;
    float _1779 = dot(vec3(_488, _489, _490), vec3(cbLight._m0[_1688].xyz));
    float _3672 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _1783 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _1784 = dot(vec3(_488, _489, _490), vec3(_1776, _1777, _1778));
    float _3694 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1776, _1777, _1778));
    float _3705 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1768 * _1768;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1807 = (exp2(log2(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1808 = 1.0 - _1768;
    float _1819 = (0.5 / (((_1783 * ((_1782 * _1808) + _1768)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1808) + _1768) * _1782))) * _1782;
    float _3716 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1821 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    uint _1835 = _1688 + 9u;
    float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _491) * 0.949999988079071044921875);
    float _1847 = _1846 * _1846;
    float _1848 = cbLight._m0[_1722].x + _515;
    float _1849 = cbLight._m0[_1722].y + _516;
    float _1850 = cbLight._m0[_1722].z + _517;
    float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
    float _1855 = _1854 * _1848;
    float _1856 = _1854 * _1849;
    float _1857 = _1854 * _1850;
    float _1858 = dot(vec3(_488, _489, _490), vec3(cbLight._m0[_1722].xyz));
    float _3727 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1862 = dot(vec3(_488, _489, _490), vec3(_1855, _1856, _1857));
    float _3738 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _1866 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1855, _1856, _1857));
    float _3749 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1870 = _1847 * _1847;
    float _1874 = ((_1865 * _1865) * (_1870 + (-1.0))) + 1.0;
    float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1884 = 1.0 - _1847;
    float _1894 = (0.5 / (((_1783 * ((_1861 * _1884) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1884) + _1847) * _1861))) * _1861;
    float _3760 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1870 / ((_1874 * _1874) * 3.141590118408203125));
    float _1906 = (((_1883 * cbLight._m0[_1835].x) * _1896) * _1705) + ((((cbLight._m0[_1754].x * _1680) * _1807) * _1821) * _1718);
    float _1907 = (((_1883 * cbLight._m0[_1835].y) * _1896) * _1705) + ((((cbLight._m0[_1754].y * _1681) * _1807) * _1821) * _1718);
    float _1908 = (((_1883 * cbLight._m0[_1835].z) * _1896) * _1705) + ((((cbLight._m0[_1754].z * _1682) * _1807) * _1821) * _1718);
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    if (_1686.y == 0u)
    {
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1963;
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1963;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1963;
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.x;
        uint _1990 = uint((float(_1978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _1979))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _1979)));
        float _2000 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2001 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        uint _2004 = uint(isnan(14.0) ? _2001 : (isnan(_2001) ? 14.0 : min(_2001, 14.0)));
        uvec4 _2009 = texelFetch(g_lightClusterGridBuffer, int(((_2004 << 2u) + (_1990 << 6u)) >> 2u));
        uint _2010 = _2009.x;
        uint _2011 = _1978.z;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        float _2111;
        if (((((1u << ((_2011 >> 4u) & 15u)) + 4294967295u) & _2010) == 0u) || ((_2011 & 240u) == 0u))
        {
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
        }
        else
        {
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2112;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            float _2288 = 0.0;
            float _2289 = 0.0;
            float _2290 = 0.0;
            uint _2291 = 0u;
            uint _2300;
            bool _2301;
            for (;;)
            {
                _2300 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2291 << 2u)) >> 2u)).x;
                _2301 = _2300 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2301)
                {
                    frontier_phi_63_pred = _2287;
                    frontier_phi_63_pred_1 = _2290;
                    frontier_phi_63_pred_2 = _2289;
                    frontier_phi_63_pred_3 = _2288;
                    frontier_phi_63_pred_4 = _2286;
                    frontier_phi_63_pred_5 = _2285;
                }
                else
                {
                    float _2481;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    uint _2487;
                    _2481 = _2285;
                    _2482 = _2286;
                    _2483 = _2287;
                    _2484 = _2288;
                    _2485 = _2289;
                    _2486 = _2290;
                    _2487 = _2300;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    for (;;)
                    {
                        uint _2491 = uint(findLSB(_2487)) + (_2291 << 5u);
                        uint _2488 = (_2487 + 4294967295u) & _2487;
                        uint _2493 = _2491 * 48u;
                        vec4 _2507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2493)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 3u)).x));
                        uint _2513 = (_2491 * 48u) + 4u;
                        vec4 _2526 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2513)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 3u)).x));
                        uint _2532 = (_2491 * 48u) + 8u;
                        vec3 _2543 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2532)).x, texelFetch(g_PointLightRenderingBuffer, int(_2532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2532 + 2u)).x));
                        float _2547 = _2507.x - _1964;
                        float _2548 = _2507.y - _1965;
                        float _2549 = _2507.z - _1966;
                        float _2550 = dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549));
                        float _2553 = inversesqrt(_2550);
                        float _2554 = _2553 * _2547;
                        float _2555 = _2553 * _2548;
                        float _2556 = _2553 * _2549;
                        float _2557 = dot(vec3(_558, _561, _564), vec3(_2554, _2555, _2556));
                        float _2562 = 1.0 - (_2550 * _2507.w);
                        float _3781 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
                        float _2563 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
                        float _2564 = sqrt(_2550) * _2526.w;
                        float _2567 = 1.39999997615814208984375 / (_2564 + 1.39999997615814208984375);
                        float _2568 = _2567 * _2567;
                        float _2571 = ((1.0 - _2568) * _2557) + _2568;
                        float _2574 = _2564 * _2564;
                        float _2578 = ((isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))) * _2563) / ((_2574 * 0.699999988079071044921875) + 1.0);
                        float _2582 = (-0.0) - _1964;
                        float _2583 = (-0.0) - _1965;
                        float _2584 = (-0.0) - _1966;
                        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
                        float _2589 = _2588 * _2582;
                        float _2590 = _2588 * _2583;
                        float _2591 = _2588 * _2584;
                        float _2599 = exp2(log2(1.0 / ((_2574 * 3.5) + 5.0)) * 0.25);
                        float _2600 = 1.0 - _619;
                        float _2607 = sqrt(1.0 - ((1.0 - (_2600 * _2600)) * (1.0 - (_2599 * _2599))));
                        float _2608 = _2607 * _2607;
                        float _2609 = _2608 * _2608;
                        float _2610 = _2589 + _2554;
                        float _2611 = _2590 + _2555;
                        float _2612 = _2591 + _2556;
                        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
                        float _2620 = dot(vec3(_558, _561, _564), vec3(_2589, _2590, _2591));
                        float _3797 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2623 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
                        float _2624 = dot(vec3(_558, _561, _564), vec3(_2616 * _2610, _2616 * _2611, _2616 * _2612));
                        float _3808 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
                        float _2627 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
                        float _2631 = ((_2627 * _2627) * (_2609 + (-1.0))) + 1.0;
                        float _2632 = _2567 * _2608;
                        float _2633 = _2632 * _2632;
                        float _2636 = ((1.0 - _2633) * _2557) + _2633;
                        float _3819 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2637 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                        float _2638 = 1.0 - _2608;
                        float _2648 = (0.5 / (((_2637 * ((_2623 * _2638) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2638) + _2608) * _2623))) * _2637;
                        float _3830 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _2659 = (((_2609 * 3.1415927410125732421875) * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) / ((_2631 * _2631) * ((_2574 * 2.1991131305694580078125) + 3.141590118408203125))) * _2563;
                        _2385 = (_2578 * _2526.x) + _2484;
                        _2386 = (_2578 * _2526.y) + _2485;
                        _2387 = (_2578 * _2526.z) + _2486;
                        _2382 = (_2659 * _2543.x) + _2481;
                        _2383 = (_2659 * _2543.y) + _2482;
                        _2384 = (_2659 * _2543.z) + _2483;
                        if (_2488 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2481 = _2382;
                            _2482 = _2383;
                            _2483 = _2384;
                            _2484 = _2385;
                            _2485 = _2386;
                            _2486 = _2387;
                            _2487 = _2488;
                        }
                    }
                    frontier_phi_63_pred = _2384;
                    frontier_phi_63_pred_1 = _2387;
                    frontier_phi_63_pred_2 = _2386;
                    frontier_phi_63_pred_3 = _2385;
                    frontier_phi_63_pred_4 = _2383;
                    frontier_phi_63_pred_5 = _2382;
                }
                _2106 = frontier_phi_63_pred;
                _2112 = frontier_phi_63_pred_1;
                _2110 = frontier_phi_63_pred_2;
                _2108 = frontier_phi_63_pred_3;
                _2104 = frontier_phi_63_pred_4;
                _2102 = frontier_phi_63_pred_5;
                uint _2292 = _2291 + 1u;
                if (_2292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2285 = _2102;
                    _2286 = _2104;
                    _2287 = _2106;
                    _2288 = _2108;
                    _2289 = _2110;
                    _2290 = _2112;
                    _2291 = _2292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
        }
        uvec4 _2115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2116 = _2115.z;
        uint _2118 = (_2116 >> 8u) & 15u;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        if (((4294967295u << _2118) & _2010) == 0u)
        {
            _2253 = _2101;
            _2255 = _2103;
            _2257 = _2105;
            _2259 = _2107;
            _2261 = _2109;
            _2263 = _2111;
        }
        else
        {
            float _2278 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float _2279 = _2278 * _1964;
            float _2280 = _2278 * _1965;
            float _2281 = _2278 * _1966;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2118 < ((_2116 >> 12u) & 15u))
            {
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2262;
                float _2264;
                float _2464 = _2101;
                float _2465 = _2103;
                float _2466 = _2105;
                float _2467 = _2107;
                float _2468 = _2109;
                float _2469 = _2111;
                uint _2470 = _2118;
                uint _2479;
                bool _2480;
                for (;;)
                {
                    _2479 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2470 << 2u)) >> 2u)).x;
                    _2480 = _2479 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2480)
                    {
                        frontier_phi_77_pred = _2469;
                        frontier_phi_77_pred_1 = _2468;
                        frontier_phi_77_pred_2 = _2467;
                        frontier_phi_77_pred_3 = _2466;
                        frontier_phi_77_pred_4 = _2465;
                        frontier_phi_77_pred_5 = _2464;
                    }
                    else
                    {
                        float _2694;
                        float _2695;
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2699;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2707 = _2464;
                        float _2708 = _2465;
                        float _2709 = _2466;
                        float _2710 = _2467;
                        float _2711 = _2468;
                        float _2712 = _2469;
                        uint _2713 = _2479;
                        uint _2714;
                        vec4 _2739;
                        float _2740;
                        vec4 _2755;
                        vec3 _2767;
                        vec4 _2782;
                        vec4 _2798;
                        float _2844;
                        bool _2845;
                        for (;;)
                        {
                            uint _2724 = ((_2470 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2713));
                            _2714 = (_2713 + 4294967295u) & _2713;
                            uint _2726 = _2724 * 40u;
                            _2739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 3u)).x));
                            _2740 = _2739.w;
                            uint _2742 = (_2724 * 40u) + 4u;
                            _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            uint _2757 = (_2724 * 40u) + 8u;
                            _2767 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x));
                            uint _2769 = (_2724 * 40u) + 16u;
                            _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            uint _2785 = (_2724 * 40u) + 20u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            uint _2800 = (_2724 * 40u) + 24u;
                            vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            uint _2819 = (_2724 * 40u) + 28u;
                            vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2844 = fma(_1966, _2832.z, fma(_1965, _2832.y, _2832.x * _1964)) + _2832.w;
                            _2845 = !((fma(_1966, _2813.z, fma(_1965, _2813.y, _2813.x * _1964)) + _2813.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2845)
                            {
                                float _2872 = _2739.x - _1964;
                                float _2873 = _2739.y - _1965;
                                float _2874 = _2739.z - _1966;
                                float _2875 = dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874));
                                float _2878 = inversesqrt(_2875);
                                float _2879 = _2878 * _2872;
                                float _2880 = _2878 * _2873;
                                float _2881 = _2878 * _2874;
                                float _2885 = 1.0 - (_2875 / (_2740 * _2740));
                                float _3841 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                                float _2886 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                                float _2890 = sqrt(_2875) * _2755.w;
                                float _2892 = 1.39999997615814208984375 / (_2890 + 1.39999997615814208984375);
                                float _2893 = _2892 * _2892;
                                float _2896 = ((1.0 - _2893) * dot(vec3(_2879, _2880, _2881), vec3(_558, _561, _564))) + _2893;
                                float _2899 = _2890 * _2890;
                                float _2903 = (fma(_1966, _2782.z, fma(_1965, _2782.y, _2782.x * _1964)) + _2782.w) / _2844;
                                float _2904 = (fma(_1966, _2798.z, fma(_1965, _2798.y, _2798.x * _1964)) + _2798.w) / _2844;
                                float _2908 = 1.0 - dot(vec2(_2903, _2904), vec2(_2903, _2904));
                                float _3857 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                                float _2909 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
                                float _2910 = _2909 * (((isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))) * _2886) / ((_2899 * 0.699999988079071044921875) + 1.0));
                                float _2922 = exp2(log2(1.0 / ((_2899 * 3.5) + 5.0)) * 0.25);
                                float _2923 = 1.0 - _619;
                                float _2930 = sqrt(1.0 - ((1.0 - (_2923 * _2923)) * (1.0 - (_2922 * _2922))));
                                float _2931 = _2930 * _2930;
                                float _2932 = _2931 * _2931;
                                float _2933 = _2879 - _2279;
                                float _2934 = _2880 - _2280;
                                float _2935 = _2881 - _2281;
                                float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                                float _2943 = dot(vec3(_558, _561, _564), vec3((-0.0) - _2279, (-0.0) - _2280, (-0.0) - _2281));
                                float _3868 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2946 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
                                float _2947 = dot(vec3(_558, _561, _564), vec3(_2939 * _2933, _2939 * _2934, _2939 * _2935));
                                float _3879 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                                float _2950 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                                float _2954 = ((_2950 * _2950) * (_2932 + (-1.0))) + 1.0;
                                float _2955 = _2892 * _2931;
                                float _2956 = _2955 * _2955;
                                float _2962 = ((1.0 - _2956) * dot(vec3(_558, _561, _564), vec3(_2879, _2880, _2881))) + _2956;
                                float _3890 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                                float _2964 = 1.0 - _2931;
                                float _2974 = (0.5 / (((_2963 * ((_2946 * _2964) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2931) * _2946))) * _2963;
                                float _3901 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2984 = (_2909 * _2886) * (((_2932 * 3.1415927410125732421875) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) / ((_2954 * _2954) * ((_2899 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2910 * _2755.x;
                                frontier_phi_83_pred_1 = _2910 * _2755.z;
                                frontier_phi_83_pred_2 = _2910 * _2755.y;
                                frontier_phi_83_pred_3 = _2984 * _2767.z;
                                frontier_phi_83_pred_4 = _2984 * _2767.y;
                                frontier_phi_83_pred_5 = _2984 * _2767.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2991 = frontier_phi_83_pred;
                            _2993 = frontier_phi_83_pred_1;
                            _2992 = frontier_phi_83_pred_2;
                            _2990 = frontier_phi_83_pred_3;
                            _2989 = frontier_phi_83_pred_4;
                            _2988 = frontier_phi_83_pred_5;
                            _2697 = _2991 + _2710;
                            _2698 = _2992 + _2711;
                            _2699 = _2993 + _2712;
                            _2694 = _2988 + _2707;
                            _2695 = _2989 + _2708;
                            _2696 = _2990 + _2709;
                            if (_2714 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2696;
                                _2710 = _2697;
                                _2711 = _2698;
                                _2712 = _2699;
                                _2713 = _2714;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2699;
                        frontier_phi_77_pred_1 = _2698;
                        frontier_phi_77_pred_2 = _2697;
                        frontier_phi_77_pred_3 = _2696;
                        frontier_phi_77_pred_4 = _2695;
                        frontier_phi_77_pred_5 = _2694;
                    }
                    _2264 = frontier_phi_77_pred;
                    _2262 = frontier_phi_77_pred_1;
                    _2260 = frontier_phi_77_pred_2;
                    _2258 = frontier_phi_77_pred_3;
                    _2256 = frontier_phi_77_pred_4;
                    _2254 = frontier_phi_77_pred_5;
                    uint _2471 = _2470 + 1u;
                    if (_2471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2464 = _2254;
                        _2465 = _2256;
                        _2466 = _2258;
                        _2467 = _2260;
                        _2468 = _2262;
                        _2469 = _2264;
                        _2470 = _2471;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2256;
                frontier_phi_52_53_ladder_1 = _2264;
                frontier_phi_52_53_ladder_2 = _2262;
                frontier_phi_52_53_ladder_3 = _2260;
                frontier_phi_52_53_ladder_4 = _2258;
                frontier_phi_52_53_ladder_5 = _2254;
            }
            else
            {
                frontier_phi_52_53_ladder = _2103;
                frontier_phi_52_53_ladder_1 = _2111;
                frontier_phi_52_53_ladder_2 = _2109;
                frontier_phi_52_53_ladder_3 = _2107;
                frontier_phi_52_53_ladder_4 = _2105;
                frontier_phi_52_53_ladder_5 = _2101;
            }
            _2253 = frontier_phi_52_53_ladder_5;
            _2255 = frontier_phi_52_53_ladder;
            _2257 = frontier_phi_52_53_ladder_4;
            _2259 = frontier_phi_52_53_ladder_3;
            _2261 = frontier_phi_52_53_ladder_2;
            _2263 = frontier_phi_52_53_ladder_1;
        }
        float _2268 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2023 = (_2268 * _2259) + _1750;
        _2025 = (_2268 * _2261) + _1751;
        _2027 = (_2268 * _2263) + _1752;
        _2029 = ((_2253 * 0.039999999105930328369140625) * _2268) + _1906;
        _2031 = ((_2255 * 0.039999999105930328369140625) * _2268) + _1907;
        _2033 = ((_2257 * 0.039999999105930328369140625) * _2268) + _1908;
    }
    else
    {
        _2023 = _1750;
        _2025 = _1751;
        _2027 = _1752;
        _2029 = _1906;
        _2031 = _1907;
        _2033 = _1908;
    }
    float _3917 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3928 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3939 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _2050 = ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_2023 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _603))) + ((_2029 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2051 = ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_2025 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _603))) + ((_2031 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2052 = ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_2027 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _603))) + ((_2033 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2053 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2055 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    uint _2056 = _577 + 6u;
    float _2064 = _537 / cbSceneParam._m0[86u].x;
    float _2065 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2079 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2064, _2065, (log2((isnan(cbSceneParam._m0[77u].w) ? _510 : (isnan(_510) ? cbSceneParam._m0[77u].w : min(_510, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2081 = _2079.x;
    float _2082 = _2079.y;
    float _2083 = _2079.z;
    float _2084 = _2079.w;
    float _2164;
    float _2166;
    float _2168;
    float _2170;
    if (_510 > cbSceneParam._m0[78u].w)
    {
        float _2126 = isnan(_510) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _510 : min(cbSceneParam._m0[80u].w, _510));
        float _2127 = _2126 / _510;
        float _2138 = _2127 * _261;
        float _2139 = _262 * _2127;
        float _2140 = (-0.0) - _2139;
        float _2141 = _2127 * _263;
        float _2143 = (cbSceneParam._m0[77u].w * _2140) / _2126;
        float _2144 = _2143 + cbSceneParam._m0[79u].w;
        float _2145 = cbSceneParam._m0[79u].w - _2139;
        float _2151 = sqrt(((_2138 * _2138) + (_2139 * _2139)) + (_2141 * _2141));
        float _2154 = (1.0 - (cbSceneParam._m0[77u].w / _2126)) * _2151;
        float _2160 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2162 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2395;
        if (abs((_2140 - _2143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2395 = ((((_2144 > 0.0) ? exp2(_2160 * _2144) : (2.0 - exp2(_2162 * _2144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2154;
        }
        else
        {
            float _2314 = 1.0 / cbSceneParam._m0[80u].x;
            float _2315 = isnan(_2145) ? _2144 : (isnan(_2144) ? _2145 : max(_2144, _2145));
            float _2316 = isnan(_2145) ? _2144 : (isnan(_2144) ? _2145 : min(_2144, _2145));
            float _2325 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : min(_2315, 0.0));
            float _2326 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : min(_2316, 0.0));
            _2395 = ((abs(_2151 / _2140) * cbSceneParam._m0[80u].y) * ((((_2325 - _2326) * 2.0) - ((exp2(_2160 * (isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)))) - exp2(_2160 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0))))) * _2314)) - ((exp2(_2162 * _2325) - exp2(_2162 * _2326)) * _2314))) + (_2154 * cbSceneParam._m0[80u].z);
        }
        vec4 _2397 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2064, _2065, 1.0), 0.0);
        float _2406 = exp2((_2395 * (-1.44269502162933349609375)) * (1.0 - _2397.w));
        float _2407 = log2(_2406);
        float _2423 = log2(_2084);
        _2164 = (exp2(_2423 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].x)) * _2397.x) / cbSceneParam._m0[78u].x)) + _2081;
        _2166 = (exp2(_2423 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].y)) * _2397.y) / cbSceneParam._m0[78u].y)) + _2082;
        _2168 = (exp2(_2423 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].z)) * _2397.z) / cbSceneParam._m0[78u].z)) + _2083;
        _2170 = _2406 * _2084;
    }
    else
    {
        _2164 = _2081;
        _2166 = _2082;
        _2168 = _2083;
        _2170 = _2084;
    }
    bool _2433;
    vec4 _2180;
    vec4 _2202;
    float _2204;
    float _2208;
    float _2209;
    float _2210;
    float _2211;
    bool _2221;
    for (;;)
    {
        _2180 = cbMatDynParam._m0[0u];
        float _2182 = roundEven(_2180.y);
        bool _2183 = _2182 == 3.0;
        float _2184 = log2(_2170);
        float _2191 = exp2(_2184 * cbSceneParam._m0[78u].x) * _2053;
        float _2192 = exp2(_2184 * cbSceneParam._m0[78u].y) * _2054;
        float _2193 = exp2(_2184 * cbSceneParam._m0[78u].z) * _2055;
        float _2200 = _524 + (-0.5);
        _2202 = cbMtdParam._m0[1u];
        _2204 = _2202.y * _2200;
        float _2207 = (_2182 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2208 = _2207 * (_2183 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2164)));
        _2209 = _2207 * (_2183 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2166)));
        _2210 = _2207 * (_2183 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2168)));
        _2211 = _2200 * 0.999000012874603271484375;
        _2221 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2221)
        {
            if ((cbInstanceData._m0[_577 + 7u].x + _2211) < 0.5)
            {
                _2433 = true;
                break;
            }
        }
        uint _2349 = _579 + uint(_2180.w);
        if ((cbInstanceData._m0[_2349].w < 1.0) && ((cbInstanceData._m0[_2349].w + _2211) < 0.5))
        {
            _2433 = true;
            break;
        }
        if ((_2204 + 1.0) < _2202.x)
        {
            _2433 = true;
            break;
        }
        _2433 = false;
        break;
    }
    float _2664;
    if (_2433)
    {
        discard_state = true;
        _2664 = 0.0;
    }
    else
    {
        _2664 = cbInstanceData._m0[_2056].w;
    }
    SV_Target.x = _2208;
    SV_Target.y = _2209;
    SV_Target.z = _2210;
    SV_Target.w = _2664;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2056].w;
    discard_exit();
}


