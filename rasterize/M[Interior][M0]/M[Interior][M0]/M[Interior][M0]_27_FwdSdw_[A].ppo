#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _430;
float _3498;
float _3499;
float _3500;
float _3501;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _345 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _355 = (_345.y * 2.0) + (-1.0);
    float _361 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _368 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _377 = cbMtdParam._m0[23u].x + _265;
    float _378 = cbMtdParam._m0[23u].y + _266;
    float _379 = cbMtdParam._m0[23u].z + _267;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_361 * _194, _361 * _195, _361 * _196));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_368 * _208, _368 * _209, _368 * _210));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _399 * _395;
    float _405 = ((cbMtdParam._m0[19u].w * _393) * _399) + (_353 * cbMtdParam._m0[20u].y);
    float _406 = ((cbMtdParam._m0[20u].x * _394) * _399) + (_355 * cbMtdParam._m0[20u].z);
    float _409 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _410 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _428;
    float _431;
    float _433;
    if (_405 > 0.0)
    {
        float _414 = (1.0 - _409) / _405;
        _428 = _414;
        _431 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_414 * _400)) * 0.16666667163372039794921875;
        _433 = (fract((_414 * _406) + _410) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_405 < 0.0)
        {
            float _429 = ((-0.0) - _409) / _405;
            frontier_phi_3_2_ladder = (fract(_429 * _400) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _429;
            frontier_phi_3_2_ladder_2 = (fract((_429 * _406) + _410) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _430;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _428 = frontier_phi_3_2_ladder_1;
        _431 = frontier_phi_3_2_ladder;
        _433 = frontier_phi_3_2_ladder_2;
    }
    float _459;
    float _461;
    float _463;
    if (_406 > 0.0)
    {
        float _446 = (1.0 - _410) / _406;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_446 < _428)
        {
            frontier_phi_8_5_ladder = (fract(_446 * _400) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_446 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _446;
        }
        else
        {
            frontier_phi_8_5_ladder = _433;
            frontier_phi_8_5_ladder_1 = _431;
            frontier_phi_8_5_ladder_2 = _428;
        }
        _459 = frontier_phi_8_5_ladder_2;
        _461 = frontier_phi_8_5_ladder_1;
        _463 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_406 < 0.0)
        {
            float _460 = ((-0.0) - _410) / _406;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_460 < _428)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_460 * _400) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_460 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _460;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _433;
                frontier_phi_8_6_ladder_9_ladder_1 = _431;
                frontier_phi_8_6_ladder_9_ladder_2 = _428;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _433;
            frontier_phi_8_6_ladder_1 = _431;
            frontier_phi_8_6_ladder_2 = _428;
        }
        _459 = frontier_phi_8_6_ladder_2;
        _461 = frontier_phi_8_6_ladder_1;
        _463 = frontier_phi_8_6_ladder;
    }
    float _467 = (_400 > 0.0) ? (cbMtdParam._m0[16u].w / _400) : 5000.0;
    float _480;
    float _481;
    if (_467 < _459)
    {
        _480 = ((_409 + cbMtdParam._m0[17u].x) + (_467 * _405)) * 0.16666667163372039794921875;
        _481 = (((_467 * _406) + _410) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _480 = _461;
        _481 = _463;
    }
    vec4 _483 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_480, _481));
    float _488 = _483.x * cbMtdParam._m0[13u].x;
    float _489 = _483.y * cbMtdParam._m0[13u].y;
    float _490 = _483.z * cbMtdParam._m0[13u].z;
    float _495 = 0.5 - (_292 * 0.5);
    float _505 = (((_488 - _305) - (_488 * _292)) * _495) + _305;
    float _506 = (((_489 - _307) - (_489 * _292)) * _495) + _307;
    float _507 = (((_490 - _309) - (_490 * _292)) * _495) + _309;
    vec4 _519 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _523 = _519.z;
    float _526 = (_519.x * 2.0) + (-1.0);
    float _527 = (_519.y * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3510 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))));
    float _534 = _523 * _292;
    float _544 = (cbMtdParam._m0[15u].w * ((_349 - _534) + ((_523 - _349) * _292))) + _534;
    float _552 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _292))) + _526;
    float _553 = (cbMtdParam._m0[16u].x * (_355 - (_355 * _292))) + _527;
    float _556 = fma(_533, _201, fma(_553, _208, _552 * _194));
    float _559 = fma(_533, _202, fma(_553, _209, _552 * _195));
    float _562 = fma(_533, _203, fma(_553, _210, _552 * _196));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    float _567 = _566 * _556;
    float _568 = _566 * _559;
    float _569 = _566 * _562;
    float _3521 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _570 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3543 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3554 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _593 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _594 = _265 * _593;
    float _595 = _266 * _593;
    float _596 = _267 * _593;
    vec4 _601 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _603 = _601.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _765 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _771 = (cbMatDynParam._m0[5u].x * _765) + cbMatDynParam._m0[5u].y;
        float _3565 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _776 = (cbMatDynParam._m0[5u].z * _765) + cbMatDynParam._m0[5u].w;
        float _3576 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) - _772)) + _772) < ((_603 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _641 = fma(_569, cbSceneParam._m0[5u].z, fma(_568, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _567));
    float _644 = fma(_569, cbSceneParam._m0[6u].z, fma(_568, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _567));
    float _647 = fma(_569, cbSceneParam._m0[7u].z, fma(_568, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _567));
    uint _660 = uint(roundEven(NORMAL.w)) * 13u;
    uint _661 = _660 + 9u;
    uint _662 = _661 + uint(cbMatDynParam._m0[0u].w);
    float _668 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_662].x;
    float _669 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_662].y;
    float _670 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_662].z;
    float _3587 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _685 = _682.x * TEXCOORD.z;
    float _686 = dot(vec3(_567, _568, _569), vec3(_594, _595, _596));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _567) - _594;
    float _694 = (_689 * _568) - _595;
    float _695 = (_689 * _569) - _596;
    float _699 = abs(dot(vec3(_594, _595, _596), vec3(_567, _568, _569)));
    float _3620 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _701 = sqrt(_570);
    float _714 = exp2((_701 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_701 * 3.0));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _814 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _818 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _842 = _746 + _567;
        float _843 = _750 + _568;
        float _844 = _754 + _569;
        float _854 = fma(_844, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842)) - _810;
        float _855 = fma(_844, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842)) - _814;
        float _856 = fma(_844, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842)) - _818;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _912 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_878.x + (-0.5));
        float _914 = _912 * (_878.y + (-0.5));
        float _915 = _912 * (_878.z + (-0.5));
        float _922 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_885.x + (-0.5));
        float _924 = _922 * (_885.y + (-0.5));
        float _925 = _922 * (_885.z + (-0.5));
        float _932 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_892.x + (-0.5));
        float _934 = _932 * (_892.y + (-0.5));
        float _935 = _932 * (_892.z + (-0.5));
        float _942 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_899.x + (-0.5));
        float _944 = _942 * (_899.y + (-0.5));
        float _945 = _942 * (_899.z + (-0.5));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = _913 * 0.5;
        float _950 = _923 * 0.5;
        float _951 = _933 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _966 = (dot(vec3(_567, _568, _569), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _976 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3668 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_978 + 1.0))) + _983) * _946;
        float _993 = _914 * 0.5;
        float _994 = _924 * 0.5;
        float _995 = _934 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_567, _568, _569), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3701 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1020 + 1.0))) + _1025) * _947;
        float _1035 = _915 * 0.5;
        float _1036 = _925 * 0.5;
        float _1037 = _935 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_567, _568, _569), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3734 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1062 + 1.0))) + _1067) * _948;
        _1084 = _915;
        _1085 = _914;
        _1086 = _913;
        _1087 = _925;
        _1088 = _924;
        _1089 = _923;
        _1090 = _935;
        _1091 = _934;
        _1092 = _933;
        _1093 = _948;
        _1094 = _947;
        _1095 = _946;
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
    }
    else
    {
        _1084 = _430;
        _1085 = _430;
        _1086 = _430;
        _1087 = _430;
        _1088 = _430;
        _1089 = _430;
        _1090 = _430;
        _1091 = _430;
        _1092 = _430;
        _1093 = _430;
        _1094 = _430;
        _1095 = _430;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1127 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1131 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1135 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1158 = _746 + _567;
        float _1159 = _750 + _568;
        float _1160 = _754 + _569;
        float _1170 = fma(_1160, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158)) - _1127;
        float _1171 = fma(_1160, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158)) - _1131;
        float _1172 = fma(_1160, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158)) - _1135;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1127 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1131 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[35u].z) + ((((((_1135 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1226 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1193.x + (-0.5));
        float _1228 = _1226 * (_1193.y + (-0.5));
        float _1229 = _1226 * (_1193.z + (-0.5));
        float _1236 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1200.x + (-0.5));
        float _1238 = _1236 * (_1200.y + (-0.5));
        float _1239 = _1236 * (_1200.z + (-0.5));
        float _1246 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1207.x + (-0.5));
        float _1248 = _1246 * (_1207.y + (-0.5));
        float _1249 = _1246 * (_1207.z + (-0.5));
        float _1256 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1214.x + (-0.5));
        float _1258 = _1256 * (_1214.y + (-0.5));
        float _1259 = _1256 * (_1214.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_567, _568, _569), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3797 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1290 + 1.0))) + _1295) * _1260;
        float _1305 = _1228 * 0.5;
        float _1306 = _1238 * 0.5;
        float _1307 = _1248 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_567, _568, _569), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3830 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1332 + 1.0))) + _1337) * _1261;
        float _1347 = _1229 * 0.5;
        float _1348 = _1239 * 0.5;
        float _1349 = _1249 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_567, _568, _569), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3863 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1374 + 1.0))) + _1379) * _1262;
        _1396 = _1229;
        _1397 = _1228;
        _1398 = _1227;
        _1399 = _1239;
        _1400 = _1238;
        _1401 = _1237;
        _1402 = _1249;
        _1403 = _1248;
        _1404 = _1247;
        _1405 = _1262;
        _1406 = _1261;
        _1407 = _1260;
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _430;
        _1397 = _430;
        _1398 = _430;
        _1399 = _430;
        _1400 = _430;
        _1401 = _430;
        _1402 = _430;
        _1403 = _430;
        _1404 = _430;
        _1405 = _430;
        _1406 = _430;
        _1407 = _430;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1097)) + _1097;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1098)) + _1098;
    float _1443 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1420));
    float _1464 = _693 * 0.5;
    float _1465 = _694 * 0.5;
    float _1466 = _695 * 0.5;
    float _1467 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1470 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1473 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1480 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1484 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1488 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1495 = dot(vec4(cbModelParam._m0[39u]), vec4(_1464, _1465, _1466, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1464, _1465, _1466, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _570);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1614;
    float _1616;
    float _1618;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1581 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1585 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1589 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1592 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1595 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1598 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1626;
        if (_1592 > 0.0)
        {
            _1626 = abs((1.0 - _1581) / _1592);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1581 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1626 = frontier_phi_29_27_ladder;
        }
        float _1797;
        if (_1595 > 0.0)
        {
            _1797 = abs((1.0 - _1585) / _1595);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1585 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1797 = frontier_phi_38_34_ladder;
        }
        float _2242;
        if (_1598 > 0.0)
        {
            _2242 = abs((1.0 - _1589) / _1598);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1589 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2242 = frontier_phi_50_45_ladder;
        }
        float _2244 = isnan(_1797) ? _1626 : (isnan(_1626) ? _1797 : min(_1626, _1797));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1592) + _1581;
        float _2250 = (_2245 * _1595) + _1585;
        float _2251 = (_2245 * _1598) + _1589;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2252;
        float _2256 = _2252 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 > _2256) || ((_2250 < _2254) || ((_2249 < _2254) || (_2249 > _2256))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2251, cbModelParam._m0[9u].z, fma(_2250, cbModelParam._m0[9u].y, _2249 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2251, cbModelParam._m0[10u].z, fma(_2250, cbModelParam._m0[10u].y, _2249 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2251, cbModelParam._m0[11u].z, fma(_2250, cbModelParam._m0[11u].y, _2249 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_28_50_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1614 = frontier_phi_28_50_ladder_2;
        _1616 = frontier_phi_28_50_ladder_1;
        _1618 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1533);
        _1614 = _1602.x * cbModelParam._m0[1u].y;
        _1616 = _1602.y * cbModelParam._m0[1u].y;
        _1618 = _1602.z * cbModelParam._m0[1u].y;
    }
    float _1622 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _570);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1622 : min(cbModelParam._m0[25u].w, _1622));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1678 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1682 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1686 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1689 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1692 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1695 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1802;
        if (_1689 > 0.0)
        {
            _1802 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1802 = frontier_phi_40_36_ladder;
        }
        float _2269;
        if (_1692 > 0.0)
        {
            _2269 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2269 = frontier_phi_52_47_ladder;
        }
        float _2614;
        if (_1695 > 0.0)
        {
            _2614 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2614 = frontier_phi_64_59_ladder;
        }
        float _2616 = isnan(_2269) ? _1802 : (isnan(_1802) ? _2269 : min(_1802, _2269));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _1689) + _1678;
        float _2622 = (_2617 * _1692) + _1682;
        float _2623 = (_2617 * _1695) + _1686;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2624;
        float _2627 = _2624 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2623 > _2627) || ((_2623 < _2625) || ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 < _2625) || (_2621 > _2627))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2623, cbModelParam._m0[17u].z, fma(_2622, cbModelParam._m0[17u].y, _2621 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2623, cbModelParam._m0[18u].z, fma(_2622, cbModelParam._m0[18u].y, _2621 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2623, cbModelParam._m0[19u].z, fma(_2622, cbModelParam._m0[19u].y, _2621 * cbModelParam._m0[19u].x))), _1623);
            frontier_phi_37_64_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1714 = frontier_phi_37_64_ladder_2;
        _1716 = frontier_phi_37_64_ladder_1;
        _1718 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1623);
        _1714 = _1698.x * cbModelParam._m0[1u].z;
        _1716 = _1698.y * cbModelParam._m0[1u].z;
        _1718 = _1698.z * cbModelParam._m0[1u].z;
    }
    float _1730 = ((((1.0 - _714) * ((_701 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_714 * _701)) * _685;
    float _1731 = _1730 * ((cbModelParam._m0[1u].w * (_1714 - _1614)) + _1614);
    float _1732 = _1730 * ((cbModelParam._m0[1u].w * (_1716 - _1616)) + _1616);
    float _1733 = _1730 * ((cbModelParam._m0[1u].w * (_1718 - _1618)) + _1618);
    float _1736 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1731 * cbSceneParam._m0[91u].x));
    float _1776 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1780 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1784 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1788 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1789 = _1776 / _1788;
    float _1790 = _1780 / _1788;
    float _1791 = _1784 / _1788;
    float _1938;
    float _1939;
    float _1940;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1818 = ((uint(_1791 > cbSceneParam._m0[59u].y) + uint(_1791 > cbSceneParam._m0[59u].x)) + uint(_1791 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1819 = _1818 + 43u;
        uint _1827 = _1818 + 44u;
        uint _1835 = _1818 + 45u;
        uint _1843 = _1818 + 46u;
        float _1854 = fma(_1788, cbSceneParam._m0[_1819].w, fma(_1784, cbSceneParam._m0[_1819].z, fma(_1780, cbSceneParam._m0[_1819].y, _1776 * cbSceneParam._m0[_1819].x)));
        float _1858 = fma(_1788, cbSceneParam._m0[_1827].w, fma(_1784, cbSceneParam._m0[_1827].z, fma(_1780, cbSceneParam._m0[_1827].y, _1776 * cbSceneParam._m0[_1827].x)));
        float _1866 = fma(_1788, cbSceneParam._m0[_1843].w, fma(_1784, cbSceneParam._m0[_1843].z, fma(_1780, cbSceneParam._m0[_1843].y, _1776 * cbSceneParam._m0[_1843].x)));
        float _1871 = cbSceneParam._m0[33u].z * _1866;
        float _1873 = cbSceneParam._m0[33u].w * _1866;
        float _1876 = fma(_1788, cbSceneParam._m0[_1835].w, fma(_1784, cbSceneParam._m0[_1835].z, fma(_1780, cbSceneParam._m0[_1835].y, _1776 * cbSceneParam._m0[_1835].x))) / _1866;
        float _1924 = (cbSceneParam._m0[33u].x - sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791))) * cbSceneParam._m0[33u].y;
        float _3989 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1931 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1871 + _1854) / _1866, (_1873 + _1858) / _1866), _1876), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1873 + _1854) / _1866, (_1858 - _1871) / _1866), _1876), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1854 - _1871) / _1866, (_1858 - _1873) / _1866), _1876), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1854 - _1873) / _1866, (_1871 + _1858) / _1866), _1876), 0.0)).x), vec4(0.25)));
        _1938 = 1.0 - (_1931 * cbSceneParam._m0[34u].x);
        _1939 = 1.0 - (_1931 * cbSceneParam._m0[34u].y);
        _1940 = 1.0 - (_1931 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1938 = 1.0;
        _1939 = 1.0;
        _1940 = 1.0;
    }
    float _2004;
    float _2006;
    float _2008;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1992 = fma(_1788, cbSceneParam._m0[63u].w, fma(_1784, cbSceneParam._m0[63u].z, fma(_1780, cbSceneParam._m0[63u].y, _1776 * cbSceneParam._m0[63u].x)));
        float _1993 = fma(_1788, cbSceneParam._m0[60u].w, fma(_1784, cbSceneParam._m0[60u].z, fma(_1780, cbSceneParam._m0[60u].y, _1776 * cbSceneParam._m0[60u].x))) / _1992;
        float _1994 = fma(_1788, cbSceneParam._m0[61u].w, fma(_1784, cbSceneParam._m0[61u].z, fma(_1780, cbSceneParam._m0[61u].y, _1776 * cbSceneParam._m0[61u].x))) / _1992;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1993 >= cbSceneParam._m0[64u].x) && (_1994 >= cbSceneParam._m0[64u].y)) && (_1993 <= cbSceneParam._m0[64u].z)) && (_1994 <= cbSceneParam._m0[64u].w))
        {
            float _2282 = fma(_1788, cbSceneParam._m0[62u].w, fma(_1784, cbSceneParam._m0[62u].z, fma(_1780, cbSceneParam._m0[62u].y, _1776 * cbSceneParam._m0[62u].x))) / _1992;
            float _2286 = isnan(cbSceneParam._m0[41u].w) ? _2282 : (isnan(_2282) ? cbSceneParam._m0[41u].w : max(_2282, cbSceneParam._m0[41u].w));
            float _2329 = (cbSceneParam._m0[33u].x - sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791))) * cbSceneParam._m0[33u].y;
            float _4005 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
            float _2336 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1993, cbSceneParam._m0[33u].w + _1994), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1993, _1994 - cbSceneParam._m0[33u].z), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1993 - cbSceneParam._m0[33u].z, _1994 - cbSceneParam._m0[33u].w), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1993 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1994), _2286), 0.0)).x), vec4(0.25)));
            float _2340 = 1.0 - (_2336 * cbSceneParam._m0[34u].x);
            float _2341 = 1.0 - (_2336 * cbSceneParam._m0[34u].y);
            float _2342 = 1.0 - (_2336 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2342) ? _1940 : (isnan(_1940) ? _2342 : min(_1940, _2342));
            frontier_phi_49_48_ladder_1 = isnan(_2341) ? _1939 : (isnan(_1939) ? _2341 : min(_1939, _2341));
            frontier_phi_49_48_ladder_2 = isnan(_2340) ? _1938 : (isnan(_1938) ? _2340 : min(_1938, _2340));
        }
        else
        {
            frontier_phi_49_48_ladder = _1940;
            frontier_phi_49_48_ladder_1 = _1939;
            frontier_phi_49_48_ladder_2 = _1938;
        }
        _2004 = frontier_phi_49_48_ladder_2;
        _2006 = frontier_phi_49_48_ladder_1;
        _2008 = frontier_phi_49_48_ladder;
    }
    else
    {
        _2004 = _1938;
        _2006 = _1939;
        _2008 = _1940;
    }
    uvec4 _2013 = floatBitsToUint(cbInstanceData._m0[_660 + 5u]);
    uint _2015 = _2013.x * 14u;
    uint _2016 = _2015 + 13u;
    float _2021 = _685 + (-1.0);
    float _2024 = (cbLight._m0[_2016].x * _2021) + 1.0;
    float _2025 = (cbLight._m0[_2016].y * _2021) + 1.0;
    uint _2026 = _2015 + 5u;
    float _2032 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2036 = _2015 + 4u;
    float _2046 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2050 = _2015 | 1u;
    float _2061 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_567, _568, _569));
    float _2064 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_567, _568, _569));
    float _4041 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _4052 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2069 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _2071 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _2078 = ((cbLight._m0[_2026].x * _2032) * _2071) + (((cbLight._m0[_2036].x * _2004) * _2046) * _2069);
    float _2079 = ((_2032 * cbLight._m0[_2026].y) * _2071) + (((cbLight._m0[_2036].y * _2006) * _2046) * _2069);
    float _2080 = ((_2032 * cbLight._m0[_2026].z) * _2071) + (((cbLight._m0[_2036].z * _2008) * _2046) * _2069);
    uint _2082 = _2015 + 8u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _570) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_2015].x + _594;
    float _2098 = cbLight._m0[_2015].y + _595;
    float _2099 = cbLight._m0[_2015].z + _596;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2015].xyz));
    float _4063 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2111 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2112 = dot(vec3(_567, _568, _569), vec3(_2104, _2105, _2106));
    float _4085 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2104, _2105, _2106));
    float _4096 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2096 * _2096;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2111 * ((_2110 * _2136) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2136) + _2096) * _2110))) * _2110;
    float _4107 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    uint _2163 = _2015 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _570) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2050].x + _594;
    float _2177 = cbLight._m0[_2050].y + _595;
    float _2178 = cbLight._m0[_2050].z + _596;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2050].xyz));
    float _4118 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2190 = dot(vec3(_567, _568, _569), vec3(_2183, _2184, _2185));
    float _4129 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2183, _2184, _2185));
    float _4140 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2212 = 1.0 - _2175;
    float _2222 = (0.5 / (((_2111 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2212) + _2175) * _2189))) * _2189;
    float _4151 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2234 = (((_2211 * cbLight._m0[_2163].x) * _2224) * _2032) + ((((cbLight._m0[_2082].x * _2004) * _2135) * _2149) * _2046);
    float _2235 = (((_2211 * cbLight._m0[_2163].y) * _2224) * _2032) + ((((cbLight._m0[_2082].y * _2006) * _2135) * _2149) * _2046);
    float _2236 = (((_2211 * cbLight._m0[_2163].z) * _2224) * _2032) + ((((cbLight._m0[_2082].z * _2008) * _2135) * _2149) * _2046);
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_2013.y == 0u)
    {
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2355)));
        float _2376 = (log2(_1791 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
        }
        else
        {
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            uint _2678 = 0u;
            uint _2687;
            bool _2688;
            for (;;)
            {
                _2687 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                _2688 = _2687 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2688)
                {
                    frontier_phi_75_pred = _2675;
                    frontier_phi_75_pred_1 = _2677;
                    frontier_phi_75_pred_2 = _2676;
                    frontier_phi_75_pred_3 = _2674;
                    frontier_phi_75_pred_4 = _2673;
                    frontier_phi_75_pred_5 = _2672;
                }
                else
                {
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    uint _2844;
                    _2838 = _2672;
                    _2839 = _2673;
                    _2840 = _2674;
                    _2841 = _2675;
                    _2842 = _2676;
                    _2843 = _2677;
                    _2844 = _2687;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    for (;;)
                    {
                        uint _2848 = uint(findLSB(_2844)) + (_2678 << 5u);
                        uint _2845 = (_2844 + 4294967295u) & _2844;
                        uint _2850 = _2848 * 48u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2870 = (_2848 * 48u) + 4u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2889 = (_2848 * 48u) + 8u;
                        vec3 _2900 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x));
                        float _2904 = _2864.x - _1789;
                        float _2905 = _2864.y - _1790;
                        float _2906 = _2864.z - _1791;
                        float _2907 = dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906));
                        float _2910 = inversesqrt(_2907);
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2914 = dot(vec3(_641, _644, _647), vec3(_2911, _2912, _2913));
                        float _2919 = 1.0 - (_2907 * _2864.w);
                        float _4172 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2921 = sqrt(_2907) * _2883.w;
                        float _2924 = 1.39999997615814208984375 / (_2921 + 1.39999997615814208984375);
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2914) + _2925;
                        float _2931 = _2921 * _2921;
                        float _2935 = ((isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))) * _2920) / ((_2931 * 0.699999988079071044921875) + 1.0);
                        float _2939 = (-0.0) - _1789;
                        float _2940 = (-0.0) - _1790;
                        float _2941 = (-0.0) - _1791;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2955 = exp2(log2(1.0 / ((_2931 * 3.5) + 5.0)) * 0.25);
                        float _2956 = 1.0 - _701;
                        float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                        float _2964 = _2963 * _2963;
                        float _2965 = _2964 * _2964;
                        float _2966 = _2946 + _2911;
                        float _2967 = _2947 + _2912;
                        float _2968 = _2948 + _2913;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2976 = dot(vec3(_641, _644, _647), vec3(_2946, _2947, _2948));
                        float _4188 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2980 = dot(vec3(_641, _644, _647), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                        float _4199 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                        float _2988 = _2924 * _2964;
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2914) + _2989;
                        float _4210 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2994 = 1.0 - _2964;
                        float _3004 = (0.5 / (((_2993 * ((_2979 * _2994) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2964) * _2979))) * _2993;
                        float _4221 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3015 = (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) / ((_2987 * _2987) * ((_2931 * 2.1991131305694580078125) + 3.141590118408203125))) * _2920;
                        _2768 = (_2935 * _2883.x) + _2841;
                        _2769 = (_2935 * _2883.y) + _2842;
                        _2770 = (_2935 * _2883.z) + _2843;
                        _2765 = (_3015 * _2900.x) + _2838;
                        _2766 = (_3015 * _2900.y) + _2839;
                        _2767 = (_3015 * _2900.z) + _2840;
                        if (_2845 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2845;
                        }
                    }
                    frontier_phi_75_pred = _2768;
                    frontier_phi_75_pred_1 = _2770;
                    frontier_phi_75_pred_2 = _2769;
                    frontier_phi_75_pred_3 = _2767;
                    frontier_phi_75_pred_4 = _2766;
                    frontier_phi_75_pred_5 = _2765;
                }
                _2501 = frontier_phi_75_pred;
                _2505 = frontier_phi_75_pred_1;
                _2503 = frontier_phi_75_pred_2;
                _2499 = frontier_phi_75_pred_3;
                _2497 = frontier_phi_75_pred_4;
                _2495 = frontier_phi_75_pred_5;
                uint _2679 = _2678 + 1u;
                if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2672 = _2495;
                    _2673 = _2497;
                    _2674 = _2499;
                    _2675 = _2501;
                    _2676 = _2503;
                    _2677 = _2505;
                    _2678 = _2679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
        }
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.z;
        uint _2511 = (_2509 >> 8u) & 15u;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((4294967295u << _2511) & _2386) == 0u)
        {
            _2640 = _2494;
            _2642 = _2496;
            _2644 = _2498;
            _2646 = _2500;
            _2648 = _2502;
            _2650 = _2504;
        }
        else
        {
            float _2665 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
            float _2666 = _2665 * _1789;
            float _2667 = _2665 * _1790;
            float _2668 = _2665 * _1791;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2511 < ((_2509 >> 12u) & 15u))
            {
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2821 = _2494;
                float _2822 = _2496;
                float _2823 = _2498;
                float _2824 = _2500;
                float _2825 = _2502;
                float _2826 = _2504;
                uint _2827 = _2511;
                uint _2836;
                bool _2837;
                for (;;)
                {
                    _2836 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                    _2837 = _2836 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2837)
                    {
                        frontier_phi_86_pred = _2826;
                        frontier_phi_86_pred_1 = _2825;
                        frontier_phi_86_pred_2 = _2824;
                        frontier_phi_86_pred_3 = _2823;
                        frontier_phi_86_pred_4 = _2822;
                        frontier_phi_86_pred_5 = _2821;
                    }
                    else
                    {
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3042 = _2821;
                        float _3043 = _2822;
                        float _3044 = _2823;
                        float _3045 = _2824;
                        float _3046 = _2825;
                        float _3047 = _2826;
                        uint _3048 = _2836;
                        uint _3049;
                        vec4 _3074;
                        float _3075;
                        vec4 _3090;
                        vec3 _3102;
                        vec4 _3117;
                        vec4 _3132;
                        float _3178;
                        bool _3179;
                        for (;;)
                        {
                            uint _3059 = ((_2827 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3048));
                            _3049 = (_3048 + 4294967295u) & _3048;
                            uint _3061 = _3059 * 40u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3075 = _3074.w;
                            uint _3077 = (_3059 * 40u) + 4u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3092 = (_3059 * 40u) + 8u;
                            _3102 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x));
                            uint _3104 = (_3059 * 40u) + 16u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3059 * 40u) + 20u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3059 * 40u) + 24u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3153 = (_3059 * 40u) + 28u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3178 = fma(_1791, _3166.z, fma(_1790, _3166.y, _3166.x * _1789)) + _3166.w;
                            _3179 = !((fma(_1791, _3147.z, fma(_1790, _3147.y, _3147.x * _1789)) + _3147.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3179)
                            {
                                float _3206 = _3074.x - _1789;
                                float _3207 = _3074.y - _1790;
                                float _3208 = _3074.z - _1791;
                                float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                                float _3212 = inversesqrt(_3209);
                                float _3213 = _3212 * _3206;
                                float _3214 = _3212 * _3207;
                                float _3215 = _3212 * _3208;
                                float _3219 = 1.0 - (_3209 / (_3075 * _3075));
                                float _4232 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3224 = sqrt(_3209) * _3090.w;
                                float _3226 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                                float _3227 = _3226 * _3226;
                                float _3230 = ((1.0 - _3227) * dot(vec3(_3213, _3214, _3215), vec3(_641, _644, _647))) + _3227;
                                float _3233 = _3224 * _3224;
                                float _3237 = (fma(_1791, _3117.z, fma(_1790, _3117.y, _3117.x * _1789)) + _3117.w) / _3178;
                                float _3238 = (fma(_1791, _3132.z, fma(_1790, _3132.y, _3132.x * _1789)) + _3132.w) / _3178;
                                float _3242 = 1.0 - dot(vec2(_3237, _3238), vec2(_3237, _3238));
                                float _4248 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3244 = _3243 * (((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3220) / ((_3233 * 0.699999988079071044921875) + 1.0));
                                float _3256 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                                float _3257 = 1.0 - _701;
                                float _3264 = sqrt(1.0 - ((1.0 - (_3257 * _3257)) * (1.0 - (_3256 * _3256))));
                                float _3265 = _3264 * _3264;
                                float _3266 = _3265 * _3265;
                                float _3267 = _3213 - _2666;
                                float _3268 = _3214 - _2667;
                                float _3269 = _3215 - _2668;
                                float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                                float _3277 = dot(vec3(_641, _644, _647), vec3((-0.0) - _2666, (-0.0) - _2667, (-0.0) - _2668));
                                float _4259 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3281 = dot(vec3(_641, _644, _647), vec3(_3273 * _3267, _3273 * _3268, _3273 * _3269));
                                float _4270 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3284 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3288 = ((_3284 * _3284) * (_3266 + (-1.0))) + 1.0;
                                float _3289 = _3226 * _3265;
                                float _3290 = _3289 * _3289;
                                float _3296 = ((1.0 - _3290) * dot(vec3(_641, _644, _647), vec3(_3213, _3214, _3215))) + _3290;
                                float _4281 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3298 = 1.0 - _3265;
                                float _3308 = (0.5 / (((_3297 * ((_3280 * _3298) + _3265)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3265) * _3280))) * _3297;
                                float _4292 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3318 = (_3243 * _3220) * (((_3266 * 3.1415927410125732421875) * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) / ((_3288 * _3288) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3244 * _3090.z;
                                frontier_phi_92_pred_1 = _3244 * _3090.y;
                                frontier_phi_92_pred_2 = _3244 * _3090.x;
                                frontier_phi_92_pred_3 = _3318 * _3102.z;
                                frontier_phi_92_pred_4 = _3318 * _3102.y;
                                frontier_phi_92_pred_5 = _3318 * _3102.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3327 = frontier_phi_92_pred;
                            _3326 = frontier_phi_92_pred_1;
                            _3325 = frontier_phi_92_pred_2;
                            _3324 = frontier_phi_92_pred_3;
                            _3323 = frontier_phi_92_pred_4;
                            _3322 = frontier_phi_92_pred_5;
                            _3032 = _3325 + _3045;
                            _3033 = _3326 + _3046;
                            _3034 = _3327 + _3047;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            if (_3049 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3049;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3034;
                        frontier_phi_86_pred_1 = _3033;
                        frontier_phi_86_pred_2 = _3032;
                        frontier_phi_86_pred_3 = _3031;
                        frontier_phi_86_pred_4 = _3030;
                        frontier_phi_86_pred_5 = _3029;
                    }
                    _2651 = frontier_phi_86_pred;
                    _2649 = frontier_phi_86_pred_1;
                    _2647 = frontier_phi_86_pred_2;
                    _2645 = frontier_phi_86_pred_3;
                    _2643 = frontier_phi_86_pred_4;
                    _2641 = frontier_phi_86_pred_5;
                    uint _2828 = _2827 + 1u;
                    if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2821 = _2641;
                        _2822 = _2643;
                        _2823 = _2645;
                        _2824 = _2647;
                        _2825 = _2649;
                        _2826 = _2651;
                        _2827 = _2828;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2647;
                frontier_phi_66_67_ladder_1 = _2651;
                frontier_phi_66_67_ladder_2 = _2649;
                frontier_phi_66_67_ladder_3 = _2645;
                frontier_phi_66_67_ladder_4 = _2643;
                frontier_phi_66_67_ladder_5 = _2641;
            }
            else
            {
                frontier_phi_66_67_ladder = _2500;
                frontier_phi_66_67_ladder_1 = _2504;
                frontier_phi_66_67_ladder_2 = _2502;
                frontier_phi_66_67_ladder_3 = _2498;
                frontier_phi_66_67_ladder_4 = _2496;
                frontier_phi_66_67_ladder_5 = _2494;
            }
            _2640 = frontier_phi_66_67_ladder_5;
            _2642 = frontier_phi_66_67_ladder_4;
            _2644 = frontier_phi_66_67_ladder_3;
            _2646 = frontier_phi_66_67_ladder;
            _2648 = frontier_phi_66_67_ladder_2;
            _2650 = frontier_phi_66_67_ladder_1;
        }
        float _2655 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2399 = (_2655 * _2646) + _2078;
        _2401 = (_2655 * _2648) + _2079;
        _2403 = (_2655 * _2650) + _2080;
        _2405 = ((_2640 * 0.039999999105930328369140625) * _2655) + _2234;
        _2407 = ((_2642 * 0.039999999105930328369140625) * _2655) + _2235;
        _2409 = ((_2644 * 0.039999999105930328369140625) * _2655) + _2236;
    }
    else
    {
        _2399 = _2078;
        _2401 = _2079;
        _2403 = _2080;
        _2405 = _2234;
        _2407 = _2235;
        _2409 = _2236;
    }
    float _4308 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4319 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4330 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _2426 = ((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2399 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _685))) + ((_2405 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2427 = ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2401 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _685))) + ((_2407 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2428 = ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2403 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _685))) + ((_2409 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2429 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    uint _2432 = _660 + 6u;
    float _2440 = _621 / cbSceneParam._m0[86u].x;
    float _2441 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2455 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2457 = _2455.x;
    float _2458 = _2455.y;
    float _2459 = _2455.z;
    float _2460 = _2455.w;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2519 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2520 = _2519 / _589;
        float _2531 = _2520 * _265;
        float _2532 = _266 * _2520;
        float _2533 = (-0.0) - _2532;
        float _2534 = _2520 * _267;
        float _2536 = (cbSceneParam._m0[77u].w * _2533) / _2519;
        float _2537 = _2536 + cbSceneParam._m0[79u].w;
        float _2538 = cbSceneParam._m0[79u].w - _2532;
        float _2544 = sqrt(((_2531 * _2531) + (_2532 * _2532)) + (_2534 * _2534));
        float _2547 = (1.0 - (cbSceneParam._m0[77u].w / _2519)) * _2544;
        float _2552 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2554 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2778;
        if (abs((_2533 - _2536) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2778 = ((((_2537 > 0.0) ? exp2(_2552 * _2537) : (2.0 - exp2(_2554 * _2537))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2547;
        }
        else
        {
            float _2701 = 1.0 / cbSceneParam._m0[80u].x;
            float _2702 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : max(_2537, _2538));
            float _2703 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : min(_2537, _2538));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            _2778 = ((abs(_2544 / _2533) * cbSceneParam._m0[80u].y) * ((((_2712 - _2713) * 2.0) - ((exp2(_2552 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)))) - exp2(_2552 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))))) * _2701)) - ((exp2(_2554 * _2712) - exp2(_2554 * _2713)) * _2701))) + (_2547 * cbSceneParam._m0[80u].z);
        }
        vec4 _2780 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, 1.0), 0.0);
        float _2789 = exp2((_2778 * (-1.44269502162933349609375)) * (1.0 - _2780.w));
        float _2790 = log2(_2789);
        float _2806 = log2(_2460);
        _2556 = (exp2(_2806 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].x)) * _2780.x) / cbSceneParam._m0[78u].x)) + _2457;
        _2558 = (exp2(_2806 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].y)) * _2780.y) / cbSceneParam._m0[78u].y)) + _2458;
        _2560 = (exp2(_2806 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].z)) * _2780.z) / cbSceneParam._m0[78u].z)) + _2459;
        _2562 = _2789 * _2460;
    }
    else
    {
        _2556 = _2457;
        _2558 = _2458;
        _2560 = _2459;
        _2562 = _2460;
    }
    bool _2816;
    vec4 _2572;
    vec4 _2594;
    float _2596;
    float _2600;
    float _2601;
    float _2602;
    float _2603;
    bool _2613;
    for (;;)
    {
        _2572 = cbMatDynParam._m0[0u];
        float _2574 = roundEven(_2572.y);
        bool _2575 = _2574 == 3.0;
        float _2576 = log2(_2562);
        float _2583 = exp2(_2576 * cbSceneParam._m0[78u].x) * _2429;
        float _2584 = exp2(_2576 * cbSceneParam._m0[78u].y) * _2430;
        float _2585 = exp2(_2576 * cbSceneParam._m0[78u].z) * _2431;
        float _2592 = _603 + (-0.5);
        _2594 = cbMtdParam._m0[1u];
        _2596 = _2594.y * _2592;
        float _2599 = (_2574 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2600 = _2599 * (_2575 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2556)));
        _2601 = _2599 * (_2575 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2558)));
        _2602 = _2599 * (_2575 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2560)));
        _2603 = _2592 * 0.999000012874603271484375;
        _2613 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2613)
        {
            if ((cbInstanceData._m0[_660 + 7u].x + _2603) < 0.5)
            {
                _2816 = true;
                break;
            }
        }
        uint _2736 = _661 + uint(_2572.w);
        if ((cbInstanceData._m0[_2736].w < 1.0) && ((cbInstanceData._m0[_2736].w + _2603) < 0.5))
        {
            _2816 = true;
            break;
        }
        if ((_2596 + 1.0) < _2594.x)
        {
            _2816 = true;
            break;
        }
        _2816 = false;
        break;
    }
    float _3020;
    if (_2816)
    {
        discard_state = true;
        _3020 = 0.0;
    }
    else
    {
        _3020 = cbInstanceData._m0[_2432].w;
    }
    SV_Target.x = _2600;
    SV_Target.y = _2601;
    SV_Target.z = _2602;
    SV_Target.w = _3020;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2432].w;
    discard_exit();
}


