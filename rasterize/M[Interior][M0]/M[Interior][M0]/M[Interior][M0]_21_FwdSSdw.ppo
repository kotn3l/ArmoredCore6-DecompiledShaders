#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1124;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _391 = (_387 * _381) + (_355 * cbMtdParam._m0[20u].y);
    float _392 = (_387 * _382) + (_356 * cbMtdParam._m0[20u].z);
    float _393 = _391 * cbMtdParam._m0[19u].x;
    float _394 = _392 * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    bool _412 = _390 > 0.0;
    float _414 = _412 ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _421 = _395 + (-0.5);
    float _424 = _396 + (-0.5);
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_421 + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_424 + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _468 = (_454 - (_454 * _288)) * cbMtdParam._m0[9u].x;
    float _469 = (_455 - (_455 * _288)) * cbMtdParam._m0[9u].y;
    float _470 = cbMtdParam._m0[9u].z * (_456 - (_456 * _288));
    float _488 = _391 * cbMtdParam._m0[21u].x;
    float _489 = _392 * cbMtdParam._m0[20u].w;
    bool _490 = _488 > 0.0;
    float _495;
    if (_490)
    {
        _495 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _495 = frontier_phi_11_10_ladder;
    }
    bool _497 = _489 > 0.0;
    float _502;
    if (_497)
    {
        _502 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _502 = frontier_phi_15_14_ladder;
    }
    float _505 = _412 ? (cbMtdParam._m0[16u].z / _390) : 5000.0;
    float _506 = isnan(_502) ? _495 : (isnan(_495) ? _502 : min(_495, _502));
    float _507 = isnan(_505) ? _506 : (isnan(_506) ? _505 : min(_506, _505));
    float _511 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _515 = ((_507 * _390) + _511) / _511;
    float _520 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _522 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _538 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_507 * _488)) / _515) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_507 * _489)) / _515) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _543 = _538.x * cbMtdParam._m0[10u].x;
    float _544 = _538.y * cbMtdParam._m0[10u].y;
    float _545 = _538.z * cbMtdParam._m0[10u].z;
    float _553;
    if (_490)
    {
        _553 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _553 = frontier_phi_19_18_ladder;
    }
    float _559;
    if (_497)
    {
        _559 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _559 = frontier_phi_23_22_ladder;
    }
    float _561 = isnan(_559) ? _553 : (isnan(_553) ? _559 : min(_553, _559));
    float _562 = isnan(_505) ? _561 : (isnan(_561) ? _505 : min(_561, _505));
    float _569 = ((_562 * _390) + _511) / _511;
    vec4 _583 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_562 * _488)) / _569) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_562 * _489)) / _569) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _585 = _583.w;
    float _587 = _585 - (_585 * _288);
    vec4 _611 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _615 = _611.z;
    float _618 = (_611.x * 2.0) + (-1.0);
    float _619 = (_611.y * 2.0) + (-1.0);
    float _620 = dot(vec2(_618, _619), vec2(_618, _619));
    float _3275 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _625 = sqrt(1.0 - (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))));
    float _626 = _615 * _288;
    float _633 = (cbMtdParam._m0[15u].w * ((_327 - _626) + ((_615 - _327) * _288))) + _626;
    float _637 = (cbMtdParam._m0[16u].x * _355) + _618;
    float _638 = (cbMtdParam._m0[16u].x * _356) + _619;
    float _641 = fma(_625, _197, fma(_638, _204, _637 * _190));
    float _644 = fma(_625, _198, fma(_638, _205, _637 * _191));
    float _647 = fma(_625, _199, fma(_638, _206, _637 * _192));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _3286 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _655 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3308 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3319 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _674 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _679 = _261 * _678;
    float _680 = _262 * _678;
    float _681 = _263 * _678;
    float _687 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _688 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _708 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _711 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _714 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    uint _727 = uint(roundEven(NORMAL.w)) * 13u;
    uint _729 = _727 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3330 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _687, cbSceneParam._m0[86u].y * _688));
    float _753 = _750.x * TEXCOORD.z;
    float _754 = dot(vec3(_652, _653, _654), vec3(_679, _680, _681));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _652) - _679;
    float _762 = (_757 * _653) - _680;
    float _763 = (_757 * _654) - _681;
    float _767 = abs(dot(vec3(_679, _680, _681), vec3(_652, _653, _654)));
    float _3363 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_655);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _850 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _854 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _858 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _881 = _814 + _652;
        float _882 = _818 + _653;
        float _883 = _822 + _654;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _850;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _854;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _858;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_850 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_854 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_858 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_652, _653, _654), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3411 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_652, _653, _654), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3444 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_652, _653, _654), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3477 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1164 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1168 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1172 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1195 = _814 + _652;
        float _1196 = _818 + _653;
        float _1197 = _822 + _654;
        float _1207 = fma(_1197, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195)) - _1164;
        float _1208 = fma(_1197, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195)) - _1168;
        float _1209 = fma(_1197, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195)) - _1172;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1164 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1168 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[35u].z) + ((((((_1172 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1263 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1230.x + (-0.5));
        float _1265 = _1263 * (_1230.y + (-0.5));
        float _1266 = _1263 * (_1230.z + (-0.5));
        float _1273 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1237.x + (-0.5));
        float _1275 = _1273 * (_1237.y + (-0.5));
        float _1276 = _1273 * (_1237.z + (-0.5));
        float _1283 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1244.x + (-0.5));
        float _1285 = _1283 * (_1244.y + (-0.5));
        float _1286 = _1283 * (_1244.z + (-0.5));
        float _1293 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1251.x + (-0.5));
        float _1295 = _1293 * (_1251.y + (-0.5));
        float _1296 = _1293 * (_1251.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_652, _653, _654), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3540 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1327 + 1.0))) + _1332) * _1297;
        float _1342 = _1265 * 0.5;
        float _1343 = _1275 * 0.5;
        float _1344 = _1285 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_652, _653, _654), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3573 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1369 + 1.0))) + _1374) * _1298;
        float _1384 = _1266 * 0.5;
        float _1385 = _1276 * 0.5;
        float _1386 = _1286 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_652, _653, _654), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3606 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1411 + 1.0))) + _1416) * _1299;
        _1433 = _1266;
        _1434 = _1265;
        _1435 = _1264;
        _1436 = _1276;
        _1437 = _1275;
        _1438 = _1274;
        _1439 = _1286;
        _1440 = _1285;
        _1441 = _1284;
        _1442 = _1299;
        _1443 = _1298;
        _1444 = _1297;
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1124;
        _1434 = _1124;
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1136)) + _1136;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1137)) + _1137;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1480 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1457));
    float _1501 = _761 * 0.5;
    float _1502 = _762 * 0.5;
    float _1503 = _763 * 0.5;
    float _1504 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1507 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1510 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1521 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1525 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1501, _1502, _1503, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1501, _1502, _1503, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _655);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1618 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1622 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1626 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1629 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1632 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1635 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1663;
        if (_1629 > 0.0)
        {
            _1663 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1663 = frontier_phi_38_36_ladder;
        }
        float _2032;
        if (_1632 > 0.0)
        {
            _2032 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2032 = frontier_phi_47_43_ladder;
        }
        float _2348;
        if (_1635 > 0.0)
        {
            _2348 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2348 = frontier_phi_61_54_ladder;
        }
        float _2350 = isnan(_2032) ? _1663 : (isnan(_1663) ? _2032 : min(_1663, _2032));
        float _2351 = isnan(_2348) ? _2350 : (isnan(_2350) ? _2348 : min(_2350, _2348));
        float _2355 = (_2351 * _1629) + _1618;
        float _2356 = (_2351 * _1632) + _1622;
        float _2357 = (_2351 * _1635) + _1626;
        float _2358 = _2351 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2358;
        float _2361 = _2358 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2357 > _2361) || ((_2357 < _2359) || ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 < _2359) || (_2355 > _2361))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2357, cbModelParam._m0[9u].z, fma(_2356, cbModelParam._m0[9u].y, _2355 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2357, cbModelParam._m0[10u].z, fma(_2356, cbModelParam._m0[10u].y, _2355 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2357, cbModelParam._m0[11u].z, fma(_2356, cbModelParam._m0[11u].y, _2355 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_37_61_ladder = _2483.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2483.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2483.x * cbModelParam._m0[1u].y;
        }
        _1651 = frontier_phi_37_61_ladder_2;
        _1653 = frontier_phi_37_61_ladder_1;
        _1655 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1570);
        _1651 = _1639.x * cbModelParam._m0[1u].y;
        _1653 = _1639.y * cbModelParam._m0[1u].y;
        _1655 = _1639.z * cbModelParam._m0[1u].y;
    }
    float _1659 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _655);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1659 : min(cbModelParam._m0[25u].w, _1659));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1726 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1729 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _2037;
        if (_1723 > 0.0)
        {
            _2037 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2037 = frontier_phi_49_45_ladder;
        }
        float _2374;
        if (_1726 > 0.0)
        {
            _2374 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2374 = frontier_phi_63_56_ladder;
        }
        float _2543;
        if (_1729 > 0.0)
        {
            _2543 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2543 = frontier_phi_77_72_ladder;
        }
        float _2545 = isnan(_2374) ? _2037 : (isnan(_2037) ? _2374 : min(_2037, _2374));
        float _2546 = isnan(_2543) ? _2545 : (isnan(_2545) ? _2543 : min(_2545, _2543));
        float _2550 = (_2546 * _1723) + _1712;
        float _2551 = (_2546 * _1726) + _1716;
        float _2552 = (_2546 * _1729) + _1720;
        float _2553 = _2546 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2553;
        float _2556 = _2553 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2552 > _2556) || ((_2552 < _2554) || ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 < _2554) || (_2550 > _2556))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2552, cbModelParam._m0[17u].z, fma(_2551, cbModelParam._m0[17u].y, _2550 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2552, cbModelParam._m0[18u].z, fma(_2551, cbModelParam._m0[18u].y, _2550 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2552, cbModelParam._m0[19u].z, fma(_2551, cbModelParam._m0[19u].y, _2550 * cbModelParam._m0[19u].x))), _1660);
            frontier_phi_46_77_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_46_77_ladder_2;
        _1750 = frontier_phi_46_77_ladder_1;
        _1752 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1660);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1764 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1765 = _1764 * ((cbModelParam._m0[1u].w * (_1748 - _1651)) + _1651);
    float _1766 = _1764 * ((cbModelParam._m0[1u].w * (_1750 - _1653)) + _1653);
    float _1767 = _1764 * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    vec4 _1784 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_687, _688));
    float _1786 = _1784.w;
    float _1798 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1786);
    float _1799 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1786);
    float _1800 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1786);
    uvec4 _1804 = floatBitsToUint(cbInstanceData._m0[_727 + 5u]);
    uint _1806 = _1804.x * 14u;
    uint _1807 = _1806 + 13u;
    float _1812 = _753 + (-1.0);
    float _1815 = (cbLight._m0[_1807].x * _1812) + 1.0;
    float _1816 = (cbLight._m0[_1807].y * _1812) + 1.0;
    uint _1817 = _1806 + 5u;
    float _1823 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1827 = _1806 + 4u;
    float _1836 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1840 = _1806 | 1u;
    float _1851 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_652, _653, _654));
    float _1854 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_652, _653, _654));
    float _3742 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _3753 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1859 = (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 0.3183098733425140380859375;
    float _1861 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.3183098733425140380859375;
    float _1868 = ((cbLight._m0[_1817].x * _1823) * _1861) + (((cbLight._m0[_1827].x * _1798) * _1836) * _1859);
    float _1869 = ((_1823 * cbLight._m0[_1817].y) * _1861) + (((cbLight._m0[_1827].y * _1799) * _1836) * _1859);
    float _1870 = ((_1823 * cbLight._m0[_1817].z) * _1861) + (((cbLight._m0[_1827].z * _1800) * _1836) * _1859);
    uint _1872 = _1806 + 8u;
    float _1885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _655) * 0.949999988079071044921875);
    float _1886 = _1885 * _1885;
    float _1887 = cbLight._m0[_1806].x + _679;
    float _1888 = cbLight._m0[_1806].y + _680;
    float _1889 = cbLight._m0[_1806].z + _681;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1894 = _1893 * _1887;
    float _1895 = _1893 * _1888;
    float _1896 = _1893 * _1889;
    float _1897 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1806].xyz));
    float _3764 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1901 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1902 = dot(vec3(_652, _653, _654), vec3(_1894, _1895, _1896));
    float _3786 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1894, _1895, _1896));
    float _3797 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1910 = _1886 * _1886;
    float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
    float _1925 = (exp2(log2(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1926 = 1.0 - _1886;
    float _1937 = (0.5 / (((_1901 * ((_1900 * _1926) + _1886)) + 9.9999999392252902907785028219223e-09) + (((_1901 * _1926) + _1886) * _1900))) * _1900;
    float _3808 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
    uint _1953 = _1806 + 9u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _655) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1840].x + _679;
    float _1967 = cbLight._m0[_1840].y + _680;
    float _1968 = cbLight._m0[_1840].z + _681;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1840].xyz));
    float _3819 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1980 = dot(vec3(_652, _653, _654), vec3(_1973, _1974, _1975));
    float _3830 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_1973, _1974, _1975));
    float _3841 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1965 * _1965;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _2001 = (exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2002 = 1.0 - _1965;
    float _2012 = (0.5 / (((_1901 * ((_1979 * _2002) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1901 * _2002) + _1965) * _1979))) * _1979;
    float _3852 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    float _2024 = (((_2001 * cbLight._m0[_1953].x) * _2014) * _1823) + ((((cbLight._m0[_1872].x * _1798) * _1925) * _1939) * _1836);
    float _2025 = (((_2001 * cbLight._m0[_1953].y) * _2014) * _1823) + ((((cbLight._m0[_1872].y * _1799) * _1925) * _1939) * _1836);
    float _2026 = (((_2001 * cbLight._m0[_1953].z) * _2014) * _1823) + ((((cbLight._m0[_1872].z * _1800) * _1925) * _1939) * _1836);
    float _2141;
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    float _2151;
    if (_1804.y == 0u)
    {
        float _2081 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2082 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2081;
        float _2083 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2081;
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2081;
        uvec4 _2096 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2097 = _2096.x;
        uint _2108 = uint((float(_2096.y) * floor(float(uint(cbSceneParam._m0[85u].y * _688) / _2097))) + floor(float(uint(cbSceneParam._m0[85u].x * _687) / _2097)));
        float _2118 = (log2(_2084 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2119 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        uint _2122 = uint(isnan(14.0) ? _2119 : (isnan(_2119) ? 14.0 : min(_2119, 14.0)));
        uvec4 _2127 = texelFetch(g_lightClusterGridBuffer, int(((_2122 << 2u) + (_2108 << 6u)) >> 2u));
        uint _2128 = _2127.x;
        uint _2129 = _2096.z;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((((1u << ((_2129 >> 4u) & 15u)) + 4294967295u) & _2128) == 0u) || ((_2129 & 240u) == 0u))
        {
            _2235 = 0.0;
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
        }
        else
        {
            float _2236;
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            uint _2417 = 0u;
            uint _2426;
            bool _2427;
            for (;;)
            {
                _2426 = texelFetch(g_lightClassification, int((((_2122 << 5u) + (_2108 << 9u)) + (_2417 << 2u)) >> 2u)).x;
                _2427 = _2426 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2427)
                {
                    frontier_phi_74_pred = _2414;
                    frontier_phi_74_pred_1 = _2413;
                    frontier_phi_74_pred_2 = _2412;
                    frontier_phi_74_pred_3 = _2411;
                    frontier_phi_74_pred_4 = _2415;
                    frontier_phi_74_pred_5 = _2416;
                }
                else
                {
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    uint _2592;
                    _2586 = _2411;
                    _2587 = _2412;
                    _2588 = _2413;
                    _2589 = _2414;
                    _2590 = _2415;
                    _2591 = _2416;
                    _2592 = _2426;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    for (;;)
                    {
                        uint _2596 = uint(findLSB(_2592)) + (_2417 << 5u);
                        uint _2593 = (_2592 + 4294967295u) & _2592;
                        uint _2598 = _2596 * 48u;
                        vec4 _2612 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2618 = (_2596 * 48u) + 4u;
                        vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 3u)).x));
                        uint _2637 = (_2596 * 48u) + 8u;
                        vec3 _2648 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x));
                        float _2652 = _2612.x - _2082;
                        float _2653 = _2612.y - _2083;
                        float _2654 = _2612.z - _2084;
                        float _2655 = dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654));
                        float _2658 = inversesqrt(_2655);
                        float _2659 = _2658 * _2652;
                        float _2660 = _2658 * _2653;
                        float _2661 = _2658 * _2654;
                        float _2662 = dot(vec3(_708, _711, _714), vec3(_2659, _2660, _2661));
                        float _2667 = 1.0 - (_2655 * _2612.w);
                        float _3873 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2668 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                        float _2669 = sqrt(_2655) * _2631.w;
                        float _2672 = 1.39999997615814208984375 / (_2669 + 1.39999997615814208984375);
                        float _2673 = _2672 * _2672;
                        float _2676 = ((1.0 - _2673) * _2662) + _2673;
                        float _2679 = _2669 * _2669;
                        float _2683 = ((isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0))) * _2668) / ((_2679 * 0.699999988079071044921875) + 1.0);
                        float _2687 = (-0.0) - _2082;
                        float _2688 = (-0.0) - _2083;
                        float _2689 = (-0.0) - _2084;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2704 = exp2(log2(1.0 / ((_2679 * 3.5) + 5.0)) * 0.25);
                        float _2705 = 1.0 - _769;
                        float _2712 = sqrt(1.0 - ((1.0 - (_2705 * _2705)) * (1.0 - (_2704 * _2704))));
                        float _2713 = _2712 * _2712;
                        float _2714 = _2713 * _2713;
                        float _2715 = _2694 + _2659;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
                        float _2725 = dot(vec3(_708, _711, _714), vec3(_2694, _2695, _2696));
                        float _3889 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2728 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                        float _2729 = dot(vec3(_708, _711, _714), vec3(_2721 * _2715, _2721 * _2716, _2721 * _2717));
                        float _3900 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2732 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                        float _2736 = ((_2732 * _2732) * (_2714 + (-1.0))) + 1.0;
                        float _2737 = _2672 * _2713;
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2662) + _2738;
                        float _3911 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                        float _2743 = 1.0 - _2713;
                        float _2753 = (0.5 / (((_2742 * ((_2728 * _2743) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _2743) + _2713) * _2728))) * _2742;
                        float _3922 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2764 = (((_2714 * 3.1415927410125732421875) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) / ((_2736 * _2736) * ((_2679 * 2.1991131305694580078125) + 3.141590118408203125))) * _2668;
                        _2495 = (_2683 * _2631.x) + _2589;
                        _2496 = (_2683 * _2631.y) + _2590;
                        _2497 = (_2683 * _2631.z) + _2591;
                        _2492 = (_2764 * _2648.x) + _2586;
                        _2493 = (_2764 * _2648.y) + _2587;
                        _2494 = (_2764 * _2648.z) + _2588;
                        if (_2593 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2586 = _2492;
                            _2587 = _2493;
                            _2588 = _2494;
                            _2589 = _2495;
                            _2590 = _2496;
                            _2591 = _2497;
                            _2592 = _2593;
                        }
                    }
                    frontier_phi_74_pred = _2495;
                    frontier_phi_74_pred_1 = _2494;
                    frontier_phi_74_pred_2 = _2493;
                    frontier_phi_74_pred_3 = _2492;
                    frontier_phi_74_pred_4 = _2496;
                    frontier_phi_74_pred_5 = _2497;
                }
                _2242 = frontier_phi_74_pred;
                _2240 = frontier_phi_74_pred_1;
                _2238 = frontier_phi_74_pred_2;
                _2236 = frontier_phi_74_pred_3;
                _2244 = frontier_phi_74_pred_4;
                _2246 = frontier_phi_74_pred_5;
                uint _2418 = _2417 + 1u;
                if (_2418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2411 = _2236;
                    _2412 = _2238;
                    _2413 = _2240;
                    _2414 = _2242;
                    _2415 = _2244;
                    _2416 = _2246;
                    _2417 = _2418;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2235 = _2236;
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
        }
        uvec4 _2249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2250 = _2249.z;
        uint _2252 = (_2250 >> 8u) & 15u;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((4294967295u << _2252) & _2128) == 0u)
        {
            _2379 = _2235;
            _2381 = _2237;
            _2383 = _2239;
            _2385 = _2241;
            _2387 = _2243;
            _2389 = _2245;
        }
        else
        {
            float _2404 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
            float _2405 = _2404 * _2082;
            float _2406 = _2404 * _2083;
            float _2407 = _2404 * _2084;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2252 < ((_2250 >> 12u) & 15u))
            {
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2569 = _2235;
                float _2570 = _2237;
                float _2571 = _2239;
                float _2572 = _2241;
                float _2573 = _2243;
                float _2574 = _2245;
                uint _2575 = _2252;
                uint _2584;
                bool _2585;
                for (;;)
                {
                    _2584 = texelFetch(g_lightClassification, int((((_2122 << 5u) + (_2108 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                    _2585 = _2584 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2585)
                    {
                        frontier_phi_83_pred = _2572;
                        frontier_phi_83_pred_1 = _2571;
                        frontier_phi_83_pred_2 = _2570;
                        frontier_phi_83_pred_3 = _2569;
                        frontier_phi_83_pred_4 = _2574;
                        frontier_phi_83_pred_5 = _2573;
                    }
                    else
                    {
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _2803 = _2569;
                        float _2804 = _2570;
                        float _2805 = _2571;
                        float _2806 = _2572;
                        float _2807 = _2573;
                        float _2808 = _2574;
                        uint _2809 = _2584;
                        uint _2810;
                        vec4 _2835;
                        float _2836;
                        vec4 _2851;
                        vec3 _2863;
                        vec4 _2878;
                        vec4 _2893;
                        float _2939;
                        bool _2940;
                        for (;;)
                        {
                            uint _2820 = ((_2575 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2809));
                            _2810 = (_2809 + 4294967295u) & _2809;
                            uint _2822 = _2820 * 40u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            _2836 = _2835.w;
                            uint _2838 = (_2820 * 40u) + 4u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2820 * 40u) + 8u;
                            _2863 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x));
                            uint _2865 = (_2820 * 40u) + 16u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2880 = (_2820 * 40u) + 20u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2895 = (_2820 * 40u) + 24u;
                            vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2914 = (_2820 * 40u) + 28u;
                            vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2939 = fma(_2084, _2927.z, fma(_2083, _2927.y, _2927.x * _2082)) + _2927.w;
                            _2940 = !((fma(_2084, _2908.z, fma(_2083, _2908.y, _2908.x * _2082)) + _2908.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2940)
                            {
                                float _2967 = _2835.x - _2082;
                                float _2968 = _2835.y - _2083;
                                float _2969 = _2835.z - _2084;
                                float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                                float _2973 = inversesqrt(_2970);
                                float _2974 = _2973 * _2967;
                                float _2975 = _2973 * _2968;
                                float _2976 = _2973 * _2969;
                                float _2980 = 1.0 - (_2970 / (_2836 * _2836));
                                float _3933 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                                float _2985 = sqrt(_2970) * _2851.w;
                                float _2987 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                                float _2988 = _2987 * _2987;
                                float _2991 = ((1.0 - _2988) * dot(vec3(_2974, _2975, _2976), vec3(_708, _711, _714))) + _2988;
                                float _2994 = _2985 * _2985;
                                float _2998 = (fma(_2084, _2878.z, fma(_2083, _2878.y, _2878.x * _2082)) + _2878.w) / _2939;
                                float _2999 = (fma(_2084, _2893.z, fma(_2083, _2893.y, _2893.x * _2082)) + _2893.w) / _2939;
                                float _3003 = 1.0 - dot(vec2(_2998, _2999), vec2(_2998, _2999));
                                float _3949 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                                float _3005 = _3004 * (((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2981) / ((_2994 * 0.699999988079071044921875) + 1.0));
                                float _3017 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                                float _3018 = 1.0 - _769;
                                float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                                float _3026 = _3025 * _3025;
                                float _3027 = _3026 * _3026;
                                float _3028 = _2974 - _2405;
                                float _3029 = _2975 - _2406;
                                float _3030 = _2976 - _2407;
                                float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                                float _3038 = dot(vec3(_708, _711, _714), vec3((-0.0) - _2405, (-0.0) - _2406, (-0.0) - _2407));
                                float _3960 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3041 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                                float _3042 = dot(vec3(_708, _711, _714), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                                float _3971 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3045 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                                float _3050 = _2987 * _3026;
                                float _3051 = _3050 * _3050;
                                float _3057 = ((1.0 - _3051) * dot(vec3(_708, _711, _714), vec3(_2974, _2975, _2976))) + _3051;
                                float _3982 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _3059 = 1.0 - _3026;
                                float _3069 = (0.5 / (((_3058 * ((_3041 * _3059) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3026) * _3041))) * _3058;
                                float _3993 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3079 = (_3004 * _2981) * (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) / ((_3049 * _3049) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3005 * _2851.x;
                                frontier_phi_89_pred_1 = _3079 * _2863.z;
                                frontier_phi_89_pred_2 = _3079 * _2863.y;
                                frontier_phi_89_pred_3 = _3079 * _2863.x;
                                frontier_phi_89_pred_4 = _3005 * _2851.z;
                                frontier_phi_89_pred_5 = _3005 * _2851.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3086 = frontier_phi_89_pred;
                            _3085 = frontier_phi_89_pred_1;
                            _3084 = frontier_phi_89_pred_2;
                            _3083 = frontier_phi_89_pred_3;
                            _3088 = frontier_phi_89_pred_4;
                            _3087 = frontier_phi_89_pred_5;
                            _2793 = _3086 + _2806;
                            _2794 = _3087 + _2807;
                            _2795 = _3088 + _2808;
                            _2790 = _3083 + _2803;
                            _2791 = _3084 + _2804;
                            _2792 = _3085 + _2805;
                            if (_2810 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2810;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2793;
                        frontier_phi_83_pred_1 = _2792;
                        frontier_phi_83_pred_2 = _2791;
                        frontier_phi_83_pred_3 = _2790;
                        frontier_phi_83_pred_4 = _2795;
                        frontier_phi_83_pred_5 = _2794;
                    }
                    _2386 = frontier_phi_83_pred;
                    _2384 = frontier_phi_83_pred_1;
                    _2382 = frontier_phi_83_pred_2;
                    _2380 = frontier_phi_83_pred_3;
                    _2390 = frontier_phi_83_pred_4;
                    _2388 = frontier_phi_83_pred_5;
                    uint _2576 = _2575 + 1u;
                    if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2569 = _2380;
                        _2570 = _2382;
                        _2571 = _2384;
                        _2572 = _2386;
                        _2573 = _2388;
                        _2574 = _2390;
                        _2575 = _2576;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2390;
                frontier_phi_65_66_ladder_1 = _2388;
                frontier_phi_65_66_ladder_2 = _2384;
                frontier_phi_65_66_ladder_3 = _2382;
                frontier_phi_65_66_ladder_4 = _2386;
                frontier_phi_65_66_ladder_5 = _2380;
            }
            else
            {
                frontier_phi_65_66_ladder = _2245;
                frontier_phi_65_66_ladder_1 = _2243;
                frontier_phi_65_66_ladder_2 = _2239;
                frontier_phi_65_66_ladder_3 = _2237;
                frontier_phi_65_66_ladder_4 = _2241;
                frontier_phi_65_66_ladder_5 = _2235;
            }
            _2379 = frontier_phi_65_66_ladder_5;
            _2381 = frontier_phi_65_66_ladder_3;
            _2383 = frontier_phi_65_66_ladder_2;
            _2385 = frontier_phi_65_66_ladder_4;
            _2387 = frontier_phi_65_66_ladder_1;
            _2389 = frontier_phi_65_66_ladder;
        }
        float _2394 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2141 = (_2394 * _2385) + _1868;
        _2143 = (_2394 * _2387) + _1869;
        _2145 = (_2394 * _2389) + _1870;
        _2147 = ((_2379 * 0.039999999105930328369140625) * _2394) + _2024;
        _2149 = ((_2381 * 0.039999999105930328369140625) * _2394) + _2025;
        _2151 = ((_2383 * 0.039999999105930328369140625) * _2394) + _2026;
    }
    else
    {
        _2141 = _1868;
        _2143 = _1869;
        _2145 = _1870;
        _2147 = _2024;
        _2149 = _2025;
        _2151 = _2026;
    }
    uint _2157 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _4009 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4020 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4031 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2182 = (((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_2141 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _753))) + ((_2147 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2157].x * ((_587 * ((_543 - _468) - (_543 * _288))) + _468));
    float _2184 = ((cbInstanceData._m0[_2157].y * ((_587 * ((_544 - _469) - (_544 * _288))) + _469)) + ((_2149 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_2143 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _753)));
    float _2186 = ((cbInstanceData._m0[_2157].z * ((_587 * ((_545 - _470) - (_545 * _288))) + _470)) + ((_2151 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2145 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _753)));
    uint _2190 = _727 + 6u;
    float _2198 = _687 / cbSceneParam._m0[86u].x;
    float _2199 = _688 / cbSceneParam._m0[86u].y;
    vec4 _2213 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2198, _2199, (log2((isnan(cbSceneParam._m0[77u].w) ? _674 : (isnan(_674) ? cbSceneParam._m0[77u].w : min(_674, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2215 = _2213.x;
    float _2216 = _2213.y;
    float _2217 = _2213.z;
    float _2218 = _2213.w;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_674 > cbSceneParam._m0[78u].w)
    {
        float _2260 = isnan(_674) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _674 : min(cbSceneParam._m0[80u].w, _674));
        float _2261 = _2260 / _674;
        float _2272 = _2261 * _261;
        float _2273 = _262 * _2261;
        float _2274 = (-0.0) - _2273;
        float _2275 = _2261 * _263;
        float _2277 = (cbSceneParam._m0[77u].w * _2274) / _2260;
        float _2278 = _2277 + cbSceneParam._m0[79u].w;
        float _2279 = cbSceneParam._m0[79u].w - _2273;
        float _2285 = sqrt(((_2272 * _2272) + (_2273 * _2273)) + (_2275 * _2275));
        float _2288 = (1.0 - (cbSceneParam._m0[77u].w / _2260)) * _2285;
        float _2294 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2296 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2505;
        if (abs((_2274 - _2277) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2505 = ((((_2278 > 0.0) ? exp2(_2294 * _2278) : (2.0 - exp2(_2296 * _2278))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2288;
        }
        else
        {
            float _2440 = 1.0 / cbSceneParam._m0[80u].x;
            float _2441 = isnan(_2279) ? _2278 : (isnan(_2278) ? _2279 : max(_2278, _2279));
            float _2442 = isnan(_2279) ? _2278 : (isnan(_2278) ? _2279 : min(_2278, _2279));
            float _2451 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : min(_2441, 0.0));
            float _2452 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : min(_2442, 0.0));
            _2505 = ((abs(_2285 / _2274) * cbSceneParam._m0[80u].y) * ((((_2451 - _2452) * 2.0) - ((exp2(_2294 * (isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0)))) - exp2(_2294 * (isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0))))) * _2440)) - ((exp2(_2296 * _2451) - exp2(_2296 * _2452)) * _2440))) + (_2288 * cbSceneParam._m0[80u].z);
        }
        vec4 _2507 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2198, _2199, 1.0), 0.0);
        float _2516 = exp2((_2505 * (-1.44269502162933349609375)) * (1.0 - _2507.w));
        float _2517 = log2(_2516);
        float _2533 = log2(_2218);
        _2298 = (exp2(_2533 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].x)) * _2507.x) / cbSceneParam._m0[78u].x)) + _2215;
        _2300 = (exp2(_2533 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].y)) * _2507.y) / cbSceneParam._m0[78u].y)) + _2216;
        _2302 = (exp2(_2533 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].z)) * _2507.z) / cbSceneParam._m0[78u].z)) + _2217;
        _2304 = _2516 * _2218;
    }
    else
    {
        _2298 = _2215;
        _2300 = _2216;
        _2302 = _2217;
        _2304 = _2218;
    }
    float _2316 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2317 = _2316 == 3.0;
    float _2318 = log2(_2304);
    float _2325 = exp2(_2318 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0)));
    float _2326 = exp2(_2318 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0)));
    float _2327 = exp2(_2318 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0)));
    float _2336 = (_2316 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2336 * (_2317 ? _2325 : (_2325 + (cbSceneParam._m0[72u].w * _2298)));
    SV_Target.y = _2336 * (_2317 ? _2326 : (_2326 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.z = _2336 * (_2317 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2302)));
    SV_Target.w = cbInstanceData._m0[_2190].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2190].w;
}


