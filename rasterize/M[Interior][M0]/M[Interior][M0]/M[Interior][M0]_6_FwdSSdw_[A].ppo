#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1256;
float _3454;
float _3455;
float _3456;
float _3457;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _335 = cbMtdParam._m0[22u].y + _265;
    float _336 = cbMtdParam._m0[22u].z + _266;
    float _337 = cbMtdParam._m0[22u].w + _267;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_194, _195, _196));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_208, _209, _210));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _360 = (cbMtdParam._m0[19u].x * _351) * _357;
    float _362 = (cbMtdParam._m0[18u].w * _352) * _357;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_360 > 0.0)
    {
        _370 = (1.0 - _363) / _360;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _360;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[15u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_389 + (_384 * _360)) / _395) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _436 = (_422 - (_422 * _292)) * cbMtdParam._m0[9u].x;
    float _437 = (_423 - (_423 * _292)) * cbMtdParam._m0[9u].y;
    float _438 = cbMtdParam._m0[9u].z * (_424 - (_424 * _292));
    float _460 = (cbMtdParam._m0[21u].x * _351) * _357;
    float _462 = (cbMtdParam._m0[20u].w * _352) * _357;
    bool _463 = _460 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _468 = frontier_phi_11_10_ladder;
    }
    bool _470 = _462 > 0.0;
    float _475;
    if (_470)
    {
        _475 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _475 = frontier_phi_15_14_ladder;
    }
    float _478 = _380 ? (cbMtdParam._m0[16u].z / _358) : 5000.0;
    float _479 = isnan(_475) ? _468 : (isnan(_468) ? _475 : min(_468, _475));
    float _480 = isnan(_478) ? _479 : (isnan(_479) ? _478 : min(_479, _478));
    float _484 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _488 = ((_480 * _358) + _484) / _484;
    float _493 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _495 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _511 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_480 * _460)) / _488) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_480 * _462)) / _488) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516 = _511.x * cbMtdParam._m0[10u].x;
    float _517 = _511.y * cbMtdParam._m0[10u].y;
    float _518 = _511.z * cbMtdParam._m0[10u].z;
    float _526;
    if (_463)
    {
        _526 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _526 = frontier_phi_19_18_ladder;
    }
    float _532;
    if (_470)
    {
        _532 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _532 = frontier_phi_23_22_ladder;
    }
    float _534 = isnan(_532) ? _526 : (isnan(_526) ? _532 : min(_526, _532));
    float _535 = isnan(_478) ? _534 : (isnan(_534) ? _478 : min(_534, _478));
    float _542 = ((_535 * _358) + _484) / _484;
    vec4 _556 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_535 * _460)) / _542) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_535 * _462)) / _542) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _558 = _556.w;
    float _560 = _558 - (_558 * _292);
    float _570 = (_560 * ((_516 - _436) - (_516 * _292))) + _436;
    float _571 = (_560 * ((_517 - _437) - (_517 * _292))) + _437;
    float _572 = (_560 * ((_518 - _438) - (_518 * _292))) + _438;
    float _587 = (cbMtdParam._m0[21u].z * _351) * _357;
    float _589 = (cbMtdParam._m0[21u].y * _352) * _357;
    bool _590 = _587 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _595 = frontier_phi_27_26_ladder;
    }
    bool _597 = _589 > 0.0;
    float _602;
    if (_597)
    {
        _602 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _602 = frontier_phi_31_30_ladder;
    }
    float _605 = _380 ? (cbMtdParam._m0[18u].x / _358) : 5000.0;
    float _606 = isnan(_602) ? _595 : (isnan(_595) ? _602 : min(_595, _602));
    float _607 = isnan(_605) ? _606 : (isnan(_606) ? _605 : min(_606, _605));
    float _611 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _615 = ((_607 * _358) + _611) / _611;
    float _620 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _622 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _639 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_607 * _587)) / _615) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_607 * _589)) / _615) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _644 = _639.x * cbMtdParam._m0[14u].x;
    float _645 = _639.y * cbMtdParam._m0[14u].y;
    float _646 = _639.z * cbMtdParam._m0[14u].z;
    float _654;
    if (_590)
    {
        _654 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _654 = frontier_phi_35_34_ladder;
    }
    float _660;
    if (_597)
    {
        _660 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _660 = frontier_phi_39_38_ladder;
    }
    float _662 = isnan(_660) ? _654 : (isnan(_654) ? _660 : min(_654, _660));
    float _663 = isnan(_605) ? _662 : (isnan(_662) ? _605 : min(_662, _605));
    float _670 = ((_663 * _358) + _611) / _611;
    vec4 _684 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_663 * _587)) / _670) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_663 * _589)) / _670) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _686 = _684.w;
    float _688 = _686 - (_686 * _292);
    vec4 _712 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _720 = (_712.x * 2.0) + (-1.0);
    float _722 = (_712.y * 2.0) + (-1.0);
    float _723 = dot(vec2(_720, _722), vec2(_720, _722));
    float _3516 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _728 = sqrt(1.0 - (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))));
    float _729 = _712.z * _292;
    float _732 = fma(_728, _201, fma(_722, _208, _720 * _194));
    float _735 = fma(_728, _202, fma(_722, _209, _720 * _195));
    float _738 = fma(_728, _203, fma(_722, _210, _720 * _196));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    float _743 = _742 * _732;
    float _744 = _742 * _735;
    float _745 = _742 * _738;
    float _3527 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _746 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3549 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3560 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _765 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _770 = _265 * _769;
    float _771 = _266 * _769;
    float _772 = _267 * _769;
    vec4 _777 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _779 = _777.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _937 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _943 = (cbMatDynParam._m0[5u].x * _937) + cbMatDynParam._m0[5u].y;
        float _3571 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _948 = (cbMatDynParam._m0[5u].z * _937) + cbMatDynParam._m0[5u].w;
        float _3582 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) - _944)) + _944) < ((_779 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _812 = fma(_745, cbSceneParam._m0[5u].z, fma(_744, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _743));
    float _815 = fma(_745, cbSceneParam._m0[6u].z, fma(_744, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _743));
    float _818 = fma(_745, cbSceneParam._m0[7u].z, fma(_744, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _743));
    uint _831 = uint(roundEven(NORMAL.w)) * 13u;
    uint _833 = _831 + 9u;
    uint _834 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3593 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    vec4 _854 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _857 = _854.x * TEXCOORD.z;
    float _858 = dot(vec3(_743, _744, _745), vec3(_770, _771, _772));
    float _861 = _858 * 2.0;
    float _865 = (_861 * _743) - _770;
    float _866 = (_861 * _744) - _771;
    float _867 = (_861 * _745) - _772;
    float _871 = abs(dot(vec3(_770, _771, _772), vec3(_743, _744, _745)));
    float _3626 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _873 = sqrt(_746);
    float _886 = exp2((_873 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_873 * 3.0));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_926, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918));
        float _986 = fma(_926, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918));
        float _990 = fma(_926, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918));
        float _1013 = _918 + _743;
        float _1014 = _922 + _744;
        float _1015 = _926 + _745;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _982;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _986;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _990;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_743, _744, _745), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3674 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_743, _744, _745), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3707 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_743, _744, _745), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3740 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_926, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918));
        float _1303 = fma(_926, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918));
        float _1307 = fma(_926, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918));
        float _1330 = _918 + _743;
        float _1331 = _922 + _744;
        float _1332 = _926 + _745;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_743, _744, _745), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3803 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_743, _744, _745), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3836 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_743, _744, _745), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _3869 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = _1256;
        _1577 = _1256;
        _1578 = _1256;
        _1579 = _1256;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1268)) + _1268;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1269)) + _1269;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1270)) + _1270;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _865 * 0.5;
    float _1637 = _866 * 0.5;
    float _1638 = _867 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_926, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_926, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_926, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_867, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865));
        float _1766 = fma(_867, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865));
        float _1769 = fma(_867, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1797 = frontier_phi_57_55_ladder;
        }
        float _2166;
        if (_1766 > 0.0)
        {
            _2166 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2166 = frontier_phi_66_62_ladder;
        }
        float _2490;
        if (_1769 > 0.0)
        {
            _2490 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2490 = frontier_phi_80_73_ladder;
        }
        float _2492 = isnan(_2166) ? _1797 : (isnan(_1797) ? _2166 : min(_1797, _2166));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1763) + _1752;
        float _2498 = (_2493 * _1766) + _1756;
        float _2499 = (_2493 * _1769) + _1760;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2499, cbModelParam._m0[9u].z, fma(_2498, cbModelParam._m0[9u].y, _2497 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2499, cbModelParam._m0[10u].z, fma(_2498, cbModelParam._m0[10u].y, _2497 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2499, cbModelParam._m0[11u].z, fma(_2498, cbModelParam._m0[11u].y, _2497 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_56_80_ladder = _2641.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2641.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2641.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_56_80_ladder_2;
        _1787 = frontier_phi_56_80_ladder_1;
        _1789 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_865, _866, _867), _1705);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_926, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_926, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_926, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_867, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865));
        float _1860 = fma(_867, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865));
        float _1863 = fma(_867, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865));
        float _2171;
        if (_1857 > 0.0)
        {
            _2171 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2171 = frontier_phi_68_64_ladder;
        }
        float _2516;
        if (_1860 > 0.0)
        {
            _2516 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2516 = frontier_phi_82_75_ladder;
        }
        float _2706;
        if (_1863 > 0.0)
        {
            _2706 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2706 = frontier_phi_100_93_ladder;
        }
        float _2708 = isnan(_2516) ? _2171 : (isnan(_2171) ? _2516 : min(_2171, _2516));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _1857) + _1846;
        float _2714 = (_2709 * _1860) + _1850;
        float _2715 = (_2709 * _1863) + _1854;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2715, cbModelParam._m0[17u].z, fma(_2714, cbModelParam._m0[17u].y, _2713 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2715, cbModelParam._m0[18u].z, fma(_2714, cbModelParam._m0[18u].y, _2713 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2715, cbModelParam._m0[19u].z, fma(_2714, cbModelParam._m0[19u].y, _2713 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_65_100_ladder = _2957.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2957.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2957.z * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_65_100_ladder_1;
        _1884 = frontier_phi_65_100_ladder;
        _1886 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_865, _866, _867), _1794);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1898 = ((((1.0 - _886) * ((_873 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_886 * _873)) * _857;
    float _1899 = _1898 * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1900 = _1898 * ((cbModelParam._m0[1u].w * (_1884 - _1787)) + _1787);
    float _1901 = _1898 * ((cbModelParam._m0[1u].w * (_1886 - _1789)) + _1789);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    vec4 _1918 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_792, _793));
    float _1920 = _1918.w;
    float _1932 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1920);
    float _1933 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1920);
    float _1934 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1920);
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_831 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1946 = _857 + (-1.0);
    float _1949 = (cbLight._m0[_1941].x * _1946) + 1.0;
    float _1950 = (cbLight._m0[_1941].y * _1946) + 1.0;
    uint _1951 = _1940 + 5u;
    float _1957 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1961 = _1940 + 4u;
    float _1970 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1974 = _1940 | 1u;
    float _1985 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_743, _744, _745));
    float _1988 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_743, _744, _745));
    float _4005 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _4016 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1993 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.3183098733425140380859375;
    float _1995 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _2002 = ((cbLight._m0[_1951].x * _1957) * _1995) + (((cbLight._m0[_1961].x * _1932) * _1970) * _1993);
    float _2003 = ((_1957 * cbLight._m0[_1951].y) * _1995) + (((cbLight._m0[_1961].y * _1933) * _1970) * _1993);
    float _2004 = ((_1957 * cbLight._m0[_1951].z) * _1995) + (((cbLight._m0[_1961].z * _1934) * _1970) * _1993);
    uint _2006 = _1940 + 8u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _746) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1940].x + _770;
    float _2022 = cbLight._m0[_1940].y + _771;
    float _2023 = cbLight._m0[_1940].z + _772;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_1940].xyz));
    float _4027 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2035 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2036 = dot(vec3(_743, _744, _745), vec3(_2028, _2029, _2030));
    float _4049 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2028, _2029, _2030));
    float _4060 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2020 * _2020;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2059 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2060 = 1.0 - _2020;
    float _2071 = (0.5 / (((_2035 * ((_2034 * _2060) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2060) + _2020) * _2034))) * _2034;
    float _4071 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    uint _2087 = _1940 + 9u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _746) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1974].x + _770;
    float _2101 = cbLight._m0[_1974].y + _771;
    float _2102 = cbLight._m0[_1974].z + _772;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_1974].xyz));
    float _4082 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2114 = dot(vec3(_743, _744, _745), vec3(_2107, _2108, _2109));
    float _4093 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2107, _2108, _2109));
    float _4104 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2099 * _2099;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2099;
    float _2146 = (0.5 / (((_2035 * ((_2113 * _2136) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2136) + _2099) * _2113))) * _2113;
    float _4115 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2158 = (((_2135 * cbLight._m0[_2087].x) * _2148) * _1957) + ((((cbLight._m0[_2006].x * _1932) * _2059) * _2073) * _1970);
    float _2159 = (((_2135 * cbLight._m0[_2087].y) * _2148) * _1957) + ((((cbLight._m0[_2006].y * _1933) * _2059) * _2073) * _1970);
    float _2160 = (((_2135 * cbLight._m0[_2087].z) * _2148) * _1957) + ((((cbLight._m0[_2006].z * _1934) * _2059) * _2073) * _1970);
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1938.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
        }
        else
        {
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            uint _2559 = 0u;
            uint _2568;
            bool _2569;
            for (;;)
            {
                _2568 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                _2569 = _2568 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2569)
                {
                    frontier_phi_95_pred = _2554;
                    frontier_phi_95_pred_1 = _2553;
                    frontier_phi_95_pred_2 = _2555;
                    frontier_phi_95_pred_3 = _2558;
                    frontier_phi_95_pred_4 = _2557;
                    frontier_phi_95_pred_5 = _2556;
                }
                else
                {
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    uint _2755;
                    _2749 = _2553;
                    _2750 = _2554;
                    _2751 = _2555;
                    _2752 = _2556;
                    _2753 = _2557;
                    _2754 = _2558;
                    _2755 = _2568;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    for (;;)
                    {
                        uint _2759 = uint(findLSB(_2755)) + (_2559 << 5u);
                        uint _2756 = (_2755 + 4294967295u) & _2755;
                        uint _2761 = _2759 * 48u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2781 = (_2759 * 48u) + 4u;
                        vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2800 = (_2759 * 48u) + 8u;
                        vec3 _2811 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x));
                        float _2815 = _2775.x - _2216;
                        float _2816 = _2775.y - _2217;
                        float _2817 = _2775.z - _2218;
                        float _2818 = dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817));
                        float _2821 = inversesqrt(_2818);
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2825 = dot(vec3(_812, _815, _818), vec3(_2822, _2823, _2824));
                        float _2830 = 1.0 - (_2818 * _2775.w);
                        float _4136 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2832 = sqrt(_2818) * _2794.w;
                        float _2835 = 1.39999997615814208984375 / (_2832 + 1.39999997615814208984375);
                        float _2836 = _2835 * _2835;
                        float _2839 = ((1.0 - _2836) * _2825) + _2836;
                        float _2842 = _2832 * _2832;
                        float _2846 = ((isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))) * _2831) / ((_2842 * 0.699999988079071044921875) + 1.0);
                        float _2850 = (-0.0) - _2216;
                        float _2851 = (-0.0) - _2217;
                        float _2852 = (-0.0) - _2218;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2867 = exp2(log2(1.0 / ((_2842 * 3.5) + 5.0)) * 0.25);
                        float _2868 = 1.0 - _873;
                        float _2875 = sqrt(1.0 - ((1.0 - (_2868 * _2868)) * (1.0 - (_2867 * _2867))));
                        float _2876 = _2875 * _2875;
                        float _2877 = _2876 * _2876;
                        float _2878 = _2857 + _2822;
                        float _2879 = _2858 + _2823;
                        float _2880 = _2859 + _2824;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2888 = dot(vec3(_812, _815, _818), vec3(_2857, _2858, _2859));
                        float _4152 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2892 = dot(vec3(_812, _815, _818), vec3(_2884 * _2878, _2884 * _2879, _2884 * _2880));
                        float _4163 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2899 = ((_2895 * _2895) * (_2877 + (-1.0))) + 1.0;
                        float _2900 = _2835 * _2876;
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2825) + _2901;
                        float _4174 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2906 = 1.0 - _2876;
                        float _2916 = (0.5 / (((_2905 * ((_2891 * _2906) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2905 * _2906) + _2876) * _2891))) * _2905;
                        float _4185 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2927 = (((_2877 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_2899 * _2899) * ((_2842 * 2.1991131305694580078125) + 3.141590118408203125))) * _2831;
                        _2653 = (_2846 * _2794.x) + _2752;
                        _2654 = (_2846 * _2794.y) + _2753;
                        _2655 = (_2846 * _2794.z) + _2754;
                        _2650 = (_2927 * _2811.x) + _2749;
                        _2651 = (_2927 * _2811.y) + _2750;
                        _2652 = (_2927 * _2811.z) + _2751;
                        if (_2756 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2749 = _2650;
                            _2750 = _2651;
                            _2751 = _2652;
                            _2752 = _2653;
                            _2753 = _2654;
                            _2754 = _2655;
                            _2755 = _2756;
                        }
                    }
                    frontier_phi_95_pred = _2651;
                    frontier_phi_95_pred_1 = _2650;
                    frontier_phi_95_pred_2 = _2652;
                    frontier_phi_95_pred_3 = _2655;
                    frontier_phi_95_pred_4 = _2654;
                    frontier_phi_95_pred_5 = _2653;
                }
                _2372 = frontier_phi_95_pred;
                _2370 = frontier_phi_95_pred_1;
                _2374 = frontier_phi_95_pred_2;
                _2380 = frontier_phi_95_pred_3;
                _2378 = frontier_phi_95_pred_4;
                _2376 = frontier_phi_95_pred_5;
                uint _2560 = _2559 + 1u;
                if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2553 = _2370;
                    _2554 = _2372;
                    _2555 = _2374;
                    _2556 = _2376;
                    _2557 = _2378;
                    _2558 = _2380;
                    _2559 = _2560;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
        }
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.z;
        uint _2386 = (_2384 >> 8u) & 15u;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((4294967295u << _2386) & _2262) == 0u)
        {
            _2521 = _2369;
            _2523 = _2371;
            _2525 = _2373;
            _2527 = _2375;
            _2529 = _2377;
            _2531 = _2379;
        }
        else
        {
            float _2546 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2547 = _2546 * _2216;
            float _2548 = _2546 * _2217;
            float _2549 = _2546 * _2218;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2386 < ((_2384 >> 12u) & 15u))
            {
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2732 = _2369;
                float _2733 = _2371;
                float _2734 = _2373;
                float _2735 = _2375;
                float _2736 = _2377;
                float _2737 = _2379;
                uint _2738 = _2386;
                uint _2747;
                bool _2748;
                for (;;)
                {
                    _2747 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                    _2748 = _2747 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2748)
                    {
                        frontier_phi_109_pred = _2733;
                        frontier_phi_109_pred_1 = _2732;
                        frontier_phi_109_pred_2 = _2737;
                        frontier_phi_109_pred_3 = _2736;
                        frontier_phi_109_pred_4 = _2735;
                        frontier_phi_109_pred_5 = _2734;
                    }
                    else
                    {
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _2975 = _2732;
                        float _2976 = _2733;
                        float _2977 = _2734;
                        float _2978 = _2735;
                        float _2979 = _2736;
                        float _2980 = _2737;
                        uint _2981 = _2747;
                        uint _2982;
                        vec4 _3007;
                        float _3008;
                        vec4 _3023;
                        vec3 _3035;
                        vec4 _3050;
                        vec4 _3065;
                        float _3111;
                        bool _3112;
                        for (;;)
                        {
                            uint _2992 = ((_2738 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2981));
                            _2982 = (_2981 + 4294967295u) & _2981;
                            uint _2994 = _2992 * 40u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3008 = _3007.w;
                            uint _3010 = (_2992 * 40u) + 4u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3025 = (_2992 * 40u) + 8u;
                            _3035 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x));
                            uint _3037 = (_2992 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3052 = (_2992 * 40u) + 20u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_2992 * 40u) + 24u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3086 = (_2992 * 40u) + 28u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3111 = fma(_2218, _3099.z, fma(_2217, _3099.y, _3099.x * _2216)) + _3099.w;
                            _3112 = !((fma(_2218, _3080.z, fma(_2217, _3080.y, _3080.x * _2216)) + _3080.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3112)
                            {
                                float _3139 = _3007.x - _2216;
                                float _3140 = _3007.y - _2217;
                                float _3141 = _3007.z - _2218;
                                float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                                float _3145 = inversesqrt(_3142);
                                float _3146 = _3145 * _3139;
                                float _3147 = _3145 * _3140;
                                float _3148 = _3145 * _3141;
                                float _3152 = 1.0 - (_3142 / (_3008 * _3008));
                                float _4196 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3157 = sqrt(_3142) * _3023.w;
                                float _3159 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                                float _3160 = _3159 * _3159;
                                float _3163 = ((1.0 - _3160) * dot(vec3(_3146, _3147, _3148), vec3(_812, _815, _818))) + _3160;
                                float _3166 = _3157 * _3157;
                                float _3170 = (fma(_2218, _3050.z, fma(_2217, _3050.y, _3050.x * _2216)) + _3050.w) / _3111;
                                float _3171 = (fma(_2218, _3065.z, fma(_2217, _3065.y, _3065.x * _2216)) + _3065.w) / _3111;
                                float _3175 = 1.0 - dot(vec2(_3170, _3171), vec2(_3170, _3171));
                                float _4212 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3177 = _3176 * (((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3153) / ((_3166 * 0.699999988079071044921875) + 1.0));
                                float _3189 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                                float _3190 = 1.0 - _873;
                                float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                                float _3198 = _3197 * _3197;
                                float _3199 = _3198 * _3198;
                                float _3200 = _3146 - _2547;
                                float _3201 = _3147 - _2548;
                                float _3202 = _3148 - _2549;
                                float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                                float _3210 = dot(vec3(_812, _815, _818), vec3((-0.0) - _2547, (-0.0) - _2548, (-0.0) - _2549));
                                float _4223 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3213 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3214 = dot(vec3(_812, _815, _818), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                                float _4234 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                                float _3222 = _3159 * _3198;
                                float _3223 = _3222 * _3222;
                                float _3229 = ((1.0 - _3223) * dot(vec3(_812, _815, _818), vec3(_3146, _3147, _3148))) + _3223;
                                float _4245 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3231 = 1.0 - _3198;
                                float _3241 = (0.5 / (((_3230 * ((_3213 * _3231) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3198) * _3213))) * _3230;
                                float _4256 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3251 = (_3176 * _3153) * (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_3221 * _3221) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3177 * _3023.y;
                                frontier_phi_115_pred_1 = _3177 * _3023.x;
                                frontier_phi_115_pred_2 = _3251 * _3035.z;
                                frontier_phi_115_pred_3 = _3251 * _3035.y;
                                frontier_phi_115_pred_4 = _3251 * _3035.x;
                                frontier_phi_115_pred_5 = _3177 * _3023.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3259 = frontier_phi_115_pred;
                            _3258 = frontier_phi_115_pred_1;
                            _3257 = frontier_phi_115_pred_2;
                            _3256 = frontier_phi_115_pred_3;
                            _3255 = frontier_phi_115_pred_4;
                            _3260 = frontier_phi_115_pred_5;
                            _2965 = _3258 + _2978;
                            _2966 = _3259 + _2979;
                            _2967 = _3260 + _2980;
                            _2962 = _3255 + _2975;
                            _2963 = _3256 + _2976;
                            _2964 = _3257 + _2977;
                            if (_2982 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2982;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2963;
                        frontier_phi_109_pred_1 = _2962;
                        frontier_phi_109_pred_2 = _2967;
                        frontier_phi_109_pred_3 = _2966;
                        frontier_phi_109_pred_4 = _2965;
                        frontier_phi_109_pred_5 = _2964;
                    }
                    _2524 = frontier_phi_109_pred;
                    _2522 = frontier_phi_109_pred_1;
                    _2532 = frontier_phi_109_pred_2;
                    _2530 = frontier_phi_109_pred_3;
                    _2528 = frontier_phi_109_pred_4;
                    _2526 = frontier_phi_109_pred_5;
                    uint _2739 = _2738 + 1u;
                    if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2732 = _2522;
                        _2733 = _2524;
                        _2734 = _2526;
                        _2735 = _2528;
                        _2736 = _2530;
                        _2737 = _2532;
                        _2738 = _2739;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2522;
                frontier_phi_84_85_ladder_1 = _2526;
                frontier_phi_84_85_ladder_2 = _2532;
                frontier_phi_84_85_ladder_3 = _2530;
                frontier_phi_84_85_ladder_4 = _2528;
                frontier_phi_84_85_ladder_5 = _2524;
            }
            else
            {
                frontier_phi_84_85_ladder = _2369;
                frontier_phi_84_85_ladder_1 = _2373;
                frontier_phi_84_85_ladder_2 = _2379;
                frontier_phi_84_85_ladder_3 = _2377;
                frontier_phi_84_85_ladder_4 = _2375;
                frontier_phi_84_85_ladder_5 = _2371;
            }
            _2521 = frontier_phi_84_85_ladder;
            _2523 = frontier_phi_84_85_ladder_5;
            _2525 = frontier_phi_84_85_ladder_1;
            _2527 = frontier_phi_84_85_ladder_4;
            _2529 = frontier_phi_84_85_ladder_3;
            _2531 = frontier_phi_84_85_ladder_2;
        }
        float _2536 = isnan(1.0) ? _857 : (isnan(_857) ? 1.0 : min(_857, 1.0));
        _2275 = (_2536 * _2527) + _2002;
        _2277 = (_2536 * _2529) + _2003;
        _2279 = (_2536 * _2531) + _2004;
        _2281 = ((_2521 * 0.039999999105930328369140625) * _2536) + _2158;
        _2283 = ((_2523 * 0.039999999105930328369140625) * _2536) + _2159;
        _2285 = ((_2525 * 0.039999999105930328369140625) * _2536) + _2160;
    }
    else
    {
        _2275 = _2002;
        _2277 = _2003;
        _2279 = _2004;
        _2281 = _2158;
        _2283 = _2159;
        _2285 = _2160;
    }
    uint _2291 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _4272 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4283 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4294 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2316 = (((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2275 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _857))) + ((_2281 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2291].x * ((_688 * ((_644 - _570) - (_644 * _292))) + _570));
    float _2318 = ((cbInstanceData._m0[_2291].y * ((_688 * ((_645 - _571) - (_645 * _292))) + _571)) + ((_2283 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2277 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _857)));
    float _2320 = ((cbInstanceData._m0[_2291].z * ((_688 * ((_646 - _572) - (_646 * _292))) + _572)) + ((_2285 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2279 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _857)));
    float _2321 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2322 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2323 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    uint _2324 = _831 + 6u;
    float _2332 = _792 / cbSceneParam._m0[86u].x;
    float _2333 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2347 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, (log2((isnan(cbSceneParam._m0[77u].w) ? _765 : (isnan(_765) ? cbSceneParam._m0[77u].w : min(_765, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2349 = _2347.x;
    float _2350 = _2347.y;
    float _2351 = _2347.z;
    float _2352 = _2347.w;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    if (_765 > cbSceneParam._m0[78u].w)
    {
        float _2394 = isnan(_765) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _765 : min(cbSceneParam._m0[80u].w, _765));
        float _2395 = _2394 / _765;
        float _2406 = _2395 * _265;
        float _2407 = _266 * _2395;
        float _2408 = (-0.0) - _2407;
        float _2409 = _2395 * _267;
        float _2411 = (cbSceneParam._m0[77u].w * _2408) / _2394;
        float _2412 = _2411 + cbSceneParam._m0[79u].w;
        float _2413 = cbSceneParam._m0[79u].w - _2407;
        float _2419 = sqrt(((_2406 * _2406) + (_2407 * _2407)) + (_2409 * _2409));
        float _2422 = (1.0 - (cbSceneParam._m0[77u].w / _2394)) * _2419;
        float _2428 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2430 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2663;
        if (abs((_2408 - _2411) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2663 = ((((_2412 > 0.0) ? exp2(_2428 * _2412) : (2.0 - exp2(_2430 * _2412))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2422;
        }
        else
        {
            float _2582 = 1.0 / cbSceneParam._m0[80u].x;
            float _2583 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : max(_2412, _2413));
            float _2584 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : min(_2412, _2413));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            float _2594 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : min(_2584, 0.0));
            _2663 = ((abs(_2419 / _2408) * cbSceneParam._m0[80u].y) * ((((_2593 - _2594) * 2.0) - ((exp2(_2428 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)))) - exp2(_2428 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))))) * _2582)) - ((exp2(_2430 * _2593) - exp2(_2430 * _2594)) * _2582))) + (_2422 * cbSceneParam._m0[80u].z);
        }
        vec4 _2665 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, 1.0), 0.0);
        float _2674 = exp2((_2663 * (-1.44269502162933349609375)) * (1.0 - _2665.w));
        float _2675 = log2(_2674);
        float _2691 = log2(_2352);
        _2432 = (exp2(_2691 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].x)) * _2665.x) / cbSceneParam._m0[78u].x)) + _2349;
        _2434 = (exp2(_2691 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].y)) * _2665.y) / cbSceneParam._m0[78u].y)) + _2350;
        _2436 = (exp2(_2691 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].z)) * _2665.z) / cbSceneParam._m0[78u].z)) + _2351;
        _2438 = _2674 * _2352;
    }
    else
    {
        _2432 = _2349;
        _2434 = _2350;
        _2436 = _2351;
        _2438 = _2352;
    }
    bool _2701;
    vec4 _2448;
    vec4 _2470;
    float _2472;
    float _2476;
    float _2477;
    float _2478;
    float _2479;
    bool _2489;
    for (;;)
    {
        _2448 = cbMatDynParam._m0[0u];
        float _2450 = roundEven(_2448.y);
        bool _2451 = _2450 == 3.0;
        float _2452 = log2(_2438);
        float _2459 = exp2(_2452 * cbSceneParam._m0[78u].x) * _2321;
        float _2460 = exp2(_2452 * cbSceneParam._m0[78u].y) * _2322;
        float _2461 = exp2(_2452 * cbSceneParam._m0[78u].z) * _2323;
        float _2468 = _779 + (-0.5);
        _2470 = cbMtdParam._m0[1u];
        _2472 = _2470.y * _2468;
        float _2475 = (_2450 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2476 = _2475 * (_2451 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2432)));
        _2477 = _2475 * (_2451 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2434)));
        _2478 = _2475 * (_2451 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2436)));
        _2479 = _2468 * 0.999000012874603271484375;
        _2489 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2489)
        {
            if ((cbInstanceData._m0[_831 + 7u].x + _2479) < 0.5)
            {
                _2701 = true;
                break;
            }
        }
        uint _2617 = _833 + uint(_2448.w);
        if ((cbInstanceData._m0[_2617].w < 1.0) && ((cbInstanceData._m0[_2617].w + _2479) < 0.5))
        {
            _2701 = true;
            break;
        }
        if ((_2472 + 1.0) < _2470.x)
        {
            _2701 = true;
            break;
        }
        _2701 = false;
        break;
    }
    float _2932;
    if (_2701)
    {
        discard_state = true;
        _2932 = 0.0;
    }
    else
    {
        _2932 = cbInstanceData._m0[_2324].w;
    }
    SV_Target.x = _2476;
    SV_Target.y = _2477;
    SV_Target.z = _2478;
    SV_Target.w = _2932;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2324].w;
    discard_exit();
}


