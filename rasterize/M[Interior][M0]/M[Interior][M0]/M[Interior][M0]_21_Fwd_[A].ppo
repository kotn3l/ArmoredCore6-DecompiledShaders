#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1167;
float _3318;
float _3319;
float _3320;
float _3321;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _393 = (_389 * _383) + (_357 * cbMtdParam._m0[20u].y);
    float _394 = (_389 * _384) + (_358 * cbMtdParam._m0[20u].z);
    float _395 = _393 * cbMtdParam._m0[19u].x;
    float _396 = _394 * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    bool _414 = _392 > 0.0;
    float _416 = _414 ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = _397 + (-0.5);
    float _426 = _398 + (-0.5);
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_423 + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_426 + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _470 = (_456 - (_456 * _290)) * cbMtdParam._m0[9u].x;
    float _471 = (_457 - (_457 * _290)) * cbMtdParam._m0[9u].y;
    float _472 = cbMtdParam._m0[9u].z * (_458 - (_458 * _290));
    float _490 = _393 * cbMtdParam._m0[21u].x;
    float _491 = _394 * cbMtdParam._m0[20u].w;
    bool _492 = _490 > 0.0;
    float _497;
    if (_492)
    {
        _497 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _497 = frontier_phi_11_10_ladder;
    }
    bool _499 = _491 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _504 = frontier_phi_15_14_ladder;
    }
    float _507 = _414 ? (cbMtdParam._m0[16u].z / _392) : 5000.0;
    float _508 = isnan(_504) ? _497 : (isnan(_497) ? _504 : min(_497, _504));
    float _509 = isnan(_507) ? _508 : (isnan(_508) ? _507 : min(_508, _507));
    float _513 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _517 = ((_509 * _392) + _513) / _513;
    float _522 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _524 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _540 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_509 * _490)) / _517) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_509 * _491)) / _517) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _545 = _540.x * cbMtdParam._m0[10u].x;
    float _546 = _540.y * cbMtdParam._m0[10u].y;
    float _547 = _540.z * cbMtdParam._m0[10u].z;
    float _555;
    if (_492)
    {
        _555 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _555 = frontier_phi_19_18_ladder;
    }
    float _561;
    if (_499)
    {
        _561 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _561 = frontier_phi_23_22_ladder;
    }
    float _563 = isnan(_561) ? _555 : (isnan(_555) ? _561 : min(_555, _561));
    float _564 = isnan(_507) ? _563 : (isnan(_563) ? _507 : min(_563, _507));
    float _571 = ((_564 * _392) + _513) / _513;
    vec4 _585 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_564 * _490)) / _571) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_564 * _491)) / _571) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _587 = _585.w;
    float _589 = _587 - (_587 * _290);
    vec4 _613 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _617 = _613.z;
    float _620 = (_613.x * 2.0) + (-1.0);
    float _621 = (_613.y * 2.0) + (-1.0);
    float _622 = dot(vec2(_620, _621), vec2(_620, _621));
    float _3360 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))));
    float _628 = _617 * _290;
    float _635 = (cbMtdParam._m0[15u].w * ((_329 - _628) + ((_617 - _329) * _290))) + _628;
    float _639 = (cbMtdParam._m0[16u].x * _357) + _620;
    float _640 = (cbMtdParam._m0[16u].x * _358) + _621;
    float _643 = fma(_627, _199, fma(_640, _206, _639 * _192));
    float _646 = fma(_627, _200, fma(_640, _207, _639 * _193));
    float _649 = fma(_627, _201, fma(_640, _208, _639 * _194));
    float _653 = inversesqrt(dot(vec3(_643, _646, _649), vec3(_643, _646, _649)));
    float _654 = _653 * _643;
    float _655 = _653 * _646;
    float _656 = _653 * _649;
    float _3371 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _657 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3393 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3404 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _681 = _263 * _680;
    float _682 = _264 * _680;
    float _683 = _265 * _680;
    vec4 _688 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _690 = _688.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _848 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _854 = (cbMatDynParam._m0[5u].x * _848) + cbMatDynParam._m0[5u].y;
        float _3415 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _859 = (cbMatDynParam._m0[5u].z * _848) + cbMatDynParam._m0[5u].w;
        float _3426 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) - _855)) + _855) < ((_690 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_656, cbSceneParam._m0[5u].z, fma(_655, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _654));
    float _726 = fma(_656, cbSceneParam._m0[6u].z, fma(_655, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _654));
    float _729 = fma(_656, cbSceneParam._m0[7u].z, fma(_655, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _654));
    uint _742 = uint(roundEven(NORMAL.w)) * 13u;
    uint _744 = _742 + 9u;
    uint _745 = _744 + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3437 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _768 = _765.x * TEXCOORD.z;
    float _769 = dot(vec3(_654, _655, _656), vec3(_681, _682, _683));
    float _772 = _769 * 2.0;
    float _776 = (_772 * _654) - _681;
    float _777 = (_772 * _655) - _682;
    float _778 = (_772 * _656) - _683;
    float _782 = abs(dot(vec3(_681, _682, _683), vec3(_654, _655, _656)));
    float _3470 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _784 = sqrt(_657);
    float _797 = exp2((_784 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_784 * 3.0));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _893 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _897 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _901 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _924 = _829 + _654;
        float _925 = _833 + _655;
        float _926 = _837 + _656;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_893 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_897 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_901 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_654, _655, _656), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3518 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_654, _655, _656), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3551 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_654, _655, _656), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3584 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1214 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1218 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1241 = _829 + _654;
        float _1242 = _833 + _655;
        float _1243 = _837 + _656;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_654, _655, _656), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3647 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_654, _655, _656), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3680 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_654, _655, _656), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3713 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = _1167;
        _1489 = _1167;
        _1490 = _1167;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1179)) + _1179;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1180)) + _1180;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1181)) + _1181;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _776 * 0.5;
    float _1548 = _777 * 0.5;
    float _1549 = _778 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _657);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_778, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776));
        float _1678 = fma(_778, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776));
        float _1681 = fma(_778, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1709 = frontier_phi_41_39_ladder;
        }
        float _2054;
        if (_1678 > 0.0)
        {
            _2054 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2054 = frontier_phi_50_46_ladder;
        }
        float _2378;
        if (_1681 > 0.0)
        {
            _2378 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2378 = frontier_phi_64_57_ladder;
        }
        float _2380 = isnan(_2054) ? _1709 : (isnan(_1709) ? _2054 : min(_1709, _2054));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1675) + _1664;
        float _2386 = (_2381 * _1678) + _1668;
        float _2387 = (_2381 * _1681) + _1672;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2389 = (-1.0) - _2388;
        float _2391 = _2388 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2387 > _2391) || ((_2387 < _2389) || ((_2386 > _2391) || ((_2386 < _2389) || ((_2385 < _2389) || (_2385 > _2391))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_40_64_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_40_64_ladder_2;
        _1699 = frontier_phi_40_64_ladder_1;
        _1701 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_776, _777, _778), _1616);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _657);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_778, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776));
        float _1772 = fma(_778, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776));
        float _1775 = fma(_778, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776));
        float _2059;
        if (_1769 > 0.0)
        {
            _2059 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2059 = frontier_phi_52_48_ladder;
        }
        float _2404;
        if (_1772 > 0.0)
        {
            _2404 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2404 = frontier_phi_66_59_ladder;
        }
        float _2594;
        if (_1775 > 0.0)
        {
            _2594 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2594 = frontier_phi_84_77_ladder;
        }
        float _2596 = isnan(_2404) ? _2059 : (isnan(_2059) ? _2404 : min(_2059, _2404));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1769) + _1758;
        float _2602 = (_2597 * _1772) + _1762;
        float _2603 = (_2597 * _1775) + _1766;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_49_84_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_49_84_ladder_2;
        _1796 = frontier_phi_49_84_ladder_1;
        _1798 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_776, _777, _778), _1706);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1810 = ((((1.0 - _797) * ((_784 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_797 * _784)) * _768;
    float _1811 = _1810 * ((cbModelParam._m0[1u].w * (_1794 - _1697)) + _1697);
    float _1812 = _1810 * ((cbModelParam._m0[1u].w * (_1796 - _1699)) + _1699);
    float _1813 = _1810 * ((cbModelParam._m0[1u].w * (_1798 - _1701)) + _1701);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_742 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1840 = _768 + (-1.0);
    float _1843 = (cbLight._m0[_1835].x * _1840) + 1.0;
    float _1844 = (cbLight._m0[_1835].y * _1840) + 1.0;
    uint _1845 = _1834 + 5u;
    float _1851 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1855 = _1834 + 4u;
    float _1861 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1865 = _1834 | 1u;
    float _1876 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_654, _655, _656));
    float _1879 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_654, _655, _656));
    float _3849 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _3860 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1884 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _1886 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.3183098733425140380859375;
    float _1893 = ((cbLight._m0[_1845].x * _1851) * _1886) + ((cbLight._m0[_1855].x * _1861) * _1884);
    float _1894 = ((_1851 * cbLight._m0[_1845].y) * _1886) + ((_1861 * cbLight._m0[_1855].y) * _1884);
    float _1895 = ((_1851 * cbLight._m0[_1845].z) * _1886) + ((_1861 * cbLight._m0[_1855].z) * _1884);
    uint _1897 = _1834 + 8u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _657) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1834].x + _681;
    float _1913 = cbLight._m0[_1834].y + _682;
    float _1914 = cbLight._m0[_1834].z + _683;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_1834].xyz));
    float _3871 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _1926 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1927 = dot(vec3(_654, _655, _656), vec3(_1919, _1920, _1921));
    float _3893 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1919, _1920, _1921));
    float _3904 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1911 * _1911;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1950 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1951 = 1.0 - _1911;
    float _1962 = (0.5 / (((_1926 * ((_1925 * _1951) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _1951) + _1911) * _1925))) * _1925;
    float _3915 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    uint _1975 = _1834 + 9u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _657) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1865].x + _681;
    float _1989 = cbLight._m0[_1865].y + _682;
    float _1990 = cbLight._m0[_1865].z + _683;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_1865].xyz));
    float _3926 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _2002 = dot(vec3(_654, _655, _656), vec3(_1995, _1996, _1997));
    float _3937 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_1995, _1996, _1997));
    float _3948 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1987 * _1987;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2023 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = 1.0 - _1987;
    float _2034 = (0.5 / (((_1926 * ((_2001 * _2024) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2024) + _1987) * _2001))) * _2001;
    float _3959 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    float _2046 = (((_2023 * cbLight._m0[_1975].x) * _2036) * _1851) + (((_1950 * cbLight._m0[_1897].x) * _1964) * _1861);
    float _2047 = (((_2023 * cbLight._m0[_1975].y) * _2036) * _1851) + (((_1950 * cbLight._m0[_1897].y) * _1964) * _1861);
    float _2048 = (((_2023 * cbLight._m0[_1975].z) * _2036) * _1851) + (((_1950 * cbLight._m0[_1897].z) * _1964) * _1861);
    float _2163;
    float _2165;
    float _2167;
    float _2169;
    float _2171;
    float _2173;
    if (_1832.y == 0u)
    {
        float _2103 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2104 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2103;
        float _2105 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2103;
        float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2103;
        uvec4 _2118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2119 = _2118.x;
        uint _2130 = uint((float(_2118.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2119))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2119)));
        float _2140 = (log2(_2106 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2141 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        uint _2144 = uint(isnan(14.0) ? _2141 : (isnan(_2141) ? 14.0 : min(_2141, 14.0)));
        uvec4 _2149 = texelFetch(g_lightClusterGridBuffer, int(((_2144 << 2u) + (_2130 << 6u)) >> 2u));
        uint _2150 = _2149.x;
        uint _2151 = _2118.z;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        if (((((1u << ((_2151 >> 4u) & 15u)) + 4294967295u) & _2150) == 0u) || ((_2151 & 240u) == 0u))
        {
            _2257 = 0.0;
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
        }
        else
        {
            float _2258;
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            uint _2447 = 0u;
            uint _2456;
            bool _2457;
            for (;;)
            {
                _2456 = texelFetch(g_lightClassification, int((((_2144 << 5u) + (_2130 << 9u)) + (_2447 << 2u)) >> 2u)).x;
                _2457 = _2456 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2457)
                {
                    frontier_phi_79_pred = _2446;
                    frontier_phi_79_pred_1 = _2445;
                    frontier_phi_79_pred_2 = _2444;
                    frontier_phi_79_pred_3 = _2443;
                    frontier_phi_79_pred_4 = _2442;
                    frontier_phi_79_pred_5 = _2441;
                }
                else
                {
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    uint _2643;
                    _2637 = _2441;
                    _2638 = _2442;
                    _2639 = _2443;
                    _2640 = _2444;
                    _2641 = _2445;
                    _2642 = _2446;
                    _2643 = _2456;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    for (;;)
                    {
                        uint _2647 = uint(findLSB(_2643)) + (_2447 << 5u);
                        uint _2644 = (_2643 + 4294967295u) & _2643;
                        uint _2649 = _2647 * 48u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2669 = (_2647 * 48u) + 4u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2688 = (_2647 * 48u) + 8u;
                        vec3 _2699 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x));
                        float _2703 = _2663.x - _2104;
                        float _2704 = _2663.y - _2105;
                        float _2705 = _2663.z - _2106;
                        float _2706 = dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705));
                        float _2709 = inversesqrt(_2706);
                        float _2710 = _2709 * _2703;
                        float _2711 = _2709 * _2704;
                        float _2712 = _2709 * _2705;
                        float _2713 = dot(vec3(_723, _726, _729), vec3(_2710, _2711, _2712));
                        float _2718 = 1.0 - (_2706 * _2663.w);
                        float _3980 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2719 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2720 = sqrt(_2706) * _2682.w;
                        float _2723 = 1.39999997615814208984375 / (_2720 + 1.39999997615814208984375);
                        float _2724 = _2723 * _2723;
                        float _2727 = ((1.0 - _2724) * _2713) + _2724;
                        float _2730 = _2720 * _2720;
                        float _2734 = ((isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))) * _2719) / ((_2730 * 0.699999988079071044921875) + 1.0);
                        float _2738 = (-0.0) - _2104;
                        float _2739 = (-0.0) - _2105;
                        float _2740 = (-0.0) - _2106;
                        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2755 = exp2(log2(1.0 / ((_2730 * 3.5) + 5.0)) * 0.25);
                        float _2756 = 1.0 - _784;
                        float _2763 = sqrt(1.0 - ((1.0 - (_2756 * _2756)) * (1.0 - (_2755 * _2755))));
                        float _2764 = _2763 * _2763;
                        float _2765 = _2764 * _2764;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2768 = _2747 + _2712;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2776 = dot(vec3(_723, _726, _729), vec3(_2745, _2746, _2747));
                        float _3996 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2780 = dot(vec3(_723, _726, _729), vec3(_2772 * _2766, _2772 * _2767, _2772 * _2768));
                        float _4007 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2787 = ((_2783 * _2783) * (_2765 + (-1.0))) + 1.0;
                        float _2788 = _2723 * _2764;
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2713) + _2789;
                        float _4018 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2794 = 1.0 - _2764;
                        float _2804 = (0.5 / (((_2793 * ((_2779 * _2794) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2793 * _2794) + _2764) * _2779))) * _2793;
                        float _4029 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2815 = (((_2765 * 3.1415927410125732421875) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) / ((_2787 * _2787) * ((_2730 * 2.1991131305694580078125) + 3.141590118408203125))) * _2719;
                        _2541 = (_2734 * _2682.x) + _2640;
                        _2542 = (_2734 * _2682.y) + _2641;
                        _2543 = (_2734 * _2682.z) + _2642;
                        _2538 = (_2815 * _2699.x) + _2637;
                        _2539 = (_2815 * _2699.y) + _2638;
                        _2540 = (_2815 * _2699.z) + _2639;
                        if (_2644 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2637 = _2538;
                            _2638 = _2539;
                            _2639 = _2540;
                            _2640 = _2541;
                            _2641 = _2542;
                            _2642 = _2543;
                            _2643 = _2644;
                        }
                    }
                    frontier_phi_79_pred = _2543;
                    frontier_phi_79_pred_1 = _2542;
                    frontier_phi_79_pred_2 = _2541;
                    frontier_phi_79_pred_3 = _2540;
                    frontier_phi_79_pred_4 = _2539;
                    frontier_phi_79_pred_5 = _2538;
                }
                _2268 = frontier_phi_79_pred;
                _2266 = frontier_phi_79_pred_1;
                _2264 = frontier_phi_79_pred_2;
                _2262 = frontier_phi_79_pred_3;
                _2260 = frontier_phi_79_pred_4;
                _2258 = frontier_phi_79_pred_5;
                uint _2448 = _2447 + 1u;
                if (_2448 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2441 = _2258;
                    _2442 = _2260;
                    _2443 = _2262;
                    _2444 = _2264;
                    _2445 = _2266;
                    _2446 = _2268;
                    _2447 = _2448;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2257 = _2258;
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
        }
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.z;
        uint _2274 = (_2272 >> 8u) & 15u;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((4294967295u << _2274) & _2150) == 0u)
        {
            _2409 = _2257;
            _2411 = _2259;
            _2413 = _2261;
            _2415 = _2263;
            _2417 = _2265;
            _2419 = _2267;
        }
        else
        {
            float _2434 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
            float _2435 = _2434 * _2104;
            float _2436 = _2434 * _2105;
            float _2437 = _2434 * _2106;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2274 < ((_2272 >> 12u) & 15u))
            {
                float _2410;
                float _2412;
                float _2414;
                float _2416;
                float _2418;
                float _2420;
                float _2620 = _2257;
                float _2621 = _2259;
                float _2622 = _2261;
                float _2623 = _2263;
                float _2624 = _2265;
                float _2625 = _2267;
                uint _2626 = _2274;
                uint _2635;
                bool _2636;
                for (;;)
                {
                    _2635 = texelFetch(g_lightClassification, int((((_2144 << 5u) + (_2130 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                    _2636 = _2635 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2636)
                    {
                        frontier_phi_93_pred = _2624;
                        frontier_phi_93_pred_1 = _2623;
                        frontier_phi_93_pred_2 = _2622;
                        frontier_phi_93_pred_3 = _2621;
                        frontier_phi_93_pred_4 = _2620;
                        frontier_phi_93_pred_5 = _2625;
                    }
                    else
                    {
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _2863 = _2620;
                        float _2864 = _2621;
                        float _2865 = _2622;
                        float _2866 = _2623;
                        float _2867 = _2624;
                        float _2868 = _2625;
                        uint _2869 = _2635;
                        uint _2870;
                        vec4 _2895;
                        float _2896;
                        vec4 _2911;
                        vec3 _2923;
                        vec4 _2938;
                        vec4 _2953;
                        float _2999;
                        bool _3000;
                        for (;;)
                        {
                            uint _2880 = ((_2626 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2869));
                            _2870 = (_2869 + 4294967295u) & _2869;
                            uint _2882 = _2880 * 40u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2896 = _2895.w;
                            uint _2898 = (_2880 * 40u) + 4u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2913 = (_2880 * 40u) + 8u;
                            _2923 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x));
                            uint _2925 = (_2880 * 40u) + 16u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2940 = (_2880 * 40u) + 20u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2955 = (_2880 * 40u) + 24u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2974 = (_2880 * 40u) + 28u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2999 = fma(_2106, _2987.z, fma(_2105, _2987.y, _2987.x * _2104)) + _2987.w;
                            _3000 = !((fma(_2106, _2968.z, fma(_2105, _2968.y, _2968.x * _2104)) + _2968.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3000)
                            {
                                float _3027 = _2895.x - _2104;
                                float _3028 = _2895.y - _2105;
                                float _3029 = _2895.z - _2106;
                                float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                                float _3033 = inversesqrt(_3030);
                                float _3034 = _3033 * _3027;
                                float _3035 = _3033 * _3028;
                                float _3036 = _3033 * _3029;
                                float _3040 = 1.0 - (_3030 / (_2896 * _2896));
                                float _4040 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3045 = sqrt(_3030) * _2911.w;
                                float _3047 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                                float _3048 = _3047 * _3047;
                                float _3051 = ((1.0 - _3048) * dot(vec3(_3034, _3035, _3036), vec3(_723, _726, _729))) + _3048;
                                float _3054 = _3045 * _3045;
                                float _3058 = (fma(_2106, _2938.z, fma(_2105, _2938.y, _2938.x * _2104)) + _2938.w) / _2999;
                                float _3059 = (fma(_2106, _2953.z, fma(_2105, _2953.y, _2953.x * _2104)) + _2953.w) / _2999;
                                float _3063 = 1.0 - dot(vec2(_3058, _3059), vec2(_3058, _3059));
                                float _4056 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3065 = _3064 * (((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3041) / ((_3054 * 0.699999988079071044921875) + 1.0));
                                float _3077 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                                float _3078 = 1.0 - _784;
                                float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                                float _3086 = _3085 * _3085;
                                float _3087 = _3086 * _3086;
                                float _3088 = _3034 - _2435;
                                float _3089 = _3035 - _2436;
                                float _3090 = _3036 - _2437;
                                float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                                float _3098 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2435, (-0.0) - _2436, (-0.0) - _2437));
                                float _4067 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3101 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3102 = dot(vec3(_723, _726, _729), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                                float _4078 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3105 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                                float _3110 = _3047 * _3086;
                                float _3111 = _3110 * _3110;
                                float _3117 = ((1.0 - _3111) * dot(vec3(_723, _726, _729), vec3(_3034, _3035, _3036))) + _3111;
                                float _4089 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3119 = 1.0 - _3086;
                                float _3129 = (0.5 / (((_3118 * ((_3101 * _3119) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3086) * _3101))) * _3118;
                                float _4100 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3139 = (_3064 * _3041) * (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) / ((_3109 * _3109) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3065 * _2911.z;
                                frontier_phi_99_pred_1 = _3065 * _2911.y;
                                frontier_phi_99_pred_2 = _3065 * _2911.x;
                                frontier_phi_99_pred_3 = _3139 * _2923.z;
                                frontier_phi_99_pred_4 = _3139 * _2923.y;
                                frontier_phi_99_pred_5 = _3139 * _2923.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3148 = frontier_phi_99_pred;
                            _3147 = frontier_phi_99_pred_1;
                            _3146 = frontier_phi_99_pred_2;
                            _3145 = frontier_phi_99_pred_3;
                            _3144 = frontier_phi_99_pred_4;
                            _3143 = frontier_phi_99_pred_5;
                            _2853 = _3146 + _2866;
                            _2854 = _3147 + _2867;
                            _2855 = _3148 + _2868;
                            _2850 = _3143 + _2863;
                            _2851 = _3144 + _2864;
                            _2852 = _3145 + _2865;
                            if (_2870 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2870;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2854;
                        frontier_phi_93_pred_1 = _2853;
                        frontier_phi_93_pred_2 = _2852;
                        frontier_phi_93_pred_3 = _2851;
                        frontier_phi_93_pred_4 = _2850;
                        frontier_phi_93_pred_5 = _2855;
                    }
                    _2418 = frontier_phi_93_pred;
                    _2416 = frontier_phi_93_pred_1;
                    _2414 = frontier_phi_93_pred_2;
                    _2412 = frontier_phi_93_pred_3;
                    _2410 = frontier_phi_93_pred_4;
                    _2420 = frontier_phi_93_pred_5;
                    uint _2627 = _2626 + 1u;
                    if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2620 = _2410;
                        _2621 = _2412;
                        _2622 = _2414;
                        _2623 = _2416;
                        _2624 = _2418;
                        _2625 = _2420;
                        _2626 = _2627;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2420;
                frontier_phi_68_69_ladder_1 = _2418;
                frontier_phi_68_69_ladder_2 = _2416;
                frontier_phi_68_69_ladder_3 = _2414;
                frontier_phi_68_69_ladder_4 = _2410;
                frontier_phi_68_69_ladder_5 = _2412;
            }
            else
            {
                frontier_phi_68_69_ladder = _2267;
                frontier_phi_68_69_ladder_1 = _2265;
                frontier_phi_68_69_ladder_2 = _2263;
                frontier_phi_68_69_ladder_3 = _2261;
                frontier_phi_68_69_ladder_4 = _2257;
                frontier_phi_68_69_ladder_5 = _2259;
            }
            _2409 = frontier_phi_68_69_ladder_4;
            _2411 = frontier_phi_68_69_ladder_5;
            _2413 = frontier_phi_68_69_ladder_3;
            _2415 = frontier_phi_68_69_ladder_2;
            _2417 = frontier_phi_68_69_ladder_1;
            _2419 = frontier_phi_68_69_ladder;
        }
        float _2424 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
        _2163 = (_2424 * _2415) + _1893;
        _2165 = (_2424 * _2417) + _1894;
        _2167 = (_2424 * _2419) + _1895;
        _2169 = ((_2409 * 0.039999999105930328369140625) * _2424) + _2046;
        _2171 = ((_2411 * 0.039999999105930328369140625) * _2424) + _2047;
        _2173 = ((_2413 * 0.039999999105930328369140625) * _2424) + _2048;
    }
    else
    {
        _2163 = _1893;
        _2165 = _1894;
        _2167 = _1895;
        _2169 = _2046;
        _2171 = _2047;
        _2173 = _2048;
    }
    uint _2179 = _744 + uint(cbMatDynParam._m0[0u].w);
    float _4116 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4127 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4138 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2204 = (((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2163 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _768))) + ((_2169 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1605)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2179].x * ((_589 * ((_545 - _470) - (_545 * _290))) + _470));
    float _2206 = ((cbInstanceData._m0[_2179].y * ((_589 * ((_546 - _471) - (_546 * _290))) + _471)) + ((_2171 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1605)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2165 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _768)));
    float _2208 = ((cbInstanceData._m0[_2179].z * ((_589 * ((_547 - _472) - (_547 * _290))) + _472)) + ((_2173 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1605)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2167 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _768)));
    float _2209 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2210 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2211 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    uint _2212 = _742 + 6u;
    float _2220 = _703 / cbSceneParam._m0[86u].x;
    float _2221 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2235 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2220, _2221, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2237 = _2235.x;
    float _2238 = _2235.y;
    float _2239 = _2235.z;
    float _2240 = _2235.w;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _2282 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _2283 = _2282 / _676;
        float _2294 = _2283 * _263;
        float _2295 = _264 * _2283;
        float _2296 = (-0.0) - _2295;
        float _2297 = _2283 * _265;
        float _2299 = (cbSceneParam._m0[77u].w * _2296) / _2282;
        float _2300 = _2299 + cbSceneParam._m0[79u].w;
        float _2301 = cbSceneParam._m0[79u].w - _2295;
        float _2307 = sqrt(((_2294 * _2294) + (_2295 * _2295)) + (_2297 * _2297));
        float _2310 = (1.0 - (cbSceneParam._m0[77u].w / _2282)) * _2307;
        float _2316 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2318 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2551;
        if (abs((_2296 - _2299) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2551 = ((((_2300 > 0.0) ? exp2(_2316 * _2300) : (2.0 - exp2(_2318 * _2300))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2310;
        }
        else
        {
            float _2470 = 1.0 / cbSceneParam._m0[80u].x;
            float _2471 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : max(_2300, _2301));
            float _2472 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : min(_2300, _2301));
            float _2481 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : min(_2471, 0.0));
            float _2482 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : min(_2472, 0.0));
            _2551 = ((abs(_2307 / _2296) * cbSceneParam._m0[80u].y) * ((((_2481 - _2482) * 2.0) - ((exp2(_2316 * (isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0)))) - exp2(_2316 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0))))) * _2470)) - ((exp2(_2318 * _2481) - exp2(_2318 * _2482)) * _2470))) + (_2310 * cbSceneParam._m0[80u].z);
        }
        vec4 _2553 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2220, _2221, 1.0), 0.0);
        float _2562 = exp2((_2551 * (-1.44269502162933349609375)) * (1.0 - _2553.w));
        float _2563 = log2(_2562);
        float _2579 = log2(_2240);
        _2320 = (exp2(_2579 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].x)) * _2553.x) / cbSceneParam._m0[78u].x)) + _2237;
        _2322 = (exp2(_2579 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].y)) * _2553.y) / cbSceneParam._m0[78u].y)) + _2238;
        _2324 = (exp2(_2579 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].z)) * _2553.z) / cbSceneParam._m0[78u].z)) + _2239;
        _2326 = _2562 * _2240;
    }
    else
    {
        _2320 = _2237;
        _2322 = _2238;
        _2324 = _2239;
        _2326 = _2240;
    }
    bool _2589;
    vec4 _2336;
    vec4 _2358;
    float _2360;
    float _2364;
    float _2365;
    float _2366;
    float _2367;
    bool _2377;
    for (;;)
    {
        _2336 = cbMatDynParam._m0[0u];
        float _2338 = roundEven(_2336.y);
        bool _2339 = _2338 == 3.0;
        float _2340 = log2(_2326);
        float _2347 = exp2(_2340 * cbSceneParam._m0[78u].x) * _2209;
        float _2348 = exp2(_2340 * cbSceneParam._m0[78u].y) * _2210;
        float _2349 = exp2(_2340 * cbSceneParam._m0[78u].z) * _2211;
        float _2356 = _690 + (-0.5);
        _2358 = cbMtdParam._m0[1u];
        _2360 = _2358.y * _2356;
        float _2363 = (_2338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2364 = _2363 * (_2339 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2320)));
        _2365 = _2363 * (_2339 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2322)));
        _2366 = _2363 * (_2339 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2324)));
        _2367 = _2356 * 0.999000012874603271484375;
        _2377 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2377)
        {
            if ((cbInstanceData._m0[_742 + 7u].x + _2367) < 0.5)
            {
                _2589 = true;
                break;
            }
        }
        uint _2505 = _744 + uint(_2336.w);
        if ((cbInstanceData._m0[_2505].w < 1.0) && ((cbInstanceData._m0[_2505].w + _2367) < 0.5))
        {
            _2589 = true;
            break;
        }
        if ((_2360 + 1.0) < _2358.x)
        {
            _2589 = true;
            break;
        }
        _2589 = false;
        break;
    }
    float _2820;
    if (_2589)
    {
        discard_state = true;
        _2820 = 0.0;
    }
    else
    {
        _2820 = cbInstanceData._m0[_2212].w;
    }
    SV_Target.x = _2364;
    SV_Target.y = _2365;
    SV_Target.z = _2366;
    SV_Target.w = _2820;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2212].w;
    discard_exit();
}


