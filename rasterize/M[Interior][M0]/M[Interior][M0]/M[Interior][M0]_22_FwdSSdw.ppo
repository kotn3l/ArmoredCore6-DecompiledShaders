#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1251;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _393 = (_389 * _383) + (_357 * cbMtdParam._m0[20u].y);
    float _394 = (_389 * _384) + (_358 * cbMtdParam._m0[20u].z);
    float _395 = _393 * cbMtdParam._m0[19u].x;
    float _396 = _394 * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    bool _414 = _392 > 0.0;
    float _416 = _414 ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = _397 + (-0.5);
    float _426 = _398 + (-0.5);
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_423 + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_426 + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _470 = (_456 - (_456 * _290)) * cbMtdParam._m0[9u].x;
    float _471 = (_457 - (_457 * _290)) * cbMtdParam._m0[9u].y;
    float _472 = cbMtdParam._m0[9u].z * (_458 - (_458 * _290));
    float _490 = _393 * cbMtdParam._m0[21u].x;
    float _491 = _394 * cbMtdParam._m0[20u].w;
    bool _492 = _490 > 0.0;
    float _497;
    if (_492)
    {
        _497 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _497 = frontier_phi_11_10_ladder;
    }
    bool _499 = _491 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _504 = frontier_phi_15_14_ladder;
    }
    float _507 = _414 ? (cbMtdParam._m0[16u].z / _392) : 5000.0;
    float _508 = isnan(_504) ? _497 : (isnan(_497) ? _504 : min(_497, _504));
    float _509 = isnan(_507) ? _508 : (isnan(_508) ? _507 : min(_508, _507));
    float _513 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _517 = ((_509 * _392) + _513) / _513;
    float _522 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _524 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _540 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_509 * _490)) / _517) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_509 * _491)) / _517) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _545 = _540.x * cbMtdParam._m0[10u].x;
    float _546 = _540.y * cbMtdParam._m0[10u].y;
    float _547 = _540.z * cbMtdParam._m0[10u].z;
    float _555;
    if (_492)
    {
        _555 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _555 = frontier_phi_19_18_ladder;
    }
    float _561;
    if (_499)
    {
        _561 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _561 = frontier_phi_23_22_ladder;
    }
    float _563 = isnan(_561) ? _555 : (isnan(_555) ? _561 : min(_555, _561));
    float _564 = isnan(_507) ? _563 : (isnan(_563) ? _507 : min(_563, _507));
    float _571 = ((_564 * _392) + _513) / _513;
    vec4 _585 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_564 * _490)) / _571) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_564 * _491)) / _571) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _587 = _585.w;
    float _589 = _587 - (_587 * _290);
    float _599 = (_589 * ((_545 - _470) - (_545 * _290))) + _470;
    float _600 = (_589 * ((_546 - _471) - (_546 * _290))) + _471;
    float _601 = (_589 * ((_547 - _472) - (_547 * _290))) + _472;
    float _615 = _393 * cbMtdParam._m0[21u].z;
    float _616 = _394 * cbMtdParam._m0[21u].y;
    bool _617 = _615 > 0.0;
    float _622;
    if (_617)
    {
        _622 = (1.0 - _397) / _615;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_615 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _397) / _615;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _622 = frontier_phi_27_26_ladder;
    }
    bool _624 = _616 > 0.0;
    float _629;
    if (_624)
    {
        _629 = (1.0 - _398) / _616;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_616 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _398) / _616;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _629 = frontier_phi_31_30_ladder;
    }
    float _632 = _414 ? (cbMtdParam._m0[18u].x / _392) : 5000.0;
    float _633 = isnan(_629) ? _622 : (isnan(_622) ? _629 : min(_622, _629));
    float _634 = isnan(_632) ? _633 : (isnan(_633) ? _632 : min(_633, _632));
    float _638 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _642 = ((_634 * _392) + _638) / _638;
    float _647 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _649 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _666 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_423 + (_634 * _615)) / _642) + 0.5) + _647) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_426 + (_634 * _616)) / _642) + 0.5) + _649) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _671 = _666.x * cbMtdParam._m0[14u].x;
    float _672 = _666.y * cbMtdParam._m0[14u].y;
    float _673 = _666.z * cbMtdParam._m0[14u].z;
    float _681;
    if (_617)
    {
        _681 = (1.0 - _397) / _615;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_615 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _397) / _615;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _681 = frontier_phi_35_34_ladder;
    }
    float _687;
    if (_624)
    {
        _687 = (1.0 - _398) / _616;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_616 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _398) / _616;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _687 = frontier_phi_39_38_ladder;
    }
    float _689 = isnan(_687) ? _681 : (isnan(_681) ? _687 : min(_681, _687));
    float _690 = isnan(_632) ? _689 : (isnan(_689) ? _632 : min(_689, _632));
    float _697 = ((_690 * _392) + _638) / _638;
    vec4 _711 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_423 + (_690 * _615)) / _697) + 0.5) + _647) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_426 + (_690 * _616)) / _697) + 0.5) + _649) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _713 = _711.w;
    float _715 = _713 - (_713 * _290);
    vec4 _739 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _743 = _739.z;
    float _746 = (_739.x * 2.0) + (-1.0);
    float _747 = (_739.y * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3445 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _753 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _754 = _743 * _290;
    float _761 = (cbMtdParam._m0[15u].w * ((_329 - _754) + ((_743 - _329) * _290))) + _754;
    float _765 = (cbMtdParam._m0[16u].x * _357) + _746;
    float _766 = (cbMtdParam._m0[16u].x * _358) + _747;
    float _769 = fma(_753, _199, fma(_766, _206, _765 * _192));
    float _772 = fma(_753, _200, fma(_766, _207, _765 * _193));
    float _775 = fma(_753, _201, fma(_766, _208, _765 * _194));
    float _779 = inversesqrt(dot(vec3(_769, _772, _775), vec3(_769, _772, _775)));
    float _780 = _779 * _769;
    float _781 = _779 * _772;
    float _782 = _779 * _775;
    float _3456 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _783 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3478 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3489 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _802 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _806 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _807 = _263 * _806;
    float _808 = _264 * _806;
    float _809 = _265 * _806;
    float _815 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _816 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _835 = fma(_782, cbSceneParam._m0[5u].z, fma(_781, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _780));
    float _838 = fma(_782, cbSceneParam._m0[6u].z, fma(_781, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _780));
    float _841 = fma(_782, cbSceneParam._m0[7u].z, fma(_781, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _780));
    uint _854 = uint(roundEven(NORMAL.w)) * 13u;
    uint _856 = _854 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_857].z;
    float _3500 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _815, cbSceneParam._m0[86u].y * _816));
    float _880 = _877.x * TEXCOORD.z;
    float _881 = dot(vec3(_780, _781, _782), vec3(_807, _808, _809));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _780) - _807;
    float _889 = (_884 * _781) - _808;
    float _890 = (_884 * _782) - _809;
    float _894 = abs(dot(vec3(_807, _808, _809), vec3(_780, _781, _782)));
    float _3533 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_783);
    float _909 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1250;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _977 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _981 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _985 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1008 = _941 + _780;
        float _1009 = _945 + _781;
        float _1010 = _949 + _782;
        float _1020 = fma(_1010, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_977 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_981 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[34u].z) + ((((((_985 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1078 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1044.x + (-0.5));
        float _1080 = _1078 * (_1044.y + (-0.5));
        float _1081 = _1078 * (_1044.z + (-0.5));
        float _1088 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1051.x + (-0.5));
        float _1090 = _1088 * (_1051.y + (-0.5));
        float _1091 = _1088 * (_1051.z + (-0.5));
        float _1098 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1058.x + (-0.5));
        float _1100 = _1098 * (_1058.y + (-0.5));
        float _1101 = _1098 * (_1058.z + (-0.5));
        float _1108 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1065.x + (-0.5));
        float _1110 = _1108 * (_1065.y + (-0.5));
        float _1111 = _1108 * (_1065.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1132 = (dot(vec3(_780, _781, _782), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1142 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3581 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1144 + 1.0))) + _1149) * _1112;
        float _1159 = _1080 * 0.5;
        float _1160 = _1090 * 0.5;
        float _1161 = _1100 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_780, _781, _782), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3614 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1186 + 1.0))) + _1191) * _1113;
        float _1201 = _1081 * 0.5;
        float _1202 = _1091 * 0.5;
        float _1203 = _1101 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_780, _781, _782), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3647 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1228 + 1.0))) + _1233) * _1114;
        _1250 = _1081;
        _1252 = _1080;
        _1253 = _1079;
        _1254 = _1091;
        _1255 = _1090;
        _1256 = _1089;
        _1257 = _1101;
        _1258 = _1100;
        _1259 = _1099;
        _1260 = _1114;
        _1261 = _1113;
        _1262 = _1112;
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _1251;
        _1252 = _1251;
        _1253 = _1251;
        _1254 = _1251;
        _1255 = _1251;
        _1256 = _1251;
        _1257 = _1251;
        _1258 = _1251;
        _1259 = _1251;
        _1260 = _1251;
        _1261 = _1251;
        _1262 = _1251;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1291 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1295 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1299 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1322 = _941 + _780;
        float _1323 = _945 + _781;
        float _1324 = _949 + _782;
        float _1334 = fma(_1324, cbModelParam._m0[30u].z, fma(_1323, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1322)) - _1291;
        float _1335 = fma(_1324, cbModelParam._m0[31u].z, fma(_1323, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1322)) - _1295;
        float _1336 = fma(_1324, cbModelParam._m0[32u].z, fma(_1323, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1322)) - _1299;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1353 = ((_1340 * _1334) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1291 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1335) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1295 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1340 * _1336) / cbModelParam._m0[35u].z) + ((((((_1299 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        float _1390 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1357.x + (-0.5));
        float _1392 = _1390 * (_1357.y + (-0.5));
        float _1393 = _1390 * (_1357.z + (-0.5));
        float _1400 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1364.x + (-0.5));
        float _1402 = _1400 * (_1364.y + (-0.5));
        float _1403 = _1400 * (_1364.z + (-0.5));
        float _1410 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1371.x + (-0.5));
        float _1412 = _1410 * (_1371.y + (-0.5));
        float _1413 = _1410 * (_1371.z + (-0.5));
        float _1420 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1378.x + (-0.5));
        float _1422 = _1420 * (_1378.y + (-0.5));
        float _1423 = _1420 * (_1378.z + (-0.5));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = _1391 * 0.5;
        float _1428 = _1401 * 0.5;
        float _1429 = _1411 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_780, _781, _782), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3710 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1454 + 1.0))) + _1459) * _1424;
        float _1469 = _1392 * 0.5;
        float _1470 = _1402 * 0.5;
        float _1471 = _1412 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_780, _781, _782), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3743 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1496 + 1.0))) + _1501) * _1425;
        float _1511 = _1393 * 0.5;
        float _1512 = _1403 * 0.5;
        float _1513 = _1413 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_780, _781, _782), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _3776 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1538 + 1.0))) + _1543) * _1426;
        _1560 = _1393;
        _1561 = _1392;
        _1562 = _1391;
        _1563 = _1403;
        _1564 = _1402;
        _1565 = _1401;
        _1566 = _1413;
        _1567 = _1412;
        _1568 = _1411;
        _1569 = _1426;
        _1570 = _1425;
        _1571 = _1424;
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1251;
        _1561 = _1251;
        _1562 = _1251;
        _1563 = _1251;
        _1564 = _1251;
        _1565 = _1251;
        _1566 = _1251;
        _1567 = _1251;
        _1568 = _1251;
        _1569 = _1251;
        _1570 = _1251;
        _1571 = _1251;
        _1572 = 0.0;
        _1573 = 0.0;
        _1574 = 0.0;
    }
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1263)) + _1263;
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1264)) + _1264;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1265)) + _1265;
    float _1607 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1585, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1585, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1585, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1584));
    float _1628 = _888 * 0.5;
    float _1629 = _889 * 0.5;
    float _1630 = _890 * 0.5;
    float _1631 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1634 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1637 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1671;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1644 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1250, _1254, _1257, _1260));
        float _1648 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1652 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1659 = dot(vec4(cbModelParam._m0[39u]), vec4(_1628, _1629, _1630, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1682;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1673 = dot(vec4(cbModelParam._m0[40u]), vec4(_1628, _1629, _1630, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1686 = (_1682 * cbModelParam._m0[1u].x) + (_1671 * (1.0 - cbModelParam._m0[1u].x));
    float _1696 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _783);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1696 : min(cbModelParam._m0[25u].z, _1696));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1744 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1748 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1752 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1755 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1758 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1761 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1789;
        if (_1755 > 0.0)
        {
            _1789 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1789 = frontier_phi_54_52_ladder;
        }
        float _2158;
        if (_1758 > 0.0)
        {
            _2158 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2158 = frontier_phi_63_59_ladder;
        }
        float _2474;
        if (_1761 > 0.0)
        {
            _2474 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2474 = frontier_phi_77_70_ladder;
        }
        float _2476 = isnan(_2158) ? _1789 : (isnan(_1789) ? _2158 : min(_1789, _2158));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1755) + _1744;
        float _2482 = (_2477 * _1758) + _1748;
        float _2483 = (_2477 * _1761) + _1752;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2484;
        float _2487 = _2484 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2483 > _2487) || ((_2483 < _2485) || ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 < _2485) || (_2481 > _2487))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2483, cbModelParam._m0[9u].z, fma(_2482, cbModelParam._m0[9u].y, _2481 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2483, cbModelParam._m0[10u].z, fma(_2482, cbModelParam._m0[10u].y, _2481 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2483, cbModelParam._m0[11u].z, fma(_2482, cbModelParam._m0[11u].y, _2481 * cbModelParam._m0[11u].x))), _1697);
            frontier_phi_53_77_ladder = _2609.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2609.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2609.z * cbModelParam._m0[1u].y;
        }
        _1777 = frontier_phi_53_77_ladder;
        _1779 = frontier_phi_53_77_ladder_1;
        _1781 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1697);
        _1777 = _1765.x * cbModelParam._m0[1u].y;
        _1779 = _1765.y * cbModelParam._m0[1u].y;
        _1781 = _1765.z * cbModelParam._m0[1u].y;
    }
    float _1785 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _783);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1785 : min(cbModelParam._m0[25u].w, _1785));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1838 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1842 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1846 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1849 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1852 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1855 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _2163;
        if (_1849 > 0.0)
        {
            _2163 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2163 = frontier_phi_65_61_ladder;
        }
        float _2500;
        if (_1852 > 0.0)
        {
            _2500 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2500 = frontier_phi_79_72_ladder;
        }
        float _2669;
        if (_1855 > 0.0)
        {
            _2669 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2669 = frontier_phi_93_88_ladder;
        }
        float _2671 = isnan(_2500) ? _2163 : (isnan(_2163) ? _2500 : min(_2163, _2500));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _1849) + _1838;
        float _2677 = (_2672 * _1852) + _1842;
        float _2678 = (_2672 * _1855) + _1846;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2680 = (-1.0) - _2679;
        float _2682 = _2679 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2678 > _2682) || ((_2678 < _2680) || ((_2677 > _2682) || ((_2677 < _2680) || ((_2676 < _2680) || (_2676 > _2682))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2678, cbModelParam._m0[17u].z, fma(_2677, cbModelParam._m0[17u].y, _2676 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2678, cbModelParam._m0[18u].z, fma(_2677, cbModelParam._m0[18u].y, _2676 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2678, cbModelParam._m0[19u].z, fma(_2677, cbModelParam._m0[19u].y, _2676 * cbModelParam._m0[19u].x))), _1786);
            frontier_phi_62_93_ladder = _2911.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2911.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2911.x * cbModelParam._m0[1u].z;
        }
        _1874 = frontier_phi_62_93_ladder_2;
        _1876 = frontier_phi_62_93_ladder_1;
        _1878 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1786);
        _1874 = _1858.x * cbModelParam._m0[1u].z;
        _1876 = _1858.y * cbModelParam._m0[1u].z;
        _1878 = _1858.z * cbModelParam._m0[1u].z;
    }
    float _1890 = ((((1.0 - _909) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_909 * _896)) * _880;
    float _1891 = _1890 * ((cbModelParam._m0[1u].w * (_1874 - _1777)) + _1777);
    float _1892 = _1890 * ((cbModelParam._m0[1u].w * (_1876 - _1779)) + _1779);
    float _1893 = _1890 * ((cbModelParam._m0[1u].w * (_1878 - _1781)) + _1781);
    float _1896 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1891 * cbSceneParam._m0[89u].x));
    float _1899 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1891 * cbSceneParam._m0[90u].x));
    float _1902 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, _1891 * cbSceneParam._m0[91u].x));
    vec4 _1910 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_815, _816));
    float _1912 = _1910.w;
    float _1924 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1912);
    float _1925 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1912);
    float _1926 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1912);
    uvec4 _1930 = floatBitsToUint(cbInstanceData._m0[_854 + 5u]);
    uint _1932 = _1930.x * 14u;
    uint _1933 = _1932 + 13u;
    float _1938 = _880 + (-1.0);
    float _1941 = (cbLight._m0[_1933].x * _1938) + 1.0;
    float _1942 = (cbLight._m0[_1933].y * _1938) + 1.0;
    uint _1943 = _1932 + 5u;
    float _1949 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1953 = _1932 + 4u;
    float _1962 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1966 = _1932 | 1u;
    float _1977 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_780, _781, _782));
    float _1980 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_780, _781, _782));
    float _3912 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _3923 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1985 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1987 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1994 = ((cbLight._m0[_1943].x * _1949) * _1987) + (((cbLight._m0[_1953].x * _1924) * _1962) * _1985);
    float _1995 = ((_1949 * cbLight._m0[_1943].y) * _1987) + (((cbLight._m0[_1953].y * _1925) * _1962) * _1985);
    float _1996 = ((_1949 * cbLight._m0[_1943].z) * _1987) + (((cbLight._m0[_1953].z * _1926) * _1962) * _1985);
    uint _1998 = _1932 + 8u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _783) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1932].x + _807;
    float _2014 = cbLight._m0[_1932].y + _808;
    float _2015 = cbLight._m0[_1932].z + _809;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_1932].xyz));
    float _3934 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2027 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _2028 = dot(vec3(_780, _781, _782), vec3(_2020, _2021, _2022));
    float _3956 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2020, _2021, _2022));
    float _3967 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2012 * _2012;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2051 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2052 = 1.0 - _2012;
    float _2063 = (0.5 / (((_2027 * ((_2026 * _2052) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2052) + _2012) * _2026))) * _2026;
    float _3978 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    uint _2079 = _1932 + 9u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _783) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1966].x + _807;
    float _2093 = cbLight._m0[_1966].y + _808;
    float _2094 = cbLight._m0[_1966].z + _809;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_1966].xyz));
    float _3989 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _2106 = dot(vec3(_780, _781, _782), vec3(_2099, _2100, _2101));
    float _4000 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2099, _2100, _2101));
    float _4011 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2091 * _2091;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2128 = 1.0 - _2091;
    float _2138 = (0.5 / (((_2027 * ((_2105 * _2128) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2128) + _2091) * _2105))) * _2105;
    float _4022 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    float _2150 = (((_2127 * cbLight._m0[_2079].x) * _2140) * _1949) + ((((cbLight._m0[_1998].x * _1924) * _2051) * _2065) * _1962);
    float _2151 = (((_2127 * cbLight._m0[_2079].y) * _2140) * _1949) + ((((cbLight._m0[_1998].y * _1925) * _2051) * _2065) * _1962);
    float _2152 = (((_2127 * cbLight._m0[_2079].z) * _2140) * _1949) + ((((cbLight._m0[_1998].z * _1926) * _2051) * _2065) * _1962);
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    if (_1930.y == 0u)
    {
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2207;
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2207;
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2207;
        uvec4 _2222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2223 = _2222.x;
        uint _2234 = uint((float(_2222.y) * floor(float(uint(cbSceneParam._m0[85u].y * _816) / _2223))) + floor(float(uint(cbSceneParam._m0[85u].x * _815) / _2223)));
        float _2244 = (log2(_2210 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2245 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        uint _2248 = uint(isnan(14.0) ? _2245 : (isnan(_2245) ? 14.0 : min(_2245, 14.0)));
        uvec4 _2253 = texelFetch(g_lightClusterGridBuffer, int(((_2248 << 2u) + (_2234 << 6u)) >> 2u));
        uint _2254 = _2253.x;
        uint _2255 = _2222.z;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        if (((((1u << ((_2255 >> 4u) & 15u)) + 4294967295u) & _2254) == 0u) || ((_2255 & 240u) == 0u))
        {
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
        }
        else
        {
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            uint _2543 = 0u;
            uint _2552;
            bool _2553;
            for (;;)
            {
                _2552 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2543 << 2u)) >> 2u)).x;
                _2553 = _2552 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2553)
                {
                    frontier_phi_90_pred = _2542;
                    frontier_phi_90_pred_1 = _2537;
                    frontier_phi_90_pred_2 = _2538;
                    frontier_phi_90_pred_3 = _2539;
                    frontier_phi_90_pred_4 = _2540;
                    frontier_phi_90_pred_5 = _2541;
                }
                else
                {
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    uint _2718;
                    _2712 = _2537;
                    _2713 = _2538;
                    _2714 = _2539;
                    _2715 = _2540;
                    _2716 = _2541;
                    _2717 = _2542;
                    _2718 = _2552;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    for (;;)
                    {
                        uint _2722 = uint(findLSB(_2718)) + (_2543 << 5u);
                        uint _2719 = (_2718 + 4294967295u) & _2718;
                        uint _2724 = _2722 * 48u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 3u)).x));
                        uint _2744 = (_2722 * 48u) + 4u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2763 = (_2722 * 48u) + 8u;
                        vec3 _2774 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x));
                        float _2778 = _2738.x - _2208;
                        float _2779 = _2738.y - _2209;
                        float _2780 = _2738.z - _2210;
                        float _2781 = dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780));
                        float _2784 = inversesqrt(_2781);
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2788 = dot(vec3(_835, _838, _841), vec3(_2785, _2786, _2787));
                        float _2793 = 1.0 - (_2781 * _2738.w);
                        float _4043 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                        float _2795 = sqrt(_2781) * _2757.w;
                        float _2798 = 1.39999997615814208984375 / (_2795 + 1.39999997615814208984375);
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2788) + _2799;
                        float _2805 = _2795 * _2795;
                        float _2809 = ((isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))) * _2794) / ((_2805 * 0.699999988079071044921875) + 1.0);
                        float _2813 = (-0.0) - _2208;
                        float _2814 = (-0.0) - _2209;
                        float _2815 = (-0.0) - _2210;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2830 = exp2(log2(1.0 / ((_2805 * 3.5) + 5.0)) * 0.25);
                        float _2831 = 1.0 - _896;
                        float _2838 = sqrt(1.0 - ((1.0 - (_2831 * _2831)) * (1.0 - (_2830 * _2830))));
                        float _2839 = _2838 * _2838;
                        float _2840 = _2839 * _2839;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2851 = dot(vec3(_835, _838, _841), vec3(_2820, _2821, _2822));
                        float _4059 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2855 = dot(vec3(_835, _838, _841), vec3(_2847 * _2841, _2847 * _2842, _2847 * _2843));
                        float _4070 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2862 = ((_2858 * _2858) * (_2840 + (-1.0))) + 1.0;
                        float _2863 = _2798 * _2839;
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2788) + _2864;
                        float _4081 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2869 = 1.0 - _2839;
                        float _2879 = (0.5 / (((_2868 * ((_2854 * _2869) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2869) + _2839) * _2854))) * _2868;
                        float _4092 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2890 = (((_2840 * 3.1415927410125732421875) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) / ((_2862 * _2862) * ((_2805 * 2.1991131305694580078125) + 3.141590118408203125))) * _2794;
                        _2621 = (_2809 * _2757.x) + _2715;
                        _2622 = (_2809 * _2757.y) + _2716;
                        _2623 = (_2809 * _2757.z) + _2717;
                        _2618 = (_2890 * _2774.x) + _2712;
                        _2619 = (_2890 * _2774.y) + _2713;
                        _2620 = (_2890 * _2774.z) + _2714;
                        if (_2719 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2712 = _2618;
                            _2713 = _2619;
                            _2714 = _2620;
                            _2715 = _2621;
                            _2716 = _2622;
                            _2717 = _2623;
                            _2718 = _2719;
                        }
                    }
                    frontier_phi_90_pred = _2623;
                    frontier_phi_90_pred_1 = _2618;
                    frontier_phi_90_pred_2 = _2619;
                    frontier_phi_90_pred_3 = _2620;
                    frontier_phi_90_pred_4 = _2621;
                    frontier_phi_90_pred_5 = _2622;
                }
                _2372 = frontier_phi_90_pred;
                _2362 = frontier_phi_90_pred_1;
                _2364 = frontier_phi_90_pred_2;
                _2366 = frontier_phi_90_pred_3;
                _2368 = frontier_phi_90_pred_4;
                _2370 = frontier_phi_90_pred_5;
                uint _2544 = _2543 + 1u;
                if (_2544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2537 = _2362;
                    _2538 = _2364;
                    _2539 = _2366;
                    _2540 = _2368;
                    _2541 = _2370;
                    _2542 = _2372;
                    _2543 = _2544;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
        }
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.z;
        uint _2378 = (_2376 >> 8u) & 15u;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((4294967295u << _2378) & _2254) == 0u)
        {
            _2505 = _2361;
            _2507 = _2363;
            _2509 = _2365;
            _2511 = _2367;
            _2513 = _2369;
            _2515 = _2371;
        }
        else
        {
            float _2530 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
            float _2531 = _2530 * _2208;
            float _2532 = _2530 * _2209;
            float _2533 = _2530 * _2210;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2378 < ((_2376 >> 12u) & 15u))
            {
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2695 = _2361;
                float _2696 = _2363;
                float _2697 = _2365;
                float _2698 = _2367;
                float _2699 = _2369;
                float _2700 = _2371;
                uint _2701 = _2378;
                uint _2710;
                bool _2711;
                for (;;)
                {
                    _2710 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2701 << 2u)) >> 2u)).x;
                    _2711 = _2710 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2711)
                    {
                        frontier_phi_99_pred = _2698;
                        frontier_phi_99_pred_1 = _2697;
                        frontier_phi_99_pred_2 = _2696;
                        frontier_phi_99_pred_3 = _2695;
                        frontier_phi_99_pred_4 = _2700;
                        frontier_phi_99_pred_5 = _2699;
                    }
                    else
                    {
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _2929 = _2695;
                        float _2930 = _2696;
                        float _2931 = _2697;
                        float _2932 = _2698;
                        float _2933 = _2699;
                        float _2934 = _2700;
                        uint _2935 = _2710;
                        uint _2936;
                        vec4 _2961;
                        float _2962;
                        vec4 _2977;
                        vec3 _2989;
                        vec4 _3004;
                        vec4 _3019;
                        float _3065;
                        bool _3066;
                        for (;;)
                        {
                            uint _2946 = ((_2701 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2935));
                            _2936 = (_2935 + 4294967295u) & _2935;
                            uint _2948 = _2946 * 40u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2962 = _2961.w;
                            uint _2964 = (_2946 * 40u) + 4u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2979 = (_2946 * 40u) + 8u;
                            _2989 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x));
                            uint _2991 = (_2946 * 40u) + 16u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2946 * 40u) + 20u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3021 = (_2946 * 40u) + 24u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3040 = (_2946 * 40u) + 28u;
                            vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            _3065 = fma(_2210, _3053.z, fma(_2209, _3053.y, _3053.x * _2208)) + _3053.w;
                            _3066 = !((fma(_2210, _3034.z, fma(_2209, _3034.y, _3034.x * _2208)) + _3034.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3066)
                            {
                                float _3093 = _2961.x - _2208;
                                float _3094 = _2961.y - _2209;
                                float _3095 = _2961.z - _2210;
                                float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                                float _3099 = inversesqrt(_3096);
                                float _3100 = _3099 * _3093;
                                float _3101 = _3099 * _3094;
                                float _3102 = _3099 * _3095;
                                float _3106 = 1.0 - (_3096 / (_2962 * _2962));
                                float _4103 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3111 = sqrt(_3096) * _2977.w;
                                float _3113 = 1.39999997615814208984375 / (_3111 + 1.39999997615814208984375);
                                float _3114 = _3113 * _3113;
                                float _3117 = ((1.0 - _3114) * dot(vec3(_3100, _3101, _3102), vec3(_835, _838, _841))) + _3114;
                                float _3120 = _3111 * _3111;
                                float _3124 = (fma(_2210, _3004.z, fma(_2209, _3004.y, _3004.x * _2208)) + _3004.w) / _3065;
                                float _3125 = (fma(_2210, _3019.z, fma(_2209, _3019.y, _3019.x * _2208)) + _3019.w) / _3065;
                                float _3129 = 1.0 - dot(vec2(_3124, _3125), vec2(_3124, _3125));
                                float _4119 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3130 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3131 = _3130 * (((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3107) / ((_3120 * 0.699999988079071044921875) + 1.0));
                                float _3143 = exp2(log2(1.0 / ((_3120 * 3.5) + 5.0)) * 0.25);
                                float _3144 = 1.0 - _896;
                                float _3151 = sqrt(1.0 - ((1.0 - (_3144 * _3144)) * (1.0 - (_3143 * _3143))));
                                float _3152 = _3151 * _3151;
                                float _3153 = _3152 * _3152;
                                float _3154 = _3100 - _2531;
                                float _3155 = _3101 - _2532;
                                float _3156 = _3102 - _2533;
                                float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                                float _3164 = dot(vec3(_835, _838, _841), vec3((-0.0) - _2531, (-0.0) - _2532, (-0.0) - _2533));
                                float _4130 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3167 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3168 = dot(vec3(_835, _838, _841), vec3(_3160 * _3154, _3160 * _3155, _3160 * _3156));
                                float _4141 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3171 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3175 = ((_3171 * _3171) * (_3153 + (-1.0))) + 1.0;
                                float _3176 = _3113 * _3152;
                                float _3177 = _3176 * _3176;
                                float _3183 = ((1.0 - _3177) * dot(vec3(_835, _838, _841), vec3(_3100, _3101, _3102))) + _3177;
                                float _4152 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3185 = 1.0 - _3152;
                                float _3195 = (0.5 / (((_3184 * ((_3167 * _3185) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3184 * _3185) + _3152) * _3167))) * _3184;
                                float _4163 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3205 = (_3130 * _3107) * (((_3153 * 3.1415927410125732421875) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) / ((_3175 * _3175) * ((_3120 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3131 * _2977.z;
                                frontier_phi_105_pred_1 = _3205 * _2989.x;
                                frontier_phi_105_pred_2 = _3205 * _2989.y;
                                frontier_phi_105_pred_3 = _3205 * _2989.z;
                                frontier_phi_105_pred_4 = _3131 * _2977.x;
                                frontier_phi_105_pred_5 = _3131 * _2977.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3214 = frontier_phi_105_pred;
                            _3209 = frontier_phi_105_pred_1;
                            _3210 = frontier_phi_105_pred_2;
                            _3211 = frontier_phi_105_pred_3;
                            _3212 = frontier_phi_105_pred_4;
                            _3213 = frontier_phi_105_pred_5;
                            _2919 = _3212 + _2932;
                            _2920 = _3213 + _2933;
                            _2921 = _3214 + _2934;
                            _2916 = _3209 + _2929;
                            _2917 = _3210 + _2930;
                            _2918 = _3211 + _2931;
                            if (_2936 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2936;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2919;
                        frontier_phi_99_pred_1 = _2918;
                        frontier_phi_99_pred_2 = _2917;
                        frontier_phi_99_pred_3 = _2916;
                        frontier_phi_99_pred_4 = _2921;
                        frontier_phi_99_pred_5 = _2920;
                    }
                    _2512 = frontier_phi_99_pred;
                    _2510 = frontier_phi_99_pred_1;
                    _2508 = frontier_phi_99_pred_2;
                    _2506 = frontier_phi_99_pred_3;
                    _2516 = frontier_phi_99_pred_4;
                    _2514 = frontier_phi_99_pred_5;
                    uint _2702 = _2701 + 1u;
                    if (_2702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2695 = _2506;
                        _2696 = _2508;
                        _2697 = _2510;
                        _2698 = _2512;
                        _2699 = _2514;
                        _2700 = _2516;
                        _2701 = _2702;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2516;
                frontier_phi_81_82_ladder_1 = _2512;
                frontier_phi_81_82_ladder_2 = _2510;
                frontier_phi_81_82_ladder_3 = _2508;
                frontier_phi_81_82_ladder_4 = _2506;
                frontier_phi_81_82_ladder_5 = _2514;
            }
            else
            {
                frontier_phi_81_82_ladder = _2371;
                frontier_phi_81_82_ladder_1 = _2367;
                frontier_phi_81_82_ladder_2 = _2365;
                frontier_phi_81_82_ladder_3 = _2363;
                frontier_phi_81_82_ladder_4 = _2361;
                frontier_phi_81_82_ladder_5 = _2369;
            }
            _2505 = frontier_phi_81_82_ladder_4;
            _2507 = frontier_phi_81_82_ladder_3;
            _2509 = frontier_phi_81_82_ladder_2;
            _2511 = frontier_phi_81_82_ladder_1;
            _2513 = frontier_phi_81_82_ladder_5;
            _2515 = frontier_phi_81_82_ladder;
        }
        float _2520 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2267 = (_2520 * _2511) + _1994;
        _2269 = (_2520 * _2513) + _1995;
        _2271 = (_2520 * _2515) + _1996;
        _2273 = ((_2505 * 0.039999999105930328369140625) * _2520) + _2150;
        _2275 = ((_2507 * 0.039999999105930328369140625) * _2520) + _2151;
        _2277 = ((_2509 * 0.039999999105930328369140625) * _2520) + _2152;
    }
    else
    {
        _2267 = _1994;
        _2269 = _1995;
        _2271 = _1996;
        _2273 = _2150;
        _2275 = _2151;
        _2277 = _2152;
    }
    uint _2283 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _4179 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4190 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4201 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2308 = (((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2267 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _880))) + ((_2273 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2283].x * ((_715 * ((_671 - _599) - (_671 * _290))) + _599));
    float _2310 = ((cbInstanceData._m0[_2283].y * ((_715 * ((_672 - _600) - (_672 * _290))) + _600)) + ((_2275 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2269 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _880)));
    float _2312 = ((cbInstanceData._m0[_2283].z * ((_715 * ((_673 - _601) - (_673 * _290))) + _601)) + ((_2277 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2271 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _880)));
    uint _2316 = _854 + 6u;
    float _2324 = _815 / cbSceneParam._m0[86u].x;
    float _2325 = _816 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _802 : (isnan(_802) ? cbSceneParam._m0[77u].w : min(_802, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    if (_802 > cbSceneParam._m0[78u].w)
    {
        float _2386 = isnan(_802) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _802 : min(cbSceneParam._m0[80u].w, _802));
        float _2387 = _2386 / _802;
        float _2398 = _2387 * _263;
        float _2399 = _264 * _2387;
        float _2400 = (-0.0) - _2399;
        float _2401 = _2387 * _265;
        float _2403 = (cbSceneParam._m0[77u].w * _2400) / _2386;
        float _2404 = _2403 + cbSceneParam._m0[79u].w;
        float _2405 = cbSceneParam._m0[79u].w - _2399;
        float _2411 = sqrt(((_2398 * _2398) + (_2399 * _2399)) + (_2401 * _2401));
        float _2414 = (1.0 - (cbSceneParam._m0[77u].w / _2386)) * _2411;
        float _2420 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2422 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2631;
        if (abs((_2400 - _2403) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2631 = ((((_2404 > 0.0) ? exp2(_2420 * _2404) : (2.0 - exp2(_2422 * _2404))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2414;
        }
        else
        {
            float _2566 = 1.0 / cbSceneParam._m0[80u].x;
            float _2567 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : max(_2404, _2405));
            float _2568 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : min(_2404, _2405));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            _2631 = ((abs(_2411 / _2400) * cbSceneParam._m0[80u].y) * ((((_2577 - _2578) * 2.0) - ((exp2(_2420 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0)))) - exp2(_2420 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0))))) * _2566)) - ((exp2(_2422 * _2577) - exp2(_2422 * _2578)) * _2566))) + (_2414 * cbSceneParam._m0[80u].z);
        }
        vec4 _2633 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2642 = exp2((_2631 * (-1.44269502162933349609375)) * (1.0 - _2633.w));
        float _2643 = log2(_2642);
        float _2659 = log2(_2344);
        _2424 = (exp2(_2659 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].x)) * _2633.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2426 = (exp2(_2659 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].y)) * _2633.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2428 = (exp2(_2659 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].z)) * _2633.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2430 = _2642 * _2344;
    }
    else
    {
        _2424 = _2341;
        _2426 = _2342;
        _2428 = _2343;
        _2430 = _2344;
    }
    float _2442 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2443 = _2442 == 3.0;
    float _2444 = log2(_2430);
    float _2451 = exp2(_2444 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)));
    float _2452 = exp2(_2444 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0)));
    float _2453 = exp2(_2444 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)));
    float _2462 = (_2442 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2462 * (_2443 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2424)));
    SV_Target.y = _2462 * (_2443 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2426)));
    SV_Target.z = _2462 * (_2443 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.w = cbInstanceData._m0[_2316].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2316].w;
}


