#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1222;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    bool _376 = _354 > 0.0;
    float _378 = _376 ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = _359 + (-0.5);
    float _388 = _360 + (-0.5);
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_385 + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_388 + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _432 = (_418 - (_418 * _288)) * cbMtdParam._m0[9u].x;
    float _433 = (_419 - (_419 * _288)) * cbMtdParam._m0[9u].y;
    float _434 = cbMtdParam._m0[9u].z * (_420 - (_420 * _288));
    float _456 = (cbMtdParam._m0[21u].x * _347) * _353;
    float _458 = (cbMtdParam._m0[20u].w * _348) * _353;
    bool _459 = _456 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _464 = frontier_phi_11_10_ladder;
    }
    bool _466 = _458 > 0.0;
    float _471;
    if (_466)
    {
        _471 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _471 = frontier_phi_15_14_ladder;
    }
    float _474 = _376 ? (cbMtdParam._m0[16u].z / _354) : 5000.0;
    float _475 = isnan(_471) ? _464 : (isnan(_464) ? _471 : min(_464, _471));
    float _476 = isnan(_474) ? _475 : (isnan(_475) ? _474 : min(_475, _474));
    float _480 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _484 = ((_476 * _354) + _480) / _480;
    float _489 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _491 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _507 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_476 * _456)) / _484) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_476 * _458)) / _484) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512 = _507.x * cbMtdParam._m0[10u].x;
    float _513 = _507.y * cbMtdParam._m0[10u].y;
    float _514 = _507.z * cbMtdParam._m0[10u].z;
    float _522;
    if (_459)
    {
        _522 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_466)
    {
        _528 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_474) ? _530 : (isnan(_530) ? _474 : min(_530, _474));
    float _538 = ((_531 * _354) + _480) / _480;
    vec4 _552 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_531 * _456)) / _538) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_531 * _458)) / _538) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _554 = _552.w;
    float _556 = _554 - (_554 * _288);
    float _566 = (_556 * ((_512 - _432) - (_512 * _288))) + _432;
    float _567 = (_556 * ((_513 - _433) - (_513 * _288))) + _433;
    float _568 = (_556 * ((_514 - _434) - (_514 * _288))) + _434;
    float _583 = (cbMtdParam._m0[21u].z * _347) * _353;
    float _585 = (cbMtdParam._m0[21u].y * _348) * _353;
    bool _586 = _583 > 0.0;
    float _591;
    if (_586)
    {
        _591 = (1.0 - _359) / _583;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _359) / _583;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _591 = frontier_phi_27_26_ladder;
    }
    bool _593 = _585 > 0.0;
    float _598;
    if (_593)
    {
        _598 = (1.0 - _360) / _585;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _360) / _585;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _598 = frontier_phi_31_30_ladder;
    }
    float _601 = _376 ? (cbMtdParam._m0[18u].x / _354) : 5000.0;
    float _602 = isnan(_598) ? _591 : (isnan(_591) ? _598 : min(_591, _598));
    float _603 = isnan(_601) ? _602 : (isnan(_602) ? _601 : min(_602, _601));
    float _607 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _611 = ((_603 * _354) + _607) / _607;
    float _616 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _618 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _635 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_385 + (_603 * _583)) / _611) + 0.5) + _616) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_388 + (_603 * _585)) / _611) + 0.5) + _618) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _640 = _635.x * cbMtdParam._m0[14u].x;
    float _641 = _635.y * cbMtdParam._m0[14u].y;
    float _642 = _635.z * cbMtdParam._m0[14u].z;
    float _650;
    if (_586)
    {
        _650 = (1.0 - _359) / _583;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _359) / _583;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _650 = frontier_phi_35_34_ladder;
    }
    float _656;
    if (_593)
    {
        _656 = (1.0 - _360) / _585;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _360) / _585;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _656 = frontier_phi_39_38_ladder;
    }
    float _658 = isnan(_656) ? _650 : (isnan(_650) ? _656 : min(_650, _656));
    float _659 = isnan(_601) ? _658 : (isnan(_658) ? _601 : min(_658, _601));
    float _666 = ((_659 * _354) + _607) / _607;
    vec4 _680 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_385 + (_659 * _583)) / _666) + 0.5) + _616) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_388 + (_659 * _585)) / _666) + 0.5) + _618) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _682 = _680.w;
    float _684 = _682 - (_682 * _288);
    float _695 = 0.5 - (_288 * 0.5);
    float _705 = (((_566 - _301) + (_684 * ((_640 - _566) - (_640 * _288)))) * _695) + _301;
    float _706 = (((_567 - _303) + (_684 * ((_641 - _567) - (_641 * _288)))) * _695) + _303;
    float _707 = (((_568 - _305) + (_684 * ((_642 - _568) - (_642 * _288)))) * _695) + _305;
    vec4 _719 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _727 = (_719.x * 2.0) + (-1.0);
    float _729 = (_719.y * 2.0) + (-1.0);
    float _730 = dot(vec2(_727, _729), vec2(_727, _729));
    float _3400 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _735 = sqrt(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))));
    float _736 = _719.z * _288;
    float _739 = fma(_735, _197, fma(_729, _204, _727 * _190));
    float _742 = fma(_735, _198, fma(_729, _205, _727 * _191));
    float _745 = fma(_735, _199, fma(_729, _206, _727 * _192));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    float _750 = _749 * _739;
    float _751 = _749 * _742;
    float _752 = _749 * _745;
    float _3411 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _753 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3433 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _3444 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _772 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _776 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _777 = _261 * _776;
    float _778 = _262 * _776;
    float _779 = _263 * _776;
    float _785 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _786 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _806 = fma(_752, cbSceneParam._m0[5u].z, fma(_751, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _750));
    float _809 = fma(_752, cbSceneParam._m0[6u].z, fma(_751, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _750));
    float _812 = fma(_752, cbSceneParam._m0[7u].z, fma(_751, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _750));
    uint _825 = uint(roundEven(NORMAL.w)) * 13u;
    uint _828 = (_825 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _834 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_828].x;
    float _835 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_828].y;
    float _836 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_828].z;
    float _3455 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    vec4 _848 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _785, cbSceneParam._m0[86u].y * _786));
    float _851 = _848.x * TEXCOORD.z;
    float _852 = dot(vec3(_750, _751, _752), vec3(_777, _778, _779));
    float _855 = _852 * 2.0;
    float _859 = (_855 * _750) - _777;
    float _860 = (_855 * _751) - _778;
    float _861 = (_855 * _752) - _779;
    float _865 = abs(dot(vec3(_777, _778, _779), vec3(_750, _751, _752)));
    float _3488 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _867 = sqrt(_753);
    float _880 = exp2((_867 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_867 * 3.0));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1221;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _948 = fma(_920, cbModelParam._m0[26u].z, fma(_916, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912));
        float _952 = fma(_920, cbModelParam._m0[27u].z, fma(_916, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912));
        float _956 = fma(_920, cbModelParam._m0[28u].z, fma(_916, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912));
        float _979 = _912 + _750;
        float _980 = _916 + _751;
        float _981 = _920 + _752;
        float _991 = fma(_981, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979)) - _948;
        float _992 = fma(_981, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979)) - _952;
        float _993 = fma(_981, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979)) - _956;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_948 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_952 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[34u].z) + ((((((_956 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1049 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1015.x + (-0.5));
        float _1051 = _1049 * (_1015.y + (-0.5));
        float _1052 = _1049 * (_1015.z + (-0.5));
        float _1059 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1022.x + (-0.5));
        float _1061 = _1059 * (_1022.y + (-0.5));
        float _1062 = _1059 * (_1022.z + (-0.5));
        float _1069 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1029.x + (-0.5));
        float _1071 = _1069 * (_1029.y + (-0.5));
        float _1072 = _1069 * (_1029.z + (-0.5));
        float _1079 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1036.x + (-0.5));
        float _1081 = _1079 * (_1036.y + (-0.5));
        float _1082 = _1079 * (_1036.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1103 = (dot(vec3(_750, _751, _752), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1113 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3536 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1115 + 1.0))) + _1120) * _1083;
        float _1130 = _1051 * 0.5;
        float _1131 = _1061 * 0.5;
        float _1132 = _1071 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_750, _751, _752), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3569 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1157 + 1.0))) + _1162) * _1084;
        float _1172 = _1052 * 0.5;
        float _1173 = _1062 * 0.5;
        float _1174 = _1072 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_750, _751, _752), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3602 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1199 + 1.0))) + _1204) * _1085;
        _1221 = _1052;
        _1223 = _1051;
        _1224 = _1050;
        _1225 = _1062;
        _1226 = _1061;
        _1227 = _1060;
        _1228 = _1072;
        _1229 = _1071;
        _1230 = _1070;
        _1231 = _1085;
        _1232 = _1084;
        _1233 = _1083;
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _1222;
        _1223 = _1222;
        _1224 = _1222;
        _1225 = _1222;
        _1226 = _1222;
        _1227 = _1222;
        _1228 = _1222;
        _1229 = _1222;
        _1230 = _1222;
        _1231 = _1222;
        _1232 = _1222;
        _1233 = _1222;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1262 = fma(_920, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _912));
        float _1266 = fma(_920, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _912));
        float _1270 = fma(_920, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _912));
        float _1293 = _912 + _750;
        float _1294 = _916 + _751;
        float _1295 = _920 + _752;
        float _1305 = fma(_1295, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1293)) - _1262;
        float _1306 = fma(_1295, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1293)) - _1266;
        float _1307 = fma(_1295, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1293)) - _1270;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1262 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1266 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[35u].z) + ((((((_1270 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1361 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1328.x + (-0.5));
        float _1363 = _1361 * (_1328.y + (-0.5));
        float _1364 = _1361 * (_1328.z + (-0.5));
        float _1371 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1335.x + (-0.5));
        float _1373 = _1371 * (_1335.y + (-0.5));
        float _1374 = _1371 * (_1335.z + (-0.5));
        float _1381 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1342.x + (-0.5));
        float _1383 = _1381 * (_1342.y + (-0.5));
        float _1384 = _1381 * (_1342.z + (-0.5));
        float _1391 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1349.x + (-0.5));
        float _1393 = _1391 * (_1349.y + (-0.5));
        float _1394 = _1391 * (_1349.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_750, _751, _752), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3665 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1425 + 1.0))) + _1430) * _1395;
        float _1440 = _1363 * 0.5;
        float _1441 = _1373 * 0.5;
        float _1442 = _1383 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_750, _751, _752), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _3698 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1467 + 1.0))) + _1472) * _1396;
        float _1482 = _1364 * 0.5;
        float _1483 = _1374 * 0.5;
        float _1484 = _1384 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_750, _751, _752), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _3731 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1509 + 1.0))) + _1514) * _1397;
        _1531 = _1364;
        _1532 = _1363;
        _1533 = _1362;
        _1534 = _1374;
        _1535 = _1373;
        _1536 = _1372;
        _1537 = _1384;
        _1538 = _1383;
        _1539 = _1382;
        _1540 = _1397;
        _1541 = _1396;
        _1542 = _1395;
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1222;
        _1532 = _1222;
        _1533 = _1222;
        _1534 = _1222;
        _1535 = _1222;
        _1536 = _1222;
        _1537 = _1222;
        _1538 = _1222;
        _1539 = _1222;
        _1540 = _1222;
        _1541 = _1222;
        _1542 = _1222;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1234)) + _1234;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1235)) + _1235;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1236)) + _1236;
    float _1578 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1581 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1584 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1555));
    float _1599 = _859 * 0.5;
    float _1600 = _860 * 0.5;
    float _1601 = _861 * 0.5;
    float _1602 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1605 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1608 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1642;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1615 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1221, _1225, _1228, _1231));
        float _1619 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1623 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1630 = dot(vec4(cbModelParam._m0[39u]), vec4(_1599, _1600, _1601, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1653;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1644 = dot(vec4(cbModelParam._m0[40u]), vec4(_1599, _1600, _1601, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1657 = (_1653 * cbModelParam._m0[1u].x) + (_1642 * (1.0 - cbModelParam._m0[1u].x));
    float _1667 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1667 : min(cbModelParam._m0[25u].z, _1667));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1715 = fma(_920, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912)) + cbModelParam._m0[13u].w;
        float _1719 = fma(_920, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912)) + cbModelParam._m0[14u].w;
        float _1723 = fma(_920, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912)) + cbModelParam._m0[15u].w;
        float _1726 = fma(_861, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859));
        float _1729 = fma(_861, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859));
        float _1732 = fma(_861, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859));
        float _1760;
        if (_1726 > 0.0)
        {
            _1760 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1760 = frontier_phi_54_52_ladder;
        }
        float _2129;
        if (_1729 > 0.0)
        {
            _2129 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2129 = frontier_phi_63_59_ladder;
        }
        float _2429;
        if (_1732 > 0.0)
        {
            _2429 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2429 = frontier_phi_77_70_ladder;
        }
        float _2431 = isnan(_2129) ? _1760 : (isnan(_1760) ? _2129 : min(_1760, _2129));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1726) + _1715;
        float _2437 = (_2432 * _1729) + _1719;
        float _2438 = (_2432 * _1732) + _1723;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2438, cbModelParam._m0[9u].z, fma(_2437, cbModelParam._m0[9u].y, _2436 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2438, cbModelParam._m0[10u].z, fma(_2437, cbModelParam._m0[10u].y, _2436 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2438, cbModelParam._m0[11u].z, fma(_2437, cbModelParam._m0[11u].y, _2436 * cbModelParam._m0[11u].x))), _1668);
            frontier_phi_53_77_ladder = _2564.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2564.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2564.z * cbModelParam._m0[1u].y;
        }
        _1748 = frontier_phi_53_77_ladder;
        _1750 = frontier_phi_53_77_ladder_1;
        _1752 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_859, _860, _861), _1668);
        _1748 = _1736.x * cbModelParam._m0[1u].y;
        _1750 = _1736.y * cbModelParam._m0[1u].y;
        _1752 = _1736.z * cbModelParam._m0[1u].y;
    }
    float _1756 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1756 : min(cbModelParam._m0[25u].w, _1756));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_920, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_920, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_920, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_861, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859));
        float _1823 = fma(_861, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859));
        float _1826 = fma(_861, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859));
        float _2134;
        if (_1820 > 0.0)
        {
            _2134 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2134 = frontier_phi_65_61_ladder;
        }
        float _2455;
        if (_1823 > 0.0)
        {
            _2455 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2455 = frontier_phi_79_72_ladder;
        }
        float _2624;
        if (_1826 > 0.0)
        {
            _2624 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2624 = frontier_phi_93_88_ladder;
        }
        float _2626 = isnan(_2455) ? _2134 : (isnan(_2134) ? _2455 : min(_2134, _2455));
        float _2627 = isnan(_2624) ? _2626 : (isnan(_2626) ? _2624 : min(_2626, _2624));
        float _2631 = (_2627 * _1820) + _1809;
        float _2632 = (_2627 * _1823) + _1813;
        float _2633 = (_2627 * _1826) + _1817;
        float _2634 = _2627 * 9.9999997473787516355514526367188e-05;
        float _2635 = (-1.0) - _2634;
        float _2637 = _2634 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2633 > _2637) || ((_2633 < _2635) || ((_2632 > _2637) || ((_2632 < _2635) || ((_2631 < _2635) || (_2631 > _2637))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2633, cbModelParam._m0[17u].z, fma(_2632, cbModelParam._m0[17u].y, _2631 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2633, cbModelParam._m0[18u].z, fma(_2632, cbModelParam._m0[18u].y, _2631 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2633, cbModelParam._m0[19u].z, fma(_2632, cbModelParam._m0[19u].y, _2631 * cbModelParam._m0[19u].x))), _1757);
            frontier_phi_62_93_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_62_93_ladder_2;
        _1847 = frontier_phi_62_93_ladder_1;
        _1849 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_859, _860, _861), _1757);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1861 = ((((1.0 - _880) * ((_867 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_880 * _867)) * _851;
    float _1862 = _1861 * ((cbModelParam._m0[1u].w * (_1845 - _1748)) + _1748);
    float _1863 = _1861 * ((cbModelParam._m0[1u].w * (_1847 - _1750)) + _1750);
    float _1864 = _1861 * ((cbModelParam._m0[1u].w * (_1849 - _1752)) + _1752);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    vec4 _1881 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_785, _786));
    float _1883 = _1881.w;
    float _1895 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1883);
    float _1896 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1883);
    float _1897 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1883);
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_825 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1909 = _851 + (-1.0);
    float _1912 = (cbLight._m0[_1904].x * _1909) + 1.0;
    float _1913 = (cbLight._m0[_1904].y * _1909) + 1.0;
    uint _1914 = _1903 + 5u;
    float _1920 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1924 = _1903 + 4u;
    float _1933 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1937 = _1903 | 1u;
    float _1948 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_750, _751, _752));
    float _1951 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_750, _751, _752));
    float _3867 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _3878 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1956 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1958 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1965 = ((cbLight._m0[_1914].x * _1920) * _1958) + (((cbLight._m0[_1924].x * _1895) * _1933) * _1956);
    float _1966 = ((_1920 * cbLight._m0[_1914].y) * _1958) + (((cbLight._m0[_1924].y * _1896) * _1933) * _1956);
    float _1967 = ((_1920 * cbLight._m0[_1914].z) * _1958) + (((cbLight._m0[_1924].z * _1897) * _1933) * _1956);
    uint _1969 = _1903 + 8u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _753) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1903].x + _777;
    float _1985 = cbLight._m0[_1903].y + _778;
    float _1986 = cbLight._m0[_1903].z + _779;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_1903].xyz));
    float _3889 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _1998 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1999 = dot(vec3(_750, _751, _752), vec3(_1991, _1992, _1993));
    float _3911 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_1991, _1992, _1993));
    float _3922 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1983 * _1983;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2022 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2023 = 1.0 - _1983;
    float _2034 = (0.5 / (((_1998 * ((_1997 * _2023) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2023) + _1983) * _1997))) * _1997;
    float _3933 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    uint _2050 = _1903 + 9u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _753) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1937].x + _777;
    float _2064 = cbLight._m0[_1937].y + _778;
    float _2065 = cbLight._m0[_1937].z + _779;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_1937].xyz));
    float _3944 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _2077 = dot(vec3(_750, _751, _752), vec3(_2070, _2071, _2072));
    float _3955 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2070, _2071, _2072));
    float _3966 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2062 * _2062;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2099 = 1.0 - _2062;
    float _2109 = (0.5 / (((_1998 * ((_2076 * _2099) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2099) + _2062) * _2076))) * _2076;
    float _3977 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    float _2121 = (((_2098 * cbLight._m0[_2050].x) * _2111) * _1920) + ((((cbLight._m0[_1969].x * _1895) * _2022) * _2036) * _1933);
    float _2122 = (((_2098 * cbLight._m0[_2050].y) * _2111) * _1920) + ((((cbLight._m0[_1969].y * _1896) * _2022) * _2036) * _1933);
    float _2123 = (((_2098 * cbLight._m0[_2050].z) * _2111) * _1920) + ((((cbLight._m0[_1969].z * _1897) * _2022) * _2036) * _1933);
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    if (_1901.y == 0u)
    {
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2178;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2178;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2178;
        uvec4 _2193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2194 = _2193.x;
        uint _2205 = uint((float(_2193.y) * floor(float(uint(cbSceneParam._m0[85u].y * _786) / _2194))) + floor(float(uint(cbSceneParam._m0[85u].x * _785) / _2194)));
        float _2215 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2216 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        uint _2219 = uint(isnan(14.0) ? _2216 : (isnan(_2216) ? 14.0 : min(_2216, 14.0)));
        uvec4 _2224 = texelFetch(g_lightClusterGridBuffer, int(((_2219 << 2u) + (_2205 << 6u)) >> 2u));
        uint _2225 = _2224.x;
        uint _2226 = _2193.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2226 >> 4u) & 15u)) + 4294967295u) & _2225) == 0u) || ((_2226 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            uint _2498 = 0u;
            uint _2507;
            bool _2508;
            for (;;)
            {
                _2507 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2498 << 2u)) >> 2u)).x;
                _2508 = _2507 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2508)
                {
                    frontier_phi_90_pred = _2497;
                    frontier_phi_90_pred_1 = _2492;
                    frontier_phi_90_pred_2 = _2493;
                    frontier_phi_90_pred_3 = _2494;
                    frontier_phi_90_pred_4 = _2495;
                    frontier_phi_90_pred_5 = _2496;
                }
                else
                {
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    uint _2673;
                    _2667 = _2492;
                    _2668 = _2493;
                    _2669 = _2494;
                    _2670 = _2495;
                    _2671 = _2496;
                    _2672 = _2497;
                    _2673 = _2507;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2677 = uint(findLSB(_2673)) + (_2498 << 5u);
                        uint _2674 = (_2673 + 4294967295u) & _2673;
                        uint _2679 = _2677 * 48u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2699 = (_2677 * 48u) + 4u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2718 = (_2677 * 48u) + 8u;
                        vec3 _2729 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x));
                        float _2733 = _2693.x - _2179;
                        float _2734 = _2693.y - _2180;
                        float _2735 = _2693.z - _2181;
                        float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                        float _2739 = inversesqrt(_2736);
                        float _2740 = _2739 * _2733;
                        float _2741 = _2739 * _2734;
                        float _2742 = _2739 * _2735;
                        float _2743 = dot(vec3(_806, _809, _812), vec3(_2740, _2741, _2742));
                        float _2748 = 1.0 - (_2736 * _2693.w);
                        float _3998 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2750 = sqrt(_2736) * _2712.w;
                        float _2753 = 1.39999997615814208984375 / (_2750 + 1.39999997615814208984375);
                        float _2754 = _2753 * _2753;
                        float _2757 = ((1.0 - _2754) * _2743) + _2754;
                        float _2760 = _2750 * _2750;
                        float _2764 = ((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2749) / ((_2760 * 0.699999988079071044921875) + 1.0);
                        float _2768 = (-0.0) - _2179;
                        float _2769 = (-0.0) - _2180;
                        float _2770 = (-0.0) - _2181;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2785 = exp2(log2(1.0 / ((_2760 * 3.5) + 5.0)) * 0.25);
                        float _2786 = 1.0 - _867;
                        float _2793 = sqrt(1.0 - ((1.0 - (_2786 * _2786)) * (1.0 - (_2785 * _2785))));
                        float _2794 = _2793 * _2793;
                        float _2795 = _2794 * _2794;
                        float _2796 = _2775 + _2740;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
                        float _2806 = dot(vec3(_806, _809, _812), vec3(_2775, _2776, _2777));
                        float _4014 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _2810 = dot(vec3(_806, _809, _812), vec3(_2802 * _2796, _2802 * _2797, _2802 * _2798));
                        float _4025 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2817 = ((_2813 * _2813) * (_2795 + (-1.0))) + 1.0;
                        float _2818 = _2753 * _2794;
                        float _2819 = _2818 * _2818;
                        float _2822 = ((1.0 - _2819) * _2743) + _2819;
                        float _4036 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2823 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2824 = 1.0 - _2794;
                        float _2834 = (0.5 / (((_2823 * ((_2809 * _2824) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2823 * _2824) + _2794) * _2809))) * _2823;
                        float _4047 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2845 = (((_2795 * 3.1415927410125732421875) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) / ((_2817 * _2817) * ((_2760 * 2.1991131305694580078125) + 3.141590118408203125))) * _2749;
                        _2576 = (_2764 * _2712.x) + _2670;
                        _2577 = (_2764 * _2712.y) + _2671;
                        _2578 = (_2764 * _2712.z) + _2672;
                        _2573 = (_2845 * _2729.x) + _2667;
                        _2574 = (_2845 * _2729.y) + _2668;
                        _2575 = (_2845 * _2729.z) + _2669;
                        if (_2674 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2667 = _2573;
                            _2668 = _2574;
                            _2669 = _2575;
                            _2670 = _2576;
                            _2671 = _2577;
                            _2672 = _2578;
                            _2673 = _2674;
                        }
                    }
                    frontier_phi_90_pred = _2578;
                    frontier_phi_90_pred_1 = _2573;
                    frontier_phi_90_pred_2 = _2574;
                    frontier_phi_90_pred_3 = _2575;
                    frontier_phi_90_pred_4 = _2576;
                    frontier_phi_90_pred_5 = _2577;
                }
                _2327 = frontier_phi_90_pred;
                _2317 = frontier_phi_90_pred_1;
                _2319 = frontier_phi_90_pred_2;
                _2321 = frontier_phi_90_pred_3;
                _2323 = frontier_phi_90_pred_4;
                _2325 = frontier_phi_90_pred_5;
                uint _2499 = _2498 + 1u;
                if (_2499 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2492 = _2317;
                    _2493 = _2319;
                    _2494 = _2321;
                    _2495 = _2323;
                    _2496 = _2325;
                    _2497 = _2327;
                    _2498 = _2499;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        if (((4294967295u << _2333) & _2225) == 0u)
        {
            _2460 = _2316;
            _2462 = _2318;
            _2464 = _2320;
            _2466 = _2322;
            _2468 = _2324;
            _2470 = _2326;
        }
        else
        {
            float _2485 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _2486 = _2485 * _2179;
            float _2487 = _2485 * _2180;
            float _2488 = _2485 * _2181;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2471;
                float _2650 = _2316;
                float _2651 = _2318;
                float _2652 = _2320;
                float _2653 = _2322;
                float _2654 = _2324;
                float _2655 = _2326;
                uint _2656 = _2333;
                uint _2665;
                bool _2666;
                for (;;)
                {
                    _2665 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                    _2666 = _2665 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2666)
                    {
                        frontier_phi_99_pred = _2653;
                        frontier_phi_99_pred_1 = _2652;
                        frontier_phi_99_pred_2 = _2651;
                        frontier_phi_99_pred_3 = _2650;
                        frontier_phi_99_pred_4 = _2655;
                        frontier_phi_99_pred_5 = _2654;
                    }
                    else
                    {
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _2884 = _2650;
                        float _2885 = _2651;
                        float _2886 = _2652;
                        float _2887 = _2653;
                        float _2888 = _2654;
                        float _2889 = _2655;
                        uint _2890 = _2665;
                        uint _2891;
                        vec4 _2916;
                        float _2917;
                        vec4 _2932;
                        vec3 _2944;
                        vec4 _2959;
                        vec4 _2974;
                        float _3020;
                        bool _3021;
                        for (;;)
                        {
                            uint _2901 = ((_2656 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2890));
                            _2891 = (_2890 + 4294967295u) & _2890;
                            uint _2903 = _2901 * 40u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2917 = _2916.w;
                            uint _2919 = (_2901 * 40u) + 4u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2934 = (_2901 * 40u) + 8u;
                            _2944 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x));
                            uint _2946 = (_2901 * 40u) + 16u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2961 = (_2901 * 40u) + 20u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2901 * 40u) + 24u;
                            vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2995 = (_2901 * 40u) + 28u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            _3020 = fma(_2181, _3008.z, fma(_2180, _3008.y, _3008.x * _2179)) + _3008.w;
                            _3021 = !((fma(_2181, _2989.z, fma(_2180, _2989.y, _2989.x * _2179)) + _2989.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3021)
                            {
                                float _3048 = _2916.x - _2179;
                                float _3049 = _2916.y - _2180;
                                float _3050 = _2916.z - _2181;
                                float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                                float _3054 = inversesqrt(_3051);
                                float _3055 = _3054 * _3048;
                                float _3056 = _3054 * _3049;
                                float _3057 = _3054 * _3050;
                                float _3061 = 1.0 - (_3051 / (_2917 * _2917));
                                float _4058 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3066 = sqrt(_3051) * _2932.w;
                                float _3068 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                                float _3069 = _3068 * _3068;
                                float _3072 = ((1.0 - _3069) * dot(vec3(_3055, _3056, _3057), vec3(_806, _809, _812))) + _3069;
                                float _3075 = _3066 * _3066;
                                float _3079 = (fma(_2181, _2959.z, fma(_2180, _2959.y, _2959.x * _2179)) + _2959.w) / _3020;
                                float _3080 = (fma(_2181, _2974.z, fma(_2180, _2974.y, _2974.x * _2179)) + _2974.w) / _3020;
                                float _3084 = 1.0 - dot(vec2(_3079, _3080), vec2(_3079, _3080));
                                float _4074 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3086 = _3085 * (((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3062) / ((_3075 * 0.699999988079071044921875) + 1.0));
                                float _3098 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                                float _3099 = 1.0 - _867;
                                float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                                float _3107 = _3106 * _3106;
                                float _3108 = _3107 * _3107;
                                float _3109 = _3055 - _2486;
                                float _3110 = _3056 - _2487;
                                float _3111 = _3057 - _2488;
                                float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                                float _3119 = dot(vec3(_806, _809, _812), vec3((-0.0) - _2486, (-0.0) - _2487, (-0.0) - _2488));
                                float _4085 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3122 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3123 = dot(vec3(_806, _809, _812), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                                float _4096 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3126 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                                float _3131 = _3068 * _3107;
                                float _3132 = _3131 * _3131;
                                float _3138 = ((1.0 - _3132) * dot(vec3(_806, _809, _812), vec3(_3055, _3056, _3057))) + _3132;
                                float _4107 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3140 = 1.0 - _3107;
                                float _3150 = (0.5 / (((_3139 * ((_3122 * _3140) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3139 * _3140) + _3107) * _3122))) * _3139;
                                float _4118 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3160 = (_3085 * _3062) * (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) / ((_3130 * _3130) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3086 * _2932.z;
                                frontier_phi_105_pred_1 = _3160 * _2944.x;
                                frontier_phi_105_pred_2 = _3160 * _2944.y;
                                frontier_phi_105_pred_3 = _3160 * _2944.z;
                                frontier_phi_105_pred_4 = _3086 * _2932.x;
                                frontier_phi_105_pred_5 = _3086 * _2932.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3169 = frontier_phi_105_pred;
                            _3164 = frontier_phi_105_pred_1;
                            _3165 = frontier_phi_105_pred_2;
                            _3166 = frontier_phi_105_pred_3;
                            _3167 = frontier_phi_105_pred_4;
                            _3168 = frontier_phi_105_pred_5;
                            _2874 = _3167 + _2887;
                            _2875 = _3168 + _2888;
                            _2876 = _3169 + _2889;
                            _2871 = _3164 + _2884;
                            _2872 = _3165 + _2885;
                            _2873 = _3166 + _2886;
                            if (_2891 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2891;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2874;
                        frontier_phi_99_pred_1 = _2873;
                        frontier_phi_99_pred_2 = _2872;
                        frontier_phi_99_pred_3 = _2871;
                        frontier_phi_99_pred_4 = _2876;
                        frontier_phi_99_pred_5 = _2875;
                    }
                    _2467 = frontier_phi_99_pred;
                    _2465 = frontier_phi_99_pred_1;
                    _2463 = frontier_phi_99_pred_2;
                    _2461 = frontier_phi_99_pred_3;
                    _2471 = frontier_phi_99_pred_4;
                    _2469 = frontier_phi_99_pred_5;
                    uint _2657 = _2656 + 1u;
                    if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2650 = _2461;
                        _2651 = _2463;
                        _2652 = _2465;
                        _2653 = _2467;
                        _2654 = _2469;
                        _2655 = _2471;
                        _2656 = _2657;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2471;
                frontier_phi_81_82_ladder_1 = _2467;
                frontier_phi_81_82_ladder_2 = _2465;
                frontier_phi_81_82_ladder_3 = _2463;
                frontier_phi_81_82_ladder_4 = _2461;
                frontier_phi_81_82_ladder_5 = _2469;
            }
            else
            {
                frontier_phi_81_82_ladder = _2326;
                frontier_phi_81_82_ladder_1 = _2322;
                frontier_phi_81_82_ladder_2 = _2320;
                frontier_phi_81_82_ladder_3 = _2318;
                frontier_phi_81_82_ladder_4 = _2316;
                frontier_phi_81_82_ladder_5 = _2324;
            }
            _2460 = frontier_phi_81_82_ladder_4;
            _2462 = frontier_phi_81_82_ladder_3;
            _2464 = frontier_phi_81_82_ladder_2;
            _2466 = frontier_phi_81_82_ladder_1;
            _2468 = frontier_phi_81_82_ladder_5;
            _2470 = frontier_phi_81_82_ladder;
        }
        float _2475 = isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0));
        _2238 = (_2475 * _2466) + _1965;
        _2240 = (_2475 * _2468) + _1966;
        _2242 = (_2475 * _2470) + _1967;
        _2244 = ((_2460 * 0.039999999105930328369140625) * _2475) + _2121;
        _2246 = ((_2462 * 0.039999999105930328369140625) * _2475) + _2122;
        _2248 = ((_2464 * 0.039999999105930328369140625) * _2475) + _2123;
    }
    else
    {
        _2238 = _1965;
        _2240 = _1966;
        _2242 = _1967;
        _2244 = _2121;
        _2246 = _2122;
        _2248 = _2123;
    }
    float _4134 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4145 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4156 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _2265 = ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2238 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _851))) + ((_2244 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1657)) * cbPerFrame._m0[3u].x);
    float _2266 = ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2240 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _851))) + ((_2246 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1657)) * cbPerFrame._m0[3u].x);
    float _2267 = ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2242 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _851))) + ((_2248 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1657)) * cbPerFrame._m0[3u].x);
    uint _2271 = _825 + 6u;
    float _2279 = _785 / cbSceneParam._m0[86u].x;
    float _2280 = _786 / cbSceneParam._m0[86u].y;
    vec4 _2294 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2279, _2280, (log2((isnan(cbSceneParam._m0[77u].w) ? _772 : (isnan(_772) ? cbSceneParam._m0[77u].w : min(_772, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2296 = _2294.x;
    float _2297 = _2294.y;
    float _2298 = _2294.z;
    float _2299 = _2294.w;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_772 > cbSceneParam._m0[78u].w)
    {
        float _2341 = isnan(_772) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _772 : min(cbSceneParam._m0[80u].w, _772));
        float _2342 = _2341 / _772;
        float _2353 = _2342 * _261;
        float _2354 = _262 * _2342;
        float _2355 = (-0.0) - _2354;
        float _2356 = _2342 * _263;
        float _2358 = (cbSceneParam._m0[77u].w * _2355) / _2341;
        float _2359 = _2358 + cbSceneParam._m0[79u].w;
        float _2360 = cbSceneParam._m0[79u].w - _2354;
        float _2366 = sqrt(((_2353 * _2353) + (_2354 * _2354)) + (_2356 * _2356));
        float _2369 = (1.0 - (cbSceneParam._m0[77u].w / _2341)) * _2366;
        float _2375 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2377 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2355 - _2358) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2359 > 0.0) ? exp2(_2375 * _2359) : (2.0 - exp2(_2377 * _2359))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2369;
        }
        else
        {
            float _2521 = 1.0 / cbSceneParam._m0[80u].x;
            float _2522 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : max(_2359, _2360));
            float _2523 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : min(_2359, _2360));
            float _2532 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : min(_2522, 0.0));
            float _2533 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : min(_2523, 0.0));
            _2586 = ((abs(_2366 / _2355) * cbSceneParam._m0[80u].y) * ((((_2532 - _2533) * 2.0) - ((exp2(_2375 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0)))) - exp2(_2375 * (isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0))))) * _2521)) - ((exp2(_2377 * _2532) - exp2(_2377 * _2533)) * _2521))) + (_2369 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2279, _2280, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2299);
        _2379 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2296;
        _2381 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2297;
        _2383 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2298;
        _2385 = _2597 * _2299;
    }
    else
    {
        _2379 = _2296;
        _2381 = _2297;
        _2383 = _2298;
        _2385 = _2299;
    }
    float _2397 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2398 = _2397 == 3.0;
    float _2399 = log2(_2385);
    float _2406 = exp2(_2399 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0)));
    float _2407 = exp2(_2399 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0)));
    float _2408 = exp2(_2399 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0)));
    float _2417 = (_2397 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2417 * (_2398 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.y = _2417 * (_2398 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.z = _2417 * (_2398 ? _2408 : (_2408 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.w = cbInstanceData._m0[_2271].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2271].w;
}


