#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1307;
float _3489;
float _3490;
float _3491;
float _3492;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    float _603 = (_593 * ((_549 - _474) - (_549 * _294))) + _474;
    float _604 = (_593 * ((_550 - _475) - (_550 * _294))) + _475;
    float _605 = (_593 * ((_551 - _476) - (_551 * _294))) + _476;
    float _619 = _397 * cbMtdParam._m0[21u].z;
    float _620 = _398 * cbMtdParam._m0[21u].y;
    bool _621 = _619 > 0.0;
    float _626;
    if (_621)
    {
        _626 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _626 = frontier_phi_27_26_ladder;
    }
    bool _628 = _620 > 0.0;
    float _633;
    if (_628)
    {
        _633 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _633 = frontier_phi_31_30_ladder;
    }
    float _636 = _418 ? (cbMtdParam._m0[18u].x / _396) : 5000.0;
    float _637 = isnan(_633) ? _626 : (isnan(_626) ? _633 : min(_626, _633));
    float _638 = isnan(_636) ? _637 : (isnan(_637) ? _636 : min(_637, _636));
    float _642 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _646 = ((_638 * _396) + _642) / _642;
    float _651 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _653 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _670 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_638 * _619)) / _646) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_638 * _620)) / _646) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _675 = _670.x * cbMtdParam._m0[14u].x;
    float _676 = _670.y * cbMtdParam._m0[14u].y;
    float _677 = _670.z * cbMtdParam._m0[14u].z;
    float _685;
    if (_621)
    {
        _685 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _685 = frontier_phi_35_34_ladder;
    }
    float _691;
    if (_628)
    {
        _691 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _691 = frontier_phi_39_38_ladder;
    }
    float _693 = isnan(_691) ? _685 : (isnan(_685) ? _691 : min(_685, _691));
    float _694 = isnan(_636) ? _693 : (isnan(_693) ? _636 : min(_693, _636));
    float _701 = ((_694 * _396) + _642) / _642;
    vec4 _715 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_694 * _619)) / _701) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_694 * _620)) / _701) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _717 = _715.w;
    float _719 = _717 - (_717 * _294);
    float _730 = 0.5 - (_294 * 0.5);
    float _740 = (((_603 - _307) + (_719 * ((_675 - _603) - (_675 * _294)))) * _730) + _307;
    float _741 = (((_604 - _309) + (_719 * ((_676 - _604) - (_676 * _294)))) * _730) + _309;
    float _742 = (((_605 - _311) + (_719 * ((_677 - _605) - (_677 * _294)))) * _730) + _311;
    vec4 _754 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _758 = _754.z;
    float _761 = (_754.x * 2.0) + (-1.0);
    float _762 = (_754.y * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3551 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _769 = _758 * _294;
    float _776 = (cbMtdParam._m0[15u].w * ((_333 - _769) + ((_758 - _333) * _294))) + _769;
    float _780 = (cbMtdParam._m0[16u].x * _361) + _761;
    float _781 = (cbMtdParam._m0[16u].x * _362) + _762;
    float _784 = fma(_768, _203, fma(_781, _210, _780 * _196));
    float _787 = fma(_768, _204, fma(_781, _211, _780 * _197));
    float _790 = fma(_768, _205, fma(_781, _212, _780 * _198));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _3562 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _798 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3584 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3595 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _817 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _822 = _267 * _821;
    float _823 = _268 * _821;
    float _824 = _269 * _821;
    vec4 _829 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _831 = _829.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _988 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _994 = (cbMatDynParam._m0[5u].x * _988) + cbMatDynParam._m0[5u].y;
        float _3606 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _999 = (cbMatDynParam._m0[5u].z * _988) + cbMatDynParam._m0[5u].w;
        float _3617 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) - _995)) + _995) < ((_831 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _866 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _869 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    uint _882 = uint(roundEven(NORMAL.w)) * 13u;
    uint _884 = _882 + 9u;
    uint _885 = _884 + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_885].z;
    float _3628 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    vec4 _905 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _908 = _905.x * TEXCOORD.z;
    float _909 = dot(vec3(_795, _796, _797), vec3(_822, _823, _824));
    float _912 = _909 * 2.0;
    float _916 = (_912 * _795) - _822;
    float _917 = (_912 * _796) - _823;
    float _918 = (_912 * _797) - _824;
    float _922 = abs(dot(vec3(_822, _823, _824), vec3(_795, _796, _797)));
    float _3661 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _924 = sqrt(_798);
    float _937 = exp2((_924 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1306;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1033 = fma(_977, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969));
        float _1037 = fma(_977, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969));
        float _1041 = fma(_977, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969));
        float _1064 = _969 + _795;
        float _1065 = _973 + _796;
        float _1066 = _977 + _797;
        float _1076 = fma(_1066, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064)) - _1033;
        float _1077 = fma(_1066, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064)) - _1037;
        float _1078 = fma(_1066, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064)) - _1041;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1033 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1037 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[34u].z) + ((((((_1041 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1134 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1100.x + (-0.5));
        float _1136 = _1134 * (_1100.y + (-0.5));
        float _1137 = _1134 * (_1100.z + (-0.5));
        float _1144 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1107.x + (-0.5));
        float _1146 = _1144 * (_1107.y + (-0.5));
        float _1147 = _1144 * (_1107.z + (-0.5));
        float _1154 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1114.x + (-0.5));
        float _1156 = _1154 * (_1114.y + (-0.5));
        float _1157 = _1154 * (_1114.z + (-0.5));
        float _1164 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1121.x + (-0.5));
        float _1166 = _1164 * (_1121.y + (-0.5));
        float _1167 = _1164 * (_1121.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1188 = (dot(vec3(_795, _796, _797), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1198 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3709 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1200 + 1.0))) + _1205) * _1168;
        float _1215 = _1136 * 0.5;
        float _1216 = _1146 * 0.5;
        float _1217 = _1156 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_795, _796, _797), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3742 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1242 + 1.0))) + _1247) * _1169;
        float _1257 = _1137 * 0.5;
        float _1258 = _1147 * 0.5;
        float _1259 = _1157 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_795, _796, _797), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3775 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1284 + 1.0))) + _1289) * _1170;
        _1306 = _1137;
        _1308 = _1136;
        _1309 = _1135;
        _1310 = _1147;
        _1311 = _1146;
        _1312 = _1145;
        _1313 = _1157;
        _1314 = _1156;
        _1315 = _1155;
        _1316 = _1170;
        _1317 = _1169;
        _1318 = _1168;
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _1307;
        _1308 = _1307;
        _1309 = _1307;
        _1310 = _1307;
        _1311 = _1307;
        _1312 = _1307;
        _1313 = _1307;
        _1314 = _1307;
        _1315 = _1307;
        _1316 = _1307;
        _1317 = _1307;
        _1318 = _1307;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1350 = fma(_977, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969));
        float _1354 = fma(_977, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969));
        float _1358 = fma(_977, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969));
        float _1381 = _969 + _795;
        float _1382 = _973 + _796;
        float _1383 = _977 + _797;
        float _1393 = fma(_1383, cbModelParam._m0[30u].z, fma(_1382, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381)) - _1350;
        float _1394 = fma(_1383, cbModelParam._m0[31u].z, fma(_1382, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381)) - _1354;
        float _1395 = fma(_1383, cbModelParam._m0[32u].z, fma(_1382, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381)) - _1358;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1350 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1354 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[35u].z) + ((((((_1358 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1449 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1416.x + (-0.5));
        float _1451 = _1449 * (_1416.y + (-0.5));
        float _1452 = _1449 * (_1416.z + (-0.5));
        float _1459 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1423.x + (-0.5));
        float _1461 = _1459 * (_1423.y + (-0.5));
        float _1462 = _1459 * (_1423.z + (-0.5));
        float _1469 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1430.x + (-0.5));
        float _1471 = _1469 * (_1430.y + (-0.5));
        float _1472 = _1469 * (_1430.z + (-0.5));
        float _1479 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1437.x + (-0.5));
        float _1481 = _1479 * (_1437.y + (-0.5));
        float _1482 = _1479 * (_1437.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_795, _796, _797), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _3838 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1513 + 1.0))) + _1518) * _1483;
        float _1528 = _1451 * 0.5;
        float _1529 = _1461 * 0.5;
        float _1530 = _1471 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_795, _796, _797), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _3871 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1555 + 1.0))) + _1560) * _1484;
        float _1570 = _1452 * 0.5;
        float _1571 = _1462 * 0.5;
        float _1572 = _1472 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_795, _796, _797), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _3904 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1597 + 1.0))) + _1602) * _1485;
        _1619 = _1452;
        _1620 = _1451;
        _1621 = _1450;
        _1622 = _1462;
        _1623 = _1461;
        _1624 = _1460;
        _1625 = _1472;
        _1626 = _1471;
        _1627 = _1470;
        _1628 = _1485;
        _1629 = _1484;
        _1630 = _1483;
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1307;
        _1620 = _1307;
        _1621 = _1307;
        _1622 = _1307;
        _1623 = _1307;
        _1624 = _1307;
        _1625 = _1307;
        _1626 = _1307;
        _1627 = _1307;
        _1628 = _1307;
        _1629 = _1307;
        _1630 = _1307;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1319)) + _1319;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1320)) + _1320;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1321)) + _1321;
    float _1666 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1643));
    float _1687 = _916 * 0.5;
    float _1688 = _917 * 0.5;
    float _1689 = _918 * 0.5;
    float _1690 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1693 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1696 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1730;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1703 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1306, _1310, _1313, _1316));
        float _1707 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1711 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1718 = dot(vec4(cbModelParam._m0[39u]), vec4(_1687, _1688, _1689, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1741;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1732 = dot(vec4(cbModelParam._m0[40u]), vec4(_1687, _1688, _1689, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1745 = (_1741 * cbModelParam._m0[1u].x) + (_1730 * (1.0 - cbModelParam._m0[1u].x));
    float _1755 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _798);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1755 : min(cbModelParam._m0[25u].z, _1755));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_977, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_977, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_977, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_918, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916));
        float _1817 = fma(_918, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916));
        float _1820 = fma(_918, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1848 = frontier_phi_57_55_ladder;
        }
        float _2217;
        if (_1817 > 0.0)
        {
            _2217 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2217 = frontier_phi_66_62_ladder;
        }
        float _2525;
        if (_1820 > 0.0)
        {
            _2525 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2525 = frontier_phi_80_73_ladder;
        }
        float _2527 = isnan(_2217) ? _1848 : (isnan(_1848) ? _2217 : min(_1848, _2217));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1814) + _1803;
        float _2533 = (_2528 * _1817) + _1807;
        float _2534 = (_2528 * _1820) + _1811;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2534, cbModelParam._m0[9u].z, fma(_2533, cbModelParam._m0[9u].y, _2532 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2534, cbModelParam._m0[10u].z, fma(_2533, cbModelParam._m0[10u].y, _2532 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2534, cbModelParam._m0[11u].z, fma(_2533, cbModelParam._m0[11u].y, _2532 * cbModelParam._m0[11u].x))), _1756);
            frontier_phi_56_80_ladder = _2676.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2676.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2676.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_56_80_ladder_2;
        _1838 = frontier_phi_56_80_ladder_1;
        _1840 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_916, _917, _918), _1756);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _798);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_977, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_977, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_977, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_918, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916));
        float _1911 = fma(_918, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916));
        float _1914 = fma(_918, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916));
        float _2222;
        if (_1908 > 0.0)
        {
            _2222 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2222 = frontier_phi_68_64_ladder;
        }
        float _2551;
        if (_1911 > 0.0)
        {
            _2551 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2551 = frontier_phi_82_75_ladder;
        }
        float _2741;
        if (_1914 > 0.0)
        {
            _2741 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2741 = frontier_phi_100_93_ladder;
        }
        float _2743 = isnan(_2551) ? _2222 : (isnan(_2222) ? _2551 : min(_2222, _2551));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _1908) + _1897;
        float _2749 = (_2744 * _1911) + _1901;
        float _2750 = (_2744 * _1914) + _1905;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_65_100_ladder = _2992.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2992.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2992.z * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_65_100_ladder_1;
        _1935 = frontier_phi_65_100_ladder;
        _1937 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_916, _917, _918), _1845);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1949 = ((((1.0 - _937) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_937 * _924)) * _908;
    float _1950 = _1949 * ((cbModelParam._m0[1u].w * (_1933 - _1836)) + _1836);
    float _1951 = _1949 * ((cbModelParam._m0[1u].w * (_1935 - _1838)) + _1838);
    float _1952 = _1949 * ((cbModelParam._m0[1u].w * (_1937 - _1840)) + _1840);
    float _1955 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    vec4 _1969 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_844, _845));
    float _1971 = _1969.w;
    float _1983 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1971);
    float _1984 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1971);
    float _1985 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1971);
    uvec4 _1989 = floatBitsToUint(cbInstanceData._m0[_882 + 5u]);
    uint _1991 = _1989.x * 14u;
    uint _1992 = _1991 + 13u;
    float _1997 = _908 + (-1.0);
    float _2000 = (cbLight._m0[_1992].x * _1997) + 1.0;
    float _2001 = (cbLight._m0[_1992].y * _1997) + 1.0;
    uint _2002 = _1991 + 5u;
    float _2008 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2012 = _1991 + 4u;
    float _2021 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2025 = _1991 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_795, _796, _797));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_795, _796, _797));
    float _4040 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4051 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2002].x * _2008) * _2046) + (((cbLight._m0[_2012].x * _1983) * _2021) * _2044);
    float _2054 = ((_2008 * cbLight._m0[_2002].y) * _2046) + (((cbLight._m0[_2012].y * _1984) * _2021) * _2044);
    float _2055 = ((_2008 * cbLight._m0[_2002].z) * _2046) + (((cbLight._m0[_2012].z * _1985) * _2021) * _2044);
    uint _2057 = _1991 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _798) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1991].x + _822;
    float _2073 = cbLight._m0[_1991].y + _823;
    float _2074 = cbLight._m0[_1991].z + _824;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_1991].xyz));
    float _4062 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2086 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2087 = dot(vec3(_795, _796, _797), vec3(_2079, _2080, _2081));
    float _4084 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2079, _2080, _2081));
    float _4095 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2071;
    float _2122 = (0.5 / (((_2086 * ((_2085 * _2111) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2111) + _2071) * _2085))) * _2085;
    float _4106 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2138 = _1991 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _798) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_2025].x + _822;
    float _2152 = cbLight._m0[_2025].y + _823;
    float _2153 = cbLight._m0[_2025].z + _824;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2025].xyz));
    float _4117 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2165 = dot(vec3(_795, _796, _797), vec3(_2158, _2159, _2160));
    float _4128 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2158, _2159, _2160));
    float _4139 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2150;
    float _2197 = (0.5 / (((_2086 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2187) + _2150) * _2164))) * _2164;
    float _4150 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2209 = (((_2186 * cbLight._m0[_2138].x) * _2199) * _2008) + ((((cbLight._m0[_2057].x * _1983) * _2110) * _2124) * _2021);
    float _2210 = (((_2186 * cbLight._m0[_2138].y) * _2199) * _2008) + ((((cbLight._m0[_2057].y * _1984) * _2110) * _2124) * _2021);
    float _2211 = (((_2186 * cbLight._m0[_2138].z) * _2199) * _2008) + ((((cbLight._m0[_2057].z * _1985) * _2110) * _2124) * _2021);
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    if (_1989.y == 0u)
    {
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2266;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2266;
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2266;
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.x;
        uint _2293 = uint((float(_2281.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2282))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2282)));
        float _2303 = (log2(_2269 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2304 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        uint _2307 = uint(isnan(14.0) ? _2304 : (isnan(_2304) ? 14.0 : min(_2304, 14.0)));
        uvec4 _2312 = texelFetch(g_lightClusterGridBuffer, int(((_2307 << 2u) + (_2293 << 6u)) >> 2u));
        uint _2313 = _2312.x;
        uint _2314 = _2281.z;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((((1u << ((_2314 >> 4u) & 15u)) + 4294967295u) & _2313) == 0u) || ((_2314 & 240u) == 0u))
        {
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
        }
        else
        {
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2604)
                {
                    frontier_phi_95_pred = _2589;
                    frontier_phi_95_pred_1 = _2588;
                    frontier_phi_95_pred_2 = _2590;
                    frontier_phi_95_pred_3 = _2593;
                    frontier_phi_95_pred_4 = _2592;
                    frontier_phi_95_pred_5 = _2591;
                }
                else
                {
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    uint _2790;
                    _2784 = _2588;
                    _2785 = _2589;
                    _2786 = _2590;
                    _2787 = _2591;
                    _2788 = _2592;
                    _2789 = _2593;
                    _2790 = _2603;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    for (;;)
                    {
                        uint _2794 = uint(findLSB(_2790)) + (_2594 << 5u);
                        uint _2791 = (_2790 + 4294967295u) & _2790;
                        uint _2796 = _2794 * 48u;
                        vec4 _2810 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 3u)).x));
                        uint _2816 = (_2794 * 48u) + 4u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2835 = (_2794 * 48u) + 8u;
                        vec3 _2846 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x));
                        float _2850 = _2810.x - _2267;
                        float _2851 = _2810.y - _2268;
                        float _2852 = _2810.z - _2269;
                        float _2853 = dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852));
                        float _2856 = inversesqrt(_2853);
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2860 = dot(vec3(_863, _866, _869), vec3(_2857, _2858, _2859));
                        float _2865 = 1.0 - (_2853 * _2810.w);
                        float _4171 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2866 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2867 = sqrt(_2853) * _2829.w;
                        float _2870 = 1.39999997615814208984375 / (_2867 + 1.39999997615814208984375);
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2860) + _2871;
                        float _2877 = _2867 * _2867;
                        float _2881 = ((isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))) * _2866) / ((_2877 * 0.699999988079071044921875) + 1.0);
                        float _2885 = (-0.0) - _2267;
                        float _2886 = (-0.0) - _2268;
                        float _2887 = (-0.0) - _2269;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2902 = exp2(log2(1.0 / ((_2877 * 3.5) + 5.0)) * 0.25);
                        float _2903 = 1.0 - _924;
                        float _2910 = sqrt(1.0 - ((1.0 - (_2903 * _2903)) * (1.0 - (_2902 * _2902))));
                        float _2911 = _2910 * _2910;
                        float _2912 = _2911 * _2911;
                        float _2913 = _2892 + _2857;
                        float _2914 = _2893 + _2858;
                        float _2915 = _2894 + _2859;
                        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
                        float _2923 = dot(vec3(_863, _866, _869), vec3(_2892, _2893, _2894));
                        float _4187 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2926 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2927 = dot(vec3(_863, _866, _869), vec3(_2919 * _2913, _2919 * _2914, _2919 * _2915));
                        float _4198 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2934 = ((_2930 * _2930) * (_2912 + (-1.0))) + 1.0;
                        float _2935 = _2870 * _2911;
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2860) + _2936;
                        float _4209 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2941 = 1.0 - _2911;
                        float _2951 = (0.5 / (((_2940 * ((_2926 * _2941) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2940 * _2941) + _2911) * _2926))) * _2940;
                        float _4220 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2962 = (((_2912 * 3.1415927410125732421875) * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) / ((_2934 * _2934) * ((_2877 * 2.1991131305694580078125) + 3.141590118408203125))) * _2866;
                        _2688 = (_2881 * _2829.x) + _2787;
                        _2689 = (_2881 * _2829.y) + _2788;
                        _2690 = (_2881 * _2829.z) + _2789;
                        _2685 = (_2962 * _2846.x) + _2784;
                        _2686 = (_2962 * _2846.y) + _2785;
                        _2687 = (_2962 * _2846.z) + _2786;
                        if (_2791 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2784 = _2685;
                            _2785 = _2686;
                            _2786 = _2687;
                            _2787 = _2688;
                            _2788 = _2689;
                            _2789 = _2690;
                            _2790 = _2791;
                        }
                    }
                    frontier_phi_95_pred = _2686;
                    frontier_phi_95_pred_1 = _2685;
                    frontier_phi_95_pred_2 = _2687;
                    frontier_phi_95_pred_3 = _2690;
                    frontier_phi_95_pred_4 = _2689;
                    frontier_phi_95_pred_5 = _2688;
                }
                _2407 = frontier_phi_95_pred;
                _2405 = frontier_phi_95_pred_1;
                _2409 = frontier_phi_95_pred_2;
                _2415 = frontier_phi_95_pred_3;
                _2413 = frontier_phi_95_pred_4;
                _2411 = frontier_phi_95_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2405;
                    _2589 = _2407;
                    _2590 = _2409;
                    _2591 = _2411;
                    _2592 = _2413;
                    _2593 = _2415;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
        }
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.z;
        uint _2421 = (_2419 >> 8u) & 15u;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((4294967295u << _2421) & _2313) == 0u)
        {
            _2556 = _2404;
            _2558 = _2406;
            _2560 = _2408;
            _2562 = _2410;
            _2564 = _2412;
            _2566 = _2414;
        }
        else
        {
            float _2581 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
            float _2582 = _2581 * _2267;
            float _2583 = _2581 * _2268;
            float _2584 = _2581 * _2269;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2421 < ((_2419 >> 12u) & 15u))
            {
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2767 = _2404;
                float _2768 = _2406;
                float _2769 = _2408;
                float _2770 = _2410;
                float _2771 = _2412;
                float _2772 = _2414;
                uint _2773 = _2421;
                uint _2782;
                bool _2783;
                for (;;)
                {
                    _2782 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                    _2783 = _2782 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2783)
                    {
                        frontier_phi_109_pred = _2768;
                        frontier_phi_109_pred_1 = _2767;
                        frontier_phi_109_pred_2 = _2772;
                        frontier_phi_109_pred_3 = _2771;
                        frontier_phi_109_pred_4 = _2770;
                        frontier_phi_109_pred_5 = _2769;
                    }
                    else
                    {
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3010 = _2767;
                        float _3011 = _2768;
                        float _3012 = _2769;
                        float _3013 = _2770;
                        float _3014 = _2771;
                        float _3015 = _2772;
                        uint _3016 = _2782;
                        uint _3017;
                        vec4 _3042;
                        float _3043;
                        vec4 _3058;
                        vec3 _3070;
                        vec4 _3085;
                        vec4 _3100;
                        float _3146;
                        bool _3147;
                        for (;;)
                        {
                            uint _3027 = ((_2773 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3016));
                            _3017 = (_3016 + 4294967295u) & _3016;
                            uint _3029 = _3027 * 40u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3043 = _3042.w;
                            uint _3045 = (_3027 * 40u) + 4u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_3027 * 40u) + 8u;
                            _3070 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x));
                            uint _3072 = (_3027 * 40u) + 16u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3027 * 40u) + 20u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3027 * 40u) + 24u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3121 = (_3027 * 40u) + 28u;
                            vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            _3146 = fma(_2269, _3134.z, fma(_2268, _3134.y, _3134.x * _2267)) + _3134.w;
                            _3147 = !((fma(_2269, _3115.z, fma(_2268, _3115.y, _3115.x * _2267)) + _3115.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3147)
                            {
                                float _3174 = _3042.x - _2267;
                                float _3175 = _3042.y - _2268;
                                float _3176 = _3042.z - _2269;
                                float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                                float _3180 = inversesqrt(_3177);
                                float _3181 = _3180 * _3174;
                                float _3182 = _3180 * _3175;
                                float _3183 = _3180 * _3176;
                                float _3187 = 1.0 - (_3177 / (_3043 * _3043));
                                float _4231 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3192 = sqrt(_3177) * _3058.w;
                                float _3194 = 1.39999997615814208984375 / (_3192 + 1.39999997615814208984375);
                                float _3195 = _3194 * _3194;
                                float _3198 = ((1.0 - _3195) * dot(vec3(_3181, _3182, _3183), vec3(_863, _866, _869))) + _3195;
                                float _3201 = _3192 * _3192;
                                float _3205 = (fma(_2269, _3085.z, fma(_2268, _3085.y, _3085.x * _2267)) + _3085.w) / _3146;
                                float _3206 = (fma(_2269, _3100.z, fma(_2268, _3100.y, _3100.x * _2267)) + _3100.w) / _3146;
                                float _3210 = 1.0 - dot(vec2(_3205, _3206), vec2(_3205, _3206));
                                float _4247 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3212 = _3211 * (((isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))) * _3188) / ((_3201 * 0.699999988079071044921875) + 1.0));
                                float _3224 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                                float _3225 = 1.0 - _924;
                                float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                                float _3233 = _3232 * _3232;
                                float _3234 = _3233 * _3233;
                                float _3235 = _3181 - _2582;
                                float _3236 = _3182 - _2583;
                                float _3237 = _3183 - _2584;
                                float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                                float _3245 = dot(vec3(_863, _866, _869), vec3((-0.0) - _2582, (-0.0) - _2583, (-0.0) - _2584));
                                float _4258 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3249 = dot(vec3(_863, _866, _869), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                                float _4269 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                                float _3257 = _3194 * _3233;
                                float _3258 = _3257 * _3257;
                                float _3264 = ((1.0 - _3258) * dot(vec3(_863, _866, _869), vec3(_3181, _3182, _3183))) + _3258;
                                float _4280 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3266 = 1.0 - _3233;
                                float _3276 = (0.5 / (((_3265 * ((_3248 * _3266) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3265 * _3266) + _3233) * _3248))) * _3265;
                                float _4291 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3286 = (_3211 * _3188) * (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) / ((_3256 * _3256) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3212 * _3058.y;
                                frontier_phi_115_pred_1 = _3212 * _3058.x;
                                frontier_phi_115_pred_2 = _3286 * _3070.z;
                                frontier_phi_115_pred_3 = _3286 * _3070.y;
                                frontier_phi_115_pred_4 = _3286 * _3070.x;
                                frontier_phi_115_pred_5 = _3212 * _3058.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3294 = frontier_phi_115_pred;
                            _3293 = frontier_phi_115_pred_1;
                            _3292 = frontier_phi_115_pred_2;
                            _3291 = frontier_phi_115_pred_3;
                            _3290 = frontier_phi_115_pred_4;
                            _3295 = frontier_phi_115_pred_5;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            _3002 = _3295 + _3015;
                            _2997 = _3290 + _3010;
                            _2998 = _3291 + _3011;
                            _2999 = _3292 + _3012;
                            if (_3017 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3017;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2998;
                        frontier_phi_109_pred_1 = _2997;
                        frontier_phi_109_pred_2 = _3002;
                        frontier_phi_109_pred_3 = _3001;
                        frontier_phi_109_pred_4 = _3000;
                        frontier_phi_109_pred_5 = _2999;
                    }
                    _2559 = frontier_phi_109_pred;
                    _2557 = frontier_phi_109_pred_1;
                    _2567 = frontier_phi_109_pred_2;
                    _2565 = frontier_phi_109_pred_3;
                    _2563 = frontier_phi_109_pred_4;
                    _2561 = frontier_phi_109_pred_5;
                    uint _2774 = _2773 + 1u;
                    if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2767 = _2557;
                        _2768 = _2559;
                        _2769 = _2561;
                        _2770 = _2563;
                        _2771 = _2565;
                        _2772 = _2567;
                        _2773 = _2774;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2557;
                frontier_phi_84_85_ladder_1 = _2561;
                frontier_phi_84_85_ladder_2 = _2567;
                frontier_phi_84_85_ladder_3 = _2565;
                frontier_phi_84_85_ladder_4 = _2563;
                frontier_phi_84_85_ladder_5 = _2559;
            }
            else
            {
                frontier_phi_84_85_ladder = _2404;
                frontier_phi_84_85_ladder_1 = _2408;
                frontier_phi_84_85_ladder_2 = _2414;
                frontier_phi_84_85_ladder_3 = _2412;
                frontier_phi_84_85_ladder_4 = _2410;
                frontier_phi_84_85_ladder_5 = _2406;
            }
            _2556 = frontier_phi_84_85_ladder;
            _2558 = frontier_phi_84_85_ladder_5;
            _2560 = frontier_phi_84_85_ladder_1;
            _2562 = frontier_phi_84_85_ladder_4;
            _2564 = frontier_phi_84_85_ladder_3;
            _2566 = frontier_phi_84_85_ladder_2;
        }
        float _2571 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
        _2326 = (_2571 * _2562) + _2053;
        _2328 = (_2571 * _2564) + _2054;
        _2330 = (_2571 * _2566) + _2055;
        _2332 = ((_2556 * 0.039999999105930328369140625) * _2571) + _2209;
        _2334 = ((_2558 * 0.039999999105930328369140625) * _2571) + _2210;
        _2336 = ((_2560 * 0.039999999105930328369140625) * _2571) + _2211;
    }
    else
    {
        _2326 = _2053;
        _2328 = _2054;
        _2330 = _2055;
        _2332 = _2209;
        _2334 = _2210;
        _2336 = _2211;
    }
    float _4307 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4318 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4329 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2353 = ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2326 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _908))) + ((_2332 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2354 = ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2328 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _908))) + ((_2334 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2355 = ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2330 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _908))) + ((_2336 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2356 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2358 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    uint _2359 = _882 + 6u;
    float _2367 = _844 / cbSceneParam._m0[86u].x;
    float _2368 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2382 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2367, _2368, (log2((isnan(cbSceneParam._m0[77u].w) ? _817 : (isnan(_817) ? cbSceneParam._m0[77u].w : min(_817, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2384 = _2382.x;
    float _2385 = _2382.y;
    float _2386 = _2382.z;
    float _2387 = _2382.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_817 > cbSceneParam._m0[78u].w)
    {
        float _2429 = isnan(_817) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _817 : min(cbSceneParam._m0[80u].w, _817));
        float _2430 = _2429 / _817;
        float _2441 = _2430 * _267;
        float _2442 = _268 * _2430;
        float _2443 = (-0.0) - _2442;
        float _2444 = _2430 * _269;
        float _2446 = (cbSceneParam._m0[77u].w * _2443) / _2429;
        float _2447 = _2446 + cbSceneParam._m0[79u].w;
        float _2448 = cbSceneParam._m0[79u].w - _2442;
        float _2454 = sqrt(((_2441 * _2441) + (_2442 * _2442)) + (_2444 * _2444));
        float _2457 = (1.0 - (cbSceneParam._m0[77u].w / _2429)) * _2454;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2698;
        if (abs((_2443 - _2446) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2698 = ((((_2447 > 0.0) ? exp2(_2463 * _2447) : (2.0 - exp2(_2465 * _2447))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2457;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : max(_2447, _2448));
            float _2619 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : min(_2447, _2448));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2698 = ((abs(_2454 / _2443) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2465 * _2628) - exp2(_2465 * _2629)) * _2617))) + (_2457 * cbSceneParam._m0[80u].z);
        }
        vec4 _2700 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2367, _2368, 1.0), 0.0);
        float _2709 = exp2((_2698 * (-1.44269502162933349609375)) * (1.0 - _2700.w));
        float _2710 = log2(_2709);
        float _2726 = log2(_2387);
        _2467 = (exp2(_2726 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].x)) * _2700.x) / cbSceneParam._m0[78u].x)) + _2384;
        _2469 = (exp2(_2726 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].y)) * _2700.y) / cbSceneParam._m0[78u].y)) + _2385;
        _2471 = (exp2(_2726 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].z)) * _2700.z) / cbSceneParam._m0[78u].z)) + _2386;
        _2473 = _2709 * _2387;
    }
    else
    {
        _2467 = _2384;
        _2469 = _2385;
        _2471 = _2386;
        _2473 = _2387;
    }
    bool _2736;
    vec4 _2483;
    vec4 _2505;
    float _2507;
    float _2511;
    float _2512;
    float _2513;
    float _2514;
    bool _2524;
    for (;;)
    {
        _2483 = cbMatDynParam._m0[0u];
        float _2485 = roundEven(_2483.y);
        bool _2486 = _2485 == 3.0;
        float _2487 = log2(_2473);
        float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * _2356;
        float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * _2357;
        float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * _2358;
        float _2503 = _831 + (-0.5);
        _2505 = cbMtdParam._m0[1u];
        _2507 = _2505.y * _2503;
        float _2510 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2511 = _2510 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
        _2512 = _2510 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
        _2513 = _2510 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
        _2514 = _2503 * 0.999000012874603271484375;
        _2524 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2524)
        {
            if ((cbInstanceData._m0[_882 + 7u].x + _2514) < 0.5)
            {
                _2736 = true;
                break;
            }
        }
        uint _2652 = _884 + uint(_2483.w);
        if ((cbInstanceData._m0[_2652].w < 1.0) && ((cbInstanceData._m0[_2652].w + _2514) < 0.5))
        {
            _2736 = true;
            break;
        }
        if ((_2507 + 1.0) < _2505.x)
        {
            _2736 = true;
            break;
        }
        _2736 = false;
        break;
    }
    float _2967;
    if (_2736)
    {
        discard_state = true;
        _2967 = 0.0;
    }
    else
    {
        _2967 = cbInstanceData._m0[_2359].w;
    }
    SV_Target.x = _2511;
    SV_Target.y = _2512;
    SV_Target.z = _2513;
    SV_Target.w = _2967;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2359].w;
    discard_exit();
}


