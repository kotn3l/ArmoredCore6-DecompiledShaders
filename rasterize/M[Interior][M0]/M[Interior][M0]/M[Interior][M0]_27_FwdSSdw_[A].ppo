#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _428;
float _3237;
float _3238;
float _3239;
float _3240;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _343 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _359 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _366 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _375 = cbMtdParam._m0[23u].x + _263;
    float _376 = cbMtdParam._m0[23u].y + _264;
    float _377 = cbMtdParam._m0[23u].z + _265;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_359 * _192, _359 * _193, _359 * _194));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_366 * _206, _366 * _207, _366 * _208));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _397 * _393;
    float _403 = ((cbMtdParam._m0[19u].w * _391) * _397) + (_351 * cbMtdParam._m0[20u].y);
    float _404 = ((cbMtdParam._m0[20u].x * _392) * _397) + (_353 * cbMtdParam._m0[20u].z);
    float _407 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _408 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _426;
    float _429;
    float _431;
    if (_403 > 0.0)
    {
        float _412 = (1.0 - _407) / _403;
        _426 = _412;
        _429 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_412 * _398)) * 0.16666667163372039794921875;
        _431 = (fract((_412 * _404) + _408) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_403 < 0.0)
        {
            float _427 = ((-0.0) - _407) / _403;
            frontier_phi_3_2_ladder = _427;
            frontier_phi_3_2_ladder_1 = (fract((_427 * _404) + _408) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_427 * _398) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _428;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _426 = frontier_phi_3_2_ladder;
        _429 = frontier_phi_3_2_ladder_2;
        _431 = frontier_phi_3_2_ladder_1;
    }
    float _457;
    float _459;
    float _461;
    if (_404 > 0.0)
    {
        float _444 = (1.0 - _408) / _404;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_444 < _426)
        {
            frontier_phi_8_5_ladder = (fract(_444 * _398) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_444 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _444;
        }
        else
        {
            frontier_phi_8_5_ladder = _431;
            frontier_phi_8_5_ladder_1 = _429;
            frontier_phi_8_5_ladder_2 = _426;
        }
        _457 = frontier_phi_8_5_ladder_2;
        _459 = frontier_phi_8_5_ladder_1;
        _461 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_404 < 0.0)
        {
            float _458 = ((-0.0) - _408) / _404;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_458 < _426)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_458 * _398) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_458 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _458;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _431;
                frontier_phi_8_6_ladder_9_ladder_1 = _429;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _431;
            frontier_phi_8_6_ladder_1 = _429;
            frontier_phi_8_6_ladder_2 = _426;
        }
        _457 = frontier_phi_8_6_ladder_2;
        _459 = frontier_phi_8_6_ladder_1;
        _461 = frontier_phi_8_6_ladder;
    }
    float _465 = (_398 > 0.0) ? (cbMtdParam._m0[16u].w / _398) : 5000.0;
    float _478;
    float _479;
    if (_465 < _457)
    {
        _478 = ((_407 + cbMtdParam._m0[17u].x) + (_465 * _403)) * 0.16666667163372039794921875;
        _479 = (((_465 * _404) + _408) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _478 = _459;
        _479 = _461;
    }
    vec4 _481 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_478, _479));
    float _486 = _481.x * cbMtdParam._m0[13u].x;
    float _487 = _481.y * cbMtdParam._m0[13u].y;
    float _488 = _481.z * cbMtdParam._m0[13u].z;
    float _493 = 0.5 - (_290 * 0.5);
    float _503 = (((_486 - _303) - (_486 * _290)) * _493) + _303;
    float _504 = (((_487 - _305) - (_487 * _290)) * _493) + _305;
    float _505 = (((_488 - _307) - (_488 * _290)) * _493) + _307;
    vec4 _517 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _521 = _517.z;
    float _524 = (_517.x * 2.0) + (-1.0);
    float _525 = (_517.y * 2.0) + (-1.0);
    float _526 = dot(vec2(_524, _525), vec2(_524, _525));
    float _3249 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))));
    float _532 = _521 * _290;
    float _542 = (cbMtdParam._m0[15u].w * ((_347 - _532) + ((_521 - _347) * _290))) + _532;
    float _550 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _290))) + _524;
    float _551 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _290))) + _525;
    float _554 = fma(_531, _199, fma(_551, _206, _550 * _192));
    float _557 = fma(_531, _200, fma(_551, _207, _550 * _193));
    float _560 = fma(_531, _201, fma(_551, _208, _550 * _194));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    float _565 = _564 * _554;
    float _566 = _564 * _557;
    float _567 = _564 * _560;
    float _3260 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _568 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3282 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3293 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _591 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _592 = _263 * _591;
    float _593 = _264 * _591;
    float _594 = _265 * _591;
    vec4 _599 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _601 = _599.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _763 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _769 = (cbMatDynParam._m0[5u].x * _763) + cbMatDynParam._m0[5u].y;
        float _3304 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _774 = (cbMatDynParam._m0[5u].z * _763) + cbMatDynParam._m0[5u].w;
        float _3315 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) - _770)) + _770) < ((_601 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_567, cbSceneParam._m0[5u].z, fma(_566, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _565));
    float _642 = fma(_567, cbSceneParam._m0[6u].z, fma(_566, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _565));
    float _645 = fma(_567, cbSceneParam._m0[7u].z, fma(_566, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _565));
    uint _658 = uint(roundEven(NORMAL.w)) * 13u;
    uint _659 = _658 + 9u;
    uint _660 = _659 + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3326 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _3337 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _683 = _680.x * TEXCOORD.z;
    float _684 = dot(vec3(_565, _566, _567), vec3(_592, _593, _594));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _565) - _592;
    float _692 = (_687 * _566) - _593;
    float _693 = (_687 * _567) - _594;
    float _697 = abs(dot(vec3(_592, _593, _594), vec3(_565, _566, _567)));
    float _3359 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_568);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _812 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _816 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _840 = _744 + _565;
        float _841 = _748 + _566;
        float _842 = _752 + _567;
        float _852 = fma(_842, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840)) - _808;
        float _853 = fma(_842, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840)) - _812;
        float _854 = fma(_842, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840)) - _816;
        float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
        float _871 = ((_858 * _852) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_858 * _853) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_858 * _854) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        float _910 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_876.x + (-0.5));
        float _912 = _910 * (_876.y + (-0.5));
        float _913 = _910 * (_876.z + (-0.5));
        float _920 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_883.x + (-0.5));
        float _922 = _920 * (_883.y + (-0.5));
        float _923 = _920 * (_883.z + (-0.5));
        float _930 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_890.x + (-0.5));
        float _932 = _930 * (_890.y + (-0.5));
        float _933 = _930 * (_890.z + (-0.5));
        float _940 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_897.x + (-0.5));
        float _942 = _940 * (_897.y + (-0.5));
        float _943 = _940 * (_897.z + (-0.5));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = _911 * 0.5;
        float _948 = _921 * 0.5;
        float _949 = _931 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _964 = (dot(vec3(_565, _566, _567), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _974 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3407 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_976 + 1.0))) + _981) * _944;
        float _991 = _912 * 0.5;
        float _992 = _922 * 0.5;
        float _993 = _932 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_565, _566, _567), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3440 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1018 + 1.0))) + _1023) * _945;
        float _1033 = _913 * 0.5;
        float _1034 = _923 * 0.5;
        float _1035 = _933 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_565, _566, _567), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3473 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_1060 + 1.0))) + _1065) * _946;
        _1082 = _913;
        _1083 = _912;
        _1084 = _911;
        _1085 = _923;
        _1086 = _922;
        _1087 = _921;
        _1088 = _933;
        _1089 = _932;
        _1090 = _931;
        _1091 = _946;
        _1092 = _945;
        _1093 = _944;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
    }
    else
    {
        _1082 = _428;
        _1083 = _428;
        _1084 = _428;
        _1085 = _428;
        _1086 = _428;
        _1087 = _428;
        _1088 = _428;
        _1089 = _428;
        _1090 = _428;
        _1091 = _428;
        _1092 = _428;
        _1093 = _428;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1129 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1133 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1156 = _744 + _565;
        float _1157 = _748 + _566;
        float _1158 = _752 + _567;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_565, _566, _567), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3536 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_565, _566, _567), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3569 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_565, _566, _567), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3602 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _428;
        _1395 = _428;
        _1396 = _428;
        _1397 = _428;
        _1398 = _428;
        _1399 = _428;
        _1400 = _428;
        _1401 = _428;
        _1402 = _428;
        _1403 = _428;
        _1404 = _428;
        _1405 = _428;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1095)) + _1095;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _691 * 0.5;
    float _1463 = _692 * 0.5;
    float _1464 = _693 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _568);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1579 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1583 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1587 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1590 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1593 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1596 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1624;
        if (_1590 > 0.0)
        {
            _1624 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1624 = frontier_phi_29_27_ladder;
        }
        float _1997;
        if (_1593 > 0.0)
        {
            _1997 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1997 = frontier_phi_38_34_ladder;
        }
        float _2305;
        if (_1596 > 0.0)
        {
            _2305 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2305 = frontier_phi_52_45_ladder;
        }
        float _2307 = isnan(_1997) ? _1624 : (isnan(_1624) ? _1997 : min(_1624, _1997));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1590) + _1579;
        float _2313 = (_2308 * _1593) + _1583;
        float _2314 = (_2308 * _1596) + _1587;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2315;
        float _2318 = _2315 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2314 > _2318) || ((_2314 < _2316) || ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 < _2316) || (_2312 > _2318))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_28_52_ladder = _2456.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2456.x * cbModelParam._m0[1u].y;
        }
        _1612 = frontier_phi_28_52_ladder_2;
        _1614 = frontier_phi_28_52_ladder_1;
        _1616 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1531);
        _1612 = _1600.x * cbModelParam._m0[1u].y;
        _1614 = _1600.y * cbModelParam._m0[1u].y;
        _1616 = _1600.z * cbModelParam._m0[1u].y;
    }
    float _1620 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _568);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1620 : min(cbModelParam._m0[25u].w, _1620));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1676 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1680 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1684 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1687 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1690 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1693 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _2002;
        if (_1687 > 0.0)
        {
            _2002 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2002 = frontier_phi_40_36_ladder;
        }
        float _2331;
        if (_1690 > 0.0)
        {
            _2331 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2331 = frontier_phi_54_47_ladder;
        }
        float _2521;
        if (_1693 > 0.0)
        {
            _2521 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2521 = frontier_phi_72_65_ladder;
        }
        float _2523 = isnan(_2331) ? _2002 : (isnan(_2002) ? _2331 : min(_2002, _2331));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _1687) + _1676;
        float _2529 = (_2524 * _1690) + _1680;
        float _2530 = (_2524 * _1693) + _1684;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2531;
        float _2534 = _2531 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2530 > _2534) || ((_2530 < _2532) || ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 < _2532) || (_2528 > _2534))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2530, cbModelParam._m0[17u].z, fma(_2529, cbModelParam._m0[17u].y, _2528 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2530, cbModelParam._m0[18u].z, fma(_2529, cbModelParam._m0[18u].y, _2528 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2530, cbModelParam._m0[19u].z, fma(_2529, cbModelParam._m0[19u].y, _2528 * cbModelParam._m0[19u].x))), _1621);
            frontier_phi_37_72_ladder = _2772.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2772.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2772.x * cbModelParam._m0[1u].z;
        }
        _1712 = frontier_phi_37_72_ladder_2;
        _1714 = frontier_phi_37_72_ladder_1;
        _1716 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1621);
        _1712 = _1696.x * cbModelParam._m0[1u].z;
        _1714 = _1696.y * cbModelParam._m0[1u].z;
        _1716 = _1696.z * cbModelParam._m0[1u].z;
    }
    float _1728 = ((((1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_712 * _699)) * _683;
    float _1729 = _1728 * ((cbModelParam._m0[1u].w * (_1712 - _1612)) + _1612);
    float _1730 = _1728 * ((cbModelParam._m0[1u].w * (_1714 - _1614)) + _1614);
    float _1731 = _1728 * ((cbModelParam._m0[1u].w * (_1716 - _1616)) + _1616);
    float _1734 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1729 * cbSceneParam._m0[91u].x));
    vec4 _1748 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_619, _620));
    float _1750 = _1748.w;
    float _1762 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1750);
    float _1763 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1750);
    float _1764 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1750);
    uvec4 _1768 = floatBitsToUint(cbInstanceData._m0[_658 + 5u]);
    uint _1770 = _1768.x * 14u;
    uint _1771 = _1770 + 13u;
    float _1776 = _683 + (-1.0);
    float _1779 = (cbLight._m0[_1771].x * _1776) + 1.0;
    float _1780 = (cbLight._m0[_1771].y * _1776) + 1.0;
    uint _1781 = _1770 + 5u;
    float _1787 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
    uint _1791 = _1770 + 4u;
    float _1801 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1805 = _1770 | 1u;
    float _1816 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_565, _566, _567));
    float _1819 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_565, _566, _567));
    float _3738 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _3749 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1824 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1826 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1833 = ((cbLight._m0[_1781].x * _1787) * _1826) + (((cbLight._m0[_1791].x * _1762) * _1801) * _1824);
    float _1834 = ((_1787 * cbLight._m0[_1781].y) * _1826) + (((cbLight._m0[_1791].y * _1763) * _1801) * _1824);
    float _1835 = ((_1787 * cbLight._m0[_1781].z) * _1826) + (((cbLight._m0[_1791].z * _1764) * _1801) * _1824);
    uint _1837 = _1770 + 8u;
    float _1850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _568) * 0.949999988079071044921875);
    float _1851 = _1850 * _1850;
    float _1852 = cbLight._m0[_1770].x + _592;
    float _1853 = cbLight._m0[_1770].y + _593;
    float _1854 = cbLight._m0[_1770].z + _594;
    float _1858 = inversesqrt(dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854)));
    float _1859 = _1858 * _1852;
    float _1860 = _1858 * _1853;
    float _1861 = _1858 * _1854;
    float _1862 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_1770].xyz));
    float _3760 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1866 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1867 = dot(vec3(_565, _566, _567), vec3(_1859, _1860, _1861));
    float _3782 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1859, _1860, _1861));
    float _3793 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1851 * _1851;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = 1.0 - _1851;
    float _1902 = (0.5 / (((_1866 * ((_1865 * _1891) + _1851)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _1891) + _1851) * _1865))) * _1865;
    float _3804 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    uint _1918 = _1770 + 9u;
    float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _568) * 0.949999988079071044921875);
    float _1930 = _1929 * _1929;
    float _1931 = cbLight._m0[_1805].x + _592;
    float _1932 = cbLight._m0[_1805].y + _593;
    float _1933 = cbLight._m0[_1805].z + _594;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1938 = _1937 * _1931;
    float _1939 = _1937 * _1932;
    float _1940 = _1937 * _1933;
    float _1941 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_1805].xyz));
    float _3815 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1945 = dot(vec3(_565, _566, _567), vec3(_1938, _1939, _1940));
    float _3826 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_1938, _1939, _1940));
    float _3837 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1953 = _1930 * _1930;
    float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
    float _1966 = (exp2(log2(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1967 = 1.0 - _1930;
    float _1977 = (0.5 / (((_1866 * ((_1944 * _1967) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _1967) + _1930) * _1944))) * _1944;
    float _3848 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
    float _1989 = (((_1966 * cbLight._m0[_1918].x) * _1979) * _1787) + ((((cbLight._m0[_1837].x * _1762) * _1890) * _1904) * _1801);
    float _1990 = (((_1966 * cbLight._m0[_1918].y) * _1979) * _1787) + ((((cbLight._m0[_1837].y * _1763) * _1890) * _1904) * _1801);
    float _1991 = (((_1966 * cbLight._m0[_1918].z) * _1979) * _1787) + ((((cbLight._m0[_1837].z * _1764) * _1890) * _1904) * _1801);
    float _2106;
    float _2108;
    float _2110;
    float _2112;
    float _2114;
    float _2116;
    if (_1768.y == 0u)
    {
        float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2046;
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2046;
        float _2049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2046;
        uvec4 _2061 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2062 = _2061.x;
        uint _2073 = uint((float(_2061.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2062))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2062)));
        float _2083 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2084 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        uint _2087 = uint(isnan(14.0) ? _2084 : (isnan(_2084) ? 14.0 : min(_2084, 14.0)));
        uvec4 _2092 = texelFetch(g_lightClusterGridBuffer, int(((_2087 << 2u) + (_2073 << 6u)) >> 2u));
        uint _2093 = _2092.x;
        uint _2094 = _2061.z;
        float _2184;
        float _2186;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        if (((((1u << ((_2094 >> 4u) & 15u)) + 4294967295u) & _2093) == 0u) || ((_2094 & 240u) == 0u))
        {
            _2184 = 0.0;
            _2186 = 0.0;
            _2188 = 0.0;
            _2190 = 0.0;
            _2192 = 0.0;
            _2194 = 0.0;
        }
        else
        {
            float _2185;
            float _2187;
            float _2189;
            float _2191;
            float _2193;
            float _2195;
            float _2368 = 0.0;
            float _2369 = 0.0;
            float _2370 = 0.0;
            float _2371 = 0.0;
            float _2372 = 0.0;
            float _2373 = 0.0;
            uint _2374 = 0u;
            uint _2383;
            bool _2384;
            for (;;)
            {
                _2383 = texelFetch(g_lightClassification, int((((_2087 << 5u) + (_2073 << 9u)) + (_2374 << 2u)) >> 2u)).x;
                _2384 = _2383 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2384)
                {
                    frontier_phi_67_pred = _2371;
                    frontier_phi_67_pred_1 = _2370;
                    frontier_phi_67_pred_2 = _2369;
                    frontier_phi_67_pred_3 = _2368;
                    frontier_phi_67_pred_4 = _2372;
                    frontier_phi_67_pred_5 = _2373;
                }
                else
                {
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    uint _2570;
                    _2564 = _2368;
                    _2565 = _2369;
                    _2566 = _2370;
                    _2567 = _2371;
                    _2568 = _2372;
                    _2569 = _2373;
                    _2570 = _2383;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    for (;;)
                    {
                        uint _2574 = uint(findLSB(_2570)) + (_2374 << 5u);
                        uint _2571 = (_2570 + 4294967295u) & _2570;
                        uint _2576 = _2574 * 48u;
                        vec4 _2590 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2576)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 3u)).x));
                        uint _2596 = (_2574 * 48u) + 4u;
                        vec4 _2609 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 3u)).x));
                        uint _2615 = (_2574 * 48u) + 8u;
                        vec3 _2626 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2615)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 2u)).x));
                        float _2630 = _2590.x - _2047;
                        float _2631 = _2590.y - _2048;
                        float _2632 = _2590.z - _2049;
                        float _2633 = dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632));
                        float _2636 = inversesqrt(_2633);
                        float _2637 = _2636 * _2630;
                        float _2638 = _2636 * _2631;
                        float _2639 = _2636 * _2632;
                        float _2640 = dot(vec3(_639, _642, _645), vec3(_2637, _2638, _2639));
                        float _2645 = 1.0 - (_2633 * _2590.w);
                        float _3869 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _2646 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                        float _2647 = sqrt(_2633) * _2609.w;
                        float _2650 = 1.39999997615814208984375 / (_2647 + 1.39999997615814208984375);
                        float _2651 = _2650 * _2650;
                        float _2654 = ((1.0 - _2651) * _2640) + _2651;
                        float _2657 = _2647 * _2647;
                        float _2661 = ((isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0))) * _2646) / ((_2657 * 0.699999988079071044921875) + 1.0);
                        float _2665 = (-0.0) - _2047;
                        float _2666 = (-0.0) - _2048;
                        float _2667 = (-0.0) - _2049;
                        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
                        float _2672 = _2671 * _2665;
                        float _2673 = _2671 * _2666;
                        float _2674 = _2671 * _2667;
                        float _2682 = exp2(log2(1.0 / ((_2657 * 3.5) + 5.0)) * 0.25);
                        float _2683 = 1.0 - _699;
                        float _2690 = sqrt(1.0 - ((1.0 - (_2683 * _2683)) * (1.0 - (_2682 * _2682))));
                        float _2691 = _2690 * _2690;
                        float _2692 = _2691 * _2691;
                        float _2693 = _2672 + _2637;
                        float _2694 = _2673 + _2638;
                        float _2695 = _2674 + _2639;
                        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
                        float _2703 = dot(vec3(_639, _642, _645), vec3(_2672, _2673, _2674));
                        float _3885 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                        float _2706 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                        float _2707 = dot(vec3(_639, _642, _645), vec3(_2699 * _2693, _2699 * _2694, _2699 * _2695));
                        float _3896 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2710 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
                        float _2714 = ((_2710 * _2710) * (_2692 + (-1.0))) + 1.0;
                        float _2715 = _2650 * _2691;
                        float _2716 = _2715 * _2715;
                        float _2719 = ((1.0 - _2716) * _2640) + _2716;
                        float _3907 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2720 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                        float _2721 = 1.0 - _2691;
                        float _2731 = (0.5 / (((_2720 * ((_2706 * _2721) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2720 * _2721) + _2691) * _2706))) * _2720;
                        float _3918 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2742 = (((_2692 * 3.1415927410125732421875) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) / ((_2714 * _2714) * ((_2657 * 2.1991131305694580078125) + 3.141590118408203125))) * _2646;
                        _2468 = (_2661 * _2609.x) + _2567;
                        _2469 = (_2661 * _2609.y) + _2568;
                        _2470 = (_2661 * _2609.z) + _2569;
                        _2465 = (_2742 * _2626.x) + _2564;
                        _2466 = (_2742 * _2626.y) + _2565;
                        _2467 = (_2742 * _2626.z) + _2566;
                        if (_2571 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2564 = _2465;
                            _2565 = _2466;
                            _2566 = _2467;
                            _2567 = _2468;
                            _2568 = _2469;
                            _2569 = _2470;
                            _2570 = _2571;
                        }
                    }
                    frontier_phi_67_pred = _2468;
                    frontier_phi_67_pred_1 = _2467;
                    frontier_phi_67_pred_2 = _2466;
                    frontier_phi_67_pred_3 = _2465;
                    frontier_phi_67_pred_4 = _2469;
                    frontier_phi_67_pred_5 = _2470;
                }
                _2191 = frontier_phi_67_pred;
                _2189 = frontier_phi_67_pred_1;
                _2187 = frontier_phi_67_pred_2;
                _2185 = frontier_phi_67_pred_3;
                _2193 = frontier_phi_67_pred_4;
                _2195 = frontier_phi_67_pred_5;
                uint _2375 = _2374 + 1u;
                if (_2375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2368 = _2185;
                    _2369 = _2187;
                    _2370 = _2189;
                    _2371 = _2191;
                    _2372 = _2193;
                    _2373 = _2195;
                    _2374 = _2375;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2184 = _2185;
            _2186 = _2187;
            _2188 = _2189;
            _2190 = _2191;
            _2192 = _2193;
            _2194 = _2195;
        }
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.z;
        uint _2201 = (_2199 >> 8u) & 15u;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        if (((4294967295u << _2201) & _2093) == 0u)
        {
            _2336 = _2184;
            _2338 = _2186;
            _2340 = _2188;
            _2342 = _2190;
            _2344 = _2192;
            _2346 = _2194;
        }
        else
        {
            float _2361 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float _2362 = _2361 * _2047;
            float _2363 = _2361 * _2048;
            float _2364 = _2361 * _2049;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2201 < ((_2199 >> 12u) & 15u))
            {
                float _2337;
                float _2339;
                float _2341;
                float _2343;
                float _2345;
                float _2347;
                float _2547 = _2184;
                float _2548 = _2186;
                float _2549 = _2188;
                float _2550 = _2190;
                float _2551 = _2192;
                float _2552 = _2194;
                uint _2553 = _2201;
                uint _2562;
                bool _2563;
                for (;;)
                {
                    _2562 = texelFetch(g_lightClassification, int((((_2087 << 5u) + (_2073 << 9u)) + (_2553 << 2u)) >> 2u)).x;
                    _2563 = _2562 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2563)
                    {
                        frontier_phi_81_pred = _2550;
                        frontier_phi_81_pred_1 = _2549;
                        frontier_phi_81_pred_2 = _2548;
                        frontier_phi_81_pred_3 = _2547;
                        frontier_phi_81_pred_4 = _2552;
                        frontier_phi_81_pred_5 = _2551;
                    }
                    else
                    {
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _2790 = _2547;
                        float _2791 = _2548;
                        float _2792 = _2549;
                        float _2793 = _2550;
                        float _2794 = _2551;
                        float _2795 = _2552;
                        uint _2796 = _2562;
                        uint _2797;
                        vec4 _2822;
                        float _2823;
                        vec4 _2838;
                        vec3 _2850;
                        vec4 _2865;
                        vec4 _2880;
                        float _2926;
                        bool _2927;
                        for (;;)
                        {
                            uint _2807 = ((_2553 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2796));
                            _2797 = (_2796 + 4294967295u) & _2796;
                            uint _2809 = _2807 * 40u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            _2823 = _2822.w;
                            uint _2825 = (_2807 * 40u) + 4u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            uint _2840 = (_2807 * 40u) + 8u;
                            _2850 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x));
                            uint _2852 = (_2807 * 40u) + 16u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2867 = (_2807 * 40u) + 20u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2807 * 40u) + 24u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2901 = (_2807 * 40u) + 28u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2926 = fma(_2049, _2914.z, fma(_2048, _2914.y, _2914.x * _2047)) + _2914.w;
                            _2927 = !((fma(_2049, _2895.z, fma(_2048, _2895.y, _2895.x * _2047)) + _2895.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2927)
                            {
                                float _2954 = _2822.x - _2047;
                                float _2955 = _2822.y - _2048;
                                float _2956 = _2822.z - _2049;
                                float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                                float _2960 = inversesqrt(_2957);
                                float _2961 = _2960 * _2954;
                                float _2962 = _2960 * _2955;
                                float _2963 = _2960 * _2956;
                                float _2967 = 1.0 - (_2957 / (_2823 * _2823));
                                float _3929 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                                float _2972 = sqrt(_2957) * _2838.w;
                                float _2974 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                                float _2975 = _2974 * _2974;
                                float _2978 = ((1.0 - _2975) * dot(vec3(_2961, _2962, _2963), vec3(_639, _642, _645))) + _2975;
                                float _2981 = _2972 * _2972;
                                float _2985 = (fma(_2049, _2865.z, fma(_2048, _2865.y, _2865.x * _2047)) + _2865.w) / _2926;
                                float _2986 = (fma(_2049, _2880.z, fma(_2048, _2880.y, _2880.x * _2047)) + _2880.w) / _2926;
                                float _2990 = 1.0 - dot(vec2(_2985, _2986), vec2(_2985, _2986));
                                float _3945 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2991 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                                float _2992 = _2991 * (((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2968) / ((_2981 * 0.699999988079071044921875) + 1.0));
                                float _3004 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                                float _3005 = 1.0 - _699;
                                float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                                float _3013 = _3012 * _3012;
                                float _3014 = _3013 * _3013;
                                float _3015 = _2961 - _2362;
                                float _3016 = _2962 - _2363;
                                float _3017 = _2963 - _2364;
                                float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                                float _3025 = dot(vec3(_639, _642, _645), vec3((-0.0) - _2362, (-0.0) - _2363, (-0.0) - _2364));
                                float _3956 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3028 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _3029 = dot(vec3(_639, _642, _645), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                                float _3967 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3032 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                                float _3037 = _2974 * _3013;
                                float _3038 = _3037 * _3037;
                                float _3044 = ((1.0 - _3038) * dot(vec3(_639, _642, _645), vec3(_2961, _2962, _2963))) + _3038;
                                float _3978 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _3046 = 1.0 - _3013;
                                float _3056 = (0.5 / (((_3045 * ((_3028 * _3046) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3045 * _3046) + _3013) * _3028))) * _3045;
                                float _3989 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3066 = (_2991 * _2968) * (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) / ((_3036 * _3036) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2992 * _2838.x;
                                frontier_phi_87_pred_1 = _3066 * _2850.z;
                                frontier_phi_87_pred_2 = _3066 * _2850.y;
                                frontier_phi_87_pred_3 = _3066 * _2850.x;
                                frontier_phi_87_pred_4 = _2992 * _2838.z;
                                frontier_phi_87_pred_5 = _2992 * _2838.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3073 = frontier_phi_87_pred;
                            _3072 = frontier_phi_87_pred_1;
                            _3071 = frontier_phi_87_pred_2;
                            _3070 = frontier_phi_87_pred_3;
                            _3075 = frontier_phi_87_pred_4;
                            _3074 = frontier_phi_87_pred_5;
                            _2780 = _3073 + _2793;
                            _2781 = _3074 + _2794;
                            _2782 = _3075 + _2795;
                            _2777 = _3070 + _2790;
                            _2778 = _3071 + _2791;
                            _2779 = _3072 + _2792;
                            if (_2797 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2797;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2780;
                        frontier_phi_81_pred_1 = _2779;
                        frontier_phi_81_pred_2 = _2778;
                        frontier_phi_81_pred_3 = _2777;
                        frontier_phi_81_pred_4 = _2782;
                        frontier_phi_81_pred_5 = _2781;
                    }
                    _2343 = frontier_phi_81_pred;
                    _2341 = frontier_phi_81_pred_1;
                    _2339 = frontier_phi_81_pred_2;
                    _2337 = frontier_phi_81_pred_3;
                    _2347 = frontier_phi_81_pred_4;
                    _2345 = frontier_phi_81_pred_5;
                    uint _2554 = _2553 + 1u;
                    if (_2554 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2547 = _2337;
                        _2548 = _2339;
                        _2549 = _2341;
                        _2550 = _2343;
                        _2551 = _2345;
                        _2552 = _2347;
                        _2553 = _2554;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2347;
                frontier_phi_56_57_ladder_1 = _2345;
                frontier_phi_56_57_ladder_2 = _2343;
                frontier_phi_56_57_ladder_3 = _2339;
                frontier_phi_56_57_ladder_4 = _2337;
                frontier_phi_56_57_ladder_5 = _2341;
            }
            else
            {
                frontier_phi_56_57_ladder = _2194;
                frontier_phi_56_57_ladder_1 = _2192;
                frontier_phi_56_57_ladder_2 = _2190;
                frontier_phi_56_57_ladder_3 = _2186;
                frontier_phi_56_57_ladder_4 = _2184;
                frontier_phi_56_57_ladder_5 = _2188;
            }
            _2336 = frontier_phi_56_57_ladder_4;
            _2338 = frontier_phi_56_57_ladder_3;
            _2340 = frontier_phi_56_57_ladder_5;
            _2342 = frontier_phi_56_57_ladder_2;
            _2344 = frontier_phi_56_57_ladder_1;
            _2346 = frontier_phi_56_57_ladder;
        }
        float _2351 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2106 = (_2351 * _2342) + _1833;
        _2108 = (_2351 * _2344) + _1834;
        _2110 = (_2351 * _2346) + _1835;
        _2112 = ((_2336 * 0.039999999105930328369140625) * _2351) + _1989;
        _2114 = ((_2338 * 0.039999999105930328369140625) * _2351) + _1990;
        _2116 = ((_2340 * 0.039999999105930328369140625) * _2351) + _1991;
    }
    else
    {
        _2106 = _1833;
        _2108 = _1834;
        _2110 = _1835;
        _2112 = _1989;
        _2114 = _1990;
        _2116 = _1991;
    }
    float _4005 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4016 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4027 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2133 = ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2106 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _683))) + ((_2112 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2134 = ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2108 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _683))) + ((_2114 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2135 = ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2110 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _683))) + ((_2116 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2136 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    uint _2139 = _658 + 6u;
    float _2147 = _619 / cbSceneParam._m0[86u].x;
    float _2148 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2162 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2147, _2148, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2164 = _2162.x;
    float _2165 = _2162.y;
    float _2166 = _2162.z;
    float _2167 = _2162.w;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2209 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2210 = _2209 / _587;
        float _2221 = _2210 * _263;
        float _2222 = _264 * _2210;
        float _2223 = (-0.0) - _2222;
        float _2224 = _2210 * _265;
        float _2226 = (cbSceneParam._m0[77u].w * _2223) / _2209;
        float _2227 = _2226 + cbSceneParam._m0[79u].w;
        float _2228 = cbSceneParam._m0[79u].w - _2222;
        float _2234 = sqrt(((_2221 * _2221) + (_2222 * _2222)) + (_2224 * _2224));
        float _2237 = (1.0 - (cbSceneParam._m0[77u].w / _2209)) * _2234;
        float _2243 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2245 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2478;
        if (abs((_2223 - _2226) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2478 = ((((_2227 > 0.0) ? exp2(_2243 * _2227) : (2.0 - exp2(_2245 * _2227))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2237;
        }
        else
        {
            float _2397 = 1.0 / cbSceneParam._m0[80u].x;
            float _2398 = isnan(_2228) ? _2227 : (isnan(_2227) ? _2228 : max(_2227, _2228));
            float _2399 = isnan(_2228) ? _2227 : (isnan(_2227) ? _2228 : min(_2227, _2228));
            float _2408 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : min(_2398, 0.0));
            float _2409 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : min(_2399, 0.0));
            _2478 = ((abs(_2234 / _2223) * cbSceneParam._m0[80u].y) * ((((_2408 - _2409) * 2.0) - ((exp2(_2243 * (isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0)))) - exp2(_2243 * (isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0))))) * _2397)) - ((exp2(_2245 * _2408) - exp2(_2245 * _2409)) * _2397))) + (_2237 * cbSceneParam._m0[80u].z);
        }
        vec4 _2480 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2147, _2148, 1.0), 0.0);
        float _2489 = exp2((_2478 * (-1.44269502162933349609375)) * (1.0 - _2480.w));
        float _2490 = log2(_2489);
        float _2506 = log2(_2167);
        _2247 = (exp2(_2506 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].x)) * _2480.x) / cbSceneParam._m0[78u].x)) + _2164;
        _2249 = (exp2(_2506 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].y)) * _2480.y) / cbSceneParam._m0[78u].y)) + _2165;
        _2251 = (exp2(_2506 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].z)) * _2480.z) / cbSceneParam._m0[78u].z)) + _2166;
        _2253 = _2489 * _2167;
    }
    else
    {
        _2247 = _2164;
        _2249 = _2165;
        _2251 = _2166;
        _2253 = _2167;
    }
    bool _2516;
    vec4 _2263;
    vec4 _2285;
    float _2287;
    float _2291;
    float _2292;
    float _2293;
    float _2294;
    bool _2304;
    for (;;)
    {
        _2263 = cbMatDynParam._m0[0u];
        float _2265 = roundEven(_2263.y);
        bool _2266 = _2265 == 3.0;
        float _2267 = log2(_2253);
        float _2274 = exp2(_2267 * cbSceneParam._m0[78u].x) * _2136;
        float _2275 = exp2(_2267 * cbSceneParam._m0[78u].y) * _2137;
        float _2276 = exp2(_2267 * cbSceneParam._m0[78u].z) * _2138;
        float _2283 = _601 + (-0.5);
        _2285 = cbMtdParam._m0[1u];
        _2287 = _2285.y * _2283;
        float _2290 = (_2265 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2291 = _2290 * (_2266 ? _2274 : (_2274 + (cbSceneParam._m0[72u].w * _2247)));
        _2292 = _2290 * (_2266 ? _2275 : (_2275 + (cbSceneParam._m0[72u].w * _2249)));
        _2293 = _2290 * (_2266 ? _2276 : (_2276 + (cbSceneParam._m0[72u].w * _2251)));
        _2294 = _2283 * 0.999000012874603271484375;
        _2304 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2304)
        {
            if ((cbInstanceData._m0[_658 + 7u].x + _2294) < 0.5)
            {
                _2516 = true;
                break;
            }
        }
        uint _2432 = _659 + uint(_2263.w);
        if ((cbInstanceData._m0[_2432].w < 1.0) && ((cbInstanceData._m0[_2432].w + _2294) < 0.5))
        {
            _2516 = true;
            break;
        }
        if ((_2287 + 1.0) < _2285.x)
        {
            _2516 = true;
            break;
        }
        _2516 = false;
        break;
    }
    float _2747;
    if (_2516)
    {
        discard_state = true;
        _2747 = 0.0;
    }
    else
    {
        _2747 = cbInstanceData._m0[_2139].w;
    }
    SV_Target.x = _2291;
    SV_Target.y = _2292;
    SV_Target.z = _2293;
    SV_Target.w = _2747;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2139].w;
    discard_exit();
}


