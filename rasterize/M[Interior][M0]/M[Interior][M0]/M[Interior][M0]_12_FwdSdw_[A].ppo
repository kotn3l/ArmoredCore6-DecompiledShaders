#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _930;
float _3170;
float _3171;
float _3172;
float _3173;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    float _287 = cbMtdParam._m0[22u].y + _259;
    float _288 = cbMtdParam._m0[22u].z + _260;
    float _289 = cbMtdParam._m0[22u].w + _261;
    float _303 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _304 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_201 * TANGENT.x, _201 * TANGENT.y, _201 * TANGENT.z));
    float _305 = (-0.0) - dot(vec3(_287, _288, _289), vec3((-0.0) - (_194 * NORMAL.x), (-0.0) - (_194 * NORMAL.y), (-0.0) - (_194 * NORMAL.z)));
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _309 * _305;
    float _312 = (cbMtdParam._m0[19u].x * _303) * _309;
    float _314 = (cbMtdParam._m0[18u].w * _304) * _309;
    float _315 = fract(TEXCOORD.x);
    float _316 = fract(TEXCOORD.y);
    float _322;
    if (_312 > 0.0)
    {
        _322 = (1.0 - _315) / _312;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _315) / _312;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _322 = frontier_phi_3_2_ladder;
    }
    float _330;
    if (_314 > 0.0)
    {
        _330 = (1.0 - _316) / _314;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_314 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _316) / _314;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _330 = frontier_phi_7_6_ladder;
    }
    bool _332 = _310 > 0.0;
    float _334 = _332 ? (cbMtdParam._m0[15u].x / _310) : 5000.0;
    float _335 = isnan(_330) ? _322 : (isnan(_322) ? _330 : min(_322, _330));
    float _336 = isnan(_334) ? _335 : (isnan(_335) ? _334 : min(_335, _334));
    float _340 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = _315 + (-0.5);
    float _344 = _316 + (-0.5);
    float _347 = ((_336 * _310) + _340) / _340;
    vec4 _373 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_341 + (_336 * _312)) / _347) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_344 + (_336 * _314)) / _347) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _384 = cbMtdParam._m0[9u].x * _373.x;
    float _385 = cbMtdParam._m0[9u].y * _373.y;
    float _386 = cbMtdParam._m0[9u].z * _373.z;
    float _408 = (cbMtdParam._m0[21u].x * _303) * _309;
    float _410 = (cbMtdParam._m0[20u].w * _304) * _309;
    bool _411 = _408 > 0.0;
    float _416;
    if (_411)
    {
        _416 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _416 = frontier_phi_11_10_ladder;
    }
    bool _418 = _410 > 0.0;
    float _423;
    if (_418)
    {
        _423 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _423 = frontier_phi_15_14_ladder;
    }
    float _426 = _332 ? (cbMtdParam._m0[16u].z / _310) : 5000.0;
    float _427 = isnan(_423) ? _416 : (isnan(_416) ? _423 : min(_416, _423));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _436 = ((_428 * _310) + _432) / _432;
    float _441 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _443 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _459 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_428 * _408)) / _436) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_428 * _410)) / _436) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _471;
    if (_411)
    {
        _471 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _471 = frontier_phi_19_18_ladder;
    }
    float _477;
    if (_418)
    {
        _477 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _477 = frontier_phi_23_22_ladder;
    }
    float _479 = isnan(_477) ? _471 : (isnan(_471) ? _477 : min(_471, _477));
    float _480 = isnan(_426) ? _479 : (isnan(_479) ? _426 : min(_479, _426));
    float _487 = ((_480 * _310) + _432) / _432;
    vec4 _501 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_480 * _408)) / _487) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_480 * _410)) / _487) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _503 = _501.w;
    float _510 = (_503 * ((_459.x * cbMtdParam._m0[10u].x) - _384)) + _384;
    float _511 = (_503 * ((_459.y * cbMtdParam._m0[10u].y) - _385)) + _385;
    float _512 = (_503 * ((_459.z * cbMtdParam._m0[10u].z) - _386)) + _386;
    float _3212 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3223 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3234 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _531 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _535 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _536 = _259 * _535;
    float _537 = _260 * _535;
    float _538 = _261 * _535;
    vec4 _543 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _545 = _543.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _642 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _649 = (cbMatDynParam._m0[5u].x * _642) + cbMatDynParam._m0[5u].y;
        float _3245 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _650 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _654 = (cbMatDynParam._m0[5u].z * _642) + cbMatDynParam._m0[5u].w;
        float _3256 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) - _650)) + _650) < ((_545 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = _572 + 9u;
    uint _575 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)))) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_575].z;
    float _3267 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _3278 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    vec4 _595 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _598 = _595.x * TEXCOORD.z;
    float _599 = (-0.0) - _536;
    float _600 = (-0.0) - _537;
    float _601 = (-0.0) - _538;
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _929;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = (cbModelParam._m0[37u].x * ((((fma(_631, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _718 = (cbModelParam._m0[37u].y * ((((fma(_631, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _719 = (((((fma(_631, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _718, _719), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _718, _719), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _718, _719), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _718, _719), 0.0);
        float _756 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _756 * (_722.x + (-0.5));
        float _759 = _756 * (_722.y + (-0.5));
        float _760 = _756 * (_722.z + (-0.5));
        float _767 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_729.x + (-0.5));
        float _769 = _767 * (_729.y + (-0.5));
        float _770 = _767 * (_729.z + (-0.5));
        float _777 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_736.x + (-0.5));
        float _779 = _777 * (_736.y + (-0.5));
        float _780 = _777 * (_736.z + (-0.5));
        float _787 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_743.x + (-0.5));
        float _789 = _787 * (_743.y + (-0.5));
        float _790 = _787 * (_743.z + (-0.5));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = _758 * 0.5;
        float _795 = _768 * 0.5;
        float _796 = _778 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _811 = (dot(vec3(0.0), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _821 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3337 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_823 + 1.0))) + _828) * _791;
        float _838 = _759 * 0.5;
        float _839 = _769 * 0.5;
        float _840 = _779 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(0.0), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3370 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_865 + 1.0))) + _870) * _792;
        float _880 = _760 * 0.5;
        float _881 = _770 * 0.5;
        float _882 = _780 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(0.0), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3403 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_907 + 1.0))) + _912) * _793;
        _929 = _760;
        _931 = _759;
        _932 = _758;
        _933 = _770;
        _934 = _769;
        _935 = _768;
        _936 = _780;
        _937 = _779;
        _938 = _778;
        _939 = _793;
        _940 = _792;
        _941 = _791;
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
    }
    else
    {
        _929 = _930;
        _931 = _930;
        _932 = _930;
        _933 = _930;
        _934 = _930;
        _935 = _930;
        _936 = _930;
        _937 = _930;
        _938 = _930;
        _939 = _930;
        _940 = _930;
        _941 = _930;
        _942 = 0.0;
        _943 = 0.0;
        _944 = 0.0;
    }
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = (cbModelParam._m0[38u].x * ((((fma(_631, cbModelParam._m0[30u].z, fma(_627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _623)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1002 = (cbModelParam._m0[38u].y * ((((fma(_631, cbModelParam._m0[31u].z, fma(_627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _623)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1003 = (((((fma(_631, cbModelParam._m0[32u].z, fma(_627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _623)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1038 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1005.x + (-0.5));
        float _1040 = _1038 * (_1005.y + (-0.5));
        float _1041 = _1038 * (_1005.z + (-0.5));
        float _1048 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1012.x + (-0.5));
        float _1050 = _1048 * (_1012.y + (-0.5));
        float _1051 = _1048 * (_1012.z + (-0.5));
        float _1058 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1019.x + (-0.5));
        float _1060 = _1058 * (_1019.y + (-0.5));
        float _1061 = _1058 * (_1019.z + (-0.5));
        float _1068 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1026.x + (-0.5));
        float _1070 = _1068 * (_1026.y + (-0.5));
        float _1071 = _1068 * (_1026.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(0.0), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3466 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_1102 + 1.0))) + _1107) * _1072;
        float _1117 = _1040 * 0.5;
        float _1118 = _1050 * 0.5;
        float _1119 = _1060 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(0.0), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3499 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1144 + 1.0))) + _1149) * _1073;
        float _1159 = _1041 * 0.5;
        float _1160 = _1051 * 0.5;
        float _1161 = _1061 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(0.0), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3532 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1186 + 1.0))) + _1191) * _1074;
        _1208 = _1041;
        _1209 = _1040;
        _1210 = _1039;
        _1211 = _1051;
        _1212 = _1050;
        _1213 = _1049;
        _1214 = _1061;
        _1215 = _1060;
        _1216 = _1059;
        _1217 = _1074;
        _1218 = _1073;
        _1219 = _1072;
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _930;
        _1209 = _930;
        _1210 = _930;
        _1211 = _930;
        _1212 = _930;
        _1213 = _930;
        _1214 = _930;
        _1215 = _930;
        _1216 = _930;
        _1217 = _930;
        _1218 = _930;
        _1219 = _930;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _942)) + _942;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _943)) + _943;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _944)) + _944;
    float _1255 = fma(_1234, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1232 * cbSceneParam._m0[89u].x));
    float _1258 = fma(_1234, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1232 * cbSceneParam._m0[90u].x));
    float _1261 = fma(_1234, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1232));
    float _1276 = _536 * (-0.5);
    float _1277 = _537 * (-0.5);
    float _1278 = _538 * (-0.5);
    float _1279 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1282 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1285 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1292 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_929, _933, _936, _939));
        float _1296 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_931, _934, _937, _940));
        float _1300 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_932, _935, _938, _941));
        float _1307 = dot(vec4(cbModelParam._m0[39u]), vec4(_1276, _1277, _1278, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1321 = dot(vec4(cbModelParam._m0[40u]), vec4(_1276, _1277, _1278, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1334 = (_1330 * cbModelParam._m0[1u].x) + (_1319 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1425;
    float _1427;
    float _1429;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1392 = fma(_631, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623)) + cbModelParam._m0[13u].w;
        float _1396 = fma(_631, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623)) + cbModelParam._m0[14u].w;
        float _1400 = fma(_631, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623)) + cbModelParam._m0[15u].w;
        float _1403 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1406 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1409 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1435;
        if (_1403 > 0.0)
        {
            _1435 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1435 = frontier_phi_41_39_ladder;
        }
        float _1605;
        if (_1406 > 0.0)
        {
            _1605 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1605 = frontier_phi_50_46_ladder;
        }
        float _2000;
        if (_1409 > 0.0)
        {
            _2000 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2000 = frontier_phi_62_57_ladder;
        }
        float _2002 = isnan(_1605) ? _1435 : (isnan(_1435) ? _1605 : min(_1435, _1605));
        float _2003 = isnan(_2000) ? _2002 : (isnan(_2002) ? _2000 : min(_2002, _2000));
        float _2007 = (_2003 * _1403) + _1392;
        float _2008 = (_2003 * _1406) + _1396;
        float _2009 = (_2003 * _1409) + _1400;
        float _2010 = _2003 * 9.9999997473787516355514526367188e-05;
        float _2012 = (-1.0) - _2010;
        float _2014 = _2010 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2009 > _2014) || ((_2009 < _2012) || ((_2008 > _2014) || ((_2008 < _2012) || ((_2007 < _2012) || (_2007 > _2014))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2009, cbModelParam._m0[9u].z, fma(_2008, cbModelParam._m0[9u].y, _2007 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2009, cbModelParam._m0[10u].z, fma(_2008, cbModelParam._m0[10u].y, _2007 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2009, cbModelParam._m0[11u].z, fma(_2008, cbModelParam._m0[11u].y, _2007 * cbModelParam._m0[11u].x))), _1343);
            frontier_phi_40_62_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1425 = frontier_phi_40_62_ladder_2;
        _1427 = frontier_phi_40_62_ladder_1;
        _1429 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1343);
        _1425 = _1413.x * cbModelParam._m0[1u].y;
        _1427 = _1413.y * cbModelParam._m0[1u].y;
        _1429 = _1413.z * cbModelParam._m0[1u].y;
    }
    float _1432 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1484 = fma(_631, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623)) + cbModelParam._m0[21u].w;
        float _1488 = fma(_631, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623)) + cbModelParam._m0[22u].w;
        float _1492 = fma(_631, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623)) + cbModelParam._m0[23u].w;
        float _1495 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1498 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1501 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1610;
        if (_1495 > 0.0)
        {
            _1610 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1610 = frontier_phi_52_48_ladder;
        }
        float _2027;
        if (_1498 > 0.0)
        {
            _2027 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2027 = frontier_phi_64_59_ladder;
        }
        float _2374;
        if (_1501 > 0.0)
        {
            _2374 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2374 = frontier_phi_76_71_ladder;
        }
        float _2376 = isnan(_2027) ? _1610 : (isnan(_1610) ? _2027 : min(_1610, _2027));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1495) + _1484;
        float _2382 = (_2377 * _1498) + _1488;
        float _2383 = (_2377 * _1501) + _1492;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2384;
        float _2387 = _2384 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2383 > _2387) || ((_2383 < _2385) || ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 < _2385) || (_2381 > _2387))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2383, cbModelParam._m0[17u].z, fma(_2382, cbModelParam._m0[17u].y, _2381 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2383, cbModelParam._m0[18u].z, fma(_2382, cbModelParam._m0[18u].y, _2381 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2383, cbModelParam._m0[19u].z, fma(_2382, cbModelParam._m0[19u].y, _2381 * cbModelParam._m0[19u].x))), _1432);
            frontier_phi_49_76_ladder = _2517.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2517.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2517.y * cbModelParam._m0[1u].z;
        }
        _1520 = frontier_phi_49_76_ladder_1;
        _1522 = frontier_phi_49_76_ladder_2;
        _1524 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1432);
        _1520 = _1504.x * cbModelParam._m0[1u].z;
        _1522 = _1504.y * cbModelParam._m0[1u].z;
        _1524 = _1504.z * cbModelParam._m0[1u].z;
    }
    float _1536 = _598 * 0.01200000010430812835693359375;
    float _1538 = _1536 * ((cbModelParam._m0[1u].w * (_1520 - _1425)) + _1425);
    float _1539 = _1536 * ((cbModelParam._m0[1u].w * (_1522 - _1427)) + _1427);
    float _1540 = _1536 * ((cbModelParam._m0[1u].w * (_1524 - _1429)) + _1429);
    float _1543 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, _1538 * cbSceneParam._m0[91u].x));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1597 = _1584 / _1596;
    float _1598 = _1588 / _1596;
    float _1599 = _1592 / _1596;
    float _1747;
    float _1748;
    float _1749;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1626 = ((uint(_1599 > cbSceneParam._m0[59u].y) + uint(_1599 > cbSceneParam._m0[59u].x)) + uint(_1599 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1627 = _1626 + 43u;
        uint _1635 = _1626 + 44u;
        uint _1643 = _1626 + 45u;
        uint _1651 = _1626 + 46u;
        float _1662 = fma(_1596, cbSceneParam._m0[_1627].w, fma(_1592, cbSceneParam._m0[_1627].z, fma(_1588, cbSceneParam._m0[_1627].y, _1584 * cbSceneParam._m0[_1627].x)));
        float _1666 = fma(_1596, cbSceneParam._m0[_1635].w, fma(_1592, cbSceneParam._m0[_1635].z, fma(_1588, cbSceneParam._m0[_1635].y, _1584 * cbSceneParam._m0[_1635].x)));
        float _1674 = fma(_1596, cbSceneParam._m0[_1651].w, fma(_1592, cbSceneParam._m0[_1651].z, fma(_1588, cbSceneParam._m0[_1651].y, _1584 * cbSceneParam._m0[_1651].x)));
        float _1679 = cbSceneParam._m0[33u].z * _1674;
        float _1681 = cbSceneParam._m0[33u].w * _1674;
        float _1684 = fma(_1596, cbSceneParam._m0[_1643].w, fma(_1592, cbSceneParam._m0[_1643].z, fma(_1588, cbSceneParam._m0[_1643].y, _1584 * cbSceneParam._m0[_1643].x))) / _1674;
        float _1732 = (cbSceneParam._m0[33u].x - sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599))) * cbSceneParam._m0[33u].y;
        float _3658 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1740 = (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 + _1662) / _1674, (_1681 + _1666) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 + _1662) / _1674, (_1666 - _1679) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 - _1679) / _1674, (_1666 - _1681) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 - _1681) / _1674, (_1679 + _1666) / _1674), _1684), 0.0)).x), vec4(0.25)));
        _1747 = 1.0 - (_1740 * cbSceneParam._m0[34u].x);
        _1748 = 1.0 - (_1740 * cbSceneParam._m0[34u].y);
        _1749 = 1.0 - (_1740 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1747 = 1.0;
        _1748 = 1.0;
        _1749 = 1.0;
    }
    float _1813;
    float _1815;
    float _1817;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1801 = fma(_1596, cbSceneParam._m0[63u].w, fma(_1592, cbSceneParam._m0[63u].z, fma(_1588, cbSceneParam._m0[63u].y, _1584 * cbSceneParam._m0[63u].x)));
        float _1802 = fma(_1596, cbSceneParam._m0[60u].w, fma(_1592, cbSceneParam._m0[60u].z, fma(_1588, cbSceneParam._m0[60u].y, _1584 * cbSceneParam._m0[60u].x))) / _1801;
        float _1803 = fma(_1596, cbSceneParam._m0[61u].w, fma(_1592, cbSceneParam._m0[61u].z, fma(_1588, cbSceneParam._m0[61u].y, _1584 * cbSceneParam._m0[61u].x))) / _1801;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_1802 >= cbSceneParam._m0[64u].x) && (_1803 >= cbSceneParam._m0[64u].y)) && (_1802 <= cbSceneParam._m0[64u].z)) && (_1803 <= cbSceneParam._m0[64u].w))
        {
            float _2040 = fma(_1596, cbSceneParam._m0[62u].w, fma(_1592, cbSceneParam._m0[62u].z, fma(_1588, cbSceneParam._m0[62u].y, _1584 * cbSceneParam._m0[62u].x))) / _1801;
            float _2044 = isnan(cbSceneParam._m0[41u].w) ? _2040 : (isnan(_2040) ? cbSceneParam._m0[41u].w : max(_2040, cbSceneParam._m0[41u].w));
            float _2087 = (cbSceneParam._m0[33u].x - sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599))) * cbSceneParam._m0[33u].y;
            float _3674 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
            float _2094 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1802, cbSceneParam._m0[33u].w + _1803), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1802, _1803 - cbSceneParam._m0[33u].z), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1802 - cbSceneParam._m0[33u].z, _1803 - cbSceneParam._m0[33u].w), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1802 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1803), _2044), 0.0)).x), vec4(0.25)));
            float _2098 = 1.0 - (_2094 * cbSceneParam._m0[34u].x);
            float _2099 = 1.0 - (_2094 * cbSceneParam._m0[34u].y);
            float _2100 = 1.0 - (_2094 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2100) ? _1749 : (isnan(_1749) ? _2100 : min(_1749, _2100));
            frontier_phi_61_60_ladder_1 = isnan(_2099) ? _1748 : (isnan(_1748) ? _2099 : min(_1748, _2099));
            frontier_phi_61_60_ladder_2 = isnan(_2098) ? _1747 : (isnan(_1747) ? _2098 : min(_1747, _2098));
        }
        else
        {
            frontier_phi_61_60_ladder = _1749;
            frontier_phi_61_60_ladder_1 = _1748;
            frontier_phi_61_60_ladder_2 = _1747;
        }
        _1813 = frontier_phi_61_60_ladder_2;
        _1815 = frontier_phi_61_60_ladder_1;
        _1817 = frontier_phi_61_60_ladder;
    }
    else
    {
        _1813 = _1747;
        _1815 = _1748;
        _1817 = _1749;
    }
    uvec4 _1822 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1824 = _1822.x * 14u;
    uint _1825 = _1824 + 13u;
    float _1830 = _598 + (-1.0);
    float _1834 = (cbLight._m0[_1825].x * _1830) + 1.0;
    float _1835 = (cbLight._m0[_1825].y * _1830) + 1.0;
    uint _1836 = _1824 + 5u;
    float _1842 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1846 = _1824 + 4u;
    float _1855 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1859 = _1824 | 1u;
    float _1870 = dot(vec3(cbLight._m0[_1824].xyz), vec3(0.0));
    float _1873 = dot(vec3(cbLight._m0[_1859].xyz), vec3(0.0));
    float _3710 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _3721 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1878 = (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.3183098733425140380859375;
    float _1880 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.3183098733425140380859375;
    float _1887 = ((cbLight._m0[_1836].x * _1842) * _1880) + (((cbLight._m0[_1846].x * _1813) * _1855) * _1878);
    float _1888 = ((_1842 * cbLight._m0[_1836].y) * _1880) + (((cbLight._m0[_1846].y * _1815) * _1855) * _1878);
    float _1889 = ((_1842 * cbLight._m0[_1836].z) * _1880) + (((cbLight._m0[_1846].z * _1817) * _1855) * _1878);
    uint _1890 = _1824 + 8u;
    float _1896 = cbLight._m0[_1824].x + _536;
    float _1897 = cbLight._m0[_1824].y + _537;
    float _1898 = cbLight._m0[_1824].z + _538;
    float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
    float _1906 = dot(vec3(0.0), vec3(cbLight._m0[_1824].xyz));
    float _3732 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _1910 = dot(vec3(0.0), vec3(_536, _537, _538));
    float _3743 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1914 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1896 * _1902, _1897 * _1902, _1898 * _1902));
    float _3754 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1925 = (exp2(log2(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1931 = (0.5 / ((_1909 + 9.9999999392252902907785028219223e-09) + _1913)) * _1909;
    float _3765 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.31831014156341552734375;
    uint _1947 = _1824 + 9u;
    float _1953 = cbLight._m0[_1859].x + _536;
    float _1954 = cbLight._m0[_1859].y + _537;
    float _1955 = cbLight._m0[_1859].z + _538;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1963 = dot(vec3(0.0), vec3(cbLight._m0[_1859].xyz));
    float _3776 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_1953 * _1959, _1954 * _1959, _1955 * _1959));
    float _3787 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1980 = (0.5 / ((_1966 + 9.9999999392252902907785028219223e-09) + _1913)) * _1966;
    float _3798 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.31831014156341552734375;
    float _1992 = (((_1976 * cbLight._m0[_1947].x) * _1982) * _1842) + ((((cbLight._m0[_1890].x * _1813) * _1925) * _1933) * _1855);
    float _1993 = (((_1976 * cbLight._m0[_1947].y) * _1982) * _1842) + ((((cbLight._m0[_1890].y * _1815) * _1925) * _1933) * _1855);
    float _1994 = (((_1976 * cbLight._m0[_1947].z) * _1982) * _1842) + ((((cbLight._m0[_1890].z * _1817) * _1925) * _1933) * _1855);
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    float _2167;
    if (_1822.y == 0u)
    {
        uvec4 _2112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2113 = _2112.x;
        uint _2124 = uint((float(_2112.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2113))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2113)));
        float _2134 = (log2(_1599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2135 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        uint _2138 = uint(isnan(14.0) ? _2135 : (isnan(_2135) ? 14.0 : min(_2135, 14.0)));
        uvec4 _2143 = texelFetch(g_lightClusterGridBuffer, int(((_2138 << 2u) + (_2124 << 6u)) >> 2u));
        uint _2144 = _2143.x;
        uint _2145 = _2112.z;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        if (((((1u << ((_2145 >> 4u) & 15u)) + 4294967295u) & _2144) == 0u) || ((_2145 & 240u) == 0u))
        {
            _2252 = 0.0;
            _2254 = 0.0;
            _2256 = 0.0;
            _2258 = 0.0;
            _2260 = 0.0;
            _2262 = 0.0;
        }
        else
        {
            float _2253;
            float _2255;
            float _2257;
            float _2259;
            float _2261;
            float _2263;
            float _2429 = 0.0;
            float _2430 = 0.0;
            float _2431 = 0.0;
            float _2432 = 0.0;
            float _2433 = 0.0;
            float _2434 = 0.0;
            uint _2435 = 0u;
            uint _2444;
            bool _2445;
            for (;;)
            {
                _2444 = texelFetch(g_lightClassification, int((((_2138 << 5u) + (_2124 << 9u)) + (_2435 << 2u)) >> 2u)).x;
                _2445 = _2444 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2445)
                {
                    frontier_phi_87_pred = _2429;
                    frontier_phi_87_pred_1 = _2434;
                    frontier_phi_87_pred_2 = _2433;
                    frontier_phi_87_pred_3 = _2432;
                    frontier_phi_87_pred_4 = _2431;
                    frontier_phi_87_pred_5 = _2430;
                }
                else
                {
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    uint _2601;
                    _2595 = _2429;
                    _2596 = _2430;
                    _2597 = _2431;
                    _2598 = _2432;
                    _2599 = _2433;
                    _2600 = _2434;
                    _2601 = _2444;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    for (;;)
                    {
                        uint _2605 = uint(findLSB(_2601)) + (_2435 << 5u);
                        uint _2602 = (_2601 + 4294967295u) & _2601;
                        uint _2607 = _2605 * 48u;
                        vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2607)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 3u)).x));
                        uint _2627 = (_2605 * 48u) + 4u;
                        vec4 _2640 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2646 = (_2605 * 48u) + 8u;
                        vec3 _2657 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x));
                        float _2661 = _2621.x - _1597;
                        float _2662 = _2621.y - _1598;
                        float _2663 = _2621.z - _1599;
                        float _2664 = dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663));
                        float _2667 = inversesqrt(_2664);
                        float _2676 = 1.0 - (_2664 * _2621.w);
                        float _3819 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2677 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                        float _2678 = sqrt(_2664) * _2640.w;
                        float _2681 = 1.39999997615814208984375 / (_2678 + 1.39999997615814208984375);
                        float _2682 = _2681 * _2681;
                        float _2685 = ((1.0 - _2682) * dot(vec3(0.0), vec3(_2667 * _2661, _2667 * _2662, _2667 * _2663))) + _2682;
                        float _2688 = _2678 * _2678;
                        float _2692 = ((isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))) * _2677) / ((_2688 * 0.699999988079071044921875) + 1.0);
                        float _2696 = (-0.0) - _1597;
                        float _2697 = (-0.0) - _1598;
                        float _2698 = (-0.0) - _1599;
                        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
                        float _2706 = dot(vec3(0.0), vec3(_2702 * _2696, _2702 * _2697, _2702 * _2698));
                        float _3835 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _3846 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2710 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
                        float _2714 = (0.5 / (((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) + 9.9999999392252902907785028219223e-09) + _2710)) * _2710;
                        float _3857 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2723 = (((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 3.1415927410125732421875) / ((_2688 * 2.1991131305694580078125) + 3.141590118408203125)) * _2677;
                        _2525 = (_2692 * _2640.x) + _2598;
                        _2526 = (_2692 * _2640.y) + _2599;
                        _2527 = (_2692 * _2640.z) + _2600;
                        _2522 = (_2723 * _2657.x) + _2595;
                        _2523 = (_2723 * _2657.y) + _2596;
                        _2524 = (_2723 * _2657.z) + _2597;
                        if (_2602 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2595 = _2522;
                            _2596 = _2523;
                            _2597 = _2524;
                            _2598 = _2525;
                            _2599 = _2526;
                            _2600 = _2527;
                            _2601 = _2602;
                        }
                    }
                    frontier_phi_87_pred = _2522;
                    frontier_phi_87_pred_1 = _2527;
                    frontier_phi_87_pred_2 = _2526;
                    frontier_phi_87_pred_3 = _2525;
                    frontier_phi_87_pred_4 = _2524;
                    frontier_phi_87_pred_5 = _2523;
                }
                _2253 = frontier_phi_87_pred;
                _2263 = frontier_phi_87_pred_1;
                _2261 = frontier_phi_87_pred_2;
                _2259 = frontier_phi_87_pred_3;
                _2257 = frontier_phi_87_pred_4;
                _2255 = frontier_phi_87_pred_5;
                uint _2436 = _2435 + 1u;
                if (_2436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2429 = _2253;
                    _2430 = _2255;
                    _2431 = _2257;
                    _2432 = _2259;
                    _2433 = _2261;
                    _2434 = _2263;
                    _2435 = _2436;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2252 = _2253;
            _2254 = _2255;
            _2256 = _2257;
            _2258 = _2259;
            _2260 = _2261;
            _2262 = _2263;
        }
        uvec4 _2266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2267 = _2266.z;
        uint _2269 = (_2267 >> 8u) & 15u;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((4294967295u << _2269) & _2144) == 0u)
        {
            _2400 = _2252;
            _2402 = _2254;
            _2404 = _2256;
            _2406 = _2258;
            _2408 = _2260;
            _2410 = _2262;
        }
        else
        {
            float _2425 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2269 < ((_2267 >> 12u) & 15u))
            {
                float _2401;
                float _2403;
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2578 = _2252;
                float _2579 = _2254;
                float _2580 = _2256;
                float _2581 = _2258;
                float _2582 = _2260;
                float _2583 = _2262;
                uint _2584 = _2269;
                uint _2593;
                bool _2594;
                for (;;)
                {
                    _2593 = texelFetch(g_lightClassification, int((((_2138 << 5u) + (_2124 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                    _2594 = _2593 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2594)
                    {
                        frontier_phi_98_pred = _2583;
                        frontier_phi_98_pred_1 = _2582;
                        frontier_phi_98_pred_2 = _2581;
                        frontier_phi_98_pred_3 = _2580;
                        frontier_phi_98_pred_4 = _2579;
                        frontier_phi_98_pred_5 = _2578;
                    }
                    else
                    {
                        float _2737;
                        float _2738;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2750 = _2578;
                        float _2751 = _2579;
                        float _2752 = _2580;
                        float _2753 = _2581;
                        float _2754 = _2582;
                        float _2755 = _2583;
                        uint _2756 = _2593;
                        uint _2757;
                        vec4 _2782;
                        float _2783;
                        vec4 _2798;
                        vec3 _2810;
                        vec4 _2825;
                        vec4 _2840;
                        float _2886;
                        bool _2887;
                        for (;;)
                        {
                            uint _2767 = ((_2584 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2756));
                            _2757 = (_2756 + 4294967295u) & _2756;
                            uint _2769 = _2767 * 40u;
                            _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            _2783 = _2782.w;
                            uint _2785 = (_2767 * 40u) + 4u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            uint _2800 = (_2767 * 40u) + 8u;
                            _2810 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x));
                            uint _2812 = (_2767 * 40u) + 16u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2767 * 40u) + 20u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2767 * 40u) + 24u;
                            vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2861 = (_2767 * 40u) + 28u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            _2886 = fma(_1599, _2874.z, fma(_1598, _2874.y, _2874.x * _1597)) + _2874.w;
                            _2887 = !((fma(_1599, _2855.z, fma(_1598, _2855.y, _2855.x * _1597)) + _2855.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_2887)
                            {
                                float _2914 = _2782.x - _1597;
                                float _2915 = _2782.y - _1598;
                                float _2916 = _2782.z - _1599;
                                float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                                float _2920 = inversesqrt(_2917);
                                float _2921 = _2920 * _2914;
                                float _2922 = _2920 * _2915;
                                float _2923 = _2920 * _2916;
                                float _2927 = 1.0 - (_2917 / (_2783 * _2783));
                                float _3868 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                                float _2928 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
                                float _2932 = sqrt(_2917) * _2798.w;
                                float _2934 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                                float _2935 = _2934 * _2934;
                                float _2936 = 1.0 - _2935;
                                float _2938 = (_2936 * dot(vec3(_2921, _2922, _2923), vec3(0.0))) + _2935;
                                float _2941 = _2932 * _2932;
                                float _2945 = (fma(_1599, _2825.z, fma(_1598, _2825.y, _2825.x * _1597)) + _2825.w) / _2886;
                                float _2946 = (fma(_1599, _2840.z, fma(_1598, _2840.y, _2840.x * _1597)) + _2840.w) / _2886;
                                float _2950 = 1.0 - dot(vec2(_2945, _2946), vec2(_2945, _2946));
                                float _3884 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2951 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                                float _2952 = _2951 * (((isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))) * _2928) / ((_2941 * 0.699999988079071044921875) + 1.0));
                                float _2962 = dot(vec3(0.0), vec3((-0.0) - (_1597 * _2425), (-0.0) - (_1598 * _2425), (-0.0) - (_1599 * _2425)));
                                float _3895 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2970 = (_2936 * dot(vec3(0.0), vec3(_2921, _2922, _2923))) + _2935;
                                float _3906 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2971 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                                float _2975 = (0.5 / (((isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) + 9.9999999392252902907785028219223e-09) + _2971)) * _2971;
                                float _3917 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2982 = (_2951 * _2928) * (((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 3.1415927410125732421875) / ((_2941 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_104_pred = _2952 * _2798.y;
                                frontier_phi_104_pred_1 = _2952 * _2798.x;
                                frontier_phi_104_pred_2 = _2982 * _2810.z;
                                frontier_phi_104_pred_3 = _2982 * _2810.y;
                                frontier_phi_104_pred_4 = _2982 * _2810.x;
                                frontier_phi_104_pred_5 = _2952 * _2798.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _2990 = frontier_phi_104_pred;
                            _2989 = frontier_phi_104_pred_1;
                            _2988 = frontier_phi_104_pred_2;
                            _2987 = frontier_phi_104_pred_3;
                            _2986 = frontier_phi_104_pred_4;
                            _2991 = frontier_phi_104_pred_5;
                            _2740 = _2989 + _2753;
                            _2741 = _2990 + _2754;
                            _2742 = _2991 + _2755;
                            _2737 = _2986 + _2750;
                            _2738 = _2987 + _2751;
                            _2739 = _2988 + _2752;
                            if (_2757 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2750 = _2737;
                                _2751 = _2738;
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2757;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _2742;
                        frontier_phi_98_pred_1 = _2741;
                        frontier_phi_98_pred_2 = _2740;
                        frontier_phi_98_pred_3 = _2739;
                        frontier_phi_98_pred_4 = _2738;
                        frontier_phi_98_pred_5 = _2737;
                    }
                    _2411 = frontier_phi_98_pred;
                    _2409 = frontier_phi_98_pred_1;
                    _2407 = frontier_phi_98_pred_2;
                    _2405 = frontier_phi_98_pred_3;
                    _2403 = frontier_phi_98_pred_4;
                    _2401 = frontier_phi_98_pred_5;
                    uint _2585 = _2584 + 1u;
                    if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2578 = _2401;
                        _2579 = _2403;
                        _2580 = _2405;
                        _2581 = _2407;
                        _2582 = _2409;
                        _2583 = _2411;
                        _2584 = _2585;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2405;
                frontier_phi_78_79_ladder_1 = _2411;
                frontier_phi_78_79_ladder_2 = _2409;
                frontier_phi_78_79_ladder_3 = _2407;
                frontier_phi_78_79_ladder_4 = _2403;
                frontier_phi_78_79_ladder_5 = _2401;
            }
            else
            {
                frontier_phi_78_79_ladder = _2256;
                frontier_phi_78_79_ladder_1 = _2262;
                frontier_phi_78_79_ladder_2 = _2260;
                frontier_phi_78_79_ladder_3 = _2258;
                frontier_phi_78_79_ladder_4 = _2254;
                frontier_phi_78_79_ladder_5 = _2252;
            }
            _2400 = frontier_phi_78_79_ladder_5;
            _2402 = frontier_phi_78_79_ladder_4;
            _2404 = frontier_phi_78_79_ladder;
            _2406 = frontier_phi_78_79_ladder_3;
            _2408 = frontier_phi_78_79_ladder_2;
            _2410 = frontier_phi_78_79_ladder_1;
        }
        float _2415 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
        _2157 = (_2415 * _2406) + _1887;
        _2159 = (_2415 * _2408) + _1888;
        _2161 = (_2415 * _2410) + _1889;
        _2163 = ((_2400 * 0.039999999105930328369140625) * _2415) + _1992;
        _2165 = ((_2402 * 0.039999999105930328369140625) * _2415) + _1993;
        _2167 = ((_2404 * 0.039999999105930328369140625) * _2415) + _1994;
    }
    else
    {
        _2157 = _1887;
        _2159 = _1888;
        _2161 = _1889;
        _2163 = _1992;
        _2165 = _1993;
        _2167 = _1994;
    }
    float _3933 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3944 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3955 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2184 = ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2157 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _598))) + ((_2163 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2185 = ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_2159 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _598))) + ((_2165 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2186 = ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2161 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _598))) + ((_2167 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2187 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    uint _2190 = _572 + 6u;
    float _2198 = _558 / cbSceneParam._m0[86u].x;
    float _2199 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2213 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2198, _2199, (log2((isnan(cbSceneParam._m0[77u].w) ? _531 : (isnan(_531) ? cbSceneParam._m0[77u].w : min(_531, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2215 = _2213.x;
    float _2216 = _2213.y;
    float _2217 = _2213.z;
    float _2218 = _2213.w;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    if (_531 > cbSceneParam._m0[78u].w)
    {
        float _2277 = isnan(_531) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _531 : min(cbSceneParam._m0[80u].w, _531));
        float _2278 = _2277 / _531;
        float _2289 = _2278 * _259;
        float _2290 = _260 * _2278;
        float _2291 = (-0.0) - _2290;
        float _2292 = _2278 * _261;
        float _2294 = (cbSceneParam._m0[77u].w * _2291) / _2277;
        float _2295 = _2294 + cbSceneParam._m0[79u].w;
        float _2296 = cbSceneParam._m0[79u].w - _2290;
        float _2302 = sqrt(((_2289 * _2289) + (_2290 * _2290)) + (_2292 * _2292));
        float _2305 = (1.0 - (cbSceneParam._m0[77u].w / _2277)) * _2302;
        float _2310 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2312 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2535;
        if (abs((_2291 - _2294) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2535 = ((((_2295 > 0.0) ? exp2(_2310 * _2295) : (2.0 - exp2(_2312 * _2295))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2305;
        }
        else
        {
            float _2458 = 1.0 / cbSceneParam._m0[80u].x;
            float _2459 = isnan(_2296) ? _2295 : (isnan(_2295) ? _2296 : max(_2295, _2296));
            float _2460 = isnan(_2296) ? _2295 : (isnan(_2295) ? _2296 : min(_2295, _2296));
            float _2469 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : min(_2459, 0.0));
            float _2470 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : min(_2460, 0.0));
            _2535 = ((abs(_2302 / _2291) * cbSceneParam._m0[80u].y) * ((((_2469 - _2470) * 2.0) - ((exp2(_2310 * (isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0)))) - exp2(_2310 * (isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0))))) * _2458)) - ((exp2(_2312 * _2469) - exp2(_2312 * _2470)) * _2458))) + (_2305 * cbSceneParam._m0[80u].z);
        }
        vec4 _2537 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2198, _2199, 1.0), 0.0);
        float _2546 = exp2((_2535 * (-1.44269502162933349609375)) * (1.0 - _2537.w));
        float _2547 = log2(_2546);
        float _2563 = log2(_2218);
        _2314 = (exp2(_2563 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2547 * cbSceneParam._m0[78u].x)) * _2537.x) / cbSceneParam._m0[78u].x)) + _2215;
        _2316 = (exp2(_2563 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2547 * cbSceneParam._m0[78u].y)) * _2537.y) / cbSceneParam._m0[78u].y)) + _2216;
        _2318 = (exp2(_2563 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2547 * cbSceneParam._m0[78u].z)) * _2537.z) / cbSceneParam._m0[78u].z)) + _2217;
        _2320 = _2546 * _2218;
    }
    else
    {
        _2314 = _2215;
        _2316 = _2216;
        _2318 = _2217;
        _2320 = _2218;
    }
    bool _2573;
    vec4 _2330;
    vec4 _2353;
    float _2355;
    float _2359;
    float _2360;
    float _2361;
    float _2362;
    bool _2373;
    for (;;)
    {
        _2330 = cbMatDynParam._m0[0u];
        float _2332 = roundEven(_2330.y);
        bool _2333 = _2332 == 3.0;
        float _2335 = log2(_2320);
        float _2342 = exp2(_2335 * cbSceneParam._m0[78u].x) * _2187;
        float _2343 = exp2(_2335 * cbSceneParam._m0[78u].y) * _2188;
        float _2344 = exp2(_2335 * cbSceneParam._m0[78u].z) * _2189;
        float _2351 = _545 + (-0.5);
        _2353 = cbMtdParam._m0[1u];
        _2355 = _2353.y * _2351;
        float _2358 = (_2332 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2359 = _2358 * (_2333 ? _2342 : (_2342 + (cbSceneParam._m0[72u].w * _2314)));
        _2360 = _2358 * (_2333 ? _2343 : (_2343 + (cbSceneParam._m0[72u].w * _2316)));
        _2361 = _2358 * (_2333 ? _2344 : (_2344 + (cbSceneParam._m0[72u].w * _2318)));
        _2362 = _2351 * 0.999000012874603271484375;
        _2373 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2373)
        {
            if ((cbInstanceData._m0[_572 + 7u].x + _2362) < 0.5)
            {
                _2573 = true;
                break;
            }
        }
        uint _2493 = _574 + uint(_2330.w);
        if ((cbInstanceData._m0[_2493].w < 1.0) && ((cbInstanceData._m0[_2493].w + _2362) < 0.5))
        {
            _2573 = true;
            break;
        }
        if ((_2355 + 1.0) < _2353.x)
        {
            _2573 = true;
            break;
        }
        _2573 = false;
        break;
    }
    float _2728;
    if (_2573)
    {
        discard_state = true;
        _2728 = 0.0;
    }
    else
    {
        _2728 = cbInstanceData._m0[_2190].w;
    }
    SV_Target.x = _2359;
    SV_Target.y = _2360;
    SV_Target.z = _2361;
    SV_Target.w = _2728;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2190].w;
    discard_exit();
}


