#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _426;
float _3216;
float _3217;
float _3218;
float _3219;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _341 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _351 = (_341.y * 2.0) + (-1.0);
    float _357 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _364 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _373 = cbMtdParam._m0[23u].x + _261;
    float _374 = cbMtdParam._m0[23u].y + _262;
    float _375 = cbMtdParam._m0[23u].z + _263;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_357 * _190, _357 * _191, _357 * _192));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_364 * _204, _364 * _205, _364 * _206));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _395 * _391;
    float _401 = ((cbMtdParam._m0[19u].w * _389) * _395) + (_349 * cbMtdParam._m0[20u].y);
    float _402 = ((cbMtdParam._m0[20u].x * _390) * _395) + (_351 * cbMtdParam._m0[20u].z);
    float _405 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _406 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _424;
    float _427;
    float _429;
    if (_401 > 0.0)
    {
        float _410 = (1.0 - _405) / _401;
        _424 = _410;
        _427 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_410 * _396)) * 0.16666667163372039794921875;
        _429 = (fract((_410 * _402) + _406) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_401 < 0.0)
        {
            float _425 = ((-0.0) - _405) / _401;
            frontier_phi_3_2_ladder = _425;
            frontier_phi_3_2_ladder_1 = (fract((_425 * _402) + _406) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_425 * _396) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _426;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _424 = frontier_phi_3_2_ladder;
        _427 = frontier_phi_3_2_ladder_2;
        _429 = frontier_phi_3_2_ladder_1;
    }
    float _455;
    float _457;
    float _459;
    if (_402 > 0.0)
    {
        float _442 = (1.0 - _406) / _402;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_442 < _424)
        {
            frontier_phi_8_5_ladder = (fract(_442 * _396) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_442 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _442;
        }
        else
        {
            frontier_phi_8_5_ladder = _429;
            frontier_phi_8_5_ladder_1 = _427;
            frontier_phi_8_5_ladder_2 = _424;
        }
        _455 = frontier_phi_8_5_ladder_2;
        _457 = frontier_phi_8_5_ladder_1;
        _459 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_402 < 0.0)
        {
            float _456 = ((-0.0) - _406) / _402;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_456 < _424)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_456 * _396) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_456 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _456;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _429;
                frontier_phi_8_6_ladder_9_ladder_1 = _427;
                frontier_phi_8_6_ladder_9_ladder_2 = _424;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _429;
            frontier_phi_8_6_ladder_1 = _427;
            frontier_phi_8_6_ladder_2 = _424;
        }
        _455 = frontier_phi_8_6_ladder_2;
        _457 = frontier_phi_8_6_ladder_1;
        _459 = frontier_phi_8_6_ladder;
    }
    float _463 = (_396 > 0.0) ? (cbMtdParam._m0[16u].w / _396) : 5000.0;
    float _476;
    float _477;
    if (_463 < _455)
    {
        _476 = ((_405 + cbMtdParam._m0[17u].x) + (_463 * _401)) * 0.16666667163372039794921875;
        _477 = (((_463 * _402) + _406) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _476 = _457;
        _477 = _459;
    }
    vec4 _479 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_476, _477));
    float _484 = _479.x * cbMtdParam._m0[13u].x;
    float _485 = _479.y * cbMtdParam._m0[13u].y;
    float _486 = _479.z * cbMtdParam._m0[13u].z;
    vec4 _504 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _508 = _504.z;
    float _511 = (_504.x * 2.0) + (-1.0);
    float _512 = (_504.y * 2.0) + (-1.0);
    float _513 = dot(vec2(_511, _512), vec2(_511, _512));
    float _3228 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))));
    float _519 = _508 * _288;
    float _529 = (cbMtdParam._m0[15u].w * ((_345 - _519) + ((_508 - _345) * _288))) + _519;
    float _537 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _288))) + _511;
    float _538 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _288))) + _512;
    float _541 = fma(_518, _197, fma(_538, _204, _537 * _190));
    float _544 = fma(_518, _198, fma(_538, _205, _537 * _191));
    float _547 = fma(_518, _199, fma(_538, _206, _537 * _192));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3239 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _555 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3261 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3272 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _579 = _261 * _578;
    float _580 = _262 * _578;
    float _581 = _263 * _578;
    vec4 _586 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _588 = _586.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _750 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _756 = (cbMatDynParam._m0[5u].x * _750) + cbMatDynParam._m0[5u].y;
        float _3283 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _761 = (cbMatDynParam._m0[5u].z * _750) + cbMatDynParam._m0[5u].w;
        float _3294 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) - _757)) + _757) < ((_588 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _606 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _607 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _626 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _629 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _632 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _645 = uint(roundEven(NORMAL.w)) * 13u;
    uint _646 = _645 + 9u;
    uint _647 = _646 + uint(cbMatDynParam._m0[0u].w);
    float _653 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_647].x;
    float _654 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_647].y;
    float _655 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_647].z;
    float _3305 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _606, cbSceneParam._m0[86u].y * _607));
    float _670 = _667.x * TEXCOORD.z;
    float _671 = dot(vec3(_552, _553, _554), vec3(_579, _580, _581));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _552) - _579;
    float _679 = (_674 * _553) - _580;
    float _680 = (_674 * _554) - _581;
    float _684 = abs(dot(vec3(_579, _580, _581), vec3(_552, _553, _554)));
    float _3338 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _686 = sqrt(_555);
    float _699 = exp2((_686 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_686 * 3.0));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _795 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _799 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _803 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _827 = _731 + _552;
        float _828 = _735 + _553;
        float _829 = _739 + _554;
        float _839 = fma(_829, cbModelParam._m0[26u].z, fma(_828, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827)) - _795;
        float _840 = fma(_829, cbModelParam._m0[27u].z, fma(_828, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827)) - _799;
        float _841 = fma(_829, cbModelParam._m0[28u].z, fma(_828, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827)) - _803;
        float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
        float _858 = ((_845 * _839) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_795 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_845 * _840) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_799 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_845 * _841) / cbModelParam._m0[34u].z) + ((((((_803 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_858, _859, _860), 0.0);
        float _897 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_863.x + (-0.5));
        float _899 = _897 * (_863.y + (-0.5));
        float _900 = _897 * (_863.z + (-0.5));
        float _907 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_870.x + (-0.5));
        float _909 = _907 * (_870.y + (-0.5));
        float _910 = _907 * (_870.z + (-0.5));
        float _917 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_877.x + (-0.5));
        float _919 = _917 * (_877.y + (-0.5));
        float _920 = _917 * (_877.z + (-0.5));
        float _927 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_884.x + (-0.5));
        float _929 = _927 * (_884.y + (-0.5));
        float _930 = _927 * (_884.z + (-0.5));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = _898 * 0.5;
        float _935 = _908 * 0.5;
        float _936 = _918 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _951 = (dot(vec3(_552, _553, _554), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _961 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3386 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_963 + 1.0))) + _968) * _931;
        float _978 = _899 * 0.5;
        float _979 = _909 * 0.5;
        float _980 = _919 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_552, _553, _554), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3419 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_1005 + 1.0))) + _1010) * _932;
        float _1020 = _900 * 0.5;
        float _1021 = _910 * 0.5;
        float _1022 = _920 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_552, _553, _554), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3452 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_1047 + 1.0))) + _1052) * _933;
        _1069 = _900;
        _1070 = _899;
        _1071 = _898;
        _1072 = _910;
        _1073 = _909;
        _1074 = _908;
        _1075 = _920;
        _1076 = _919;
        _1077 = _918;
        _1078 = _933;
        _1079 = _932;
        _1080 = _931;
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
    }
    else
    {
        _1069 = _426;
        _1070 = _426;
        _1071 = _426;
        _1072 = _426;
        _1073 = _426;
        _1074 = _426;
        _1075 = _426;
        _1076 = _426;
        _1077 = _426;
        _1078 = _426;
        _1079 = _426;
        _1080 = _426;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1116 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1120 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1143 = _731 + _552;
        float _1144 = _735 + _553;
        float _1145 = _739 + _554;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_552, _553, _554), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3515 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_552, _553, _554), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3548 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_552, _553, _554), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3581 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _426;
        _1382 = _426;
        _1383 = _426;
        _1384 = _426;
        _1385 = _426;
        _1386 = _426;
        _1387 = _426;
        _1388 = _426;
        _1389 = _426;
        _1390 = _426;
        _1391 = _426;
        _1392 = _426;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1082)) + _1082;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _678 * 0.5;
    float _1450 = _679 * 0.5;
    float _1451 = _680 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1566 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1570 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1574 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1577 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1580 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1583 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1611;
        if (_1577 > 0.0)
        {
            _1611 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1611 = frontier_phi_29_27_ladder;
        }
        float _1960;
        if (_1580 > 0.0)
        {
            _1960 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1960 = frontier_phi_38_34_ladder;
        }
        float _2284;
        if (_1583 > 0.0)
        {
            _2284 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2284 = frontier_phi_52_45_ladder;
        }
        float _2286 = isnan(_1960) ? _1611 : (isnan(_1611) ? _1960 : min(_1611, _1960));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1577) + _1566;
        float _2292 = (_2287 * _1580) + _1570;
        float _2293 = (_2287 * _1583) + _1574;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_28_52_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1599 = frontier_phi_28_52_ladder_2;
        _1601 = frontier_phi_28_52_ladder_1;
        _1603 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1518);
        _1599 = _1587.x * cbModelParam._m0[1u].y;
        _1601 = _1587.y * cbModelParam._m0[1u].y;
        _1603 = _1587.z * cbModelParam._m0[1u].y;
    }
    float _1607 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1607 : min(cbModelParam._m0[25u].w, _1607));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1663 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1667 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1671 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1674 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1677 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1680 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1965;
        if (_1674 > 0.0)
        {
            _1965 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1965 = frontier_phi_40_36_ladder;
        }
        float _2310;
        if (_1677 > 0.0)
        {
            _2310 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2310 = frontier_phi_54_47_ladder;
        }
        float _2500;
        if (_1680 > 0.0)
        {
            _2500 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2500 = frontier_phi_72_65_ladder;
        }
        float _2502 = isnan(_2310) ? _1965 : (isnan(_1965) ? _2310 : min(_1965, _2310));
        float _2503 = isnan(_2500) ? _2502 : (isnan(_2502) ? _2500 : min(_2502, _2500));
        float _2507 = (_2503 * _1674) + _1663;
        float _2508 = (_2503 * _1677) + _1667;
        float _2509 = (_2503 * _1680) + _1671;
        float _2510 = _2503 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2510;
        float _2513 = _2510 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2509 > _2513) || ((_2509 < _2511) || ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 < _2511) || (_2507 > _2513))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2509, cbModelParam._m0[17u].z, fma(_2508, cbModelParam._m0[17u].y, _2507 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2509, cbModelParam._m0[18u].z, fma(_2508, cbModelParam._m0[18u].y, _2507 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2509, cbModelParam._m0[19u].z, fma(_2508, cbModelParam._m0[19u].y, _2507 * cbModelParam._m0[19u].x))), _1608);
            frontier_phi_37_72_ladder = _2751.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2751.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2751.x * cbModelParam._m0[1u].z;
        }
        _1699 = frontier_phi_37_72_ladder_2;
        _1701 = frontier_phi_37_72_ladder_1;
        _1703 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1608);
        _1699 = _1683.x * cbModelParam._m0[1u].z;
        _1701 = _1683.y * cbModelParam._m0[1u].z;
        _1703 = _1683.z * cbModelParam._m0[1u].z;
    }
    float _1715 = ((((1.0 - _699) * ((_686 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_699 * _686)) * _670;
    float _1716 = _1715 * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1717 = _1715 * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1718 = _1715 * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    uvec4 _1737 = floatBitsToUint(cbInstanceData._m0[_645 + 5u]);
    uint _1739 = _1737.x * 14u;
    uint _1740 = _1739 + 13u;
    float _1745 = _670 + (-1.0);
    float _1748 = (cbLight._m0[_1740].x * _1745) + 1.0;
    float _1749 = (cbLight._m0[_1740].y * _1745) + 1.0;
    uint _1750 = _1739 + 5u;
    float _1756 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1760 = _1739 + 4u;
    float _1767 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1771 = _1739 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_552, _553, _554));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_552, _553, _554));
    float _3717 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3728 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1750].x * _1756) * _1792) + ((cbLight._m0[_1760].x * _1767) * _1790);
    float _1800 = ((_1756 * cbLight._m0[_1750].y) * _1792) + ((_1767 * cbLight._m0[_1760].y) * _1790);
    float _1801 = ((_1756 * cbLight._m0[_1750].z) * _1792) + ((_1767 * cbLight._m0[_1760].z) * _1790);
    uint _1803 = _1739 + 8u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _555) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1739].x + _579;
    float _1819 = cbLight._m0[_1739].y + _580;
    float _1820 = cbLight._m0[_1739].z + _581;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1739].xyz));
    float _3739 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _1832 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _1833 = dot(vec3(_552, _553, _554), vec3(_1825, _1826, _1827));
    float _3761 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1825, _1826, _1827));
    float _3772 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1817 * _1817;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1857 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1832 * ((_1831 * _1857) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1857) + _1817) * _1831))) * _1831;
    float _3783 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    uint _1881 = _1739 + 9u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _555) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1771].x + _579;
    float _1895 = cbLight._m0[_1771].y + _580;
    float _1896 = cbLight._m0[_1771].z + _581;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1771].xyz));
    float _3794 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1908 = dot(vec3(_552, _553, _554), vec3(_1901, _1902, _1903));
    float _3805 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1912 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1901, _1902, _1903));
    float _3816 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = _1893 * _1893;
    float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
    float _1929 = (exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1930 = 1.0 - _1893;
    float _1940 = (0.5 / (((_1832 * ((_1907 * _1930) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1930) + _1893) * _1907))) * _1907;
    float _3827 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
    float _1952 = (((_1929 * cbLight._m0[_1881].x) * _1942) * _1756) + (((_1856 * cbLight._m0[_1803].x) * _1870) * _1767);
    float _1953 = (((_1929 * cbLight._m0[_1881].y) * _1942) * _1756) + (((_1856 * cbLight._m0[_1803].y) * _1870) * _1767);
    float _1954 = (((_1929 * cbLight._m0[_1881].z) * _1942) * _1756) + (((_1856 * cbLight._m0[_1803].z) * _1870) * _1767);
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    float _2077;
    float _2079;
    if (_1737.y == 0u)
    {
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2009;
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2009;
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2009;
        uvec4 _2024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2025 = _2024.x;
        uint _2036 = uint((float(_2024.y) * floor(float(uint(cbSceneParam._m0[85u].y * _607) / _2025))) + floor(float(uint(cbSceneParam._m0[85u].x * _606) / _2025)));
        float _2046 = (log2(_2012 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2047 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        uint _2050 = uint(isnan(14.0) ? _2047 : (isnan(_2047) ? 14.0 : min(_2047, 14.0)));
        uvec4 _2055 = texelFetch(g_lightClusterGridBuffer, int(((_2050 << 2u) + (_2036 << 6u)) >> 2u));
        uint _2056 = _2055.x;
        uint _2057 = _2024.z;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        if (((((1u << ((_2057 >> 4u) & 15u)) + 4294967295u) & _2056) == 0u) || ((_2057 & 240u) == 0u))
        {
            _2163 = 0.0;
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
            _2173 = 0.0;
        }
        else
        {
            float _2164;
            float _2166;
            float _2168;
            float _2170;
            float _2172;
            float _2174;
            float _2347 = 0.0;
            float _2348 = 0.0;
            float _2349 = 0.0;
            float _2350 = 0.0;
            float _2351 = 0.0;
            float _2352 = 0.0;
            uint _2353 = 0u;
            uint _2362;
            bool _2363;
            for (;;)
            {
                _2362 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2353 << 2u)) >> 2u)).x;
                _2363 = _2362 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2363)
                {
                    frontier_phi_67_pred = _2350;
                    frontier_phi_67_pred_1 = _2349;
                    frontier_phi_67_pred_2 = _2348;
                    frontier_phi_67_pred_3 = _2347;
                    frontier_phi_67_pred_4 = _2351;
                    frontier_phi_67_pred_5 = _2352;
                }
                else
                {
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    uint _2549;
                    _2543 = _2347;
                    _2544 = _2348;
                    _2545 = _2349;
                    _2546 = _2350;
                    _2547 = _2351;
                    _2548 = _2352;
                    _2549 = _2362;
                    float _2444;
                    float _2445;
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    for (;;)
                    {
                        uint _2553 = uint(findLSB(_2549)) + (_2353 << 5u);
                        uint _2550 = (_2549 + 4294967295u) & _2549;
                        uint _2555 = _2553 * 48u;
                        vec4 _2569 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 3u)).x));
                        uint _2575 = (_2553 * 48u) + 4u;
                        vec4 _2588 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2575)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 3u)).x));
                        uint _2594 = (_2553 * 48u) + 8u;
                        vec3 _2605 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2594)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 2u)).x));
                        float _2609 = _2569.x - _2010;
                        float _2610 = _2569.y - _2011;
                        float _2611 = _2569.z - _2012;
                        float _2612 = dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611));
                        float _2615 = inversesqrt(_2612);
                        float _2616 = _2615 * _2609;
                        float _2617 = _2615 * _2610;
                        float _2618 = _2615 * _2611;
                        float _2619 = dot(vec3(_626, _629, _632), vec3(_2616, _2617, _2618));
                        float _2624 = 1.0 - (_2612 * _2569.w);
                        float _3848 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
                        float _2625 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
                        float _2626 = sqrt(_2612) * _2588.w;
                        float _2629 = 1.39999997615814208984375 / (_2626 + 1.39999997615814208984375);
                        float _2630 = _2629 * _2629;
                        float _2633 = ((1.0 - _2630) * _2619) + _2630;
                        float _2636 = _2626 * _2626;
                        float _2640 = ((isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0))) * _2625) / ((_2636 * 0.699999988079071044921875) + 1.0);
                        float _2644 = (-0.0) - _2010;
                        float _2645 = (-0.0) - _2011;
                        float _2646 = (-0.0) - _2012;
                        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
                        float _2651 = _2650 * _2644;
                        float _2652 = _2650 * _2645;
                        float _2653 = _2650 * _2646;
                        float _2661 = exp2(log2(1.0 / ((_2636 * 3.5) + 5.0)) * 0.25);
                        float _2662 = 1.0 - _686;
                        float _2669 = sqrt(1.0 - ((1.0 - (_2662 * _2662)) * (1.0 - (_2661 * _2661))));
                        float _2670 = _2669 * _2669;
                        float _2671 = _2670 * _2670;
                        float _2672 = _2651 + _2616;
                        float _2673 = _2652 + _2617;
                        float _2674 = _2653 + _2618;
                        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
                        float _2682 = dot(vec3(_626, _629, _632), vec3(_2651, _2652, _2653));
                        float _3864 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2685 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                        float _2686 = dot(vec3(_626, _629, _632), vec3(_2678 * _2672, _2678 * _2673, _2678 * _2674));
                        float _3875 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2689 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
                        float _2693 = ((_2689 * _2689) * (_2671 + (-1.0))) + 1.0;
                        float _2694 = _2629 * _2670;
                        float _2695 = _2694 * _2694;
                        float _2698 = ((1.0 - _2695) * _2619) + _2695;
                        float _3886 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2699 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
                        float _2700 = 1.0 - _2670;
                        float _2710 = (0.5 / (((_2699 * ((_2685 * _2700) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2699 * _2700) + _2670) * _2685))) * _2699;
                        float _3897 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2721 = (((_2671 * 3.1415927410125732421875) * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) / ((_2693 * _2693) * ((_2636 * 2.1991131305694580078125) + 3.141590118408203125))) * _2625;
                        _2447 = (_2640 * _2588.x) + _2546;
                        _2448 = (_2640 * _2588.y) + _2547;
                        _2449 = (_2640 * _2588.z) + _2548;
                        _2444 = (_2721 * _2605.x) + _2543;
                        _2445 = (_2721 * _2605.y) + _2544;
                        _2446 = (_2721 * _2605.z) + _2545;
                        if (_2550 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2543 = _2444;
                            _2544 = _2445;
                            _2545 = _2446;
                            _2546 = _2447;
                            _2547 = _2448;
                            _2548 = _2449;
                            _2549 = _2550;
                        }
                    }
                    frontier_phi_67_pred = _2447;
                    frontier_phi_67_pred_1 = _2446;
                    frontier_phi_67_pred_2 = _2445;
                    frontier_phi_67_pred_3 = _2444;
                    frontier_phi_67_pred_4 = _2448;
                    frontier_phi_67_pred_5 = _2449;
                }
                _2170 = frontier_phi_67_pred;
                _2168 = frontier_phi_67_pred_1;
                _2166 = frontier_phi_67_pred_2;
                _2164 = frontier_phi_67_pred_3;
                _2172 = frontier_phi_67_pred_4;
                _2174 = frontier_phi_67_pred_5;
                uint _2354 = _2353 + 1u;
                if (_2354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2347 = _2164;
                    _2348 = _2166;
                    _2349 = _2168;
                    _2350 = _2170;
                    _2351 = _2172;
                    _2352 = _2174;
                    _2353 = _2354;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2163 = _2164;
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
            _2173 = _2174;
        }
        uvec4 _2177 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2178 = _2177.z;
        uint _2180 = (_2178 >> 8u) & 15u;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((4294967295u << _2180) & _2056) == 0u)
        {
            _2315 = _2163;
            _2317 = _2165;
            _2319 = _2167;
            _2321 = _2169;
            _2323 = _2171;
            _2325 = _2173;
        }
        else
        {
            float _2340 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
            float _2341 = _2340 * _2010;
            float _2342 = _2340 * _2011;
            float _2343 = _2340 * _2012;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2180 < ((_2178 >> 12u) & 15u))
            {
                float _2316;
                float _2318;
                float _2320;
                float _2322;
                float _2324;
                float _2326;
                float _2526 = _2163;
                float _2527 = _2165;
                float _2528 = _2167;
                float _2529 = _2169;
                float _2530 = _2171;
                float _2531 = _2173;
                uint _2532 = _2180;
                uint _2541;
                bool _2542;
                for (;;)
                {
                    _2541 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2532 << 2u)) >> 2u)).x;
                    _2542 = _2541 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2542)
                    {
                        frontier_phi_81_pred = _2529;
                        frontier_phi_81_pred_1 = _2528;
                        frontier_phi_81_pred_2 = _2527;
                        frontier_phi_81_pred_3 = _2526;
                        frontier_phi_81_pred_4 = _2531;
                        frontier_phi_81_pred_5 = _2530;
                    }
                    else
                    {
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _2769 = _2526;
                        float _2770 = _2527;
                        float _2771 = _2528;
                        float _2772 = _2529;
                        float _2773 = _2530;
                        float _2774 = _2531;
                        uint _2775 = _2541;
                        uint _2776;
                        vec4 _2801;
                        float _2802;
                        vec4 _2817;
                        vec3 _2829;
                        vec4 _2844;
                        vec4 _2859;
                        float _2905;
                        bool _2906;
                        for (;;)
                        {
                            uint _2786 = ((_2532 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2775));
                            _2776 = (_2775 + 4294967295u) & _2775;
                            uint _2788 = _2786 * 40u;
                            _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            _2802 = _2801.w;
                            uint _2804 = (_2786 * 40u) + 4u;
                            _2817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 3u)).x));
                            uint _2819 = (_2786 * 40u) + 8u;
                            _2829 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x));
                            uint _2831 = (_2786 * 40u) + 16u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2846 = (_2786 * 40u) + 20u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2861 = (_2786 * 40u) + 24u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2880 = (_2786 * 40u) + 28u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2905 = fma(_2012, _2893.z, fma(_2011, _2893.y, _2893.x * _2010)) + _2893.w;
                            _2906 = !((fma(_2012, _2874.z, fma(_2011, _2874.y, _2874.x * _2010)) + _2874.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2906)
                            {
                                float _2933 = _2801.x - _2010;
                                float _2934 = _2801.y - _2011;
                                float _2935 = _2801.z - _2012;
                                float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                                float _2939 = inversesqrt(_2936);
                                float _2940 = _2939 * _2933;
                                float _2941 = _2939 * _2934;
                                float _2942 = _2939 * _2935;
                                float _2946 = 1.0 - (_2936 / (_2802 * _2802));
                                float _3908 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2947 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
                                float _2951 = sqrt(_2936) * _2817.w;
                                float _2953 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                                float _2954 = _2953 * _2953;
                                float _2957 = ((1.0 - _2954) * dot(vec3(_2940, _2941, _2942), vec3(_626, _629, _632))) + _2954;
                                float _2960 = _2951 * _2951;
                                float _2964 = (fma(_2012, _2844.z, fma(_2011, _2844.y, _2844.x * _2010)) + _2844.w) / _2905;
                                float _2965 = (fma(_2012, _2859.z, fma(_2011, _2859.y, _2859.x * _2010)) + _2859.w) / _2905;
                                float _2969 = 1.0 - dot(vec2(_2964, _2965), vec2(_2964, _2965));
                                float _3924 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                                float _2971 = _2970 * (((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2947) / ((_2960 * 0.699999988079071044921875) + 1.0));
                                float _2983 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                                float _2984 = 1.0 - _686;
                                float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                                float _2992 = _2991 * _2991;
                                float _2993 = _2992 * _2992;
                                float _2994 = _2940 - _2341;
                                float _2995 = _2941 - _2342;
                                float _2996 = _2942 - _2343;
                                float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                                float _3004 = dot(vec3(_626, _629, _632), vec3((-0.0) - _2341, (-0.0) - _2342, (-0.0) - _2343));
                                float _3935 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3007 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                                float _3008 = dot(vec3(_626, _629, _632), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                                float _3946 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                                float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                                float _3016 = _2953 * _2992;
                                float _3017 = _3016 * _3016;
                                float _3023 = ((1.0 - _3017) * dot(vec3(_626, _629, _632), vec3(_2940, _2941, _2942))) + _3017;
                                float _3957 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                                float _3025 = 1.0 - _2992;
                                float _3035 = (0.5 / (((_3024 * ((_3007 * _3025) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2992) * _3007))) * _3024;
                                float _3968 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3045 = (_2970 * _2947) * (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) / ((_3015 * _3015) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2971 * _2817.x;
                                frontier_phi_87_pred_1 = _3045 * _2829.z;
                                frontier_phi_87_pred_2 = _3045 * _2829.y;
                                frontier_phi_87_pred_3 = _3045 * _2829.x;
                                frontier_phi_87_pred_4 = _2971 * _2817.z;
                                frontier_phi_87_pred_5 = _2971 * _2817.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3052 = frontier_phi_87_pred;
                            _3051 = frontier_phi_87_pred_1;
                            _3050 = frontier_phi_87_pred_2;
                            _3049 = frontier_phi_87_pred_3;
                            _3054 = frontier_phi_87_pred_4;
                            _3053 = frontier_phi_87_pred_5;
                            _2759 = _3052 + _2772;
                            _2760 = _3053 + _2773;
                            _2761 = _3054 + _2774;
                            _2756 = _3049 + _2769;
                            _2757 = _3050 + _2770;
                            _2758 = _3051 + _2771;
                            if (_2776 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2776;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2759;
                        frontier_phi_81_pred_1 = _2758;
                        frontier_phi_81_pred_2 = _2757;
                        frontier_phi_81_pred_3 = _2756;
                        frontier_phi_81_pred_4 = _2761;
                        frontier_phi_81_pred_5 = _2760;
                    }
                    _2322 = frontier_phi_81_pred;
                    _2320 = frontier_phi_81_pred_1;
                    _2318 = frontier_phi_81_pred_2;
                    _2316 = frontier_phi_81_pred_3;
                    _2326 = frontier_phi_81_pred_4;
                    _2324 = frontier_phi_81_pred_5;
                    uint _2533 = _2532 + 1u;
                    if (_2533 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2526 = _2316;
                        _2527 = _2318;
                        _2528 = _2320;
                        _2529 = _2322;
                        _2530 = _2324;
                        _2531 = _2326;
                        _2532 = _2533;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2326;
                frontier_phi_56_57_ladder_1 = _2324;
                frontier_phi_56_57_ladder_2 = _2322;
                frontier_phi_56_57_ladder_3 = _2318;
                frontier_phi_56_57_ladder_4 = _2316;
                frontier_phi_56_57_ladder_5 = _2320;
            }
            else
            {
                frontier_phi_56_57_ladder = _2173;
                frontier_phi_56_57_ladder_1 = _2171;
                frontier_phi_56_57_ladder_2 = _2169;
                frontier_phi_56_57_ladder_3 = _2165;
                frontier_phi_56_57_ladder_4 = _2163;
                frontier_phi_56_57_ladder_5 = _2167;
            }
            _2315 = frontier_phi_56_57_ladder_4;
            _2317 = frontier_phi_56_57_ladder_3;
            _2319 = frontier_phi_56_57_ladder_5;
            _2321 = frontier_phi_56_57_ladder_2;
            _2323 = frontier_phi_56_57_ladder_1;
            _2325 = frontier_phi_56_57_ladder;
        }
        float _2330 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2069 = (_2330 * _2321) + _1799;
        _2071 = (_2330 * _2323) + _1800;
        _2073 = (_2330 * _2325) + _1801;
        _2075 = ((_2315 * 0.039999999105930328369140625) * _2330) + _1952;
        _2077 = ((_2317 * 0.039999999105930328369140625) * _2330) + _1953;
        _2079 = ((_2319 * 0.039999999105930328369140625) * _2330) + _1954;
    }
    else
    {
        _2069 = _1799;
        _2071 = _1800;
        _2073 = _1801;
        _2075 = _1952;
        _2077 = _1953;
        _2079 = _1954;
    }
    uint _2085 = _646 + uint(cbMatDynParam._m0[0u].w);
    float _3984 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3995 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4006 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2110 = (((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2069 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _670))) + ((_2075 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1507)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2085].x * (_484 - (_484 * _288)));
    float _2112 = ((cbInstanceData._m0[_2085].y * (_485 - (_485 * _288))) + ((_2077 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1507)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_2071 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _670)));
    float _2114 = ((cbInstanceData._m0[_2085].z * (_486 - (_486 * _288))) + ((_2079 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1507)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2073 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _670)));
    float _2115 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2116 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    uint _2118 = _645 + 6u;
    float _2126 = _606 / cbSceneParam._m0[86u].x;
    float _2127 = _607 / cbSceneParam._m0[86u].y;
    vec4 _2141 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2126, _2127, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2143 = _2141.x;
    float _2144 = _2141.y;
    float _2145 = _2141.z;
    float _2146 = _2141.w;
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2188 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2189 = _2188 / _574;
        float _2200 = _2189 * _261;
        float _2201 = _262 * _2189;
        float _2202 = (-0.0) - _2201;
        float _2203 = _2189 * _263;
        float _2205 = (cbSceneParam._m0[77u].w * _2202) / _2188;
        float _2206 = _2205 + cbSceneParam._m0[79u].w;
        float _2207 = cbSceneParam._m0[79u].w - _2201;
        float _2213 = sqrt(((_2200 * _2200) + (_2201 * _2201)) + (_2203 * _2203));
        float _2216 = (1.0 - (cbSceneParam._m0[77u].w / _2188)) * _2213;
        float _2222 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2224 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2457;
        if (abs((_2202 - _2205) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2457 = ((((_2206 > 0.0) ? exp2(_2222 * _2206) : (2.0 - exp2(_2224 * _2206))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2216;
        }
        else
        {
            float _2376 = 1.0 / cbSceneParam._m0[80u].x;
            float _2377 = isnan(_2207) ? _2206 : (isnan(_2206) ? _2207 : max(_2206, _2207));
            float _2378 = isnan(_2207) ? _2206 : (isnan(_2206) ? _2207 : min(_2206, _2207));
            float _2387 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : min(_2377, 0.0));
            float _2388 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : min(_2378, 0.0));
            _2457 = ((abs(_2213 / _2202) * cbSceneParam._m0[80u].y) * ((((_2387 - _2388) * 2.0) - ((exp2(_2222 * (isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0)))) - exp2(_2222 * (isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0))))) * _2376)) - ((exp2(_2224 * _2387) - exp2(_2224 * _2388)) * _2376))) + (_2216 * cbSceneParam._m0[80u].z);
        }
        vec4 _2459 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2126, _2127, 1.0), 0.0);
        float _2468 = exp2((_2457 * (-1.44269502162933349609375)) * (1.0 - _2459.w));
        float _2469 = log2(_2468);
        float _2485 = log2(_2146);
        _2226 = (exp2(_2485 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2469 * cbSceneParam._m0[78u].x)) * _2459.x) / cbSceneParam._m0[78u].x)) + _2143;
        _2228 = (exp2(_2485 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2469 * cbSceneParam._m0[78u].y)) * _2459.y) / cbSceneParam._m0[78u].y)) + _2144;
        _2230 = (exp2(_2485 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2469 * cbSceneParam._m0[78u].z)) * _2459.z) / cbSceneParam._m0[78u].z)) + _2145;
        _2232 = _2468 * _2146;
    }
    else
    {
        _2226 = _2143;
        _2228 = _2144;
        _2230 = _2145;
        _2232 = _2146;
    }
    bool _2495;
    vec4 _2242;
    vec4 _2264;
    float _2266;
    float _2270;
    float _2271;
    float _2272;
    float _2273;
    bool _2283;
    for (;;)
    {
        _2242 = cbMatDynParam._m0[0u];
        float _2244 = roundEven(_2242.y);
        bool _2245 = _2244 == 3.0;
        float _2246 = log2(_2232);
        float _2253 = exp2(_2246 * cbSceneParam._m0[78u].x) * _2115;
        float _2254 = exp2(_2246 * cbSceneParam._m0[78u].y) * _2116;
        float _2255 = exp2(_2246 * cbSceneParam._m0[78u].z) * _2117;
        float _2262 = _588 + (-0.5);
        _2264 = cbMtdParam._m0[1u];
        _2266 = _2264.y * _2262;
        float _2269 = (_2244 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2270 = _2269 * (_2245 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2226)));
        _2271 = _2269 * (_2245 ? _2254 : (_2254 + (cbSceneParam._m0[72u].w * _2228)));
        _2272 = _2269 * (_2245 ? _2255 : (_2255 + (cbSceneParam._m0[72u].w * _2230)));
        _2273 = _2262 * 0.999000012874603271484375;
        _2283 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2283)
        {
            if ((cbInstanceData._m0[_645 + 7u].x + _2273) < 0.5)
            {
                _2495 = true;
                break;
            }
        }
        uint _2411 = _646 + uint(_2242.w);
        if ((cbInstanceData._m0[_2411].w < 1.0) && ((cbInstanceData._m0[_2411].w + _2273) < 0.5))
        {
            _2495 = true;
            break;
        }
        if ((_2266 + 1.0) < _2264.x)
        {
            _2495 = true;
            break;
        }
        _2495 = false;
        break;
    }
    float _2726;
    if (_2495)
    {
        discard_state = true;
        _2726 = 0.0;
    }
    else
    {
        _2726 = cbInstanceData._m0[_2118].w;
    }
    SV_Target.x = _2270;
    SV_Target.y = _2271;
    SV_Target.z = _2272;
    SV_Target.w = _2726;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2118].w;
    discard_exit();
}


