#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _344;
float _2806;
float _2807;
float _2808;
float _2809;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _172 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _173 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _178 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _179 = _178 * _171;
    float _180 = _178 * _172;
    float _181 = _178 * _173;
    float _185 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _189 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _190 = _189 * TANGENT.x;
    float _191 = _189 * TANGENT.y;
    float _192 = _189 * TANGENT.z;
    float _237 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _247 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _237);
    float _248 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _237);
    float _249 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _237);
    float _274 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _281 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _290 = cbMtdParam._m0[23u].x + _247;
    float _291 = cbMtdParam._m0[23u].y + _248;
    float _292 = cbMtdParam._m0[23u].z + _249;
    float _309 = (-0.0) - dot(vec3(_290, _291, _292), vec3(_274 * _179, _274 * _180, _274 * _181));
    float _310 = (-0.0) - dot(vec3(_290, _291, _292), vec3(_281 * _190, _281 * _191, _281 * _192));
    float _311 = (-0.0) - dot(vec3(_290, _291, _292), vec3((-0.0) - (NORMAL.x * _185), (-0.0) - (NORMAL.y * _185), (-0.0) - (NORMAL.z * _185)));
    float _315 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _316 = _315 * _311;
    float _318 = (cbMtdParam._m0[19u].w * _309) * _315;
    float _320 = (cbMtdParam._m0[20u].x * _310) * _315;
    float _323 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _324 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _342;
    float _345;
    float _347;
    if (_318 > 0.0)
    {
        float _328 = (1.0 - _323) / _318;
        _342 = _328;
        _345 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_328 * _316)) * 0.16666667163372039794921875;
        _347 = (fract((_328 * _320) + _324) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_318 < 0.0)
        {
            float _343 = ((-0.0) - _323) / _318;
            frontier_phi_3_2_ladder = _343;
            frontier_phi_3_2_ladder_1 = (fract((_343 * _320) + _324) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_343 * _316) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _344;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _342 = frontier_phi_3_2_ladder;
        _345 = frontier_phi_3_2_ladder_2;
        _347 = frontier_phi_3_2_ladder_1;
    }
    float _373;
    float _375;
    float _377;
    if (_320 > 0.0)
    {
        float _360 = (1.0 - _324) / _320;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_360 < _342)
        {
            frontier_phi_8_5_ladder = (fract(_360 * _316) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_360 * _318) + _323) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _360;
        }
        else
        {
            frontier_phi_8_5_ladder = _347;
            frontier_phi_8_5_ladder_1 = _345;
            frontier_phi_8_5_ladder_2 = _342;
        }
        _373 = frontier_phi_8_5_ladder_2;
        _375 = frontier_phi_8_5_ladder_1;
        _377 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_320 < 0.0)
        {
            float _374 = ((-0.0) - _324) / _320;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_374 < _342)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_374 * _316) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_374 * _318) + _323) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _374;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _347;
                frontier_phi_8_6_ladder_9_ladder_1 = _345;
                frontier_phi_8_6_ladder_9_ladder_2 = _342;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _347;
            frontier_phi_8_6_ladder_1 = _345;
            frontier_phi_8_6_ladder_2 = _342;
        }
        _373 = frontier_phi_8_6_ladder_2;
        _375 = frontier_phi_8_6_ladder_1;
        _377 = frontier_phi_8_6_ladder;
    }
    float _381 = (_316 > 0.0) ? (cbMtdParam._m0[16u].w / _316) : 5000.0;
    float _394;
    float _395;
    if (_381 < _373)
    {
        _394 = ((_323 + cbMtdParam._m0[17u].x) + (_381 * _318)) * 0.16666667163372039794921875;
        _395 = (((_381 * _320) + _324) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _394 = _375;
        _395 = _377;
    }
    vec4 _398 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_394, _395));
    float _404 = _398.x * cbMtdParam._m0[13u].x;
    float _405 = _398.y * cbMtdParam._m0[13u].y;
    float _406 = _398.z * cbMtdParam._m0[13u].z;
    float _2818 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _2829 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _2840 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _425 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _429 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _430 = _247 * _429;
    float _431 = _248 * _429;
    float _432 = _249 * _429;
    vec4 _437 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _439 = _437.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _540 = sqrt(((_247 * _247) + (_248 * _248)) + (_249 * _249));
        float _547 = (cbMatDynParam._m0[5u].x * _540) + cbMatDynParam._m0[5u].y;
        float _2851 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
        float _548 = isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0));
        float _552 = (cbMatDynParam._m0[5u].z * _540) + cbMatDynParam._m0[5u].w;
        float _2862 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0))) - _548)) + _548) < ((_439 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _471 = uint(roundEven(NORMAL.w)) * 13u;
    uint _472 = _471 + 9u;
    uint _473 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _479 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2818 : (isnan(_2818) ? 1.0 : min(_2818, 1.0)))) * cbInstanceData._m0[_473].x;
    float _480 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2829 : (isnan(_2829) ? 1.0 : min(_2829, 1.0)))) * cbInstanceData._m0[_473].y;
    float _481 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2840 : (isnan(_2840) ? 1.0 : min(_2840, 1.0)))) * cbInstanceData._m0[_473].z;
    float _2873 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0));
    float _2884 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0));
    float _2895 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _496 = _493.x * TEXCOORD.z;
    float _497 = (-0.0) - _430;
    float _498 = (-0.0) - _431;
    float _499 = (-0.0) - _432;
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = (cbModelParam._m0[37u].x * ((((fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _617 = (cbModelParam._m0[37u].y * ((((fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _618 = (((((fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_615, _617, _618), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_615, _617, _618), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_615, _617, _618), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_615, _617, _618), 0.0);
        float _655 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _655 * (_621.x + (-0.5));
        float _658 = _655 * (_621.y + (-0.5));
        float _659 = _655 * (_621.z + (-0.5));
        float _666 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_628.x + (-0.5));
        float _668 = _666 * (_628.y + (-0.5));
        float _669 = _666 * (_628.z + (-0.5));
        float _676 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_635.x + (-0.5));
        float _678 = _676 * (_635.y + (-0.5));
        float _679 = _676 * (_635.z + (-0.5));
        float _686 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_642.x + (-0.5));
        float _688 = _686 * (_642.y + (-0.5));
        float _689 = _686 * (_642.z + (-0.5));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = _657 * 0.5;
        float _694 = _667 * 0.5;
        float _695 = _677 * 0.5;
        float _696 = dot(vec3(_693, _694, _695), vec3(_693, _694, _695));
        float _701 = (_696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_696);
        float _710 = (dot(vec3(0.0), vec3(_701 * _693, _701 * _694, _701 * _695)) + 1.0) * 0.5;
        float _2921 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _720 = sqrt(((_694 * _694) + (_693 * _693)) + (_695 * _695)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _2932 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
        float _722 = _721 * 2.0;
        float _726 = (1.0 - _721) / (_721 + 1.0);
        float _2943 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
        float _736 = ((((1.0 - _727) * (_722 + 2.0)) * exp2(log2(isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0))) * (_722 + 1.0))) + _727) * _690;
        float _737 = _658 * 0.5;
        float _738 = _668 * 0.5;
        float _739 = _678 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _753 = (dot(vec3(0.0), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _2954 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _762 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_691 + 9.9999997473787516355514526367188e-06);
        float _2965 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _2976 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0))) * (_764 + 1.0))) + _769) * _691;
        float _779 = _659 * 0.5;
        float _780 = _669 * 0.5;
        float _781 = _679 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(0.0), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _2987 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _2998 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3009 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0))) * (_806 + 1.0))) + _811) * _692;
        _828 = _659;
        _829 = _658;
        _830 = _657;
        _831 = _669;
        _832 = _668;
        _833 = _667;
        _834 = _679;
        _835 = _678;
        _836 = _677;
        _837 = _692;
        _838 = _691;
        _839 = _690;
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0)));
        _841 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
    }
    else
    {
        _828 = _344;
        _829 = _344;
        _830 = _344;
        _831 = _344;
        _832 = _344;
        _833 = _344;
        _834 = _344;
        _835 = _344;
        _836 = _344;
        _837 = _344;
        _838 = _344;
        _839 = _344;
        _840 = 0.0;
        _841 = 0.0;
        _842 = 0.0;
    }
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = (cbModelParam._m0[38u].x * ((((fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _900 = (cbModelParam._m0[38u].y * ((((fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _901 = (((((fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _936 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_903.x + (-0.5));
        float _938 = _936 * (_903.y + (-0.5));
        float _939 = _936 * (_903.z + (-0.5));
        float _946 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_910.x + (-0.5));
        float _948 = _946 * (_910.y + (-0.5));
        float _949 = _946 * (_910.z + (-0.5));
        float _956 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_917.x + (-0.5));
        float _958 = _956 * (_917.y + (-0.5));
        float _959 = _956 * (_917.z + (-0.5));
        float _966 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_924.x + (-0.5));
        float _968 = _966 * (_924.y + (-0.5));
        float _969 = _966 * (_924.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(0.0), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3050 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3061 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3072 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))) * (_1000 + 1.0))) + _1005) * _970;
        float _1015 = _938 * 0.5;
        float _1016 = _948 * 0.5;
        float _1017 = _958 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(0.0), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3083 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3094 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3105 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0))) * (_1042 + 1.0))) + _1047) * _971;
        float _1057 = _939 * 0.5;
        float _1058 = _949 * 0.5;
        float _1059 = _959 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(0.0), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3116 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3127 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3138 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) * (_1084 + 1.0))) + _1089) * _972;
        _1106 = _939;
        _1107 = _938;
        _1108 = _937;
        _1109 = _949;
        _1110 = _948;
        _1111 = _947;
        _1112 = _959;
        _1113 = _958;
        _1114 = _957;
        _1115 = _972;
        _1116 = _971;
        _1117 = _970;
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
    }
    else
    {
        _1106 = _344;
        _1107 = _344;
        _1108 = _344;
        _1109 = _344;
        _1110 = _344;
        _1111 = _344;
        _1112 = _344;
        _1113 = _344;
        _1114 = _344;
        _1115 = _344;
        _1116 = _344;
        _1117 = _344;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _840)) + _840;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _841)) + _841;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _842)) + _842;
    float _1153 = fma(_1132, cbSceneParam._m0[89u].z, fma(_1131, cbSceneParam._m0[89u].y, _1130 * cbSceneParam._m0[89u].x));
    float _1156 = fma(_1132, cbSceneParam._m0[90u].z, fma(_1131, cbSceneParam._m0[90u].y, _1130 * cbSceneParam._m0[90u].x));
    float _1159 = fma(_1132, cbSceneParam._m0[91u].z, fma(_1131, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1130));
    float _1174 = _430 * (-0.5);
    float _1175 = _431 * (-0.5);
    float _1176 = _432 * (-0.5);
    float _1177 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1180 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1183 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1217;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1190 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_828, _831, _834, _837));
        float _1194 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_829, _832, _835, _838));
        float _1198 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_830, _833, _836, _839));
        float _1205 = dot(vec4(cbModelParam._m0[39u]), vec4(_1174, _1175, _1176, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1205) ? 0.0 : (isnan(0.0) ? _1205 : max(0.0, _1205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1228;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1219 = dot(vec4(cbModelParam._m0[40u]), vec4(_1174, _1175, _1176, 1.0));
        _1228 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1228 = 1.0;
    }
    float _1232 = (_1228 * cbModelParam._m0[1u].x) + (_1217 * (1.0 - cbModelParam._m0[1u].x));
    float _1242 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1325;
    float _1327;
    float _1329;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1292 = fma(_529, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521)) + cbModelParam._m0[13u].w;
        float _1296 = fma(_529, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521)) + cbModelParam._m0[14u].w;
        float _1300 = fma(_529, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521)) + cbModelParam._m0[15u].w;
        float _1303 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1306 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1309 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1335;
        if (_1303 > 0.0)
        {
            _1335 = abs((1.0 - _1292) / _1303);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1292 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1335 = frontier_phi_29_27_ladder;
        }
        float _1660;
        if (_1306 > 0.0)
        {
            _1660 = abs((1.0 - _1296) / _1306);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1296 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1660 = frontier_phi_38_34_ladder;
        }
        float _1971;
        if (_1309 > 0.0)
        {
            _1971 = abs((1.0 - _1300) / _1309);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1300 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1971 = frontier_phi_52_45_ladder;
        }
        float _1973 = isnan(_1660) ? _1335 : (isnan(_1335) ? _1660 : min(_1335, _1660));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1303) + _1292;
        float _1979 = (_1974 * _1306) + _1296;
        float _1980 = (_1974 * _1309) + _1300;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1981;
        float _1984 = _1981 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1980 > _1984) || ((_1980 < _1982) || ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 < _1982) || (_1978 > _1984))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1242);
            frontier_phi_28_52_ladder = _2119.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2119.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2119.x * cbModelParam._m0[1u].y;
        }
        _1325 = frontier_phi_28_52_ladder_2;
        _1327 = frontier_phi_28_52_ladder_1;
        _1329 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1242);
        _1325 = _1313.x * cbModelParam._m0[1u].y;
        _1327 = _1313.y * cbModelParam._m0[1u].y;
        _1329 = _1313.z * cbModelParam._m0[1u].y;
    }
    float _1332 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1387 = fma(_529, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521)) + cbModelParam._m0[21u].w;
        float _1391 = fma(_529, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521)) + cbModelParam._m0[22u].w;
        float _1395 = fma(_529, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521)) + cbModelParam._m0[23u].w;
        float _1398 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1401 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1404 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1665;
        if (_1398 > 0.0)
        {
            _1665 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1665 = frontier_phi_40_36_ladder;
        }
        float _1997;
        if (_1401 > 0.0)
        {
            _1997 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1997 = frontier_phi_54_47_ladder;
        }
        float _2184;
        if (_1404 > 0.0)
        {
            _2184 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2184 = frontier_phi_72_65_ladder;
        }
        float _2186 = isnan(_1997) ? _1665 : (isnan(_1665) ? _1997 : min(_1665, _1997));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1398) + _1387;
        float _2192 = (_2187 * _1401) + _1391;
        float _2193 = (_2187 * _1404) + _1395;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2194;
        float _2197 = _2194 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2193 > _2197) || ((_2193 < _2195) || ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 < _2195) || (_2191 > _2197))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2193, cbModelParam._m0[17u].z, fma(_2192, cbModelParam._m0[17u].y, _2191 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2193, cbModelParam._m0[18u].z, fma(_2192, cbModelParam._m0[18u].y, _2191 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2193, cbModelParam._m0[19u].z, fma(_2192, cbModelParam._m0[19u].y, _2191 * cbModelParam._m0[19u].x))), _1332);
            frontier_phi_37_72_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1423 = frontier_phi_37_72_ladder_2;
        _1425 = frontier_phi_37_72_ladder_1;
        _1427 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1332);
        _1423 = _1407.x * cbModelParam._m0[1u].z;
        _1425 = _1407.y * cbModelParam._m0[1u].z;
        _1427 = _1407.z * cbModelParam._m0[1u].z;
    }
    float _1439 = _496 * 0.01200000010430812835693359375;
    float _1441 = _1439 * ((cbModelParam._m0[1u].w * (_1423 - _1325)) + _1325);
    float _1442 = _1439 * ((cbModelParam._m0[1u].w * (_1425 - _1327)) + _1327);
    float _1443 = _1439 * ((cbModelParam._m0[1u].w * (_1427 - _1329)) + _1329);
    float _1446 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, _1441 * cbSceneParam._m0[91u].x));
    vec4 _1460 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_457, _458));
    float _1462 = _1460.w;
    float _1475 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1462);
    float _1476 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1462);
    float _1477 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1462);
    uvec4 _1481 = floatBitsToUint(cbInstanceData._m0[_471 + 5u]);
    uint _1483 = _1481.x * 14u;
    uint _1484 = _1483 + 13u;
    float _1489 = _496 + (-1.0);
    float _1493 = (cbLight._m0[_1484].x * _1489) + 1.0;
    float _1494 = (cbLight._m0[_1484].y * _1489) + 1.0;
    uint _1495 = _1483 + 5u;
    float _1501 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
    uint _1505 = _1483 + 4u;
    float _1515 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
    uint _1519 = _1483 | 1u;
    float _1530 = dot(vec3(cbLight._m0[_1483].xyz), vec3(0.0));
    float _1533 = dot(vec3(cbLight._m0[_1519].xyz), vec3(0.0));
    float _3274 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
    float _3285 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _1538 = (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * 0.3183098733425140380859375;
    float _1540 = (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * 0.3183098733425140380859375;
    float _1547 = ((cbLight._m0[_1495].x * _1501) * _1540) + (((cbLight._m0[_1505].x * _1475) * _1515) * _1538);
    float _1548 = ((_1501 * cbLight._m0[_1495].y) * _1540) + (((cbLight._m0[_1505].y * _1476) * _1515) * _1538);
    float _1549 = ((_1501 * cbLight._m0[_1495].z) * _1540) + (((cbLight._m0[_1505].z * _1477) * _1515) * _1538);
    uint _1550 = _1483 + 8u;
    float _1556 = cbLight._m0[_1483].x + _430;
    float _1557 = cbLight._m0[_1483].y + _431;
    float _1558 = cbLight._m0[_1483].z + _432;
    float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
    float _1566 = dot(vec3(0.0), vec3(cbLight._m0[_1483].xyz));
    float _3296 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1569 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _1570 = dot(vec3(0.0), vec3(_430, _431, _432));
    float _3307 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1573 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _1574 = dot(vec3(cbLight._m0[_1483].xyz), vec3(_1556 * _1562, _1557 * _1562, _1558 * _1562));
    float _3318 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1585 = (exp2(log2(1.0 - (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1591 = (0.5 / ((_1569 + 9.9999999392252902907785028219223e-09) + _1573)) * _1569;
    float _3329 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1593 = (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * 0.31831014156341552734375;
    uint _1607 = _1483 + 9u;
    float _1613 = cbLight._m0[_1519].x + _430;
    float _1614 = cbLight._m0[_1519].y + _431;
    float _1615 = cbLight._m0[_1519].z + _432;
    float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
    float _1623 = dot(vec3(0.0), vec3(cbLight._m0[_1519].xyz));
    float _3340 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1626 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _1627 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1613 * _1619, _1614 * _1619, _1615 * _1619));
    float _3351 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1636 = (exp2(log2(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1640 = (0.5 / ((_1626 + 9.9999999392252902907785028219223e-09) + _1573)) * _1626;
    float _3362 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1642 = (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * 0.31831014156341552734375;
    float _1652 = (((_1636 * cbLight._m0[_1607].x) * _1642) * _1501) + ((((cbLight._m0[_1550].x * _1475) * _1585) * _1593) * _1515);
    float _1653 = (((_1636 * cbLight._m0[_1607].y) * _1642) * _1501) + ((((cbLight._m0[_1550].y * _1476) * _1585) * _1593) * _1515);
    float _1654 = (((_1636 * cbLight._m0[_1607].z) * _1642) * _1501) + ((((cbLight._m0[_1550].z * _1477) * _1585) * _1593) * _1515);
    float _1770;
    float _1772;
    float _1774;
    float _1776;
    float _1778;
    float _1780;
    if (_1481.y == 0u)
    {
        float _1710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1711 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1710;
        float _1712 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1710;
        float _1713 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1710;
        uvec4 _1725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1726 = _1725.x;
        uint _1737 = uint((float(_1725.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _1726))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _1726)));
        float _1747 = (log2(_1713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1748 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        uint _1751 = uint(isnan(14.0) ? _1748 : (isnan(_1748) ? 14.0 : min(_1748, 14.0)));
        uvec4 _1756 = texelFetch(g_lightClusterGridBuffer, int(((_1751 << 2u) + (_1737 << 6u)) >> 2u));
        uint _1757 = _1756.x;
        uint _1758 = _1725.z;
        float _1848;
        float _1850;
        float _1852;
        float _1854;
        float _1856;
        float _1858;
        if (((((1u << ((_1758 >> 4u) & 15u)) + 4294967295u) & _1757) == 0u) || ((_1758 & 240u) == 0u))
        {
            _1848 = 0.0;
            _1850 = 0.0;
            _1852 = 0.0;
            _1854 = 0.0;
            _1856 = 0.0;
            _1858 = 0.0;
        }
        else
        {
            float _1849;
            float _1851;
            float _1853;
            float _1855;
            float _1857;
            float _1859;
            float _2031 = 0.0;
            float _2032 = 0.0;
            float _2033 = 0.0;
            float _2034 = 0.0;
            float _2035 = 0.0;
            float _2036 = 0.0;
            uint _2037 = 0u;
            uint _2046;
            bool _2047;
            for (;;)
            {
                _2046 = texelFetch(g_lightClassification, int((((_1751 << 5u) + (_1737 << 9u)) + (_2037 << 2u)) >> 2u)).x;
                _2047 = _2046 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2047)
                {
                    frontier_phi_67_pred = _2034;
                    frontier_phi_67_pred_1 = _2033;
                    frontier_phi_67_pred_2 = _2032;
                    frontier_phi_67_pred_3 = _2031;
                    frontier_phi_67_pred_4 = _2035;
                    frontier_phi_67_pred_5 = _2036;
                }
                else
                {
                    float _2227;
                    float _2228;
                    float _2229;
                    float _2230;
                    float _2231;
                    float _2232;
                    uint _2233;
                    _2227 = _2031;
                    _2228 = _2032;
                    _2229 = _2033;
                    _2230 = _2034;
                    _2231 = _2035;
                    _2232 = _2036;
                    _2233 = _2046;
                    float _2128;
                    float _2129;
                    float _2130;
                    float _2131;
                    float _2132;
                    float _2133;
                    for (;;)
                    {
                        uint _2237 = uint(findLSB(_2233)) + (_2037 << 5u);
                        uint _2234 = (_2233 + 4294967295u) & _2233;
                        uint _2239 = _2237 * 48u;
                        vec4 _2253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2239)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 3u)).x));
                        uint _2259 = (_2237 * 48u) + 4u;
                        vec4 _2272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2259)).x, texelFetch(g_PointLightRenderingBuffer, int(_2259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2259 + 3u)).x));
                        uint _2278 = (_2237 * 48u) + 8u;
                        vec3 _2289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2278)).x, texelFetch(g_PointLightRenderingBuffer, int(_2278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2278 + 2u)).x));
                        float _2293 = _2253.x - _1711;
                        float _2294 = _2253.y - _1712;
                        float _2295 = _2253.z - _1713;
                        float _2296 = dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295));
                        float _2299 = inversesqrt(_2296);
                        float _2308 = 1.0 - (_2296 * _2253.w);
                        float _3383 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
                        float _2309 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
                        float _2310 = sqrt(_2296) * _2272.w;
                        float _2313 = 1.39999997615814208984375 / (_2310 + 1.39999997615814208984375);
                        float _2314 = _2313 * _2313;
                        float _2317 = ((1.0 - _2314) * dot(vec3(0.0), vec3(_2299 * _2293, _2299 * _2294, _2299 * _2295))) + _2314;
                        float _2320 = _2310 * _2310;
                        float _2324 = ((isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0))) * _2309) / ((_2320 * 0.699999988079071044921875) + 1.0);
                        float _2328 = (-0.0) - _1711;
                        float _2329 = (-0.0) - _1712;
                        float _2330 = (-0.0) - _1713;
                        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
                        float _2338 = dot(vec3(0.0), vec3(_2334 * _2328, _2334 * _2329, _2334 * _2330));
                        float _3399 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
                        float _3410 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
                        float _2342 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
                        float _2346 = (0.5 / (((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) + 9.9999999392252902907785028219223e-09) + _2342)) * _2342;
                        float _3421 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
                        float _2355 = (((isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * 3.1415927410125732421875) / ((_2320 * 2.1991131305694580078125) + 3.141590118408203125)) * _2309;
                        _2131 = (_2324 * _2272.x) + _2230;
                        _2132 = (_2324 * _2272.y) + _2231;
                        _2133 = (_2324 * _2272.z) + _2232;
                        _2128 = (_2355 * _2289.x) + _2227;
                        _2129 = (_2355 * _2289.y) + _2228;
                        _2130 = (_2355 * _2289.z) + _2229;
                        if (_2234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2227 = _2128;
                            _2228 = _2129;
                            _2229 = _2130;
                            _2230 = _2131;
                            _2231 = _2132;
                            _2232 = _2133;
                            _2233 = _2234;
                        }
                    }
                    frontier_phi_67_pred = _2131;
                    frontier_phi_67_pred_1 = _2130;
                    frontier_phi_67_pred_2 = _2129;
                    frontier_phi_67_pred_3 = _2128;
                    frontier_phi_67_pred_4 = _2132;
                    frontier_phi_67_pred_5 = _2133;
                }
                _1855 = frontier_phi_67_pred;
                _1853 = frontier_phi_67_pred_1;
                _1851 = frontier_phi_67_pred_2;
                _1849 = frontier_phi_67_pred_3;
                _1857 = frontier_phi_67_pred_4;
                _1859 = frontier_phi_67_pred_5;
                uint _2038 = _2037 + 1u;
                if (_2038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2031 = _1849;
                    _2032 = _1851;
                    _2033 = _1853;
                    _2034 = _1855;
                    _2035 = _1857;
                    _2036 = _1859;
                    _2037 = _2038;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1848 = _1849;
            _1850 = _1851;
            _1852 = _1853;
            _1854 = _1855;
            _1856 = _1857;
            _1858 = _1859;
        }
        uvec4 _1862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1863 = _1862.z;
        uint _1865 = (_1863 >> 8u) & 15u;
        float _2002;
        float _2004;
        float _2006;
        float _2008;
        float _2010;
        float _2012;
        if (((4294967295u << _1865) & _1757) == 0u)
        {
            _2002 = _1848;
            _2004 = _1850;
            _2006 = _1852;
            _2008 = _1854;
            _2010 = _1856;
            _2012 = _1858;
        }
        else
        {
            float _2027 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_1865 < ((_1863 >> 12u) & 15u))
            {
                float _2003;
                float _2005;
                float _2007;
                float _2009;
                float _2011;
                float _2013;
                float _2210 = _1848;
                float _2211 = _1850;
                float _2212 = _1852;
                float _2213 = _1854;
                float _2214 = _1856;
                float _2215 = _1858;
                uint _2216 = _1865;
                uint _2225;
                bool _2226;
                for (;;)
                {
                    _2225 = texelFetch(g_lightClassification, int((((_1751 << 5u) + (_1737 << 9u)) + (_2216 << 2u)) >> 2u)).x;
                    _2226 = _2225 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2226)
                    {
                        frontier_phi_81_pred = _2213;
                        frontier_phi_81_pred_1 = _2212;
                        frontier_phi_81_pred_2 = _2211;
                        frontier_phi_81_pred_3 = _2210;
                        frontier_phi_81_pred_4 = _2215;
                        frontier_phi_81_pred_5 = _2214;
                    }
                    else
                    {
                        float _2390;
                        float _2391;
                        float _2392;
                        float _2393;
                        float _2394;
                        float _2395;
                        float _2639;
                        float _2640;
                        float _2641;
                        float _2642;
                        float _2643;
                        float _2644;
                        float _2403 = _2210;
                        float _2404 = _2211;
                        float _2405 = _2212;
                        float _2406 = _2213;
                        float _2407 = _2214;
                        float _2408 = _2215;
                        uint _2409 = _2225;
                        uint _2410;
                        vec4 _2435;
                        float _2436;
                        vec4 _2451;
                        vec3 _2463;
                        vec4 _2478;
                        vec4 _2493;
                        float _2539;
                        bool _2540;
                        for (;;)
                        {
                            uint _2420 = ((_2216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2409));
                            _2410 = (_2409 + 4294967295u) & _2409;
                            uint _2422 = _2420 * 40u;
                            _2435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2422 + 3u)).x));
                            _2436 = _2435.w;
                            uint _2438 = (_2420 * 40u) + 4u;
                            _2451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 3u)).x));
                            uint _2453 = (_2420 * 40u) + 8u;
                            _2463 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 2u)).x));
                            uint _2465 = (_2420 * 40u) + 16u;
                            _2478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 3u)).x));
                            uint _2480 = (_2420 * 40u) + 20u;
                            _2493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 3u)).x));
                            uint _2495 = (_2420 * 40u) + 24u;
                            vec4 _2508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 3u)).x));
                            uint _2514 = (_2420 * 40u) + 28u;
                            vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 3u)).x));
                            _2539 = fma(_1713, _2527.z, fma(_1712, _2527.y, _2527.x * _1711)) + _2527.w;
                            _2540 = !((fma(_1713, _2508.z, fma(_1712, _2508.y, _2508.x * _1711)) + _2508.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2540)
                            {
                                float _2567 = _2435.x - _1711;
                                float _2568 = _2435.y - _1712;
                                float _2569 = _2435.z - _1713;
                                float _2570 = dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569));
                                float _2573 = inversesqrt(_2570);
                                float _2574 = _2573 * _2567;
                                float _2575 = _2573 * _2568;
                                float _2576 = _2573 * _2569;
                                float _2580 = 1.0 - (_2570 / (_2436 * _2436));
                                float _3432 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                                float _2581 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
                                float _2585 = sqrt(_2570) * _2451.w;
                                float _2587 = 1.39999997615814208984375 / (_2585 + 1.39999997615814208984375);
                                float _2588 = _2587 * _2587;
                                float _2589 = 1.0 - _2588;
                                float _2591 = (_2589 * dot(vec3(_2574, _2575, _2576), vec3(0.0))) + _2588;
                                float _2594 = _2585 * _2585;
                                float _2598 = (fma(_1713, _2478.z, fma(_1712, _2478.y, _2478.x * _1711)) + _2478.w) / _2539;
                                float _2599 = (fma(_1713, _2493.z, fma(_1712, _2493.y, _2493.x * _1711)) + _2493.w) / _2539;
                                float _2603 = 1.0 - dot(vec2(_2598, _2599), vec2(_2598, _2599));
                                float _3448 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                                float _2604 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
                                float _2605 = _2604 * (((isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))) * _2581) / ((_2594 * 0.699999988079071044921875) + 1.0));
                                float _2615 = dot(vec3(0.0), vec3((-0.0) - (_1711 * _2027), (-0.0) - (_1712 * _2027), (-0.0) - (_1713 * _2027)));
                                float _3459 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                                float _2623 = (_2589 * dot(vec3(0.0), vec3(_2574, _2575, _2576))) + _2588;
                                float _3470 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                                float _2624 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
                                float _2628 = (0.5 / (((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) + 9.9999999392252902907785028219223e-09) + _2624)) * _2624;
                                float _3481 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                                float _2635 = (_2604 * _2581) * (((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * 3.1415927410125732421875) / ((_2594 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2605 * _2451.x;
                                frontier_phi_87_pred_1 = _2635 * _2463.z;
                                frontier_phi_87_pred_2 = _2635 * _2463.y;
                                frontier_phi_87_pred_3 = _2635 * _2463.x;
                                frontier_phi_87_pred_4 = _2605 * _2451.z;
                                frontier_phi_87_pred_5 = _2605 * _2451.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2642 = frontier_phi_87_pred;
                            _2641 = frontier_phi_87_pred_1;
                            _2640 = frontier_phi_87_pred_2;
                            _2639 = frontier_phi_87_pred_3;
                            _2644 = frontier_phi_87_pred_4;
                            _2643 = frontier_phi_87_pred_5;
                            _2393 = _2642 + _2406;
                            _2394 = _2643 + _2407;
                            _2395 = _2644 + _2408;
                            _2390 = _2639 + _2403;
                            _2391 = _2640 + _2404;
                            _2392 = _2641 + _2405;
                            if (_2410 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2403 = _2390;
                                _2404 = _2391;
                                _2405 = _2392;
                                _2406 = _2393;
                                _2407 = _2394;
                                _2408 = _2395;
                                _2409 = _2410;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2393;
                        frontier_phi_81_pred_1 = _2392;
                        frontier_phi_81_pred_2 = _2391;
                        frontier_phi_81_pred_3 = _2390;
                        frontier_phi_81_pred_4 = _2395;
                        frontier_phi_81_pred_5 = _2394;
                    }
                    _2009 = frontier_phi_81_pred;
                    _2007 = frontier_phi_81_pred_1;
                    _2005 = frontier_phi_81_pred_2;
                    _2003 = frontier_phi_81_pred_3;
                    _2013 = frontier_phi_81_pred_4;
                    _2011 = frontier_phi_81_pred_5;
                    uint _2217 = _2216 + 1u;
                    if (_2217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2210 = _2003;
                        _2211 = _2005;
                        _2212 = _2007;
                        _2213 = _2009;
                        _2214 = _2011;
                        _2215 = _2013;
                        _2216 = _2217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2013;
                frontier_phi_56_57_ladder_1 = _2011;
                frontier_phi_56_57_ladder_2 = _2009;
                frontier_phi_56_57_ladder_3 = _2005;
                frontier_phi_56_57_ladder_4 = _2003;
                frontier_phi_56_57_ladder_5 = _2007;
            }
            else
            {
                frontier_phi_56_57_ladder = _1858;
                frontier_phi_56_57_ladder_1 = _1856;
                frontier_phi_56_57_ladder_2 = _1854;
                frontier_phi_56_57_ladder_3 = _1850;
                frontier_phi_56_57_ladder_4 = _1848;
                frontier_phi_56_57_ladder_5 = _1852;
            }
            _2002 = frontier_phi_56_57_ladder_4;
            _2004 = frontier_phi_56_57_ladder_3;
            _2006 = frontier_phi_56_57_ladder_5;
            _2008 = frontier_phi_56_57_ladder_2;
            _2010 = frontier_phi_56_57_ladder_1;
            _2012 = frontier_phi_56_57_ladder;
        }
        float _2017 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _1770 = (_2017 * _2008) + _1547;
        _1772 = (_2017 * _2010) + _1548;
        _1774 = (_2017 * _2012) + _1549;
        _1776 = ((_2002 * 0.039999999105930328369140625) * _2017) + _1652;
        _1778 = ((_2004 * 0.039999999105930328369140625) * _2017) + _1653;
        _1780 = ((_2006 * 0.039999999105930328369140625) * _2017) + _1654;
    }
    else
    {
        _1770 = _1547;
        _1772 = _1548;
        _1774 = _1549;
        _1776 = _1652;
        _1778 = _1653;
        _1780 = _1654;
    }
    float _3497 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3508 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3519 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _1797 = ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1770 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _496))) + ((_1776 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _1232)) * cbPerFrame._m0[3u].x);
    float _1798 = ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1772 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _496))) + ((_1778 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1232)) * cbPerFrame._m0[3u].x);
    float _1799 = ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1774 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _496))) + ((_1780 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1232)) * cbPerFrame._m0[3u].x);
    float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    uint _1803 = _471 + 6u;
    float _1811 = _457 / cbSceneParam._m0[86u].x;
    float _1812 = _458 / cbSceneParam._m0[86u].y;
    vec4 _1826 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1811, _1812, (log2((isnan(cbSceneParam._m0[77u].w) ? _425 : (isnan(_425) ? cbSceneParam._m0[77u].w : min(_425, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1828 = _1826.x;
    float _1829 = _1826.y;
    float _1830 = _1826.z;
    float _1831 = _1826.w;
    float _1911;
    float _1913;
    float _1915;
    float _1917;
    if (_425 > cbSceneParam._m0[78u].w)
    {
        float _1873 = isnan(_425) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _425 : min(cbSceneParam._m0[80u].w, _425));
        float _1874 = _1873 / _425;
        float _1885 = _1874 * _247;
        float _1886 = _248 * _1874;
        float _1887 = (-0.0) - _1886;
        float _1888 = _1874 * _249;
        float _1890 = (cbSceneParam._m0[77u].w * _1887) / _1873;
        float _1891 = _1890 + cbSceneParam._m0[79u].w;
        float _1892 = cbSceneParam._m0[79u].w - _1886;
        float _1898 = sqrt(((_1885 * _1885) + (_1886 * _1886)) + (_1888 * _1888));
        float _1901 = (1.0 - (cbSceneParam._m0[77u].w / _1873)) * _1898;
        float _1907 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1909 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2141;
        if (abs((_1887 - _1890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2141 = ((((_1891 > 0.0) ? exp2(_1907 * _1891) : (2.0 - exp2(_1909 * _1891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1901;
        }
        else
        {
            float _2060 = 1.0 / cbSceneParam._m0[80u].x;
            float _2061 = isnan(_1892) ? _1891 : (isnan(_1891) ? _1892 : max(_1891, _1892));
            float _2062 = isnan(_1892) ? _1891 : (isnan(_1891) ? _1892 : min(_1891, _1892));
            float _2071 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : min(_2061, 0.0));
            float _2072 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : min(_2062, 0.0));
            _2141 = ((abs(_1898 / _1887) * cbSceneParam._m0[80u].y) * ((((_2071 - _2072) * 2.0) - ((exp2(_1907 * (isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)))) - exp2(_1907 * (isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))))) * _2060)) - ((exp2(_1909 * _2071) - exp2(_1909 * _2072)) * _2060))) + (_1901 * cbSceneParam._m0[80u].z);
        }
        vec4 _2143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1811, _1812, 1.0), 0.0);
        float _2152 = exp2((_2141 * (-1.44269502162933349609375)) * (1.0 - _2143.w));
        float _2153 = log2(_2152);
        float _2169 = log2(_1831);
        _1911 = (exp2(_2169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2153 * cbSceneParam._m0[78u].x)) * _2143.x) / cbSceneParam._m0[78u].x)) + _1828;
        _1913 = (exp2(_2169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2153 * cbSceneParam._m0[78u].y)) * _2143.y) / cbSceneParam._m0[78u].y)) + _1829;
        _1915 = (exp2(_2169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2153 * cbSceneParam._m0[78u].z)) * _2143.z) / cbSceneParam._m0[78u].z)) + _1830;
        _1917 = _2152 * _1831;
    }
    else
    {
        _1911 = _1828;
        _1913 = _1829;
        _1915 = _1830;
        _1917 = _1831;
    }
    bool _2179;
    vec4 _1927;
    vec4 _1950;
    float _1952;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    bool _1970;
    for (;;)
    {
        _1927 = cbMatDynParam._m0[0u];
        float _1929 = roundEven(_1927.y);
        bool _1930 = _1929 == 3.0;
        float _1932 = log2(_1917);
        float _1939 = exp2(_1932 * cbSceneParam._m0[78u].x) * _1800;
        float _1940 = exp2(_1932 * cbSceneParam._m0[78u].y) * _1801;
        float _1941 = exp2(_1932 * cbSceneParam._m0[78u].z) * _1802;
        float _1948 = _439 + (-0.5);
        _1950 = cbMtdParam._m0[1u];
        _1952 = _1950.y * _1948;
        float _1955 = (_1929 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1956 = _1955 * (_1930 ? _1939 : (_1939 + (cbSceneParam._m0[72u].w * _1911)));
        _1957 = _1955 * (_1930 ? _1940 : (_1940 + (cbSceneParam._m0[72u].w * _1913)));
        _1958 = _1955 * (_1930 ? _1941 : (_1941 + (cbSceneParam._m0[72u].w * _1915)));
        _1959 = _1948 * 0.999000012874603271484375;
        _1970 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1970)
        {
            if ((cbInstanceData._m0[_471 + 7u].x + _1959) < 0.5)
            {
                _2179 = true;
                break;
            }
        }
        uint _2095 = _472 + uint(_1927.w);
        if ((cbInstanceData._m0[_2095].w < 1.0) && ((cbInstanceData._m0[_2095].w + _1959) < 0.5))
        {
            _2179 = true;
            break;
        }
        if ((_1952 + 1.0) < _1950.x)
        {
            _2179 = true;
            break;
        }
        _2179 = false;
        break;
    }
    float _2360;
    if (_2179)
    {
        discard_state = true;
        _2360 = 0.0;
    }
    else
    {
        _2360 = cbInstanceData._m0[_1803].w;
    }
    SV_Target.x = _1956;
    SV_Target.y = _1957;
    SV_Target.z = _1958;
    SV_Target.w = _2360;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1803].w;
    discard_exit();
}


