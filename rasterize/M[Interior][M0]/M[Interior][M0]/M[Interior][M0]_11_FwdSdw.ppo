#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _755;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _192 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _250 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _240);
    float _251 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _240);
    float _252 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _240);
    float _278 = cbMtdParam._m0[22u].y + _250;
    float _279 = cbMtdParam._m0[22u].z + _251;
    float _280 = cbMtdParam._m0[22u].w + _252;
    float _297 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _298 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_192 * TANGENT.x, _192 * TANGENT.y, _192 * TANGENT.z));
    float _299 = (-0.0) - dot(vec3(_278, _279, _280), vec3((-0.0) - (NORMAL.x * _188), (-0.0) - (NORMAL.y * _188), (-0.0) - (NORMAL.z * _188)));
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _303 * _299;
    float _306 = (cbMtdParam._m0[19u].x * _297) * _303;
    float _308 = (cbMtdParam._m0[18u].w * _298) * _303;
    float _309 = fract(TEXCOORD.x);
    float _310 = fract(TEXCOORD.y);
    float _316;
    if (_306 > 0.0)
    {
        _316 = (1.0 - _309) / _306;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _309) / _306;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _316 = frontier_phi_3_2_ladder;
    }
    float _324;
    if (_308 > 0.0)
    {
        _324 = (1.0 - _310) / _308;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _310) / _308;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _324 = frontier_phi_7_6_ladder;
    }
    float _328 = (_304 > 0.0) ? (cbMtdParam._m0[15u].x / _304) : 5000.0;
    float _329 = isnan(_324) ? _316 : (isnan(_316) ? _324 : min(_316, _324));
    float _330 = isnan(_328) ? _329 : (isnan(_329) ? _328 : min(_329, _328));
    float _334 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = ((_330 * _304) + _334) / _334;
    vec4 _367 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_309 + (-0.5)) + (_330 * _306)) / _341) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_310 + (-0.5)) + (_330 * _308)) / _341) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _378 = cbMtdParam._m0[9u].x * _367.x;
    float _379 = cbMtdParam._m0[9u].y * _367.y;
    float _380 = cbMtdParam._m0[9u].z * _367.z;
    float _2930 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2941 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _2952 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _399 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _404 = _250 * _403;
    float _405 = _251 * _403;
    float _406 = _252 * _403;
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = (_426 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2930 : (isnan(_2930) ? 1.0 : min(_2930, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2941 : (isnan(_2941) ? 1.0 : min(_2941, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0)))) * cbInstanceData._m0[_429].z;
    float _2963 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0));
    float _2974 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0));
    float _2985 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0));
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _452 = _449.x * TEXCOORD.z;
    float _453 = (-0.0) - _404;
    float _454 = (-0.0) - _405;
    float _455 = (-0.0) - _406;
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _754;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _541 = (cbModelParam._m0[37u].x * ((((fma(_485, cbModelParam._m0[26u].z, fma(_481, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _477)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _543 = (cbModelParam._m0[37u].y * ((((fma(_485, cbModelParam._m0[27u].z, fma(_481, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _477)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _544 = (((((fma(_485, cbModelParam._m0[28u].z, fma(_481, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _477)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        float _581 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _581 * (_547.x + (-0.5));
        float _584 = _581 * (_547.y + (-0.5));
        float _585 = _581 * (_547.z + (-0.5));
        float _592 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_554.x + (-0.5));
        float _594 = _592 * (_554.y + (-0.5));
        float _595 = _592 * (_554.z + (-0.5));
        float _602 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_561.x + (-0.5));
        float _604 = _602 * (_561.y + (-0.5));
        float _605 = _602 * (_561.z + (-0.5));
        float _612 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_568.x + (-0.5));
        float _614 = _612 * (_568.y + (-0.5));
        float _615 = _612 * (_568.z + (-0.5));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _618 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _619 = _583 * 0.5;
        float _620 = _593 * 0.5;
        float _621 = _603 * 0.5;
        float _622 = dot(vec3(_619, _620, _621), vec3(_619, _620, _621));
        float _627 = (_622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_622);
        float _636 = (dot(vec3(0.0), vec3(_627 * _619, _627 * _620, _627 * _621)) + 1.0) * 0.5;
        float _3011 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _646 = sqrt(((_620 * _620) + (_619 * _619)) + (_621 * _621)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _3022 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0));
        float _648 = _647 * 2.0;
        float _652 = (1.0 - _647) / (_647 + 1.0);
        float _3033 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0));
        float _662 = ((((1.0 - _653) * (_648 + 2.0)) * exp2(log2(isnan(1.0) ? _3011 : (isnan(_3011) ? 1.0 : min(_3011, 1.0))) * (_648 + 1.0))) + _653) * _616;
        float _663 = _584 * 0.5;
        float _664 = _594 * 0.5;
        float _665 = _604 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _679 = (dot(vec3(0.0), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3044 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _688 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_617 + 9.9999997473787516355514526367188e-06);
        float _3055 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _3066 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0))) * (_690 + 1.0))) + _695) * _617;
        float _705 = _585 * 0.5;
        float _706 = _595 * 0.5;
        float _707 = _605 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(0.0), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3077 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_618 + 9.9999997473787516355514526367188e-06);
        float _3088 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3099 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0))) * (_732 + 1.0))) + _737) * _618;
        _754 = _585;
        _756 = _584;
        _757 = _583;
        _758 = _595;
        _759 = _594;
        _760 = _593;
        _761 = _605;
        _762 = _604;
        _763 = _603;
        _764 = _618;
        _765 = _617;
        _766 = _616;
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0)));
        _768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _769 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
    }
    else
    {
        _754 = _755;
        _756 = _755;
        _757 = _755;
        _758 = _755;
        _759 = _755;
        _760 = _755;
        _761 = _755;
        _762 = _755;
        _763 = _755;
        _764 = _755;
        _765 = _755;
        _766 = _755;
        _767 = 0.0;
        _768 = 0.0;
        _769 = 0.0;
    }
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _823 = (cbModelParam._m0[38u].x * ((((fma(_485, cbModelParam._m0[30u].z, fma(_481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _477)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _824 = (cbModelParam._m0[38u].y * ((((fma(_485, cbModelParam._m0[31u].z, fma(_481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _477)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _825 = (((((fma(_485, cbModelParam._m0[32u].z, fma(_481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _477)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        float _860 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_827.x + (-0.5));
        float _862 = _860 * (_827.y + (-0.5));
        float _863 = _860 * (_827.z + (-0.5));
        float _870 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_834.x + (-0.5));
        float _872 = _870 * (_834.y + (-0.5));
        float _873 = _870 * (_834.z + (-0.5));
        float _880 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_841.x + (-0.5));
        float _882 = _880 * (_841.y + (-0.5));
        float _883 = _880 * (_841.z + (-0.5));
        float _890 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_848.x + (-0.5));
        float _892 = _890 * (_848.y + (-0.5));
        float _893 = _890 * (_848.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(0.0), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3140 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3151 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3162 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0))) * (_924 + 1.0))) + _929) * _894;
        float _939 = _862 * 0.5;
        float _940 = _872 * 0.5;
        float _941 = _882 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(0.0), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3173 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3184 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3195 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0))) * (_966 + 1.0))) + _971) * _895;
        float _981 = _863 * 0.5;
        float _982 = _873 * 0.5;
        float _983 = _883 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(0.0), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3206 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3217 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3228 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0))) * (_1008 + 1.0))) + _1013) * _896;
        _1030 = _863;
        _1031 = _862;
        _1032 = _861;
        _1033 = _873;
        _1034 = _872;
        _1035 = _871;
        _1036 = _883;
        _1037 = _882;
        _1038 = _881;
        _1039 = _896;
        _1040 = _895;
        _1041 = _894;
        _1042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
    }
    else
    {
        _1030 = _755;
        _1031 = _755;
        _1032 = _755;
        _1033 = _755;
        _1034 = _755;
        _1035 = _755;
        _1036 = _755;
        _1037 = _755;
        _1038 = _755;
        _1039 = _755;
        _1040 = _755;
        _1041 = _755;
        _1042 = 0.0;
        _1043 = 0.0;
        _1044 = 0.0;
    }
    float _1054 = (cbModelParam._m0[1u].x * (_1042 - _767)) + _767;
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _768)) + _768;
    float _1056 = (cbModelParam._m0[1u].x * (_1044 - _769)) + _769;
    float _1077 = fma(_1056, cbSceneParam._m0[89u].z, fma(_1055, cbSceneParam._m0[89u].y, _1054 * cbSceneParam._m0[89u].x));
    float _1080 = fma(_1056, cbSceneParam._m0[90u].z, fma(_1055, cbSceneParam._m0[90u].y, _1054 * cbSceneParam._m0[90u].x));
    float _1083 = fma(_1056, cbSceneParam._m0[91u].z, fma(_1055, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1054));
    float _1098 = _404 * (-0.5);
    float _1099 = _405 * (-0.5);
    float _1100 = _406 * (-0.5);
    float _1101 = dot(vec4(_1098, _1099, _1100, 1.0), vec4(_1032, _1035, _1038, _1041));
    float _1104 = dot(vec4(_1098, _1099, _1100, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1107 = dot(vec4(_1098, _1099, _1100, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1141;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1114 = dot(vec4(_1098, _1099, _1100, 1.0), vec4(_754, _758, _761, _764));
        float _1118 = dot(vec4(_1098, _1099, _1100, 1.0), vec4(_756, _759, _762, _765));
        float _1122 = dot(vec4(_1098, _1099, _1100, 1.0), vec4(_757, _760, _763, _766));
        float _1129 = dot(vec4(cbModelParam._m0[39u]), vec4(_1098, _1099, _1100, 1.0));
        _1141 = dot(vec3(isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)), isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1129) ? 0.0 : (isnan(0.0) ? _1129 : max(0.0, _1129))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1141 = 1.0;
    }
    float _1152;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1143 = dot(vec4(cbModelParam._m0[40u]), vec4(_1098, _1099, _1100, 1.0));
        _1152 = dot(vec3(isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)), isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)), isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1143) ? 0.0 : (isnan(0.0) ? _1143 : max(0.0, _1143))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1152 = 1.0;
    }
    float _1156 = (_1152 * cbModelParam._m0[1u].x) + (_1141 * (1.0 - cbModelParam._m0[1u].x));
    float _1165 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1247;
    float _1249;
    float _1251;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1214 = fma(_485, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477)) + cbModelParam._m0[13u].w;
        float _1218 = fma(_485, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477)) + cbModelParam._m0[14u].w;
        float _1222 = fma(_485, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477)) + cbModelParam._m0[15u].w;
        float _1225 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1228 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1231 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1257;
        if (_1225 > 0.0)
        {
            _1257 = abs((1.0 - _1214) / _1225);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1225 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1214 + 1.0) / _1225);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1257 = frontier_phi_22_20_ladder;
        }
        float _1428;
        if (_1228 > 0.0)
        {
            _1428 = abs((1.0 - _1218) / _1228);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1228 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1218 + 1.0) / _1228);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1428 = frontier_phi_31_27_ladder;
        }
        float _1824;
        if (_1231 > 0.0)
        {
            _1824 = abs((1.0 - _1222) / _1231);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1231 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1222 + 1.0) / _1231);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _1824 = frontier_phi_43_38_ladder;
        }
        float _1826 = isnan(_1428) ? _1257 : (isnan(_1257) ? _1428 : min(_1257, _1428));
        float _1827 = isnan(_1824) ? _1826 : (isnan(_1826) ? _1824 : min(_1826, _1824));
        float _1831 = (_1827 * _1225) + _1214;
        float _1832 = (_1827 * _1228) + _1218;
        float _1833 = (_1827 * _1231) + _1222;
        float _1834 = _1827 * 9.9999997473787516355514526367188e-05;
        float _1836 = (-1.0) - _1834;
        float _1838 = _1834 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_1833 > _1838) || ((_1833 < _1836) || ((_1832 > _1838) || ((_1832 < _1836) || ((_1831 < _1836) || (_1831 > _1838))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1833, cbModelParam._m0[9u].z, fma(_1832, cbModelParam._m0[9u].y, _1831 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1833, cbModelParam._m0[10u].z, fma(_1832, cbModelParam._m0[10u].y, _1831 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1833, cbModelParam._m0[11u].z, fma(_1832, cbModelParam._m0[11u].y, _1831 * cbModelParam._m0[11u].x))), _1165);
            frontier_phi_21_43_ladder = _2068.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2068.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2068.z * cbModelParam._m0[1u].y;
        }
        _1247 = frontier_phi_21_43_ladder_1;
        _1249 = frontier_phi_21_43_ladder;
        _1251 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _1165);
        _1247 = _1235.x * cbModelParam._m0[1u].y;
        _1249 = _1235.y * cbModelParam._m0[1u].y;
        _1251 = _1235.z * cbModelParam._m0[1u].y;
    }
    float _1254 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1343;
    float _1345;
    float _1347;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1307 = fma(_485, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477)) + cbModelParam._m0[21u].w;
        float _1311 = fma(_485, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477)) + cbModelParam._m0[22u].w;
        float _1315 = fma(_485, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477)) + cbModelParam._m0[23u].w;
        float _1318 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1321 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1324 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1433;
        if (_1318 > 0.0)
        {
            _1433 = abs((1.0 - _1307) / _1318);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1307 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1433 = frontier_phi_33_29_ladder;
        }
        float _1851;
        if (_1321 > 0.0)
        {
            _1851 = abs((1.0 - _1311) / _1321);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1311 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _1851 = frontier_phi_45_40_ladder;
        }
        float _2190;
        if (_1324 > 0.0)
        {
            _2190 = abs((1.0 - _1315) / _1324);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1315 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2190 = frontier_phi_57_52_ladder;
        }
        float _2192 = isnan(_1851) ? _1433 : (isnan(_1433) ? _1851 : min(_1433, _1851));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1318) + _1307;
        float _2198 = (_2193 * _1321) + _1311;
        float _2199 = (_2193 * _1324) + _1315;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2200;
        float _2203 = _2200 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2199 > _2203) || ((_2199 < _2201) || ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 < _2201) || (_2197 > _2203))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2199, cbModelParam._m0[17u].z, fma(_2198, cbModelParam._m0[17u].y, _2197 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2199, cbModelParam._m0[18u].z, fma(_2198, cbModelParam._m0[18u].y, _2197 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2199, cbModelParam._m0[19u].z, fma(_2198, cbModelParam._m0[19u].y, _2197 * cbModelParam._m0[19u].x))), _1254);
            frontier_phi_30_57_ladder = _2317.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2317.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2317.x * cbModelParam._m0[1u].z;
        }
        _1343 = frontier_phi_30_57_ladder_2;
        _1345 = frontier_phi_30_57_ladder_1;
        _1347 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1327 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1254);
        _1343 = _1327.x * cbModelParam._m0[1u].z;
        _1345 = _1327.y * cbModelParam._m0[1u].z;
        _1347 = _1327.z * cbModelParam._m0[1u].z;
    }
    float _1359 = _452 * 0.01200000010430812835693359375;
    float _1361 = _1359 * ((cbModelParam._m0[1u].w * (_1343 - _1247)) + _1247);
    float _1362 = _1359 * ((cbModelParam._m0[1u].w * (_1345 - _1249)) + _1249);
    float _1363 = _1359 * ((cbModelParam._m0[1u].w * (_1347 - _1251)) + _1251);
    float _1366 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1369 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1372 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, _1361 * cbSceneParam._m0[91u].x));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1411 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1415 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1419 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1420 = _1407 / _1419;
    float _1421 = _1411 / _1419;
    float _1422 = _1415 / _1419;
    float _1570;
    float _1571;
    float _1572;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1449 = ((uint(_1422 > cbSceneParam._m0[59u].y) + uint(_1422 > cbSceneParam._m0[59u].x)) + uint(_1422 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1450 = _1449 + 43u;
        uint _1458 = _1449 + 44u;
        uint _1466 = _1449 + 45u;
        uint _1474 = _1449 + 46u;
        float _1485 = fma(_1419, cbSceneParam._m0[_1450].w, fma(_1415, cbSceneParam._m0[_1450].z, fma(_1411, cbSceneParam._m0[_1450].y, _1407 * cbSceneParam._m0[_1450].x)));
        float _1489 = fma(_1419, cbSceneParam._m0[_1458].w, fma(_1415, cbSceneParam._m0[_1458].z, fma(_1411, cbSceneParam._m0[_1458].y, _1407 * cbSceneParam._m0[_1458].x)));
        float _1497 = fma(_1419, cbSceneParam._m0[_1474].w, fma(_1415, cbSceneParam._m0[_1474].z, fma(_1411, cbSceneParam._m0[_1474].y, _1407 * cbSceneParam._m0[_1474].x)));
        float _1502 = cbSceneParam._m0[33u].z * _1497;
        float _1504 = cbSceneParam._m0[33u].w * _1497;
        float _1507 = fma(_1419, cbSceneParam._m0[_1466].w, fma(_1415, cbSceneParam._m0[_1466].z, fma(_1411, cbSceneParam._m0[_1466].y, _1407 * cbSceneParam._m0[_1466].x))) / _1497;
        float _1555 = (cbSceneParam._m0[33u].x - sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422))) * cbSceneParam._m0[33u].y;
        float _3354 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1563 = (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1502 + _1485) / _1497, (_1504 + _1489) / _1497), _1507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1504 + _1485) / _1497, (_1489 - _1502) / _1497), _1507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1485 - _1502) / _1497, (_1489 - _1504) / _1497), _1507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1485 - _1504) / _1497, (_1502 + _1489) / _1497), _1507), 0.0)).x), vec4(0.25)));
        _1570 = 1.0 - (_1563 * cbSceneParam._m0[34u].x);
        _1571 = 1.0 - (_1563 * cbSceneParam._m0[34u].y);
        _1572 = 1.0 - (_1563 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1570 = 1.0;
        _1571 = 1.0;
        _1572 = 1.0;
    }
    float _1636;
    float _1638;
    float _1640;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1624 = fma(_1419, cbSceneParam._m0[63u].w, fma(_1415, cbSceneParam._m0[63u].z, fma(_1411, cbSceneParam._m0[63u].y, _1407 * cbSceneParam._m0[63u].x)));
        float _1625 = fma(_1419, cbSceneParam._m0[60u].w, fma(_1415, cbSceneParam._m0[60u].z, fma(_1411, cbSceneParam._m0[60u].y, _1407 * cbSceneParam._m0[60u].x))) / _1624;
        float _1626 = fma(_1419, cbSceneParam._m0[61u].w, fma(_1415, cbSceneParam._m0[61u].z, fma(_1411, cbSceneParam._m0[61u].y, _1407 * cbSceneParam._m0[61u].x))) / _1624;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1625 >= cbSceneParam._m0[64u].x) && (_1626 >= cbSceneParam._m0[64u].y)) && (_1625 <= cbSceneParam._m0[64u].z)) && (_1626 <= cbSceneParam._m0[64u].w))
        {
            float _1864 = fma(_1419, cbSceneParam._m0[62u].w, fma(_1415, cbSceneParam._m0[62u].z, fma(_1411, cbSceneParam._m0[62u].y, _1407 * cbSceneParam._m0[62u].x))) / _1624;
            float _1868 = isnan(cbSceneParam._m0[41u].w) ? _1864 : (isnan(_1864) ? cbSceneParam._m0[41u].w : max(_1864, cbSceneParam._m0[41u].w));
            float _1911 = (cbSceneParam._m0[33u].x - sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422))) * cbSceneParam._m0[33u].y;
            float _3370 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
            float _1918 = (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1625, cbSceneParam._m0[33u].w + _1626), _1868), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1625, _1626 - cbSceneParam._m0[33u].z), _1868), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1625 - cbSceneParam._m0[33u].z, _1626 - cbSceneParam._m0[33u].w), _1868), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1625 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1626), _1868), 0.0)).x), vec4(0.25)));
            float _1922 = 1.0 - (_1918 * cbSceneParam._m0[34u].x);
            float _1923 = 1.0 - (_1918 * cbSceneParam._m0[34u].y);
            float _1924 = 1.0 - (_1918 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_1923) ? _1571 : (isnan(_1571) ? _1923 : min(_1571, _1923));
            frontier_phi_42_41_ladder_1 = isnan(_1922) ? _1570 : (isnan(_1570) ? _1922 : min(_1570, _1922));
            frontier_phi_42_41_ladder_2 = isnan(_1924) ? _1572 : (isnan(_1572) ? _1924 : min(_1572, _1924));
        }
        else
        {
            frontier_phi_42_41_ladder = _1571;
            frontier_phi_42_41_ladder_1 = _1570;
            frontier_phi_42_41_ladder_2 = _1572;
        }
        _1636 = frontier_phi_42_41_ladder_1;
        _1638 = frontier_phi_42_41_ladder;
        _1640 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1636 = _1570;
        _1638 = _1571;
        _1640 = _1572;
    }
    uvec4 _1646 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1648 = _1646.x * 14u;
    uint _1649 = _1648 + 13u;
    float _1654 = _452 + (-1.0);
    float _1658 = (cbLight._m0[_1649].x * _1654) + 1.0;
    float _1659 = (cbLight._m0[_1649].y * _1654) + 1.0;
    uint _1660 = _1648 + 5u;
    float _1666 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
    uint _1670 = _1648 + 4u;
    float _1679 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
    uint _1683 = _1648 | 1u;
    float _1694 = dot(vec3(cbLight._m0[_1648].xyz), vec3(0.0));
    float _1697 = dot(vec3(cbLight._m0[_1683].xyz), vec3(0.0));
    float _3406 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _3417 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1702 = (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * 0.3183098733425140380859375;
    float _1704 = (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.3183098733425140380859375;
    float _1711 = ((cbLight._m0[_1660].x * _1666) * _1704) + (((cbLight._m0[_1670].x * _1636) * _1679) * _1702);
    float _1712 = ((_1666 * cbLight._m0[_1660].y) * _1704) + (((cbLight._m0[_1670].y * _1638) * _1679) * _1702);
    float _1713 = ((_1666 * cbLight._m0[_1660].z) * _1704) + (((cbLight._m0[_1670].z * _1640) * _1679) * _1702);
    uint _1714 = _1648 + 8u;
    float _1720 = cbLight._m0[_1648].x + _404;
    float _1721 = cbLight._m0[_1648].y + _405;
    float _1722 = cbLight._m0[_1648].z + _406;
    float _1726 = inversesqrt(dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722)));
    float _1730 = dot(vec3(0.0), vec3(cbLight._m0[_1648].xyz));
    float _3428 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1733 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _1734 = dot(vec3(0.0), vec3(_404, _405, _406));
    float _3439 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _1738 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_1720 * _1726, _1721 * _1726, _1722 * _1726));
    float _3450 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1749 = (exp2(log2(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1755 = (0.5 / ((_1733 + 9.9999999392252902907785028219223e-09) + _1737)) * _1733;
    float _3461 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1757 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.31831014156341552734375;
    uint _1771 = _1648 + 9u;
    float _1777 = cbLight._m0[_1683].x + _404;
    float _1778 = cbLight._m0[_1683].y + _405;
    float _1779 = cbLight._m0[_1683].z + _406;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1787 = dot(vec3(0.0), vec3(cbLight._m0[_1683].xyz));
    float _3472 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1777 * _1783, _1778 * _1783, _1779 * _1783));
    float _3483 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1800 = (exp2(log2(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = (0.5 / ((_1790 + 9.9999999392252902907785028219223e-09) + _1737)) * _1790;
    float _3494 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.31831014156341552734375;
    float _1816 = (((_1800 * cbLight._m0[_1771].x) * _1806) * _1666) + ((((cbLight._m0[_1714].x * _1636) * _1749) * _1757) * _1679);
    float _1817 = (((_1800 * cbLight._m0[_1771].y) * _1806) * _1666) + ((((cbLight._m0[_1714].y * _1638) * _1749) * _1757) * _1679);
    float _1818 = (((_1800 * cbLight._m0[_1771].z) * _1806) * _1666) + ((((cbLight._m0[_1714].z * _1640) * _1749) * _1757) * _1679);
    float _1982;
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    if (_1646.y == 0u)
    {
        uvec4 _1936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1937 = _1936.x;
        uint _1948 = uint((float(_1936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _1937))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _1937)));
        float _1958 = (log2(_1422 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1959 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        uint _1962 = uint(isnan(14.0) ? _1959 : (isnan(_1959) ? 14.0 : min(_1959, 14.0)));
        uvec4 _1968 = texelFetch(g_lightClusterGridBuffer, int(((_1962 << 2u) + (_1948 << 6u)) >> 2u));
        uint _1969 = _1968.x;
        uint _1970 = _1936.z;
        float _2077;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        float _2087;
        if (((((1u << ((_1970 >> 4u) & 15u)) + 4294967295u) & _1969) == 0u) || ((_1970 & 240u) == 0u))
        {
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
            _2087 = 0.0;
        }
        else
        {
            float _2078;
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2088;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            uint _2251 = 0u;
            uint _2260;
            bool _2261;
            for (;;)
            {
                _2260 = texelFetch(g_lightClassification, int((((_1962 << 5u) + (_1948 << 9u)) + (_2251 << 2u)) >> 2u)).x;
                _2261 = _2260 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2261)
                {
                    frontier_phi_66_pred = _2246;
                    frontier_phi_66_pred_1 = _2245;
                    frontier_phi_66_pred_2 = _2247;
                    frontier_phi_66_pred_3 = _2250;
                    frontier_phi_66_pred_4 = _2249;
                    frontier_phi_66_pred_5 = _2248;
                }
                else
                {
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    uint _2396;
                    _2390 = _2245;
                    _2391 = _2246;
                    _2392 = _2247;
                    _2393 = _2248;
                    _2394 = _2249;
                    _2395 = _2250;
                    _2396 = _2260;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    float _2327;
                    for (;;)
                    {
                        uint _2400 = uint(findLSB(_2396)) + (_2251 << 5u);
                        uint _2397 = (_2396 + 4294967295u) & _2396;
                        uint _2402 = _2400 * 48u;
                        vec4 _2416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2402)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 3u)).x));
                        uint _2422 = (_2400 * 48u) + 4u;
                        vec4 _2435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2422)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 3u)).x));
                        uint _2441 = (_2400 * 48u) + 8u;
                        vec3 _2452 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2441)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 2u)).x));
                        float _2456 = _2416.x - _1420;
                        float _2457 = _2416.y - _1421;
                        float _2458 = _2416.z - _1422;
                        float _2459 = dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458));
                        float _2462 = inversesqrt(_2459);
                        float _2471 = 1.0 - (_2459 * _2416.w);
                        float _3515 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _2472 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
                        float _2473 = sqrt(_2459) * _2435.w;
                        float _2476 = 1.39999997615814208984375 / (_2473 + 1.39999997615814208984375);
                        float _2477 = _2476 * _2476;
                        float _2480 = ((1.0 - _2477) * dot(vec3(0.0), vec3(_2462 * _2456, _2462 * _2457, _2462 * _2458))) + _2477;
                        float _2483 = _2473 * _2473;
                        float _2487 = ((isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0))) * _2472) / ((_2483 * 0.699999988079071044921875) + 1.0);
                        float _2491 = (-0.0) - _1420;
                        float _2492 = (-0.0) - _1421;
                        float _2493 = (-0.0) - _1422;
                        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
                        float _2501 = dot(vec3(0.0), vec3(_2497 * _2491, _2497 * _2492, _2497 * _2493));
                        float _3531 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _3542 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
                        float _2505 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
                        float _2509 = (0.5 / (((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) + 9.9999999392252902907785028219223e-09) + _2505)) * _2505;
                        float _3553 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                        float _2518 = (((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * 3.1415927410125732421875) / ((_2483 * 2.1991131305694580078125) + 3.141590118408203125)) * _2472;
                        _2325 = (_2487 * _2435.x) + _2393;
                        _2326 = (_2487 * _2435.y) + _2394;
                        _2327 = (_2487 * _2435.z) + _2395;
                        _2322 = (_2518 * _2452.x) + _2390;
                        _2323 = (_2518 * _2452.y) + _2391;
                        _2324 = (_2518 * _2452.z) + _2392;
                        if (_2397 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2390 = _2322;
                            _2391 = _2323;
                            _2392 = _2324;
                            _2393 = _2325;
                            _2394 = _2326;
                            _2395 = _2327;
                            _2396 = _2397;
                        }
                    }
                    frontier_phi_66_pred = _2323;
                    frontier_phi_66_pred_1 = _2322;
                    frontier_phi_66_pred_2 = _2324;
                    frontier_phi_66_pred_3 = _2327;
                    frontier_phi_66_pred_4 = _2326;
                    frontier_phi_66_pred_5 = _2325;
                }
                _2080 = frontier_phi_66_pred;
                _2078 = frontier_phi_66_pred_1;
                _2082 = frontier_phi_66_pred_2;
                _2088 = frontier_phi_66_pred_3;
                _2086 = frontier_phi_66_pred_4;
                _2084 = frontier_phi_66_pred_5;
                uint _2252 = _2251 + 1u;
                if (_2252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2245 = _2078;
                    _2246 = _2080;
                    _2247 = _2082;
                    _2248 = _2084;
                    _2249 = _2086;
                    _2250 = _2088;
                    _2251 = _2252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
            _2087 = _2088;
        }
        uvec4 _2091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2092 = _2091.z;
        uint _2094 = (_2092 >> 8u) & 15u;
        float _2216;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        if (((4294967295u << _2094) & _1969) == 0u)
        {
            _2216 = _2077;
            _2218 = _2079;
            _2220 = _2081;
            _2222 = _2083;
            _2224 = _2085;
            _2226 = _2087;
        }
        else
        {
            float _2241 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2094 < ((_2092 >> 12u) & 15u))
            {
                float _2217;
                float _2219;
                float _2221;
                float _2223;
                float _2225;
                float _2227;
                float _2373 = _2077;
                float _2374 = _2079;
                float _2375 = _2081;
                float _2376 = _2083;
                float _2377 = _2085;
                float _2378 = _2087;
                uint _2379 = _2094;
                uint _2388;
                bool _2389;
                for (;;)
                {
                    _2388 = texelFetch(g_lightClassification, int((((_1962 << 5u) + (_1948 << 9u)) + (_2379 << 2u)) >> 2u)).x;
                    _2389 = _2388 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2389)
                    {
                        frontier_phi_72_pred = _2374;
                        frontier_phi_72_pred_1 = _2373;
                        frontier_phi_72_pred_2 = _2378;
                        frontier_phi_72_pred_3 = _2377;
                        frontier_phi_72_pred_4 = _2376;
                        frontier_phi_72_pred_5 = _2375;
                    }
                    else
                    {
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2526;
                        float _2527;
                        float _2528;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2536 = _2373;
                        float _2537 = _2374;
                        float _2538 = _2375;
                        float _2539 = _2376;
                        float _2540 = _2377;
                        float _2541 = _2378;
                        uint _2542 = _2388;
                        uint _2543;
                        vec4 _2568;
                        float _2569;
                        vec4 _2584;
                        vec3 _2596;
                        vec4 _2611;
                        vec4 _2627;
                        float _2673;
                        bool _2674;
                        for (;;)
                        {
                            uint _2553 = ((_2379 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2542));
                            _2543 = (_2542 + 4294967295u) & _2542;
                            uint _2555 = _2553 * 40u;
                            _2568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 3u)).x));
                            _2569 = _2568.w;
                            uint _2571 = (_2553 * 40u) + 4u;
                            _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            uint _2586 = (_2553 * 40u) + 8u;
                            _2596 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x));
                            uint _2598 = (_2553 * 40u) + 16u;
                            _2611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 3u)).x));
                            uint _2614 = (_2553 * 40u) + 20u;
                            _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            uint _2629 = (_2553 * 40u) + 24u;
                            vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 3u)).x));
                            uint _2648 = (_2553 * 40u) + 28u;
                            vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            _2673 = fma(_1422, _2661.z, fma(_1421, _2661.y, _2661.x * _1420)) + _2661.w;
                            _2674 = !((fma(_1422, _2642.z, fma(_1421, _2642.y, _2642.x * _1420)) + _2642.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2674)
                            {
                                float _2701 = _2568.x - _1420;
                                float _2702 = _2568.y - _1421;
                                float _2703 = _2568.z - _1422;
                                float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                                float _2707 = inversesqrt(_2704);
                                float _2708 = _2707 * _2701;
                                float _2709 = _2707 * _2702;
                                float _2710 = _2707 * _2703;
                                float _2714 = 1.0 - (_2704 / (_2569 * _2569));
                                float _3564 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                                float _2715 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
                                float _2719 = sqrt(_2704) * _2584.w;
                                float _2721 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                                float _2722 = _2721 * _2721;
                                float _2723 = 1.0 - _2722;
                                float _2725 = (_2723 * dot(vec3(_2708, _2709, _2710), vec3(0.0))) + _2722;
                                float _2728 = _2719 * _2719;
                                float _2732 = (fma(_1422, _2611.z, fma(_1421, _2611.y, _2611.x * _1420)) + _2611.w) / _2673;
                                float _2733 = (fma(_1422, _2627.z, fma(_1421, _2627.y, _2627.x * _1420)) + _2627.w) / _2673;
                                float _2737 = 1.0 - dot(vec2(_2732, _2733), vec2(_2732, _2733));
                                float _3580 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                                float _2738 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
                                float _2739 = _2738 * (((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2715) / ((_2728 * 0.699999988079071044921875) + 1.0));
                                float _2749 = dot(vec3(0.0), vec3((-0.0) - (_1420 * _2241), (-0.0) - (_1421 * _2241), (-0.0) - (_1422 * _2241)));
                                float _3591 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2757 = (_2723 * dot(vec3(0.0), vec3(_2708, _2709, _2710))) + _2722;
                                float _3602 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2758 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
                                float _2762 = (0.5 / (((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) + 9.9999999392252902907785028219223e-09) + _2758)) * _2758;
                                float _3613 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2769 = (_2738 * _2715) * (((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 3.1415927410125732421875) / ((_2728 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2769 * _2596.y;
                                frontier_phi_78_pred_1 = _2769 * _2596.x;
                                frontier_phi_78_pred_2 = _2739 * _2584.z;
                                frontier_phi_78_pred_3 = _2739 * _2584.y;
                                frontier_phi_78_pred_4 = _2739 * _2584.x;
                                frontier_phi_78_pred_5 = _2769 * _2596.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _2774 = frontier_phi_78_pred;
                            _2773 = frontier_phi_78_pred_1;
                            _2778 = frontier_phi_78_pred_2;
                            _2777 = frontier_phi_78_pred_3;
                            _2776 = frontier_phi_78_pred_4;
                            _2775 = frontier_phi_78_pred_5;
                            _2526 = _2776 + _2539;
                            _2527 = _2777 + _2540;
                            _2528 = _2778 + _2541;
                            _2523 = _2773 + _2536;
                            _2524 = _2774 + _2537;
                            _2525 = _2775 + _2538;
                            if (_2543 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2526;
                                _2540 = _2527;
                                _2541 = _2528;
                                _2542 = _2543;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2524;
                        frontier_phi_72_pred_1 = _2523;
                        frontier_phi_72_pred_2 = _2528;
                        frontier_phi_72_pred_3 = _2527;
                        frontier_phi_72_pred_4 = _2526;
                        frontier_phi_72_pred_5 = _2525;
                    }
                    _2219 = frontier_phi_72_pred;
                    _2217 = frontier_phi_72_pred_1;
                    _2227 = frontier_phi_72_pred_2;
                    _2225 = frontier_phi_72_pred_3;
                    _2223 = frontier_phi_72_pred_4;
                    _2221 = frontier_phi_72_pred_5;
                    uint _2380 = _2379 + 1u;
                    if (_2380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2373 = _2217;
                        _2374 = _2219;
                        _2375 = _2221;
                        _2376 = _2223;
                        _2377 = _2225;
                        _2378 = _2227;
                        _2379 = _2380;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2227;
                frontier_phi_59_60_ladder_1 = _2223;
                frontier_phi_59_60_ladder_2 = _2221;
                frontier_phi_59_60_ladder_3 = _2219;
                frontier_phi_59_60_ladder_4 = _2217;
                frontier_phi_59_60_ladder_5 = _2225;
            }
            else
            {
                frontier_phi_59_60_ladder = _2087;
                frontier_phi_59_60_ladder_1 = _2083;
                frontier_phi_59_60_ladder_2 = _2081;
                frontier_phi_59_60_ladder_3 = _2079;
                frontier_phi_59_60_ladder_4 = _2077;
                frontier_phi_59_60_ladder_5 = _2085;
            }
            _2216 = frontier_phi_59_60_ladder_4;
            _2218 = frontier_phi_59_60_ladder_3;
            _2220 = frontier_phi_59_60_ladder_2;
            _2222 = frontier_phi_59_60_ladder_1;
            _2224 = frontier_phi_59_60_ladder_5;
            _2226 = frontier_phi_59_60_ladder;
        }
        float _2231 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _1982 = (_2231 * _2222) + _1711;
        _1984 = (_2231 * _2224) + _1712;
        _1986 = (_2231 * _2226) + _1713;
        _1988 = ((_2216 * 0.039999999105930328369140625) * _2231) + _1816;
        _1990 = ((_2218 * 0.039999999105930328369140625) * _2231) + _1817;
        _1992 = ((_2220 * 0.039999999105930328369140625) * _2231) + _1818;
    }
    else
    {
        _1982 = _1711;
        _1984 = _1712;
        _1986 = _1713;
        _1988 = _1816;
        _1990 = _1817;
        _1992 = _1818;
    }
    float _3629 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3640 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3651 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _2009 = ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1982 + ((isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0))) * _452))) + ((_1988 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _1156)) * cbPerFrame._m0[3u].x);
    float _2010 = ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1984 + ((isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0))) * _452))) + ((_1990 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _1156)) * cbPerFrame._m0[3u].x);
    float _2011 = ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1986 + ((isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))) * _452))) + ((_1992 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _1156)) * cbPerFrame._m0[3u].x);
    uint _2015 = _426 + 6u;
    float _2023 = _412 / cbSceneParam._m0[86u].x;
    float _2024 = _413 / cbSceneParam._m0[86u].y;
    vec4 _2038 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2023, _2024, (log2((isnan(cbSceneParam._m0[77u].w) ? _399 : (isnan(_399) ? cbSceneParam._m0[77u].w : min(_399, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2040 = _2038.x;
    float _2041 = _2038.y;
    float _2042 = _2038.z;
    float _2043 = _2038.w;
    float _2139;
    float _2141;
    float _2143;
    float _2145;
    if (_399 > cbSceneParam._m0[78u].w)
    {
        float _2102 = isnan(_399) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _399 : min(cbSceneParam._m0[80u].w, _399));
        float _2103 = _2102 / _399;
        float _2114 = _2103 * _250;
        float _2115 = _251 * _2103;
        float _2116 = (-0.0) - _2115;
        float _2117 = _2103 * _252;
        float _2119 = (cbSceneParam._m0[77u].w * _2116) / _2102;
        float _2120 = _2119 + cbSceneParam._m0[79u].w;
        float _2121 = cbSceneParam._m0[79u].w - _2115;
        float _2127 = sqrt(((_2114 * _2114) + (_2115 * _2115)) + (_2117 * _2117));
        float _2130 = (1.0 - (cbSceneParam._m0[77u].w / _2102)) * _2127;
        float _2135 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2137 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2335;
        if (abs((_2116 - _2119) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2335 = ((((_2120 > 0.0) ? exp2(_2135 * _2120) : (2.0 - exp2(_2137 * _2120))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2130;
        }
        else
        {
            float _2274 = 1.0 / cbSceneParam._m0[80u].x;
            float _2275 = isnan(_2121) ? _2120 : (isnan(_2120) ? _2121 : max(_2120, _2121));
            float _2276 = isnan(_2121) ? _2120 : (isnan(_2120) ? _2121 : min(_2120, _2121));
            float _2285 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : min(_2275, 0.0));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            _2335 = ((abs(_2127 / _2116) * cbSceneParam._m0[80u].y) * ((((_2285 - _2286) * 2.0) - ((exp2(_2135 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)))) - exp2(_2135 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))))) * _2274)) - ((exp2(_2137 * _2285) - exp2(_2137 * _2286)) * _2274))) + (_2130 * cbSceneParam._m0[80u].z);
        }
        vec4 _2337 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2023, _2024, 1.0), 0.0);
        float _2346 = exp2((_2335 * (-1.44269502162933349609375)) * (1.0 - _2337.w));
        float _2347 = log2(_2346);
        float _2363 = log2(_2043);
        _2139 = (exp2(_2363 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].x)) * _2337.x) / cbSceneParam._m0[78u].x)) + _2040;
        _2141 = (exp2(_2363 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].y)) * _2337.y) / cbSceneParam._m0[78u].y)) + _2041;
        _2143 = (exp2(_2363 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].z)) * _2337.z) / cbSceneParam._m0[78u].z)) + _2042;
        _2145 = _2346 * _2043;
    }
    else
    {
        _2139 = _2040;
        _2141 = _2041;
        _2143 = _2042;
        _2145 = _2043;
    }
    float _2157 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2158 = _2157 == 3.0;
    float _2160 = log2(_2145);
    float _2167 = exp2(_2160 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
    float _2168 = exp2(_2160 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)));
    float _2169 = exp2(_2160 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)));
    float _2178 = (_2157 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2178 * (_2158 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2139)));
    SV_Target.y = _2178 * (_2158 ? _2168 : (_2168 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.z = _2178 * (_2158 ? _2169 : (_2169 + (cbSceneParam._m0[72u].w * _2143)));
    SV_Target.w = cbInstanceData._m0[_2015].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2015].w;
}


