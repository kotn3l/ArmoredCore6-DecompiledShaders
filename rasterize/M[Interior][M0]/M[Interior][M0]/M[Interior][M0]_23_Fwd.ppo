#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _422;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    vec4 _337 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _341 = _337.z;
    float _345 = (_337.x * 2.0) + (-1.0);
    float _347 = (_337.y * 2.0) + (-1.0);
    float _353 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _360 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _369 = cbMtdParam._m0[23u].x + _257;
    float _370 = cbMtdParam._m0[23u].y + _258;
    float _371 = cbMtdParam._m0[23u].z + _259;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_353 * _186, _353 * _187, _353 * _188));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_360 * _200, _360 * _201, _360 * _202));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _391 * _387;
    float _397 = ((cbMtdParam._m0[19u].w * _385) * _391) + (_345 * cbMtdParam._m0[20u].y);
    float _398 = ((cbMtdParam._m0[20u].x * _386) * _391) + (_347 * cbMtdParam._m0[20u].z);
    float _401 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _402 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _420;
    float _423;
    float _425;
    if (_397 > 0.0)
    {
        float _406 = (1.0 - _401) / _397;
        _420 = _406;
        _423 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_406 * _392)) * 0.16666667163372039794921875;
        _425 = (fract((_406 * _398) + _402) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_397 < 0.0)
        {
            float _421 = ((-0.0) - _401) / _397;
            frontier_phi_3_2_ladder = (fract((_421 * _398) + _402) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _421;
            frontier_phi_3_2_ladder_2 = (fract(_421 * _392) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _422;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _420 = frontier_phi_3_2_ladder_1;
        _423 = frontier_phi_3_2_ladder_2;
        _425 = frontier_phi_3_2_ladder;
    }
    float _451;
    float _453;
    float _455;
    if (_398 > 0.0)
    {
        float _438 = (1.0 - _402) / _398;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_438 < _420)
        {
            frontier_phi_8_5_ladder = (fract((_438 * _397) + _401) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _438;
            frontier_phi_8_5_ladder_2 = (fract(_438 * _392) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _423;
            frontier_phi_8_5_ladder_1 = _420;
            frontier_phi_8_5_ladder_2 = _425;
        }
        _451 = frontier_phi_8_5_ladder_1;
        _453 = frontier_phi_8_5_ladder;
        _455 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_398 < 0.0)
        {
            float _452 = ((-0.0) - _402) / _398;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_452 < _420)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_452 * _397) + _401) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _452;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_452 * _392) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _423;
                frontier_phi_8_6_ladder_9_ladder_1 = _420;
                frontier_phi_8_6_ladder_9_ladder_2 = _425;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _423;
            frontier_phi_8_6_ladder_1 = _420;
            frontier_phi_8_6_ladder_2 = _425;
        }
        _451 = frontier_phi_8_6_ladder_1;
        _453 = frontier_phi_8_6_ladder;
        _455 = frontier_phi_8_6_ladder_2;
    }
    float _459 = (_392 > 0.0) ? (cbMtdParam._m0[16u].w / _392) : 5000.0;
    float _472;
    float _473;
    if (_459 < _451)
    {
        _472 = ((_401 + cbMtdParam._m0[17u].x) + (_459 * _397)) * 0.16666667163372039794921875;
        _473 = (((_459 * _398) + _402) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _472 = _453;
        _473 = _455;
    }
    vec4 _475 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_472, _473));
    float _480 = _475.x * cbMtdParam._m0[13u].x;
    float _481 = _475.y * cbMtdParam._m0[13u].y;
    float _482 = _475.z * cbMtdParam._m0[13u].z;
    vec4 _500 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _504 = _500.z;
    float _507 = (_500.x * 2.0) + (-1.0);
    float _508 = (_500.y * 2.0) + (-1.0);
    float _509 = dot(vec2(_507, _508), vec2(_507, _508));
    float _3117 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _514 = sqrt(1.0 - (isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))));
    float _515 = _504 * _284;
    float _525 = (cbMtdParam._m0[15u].w * ((_341 - _515) + ((_504 - _341) * _284))) + _515;
    float _533 = (cbMtdParam._m0[16u].x * (_345 - (_345 * _284))) + _507;
    float _534 = (cbMtdParam._m0[16u].x * (_347 - (_347 * _284))) + _508;
    float _537 = fma(_514, _193, fma(_534, _200, _533 * _186));
    float _540 = fma(_514, _194, fma(_534, _201, _533 * _187));
    float _543 = fma(_514, _195, fma(_534, _202, _533 * _188));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    float _3128 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _551 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _3139 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3150 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3161 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _570 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _575 = _257 * _574;
    float _576 = _258 * _574;
    float _577 = _259 * _574;
    float _583 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _584 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _604 = fma(_550, cbSceneParam._m0[5u].z, fma(_549, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _548));
    float _607 = fma(_550, cbSceneParam._m0[6u].z, fma(_549, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _548));
    float _610 = fma(_550, cbSceneParam._m0[7u].z, fma(_549, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _548));
    uint _623 = uint(roundEven(NORMAL.w)) * 13u;
    uint _624 = _623 + 9u;
    uint _625 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3172 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _3183 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    vec4 _645 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _583, cbSceneParam._m0[86u].y * _584));
    float _648 = _645.x * TEXCOORD.z;
    float _649 = dot(vec3(_548, _549, _550), vec3(_575, _576, _577));
    float _652 = _649 * 2.0;
    float _656 = (_652 * _548) - _575;
    float _657 = (_652 * _549) - _576;
    float _658 = (_652 * _550) - _577;
    float _662 = abs(dot(vec3(_575, _576, _577), vec3(_548, _549, _550)));
    float _3205 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _664 = sqrt(_551);
    float _677 = exp2((_664 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_664 * 3.0));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709));
        float _754 = fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709));
        float _758 = fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709));
        float _782 = _709 + _548;
        float _783 = _713 + _549;
        float _784 = _717 + _550;
        float _794 = fma(_784, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782)) - _750;
        float _795 = fma(_784, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782)) - _754;
        float _796 = fma(_784, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782)) - _758;
        float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
        float _813 = ((_800 * _794) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_800 * _795) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_800 * _796) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        float _852 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_818.x + (-0.5));
        float _854 = _852 * (_818.y + (-0.5));
        float _855 = _852 * (_818.z + (-0.5));
        float _862 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_825.x + (-0.5));
        float _864 = _862 * (_825.y + (-0.5));
        float _865 = _862 * (_825.z + (-0.5));
        float _872 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_832.x + (-0.5));
        float _874 = _872 * (_832.y + (-0.5));
        float _875 = _872 * (_832.z + (-0.5));
        float _882 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_839.x + (-0.5));
        float _884 = _882 * (_839.y + (-0.5));
        float _885 = _882 * (_839.z + (-0.5));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = _853 * 0.5;
        float _890 = _863 * 0.5;
        float _891 = _873 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _906 = (dot(vec3(_548, _549, _550), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _916 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3253 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_918 + 1.0))) + _923) * _886;
        float _933 = _854 * 0.5;
        float _934 = _864 * 0.5;
        float _935 = _874 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_548, _549, _550), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3286 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_960 + 1.0))) + _965) * _887;
        float _975 = _855 * 0.5;
        float _976 = _865 * 0.5;
        float _977 = _875 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_548, _549, _550), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3319 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_1002 + 1.0))) + _1007) * _888;
        _1024 = _855;
        _1025 = _854;
        _1026 = _853;
        _1027 = _865;
        _1028 = _864;
        _1029 = _863;
        _1030 = _875;
        _1031 = _874;
        _1032 = _873;
        _1033 = _888;
        _1034 = _887;
        _1035 = _886;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
    }
    else
    {
        _1024 = _422;
        _1025 = _422;
        _1026 = _422;
        _1027 = _422;
        _1028 = _422;
        _1029 = _422;
        _1030 = _422;
        _1031 = _422;
        _1032 = _422;
        _1033 = _422;
        _1034 = _422;
        _1035 = _422;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1064 = fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709));
        float _1068 = fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709));
        float _1072 = fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709));
        float _1095 = _709 + _548;
        float _1096 = _713 + _549;
        float _1097 = _717 + _550;
        float _1107 = fma(_1097, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095)) - _1064;
        float _1108 = fma(_1097, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095)) - _1068;
        float _1109 = fma(_1097, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095)) - _1072;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1064 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1068 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[35u].z) + ((((((_1072 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1163 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1130.x + (-0.5));
        float _1165 = _1163 * (_1130.y + (-0.5));
        float _1166 = _1163 * (_1130.z + (-0.5));
        float _1173 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1137.x + (-0.5));
        float _1175 = _1173 * (_1137.y + (-0.5));
        float _1176 = _1173 * (_1137.z + (-0.5));
        float _1183 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1144.x + (-0.5));
        float _1185 = _1183 * (_1144.y + (-0.5));
        float _1186 = _1183 * (_1144.z + (-0.5));
        float _1193 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1151.x + (-0.5));
        float _1195 = _1193 * (_1151.y + (-0.5));
        float _1196 = _1193 * (_1151.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_548, _549, _550), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3382 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1227 + 1.0))) + _1232) * _1197;
        float _1242 = _1165 * 0.5;
        float _1243 = _1175 * 0.5;
        float _1244 = _1185 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_548, _549, _550), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3415 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1269 + 1.0))) + _1274) * _1198;
        float _1284 = _1166 * 0.5;
        float _1285 = _1176 * 0.5;
        float _1286 = _1186 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_548, _549, _550), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3448 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1311 + 1.0))) + _1316) * _1199;
        _1333 = _1166;
        _1334 = _1165;
        _1335 = _1164;
        _1336 = _1176;
        _1337 = _1175;
        _1338 = _1174;
        _1339 = _1186;
        _1340 = _1185;
        _1341 = _1184;
        _1342 = _1199;
        _1343 = _1198;
        _1344 = _1197;
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _422;
        _1334 = _422;
        _1335 = _422;
        _1336 = _422;
        _1337 = _422;
        _1338 = _422;
        _1339 = _422;
        _1340 = _422;
        _1341 = _422;
        _1342 = _422;
        _1343 = _422;
        _1344 = _422;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1037)) + _1037;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1380 = fma(_1359, cbSceneParam._m0[89u].z, fma(_1358, cbSceneParam._m0[89u].y, _1357 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1359, cbSceneParam._m0[90u].z, fma(_1358, cbSceneParam._m0[90u].y, _1357 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1359, cbSceneParam._m0[91u].z, fma(_1358, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1357));
    float _1401 = _656 * 0.5;
    float _1402 = _657 * 0.5;
    float _1403 = _658 * 0.5;
    float _1404 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1407 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1410 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1444;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1417 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1421 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1425 = dot(vec4(_1401, _1402, _1403, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1432 = dot(vec4(cbModelParam._m0[39u]), vec4(_1401, _1402, _1403, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1455;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1446 = dot(vec4(cbModelParam._m0[40u]), vec4(_1401, _1402, _1403, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1459 = (_1455 * cbModelParam._m0[1u].x) + (_1444 * (1.0 - cbModelParam._m0[1u].x));
    float _1469 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1469 : min(cbModelParam._m0[25u].z, _1469));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1518 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1522 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1526 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1529 = fma(_658, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656));
        float _1532 = fma(_658, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656));
        float _1535 = fma(_658, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656));
        float _1563;
        if (_1529 > 0.0)
        {
            _1563 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1563 = frontier_phi_26_24_ladder;
        }
        float _1912;
        if (_1532 > 0.0)
        {
            _1912 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1912 = frontier_phi_35_31_ladder;
        }
        float _2228;
        if (_1535 > 0.0)
        {
            _2228 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2228 = frontier_phi_49_42_ladder;
        }
        float _2230 = isnan(_1912) ? _1563 : (isnan(_1563) ? _1912 : min(_1563, _1912));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1529) + _1518;
        float _2236 = (_2231 * _1532) + _1522;
        float _2237 = (_2231 * _1535) + _1526;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2238;
        float _2241 = _2238 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2237 > _2241) || ((_2237 < _2239) || ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 < _2239) || (_2235 > _2241))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2237, cbModelParam._m0[9u].z, fma(_2236, cbModelParam._m0[9u].y, _2235 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2237, cbModelParam._m0[10u].z, fma(_2236, cbModelParam._m0[10u].y, _2235 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2237, cbModelParam._m0[11u].z, fma(_2236, cbModelParam._m0[11u].y, _2235 * cbModelParam._m0[11u].x))), _1470);
            frontier_phi_25_49_ladder = _2363.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2363.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2363.x * cbModelParam._m0[1u].y;
        }
        _1551 = frontier_phi_25_49_ladder_2;
        _1553 = frontier_phi_25_49_ladder_1;
        _1555 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_656, _657, _658), _1470);
        _1551 = _1539.x * cbModelParam._m0[1u].y;
        _1553 = _1539.y * cbModelParam._m0[1u].y;
        _1555 = _1539.z * cbModelParam._m0[1u].y;
    }
    float _1559 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1559 : min(cbModelParam._m0[25u].w, _1559));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1615 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1619 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1623 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1626 = fma(_658, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656));
        float _1629 = fma(_658, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656));
        float _1632 = fma(_658, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656));
        float _1917;
        if (_1626 > 0.0)
        {
            _1917 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1917 = frontier_phi_37_33_ladder;
        }
        float _2254;
        if (_1629 > 0.0)
        {
            _2254 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2254 = frontier_phi_51_44_ladder;
        }
        float _2423;
        if (_1632 > 0.0)
        {
            _2423 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2423 = frontier_phi_65_60_ladder;
        }
        float _2425 = isnan(_2254) ? _1917 : (isnan(_1917) ? _2254 : min(_1917, _2254));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1626) + _1615;
        float _2431 = (_2426 * _1629) + _1619;
        float _2432 = (_2426 * _1632) + _1623;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2433;
        float _2436 = _2433 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2432 > _2436) || ((_2432 < _2434) || ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 < _2434) || (_2430 > _2436))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2432, cbModelParam._m0[17u].z, fma(_2431, cbModelParam._m0[17u].y, _2430 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2432, cbModelParam._m0[18u].z, fma(_2431, cbModelParam._m0[18u].y, _2430 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2432, cbModelParam._m0[19u].z, fma(_2431, cbModelParam._m0[19u].y, _2430 * cbModelParam._m0[19u].x))), _1560);
            frontier_phi_34_65_ladder = _2665.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2665.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2665.z * cbModelParam._m0[1u].z;
        }
        _1651 = frontier_phi_34_65_ladder_1;
        _1653 = frontier_phi_34_65_ladder;
        _1655 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_656, _657, _658), _1560);
        _1651 = _1635.x * cbModelParam._m0[1u].z;
        _1653 = _1635.y * cbModelParam._m0[1u].z;
        _1655 = _1635.z * cbModelParam._m0[1u].z;
    }
    float _1667 = ((((1.0 - _677) * ((_664 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_677 * _664)) * _648;
    float _1668 = _1667 * ((cbModelParam._m0[1u].w * (_1651 - _1551)) + _1551);
    float _1669 = _1667 * ((cbModelParam._m0[1u].w * (_1653 - _1553)) + _1553);
    float _1670 = _1667 * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, _1668 * cbSceneParam._m0[91u].x));
    uvec4 _1689 = floatBitsToUint(cbInstanceData._m0[_623 + 5u]);
    uint _1691 = _1689.x * 14u;
    uint _1692 = _1691 + 13u;
    float _1697 = _648 + (-1.0);
    float _1700 = (cbLight._m0[_1692].x * _1697) + 1.0;
    float _1701 = (cbLight._m0[_1692].y * _1697) + 1.0;
    uint _1702 = _1691 + 5u;
    float _1708 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1712 = _1691 + 4u;
    float _1719 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1723 = _1691 | 1u;
    float _1734 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_548, _549, _550));
    float _1737 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_548, _549, _550));
    float _3584 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _3595 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1742 = (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 0.3183098733425140380859375;
    float _1744 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.3183098733425140380859375;
    float _1751 = ((cbLight._m0[_1702].x * _1708) * _1744) + ((cbLight._m0[_1712].x * _1719) * _1742);
    float _1752 = ((_1708 * cbLight._m0[_1702].y) * _1744) + ((_1719 * cbLight._m0[_1712].y) * _1742);
    float _1753 = ((_1708 * cbLight._m0[_1702].z) * _1744) + ((_1719 * cbLight._m0[_1712].z) * _1742);
    uint _1755 = _1691 + 8u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1691].w)) * _551) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1691].x + _575;
    float _1771 = cbLight._m0[_1691].y + _576;
    float _1772 = cbLight._m0[_1691].z + _577;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1691].xyz));
    float _3606 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _1784 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _1785 = dot(vec3(_548, _549, _550), vec3(_1777, _1778, _1779));
    float _3628 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_1777, _1778, _1779));
    float _3639 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1769 * _1769;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1808 = (exp2(log2(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1809 = 1.0 - _1769;
    float _1820 = (0.5 / (((_1784 * ((_1783 * _1809) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1809) + _1769) * _1783))) * _1783;
    float _3650 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    uint _1833 = _1691 + 9u;
    float _1844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _551) * 0.949999988079071044921875);
    float _1845 = _1844 * _1844;
    float _1846 = cbLight._m0[_1723].x + _575;
    float _1847 = cbLight._m0[_1723].y + _576;
    float _1848 = cbLight._m0[_1723].z + _577;
    float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
    float _1853 = _1852 * _1846;
    float _1854 = _1852 * _1847;
    float _1855 = _1852 * _1848;
    float _1856 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1723].xyz));
    float _3661 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _1860 = dot(vec3(_548, _549, _550), vec3(_1853, _1854, _1855));
    float _3672 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1853, _1854, _1855));
    float _3683 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1845 * _1845;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1882 = 1.0 - _1845;
    float _1892 = (0.5 / (((_1784 * ((_1859 * _1882) + _1845)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1882) + _1845) * _1859))) * _1859;
    float _3694 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    float _1904 = (((_1881 * cbLight._m0[_1833].x) * _1894) * _1708) + (((_1808 * cbLight._m0[_1755].x) * _1822) * _1719);
    float _1905 = (((_1881 * cbLight._m0[_1833].y) * _1894) * _1708) + (((_1808 * cbLight._m0[_1755].y) * _1822) * _1719);
    float _1906 = (((_1881 * cbLight._m0[_1833].z) * _1894) * _1708) + (((_1808 * cbLight._m0[_1755].z) * _1822) * _1719);
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    if (_1689.y == 0u)
    {
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1961;
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1961;
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1961;
        uvec4 _1976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1977 = _1976.x;
        uint _1988 = uint((float(_1976.y) * floor(float(uint(cbSceneParam._m0[85u].y * _584) / _1977))) + floor(float(uint(cbSceneParam._m0[85u].x * _583) / _1977)));
        float _1998 = (log2(_1964 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1999 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        uint _2002 = uint(isnan(14.0) ? _1999 : (isnan(_1999) ? 14.0 : min(_1999, 14.0)));
        uvec4 _2007 = texelFetch(g_lightClusterGridBuffer, int(((_2002 << 2u) + (_1988 << 6u)) >> 2u));
        uint _2008 = _2007.x;
        uint _2009 = _1976.z;
        float _2115;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        if (((((1u << ((_2009 >> 4u) & 15u)) + 4294967295u) & _2008) == 0u) || ((_2009 & 240u) == 0u))
        {
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
        }
        else
        {
            float _2116;
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            float _2296 = 0.0;
            uint _2297 = 0u;
            uint _2306;
            bool _2307;
            for (;;)
            {
                _2306 = texelFetch(g_lightClassification, int((((_2002 << 5u) + (_1988 << 9u)) + (_2297 << 2u)) >> 2u)).x;
                _2307 = _2306 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2307)
                {
                    frontier_phi_62_pred = _2292;
                    frontier_phi_62_pred_1 = _2291;
                    frontier_phi_62_pred_2 = _2293;
                    frontier_phi_62_pred_3 = _2296;
                    frontier_phi_62_pred_4 = _2295;
                    frontier_phi_62_pred_5 = _2294;
                }
                else
                {
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    uint _2472;
                    _2466 = _2291;
                    _2467 = _2292;
                    _2468 = _2293;
                    _2469 = _2294;
                    _2470 = _2295;
                    _2471 = _2296;
                    _2472 = _2306;
                    float _2372;
                    float _2373;
                    float _2374;
                    float _2375;
                    float _2376;
                    float _2377;
                    for (;;)
                    {
                        uint _2476 = uint(findLSB(_2472)) + (_2297 << 5u);
                        uint _2473 = (_2472 + 4294967295u) & _2472;
                        uint _2478 = _2476 * 48u;
                        vec4 _2492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 3u)).x));
                        uint _2498 = (_2476 * 48u) + 4u;
                        vec4 _2511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2498)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 3u)).x));
                        uint _2517 = (_2476 * 48u) + 8u;
                        vec3 _2528 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2517)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 2u)).x));
                        float _2532 = _2492.x - _1962;
                        float _2533 = _2492.y - _1963;
                        float _2534 = _2492.z - _1964;
                        float _2535 = dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534));
                        float _2538 = inversesqrt(_2535);
                        float _2539 = _2538 * _2532;
                        float _2540 = _2538 * _2533;
                        float _2541 = _2538 * _2534;
                        float _2542 = dot(vec3(_604, _607, _610), vec3(_2539, _2540, _2541));
                        float _2547 = 1.0 - (_2535 * _2492.w);
                        float _3715 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2548 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
                        float _2549 = sqrt(_2535) * _2511.w;
                        float _2552 = 1.39999997615814208984375 / (_2549 + 1.39999997615814208984375);
                        float _2553 = _2552 * _2552;
                        float _2556 = ((1.0 - _2553) * _2542) + _2553;
                        float _2559 = _2549 * _2549;
                        float _2563 = ((isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))) * _2548) / ((_2559 * 0.699999988079071044921875) + 1.0);
                        float _2567 = (-0.0) - _1962;
                        float _2568 = (-0.0) - _1963;
                        float _2569 = (-0.0) - _1964;
                        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
                        float _2574 = _2573 * _2567;
                        float _2575 = _2573 * _2568;
                        float _2576 = _2573 * _2569;
                        float _2584 = exp2(log2(1.0 / ((_2559 * 3.5) + 5.0)) * 0.25);
                        float _2585 = 1.0 - _664;
                        float _2592 = sqrt(1.0 - ((1.0 - (_2585 * _2585)) * (1.0 - (_2584 * _2584))));
                        float _2593 = _2592 * _2592;
                        float _2594 = _2593 * _2593;
                        float _2595 = _2574 + _2539;
                        float _2596 = _2575 + _2540;
                        float _2597 = _2576 + _2541;
                        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
                        float _2605 = dot(vec3(_604, _607, _610), vec3(_2574, _2575, _2576));
                        float _3731 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
                        float _2608 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
                        float _2609 = dot(vec3(_604, _607, _610), vec3(_2601 * _2595, _2601 * _2596, _2601 * _2597));
                        float _3742 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _2612 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
                        float _2616 = ((_2612 * _2612) * (_2594 + (-1.0))) + 1.0;
                        float _2617 = _2552 * _2593;
                        float _2618 = _2617 * _2617;
                        float _2621 = ((1.0 - _2618) * _2542) + _2618;
                        float _3753 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2622 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
                        float _2623 = 1.0 - _2593;
                        float _2633 = (0.5 / (((_2622 * ((_2608 * _2623) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2623) + _2593) * _2608))) * _2622;
                        float _3764 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _2644 = (((_2594 * 3.1415927410125732421875) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) / ((_2616 * _2616) * ((_2559 * 2.1991131305694580078125) + 3.141590118408203125))) * _2548;
                        _2375 = (_2563 * _2511.x) + _2469;
                        _2376 = (_2563 * _2511.y) + _2470;
                        _2377 = (_2563 * _2511.z) + _2471;
                        _2372 = (_2644 * _2528.x) + _2466;
                        _2373 = (_2644 * _2528.y) + _2467;
                        _2374 = (_2644 * _2528.z) + _2468;
                        if (_2473 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2466 = _2372;
                            _2467 = _2373;
                            _2468 = _2374;
                            _2469 = _2375;
                            _2470 = _2376;
                            _2471 = _2377;
                            _2472 = _2473;
                        }
                    }
                    frontier_phi_62_pred = _2373;
                    frontier_phi_62_pred_1 = _2372;
                    frontier_phi_62_pred_2 = _2374;
                    frontier_phi_62_pred_3 = _2377;
                    frontier_phi_62_pred_4 = _2376;
                    frontier_phi_62_pred_5 = _2375;
                }
                _2118 = frontier_phi_62_pred;
                _2116 = frontier_phi_62_pred_1;
                _2120 = frontier_phi_62_pred_2;
                _2126 = frontier_phi_62_pred_3;
                _2124 = frontier_phi_62_pred_4;
                _2122 = frontier_phi_62_pred_5;
                uint _2298 = _2297 + 1u;
                if (_2298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2291 = _2116;
                    _2292 = _2118;
                    _2293 = _2120;
                    _2294 = _2122;
                    _2295 = _2124;
                    _2296 = _2126;
                    _2297 = _2298;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
        }
        uvec4 _2129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2130 = _2129.z;
        uint _2132 = (_2130 >> 8u) & 15u;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        if (((4294967295u << _2132) & _2008) == 0u)
        {
            _2259 = _2115;
            _2261 = _2117;
            _2263 = _2119;
            _2265 = _2121;
            _2267 = _2123;
            _2269 = _2125;
        }
        else
        {
            float _2284 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
            float _2285 = _2284 * _1962;
            float _2286 = _2284 * _1963;
            float _2287 = _2284 * _1964;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2132 < ((_2130 >> 12u) & 15u))
            {
                float _2260;
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2449 = _2115;
                float _2450 = _2117;
                float _2451 = _2119;
                float _2452 = _2121;
                float _2453 = _2123;
                float _2454 = _2125;
                uint _2455 = _2132;
                uint _2464;
                bool _2465;
                for (;;)
                {
                    _2464 = texelFetch(g_lightClassification, int((((_2002 << 5u) + (_1988 << 9u)) + (_2455 << 2u)) >> 2u)).x;
                    _2465 = _2464 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2465)
                    {
                        frontier_phi_71_pred = _2450;
                        frontier_phi_71_pred_1 = _2449;
                        frontier_phi_71_pred_2 = _2454;
                        frontier_phi_71_pred_3 = _2453;
                        frontier_phi_71_pred_4 = _2452;
                        frontier_phi_71_pred_5 = _2451;
                    }
                    else
                    {
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2683 = _2449;
                        float _2684 = _2450;
                        float _2685 = _2451;
                        float _2686 = _2452;
                        float _2687 = _2453;
                        float _2688 = _2454;
                        uint _2689 = _2464;
                        uint _2690;
                        vec4 _2715;
                        float _2716;
                        vec4 _2731;
                        vec3 _2743;
                        vec4 _2758;
                        vec4 _2773;
                        float _2819;
                        bool _2820;
                        for (;;)
                        {
                            uint _2700 = ((_2455 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2689));
                            _2690 = (_2689 + 4294967295u) & _2689;
                            uint _2702 = _2700 * 40u;
                            _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            _2716 = _2715.w;
                            uint _2718 = (_2700 * 40u) + 4u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            uint _2733 = (_2700 * 40u) + 8u;
                            _2743 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x));
                            uint _2745 = (_2700 * 40u) + 16u;
                            _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            uint _2760 = (_2700 * 40u) + 20u;
                            _2773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 3u)).x));
                            uint _2775 = (_2700 * 40u) + 24u;
                            vec4 _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            uint _2794 = (_2700 * 40u) + 28u;
                            vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            _2819 = fma(_1964, _2807.z, fma(_1963, _2807.y, _2807.x * _1962)) + _2807.w;
                            _2820 = !((fma(_1964, _2788.z, fma(_1963, _2788.y, _2788.x * _1962)) + _2788.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2820)
                            {
                                float _2847 = _2715.x - _1962;
                                float _2848 = _2715.y - _1963;
                                float _2849 = _2715.z - _1964;
                                float _2850 = dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849));
                                float _2853 = inversesqrt(_2850);
                                float _2854 = _2853 * _2847;
                                float _2855 = _2853 * _2848;
                                float _2856 = _2853 * _2849;
                                float _2860 = 1.0 - (_2850 / (_2716 * _2716));
                                float _3775 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                                float _2861 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
                                float _2865 = sqrt(_2850) * _2731.w;
                                float _2867 = 1.39999997615814208984375 / (_2865 + 1.39999997615814208984375);
                                float _2868 = _2867 * _2867;
                                float _2871 = ((1.0 - _2868) * dot(vec3(_2854, _2855, _2856), vec3(_604, _607, _610))) + _2868;
                                float _2874 = _2865 * _2865;
                                float _2878 = (fma(_1964, _2758.z, fma(_1963, _2758.y, _2758.x * _1962)) + _2758.w) / _2819;
                                float _2879 = (fma(_1964, _2773.z, fma(_1963, _2773.y, _2773.x * _1962)) + _2773.w) / _2819;
                                float _2883 = 1.0 - dot(vec2(_2878, _2879), vec2(_2878, _2879));
                                float _3791 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2884 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
                                float _2885 = _2884 * (((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * _2861) / ((_2874 * 0.699999988079071044921875) + 1.0));
                                float _2897 = exp2(log2(1.0 / ((_2874 * 3.5) + 5.0)) * 0.25);
                                float _2898 = 1.0 - _664;
                                float _2905 = sqrt(1.0 - ((1.0 - (_2898 * _2898)) * (1.0 - (_2897 * _2897))));
                                float _2906 = _2905 * _2905;
                                float _2907 = _2906 * _2906;
                                float _2908 = _2854 - _2285;
                                float _2909 = _2855 - _2286;
                                float _2910 = _2856 - _2287;
                                float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                                float _2918 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2285, (-0.0) - _2286, (-0.0) - _2287));
                                float _3802 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                                float _2921 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
                                float _2922 = dot(vec3(_604, _607, _610), vec3(_2914 * _2908, _2914 * _2909, _2914 * _2910));
                                float _3813 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                                float _2925 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                                float _2929 = ((_2925 * _2925) * (_2907 + (-1.0))) + 1.0;
                                float _2930 = _2867 * _2906;
                                float _2931 = _2930 * _2930;
                                float _2937 = ((1.0 - _2931) * dot(vec3(_604, _607, _610), vec3(_2854, _2855, _2856))) + _2931;
                                float _3824 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                                float _2938 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                                float _2939 = 1.0 - _2906;
                                float _2949 = (0.5 / (((_2938 * ((_2921 * _2939) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2906) * _2921))) * _2938;
                                float _3835 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2959 = (_2884 * _2861) * (((_2907 * 3.1415927410125732421875) * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) / ((_2929 * _2929) * ((_2874 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2959 * _2743.y;
                                frontier_phi_77_pred_1 = _2959 * _2743.x;
                                frontier_phi_77_pred_2 = _2885 * _2731.z;
                                frontier_phi_77_pred_3 = _2885 * _2731.y;
                                frontier_phi_77_pred_4 = _2885 * _2731.x;
                                frontier_phi_77_pred_5 = _2959 * _2743.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2964 = frontier_phi_77_pred;
                            _2963 = frontier_phi_77_pred_1;
                            _2968 = frontier_phi_77_pred_2;
                            _2967 = frontier_phi_77_pred_3;
                            _2966 = frontier_phi_77_pred_4;
                            _2965 = frontier_phi_77_pred_5;
                            _2673 = _2966 + _2686;
                            _2674 = _2967 + _2687;
                            _2675 = _2968 + _2688;
                            _2670 = _2963 + _2683;
                            _2671 = _2964 + _2684;
                            _2672 = _2965 + _2685;
                            if (_2690 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2683 = _2670;
                                _2684 = _2671;
                                _2685 = _2672;
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2690;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2671;
                        frontier_phi_71_pred_1 = _2670;
                        frontier_phi_71_pred_2 = _2675;
                        frontier_phi_71_pred_3 = _2674;
                        frontier_phi_71_pred_4 = _2673;
                        frontier_phi_71_pred_5 = _2672;
                    }
                    _2262 = frontier_phi_71_pred;
                    _2260 = frontier_phi_71_pred_1;
                    _2270 = frontier_phi_71_pred_2;
                    _2268 = frontier_phi_71_pred_3;
                    _2266 = frontier_phi_71_pred_4;
                    _2264 = frontier_phi_71_pred_5;
                    uint _2456 = _2455 + 1u;
                    if (_2456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2449 = _2260;
                        _2450 = _2262;
                        _2451 = _2264;
                        _2452 = _2266;
                        _2453 = _2268;
                        _2454 = _2270;
                        _2455 = _2456;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2270;
                frontier_phi_53_54_ladder_1 = _2266;
                frontier_phi_53_54_ladder_2 = _2264;
                frontier_phi_53_54_ladder_3 = _2262;
                frontier_phi_53_54_ladder_4 = _2260;
                frontier_phi_53_54_ladder_5 = _2268;
            }
            else
            {
                frontier_phi_53_54_ladder = _2125;
                frontier_phi_53_54_ladder_1 = _2121;
                frontier_phi_53_54_ladder_2 = _2119;
                frontier_phi_53_54_ladder_3 = _2117;
                frontier_phi_53_54_ladder_4 = _2115;
                frontier_phi_53_54_ladder_5 = _2123;
            }
            _2259 = frontier_phi_53_54_ladder_4;
            _2261 = frontier_phi_53_54_ladder_3;
            _2263 = frontier_phi_53_54_ladder_2;
            _2265 = frontier_phi_53_54_ladder_1;
            _2267 = frontier_phi_53_54_ladder_5;
            _2269 = frontier_phi_53_54_ladder;
        }
        float _2274 = isnan(1.0) ? _648 : (isnan(_648) ? 1.0 : min(_648, 1.0));
        _2021 = (_2274 * _2265) + _1751;
        _2023 = (_2274 * _2267) + _1752;
        _2025 = (_2274 * _2269) + _1753;
        _2027 = ((_2259 * 0.039999999105930328369140625) * _2274) + _1904;
        _2029 = ((_2261 * 0.039999999105930328369140625) * _2274) + _1905;
        _2031 = ((_2263 * 0.039999999105930328369140625) * _2274) + _1906;
    }
    else
    {
        _2021 = _1751;
        _2023 = _1752;
        _2025 = _1753;
        _2027 = _1904;
        _2029 = _1905;
        _2031 = _1906;
    }
    uint _2037 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _3851 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3862 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3873 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _2062 = (((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_2021 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _648))) + ((_2027 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1459)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2037].x * (_480 - (_480 * _284)));
    float _2064 = ((cbInstanceData._m0[_2037].y * (_481 - (_481 * _284))) + ((_2029 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1459)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_2023 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _648)));
    float _2066 = ((cbInstanceData._m0[_2037].z * (_482 - (_482 * _284))) + ((_2031 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1459)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_2025 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _648)));
    uint _2070 = _623 + 6u;
    float _2078 = _583 / cbSceneParam._m0[86u].x;
    float _2079 = _584 / cbSceneParam._m0[86u].y;
    vec4 _2093 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2078, _2079, (log2((isnan(cbSceneParam._m0[77u].w) ? _570 : (isnan(_570) ? cbSceneParam._m0[77u].w : min(_570, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2095 = _2093.x;
    float _2096 = _2093.y;
    float _2097 = _2093.z;
    float _2098 = _2093.w;
    float _2178;
    float _2180;
    float _2182;
    float _2184;
    if (_570 > cbSceneParam._m0[78u].w)
    {
        float _2140 = isnan(_570) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _570 : min(cbSceneParam._m0[80u].w, _570));
        float _2141 = _2140 / _570;
        float _2152 = _2141 * _257;
        float _2153 = _258 * _2141;
        float _2154 = (-0.0) - _2153;
        float _2155 = _2141 * _259;
        float _2157 = (cbSceneParam._m0[77u].w * _2154) / _2140;
        float _2158 = _2157 + cbSceneParam._m0[79u].w;
        float _2159 = cbSceneParam._m0[79u].w - _2153;
        float _2165 = sqrt(((_2152 * _2152) + (_2153 * _2153)) + (_2155 * _2155));
        float _2168 = (1.0 - (cbSceneParam._m0[77u].w / _2140)) * _2165;
        float _2174 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2176 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2385;
        if (abs((_2154 - _2157) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2385 = ((((_2158 > 0.0) ? exp2(_2174 * _2158) : (2.0 - exp2(_2176 * _2158))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2168;
        }
        else
        {
            float _2320 = 1.0 / cbSceneParam._m0[80u].x;
            float _2321 = isnan(_2159) ? _2158 : (isnan(_2158) ? _2159 : max(_2158, _2159));
            float _2322 = isnan(_2159) ? _2158 : (isnan(_2158) ? _2159 : min(_2158, _2159));
            float _2331 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : min(_2321, 0.0));
            float _2332 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : min(_2322, 0.0));
            _2385 = ((abs(_2165 / _2154) * cbSceneParam._m0[80u].y) * ((((_2331 - _2332) * 2.0) - ((exp2(_2174 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)))) - exp2(_2174 * (isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0))))) * _2320)) - ((exp2(_2176 * _2331) - exp2(_2176 * _2332)) * _2320))) + (_2168 * cbSceneParam._m0[80u].z);
        }
        vec4 _2387 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2078, _2079, 1.0), 0.0);
        float _2396 = exp2((_2385 * (-1.44269502162933349609375)) * (1.0 - _2387.w));
        float _2397 = log2(_2396);
        float _2413 = log2(_2098);
        _2178 = (exp2(_2413 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2397 * cbSceneParam._m0[78u].x)) * _2387.x) / cbSceneParam._m0[78u].x)) + _2095;
        _2180 = (exp2(_2413 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2397 * cbSceneParam._m0[78u].y)) * _2387.y) / cbSceneParam._m0[78u].y)) + _2096;
        _2182 = (exp2(_2413 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2397 * cbSceneParam._m0[78u].z)) * _2387.z) / cbSceneParam._m0[78u].z)) + _2097;
        _2184 = _2396 * _2098;
    }
    else
    {
        _2178 = _2095;
        _2180 = _2096;
        _2182 = _2097;
        _2184 = _2098;
    }
    float _2196 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2197 = _2196 == 3.0;
    float _2198 = log2(_2184);
    float _2205 = exp2(_2198 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0)));
    float _2206 = exp2(_2198 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
    float _2207 = exp2(_2198 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0)));
    float _2216 = (_2196 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2216 * (_2197 ? _2205 : (_2205 + (cbSceneParam._m0[72u].w * _2178)));
    SV_Target.y = _2216 * (_2197 ? _2206 : (_2206 + (cbSceneParam._m0[72u].w * _2180)));
    SV_Target.z = _2216 * (_2197 ? _2207 : (_2207 + (cbSceneParam._m0[72u].w * _2182)));
    SV_Target.w = cbInstanceData._m0[_2070].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2070].w;
}


