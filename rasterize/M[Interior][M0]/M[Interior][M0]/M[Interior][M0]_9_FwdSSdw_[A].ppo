#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _397;
float _3196;
float _3197;
float _3198;
float _3199;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _330 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _337 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _346 = cbMtdParam._m0[23u].x + _261;
    float _347 = cbMtdParam._m0[23u].y + _262;
    float _348 = cbMtdParam._m0[23u].z + _263;
    float _362 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_330 * _190, _330 * _191, _330 * _192));
    float _363 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_337 * _204, _337 * _205, _337 * _206));
    float _364 = (-0.0) - dot(vec3(_346, _347, _348), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _368 * _364;
    float _371 = (cbMtdParam._m0[19u].w * _362) * _368;
    float _373 = (cbMtdParam._m0[20u].x * _363) * _368;
    float _376 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _377 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _395;
    float _398;
    float _400;
    if (_371 > 0.0)
    {
        float _381 = (1.0 - _376) / _371;
        _395 = _381;
        _398 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_381 * _369)) * 0.16666667163372039794921875;
        _400 = (fract((_381 * _373) + _377) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _396 = ((-0.0) - _376) / _371;
            frontier_phi_3_2_ladder = _396;
            frontier_phi_3_2_ladder_1 = (fract((_396 * _373) + _377) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_396 * _369) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _397;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _395 = frontier_phi_3_2_ladder;
        _398 = frontier_phi_3_2_ladder_2;
        _400 = frontier_phi_3_2_ladder_1;
    }
    float _426;
    float _428;
    float _430;
    if (_373 > 0.0)
    {
        float _413 = (1.0 - _377) / _373;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_413 < _395)
        {
            frontier_phi_8_5_ladder = (fract(_413 * _369) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_413 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _413;
        }
        else
        {
            frontier_phi_8_5_ladder = _400;
            frontier_phi_8_5_ladder_1 = _398;
            frontier_phi_8_5_ladder_2 = _395;
        }
        _426 = frontier_phi_8_5_ladder_2;
        _428 = frontier_phi_8_5_ladder_1;
        _430 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_373 < 0.0)
        {
            float _427 = ((-0.0) - _377) / _373;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_427 < _395)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_427 * _369) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_427 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _400;
                frontier_phi_8_6_ladder_9_ladder_1 = _398;
                frontier_phi_8_6_ladder_9_ladder_2 = _395;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _400;
            frontier_phi_8_6_ladder_1 = _398;
            frontier_phi_8_6_ladder_2 = _395;
        }
        _426 = frontier_phi_8_6_ladder_2;
        _428 = frontier_phi_8_6_ladder_1;
        _430 = frontier_phi_8_6_ladder;
    }
    float _434 = (_369 > 0.0) ? (cbMtdParam._m0[16u].w / _369) : 5000.0;
    float _447;
    float _448;
    if (_434 < _426)
    {
        _447 = ((_376 + cbMtdParam._m0[17u].x) + (_434 * _371)) * 0.16666667163372039794921875;
        _448 = (((_434 * _373) + _377) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _447 = _428;
        _448 = _430;
    }
    vec4 _450 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_447, _448));
    float _455 = _450.x * cbMtdParam._m0[13u].x;
    float _456 = _450.y * cbMtdParam._m0[13u].y;
    float _457 = _450.z * cbMtdParam._m0[13u].z;
    vec4 _475 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _483 = (_475.x * 2.0) + (-1.0);
    float _485 = (_475.y * 2.0) + (-1.0);
    float _486 = dot(vec2(_483, _485), vec2(_483, _485));
    float _3208 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _491 = sqrt(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))));
    float _492 = _475.z * _288;
    float _495 = fma(_491, _197, fma(_485, _204, _483 * _190));
    float _498 = fma(_491, _198, fma(_485, _205, _483 * _191));
    float _501 = fma(_491, _199, fma(_485, _206, _483 * _192));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _3219 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _509 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3241 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3252 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _528 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _533 = _261 * _532;
    float _534 = _262 * _532;
    float _535 = _263 * _532;
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _705 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _711 = (cbMatDynParam._m0[5u].x * _705) + cbMatDynParam._m0[5u].y;
        float _3263 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _716 = (cbMatDynParam._m0[5u].z * _705) + cbMatDynParam._m0[5u].w;
        float _3274 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) - _712)) + _712) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _581 = fma(_508, cbSceneParam._m0[5u].z, fma(_507, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _506));
    float _584 = fma(_508, cbSceneParam._m0[6u].z, fma(_507, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _506));
    float _587 = fma(_508, cbSceneParam._m0[7u].z, fma(_507, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _506));
    uint _600 = uint(roundEven(NORMAL.w)) * 13u;
    uint _601 = _600 + 9u;
    uint _602 = _601 + uint(cbMatDynParam._m0[0u].w);
    float _608 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_602].x;
    float _609 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_602].y;
    float _610 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_602].z;
    float _3285 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _625 = _622.x * TEXCOORD.z;
    float _626 = dot(vec3(_506, _507, _508), vec3(_533, _534, _535));
    float _629 = _626 * 2.0;
    float _633 = (_629 * _506) - _533;
    float _634 = (_629 * _507) - _534;
    float _635 = (_629 * _508) - _535;
    float _639 = abs(dot(vec3(_533, _534, _535), vec3(_506, _507, _508)));
    float _3318 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _641 = sqrt(_509);
    float _654 = exp2((_641 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_641 * 3.0));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_694, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686));
        float _754 = fma(_694, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686));
        float _758 = fma(_694, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686));
        float _782 = _686 + _506;
        float _783 = _690 + _507;
        float _784 = _694 + _508;
        float _794 = fma(_784, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782)) - _750;
        float _795 = fma(_784, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782)) - _754;
        float _796 = fma(_784, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782)) - _758;
        float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
        float _813 = ((_800 * _794) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_800 * _795) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_800 * _796) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        float _852 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_818.x + (-0.5));
        float _854 = _852 * (_818.y + (-0.5));
        float _855 = _852 * (_818.z + (-0.5));
        float _862 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_825.x + (-0.5));
        float _864 = _862 * (_825.y + (-0.5));
        float _865 = _862 * (_825.z + (-0.5));
        float _872 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_832.x + (-0.5));
        float _874 = _872 * (_832.y + (-0.5));
        float _875 = _872 * (_832.z + (-0.5));
        float _882 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_839.x + (-0.5));
        float _884 = _882 * (_839.y + (-0.5));
        float _885 = _882 * (_839.z + (-0.5));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = _853 * 0.5;
        float _890 = _863 * 0.5;
        float _891 = _873 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _906 = (dot(vec3(_506, _507, _508), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _916 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3366 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_918 + 1.0))) + _923) * _886;
        float _933 = _854 * 0.5;
        float _934 = _864 * 0.5;
        float _935 = _874 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_506, _507, _508), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3399 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_960 + 1.0))) + _965) * _887;
        float _975 = _855 * 0.5;
        float _976 = _865 * 0.5;
        float _977 = _875 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_506, _507, _508), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3432 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1002 + 1.0))) + _1007) * _888;
        _1024 = _855;
        _1025 = _854;
        _1026 = _853;
        _1027 = _865;
        _1028 = _864;
        _1029 = _863;
        _1030 = _875;
        _1031 = _874;
        _1032 = _873;
        _1033 = _888;
        _1034 = _887;
        _1035 = _886;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
    }
    else
    {
        _1024 = _397;
        _1025 = _397;
        _1026 = _397;
        _1027 = _397;
        _1028 = _397;
        _1029 = _397;
        _1030 = _397;
        _1031 = _397;
        _1032 = _397;
        _1033 = _397;
        _1034 = _397;
        _1035 = _397;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1067 = fma(_694, cbModelParam._m0[30u].z, fma(_690, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _686));
        float _1071 = fma(_694, cbModelParam._m0[31u].z, fma(_690, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _686));
        float _1075 = fma(_694, cbModelParam._m0[32u].z, fma(_690, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _686));
        float _1098 = _686 + _506;
        float _1099 = _690 + _507;
        float _1100 = _694 + _508;
        float _1110 = fma(_1100, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1098)) - _1067;
        float _1111 = fma(_1100, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1098)) - _1071;
        float _1112 = fma(_1100, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1098)) - _1075;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1067 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1071 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[35u].z) + ((((((_1075 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1166 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1133.x + (-0.5));
        float _1168 = _1166 * (_1133.y + (-0.5));
        float _1169 = _1166 * (_1133.z + (-0.5));
        float _1176 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1140.x + (-0.5));
        float _1178 = _1176 * (_1140.y + (-0.5));
        float _1179 = _1176 * (_1140.z + (-0.5));
        float _1186 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1147.x + (-0.5));
        float _1188 = _1186 * (_1147.y + (-0.5));
        float _1189 = _1186 * (_1147.z + (-0.5));
        float _1196 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1154.x + (-0.5));
        float _1198 = _1196 * (_1154.y + (-0.5));
        float _1199 = _1196 * (_1154.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_506, _507, _508), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3495 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1230 + 1.0))) + _1235) * _1200;
        float _1245 = _1168 * 0.5;
        float _1246 = _1178 * 0.5;
        float _1247 = _1188 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_506, _507, _508), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3528 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1272 + 1.0))) + _1277) * _1201;
        float _1287 = _1169 * 0.5;
        float _1288 = _1179 * 0.5;
        float _1289 = _1189 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_506, _507, _508), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3561 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1314 + 1.0))) + _1319) * _1202;
        _1336 = _1169;
        _1337 = _1168;
        _1338 = _1167;
        _1339 = _1179;
        _1340 = _1178;
        _1341 = _1177;
        _1342 = _1189;
        _1343 = _1188;
        _1344 = _1187;
        _1345 = _1202;
        _1346 = _1201;
        _1347 = _1200;
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _397;
        _1337 = _397;
        _1338 = _397;
        _1339 = _397;
        _1340 = _397;
        _1341 = _397;
        _1342 = _397;
        _1343 = _397;
        _1344 = _397;
        _1345 = _397;
        _1346 = _397;
        _1347 = _397;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1036)) + _1036;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1037)) + _1037;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1038)) + _1038;
    float _1383 = fma(_1362, cbSceneParam._m0[89u].z, fma(_1361, cbSceneParam._m0[89u].y, _1360 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1362, cbSceneParam._m0[90u].z, fma(_1361, cbSceneParam._m0[90u].y, _1360 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1362, cbSceneParam._m0[91u].z, fma(_1361, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1360));
    float _1404 = _633 * 0.5;
    float _1405 = _634 * 0.5;
    float _1406 = _635 * 0.5;
    float _1407 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1410 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1413 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1447;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1420 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1424 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1428 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1435 = dot(vec4(cbModelParam._m0[39u]), vec4(_1404, _1405, _1406, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1458;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1449 = dot(vec4(cbModelParam._m0[40u]), vec4(_1404, _1405, _1406, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1462 = (_1458 * cbModelParam._m0[1u].x) + (_1447 * (1.0 - cbModelParam._m0[1u].x));
    float _1472 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _509);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1472 : min(cbModelParam._m0[25u].z, _1472));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1522 = fma(_694, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686)) + cbModelParam._m0[13u].w;
        float _1526 = fma(_694, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686)) + cbModelParam._m0[14u].w;
        float _1530 = fma(_694, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686)) + cbModelParam._m0[15u].w;
        float _1533 = fma(_635, cbModelParam._m0[13u].z, fma(_634, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _633));
        float _1536 = fma(_635, cbModelParam._m0[14u].z, fma(_634, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _633));
        float _1539 = fma(_635, cbModelParam._m0[15u].z, fma(_634, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _633));
        float _1567;
        if (_1533 > 0.0)
        {
            _1567 = abs((1.0 - _1522) / _1533);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1522 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1567 = frontier_phi_29_27_ladder;
        }
        float _1940;
        if (_1536 > 0.0)
        {
            _1940 = abs((1.0 - _1526) / _1536);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1526 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1940 = frontier_phi_38_34_ladder;
        }
        float _2264;
        if (_1539 > 0.0)
        {
            _2264 = abs((1.0 - _1530) / _1539);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1530 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2264 = frontier_phi_52_45_ladder;
        }
        float _2266 = isnan(_1940) ? _1567 : (isnan(_1567) ? _1940 : min(_1567, _1940));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1533) + _1522;
        float _2272 = (_2267 * _1536) + _1526;
        float _2273 = (_2267 * _1539) + _1530;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2274;
        float _2277 = _2274 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2273 > _2277) || ((_2273 < _2275) || ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 < _2275) || (_2271 > _2277))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1473);
            frontier_phi_28_52_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1555 = frontier_phi_28_52_ladder_2;
        _1557 = frontier_phi_28_52_ladder_1;
        _1559 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_633, _634, _635), _1473);
        _1555 = _1543.x * cbModelParam._m0[1u].y;
        _1557 = _1543.y * cbModelParam._m0[1u].y;
        _1559 = _1543.z * cbModelParam._m0[1u].y;
    }
    float _1563 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _509);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1563 : min(cbModelParam._m0[25u].w, _1563));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1619 = fma(_694, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686)) + cbModelParam._m0[21u].w;
        float _1623 = fma(_694, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686)) + cbModelParam._m0[22u].w;
        float _1627 = fma(_694, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686)) + cbModelParam._m0[23u].w;
        float _1630 = fma(_635, cbModelParam._m0[21u].z, fma(_634, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _633));
        float _1633 = fma(_635, cbModelParam._m0[22u].z, fma(_634, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _633));
        float _1636 = fma(_635, cbModelParam._m0[23u].z, fma(_634, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _633));
        float _1945;
        if (_1630 > 0.0)
        {
            _1945 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1945 = frontier_phi_40_36_ladder;
        }
        float _2290;
        if (_1633 > 0.0)
        {
            _2290 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2290 = frontier_phi_54_47_ladder;
        }
        float _2480;
        if (_1636 > 0.0)
        {
            _2480 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2480 = frontier_phi_72_65_ladder;
        }
        float _2482 = isnan(_2290) ? _1945 : (isnan(_1945) ? _2290 : min(_1945, _2290));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1630) + _1619;
        float _2488 = (_2483 * _1633) + _1623;
        float _2489 = (_2483 * _1636) + _1627;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1564);
            frontier_phi_37_72_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1655 = frontier_phi_37_72_ladder_2;
        _1657 = frontier_phi_37_72_ladder_1;
        _1659 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_633, _634, _635), _1564);
        _1655 = _1639.x * cbModelParam._m0[1u].z;
        _1657 = _1639.y * cbModelParam._m0[1u].z;
        _1659 = _1639.z * cbModelParam._m0[1u].z;
    }
    float _1671 = ((((1.0 - _654) * ((_641 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_654 * _641)) * _625;
    float _1672 = _1671 * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1673 = _1671 * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1674 = _1671 * ((cbModelParam._m0[1u].w * (_1659 - _1559)) + _1559);
    float _1677 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, _1672 * cbSceneParam._m0[91u].x));
    vec4 _1691 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_560, _561));
    float _1693 = _1691.w;
    float _1705 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1693);
    float _1706 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1693);
    float _1707 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1693);
    uvec4 _1711 = floatBitsToUint(cbInstanceData._m0[_600 + 5u]);
    uint _1713 = _1711.x * 14u;
    uint _1714 = _1713 + 13u;
    float _1719 = _625 + (-1.0);
    float _1722 = (cbLight._m0[_1714].x * _1719) + 1.0;
    float _1723 = (cbLight._m0[_1714].y * _1719) + 1.0;
    uint _1724 = _1713 + 5u;
    float _1730 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1734 = _1713 + 4u;
    float _1744 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1748 = _1713 | 1u;
    float _1759 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_506, _507, _508));
    float _1762 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_506, _507, _508));
    float _3697 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _3708 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1767 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1769 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1776 = ((cbLight._m0[_1724].x * _1730) * _1769) + (((cbLight._m0[_1734].x * _1705) * _1744) * _1767);
    float _1777 = ((_1730 * cbLight._m0[_1724].y) * _1769) + (((cbLight._m0[_1734].y * _1706) * _1744) * _1767);
    float _1778 = ((_1730 * cbLight._m0[_1724].z) * _1769) + (((cbLight._m0[_1734].z * _1707) * _1744) * _1767);
    uint _1780 = _1713 + 8u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1713].w)) * _509) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1713].x + _533;
    float _1796 = cbLight._m0[_1713].y + _534;
    float _1797 = cbLight._m0[_1713].z + _535;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1713].xyz));
    float _3719 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _1809 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1810 = dot(vec3(_506, _507, _508), vec3(_1802, _1803, _1804));
    float _3741 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_1802, _1803, _1804));
    float _3752 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1794 * _1794;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1833 = (exp2(log2(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1834 = 1.0 - _1794;
    float _1845 = (0.5 / (((_1809 * ((_1808 * _1834) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1834) + _1794) * _1808))) * _1808;
    float _3763 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1847 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    uint _1861 = _1713 + 9u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _509) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1748].x + _533;
    float _1875 = cbLight._m0[_1748].y + _534;
    float _1876 = cbLight._m0[_1748].z + _535;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1748].xyz));
    float _3774 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1888 = dot(vec3(_506, _507, _508), vec3(_1881, _1882, _1883));
    float _3785 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1881, _1882, _1883));
    float _3796 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1873 * _1873;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1910 = 1.0 - _1873;
    float _1920 = (0.5 / (((_1809 * ((_1887 * _1910) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1910) + _1873) * _1887))) * _1887;
    float _3807 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    float _1932 = (((_1909 * cbLight._m0[_1861].x) * _1922) * _1730) + ((((cbLight._m0[_1780].x * _1705) * _1833) * _1847) * _1744);
    float _1933 = (((_1909 * cbLight._m0[_1861].y) * _1922) * _1730) + ((((cbLight._m0[_1780].y * _1706) * _1833) * _1847) * _1744);
    float _1934 = (((_1909 * cbLight._m0[_1861].z) * _1922) * _1730) + ((((cbLight._m0[_1780].z * _1707) * _1833) * _1847) * _1744);
    float _2049;
    float _2051;
    float _2053;
    float _2055;
    float _2057;
    float _2059;
    if (_1711.y == 0u)
    {
        float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1990 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1989;
        float _1991 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1989;
        float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1989;
        uvec4 _2004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2005 = _2004.x;
        uint _2016 = uint((float(_2004.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2005))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2005)));
        float _2026 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2027 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        uint _2030 = uint(isnan(14.0) ? _2027 : (isnan(_2027) ? 14.0 : min(_2027, 14.0)));
        uvec4 _2035 = texelFetch(g_lightClusterGridBuffer, int(((_2030 << 2u) + (_2016 << 6u)) >> 2u));
        uint _2036 = _2035.x;
        uint _2037 = _2004.z;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        float _2151;
        float _2153;
        if (((((1u << ((_2037 >> 4u) & 15u)) + 4294967295u) & _2036) == 0u) || ((_2037 & 240u) == 0u))
        {
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
        }
        else
        {
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2152;
            float _2154;
            float _2327 = 0.0;
            float _2328 = 0.0;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            uint _2333 = 0u;
            uint _2342;
            bool _2343;
            for (;;)
            {
                _2342 = texelFetch(g_lightClassification, int((((_2030 << 5u) + (_2016 << 9u)) + (_2333 << 2u)) >> 2u)).x;
                _2343 = _2342 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2343)
                {
                    frontier_phi_67_pred = _2330;
                    frontier_phi_67_pred_1 = _2329;
                    frontier_phi_67_pred_2 = _2328;
                    frontier_phi_67_pred_3 = _2327;
                    frontier_phi_67_pred_4 = _2331;
                    frontier_phi_67_pred_5 = _2332;
                }
                else
                {
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    uint _2529;
                    _2523 = _2327;
                    _2524 = _2328;
                    _2525 = _2329;
                    _2526 = _2330;
                    _2527 = _2331;
                    _2528 = _2332;
                    _2529 = _2342;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    for (;;)
                    {
                        uint _2533 = uint(findLSB(_2529)) + (_2333 << 5u);
                        uint _2530 = (_2529 + 4294967295u) & _2529;
                        uint _2535 = _2533 * 48u;
                        vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2535)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 3u)).x));
                        uint _2555 = (_2533 * 48u) + 4u;
                        vec4 _2568 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 3u)).x));
                        uint _2574 = (_2533 * 48u) + 8u;
                        vec3 _2585 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2574)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 2u)).x));
                        float _2589 = _2549.x - _1990;
                        float _2590 = _2549.y - _1991;
                        float _2591 = _2549.z - _1992;
                        float _2592 = dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591));
                        float _2595 = inversesqrt(_2592);
                        float _2596 = _2595 * _2589;
                        float _2597 = _2595 * _2590;
                        float _2598 = _2595 * _2591;
                        float _2599 = dot(vec3(_581, _584, _587), vec3(_2596, _2597, _2598));
                        float _2604 = 1.0 - (_2592 * _2549.w);
                        float _3828 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
                        float _2605 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                        float _2606 = sqrt(_2592) * _2568.w;
                        float _2609 = 1.39999997615814208984375 / (_2606 + 1.39999997615814208984375);
                        float _2610 = _2609 * _2609;
                        float _2613 = ((1.0 - _2610) * _2599) + _2610;
                        float _2616 = _2606 * _2606;
                        float _2620 = ((isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))) * _2605) / ((_2616 * 0.699999988079071044921875) + 1.0);
                        float _2624 = (-0.0) - _1990;
                        float _2625 = (-0.0) - _1991;
                        float _2626 = (-0.0) - _1992;
                        float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
                        float _2631 = _2630 * _2624;
                        float _2632 = _2630 * _2625;
                        float _2633 = _2630 * _2626;
                        float _2641 = exp2(log2(1.0 / ((_2616 * 3.5) + 5.0)) * 0.25);
                        float _2642 = 1.0 - _641;
                        float _2649 = sqrt(1.0 - ((1.0 - (_2642 * _2642)) * (1.0 - (_2641 * _2641))));
                        float _2650 = _2649 * _2649;
                        float _2651 = _2650 * _2650;
                        float _2652 = _2631 + _2596;
                        float _2653 = _2632 + _2597;
                        float _2654 = _2633 + _2598;
                        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
                        float _2662 = dot(vec3(_581, _584, _587), vec3(_2631, _2632, _2633));
                        float _3844 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2665 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                        float _2666 = dot(vec3(_581, _584, _587), vec3(_2658 * _2652, _2658 * _2653, _2658 * _2654));
                        float _3855 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2669 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
                        float _2673 = ((_2669 * _2669) * (_2651 + (-1.0))) + 1.0;
                        float _2674 = _2609 * _2650;
                        float _2675 = _2674 * _2674;
                        float _2678 = ((1.0 - _2675) * _2599) + _2675;
                        float _3866 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2679 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2680 = 1.0 - _2650;
                        float _2690 = (0.5 / (((_2679 * ((_2665 * _2680) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2679 * _2680) + _2650) * _2665))) * _2679;
                        float _3877 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2701 = (((_2651 * 3.1415927410125732421875) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) / ((_2673 * _2673) * ((_2616 * 2.1991131305694580078125) + 3.141590118408203125))) * _2605;
                        _2427 = (_2620 * _2568.x) + _2526;
                        _2428 = (_2620 * _2568.y) + _2527;
                        _2429 = (_2620 * _2568.z) + _2528;
                        _2424 = (_2701 * _2585.x) + _2523;
                        _2425 = (_2701 * _2585.y) + _2524;
                        _2426 = (_2701 * _2585.z) + _2525;
                        if (_2530 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2523 = _2424;
                            _2524 = _2425;
                            _2525 = _2426;
                            _2526 = _2427;
                            _2527 = _2428;
                            _2528 = _2429;
                            _2529 = _2530;
                        }
                    }
                    frontier_phi_67_pred = _2427;
                    frontier_phi_67_pred_1 = _2426;
                    frontier_phi_67_pred_2 = _2425;
                    frontier_phi_67_pred_3 = _2424;
                    frontier_phi_67_pred_4 = _2428;
                    frontier_phi_67_pred_5 = _2429;
                }
                _2150 = frontier_phi_67_pred;
                _2148 = frontier_phi_67_pred_1;
                _2146 = frontier_phi_67_pred_2;
                _2144 = frontier_phi_67_pred_3;
                _2152 = frontier_phi_67_pred_4;
                _2154 = frontier_phi_67_pred_5;
                uint _2334 = _2333 + 1u;
                if (_2334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2327 = _2144;
                    _2328 = _2146;
                    _2329 = _2148;
                    _2330 = _2150;
                    _2331 = _2152;
                    _2332 = _2154;
                    _2333 = _2334;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
        }
        uvec4 _2157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2158 = _2157.z;
        uint _2160 = (_2158 >> 8u) & 15u;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        if (((4294967295u << _2160) & _2036) == 0u)
        {
            _2295 = _2143;
            _2297 = _2145;
            _2299 = _2147;
            _2301 = _2149;
            _2303 = _2151;
            _2305 = _2153;
        }
        else
        {
            float _2320 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float _2321 = _2320 * _1990;
            float _2322 = _2320 * _1991;
            float _2323 = _2320 * _1992;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2160 < ((_2158 >> 12u) & 15u))
            {
                float _2296;
                float _2298;
                float _2300;
                float _2302;
                float _2304;
                float _2306;
                float _2506 = _2143;
                float _2507 = _2145;
                float _2508 = _2147;
                float _2509 = _2149;
                float _2510 = _2151;
                float _2511 = _2153;
                uint _2512 = _2160;
                uint _2521;
                bool _2522;
                for (;;)
                {
                    _2521 = texelFetch(g_lightClassification, int((((_2030 << 5u) + (_2016 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                    _2522 = _2521 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2522)
                    {
                        frontier_phi_81_pred = _2509;
                        frontier_phi_81_pred_1 = _2508;
                        frontier_phi_81_pred_2 = _2507;
                        frontier_phi_81_pred_3 = _2506;
                        frontier_phi_81_pred_4 = _2511;
                        frontier_phi_81_pred_5 = _2510;
                    }
                    else
                    {
                        float _2736;
                        float _2737;
                        float _2738;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _2749 = _2506;
                        float _2750 = _2507;
                        float _2751 = _2508;
                        float _2752 = _2509;
                        float _2753 = _2510;
                        float _2754 = _2511;
                        uint _2755 = _2521;
                        uint _2756;
                        vec4 _2781;
                        float _2782;
                        vec4 _2797;
                        vec3 _2809;
                        vec4 _2824;
                        vec4 _2839;
                        float _2885;
                        bool _2886;
                        for (;;)
                        {
                            uint _2766 = ((_2512 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2755));
                            _2756 = (_2755 + 4294967295u) & _2755;
                            uint _2768 = _2766 * 40u;
                            _2781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 3u)).x));
                            _2782 = _2781.w;
                            uint _2784 = (_2766 * 40u) + 4u;
                            _2797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 3u)).x));
                            uint _2799 = (_2766 * 40u) + 8u;
                            _2809 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x));
                            uint _2811 = (_2766 * 40u) + 16u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            uint _2826 = (_2766 * 40u) + 20u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2841 = (_2766 * 40u) + 24u;
                            vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2860 = (_2766 * 40u) + 28u;
                            vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            _2885 = fma(_1992, _2873.z, fma(_1991, _2873.y, _2873.x * _1990)) + _2873.w;
                            _2886 = !((fma(_1992, _2854.z, fma(_1991, _2854.y, _2854.x * _1990)) + _2854.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2886)
                            {
                                float _2913 = _2781.x - _1990;
                                float _2914 = _2781.y - _1991;
                                float _2915 = _2781.z - _1992;
                                float _2916 = dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915));
                                float _2919 = inversesqrt(_2916);
                                float _2920 = _2919 * _2913;
                                float _2921 = _2919 * _2914;
                                float _2922 = _2919 * _2915;
                                float _2926 = 1.0 - (_2916 / (_2782 * _2782));
                                float _3888 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                                float _2927 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                                float _2931 = sqrt(_2916) * _2797.w;
                                float _2933 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                                float _2934 = _2933 * _2933;
                                float _2937 = ((1.0 - _2934) * dot(vec3(_2920, _2921, _2922), vec3(_581, _584, _587))) + _2934;
                                float _2940 = _2931 * _2931;
                                float _2944 = (fma(_1992, _2824.z, fma(_1991, _2824.y, _2824.x * _1990)) + _2824.w) / _2885;
                                float _2945 = (fma(_1992, _2839.z, fma(_1991, _2839.y, _2839.x * _1990)) + _2839.w) / _2885;
                                float _2949 = 1.0 - dot(vec2(_2944, _2945), vec2(_2944, _2945));
                                float _3904 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2950 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _2951 = _2950 * (((isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * _2927) / ((_2940 * 0.699999988079071044921875) + 1.0));
                                float _2963 = exp2(log2(1.0 / ((_2940 * 3.5) + 5.0)) * 0.25);
                                float _2964 = 1.0 - _641;
                                float _2971 = sqrt(1.0 - ((1.0 - (_2964 * _2964)) * (1.0 - (_2963 * _2963))));
                                float _2972 = _2971 * _2971;
                                float _2973 = _2972 * _2972;
                                float _2974 = _2920 - _2321;
                                float _2975 = _2921 - _2322;
                                float _2976 = _2922 - _2323;
                                float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                                float _2984 = dot(vec3(_581, _584, _587), vec3((-0.0) - _2321, (-0.0) - _2322, (-0.0) - _2323));
                                float _3915 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2987 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                                float _2988 = dot(vec3(_581, _584, _587), vec3(_2980 * _2974, _2980 * _2975, _2980 * _2976));
                                float _3926 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2991 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                                float _2995 = ((_2991 * _2991) * (_2973 + (-1.0))) + 1.0;
                                float _2996 = _2933 * _2972;
                                float _2997 = _2996 * _2996;
                                float _3003 = ((1.0 - _2997) * dot(vec3(_581, _584, _587), vec3(_2920, _2921, _2922))) + _2997;
                                float _3937 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                                float _3005 = 1.0 - _2972;
                                float _3015 = (0.5 / (((_3004 * ((_2987 * _3005) + _2972)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2972) * _2987))) * _3004;
                                float _3948 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3025 = (_2950 * _2927) * (((_2973 * 3.1415927410125732421875) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) / ((_2995 * _2995) * ((_2940 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2951 * _2797.x;
                                frontier_phi_87_pred_1 = _3025 * _2809.z;
                                frontier_phi_87_pred_2 = _3025 * _2809.y;
                                frontier_phi_87_pred_3 = _3025 * _2809.x;
                                frontier_phi_87_pred_4 = _2951 * _2797.z;
                                frontier_phi_87_pred_5 = _2951 * _2797.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3032 = frontier_phi_87_pred;
                            _3031 = frontier_phi_87_pred_1;
                            _3030 = frontier_phi_87_pred_2;
                            _3029 = frontier_phi_87_pred_3;
                            _3034 = frontier_phi_87_pred_4;
                            _3033 = frontier_phi_87_pred_5;
                            _2739 = _3032 + _2752;
                            _2740 = _3033 + _2753;
                            _2741 = _3034 + _2754;
                            _2736 = _3029 + _2749;
                            _2737 = _3030 + _2750;
                            _2738 = _3031 + _2751;
                            if (_2756 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2749 = _2736;
                                _2750 = _2737;
                                _2751 = _2738;
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2756;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2739;
                        frontier_phi_81_pred_1 = _2738;
                        frontier_phi_81_pred_2 = _2737;
                        frontier_phi_81_pred_3 = _2736;
                        frontier_phi_81_pred_4 = _2741;
                        frontier_phi_81_pred_5 = _2740;
                    }
                    _2302 = frontier_phi_81_pred;
                    _2300 = frontier_phi_81_pred_1;
                    _2298 = frontier_phi_81_pred_2;
                    _2296 = frontier_phi_81_pred_3;
                    _2306 = frontier_phi_81_pred_4;
                    _2304 = frontier_phi_81_pred_5;
                    uint _2513 = _2512 + 1u;
                    if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2506 = _2296;
                        _2507 = _2298;
                        _2508 = _2300;
                        _2509 = _2302;
                        _2510 = _2304;
                        _2511 = _2306;
                        _2512 = _2513;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2306;
                frontier_phi_56_57_ladder_1 = _2304;
                frontier_phi_56_57_ladder_2 = _2302;
                frontier_phi_56_57_ladder_3 = _2298;
                frontier_phi_56_57_ladder_4 = _2296;
                frontier_phi_56_57_ladder_5 = _2300;
            }
            else
            {
                frontier_phi_56_57_ladder = _2153;
                frontier_phi_56_57_ladder_1 = _2151;
                frontier_phi_56_57_ladder_2 = _2149;
                frontier_phi_56_57_ladder_3 = _2145;
                frontier_phi_56_57_ladder_4 = _2143;
                frontier_phi_56_57_ladder_5 = _2147;
            }
            _2295 = frontier_phi_56_57_ladder_4;
            _2297 = frontier_phi_56_57_ladder_3;
            _2299 = frontier_phi_56_57_ladder_5;
            _2301 = frontier_phi_56_57_ladder_2;
            _2303 = frontier_phi_56_57_ladder_1;
            _2305 = frontier_phi_56_57_ladder;
        }
        float _2310 = isnan(1.0) ? _625 : (isnan(_625) ? 1.0 : min(_625, 1.0));
        _2049 = (_2310 * _2301) + _1776;
        _2051 = (_2310 * _2303) + _1777;
        _2053 = (_2310 * _2305) + _1778;
        _2055 = ((_2295 * 0.039999999105930328369140625) * _2310) + _1932;
        _2057 = ((_2297 * 0.039999999105930328369140625) * _2310) + _1933;
        _2059 = ((_2299 * 0.039999999105930328369140625) * _2310) + _1934;
    }
    else
    {
        _2049 = _1776;
        _2051 = _1777;
        _2053 = _1778;
        _2055 = _1932;
        _2057 = _1933;
        _2059 = _1934;
    }
    uint _2065 = _601 + uint(cbMatDynParam._m0[0u].w);
    float _3964 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3975 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3986 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _2090 = (((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2049 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _625))) + ((_2055 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2065].x * (_455 - (_455 * _288)));
    float _2092 = ((cbInstanceData._m0[_2065].y * (_456 - (_456 * _288))) + ((_2057 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2051 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _625)));
    float _2094 = ((cbInstanceData._m0[_2065].z * (_457 - (_457 * _288))) + ((_2059 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2053 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _625)));
    float _2095 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2096 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2097 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    uint _2098 = _600 + 6u;
    float _2106 = _560 / cbSceneParam._m0[86u].x;
    float _2107 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2121 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2106, _2107, (log2((isnan(cbSceneParam._m0[77u].w) ? _528 : (isnan(_528) ? cbSceneParam._m0[77u].w : min(_528, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2123 = _2121.x;
    float _2124 = _2121.y;
    float _2125 = _2121.z;
    float _2126 = _2121.w;
    float _2206;
    float _2208;
    float _2210;
    float _2212;
    if (_528 > cbSceneParam._m0[78u].w)
    {
        float _2168 = isnan(_528) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _528 : min(cbSceneParam._m0[80u].w, _528));
        float _2169 = _2168 / _528;
        float _2180 = _2169 * _261;
        float _2181 = _262 * _2169;
        float _2182 = (-0.0) - _2181;
        float _2183 = _2169 * _263;
        float _2185 = (cbSceneParam._m0[77u].w * _2182) / _2168;
        float _2186 = _2185 + cbSceneParam._m0[79u].w;
        float _2187 = cbSceneParam._m0[79u].w - _2181;
        float _2193 = sqrt(((_2180 * _2180) + (_2181 * _2181)) + (_2183 * _2183));
        float _2196 = (1.0 - (cbSceneParam._m0[77u].w / _2168)) * _2193;
        float _2202 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2204 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2437;
        if (abs((_2182 - _2185) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2437 = ((((_2186 > 0.0) ? exp2(_2202 * _2186) : (2.0 - exp2(_2204 * _2186))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2196;
        }
        else
        {
            float _2356 = 1.0 / cbSceneParam._m0[80u].x;
            float _2357 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : max(_2186, _2187));
            float _2358 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : min(_2186, _2187));
            float _2367 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : min(_2357, 0.0));
            float _2368 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : min(_2358, 0.0));
            _2437 = ((abs(_2193 / _2182) * cbSceneParam._m0[80u].y) * ((((_2367 - _2368) * 2.0) - ((exp2(_2202 * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0)))) - exp2(_2202 * (isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0))))) * _2356)) - ((exp2(_2204 * _2367) - exp2(_2204 * _2368)) * _2356))) + (_2196 * cbSceneParam._m0[80u].z);
        }
        vec4 _2439 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2106, _2107, 1.0), 0.0);
        float _2448 = exp2((_2437 * (-1.44269502162933349609375)) * (1.0 - _2439.w));
        float _2449 = log2(_2448);
        float _2465 = log2(_2126);
        _2206 = (exp2(_2465 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].x)) * _2439.x) / cbSceneParam._m0[78u].x)) + _2123;
        _2208 = (exp2(_2465 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].y)) * _2439.y) / cbSceneParam._m0[78u].y)) + _2124;
        _2210 = (exp2(_2465 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].z)) * _2439.z) / cbSceneParam._m0[78u].z)) + _2125;
        _2212 = _2448 * _2126;
    }
    else
    {
        _2206 = _2123;
        _2208 = _2124;
        _2210 = _2125;
        _2212 = _2126;
    }
    bool _2475;
    vec4 _2222;
    vec4 _2244;
    float _2246;
    float _2250;
    float _2251;
    float _2252;
    float _2253;
    bool _2263;
    for (;;)
    {
        _2222 = cbMatDynParam._m0[0u];
        float _2224 = roundEven(_2222.y);
        bool _2225 = _2224 == 3.0;
        float _2226 = log2(_2212);
        float _2233 = exp2(_2226 * cbSceneParam._m0[78u].x) * _2095;
        float _2234 = exp2(_2226 * cbSceneParam._m0[78u].y) * _2096;
        float _2235 = exp2(_2226 * cbSceneParam._m0[78u].z) * _2097;
        float _2242 = _542 + (-0.5);
        _2244 = cbMtdParam._m0[1u];
        _2246 = _2244.y * _2242;
        float _2249 = (_2224 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2250 = _2249 * (_2225 ? _2233 : (_2233 + (cbSceneParam._m0[72u].w * _2206)));
        _2251 = _2249 * (_2225 ? _2234 : (_2234 + (cbSceneParam._m0[72u].w * _2208)));
        _2252 = _2249 * (_2225 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2210)));
        _2253 = _2242 * 0.999000012874603271484375;
        _2263 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2263)
        {
            if ((cbInstanceData._m0[_600 + 7u].x + _2253) < 0.5)
            {
                _2475 = true;
                break;
            }
        }
        uint _2391 = _601 + uint(_2222.w);
        if ((cbInstanceData._m0[_2391].w < 1.0) && ((cbInstanceData._m0[_2391].w + _2253) < 0.5))
        {
            _2475 = true;
            break;
        }
        if ((_2246 + 1.0) < _2244.x)
        {
            _2475 = true;
            break;
        }
        _2475 = false;
        break;
    }
    float _2706;
    if (_2475)
    {
        discard_state = true;
        _2706 = 0.0;
    }
    else
    {
        _2706 = cbInstanceData._m0[_2098].w;
    }
    SV_Target.x = _2250;
    SV_Target.y = _2251;
    SV_Target.z = _2252;
    SV_Target.w = _2706;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2098].w;
    discard_exit();
}


