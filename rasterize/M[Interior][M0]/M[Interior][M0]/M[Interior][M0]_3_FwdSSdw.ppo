#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _838;
uint _2002;
uint _2003;
uint _2004;
uint _2238;
uint _2239;
uint _2240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    float _283 = cbMtdParam._m0[22u].y + _255;
    float _284 = cbMtdParam._m0[22u].z + _256;
    float _285 = cbMtdParam._m0[22u].w + _257;
    float _299 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _300 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_197 * TANGENT.x, _197 * TANGENT.y, _197 * TANGENT.z));
    float _301 = (-0.0) - dot(vec3(_283, _284, _285), vec3((-0.0) - (_190 * NORMAL.x), (-0.0) - (_190 * NORMAL.y), (-0.0) - (_190 * NORMAL.z)));
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _305 * _301;
    float _308 = (cbMtdParam._m0[19u].x * _299) * _305;
    float _310 = (cbMtdParam._m0[18u].w * _300) * _305;
    float _311 = fract(TEXCOORD.x);
    float _312 = fract(TEXCOORD.y);
    float _318;
    if (_308 > 0.0)
    {
        _318 = (1.0 - _311) / _308;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _311) / _308;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _318 = frontier_phi_3_2_ladder;
    }
    float _326;
    if (_310 > 0.0)
    {
        _326 = (1.0 - _312) / _310;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _312) / _310;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _326 = frontier_phi_7_6_ladder;
    }
    bool _328 = _306 > 0.0;
    float _330 = _328 ? (cbMtdParam._m0[15u].x / _306) : 5000.0;
    float _331 = isnan(_326) ? _318 : (isnan(_318) ? _326 : min(_318, _326));
    float _332 = isnan(_330) ? _331 : (isnan(_331) ? _330 : min(_331, _330));
    float _336 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _337 = _311 + (-0.5);
    float _340 = _312 + (-0.5);
    float _343 = ((_332 * _306) + _336) / _336;
    vec4 _369 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_337 + (_332 * _308)) / _343) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_340 + (_332 * _310)) / _343) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _380 = cbMtdParam._m0[9u].x * _369.x;
    float _381 = cbMtdParam._m0[9u].y * _369.y;
    float _382 = cbMtdParam._m0[9u].z * _369.z;
    float _404 = (cbMtdParam._m0[21u].x * _299) * _305;
    float _406 = (cbMtdParam._m0[20u].w * _300) * _305;
    bool _407 = _404 > 0.0;
    float _412;
    if (_407)
    {
        _412 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _412 = frontier_phi_11_10_ladder;
    }
    bool _414 = _406 > 0.0;
    float _419;
    if (_414)
    {
        _419 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _419 = frontier_phi_15_14_ladder;
    }
    float _422 = _328 ? (cbMtdParam._m0[16u].z / _306) : 5000.0;
    float _423 = isnan(_419) ? _412 : (isnan(_412) ? _419 : min(_412, _419));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _432 = ((_424 * _306) + _428) / _428;
    float _437 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _439 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _455 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_424 * _404)) / _432) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_424 * _406)) / _432) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _467;
    if (_407)
    {
        _467 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _467 = frontier_phi_19_18_ladder;
    }
    float _473;
    if (_414)
    {
        _473 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _473 = frontier_phi_23_22_ladder;
    }
    float _475 = isnan(_473) ? _467 : (isnan(_467) ? _473 : min(_467, _473));
    float _476 = isnan(_422) ? _475 : (isnan(_475) ? _422 : min(_475, _422));
    float _483 = ((_476 * _306) + _428) / _428;
    vec4 _497 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_476 * _404)) / _483) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_476 * _406)) / _483) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _499 = _497.w;
    float _506 = (_499 * ((_455.x * cbMtdParam._m0[10u].x) - _380)) + _380;
    float _507 = (_499 * ((_455.y * cbMtdParam._m0[10u].y) - _381)) + _381;
    float _508 = (_499 * ((_455.z * cbMtdParam._m0[10u].z) - _382)) + _382;
    float _523 = (cbMtdParam._m0[21u].z * _299) * _305;
    float _525 = (cbMtdParam._m0[21u].y * _300) * _305;
    bool _526 = _523 > 0.0;
    float _531;
    if (_526)
    {
        _531 = (1.0 - _311) / _523;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _311) / _523;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _531 = frontier_phi_27_26_ladder;
    }
    bool _533 = _525 > 0.0;
    float _538;
    if (_533)
    {
        _538 = (1.0 - _312) / _525;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _312) / _525;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _538 = frontier_phi_31_30_ladder;
    }
    float _541 = _328 ? (cbMtdParam._m0[18u].x / _306) : 5000.0;
    float _542 = isnan(_538) ? _531 : (isnan(_531) ? _538 : min(_531, _538));
    float _543 = isnan(_541) ? _542 : (isnan(_542) ? _541 : min(_542, _541));
    float _547 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _551 = ((_543 * _306) + _547) / _547;
    float _556 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _558 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _575 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_337 + (_543 * _523)) / _551) + 0.5) + _556) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_340 + (_543 * _525)) / _551) + 0.5) + _558) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _587;
    if (_526)
    {
        _587 = (1.0 - _311) / _523;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _311) / _523;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _587 = frontier_phi_35_34_ladder;
    }
    float _593;
    if (_533)
    {
        _593 = (1.0 - _312) / _525;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _312) / _525;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _593 = frontier_phi_39_38_ladder;
    }
    float _595 = isnan(_593) ? _587 : (isnan(_587) ? _593 : min(_587, _593));
    float _596 = isnan(_541) ? _595 : (isnan(_595) ? _541 : min(_595, _541));
    float _603 = ((_596 * _306) + _547) / _547;
    vec4 _617 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_337 + (_596 * _523)) / _603) + 0.5) + _556) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_340 + (_596 * _525)) / _603) + 0.5) + _558) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _619 = _617.w;
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _649 = _255 * _648;
    float _650 = _256 * _648;
    float _651 = _257 * _648;
    float _657 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _658 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_657 * cbSceneParam._m0[86u].x, _658 * cbSceneParam._m0[86u].y));
    float _670 = _667.x * TEXCOORD.z;
    float _671 = (-0.0) - _649;
    float _672 = (-0.0) - _650;
    float _673 = (-0.0) - _651;
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _837;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = (cbModelParam._m0[37u].x * ((((fma(_703, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _761 = (cbModelParam._m0[37u].y * ((((fma(_703, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _762 = (((((fma(_703, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_759, _761, _762), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_759, _761, _762), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_759, _761, _762), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_759, _761, _762), 0.0);
        float _799 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _810 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _820 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _830 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_786.x + (-0.5));
        float _832 = _830 * (_786.y + (-0.5));
        float _833 = _830 * (_786.z + (-0.5));
        _837 = _799 * (_765.z + (-0.5));
        _839 = _799 * (_765.y + (-0.5));
        _840 = _799 * (_765.x + (-0.5));
        _841 = _810 * (_772.z + (-0.5));
        _842 = _810 * (_772.y + (-0.5));
        _843 = _810 * (_772.x + (-0.5));
        _844 = _820 * (_779.z + (-0.5));
        _845 = _820 * (_779.y + (-0.5));
        _846 = _820 * (_779.x + (-0.5));
        _847 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        _848 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        _849 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    }
    else
    {
        _837 = _838;
        _839 = _838;
        _840 = _838;
        _841 = _838;
        _842 = _838;
        _843 = _838;
        _844 = _838;
        _845 = _838;
        _846 = _838;
        _847 = _838;
        _848 = _838;
        _849 = _838;
    }
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = (cbModelParam._m0[38u].x * ((((fma(_703, cbModelParam._m0[30u].z, fma(_699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _695)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _904 = (cbModelParam._m0[38u].y * ((((fma(_703, cbModelParam._m0[31u].z, fma(_699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _695)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _905 = (((((fma(_703, cbModelParam._m0[32u].z, fma(_699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _695)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _940 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _950 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _960 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _970 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_928.x + (-0.5));
        float _972 = _970 * (_928.y + (-0.5));
        float _973 = _970 * (_928.z + (-0.5));
        _977 = _940 * (_907.z + (-0.5));
        _978 = _940 * (_907.y + (-0.5));
        _979 = _940 * (_907.x + (-0.5));
        _980 = _950 * (_914.z + (-0.5));
        _981 = _950 * (_914.y + (-0.5));
        _982 = _950 * (_914.x + (-0.5));
        _983 = _960 * (_921.z + (-0.5));
        _984 = _960 * (_921.y + (-0.5));
        _985 = _960 * (_921.x + (-0.5));
        _986 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        _987 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        _988 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    }
    else
    {
        _977 = _838;
        _978 = _838;
        _979 = _838;
        _980 = _838;
        _981 = _838;
        _982 = _838;
        _983 = _838;
        _984 = _838;
        _985 = _838;
        _986 = _838;
        _987 = _838;
        _988 = _838;
    }
    float _1003 = _649 * (-0.5);
    float _1004 = _650 * (-0.5);
    float _1005 = _651 * (-0.5);
    float _1006 = dot(vec4(_1003, _1004, _1005, 1.0), vec4(_979, _982, _985, _988));
    float _1009 = dot(vec4(_1003, _1004, _1005, 1.0), vec4(_978, _981, _984, _987));
    float _1012 = dot(vec4(_1003, _1004, _1005, 1.0), vec4(_977, _980, _983, _986));
    float _1047;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1019 = dot(vec4(_1003, _1004, _1005, 1.0), vec4(_837, _841, _844, _847));
        float _1023 = dot(vec4(_1003, _1004, _1005, 1.0), vec4(_839, _842, _845, _848));
        float _1027 = dot(vec4(_1003, _1004, _1005, 1.0), vec4(_840, _843, _846, _849));
        float _1034 = dot(vec4(cbModelParam._m0[39u]), vec4(_1003, _1004, _1005, 1.0));
        _1047 = dot(vec3(isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)), isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)), isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1034) ? 0.0 : (isnan(0.0) ? _1034 : max(0.0, _1034))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1047 = 1.0;
    }
    float _1058;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1049 = dot(vec4(cbModelParam._m0[40u]), vec4(_1003, _1004, _1005, 1.0));
        _1058 = dot(vec3(isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)), isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)), isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1049) ? 0.0 : (isnan(0.0) ? _1049 : max(0.0, _1049))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1058 = 1.0;
    }
    float _1062 = (_1058 * cbModelParam._m0[1u].x) + (_1047 * (1.0 - cbModelParam._m0[1u].x));
    float _1068 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1149;
    float _1151;
    float _1153;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1116 = fma(_703, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695)) + cbModelParam._m0[13u].w;
        float _1120 = fma(_703, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695)) + cbModelParam._m0[14u].w;
        float _1124 = fma(_703, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695)) + cbModelParam._m0[15u].w;
        float _1127 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1130 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1133 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1159;
        if (_1127 > 0.0)
        {
            _1159 = abs((1.0 - _1116) / _1127);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1127 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1116 + 1.0) / _1127);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1159 = frontier_phi_54_52_ladder;
        }
        float _1459;
        if (_1130 > 0.0)
        {
            _1459 = abs((1.0 - _1120) / _1130);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1130 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1120 + 1.0) / _1130);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1459 = frontier_phi_63_59_ladder;
        }
        float _1755;
        if (_1133 > 0.0)
        {
            _1755 = abs((1.0 - _1124) / _1133);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1133 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1124 + 1.0) / _1133);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _1755 = frontier_phi_77_70_ladder;
        }
        float _1757 = isnan(_1459) ? _1159 : (isnan(_1159) ? _1459 : min(_1159, _1459));
        float _1758 = isnan(_1755) ? _1757 : (isnan(_1757) ? _1755 : min(_1757, _1755));
        float _1762 = (_1758 * _1127) + _1116;
        float _1763 = (_1758 * _1130) + _1120;
        float _1764 = (_1758 * _1133) + _1124;
        float _1765 = _1758 * 9.9999997473787516355514526367188e-05;
        float _1766 = (-1.0) - _1765;
        float _1768 = _1765 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_1764 > _1768) || ((_1764 < _1766) || ((_1763 > _1768) || ((_1763 < _1766) || ((_1762 < _1766) || (_1762 > _1768))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1875 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1764, cbModelParam._m0[9u].z, fma(_1763, cbModelParam._m0[9u].y, _1762 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1764, cbModelParam._m0[10u].z, fma(_1763, cbModelParam._m0[10u].y, _1762 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1764, cbModelParam._m0[11u].z, fma(_1763, cbModelParam._m0[11u].y, _1762 * cbModelParam._m0[11u].x))), _1068);
            frontier_phi_53_77_ladder = _1875.z * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _1875.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _1875.x * cbModelParam._m0[1u].y;
        }
        _1149 = frontier_phi_53_77_ladder_2;
        _1151 = frontier_phi_53_77_ladder_1;
        _1153 = frontier_phi_53_77_ladder;
    }
    else
    {
        vec4 _1137 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1068);
        _1149 = _1137.x * cbModelParam._m0[1u].y;
        _1151 = _1137.y * cbModelParam._m0[1u].y;
        _1153 = _1137.z * cbModelParam._m0[1u].y;
    }
    float _1156 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1244;
    float _1246;
    float _1248;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1208 = fma(_703, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695)) + cbModelParam._m0[21u].w;
        float _1212 = fma(_703, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695)) + cbModelParam._m0[22u].w;
        float _1216 = fma(_703, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695)) + cbModelParam._m0[23u].w;
        float _1219 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1222 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1225 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1464;
        if (_1219 > 0.0)
        {
            _1464 = abs((1.0 - _1208) / _1219);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1219 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1208 + 1.0) / _1219);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1464 = frontier_phi_65_61_ladder;
        }
        float _1781;
        if (_1222 > 0.0)
        {
            _1781 = abs((1.0 - _1212) / _1222);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1222 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1212 + 1.0) / _1222);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _1781 = frontier_phi_79_72_ladder;
        }
        float _1932;
        if (_1225 > 0.0)
        {
            _1932 = abs((1.0 - _1216) / _1225);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1225 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1216 + 1.0) / _1225);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _1932 = frontier_phi_93_88_ladder;
        }
        float _1934 = isnan(_1781) ? _1464 : (isnan(_1464) ? _1781 : min(_1464, _1781));
        float _1935 = isnan(_1932) ? _1934 : (isnan(_1934) ? _1932 : min(_1934, _1932));
        float _1939 = (_1935 * _1219) + _1208;
        float _1940 = (_1935 * _1222) + _1212;
        float _1941 = (_1935 * _1225) + _1216;
        float _1942 = _1935 * 9.9999997473787516355514526367188e-05;
        float _1943 = (-1.0) - _1942;
        float _1945 = _1942 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_1941 > _1945) || ((_1941 < _1943) || ((_1940 > _1945) || ((_1940 < _1943) || ((_1939 < _1943) || (_1939 > _1945))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2101 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1941, cbModelParam._m0[17u].z, fma(_1940, cbModelParam._m0[17u].y, _1939 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1941, cbModelParam._m0[18u].z, fma(_1940, cbModelParam._m0[18u].y, _1939 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1941, cbModelParam._m0[19u].z, fma(_1940, cbModelParam._m0[19u].y, _1939 * cbModelParam._m0[19u].x))), _1156);
            frontier_phi_62_93_ladder = _2101.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2101.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2101.x * cbModelParam._m0[1u].z;
        }
        _1244 = frontier_phi_62_93_ladder_2;
        _1246 = frontier_phi_62_93_ladder_1;
        _1248 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1228 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1156);
        _1244 = _1228.x * cbModelParam._m0[1u].z;
        _1246 = _1228.y * cbModelParam._m0[1u].z;
        _1248 = _1228.z * cbModelParam._m0[1u].z;
    }
    float _1260 = _670 * 0.01200000010430812835693359375;
    float _1262 = _1260 * ((cbModelParam._m0[1u].w * (_1244 - _1149)) + _1149);
    float _1263 = _1260 * ((cbModelParam._m0[1u].w * (_1246 - _1151)) + _1151);
    float _1264 = _1260 * ((cbModelParam._m0[1u].w * (_1248 - _1153)) + _1153);
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, _1262 * cbSceneParam._m0[91u].x));
    vec4 _1299 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_657, _658));
    float _1301 = _1299.w;
    uint _1317 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1322 = floatBitsToUint(cbInstanceData._m0[_1317 + 5u]);
    uint _1324 = _1322.x * 14u;
    uint _1325 = _1324 + 13u;
    float _1330 = _670 + (-1.0);
    float _1334 = (cbLight._m0[_1325].x * _1330) + 1.0;
    float _1335 = (cbLight._m0[_1325].y * _1330) + 1.0;
    uint _1336 = _1324 + 8u;
    float _1347 = cbLight._m0[_1324].x + _649;
    float _1348 = cbLight._m0[_1324].y + _650;
    float _1349 = cbLight._m0[_1324].z + _651;
    float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
    float _1357 = dot(vec3(0.0), vec3(cbLight._m0[_1324].xyz));
    float _2663 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
    float _1360 = isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0));
    float _1361 = dot(vec3(0.0), vec3(_649, _650, _651));
    float _2674 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
    float _1364 = isnan(1.0) ? _2674 : (isnan(_2674) ? 1.0 : min(_2674, 1.0));
    float _1365 = dot(vec3(cbLight._m0[_1324].xyz), vec3(_1347 * _1353, _1348 * _1353, _1349 * _1353));
    float _2685 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
    float _1376 = (exp2(log2(1.0 - (isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1382 = (0.5 / ((_1360 + 9.9999999392252902907785028219223e-09) + _1364)) * _1360;
    float _2696 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
    float _1384 = (isnan(1.0) ? _2696 : (isnan(_2696) ? 1.0 : min(_2696, 1.0))) * 0.31831014156341552734375;
    float _1386 = isnan(1.0) ? _1334 : (isnan(_1334) ? 1.0 : min(_1334, 1.0));
    uint _1399 = _1324 + 9u;
    uint _1405 = _1324 | 1u;
    float _1411 = cbLight._m0[_1405].x + _649;
    float _1412 = cbLight._m0[_1405].y + _650;
    float _1413 = cbLight._m0[_1405].z + _651;
    float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
    float _1421 = dot(vec3(0.0), vec3(cbLight._m0[_1405].xyz));
    float _2712 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
    float _1424 = isnan(1.0) ? _2712 : (isnan(_2712) ? 1.0 : min(_2712, 1.0));
    float _1425 = dot(vec3(cbLight._m0[_1405].xyz), vec3(_1411 * _1417, _1412 * _1417, _1413 * _1417));
    float _2723 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
    float _1434 = (exp2(log2(1.0 - (isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1438 = (0.5 / ((_1424 + 9.9999999392252902907785028219223e-09) + _1364)) * _1424;
    float _2734 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
    float _1440 = (isnan(1.0) ? _2734 : (isnan(_2734) ? 1.0 : min(_2734, 1.0))) * 0.31831014156341552734375;
    float _1441 = isnan(1.0) ? _1335 : (isnan(_1335) ? 1.0 : min(_1335, 1.0));
    float _1451 = (((_1434 * cbLight._m0[_1399].x) * _1440) * _1441) + ((((cbLight._m0[_1336].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1301))) * _1376) * _1384) * _1386);
    float _1452 = (((_1434 * cbLight._m0[_1399].y) * _1440) * _1441) + ((((cbLight._m0[_1336].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1301))) * _1376) * _1384) * _1386);
    float _1453 = (((_1434 * cbLight._m0[_1399].z) * _1440) * _1441) + ((((cbLight._m0[_1336].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1301))) * _1376) * _1384) * _1386);
    float _1570;
    float _1572;
    float _1574;
    if (_1322.y == 0u)
    {
        float _1509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1510 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1509;
        float _1511 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1509;
        float _1512 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1509;
        uvec4 _1524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1525 = _1524.x;
        uint _1536 = uint((float(_1524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _658) / _1525))) + floor(float(uint(cbSceneParam._m0[85u].x * _657) / _1525)));
        float _1546 = (log2(_1512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1547 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        uint _1550 = uint(isnan(14.0) ? _1547 : (isnan(_1547) ? 14.0 : min(_1547, 14.0)));
        uvec4 _1556 = texelFetch(g_lightClusterGridBuffer, int(((_1550 << 2u) + (_1536 << 6u)) >> 2u));
        uint _1557 = _1556.x;
        uint _1558 = _1524.z;
        float _1647;
        float _1649;
        float _1651;
        if (((((1u << ((_1558 >> 4u) & 15u)) + 4294967295u) & _1557) == 0u) || ((_1558 & 240u) == 0u))
        {
            _1647 = 0.0;
            _1649 = 0.0;
            _1651 = 0.0;
        }
        else
        {
            float _1648;
            float _1650;
            float _1652;
            float _1806 = 0.0;
            float _1807 = 0.0;
            float _1808 = 0.0;
            uint _1809 = 0u;
            uint _1818;
            bool _1819;
            for (;;)
            {
                _1818 = texelFetch(g_lightClassification, int((((_1550 << 5u) + (_1536 << 9u)) + (_1809 << 2u)) >> 2u)).x;
                _1819 = _1818 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                if (_1819)
                {
                    frontier_phi_90_pred = _1808;
                    frontier_phi_90_pred_1 = _1807;
                    frontier_phi_90_pred_2 = _1806;
                }
                else
                {
                    float _1972;
                    float _1973;
                    float _1974;
                    uint _1975;
                    _1972 = _1806;
                    _1973 = _1807;
                    _1974 = _1808;
                    _1975 = _1818;
                    float _1884;
                    float _1885;
                    float _1886;
                    for (;;)
                    {
                        uint _1979 = uint(findLSB(_1975)) + (_1809 << 5u);
                        uint _1976 = (_1975 + 4294967295u) & _1975;
                        uint _1981 = _1979 * 48u;
                        vec4 _1995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1981)).x, texelFetch(g_PointLightRenderingBuffer, int(_1981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1981 + 3u)).x));
                        uint _2012 = (_1979 * 48u) + 8u;
                        vec3 _2023 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2012)).x, texelFetch(g_PointLightRenderingBuffer, int(_2012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2012 + 2u)).x));
                        float _2027 = _1995.x - _1510;
                        float _2028 = _1995.y - _1511;
                        float _2029 = _1995.z - _1512;
                        float _2030 = dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029));
                        float _2033 = inversesqrt(_2030);
                        float _2042 = 1.0 - (_2030 * _1995.w);
                        float _2760 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
                        float _2044 = sqrt(_2030) * uintBitsToFloat(uvec4(_2002, _2003, _2004, texelFetch(g_PointLightRenderingBuffer, int(((_1979 * 48u) + 4u) + 3u)).x)).w;
                        float _2047 = 1.39999997615814208984375 / (_2044 + 1.39999997615814208984375);
                        float _2048 = _2047 * _2047;
                        float _2051 = ((1.0 - _2048) * dot(vec3(0.0), vec3(_2033 * _2027, _2033 * _2028, _2033 * _2029))) + _2048;
                        float _2053 = (-0.0) - _1510;
                        float _2054 = (-0.0) - _1511;
                        float _2055 = (-0.0) - _1512;
                        float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
                        float _2063 = dot(vec3(0.0), vec3(_2059 * _2053, _2059 * _2054, _2059 * _2055));
                        float _2771 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
                        float _2782 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
                        float _2067 = isnan(1.0) ? _2782 : (isnan(_2782) ? 1.0 : min(_2782, 1.0));
                        float _2071 = (0.5 / (((isnan(1.0) ? _2771 : (isnan(_2771) ? 1.0 : min(_2771, 1.0))) + 9.9999999392252902907785028219223e-09) + _2067)) * _2067;
                        float _2793 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
                        float _2080 = (((isnan(1.0) ? _2793 : (isnan(_2793) ? 1.0 : min(_2793, 1.0))) * 3.1415927410125732421875) / (((_2044 * _2044) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2760 : (isnan(_2760) ? 1.0 : min(_2760, 1.0)));
                        _1884 = (_2080 * _2023.x) + _1972;
                        _1885 = (_2080 * _2023.y) + _1973;
                        _1886 = (_2080 * _2023.z) + _1974;
                        if (_1976 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1972 = _1884;
                            _1973 = _1885;
                            _1974 = _1886;
                            _1975 = _1976;
                        }
                    }
                    frontier_phi_90_pred = _1886;
                    frontier_phi_90_pred_1 = _1885;
                    frontier_phi_90_pred_2 = _1884;
                }
                _1652 = frontier_phi_90_pred;
                _1650 = frontier_phi_90_pred_1;
                _1648 = frontier_phi_90_pred_2;
                uint _1810 = _1809 + 1u;
                if (_1810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1806 = _1648;
                    _1807 = _1650;
                    _1808 = _1652;
                    _1809 = _1810;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1647 = _1648;
            _1649 = _1650;
            _1651 = _1652;
        }
        uvec4 _1655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1656 = _1655.z;
        uint _1658 = (_1656 >> 8u) & 15u;
        float _1786;
        float _1788;
        float _1790;
        if (((4294967295u << _1658) & _1557) == 0u)
        {
            _1786 = _1647;
            _1788 = _1649;
            _1790 = _1651;
        }
        else
        {
            float _1802 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            if (_1658 < ((_1656 >> 12u) & 15u))
            {
                float _1787;
                float _1789;
                float _1791;
                float _1958 = _1647;
                float _1959 = _1649;
                float _1960 = _1651;
                uint _1961 = _1658;
                uint _1970;
                bool _1971;
                for (;;)
                {
                    _1970 = texelFetch(g_lightClassification, int((((_1550 << 5u) + (_1536 << 9u)) + (_1961 << 2u)) >> 2u)).x;
                    _1971 = _1970 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    if (_1971)
                    {
                        frontier_phi_99_pred = _1960;
                        frontier_phi_99_pred_1 = _1959;
                        frontier_phi_99_pred_2 = _1958;
                    }
                    else
                    {
                        float _2106;
                        float _2107;
                        float _2108;
                        float _2327;
                        float _2328;
                        float _2329;
                        float _2116 = _1958;
                        float _2117 = _1959;
                        float _2118 = _1960;
                        uint _2119 = _1970;
                        uint _2120;
                        uint _2130;
                        vec4 _2145;
                        float _2146;
                        vec3 _2158;
                        vec4 _2173;
                        vec4 _2188;
                        float _2234;
                        bool _2235;
                        for (;;)
                        {
                            _2130 = ((_1961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2119));
                            _2120 = (_2119 + 4294967295u) & _2119;
                            uint _2132 = _2130 * 40u;
                            _2145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2132 + 3u)).x));
                            _2146 = _2145.w;
                            uint _2148 = (_2130 * 40u) + 8u;
                            _2158 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2148 + 2u)).x));
                            uint _2160 = (_2130 * 40u) + 16u;
                            _2173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2160 + 3u)).x));
                            uint _2175 = (_2130 * 40u) + 20u;
                            _2188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2175 + 3u)).x));
                            uint _2190 = (_2130 * 40u) + 24u;
                            vec4 _2203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2190 + 3u)).x));
                            uint _2209 = (_2130 * 40u) + 28u;
                            vec4 _2222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2209 + 3u)).x));
                            _2234 = fma(_1512, _2222.z, fma(_1511, _2222.y, _2222.x * _1510)) + _2222.w;
                            _2235 = !((fma(_1512, _2203.z, fma(_1511, _2203.y, _2203.x * _1510)) + _2203.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            if (_2235)
                            {
                                float _2269 = _2145.x - _1510;
                                float _2270 = _2145.y - _1511;
                                float _2271 = _2145.z - _1512;
                                float _2272 = dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271));
                                float _2275 = inversesqrt(_2272);
                                float _2282 = 1.0 - (_2272 / (_2146 * _2146));
                                float _2804 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
                                float _2284 = sqrt(_2272) * uintBitsToFloat(uvec4(_2238, _2239, _2240, texelFetch(g_SpotLightRenderingBuffer, int(((_2130 * 40u) + 4u) + 3u)).x)).w;
                                float _2286 = 1.39999997615814208984375 / (_2284 + 1.39999997615814208984375);
                                float _2287 = _2286 * _2286;
                                float _2290 = (fma(_1512, _2173.z, fma(_1511, _2173.y, _2173.x * _1510)) + _2173.w) / _2234;
                                float _2291 = (fma(_1512, _2188.z, fma(_1511, _2188.y, _2188.x * _1510)) + _2188.w) / _2234;
                                float _2295 = 1.0 - dot(vec2(_2290, _2291), vec2(_2290, _2291));
                                float _2815 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
                                float _2303 = dot(vec3(0.0), vec3((-0.0) - (_1510 * _1802), (-0.0) - (_1511 * _1802), (-0.0) - (_1512 * _1802)));
                                float _2826 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
                                float _2311 = ((1.0 - _2287) * dot(vec3(0.0), vec3(_2275 * _2269, _2275 * _2270, _2275 * _2271))) + _2287;
                                float _2837 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
                                float _2312 = isnan(1.0) ? _2837 : (isnan(_2837) ? 1.0 : min(_2837, 1.0));
                                float _2316 = (0.5 / (((isnan(1.0) ? _2826 : (isnan(_2826) ? 1.0 : min(_2826, 1.0))) + 9.9999999392252902907785028219223e-09) + _2312)) * _2312;
                                float _2848 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
                                float _2323 = ((isnan(1.0) ? _2815 : (isnan(_2815) ? 1.0 : min(_2815, 1.0))) * (isnan(1.0) ? _2804 : (isnan(_2804) ? 1.0 : min(_2804, 1.0)))) * (((isnan(1.0) ? _2848 : (isnan(_2848) ? 1.0 : min(_2848, 1.0))) * 3.1415927410125732421875) / (((_2284 * _2284) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2323 * _2158.z;
                                frontier_phi_105_pred_1 = _2323 * _2158.y;
                                frontier_phi_105_pred_2 = _2323 * _2158.x;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                            }
                            _2329 = frontier_phi_105_pred;
                            _2328 = frontier_phi_105_pred_1;
                            _2327 = frontier_phi_105_pred_2;
                            _2106 = _2327 + _2116;
                            _2107 = _2328 + _2117;
                            _2108 = _2329 + _2118;
                            if (_2120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2116 = _2106;
                                _2117 = _2107;
                                _2118 = _2108;
                                _2119 = _2120;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2108;
                        frontier_phi_99_pred_1 = _2107;
                        frontier_phi_99_pred_2 = _2106;
                    }
                    _1791 = frontier_phi_99_pred;
                    _1789 = frontier_phi_99_pred_1;
                    _1787 = frontier_phi_99_pred_2;
                    uint _1962 = _1961 + 1u;
                    if (_1962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1958 = _1787;
                        _1959 = _1789;
                        _1960 = _1791;
                        _1961 = _1962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _1789;
                frontier_phi_81_82_ladder_1 = _1787;
                frontier_phi_81_82_ladder_2 = _1791;
            }
            else
            {
                frontier_phi_81_82_ladder = _1649;
                frontier_phi_81_82_ladder_1 = _1647;
                frontier_phi_81_82_ladder_2 = _1651;
            }
            _1786 = frontier_phi_81_82_ladder_1;
            _1788 = frontier_phi_81_82_ladder;
            _1790 = frontier_phi_81_82_ladder_2;
        }
        float _1795 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _1570 = ((_1786 * 0.039999999105930328369140625) * _1795) + _1451;
        _1572 = ((_1788 * 0.039999999105930328369140625) * _1795) + _1452;
        _1574 = ((_1790 * 0.039999999105930328369140625) * _1795) + _1453;
    }
    else
    {
        _1570 = _1451;
        _1572 = _1452;
        _1574 = _1453;
    }
    uint _1581 = (_1317 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1596 = (cbInstanceData._m0[_1581].x * ((_619 * ((_575.x * cbMtdParam._m0[14u].x) - _506)) + _506)) + ((_1570 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _1062)) * cbPerFrame._m0[3u].x);
    float _1597 = (cbInstanceData._m0[_1581].y * ((_619 * ((_575.y * cbMtdParam._m0[14u].y) - _507)) + _507)) + ((_1572 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _1062)) * cbPerFrame._m0[3u].x);
    float _1598 = (cbInstanceData._m0[_1581].z * ((_619 * ((_575.z * cbMtdParam._m0[14u].z) - _508)) + _508)) + ((_1574 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _1062)) * cbPerFrame._m0[3u].x);
    uint _1602 = _1317 + 6u;
    float _1610 = _657 / cbSceneParam._m0[86u].x;
    float _1611 = _658 / cbSceneParam._m0[86u].y;
    vec4 _1625 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1610, _1611, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1627 = _1625.x;
    float _1628 = _1625.y;
    float _1629 = _1625.z;
    float _1630 = _1625.w;
    float _1704;
    float _1706;
    float _1708;
    float _1710;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _1666 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _1667 = _1666 / _644;
        float _1678 = _1667 * _255;
        float _1679 = _256 * _1667;
        float _1680 = (-0.0) - _1679;
        float _1681 = _1667 * _257;
        float _1683 = (cbSceneParam._m0[77u].w * _1680) / _1666;
        float _1684 = _1683 + cbSceneParam._m0[79u].w;
        float _1685 = cbSceneParam._m0[79u].w - _1679;
        float _1691 = sqrt(((_1678 * _1678) + (_1679 * _1679)) + (_1681 * _1681));
        float _1694 = (1.0 - (cbSceneParam._m0[77u].w / _1666)) * _1691;
        float _1700 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1702 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1894;
        if (abs((_1680 - _1683) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1894 = ((((_1684 > 0.0) ? exp2(_1700 * _1684) : (2.0 - exp2(_1702 * _1684))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1694;
        }
        else
        {
            float _1832 = 1.0 / cbSceneParam._m0[80u].x;
            float _1833 = isnan(_1685) ? _1684 : (isnan(_1684) ? _1685 : max(_1684, _1685));
            float _1834 = isnan(_1685) ? _1684 : (isnan(_1684) ? _1685 : min(_1684, _1685));
            float _1843 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : min(_1833, 0.0));
            float _1844 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : min(_1834, 0.0));
            _1894 = ((abs(_1691 / _1680) * cbSceneParam._m0[80u].y) * ((((_1843 - _1844) * 2.0) - ((exp2(_1700 * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)))) - exp2(_1700 * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))))) * _1832)) - ((exp2(_1702 * _1843) - exp2(_1702 * _1844)) * _1832))) + (_1694 * cbSceneParam._m0[80u].z);
        }
        vec4 _1896 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1610, _1611, 1.0), 0.0);
        float _1905 = exp2((_1894 * (-1.44269502162933349609375)) * (1.0 - _1896.w));
        float _1906 = log2(_1905);
        float _1922 = log2(_1630);
        _1704 = (exp2(_1922 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1906 * cbSceneParam._m0[78u].x)) * _1896.x) / cbSceneParam._m0[78u].x)) + _1627;
        _1706 = (exp2(_1922 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1906 * cbSceneParam._m0[78u].y)) * _1896.y) / cbSceneParam._m0[78u].y)) + _1628;
        _1708 = (exp2(_1922 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1906 * cbSceneParam._m0[78u].z)) * _1896.z) / cbSceneParam._m0[78u].z)) + _1629;
        _1710 = _1905 * _1630;
    }
    else
    {
        _1704 = _1627;
        _1706 = _1628;
        _1708 = _1629;
        _1710 = _1630;
    }
    float _1722 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1723 = _1722 == 3.0;
    float _1725 = log2(_1710);
    float _1732 = exp2(_1725 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    float _1733 = exp2(_1725 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    float _1734 = exp2(_1725 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    float _1743 = (_1722 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1743 * (_1723 ? _1732 : (_1732 + (cbSceneParam._m0[72u].w * _1704)));
    SV_Target.y = _1743 * (_1723 ? _1733 : (_1733 + (cbSceneParam._m0[72u].w * _1706)));
    SV_Target.z = _1743 * (_1723 ? _1734 : (_1734 + (cbSceneParam._m0[72u].w * _1708)));
    SV_Target.w = cbInstanceData._m0[_1602].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1602].w;
}


