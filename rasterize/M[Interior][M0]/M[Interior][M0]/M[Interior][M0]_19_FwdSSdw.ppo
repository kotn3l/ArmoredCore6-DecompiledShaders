#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _326 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _333 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _342 = cbMtdParam._m0[23u].x + _257;
    float _343 = cbMtdParam._m0[23u].y + _258;
    float _344 = cbMtdParam._m0[23u].z + _259;
    float _358 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_326 * _186, _326 * _187, _326 * _188));
    float _359 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_333 * _200, _333 * _201, _333 * _202));
    float _360 = (-0.0) - dot(vec3(_342, _343, _344), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _364 * _360;
    float _367 = (cbMtdParam._m0[19u].w * _358) * _364;
    float _369 = (cbMtdParam._m0[20u].x * _359) * _364;
    float _372 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _373 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _391;
    float _394;
    float _396;
    if (_367 > 0.0)
    {
        float _377 = (1.0 - _372) / _367;
        _391 = _377;
        _394 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_377 * _365)) * 0.16666667163372039794921875;
        _396 = (fract((_377 * _369) + _373) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _392 = ((-0.0) - _372) / _367;
            frontier_phi_3_2_ladder = (fract((_392 * _369) + _373) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _392;
            frontier_phi_3_2_ladder_2 = (fract(_392 * _365) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _393;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _391 = frontier_phi_3_2_ladder_1;
        _394 = frontier_phi_3_2_ladder_2;
        _396 = frontier_phi_3_2_ladder;
    }
    float _422;
    float _424;
    float _426;
    if (_369 > 0.0)
    {
        float _409 = (1.0 - _373) / _369;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_409 < _391)
        {
            frontier_phi_8_5_ladder = (fract((_409 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _409;
            frontier_phi_8_5_ladder_2 = (fract(_409 * _365) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _394;
            frontier_phi_8_5_ladder_1 = _391;
            frontier_phi_8_5_ladder_2 = _396;
        }
        _422 = frontier_phi_8_5_ladder_1;
        _424 = frontier_phi_8_5_ladder;
        _426 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_369 < 0.0)
        {
            float _423 = ((-0.0) - _373) / _369;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_423 < _391)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_423 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _423;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_423 * _365) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _394;
                frontier_phi_8_6_ladder_9_ladder_1 = _391;
                frontier_phi_8_6_ladder_9_ladder_2 = _396;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _394;
            frontier_phi_8_6_ladder_1 = _391;
            frontier_phi_8_6_ladder_2 = _396;
        }
        _422 = frontier_phi_8_6_ladder_1;
        _424 = frontier_phi_8_6_ladder;
        _426 = frontier_phi_8_6_ladder_2;
    }
    float _430 = (_365 > 0.0) ? (cbMtdParam._m0[16u].w / _365) : 5000.0;
    float _443;
    float _444;
    if (_430 < _422)
    {
        _443 = ((_372 + cbMtdParam._m0[17u].x) + (_430 * _367)) * 0.16666667163372039794921875;
        _444 = (((_430 * _369) + _373) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _443 = _424;
        _444 = _426;
    }
    vec4 _446 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_443, _444));
    float _451 = _446.x * cbMtdParam._m0[13u].x;
    float _452 = _446.y * cbMtdParam._m0[13u].y;
    float _453 = _446.z * cbMtdParam._m0[13u].z;
    float _458 = 0.5 - (_284 * 0.5);
    float _468 = (((_451 - _297) - (_451 * _284)) * _458) + _297;
    float _469 = (((_452 - _299) - (_452 * _284)) * _458) + _299;
    float _470 = (((_453 - _301) - (_453 * _284)) * _458) + _301;
    vec4 _482 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _490 = (_482.x * 2.0) + (-1.0);
    float _492 = (_482.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_490, _492), vec2(_490, _492));
    float _3092 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _498 = sqrt(1.0 - (isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))));
    float _499 = _482.z * _284;
    float _502 = fma(_498, _193, fma(_492, _200, _490 * _186));
    float _505 = fma(_498, _194, fma(_492, _201, _490 * _187));
    float _508 = fma(_498, _195, fma(_492, _202, _490 * _188));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _513 = _512 * _502;
    float _514 = _512 * _505;
    float _515 = _512 * _508;
    float _3103 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _516 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
    float _3114 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3125 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3136 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _539 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _540 = _257 * _539;
    float _541 = _258 * _539;
    float _542 = _259 * _539;
    float _548 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _549 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_515, cbSceneParam._m0[5u].z, fma(_514, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _513));
    float _573 = fma(_515, cbSceneParam._m0[6u].z, fma(_514, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _513));
    float _576 = fma(_515, cbSceneParam._m0[7u].z, fma(_514, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _513));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = (_589 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * cbInstanceData._m0[_591].z;
    float _3147 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
    float _3158 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
    float _3169 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    vec4 _611 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _548, cbSceneParam._m0[86u].y * _549));
    float _614 = _611.x * TEXCOORD.z;
    float _615 = dot(vec3(_513, _514, _515), vec3(_540, _541, _542));
    float _618 = _615 * 2.0;
    float _622 = (_618 * _513) - _540;
    float _623 = (_618 * _514) - _541;
    float _624 = (_618 * _515) - _542;
    float _628 = abs(dot(vec3(_540, _541, _542), vec3(_513, _514, _515)));
    float _3180 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _630 = sqrt(_516);
    float _643 = exp2((_630 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_630 * 3.0));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _720 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _724 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _748 = _675 + _513;
        float _749 = _679 + _514;
        float _750 = _683 + _515;
        float _760 = fma(_750, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748)) - _716;
        float _761 = fma(_750, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748)) - _720;
        float _762 = fma(_750, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748)) - _724;
        float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
        float _779 = ((_766 * _760) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_716 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_766 * _761) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_720 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_766 * _762) / cbModelParam._m0[34u].z) + ((((((_724 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _818 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_784.x + (-0.5));
        float _820 = _818 * (_784.y + (-0.5));
        float _821 = _818 * (_784.z + (-0.5));
        float _828 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_791.x + (-0.5));
        float _830 = _828 * (_791.y + (-0.5));
        float _831 = _828 * (_791.z + (-0.5));
        float _838 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_798.x + (-0.5));
        float _840 = _838 * (_798.y + (-0.5));
        float _841 = _838 * (_798.z + (-0.5));
        float _848 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_805.x + (-0.5));
        float _850 = _848 * (_805.y + (-0.5));
        float _851 = _848 * (_805.z + (-0.5));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = _819 * 0.5;
        float _856 = _829 * 0.5;
        float _857 = _839 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _872 = (dot(vec3(_513, _514, _515), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3206 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _882 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3217 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3228 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0))) * (_884 + 1.0))) + _889) * _852;
        float _899 = _820 * 0.5;
        float _900 = _830 * 0.5;
        float _901 = _840 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_513, _514, _515), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3261 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_926 + 1.0))) + _931) * _853;
        float _941 = _821 * 0.5;
        float _942 = _831 * 0.5;
        float _943 = _841 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_513, _514, _515), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3294 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_968 + 1.0))) + _973) * _854;
        _990 = _821;
        _991 = _820;
        _992 = _819;
        _993 = _831;
        _994 = _830;
        _995 = _829;
        _996 = _841;
        _997 = _840;
        _998 = _839;
        _999 = _854;
        _1000 = _853;
        _1001 = _852;
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
    }
    else
    {
        _990 = _393;
        _991 = _393;
        _992 = _393;
        _993 = _393;
        _994 = _393;
        _995 = _393;
        _996 = _393;
        _997 = _393;
        _998 = _393;
        _999 = _393;
        _1000 = _393;
        _1001 = _393;
        _1002 = 0.0;
        _1003 = 0.0;
        _1004 = 0.0;
    }
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1030 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1034 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1038 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1061 = _675 + _513;
        float _1062 = _679 + _514;
        float _1063 = _683 + _515;
        float _1073 = fma(_1063, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1030 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1034 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[35u].z) + ((((((_1038 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1129 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1096.x + (-0.5));
        float _1131 = _1129 * (_1096.y + (-0.5));
        float _1132 = _1129 * (_1096.z + (-0.5));
        float _1139 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1103.x + (-0.5));
        float _1141 = _1139 * (_1103.y + (-0.5));
        float _1142 = _1139 * (_1103.z + (-0.5));
        float _1149 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1110.x + (-0.5));
        float _1151 = _1149 * (_1110.y + (-0.5));
        float _1152 = _1149 * (_1110.z + (-0.5));
        float _1159 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1117.x + (-0.5));
        float _1161 = _1159 * (_1117.y + (-0.5));
        float _1162 = _1159 * (_1117.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_513, _514, _515), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3357 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_1193 + 1.0))) + _1198) * _1163;
        float _1208 = _1131 * 0.5;
        float _1209 = _1141 * 0.5;
        float _1210 = _1151 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_513, _514, _515), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3390 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_1235 + 1.0))) + _1240) * _1164;
        float _1250 = _1132 * 0.5;
        float _1251 = _1142 * 0.5;
        float _1252 = _1152 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_513, _514, _515), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3423 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_1277 + 1.0))) + _1282) * _1165;
        _1299 = _1132;
        _1300 = _1131;
        _1301 = _1130;
        _1302 = _1142;
        _1303 = _1141;
        _1304 = _1140;
        _1305 = _1152;
        _1306 = _1151;
        _1307 = _1150;
        _1308 = _1165;
        _1309 = _1164;
        _1310 = _1163;
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _393;
        _1300 = _393;
        _1301 = _393;
        _1302 = _393;
        _1303 = _393;
        _1304 = _393;
        _1305 = _393;
        _1306 = _393;
        _1307 = _393;
        _1308 = _393;
        _1309 = _393;
        _1310 = _393;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1003)) + _1003;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1346 = fma(_1325, cbSceneParam._m0[89u].z, fma(_1324, cbSceneParam._m0[89u].y, _1323 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1325, cbSceneParam._m0[90u].z, fma(_1324, cbSceneParam._m0[90u].y, _1323 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1325, cbSceneParam._m0[91u].z, fma(_1324, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1323));
    float _1367 = _622 * 0.5;
    float _1368 = _623 * 0.5;
    float _1369 = _624 * 0.5;
    float _1370 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1373 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1376 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1410;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1383 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_990, _993, _996, _999));
        float _1387 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_991, _994, _997, _1000));
        float _1391 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_992, _995, _998, _1001));
        float _1398 = dot(vec4(cbModelParam._m0[39u]), vec4(_1367, _1368, _1369, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1421;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1412 = dot(vec4(cbModelParam._m0[40u]), vec4(_1367, _1368, _1369, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1425 = (_1421 * cbModelParam._m0[1u].x) + (_1410 * (1.0 - cbModelParam._m0[1u].x));
    float _1435 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _516);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1435 : min(cbModelParam._m0[25u].z, _1435));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1485 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1489 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1493 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1496 = fma(_624, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622));
        float _1499 = fma(_624, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622));
        float _1502 = fma(_624, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622));
        float _1530;
        if (_1496 > 0.0)
        {
            _1530 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1530 = frontier_phi_26_24_ladder;
        }
        float _1903;
        if (_1499 > 0.0)
        {
            _1903 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1903 = frontier_phi_35_31_ladder;
        }
        float _2203;
        if (_1502 > 0.0)
        {
            _2203 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2203 = frontier_phi_49_42_ladder;
        }
        float _2205 = isnan(_1903) ? _1530 : (isnan(_1530) ? _1903 : min(_1530, _1903));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1496) + _1485;
        float _2211 = (_2206 * _1499) + _1489;
        float _2212 = (_2206 * _1502) + _1493;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1436);
            frontier_phi_25_49_ladder = _2338.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2338.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2338.x * cbModelParam._m0[1u].y;
        }
        _1518 = frontier_phi_25_49_ladder_2;
        _1520 = frontier_phi_25_49_ladder_1;
        _1522 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_622, _623, _624), _1436);
        _1518 = _1506.x * cbModelParam._m0[1u].y;
        _1520 = _1506.y * cbModelParam._m0[1u].y;
        _1522 = _1506.z * cbModelParam._m0[1u].y;
    }
    float _1526 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _516);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1526 : min(cbModelParam._m0[25u].w, _1526));
    float _1618;
    float _1620;
    float _1622;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1582 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1586 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1590 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1593 = fma(_624, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622));
        float _1596 = fma(_624, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622));
        float _1599 = fma(_624, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622));
        float _1908;
        if (_1593 > 0.0)
        {
            _1908 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1908 = frontier_phi_37_33_ladder;
        }
        float _2229;
        if (_1596 > 0.0)
        {
            _2229 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2229 = frontier_phi_51_44_ladder;
        }
        float _2398;
        if (_1599 > 0.0)
        {
            _2398 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2398 = frontier_phi_65_60_ladder;
        }
        float _2400 = isnan(_2229) ? _1908 : (isnan(_1908) ? _2229 : min(_1908, _2229));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1593) + _1582;
        float _2406 = (_2401 * _1596) + _1586;
        float _2407 = (_2401 * _1599) + _1590;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1527);
            frontier_phi_34_65_ladder = _2640.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2640.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2640.z * cbModelParam._m0[1u].z;
        }
        _1618 = frontier_phi_34_65_ladder_1;
        _1620 = frontier_phi_34_65_ladder;
        _1622 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_622, _623, _624), _1527);
        _1618 = _1602.x * cbModelParam._m0[1u].z;
        _1620 = _1602.y * cbModelParam._m0[1u].z;
        _1622 = _1602.z * cbModelParam._m0[1u].z;
    }
    float _1634 = ((((1.0 - _643) * ((_630 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_643 * _630)) * _614;
    float _1635 = _1634 * ((cbModelParam._m0[1u].w * (_1618 - _1518)) + _1518);
    float _1636 = _1634 * ((cbModelParam._m0[1u].w * (_1620 - _1520)) + _1520);
    float _1637 = _1634 * ((cbModelParam._m0[1u].w * (_1622 - _1522)) + _1522);
    float _1640 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, _1635 * cbSceneParam._m0[91u].x));
    vec4 _1654 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_548, _549));
    float _1656 = _1654.w;
    float _1668 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1656);
    float _1669 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1656);
    float _1670 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1656);
    uvec4 _1674 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1676 = _1674.x * 14u;
    uint _1677 = _1676 + 13u;
    float _1682 = _614 + (-1.0);
    float _1685 = (cbLight._m0[_1677].x * _1682) + 1.0;
    float _1686 = (cbLight._m0[_1677].y * _1682) + 1.0;
    uint _1687 = _1676 + 5u;
    float _1693 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    uint _1697 = _1676 + 4u;
    float _1707 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
    uint _1711 = _1676 | 1u;
    float _1722 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_513, _514, _515));
    float _1725 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_513, _514, _515));
    float _3559 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _3570 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1730 = (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * 0.3183098733425140380859375;
    float _1732 = (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.3183098733425140380859375;
    float _1739 = ((cbLight._m0[_1687].x * _1693) * _1732) + (((cbLight._m0[_1697].x * _1668) * _1707) * _1730);
    float _1740 = ((_1693 * cbLight._m0[_1687].y) * _1732) + (((cbLight._m0[_1697].y * _1669) * _1707) * _1730);
    float _1741 = ((_1693 * cbLight._m0[_1687].z) * _1732) + (((cbLight._m0[_1697].z * _1670) * _1707) * _1730);
    uint _1743 = _1676 + 8u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _516) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1676].x + _540;
    float _1759 = cbLight._m0[_1676].y + _541;
    float _1760 = cbLight._m0[_1676].z + _542;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1676].xyz));
    float _3581 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _1772 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _1773 = dot(vec3(_513, _514, _515), vec3(_1765, _1766, _1767));
    float _3603 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1765, _1766, _1767));
    float _3614 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1757 * _1757;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1796 = (exp2(log2(1.0 - (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1797 = 1.0 - _1757;
    float _1808 = (0.5 / (((_1772 * ((_1771 * _1797) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1797) + _1757) * _1771))) * _1771;
    float _3625 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    uint _1824 = _1676 + 9u;
    float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _516) * 0.949999988079071044921875);
    float _1836 = _1835 * _1835;
    float _1837 = cbLight._m0[_1711].x + _540;
    float _1838 = cbLight._m0[_1711].y + _541;
    float _1839 = cbLight._m0[_1711].z + _542;
    float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
    float _1844 = _1843 * _1837;
    float _1845 = _1843 * _1838;
    float _1846 = _1843 * _1839;
    float _1847 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1711].xyz));
    float _3636 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _1851 = dot(vec3(_513, _514, _515), vec3(_1844, _1845, _1846));
    float _3647 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1844, _1845, _1846));
    float _3658 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1836 * _1836;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1872 = (exp2(log2(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1873 = 1.0 - _1836;
    float _1883 = (0.5 / (((_1772 * ((_1850 * _1873) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1873) + _1836) * _1850))) * _1850;
    float _3669 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    float _1895 = (((_1872 * cbLight._m0[_1824].x) * _1885) * _1693) + ((((cbLight._m0[_1743].x * _1668) * _1796) * _1810) * _1707);
    float _1896 = (((_1872 * cbLight._m0[_1824].y) * _1885) * _1693) + ((((cbLight._m0[_1743].y * _1669) * _1796) * _1810) * _1707);
    float _1897 = (((_1872 * cbLight._m0[_1824].z) * _1885) * _1693) + ((((cbLight._m0[_1743].z * _1670) * _1796) * _1810) * _1707);
    float _2012;
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    if (_1674.y == 0u)
    {
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1952;
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1952;
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1952;
        uvec4 _1967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1968 = _1967.x;
        uint _1979 = uint((float(_1967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _549) / _1968))) + floor(float(uint(cbSceneParam._m0[85u].x * _548) / _1968)));
        float _1989 = (log2(_1955 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1990 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        uint _1993 = uint(isnan(14.0) ? _1990 : (isnan(_1990) ? 14.0 : min(_1990, 14.0)));
        uvec4 _1998 = texelFetch(g_lightClusterGridBuffer, int(((_1993 << 2u) + (_1979 << 6u)) >> 2u));
        uint _1999 = _1998.x;
        uint _2000 = _1967.z;
        float _2090;
        float _2092;
        float _2094;
        float _2096;
        float _2098;
        float _2100;
        if (((((1u << ((_2000 >> 4u) & 15u)) + 4294967295u) & _1999) == 0u) || ((_2000 & 240u) == 0u))
        {
            _2090 = 0.0;
            _2092 = 0.0;
            _2094 = 0.0;
            _2096 = 0.0;
            _2098 = 0.0;
            _2100 = 0.0;
        }
        else
        {
            float _2091;
            float _2093;
            float _2095;
            float _2097;
            float _2099;
            float _2101;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            float _2270 = 0.0;
            float _2271 = 0.0;
            uint _2272 = 0u;
            uint _2281;
            bool _2282;
            for (;;)
            {
                _2281 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2272 << 2u)) >> 2u)).x;
                _2282 = _2281 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2282)
                {
                    frontier_phi_62_pred = _2267;
                    frontier_phi_62_pred_1 = _2266;
                    frontier_phi_62_pred_2 = _2268;
                    frontier_phi_62_pred_3 = _2271;
                    frontier_phi_62_pred_4 = _2270;
                    frontier_phi_62_pred_5 = _2269;
                }
                else
                {
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    uint _2447;
                    _2441 = _2266;
                    _2442 = _2267;
                    _2443 = _2268;
                    _2444 = _2269;
                    _2445 = _2270;
                    _2446 = _2271;
                    _2447 = _2281;
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    for (;;)
                    {
                        uint _2451 = uint(findLSB(_2447)) + (_2272 << 5u);
                        uint _2448 = (_2447 + 4294967295u) & _2447;
                        uint _2453 = _2451 * 48u;
                        vec4 _2467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2453)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 3u)).x));
                        uint _2473 = (_2451 * 48u) + 4u;
                        vec4 _2486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 3u)).x));
                        uint _2492 = (_2451 * 48u) + 8u;
                        vec3 _2503 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x));
                        float _2507 = _2467.x - _1953;
                        float _2508 = _2467.y - _1954;
                        float _2509 = _2467.z - _1955;
                        float _2510 = dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509));
                        float _2513 = inversesqrt(_2510);
                        float _2514 = _2513 * _2507;
                        float _2515 = _2513 * _2508;
                        float _2516 = _2513 * _2509;
                        float _2517 = dot(vec3(_570, _573, _576), vec3(_2514, _2515, _2516));
                        float _2522 = 1.0 - (_2510 * _2467.w);
                        float _3690 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2523 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
                        float _2524 = sqrt(_2510) * _2486.w;
                        float _2527 = 1.39999997615814208984375 / (_2524 + 1.39999997615814208984375);
                        float _2528 = _2527 * _2527;
                        float _2531 = ((1.0 - _2528) * _2517) + _2528;
                        float _2534 = _2524 * _2524;
                        float _2538 = ((isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0))) * _2523) / ((_2534 * 0.699999988079071044921875) + 1.0);
                        float _2542 = (-0.0) - _1953;
                        float _2543 = (-0.0) - _1954;
                        float _2544 = (-0.0) - _1955;
                        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
                        float _2549 = _2548 * _2542;
                        float _2550 = _2548 * _2543;
                        float _2551 = _2548 * _2544;
                        float _2559 = exp2(log2(1.0 / ((_2534 * 3.5) + 5.0)) * 0.25);
                        float _2560 = 1.0 - _630;
                        float _2567 = sqrt(1.0 - ((1.0 - (_2560 * _2560)) * (1.0 - (_2559 * _2559))));
                        float _2568 = _2567 * _2567;
                        float _2569 = _2568 * _2568;
                        float _2570 = _2549 + _2514;
                        float _2571 = _2550 + _2515;
                        float _2572 = _2551 + _2516;
                        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
                        float _2580 = dot(vec3(_570, _573, _576), vec3(_2549, _2550, _2551));
                        float _3706 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2583 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                        float _2584 = dot(vec3(_570, _573, _576), vec3(_2576 * _2570, _2576 * _2571, _2576 * _2572));
                        float _3717 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
                        float _2587 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
                        float _2591 = ((_2587 * _2587) * (_2569 + (-1.0))) + 1.0;
                        float _2592 = _2527 * _2568;
                        float _2593 = _2592 * _2592;
                        float _2596 = ((1.0 - _2593) * _2517) + _2593;
                        float _3728 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                        float _2597 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                        float _2598 = 1.0 - _2568;
                        float _2608 = (0.5 / (((_2597 * ((_2583 * _2598) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2597 * _2598) + _2568) * _2583))) * _2597;
                        float _3739 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                        float _2619 = (((_2569 * 3.1415927410125732421875) * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) / ((_2591 * _2591) * ((_2534 * 2.1991131305694580078125) + 3.141590118408203125))) * _2523;
                        _2350 = (_2538 * _2486.x) + _2444;
                        _2351 = (_2538 * _2486.y) + _2445;
                        _2352 = (_2538 * _2486.z) + _2446;
                        _2347 = (_2619 * _2503.x) + _2441;
                        _2348 = (_2619 * _2503.y) + _2442;
                        _2349 = (_2619 * _2503.z) + _2443;
                        if (_2448 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2441 = _2347;
                            _2442 = _2348;
                            _2443 = _2349;
                            _2444 = _2350;
                            _2445 = _2351;
                            _2446 = _2352;
                            _2447 = _2448;
                        }
                    }
                    frontier_phi_62_pred = _2348;
                    frontier_phi_62_pred_1 = _2347;
                    frontier_phi_62_pred_2 = _2349;
                    frontier_phi_62_pred_3 = _2352;
                    frontier_phi_62_pred_4 = _2351;
                    frontier_phi_62_pred_5 = _2350;
                }
                _2093 = frontier_phi_62_pred;
                _2091 = frontier_phi_62_pred_1;
                _2095 = frontier_phi_62_pred_2;
                _2101 = frontier_phi_62_pred_3;
                _2099 = frontier_phi_62_pred_4;
                _2097 = frontier_phi_62_pred_5;
                uint _2273 = _2272 + 1u;
                if (_2273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2266 = _2091;
                    _2267 = _2093;
                    _2268 = _2095;
                    _2269 = _2097;
                    _2270 = _2099;
                    _2271 = _2101;
                    _2272 = _2273;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2090 = _2091;
            _2092 = _2093;
            _2094 = _2095;
            _2096 = _2097;
            _2098 = _2099;
            _2100 = _2101;
        }
        uvec4 _2104 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2105 = _2104.z;
        uint _2107 = (_2105 >> 8u) & 15u;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        if (((4294967295u << _2107) & _1999) == 0u)
        {
            _2234 = _2090;
            _2236 = _2092;
            _2238 = _2094;
            _2240 = _2096;
            _2242 = _2098;
            _2244 = _2100;
        }
        else
        {
            float _2259 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
            float _2260 = _2259 * _1953;
            float _2261 = _2259 * _1954;
            float _2262 = _2259 * _1955;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2107 < ((_2105 >> 12u) & 15u))
            {
                float _2235;
                float _2237;
                float _2239;
                float _2241;
                float _2243;
                float _2245;
                float _2424 = _2090;
                float _2425 = _2092;
                float _2426 = _2094;
                float _2427 = _2096;
                float _2428 = _2098;
                float _2429 = _2100;
                uint _2430 = _2107;
                uint _2439;
                bool _2440;
                for (;;)
                {
                    _2439 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2430 << 2u)) >> 2u)).x;
                    _2440 = _2439 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2440)
                    {
                        frontier_phi_71_pred = _2425;
                        frontier_phi_71_pred_1 = _2424;
                        frontier_phi_71_pred_2 = _2429;
                        frontier_phi_71_pred_3 = _2428;
                        frontier_phi_71_pred_4 = _2427;
                        frontier_phi_71_pred_5 = _2426;
                    }
                    else
                    {
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2658 = _2424;
                        float _2659 = _2425;
                        float _2660 = _2426;
                        float _2661 = _2427;
                        float _2662 = _2428;
                        float _2663 = _2429;
                        uint _2664 = _2439;
                        uint _2665;
                        vec4 _2690;
                        float _2691;
                        vec4 _2706;
                        vec3 _2718;
                        vec4 _2733;
                        vec4 _2748;
                        float _2794;
                        bool _2795;
                        for (;;)
                        {
                            uint _2675 = ((_2430 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2664));
                            _2665 = (_2664 + 4294967295u) & _2664;
                            uint _2677 = _2675 * 40u;
                            _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            _2691 = _2690.w;
                            uint _2693 = (_2675 * 40u) + 4u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            uint _2708 = (_2675 * 40u) + 8u;
                            _2718 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x));
                            uint _2720 = (_2675 * 40u) + 16u;
                            _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            uint _2735 = (_2675 * 40u) + 20u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            uint _2750 = (_2675 * 40u) + 24u;
                            vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 3u)).x));
                            uint _2769 = (_2675 * 40u) + 28u;
                            vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            _2794 = fma(_1955, _2782.z, fma(_1954, _2782.y, _2782.x * _1953)) + _2782.w;
                            _2795 = !((fma(_1955, _2763.z, fma(_1954, _2763.y, _2763.x * _1953)) + _2763.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2795)
                            {
                                float _2822 = _2690.x - _1953;
                                float _2823 = _2690.y - _1954;
                                float _2824 = _2690.z - _1955;
                                float _2825 = dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824));
                                float _2828 = inversesqrt(_2825);
                                float _2829 = _2828 * _2822;
                                float _2830 = _2828 * _2823;
                                float _2831 = _2828 * _2824;
                                float _2835 = 1.0 - (_2825 / (_2691 * _2691));
                                float _3750 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                                float _2836 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
                                float _2840 = sqrt(_2825) * _2706.w;
                                float _2842 = 1.39999997615814208984375 / (_2840 + 1.39999997615814208984375);
                                float _2843 = _2842 * _2842;
                                float _2846 = ((1.0 - _2843) * dot(vec3(_2829, _2830, _2831), vec3(_570, _573, _576))) + _2843;
                                float _2849 = _2840 * _2840;
                                float _2853 = (fma(_1955, _2733.z, fma(_1954, _2733.y, _2733.x * _1953)) + _2733.w) / _2794;
                                float _2854 = (fma(_1955, _2748.z, fma(_1954, _2748.y, _2748.x * _1953)) + _2748.w) / _2794;
                                float _2858 = 1.0 - dot(vec2(_2853, _2854), vec2(_2853, _2854));
                                float _3766 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                                float _2859 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
                                float _2860 = _2859 * (((isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * _2836) / ((_2849 * 0.699999988079071044921875) + 1.0));
                                float _2872 = exp2(log2(1.0 / ((_2849 * 3.5) + 5.0)) * 0.25);
                                float _2873 = 1.0 - _630;
                                float _2880 = sqrt(1.0 - ((1.0 - (_2873 * _2873)) * (1.0 - (_2872 * _2872))));
                                float _2881 = _2880 * _2880;
                                float _2882 = _2881 * _2881;
                                float _2883 = _2829 - _2260;
                                float _2884 = _2830 - _2261;
                                float _2885 = _2831 - _2262;
                                float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                                float _2893 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2260, (-0.0) - _2261, (-0.0) - _2262));
                                float _3777 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                                float _2896 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
                                float _2897 = dot(vec3(_570, _573, _576), vec3(_2889 * _2883, _2889 * _2884, _2889 * _2885));
                                float _3788 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                                float _2900 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
                                float _2904 = ((_2900 * _2900) * (_2882 + (-1.0))) + 1.0;
                                float _2905 = _2842 * _2881;
                                float _2906 = _2905 * _2905;
                                float _2912 = ((1.0 - _2906) * dot(vec3(_570, _573, _576), vec3(_2829, _2830, _2831))) + _2906;
                                float _3799 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2913 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
                                float _2914 = 1.0 - _2881;
                                float _2924 = (0.5 / (((_2913 * ((_2896 * _2914) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2913 * _2914) + _2881) * _2896))) * _2913;
                                float _3810 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2934 = (_2859 * _2836) * (((_2882 * 3.1415927410125732421875) * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) / ((_2904 * _2904) * ((_2849 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2934 * _2718.y;
                                frontier_phi_77_pred_1 = _2934 * _2718.x;
                                frontier_phi_77_pred_2 = _2860 * _2706.z;
                                frontier_phi_77_pred_3 = _2860 * _2706.y;
                                frontier_phi_77_pred_4 = _2860 * _2706.x;
                                frontier_phi_77_pred_5 = _2934 * _2718.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2939 = frontier_phi_77_pred;
                            _2938 = frontier_phi_77_pred_1;
                            _2943 = frontier_phi_77_pred_2;
                            _2942 = frontier_phi_77_pred_3;
                            _2941 = frontier_phi_77_pred_4;
                            _2940 = frontier_phi_77_pred_5;
                            _2648 = _2941 + _2661;
                            _2649 = _2942 + _2662;
                            _2650 = _2943 + _2663;
                            _2645 = _2938 + _2658;
                            _2646 = _2939 + _2659;
                            _2647 = _2940 + _2660;
                            if (_2665 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2658 = _2645;
                                _2659 = _2646;
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2649;
                                _2663 = _2650;
                                _2664 = _2665;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2646;
                        frontier_phi_71_pred_1 = _2645;
                        frontier_phi_71_pred_2 = _2650;
                        frontier_phi_71_pred_3 = _2649;
                        frontier_phi_71_pred_4 = _2648;
                        frontier_phi_71_pred_5 = _2647;
                    }
                    _2237 = frontier_phi_71_pred;
                    _2235 = frontier_phi_71_pred_1;
                    _2245 = frontier_phi_71_pred_2;
                    _2243 = frontier_phi_71_pred_3;
                    _2241 = frontier_phi_71_pred_4;
                    _2239 = frontier_phi_71_pred_5;
                    uint _2431 = _2430 + 1u;
                    if (_2431 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2424 = _2235;
                        _2425 = _2237;
                        _2426 = _2239;
                        _2427 = _2241;
                        _2428 = _2243;
                        _2429 = _2245;
                        _2430 = _2431;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2245;
                frontier_phi_53_54_ladder_1 = _2241;
                frontier_phi_53_54_ladder_2 = _2239;
                frontier_phi_53_54_ladder_3 = _2237;
                frontier_phi_53_54_ladder_4 = _2235;
                frontier_phi_53_54_ladder_5 = _2243;
            }
            else
            {
                frontier_phi_53_54_ladder = _2100;
                frontier_phi_53_54_ladder_1 = _2096;
                frontier_phi_53_54_ladder_2 = _2094;
                frontier_phi_53_54_ladder_3 = _2092;
                frontier_phi_53_54_ladder_4 = _2090;
                frontier_phi_53_54_ladder_5 = _2098;
            }
            _2234 = frontier_phi_53_54_ladder_4;
            _2236 = frontier_phi_53_54_ladder_3;
            _2238 = frontier_phi_53_54_ladder_2;
            _2240 = frontier_phi_53_54_ladder_1;
            _2242 = frontier_phi_53_54_ladder_5;
            _2244 = frontier_phi_53_54_ladder;
        }
        float _2249 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _2012 = (_2249 * _2240) + _1739;
        _2014 = (_2249 * _2242) + _1740;
        _2016 = (_2249 * _2244) + _1741;
        _2018 = ((_2234 * 0.039999999105930328369140625) * _2249) + _1895;
        _2020 = ((_2236 * 0.039999999105930328369140625) * _2249) + _1896;
        _2022 = ((_2238 * 0.039999999105930328369140625) * _2249) + _1897;
    }
    else
    {
        _2012 = _1739;
        _2014 = _1740;
        _2016 = _1741;
        _2018 = _1895;
        _2020 = _1896;
        _2022 = _1897;
    }
    float _3826 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3837 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3848 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _2039 = ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_2012 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _614))) + ((_2018 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2040 = ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_2014 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _614))) + ((_2020 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2041 = ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_2016 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _614))) + ((_2022 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    uint _2045 = _589 + 6u;
    float _2053 = _548 / cbSceneParam._m0[86u].x;
    float _2054 = _549 / cbSceneParam._m0[86u].y;
    vec4 _2068 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2053, _2054, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2070 = _2068.x;
    float _2071 = _2068.y;
    float _2072 = _2068.z;
    float _2073 = _2068.w;
    float _2153;
    float _2155;
    float _2157;
    float _2159;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2115 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2116 = _2115 / _535;
        float _2127 = _2116 * _257;
        float _2128 = _258 * _2116;
        float _2129 = (-0.0) - _2128;
        float _2130 = _2116 * _259;
        float _2132 = (cbSceneParam._m0[77u].w * _2129) / _2115;
        float _2133 = _2132 + cbSceneParam._m0[79u].w;
        float _2134 = cbSceneParam._m0[79u].w - _2128;
        float _2140 = sqrt(((_2127 * _2127) + (_2128 * _2128)) + (_2130 * _2130));
        float _2143 = (1.0 - (cbSceneParam._m0[77u].w / _2115)) * _2140;
        float _2149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2360;
        if (abs((_2129 - _2132) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2360 = ((((_2133 > 0.0) ? exp2(_2149 * _2133) : (2.0 - exp2(_2151 * _2133))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2143;
        }
        else
        {
            float _2295 = 1.0 / cbSceneParam._m0[80u].x;
            float _2296 = isnan(_2134) ? _2133 : (isnan(_2133) ? _2134 : max(_2133, _2134));
            float _2297 = isnan(_2134) ? _2133 : (isnan(_2133) ? _2134 : min(_2133, _2134));
            float _2306 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : min(_2296, 0.0));
            float _2307 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : min(_2297, 0.0));
            _2360 = ((abs(_2140 / _2129) * cbSceneParam._m0[80u].y) * ((((_2306 - _2307) * 2.0) - ((exp2(_2149 * (isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0)))) - exp2(_2149 * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))))) * _2295)) - ((exp2(_2151 * _2306) - exp2(_2151 * _2307)) * _2295))) + (_2143 * cbSceneParam._m0[80u].z);
        }
        vec4 _2362 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2053, _2054, 1.0), 0.0);
        float _2371 = exp2((_2360 * (-1.44269502162933349609375)) * (1.0 - _2362.w));
        float _2372 = log2(_2371);
        float _2388 = log2(_2073);
        _2153 = (exp2(_2388 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2372 * cbSceneParam._m0[78u].x)) * _2362.x) / cbSceneParam._m0[78u].x)) + _2070;
        _2155 = (exp2(_2388 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2372 * cbSceneParam._m0[78u].y)) * _2362.y) / cbSceneParam._m0[78u].y)) + _2071;
        _2157 = (exp2(_2388 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2372 * cbSceneParam._m0[78u].z)) * _2362.z) / cbSceneParam._m0[78u].z)) + _2072;
        _2159 = _2371 * _2073;
    }
    else
    {
        _2153 = _2070;
        _2155 = _2071;
        _2157 = _2072;
        _2159 = _2073;
    }
    float _2171 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2172 = _2171 == 3.0;
    float _2173 = log2(_2159);
    float _2180 = exp2(_2173 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)));
    float _2181 = exp2(_2173 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    float _2182 = exp2(_2173 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)));
    float _2191 = (_2171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2191 * (_2172 ? _2180 : (_2180 + (cbSceneParam._m0[72u].w * _2153)));
    SV_Target.y = _2191 * (_2172 ? _2181 : (_2181 + (cbSceneParam._m0[72u].w * _2155)));
    SV_Target.z = _2191 * (_2172 ? _2182 : (_2182 + (cbSceneParam._m0[72u].w * _2157)));
    SV_Target.w = cbInstanceData._m0[_2045].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2045].w;
}


