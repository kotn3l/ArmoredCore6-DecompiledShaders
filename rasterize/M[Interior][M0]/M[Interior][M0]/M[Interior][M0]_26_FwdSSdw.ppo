#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1262;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _393 = (_389 * _383) + (_357 * cbMtdParam._m0[20u].y);
    float _394 = (_389 * _384) + (_358 * cbMtdParam._m0[20u].z);
    float _395 = _393 * cbMtdParam._m0[19u].x;
    float _396 = _394 * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    bool _414 = _392 > 0.0;
    float _416 = _414 ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = _397 + (-0.5);
    float _426 = _398 + (-0.5);
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_423 + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_426 + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _470 = (_456 - (_456 * _290)) * cbMtdParam._m0[9u].x;
    float _471 = (_457 - (_457 * _290)) * cbMtdParam._m0[9u].y;
    float _472 = cbMtdParam._m0[9u].z * (_458 - (_458 * _290));
    float _490 = _393 * cbMtdParam._m0[21u].x;
    float _491 = _394 * cbMtdParam._m0[20u].w;
    bool _492 = _490 > 0.0;
    float _497;
    if (_492)
    {
        _497 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _497 = frontier_phi_11_10_ladder;
    }
    bool _499 = _491 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _504 = frontier_phi_15_14_ladder;
    }
    float _507 = _414 ? (cbMtdParam._m0[16u].z / _392) : 5000.0;
    float _508 = isnan(_504) ? _497 : (isnan(_497) ? _504 : min(_497, _504));
    float _509 = isnan(_507) ? _508 : (isnan(_508) ? _507 : min(_508, _507));
    float _513 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _517 = ((_509 * _392) + _513) / _513;
    float _522 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _524 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _540 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_509 * _490)) / _517) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_509 * _491)) / _517) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _545 = _540.x * cbMtdParam._m0[10u].x;
    float _546 = _540.y * cbMtdParam._m0[10u].y;
    float _547 = _540.z * cbMtdParam._m0[10u].z;
    float _555;
    if (_492)
    {
        _555 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _555 = frontier_phi_19_18_ladder;
    }
    float _561;
    if (_499)
    {
        _561 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _561 = frontier_phi_23_22_ladder;
    }
    float _563 = isnan(_561) ? _555 : (isnan(_555) ? _561 : min(_555, _561));
    float _564 = isnan(_507) ? _563 : (isnan(_563) ? _507 : min(_563, _507));
    float _571 = ((_564 * _392) + _513) / _513;
    vec4 _585 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_564 * _490)) / _571) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_564 * _491)) / _571) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _587 = _585.w;
    float _589 = _587 - (_587 * _290);
    float _599 = (_589 * ((_545 - _470) - (_545 * _290))) + _470;
    float _600 = (_589 * ((_546 - _471) - (_546 * _290))) + _471;
    float _601 = (_589 * ((_547 - _472) - (_547 * _290))) + _472;
    float _615 = _393 * cbMtdParam._m0[21u].z;
    float _616 = _394 * cbMtdParam._m0[21u].y;
    bool _617 = _615 > 0.0;
    float _622;
    if (_617)
    {
        _622 = (1.0 - _397) / _615;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_615 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _397) / _615;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _622 = frontier_phi_27_26_ladder;
    }
    bool _624 = _616 > 0.0;
    float _629;
    if (_624)
    {
        _629 = (1.0 - _398) / _616;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_616 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _398) / _616;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _629 = frontier_phi_31_30_ladder;
    }
    float _632 = _414 ? (cbMtdParam._m0[18u].x / _392) : 5000.0;
    float _633 = isnan(_629) ? _622 : (isnan(_622) ? _629 : min(_622, _629));
    float _634 = isnan(_632) ? _633 : (isnan(_633) ? _632 : min(_633, _632));
    float _638 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _642 = ((_634 * _392) + _638) / _638;
    float _647 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _649 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _666 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_423 + (_634 * _615)) / _642) + 0.5) + _647) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_426 + (_634 * _616)) / _642) + 0.5) + _649) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _671 = _666.x * cbMtdParam._m0[14u].x;
    float _672 = _666.y * cbMtdParam._m0[14u].y;
    float _673 = _666.z * cbMtdParam._m0[14u].z;
    float _681;
    if (_617)
    {
        _681 = (1.0 - _397) / _615;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_615 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _397) / _615;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _681 = frontier_phi_35_34_ladder;
    }
    float _687;
    if (_624)
    {
        _687 = (1.0 - _398) / _616;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_616 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _398) / _616;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _687 = frontier_phi_39_38_ladder;
    }
    float _689 = isnan(_687) ? _681 : (isnan(_681) ? _687 : min(_681, _687));
    float _690 = isnan(_632) ? _689 : (isnan(_689) ? _632 : min(_689, _632));
    float _697 = ((_690 * _392) + _638) / _638;
    vec4 _711 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_423 + (_690 * _615)) / _697) + 0.5) + _647) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_426 + (_690 * _616)) / _697) + 0.5) + _649) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _713 = _711.w;
    float _715 = _713 - (_713 * _290);
    float _726 = 0.5 - (_290 * 0.5);
    float _736 = (((_599 - _303) + (_715 * ((_671 - _599) - (_671 * _290)))) * _726) + _303;
    float _737 = (((_600 - _305) + (_715 * ((_672 - _600) - (_672 * _290)))) * _726) + _305;
    float _738 = (((_601 - _307) + (_715 * ((_673 - _601) - (_673 * _290)))) * _726) + _307;
    vec4 _750 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _754 = _750.z;
    float _757 = (_750.x * 2.0) + (-1.0);
    float _758 = (_750.y * 2.0) + (-1.0);
    float _759 = dot(vec2(_757, _758), vec2(_757, _758));
    float _3440 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _764 = sqrt(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))));
    float _765 = _754 * _290;
    float _772 = (cbMtdParam._m0[15u].w * ((_329 - _765) + ((_754 - _329) * _290))) + _765;
    float _776 = (cbMtdParam._m0[16u].x * _357) + _757;
    float _777 = (cbMtdParam._m0[16u].x * _358) + _758;
    float _780 = fma(_764, _199, fma(_777, _206, _776 * _192));
    float _783 = fma(_764, _200, fma(_777, _207, _776 * _193));
    float _786 = fma(_764, _201, fma(_777, _208, _776 * _194));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3451 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _794 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _3473 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3484 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _813 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _818 = _263 * _817;
    float _819 = _264 * _817;
    float _820 = _265 * _817;
    float _826 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _827 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _846 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _849 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _852 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _865 = uint(roundEven(NORMAL.w)) * 13u;
    uint _868 = (_865 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _874 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_868].x;
    float _875 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_868].y;
    float _876 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_868].z;
    float _3495 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _826, cbSceneParam._m0[86u].y * _827));
    float _891 = _888.x * TEXCOORD.z;
    float _892 = dot(vec3(_791, _792, _793), vec3(_818, _819, _820));
    float _895 = _892 * 2.0;
    float _899 = (_895 * _791) - _818;
    float _900 = (_895 * _792) - _819;
    float _901 = (_895 * _793) - _820;
    float _905 = abs(dot(vec3(_818, _819, _820), vec3(_791, _792, _793)));
    float _3528 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _907 = sqrt(_794);
    float _920 = exp2((_907 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_907 * 3.0));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_960, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952));
        float _992 = fma(_960, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952));
        float _996 = fma(_960, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952));
        float _1019 = _952 + _791;
        float _1020 = _956 + _792;
        float _1021 = _960 + _793;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _988;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _992;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _996;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_791, _792, _793), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3576 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_791, _792, _793), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3609 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_791, _792, _793), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3642 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_960, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952));
        float _1306 = fma(_960, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952));
        float _1310 = fma(_960, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952));
        float _1333 = _952 + _791;
        float _1334 = _956 + _792;
        float _1335 = _960 + _793;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_791, _792, _793), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3705 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_791, _792, _793), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3738 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_791, _792, _793), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _3771 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1262;
        _1572 = _1262;
        _1573 = _1262;
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = _1262;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1274)) + _1274;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1275)) + _1275;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1276)) + _1276;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _899 * 0.5;
    float _1640 = _900 * 0.5;
    float _1641 = _901 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_960, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_960, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_960, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_901, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899));
        float _1769 = fma(_901, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899));
        float _1772 = fma(_901, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1800 = frontier_phi_54_52_ladder;
        }
        float _2169;
        if (_1769 > 0.0)
        {
            _2169 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2169 = frontier_phi_63_59_ladder;
        }
        float _2469;
        if (_1772 > 0.0)
        {
            _2469 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2469 = frontier_phi_77_70_ladder;
        }
        float _2471 = isnan(_2169) ? _1800 : (isnan(_1800) ? _2169 : min(_1800, _2169));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1766) + _1755;
        float _2477 = (_2472 * _1769) + _1759;
        float _2478 = (_2472 * _1772) + _1763;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2479;
        float _2482 = _2479 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2478 > _2482) || ((_2478 < _2480) || ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 < _2480) || (_2476 > _2482))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_53_77_ladder = _2604.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2604.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2604.z * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_53_77_ladder;
        _1790 = frontier_phi_53_77_ladder_1;
        _1792 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_899, _900, _901), _1708);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1849 = fma(_960, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952)) + cbModelParam._m0[21u].w;
        float _1853 = fma(_960, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952)) + cbModelParam._m0[22u].w;
        float _1857 = fma(_960, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952)) + cbModelParam._m0[23u].w;
        float _1860 = fma(_901, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899));
        float _1863 = fma(_901, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899));
        float _1866 = fma(_901, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899));
        float _2174;
        if (_1860 > 0.0)
        {
            _2174 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2174 = frontier_phi_65_61_ladder;
        }
        float _2495;
        if (_1863 > 0.0)
        {
            _2495 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2495 = frontier_phi_79_72_ladder;
        }
        float _2664;
        if (_1866 > 0.0)
        {
            _2664 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2664 = frontier_phi_93_88_ladder;
        }
        float _2666 = isnan(_2495) ? _2174 : (isnan(_2174) ? _2495 : min(_2174, _2495));
        float _2667 = isnan(_2664) ? _2666 : (isnan(_2666) ? _2664 : min(_2666, _2664));
        float _2671 = (_2667 * _1860) + _1849;
        float _2672 = (_2667 * _1863) + _1853;
        float _2673 = (_2667 * _1866) + _1857;
        float _2674 = _2667 * 9.9999997473787516355514526367188e-05;
        float _2675 = (-1.0) - _2674;
        float _2677 = _2674 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2673 > _2677) || ((_2673 < _2675) || ((_2672 > _2677) || ((_2672 < _2675) || ((_2671 < _2675) || (_2671 > _2677))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2673, cbModelParam._m0[17u].z, fma(_2672, cbModelParam._m0[17u].y, _2671 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2673, cbModelParam._m0[18u].z, fma(_2672, cbModelParam._m0[18u].y, _2671 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2673, cbModelParam._m0[19u].z, fma(_2672, cbModelParam._m0[19u].y, _2671 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_62_93_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _1885 = frontier_phi_62_93_ladder_2;
        _1887 = frontier_phi_62_93_ladder_1;
        _1889 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_899, _900, _901), _1797);
        _1885 = _1869.x * cbModelParam._m0[1u].z;
        _1887 = _1869.y * cbModelParam._m0[1u].z;
        _1889 = _1869.z * cbModelParam._m0[1u].z;
    }
    float _1901 = ((((1.0 - _920) * ((_907 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_920 * _907)) * _891;
    float _1902 = _1901 * ((cbModelParam._m0[1u].w * (_1885 - _1788)) + _1788);
    float _1903 = _1901 * ((cbModelParam._m0[1u].w * (_1887 - _1790)) + _1790);
    float _1904 = _1901 * ((cbModelParam._m0[1u].w * (_1889 - _1792)) + _1792);
    float _1907 = fma(_1904, cbSceneParam._m0[89u].z, fma(_1903, cbSceneParam._m0[89u].y, _1902 * cbSceneParam._m0[89u].x));
    float _1910 = fma(_1904, cbSceneParam._m0[90u].z, fma(_1903, cbSceneParam._m0[90u].y, _1902 * cbSceneParam._m0[90u].x));
    float _1913 = fma(_1904, cbSceneParam._m0[91u].z, fma(_1903, cbSceneParam._m0[91u].y, _1902 * cbSceneParam._m0[91u].x));
    vec4 _1921 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_826, _827));
    float _1923 = _1921.w;
    float _1935 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1923);
    float _1936 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1923);
    float _1937 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1923);
    uvec4 _1941 = floatBitsToUint(cbInstanceData._m0[_865 + 5u]);
    uint _1943 = _1941.x * 14u;
    uint _1944 = _1943 + 13u;
    float _1949 = _891 + (-1.0);
    float _1952 = (cbLight._m0[_1944].x * _1949) + 1.0;
    float _1953 = (cbLight._m0[_1944].y * _1949) + 1.0;
    uint _1954 = _1943 + 5u;
    float _1960 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1964 = _1943 + 4u;
    float _1973 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1977 = _1943 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_791, _792, _793));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_791, _792, _793));
    float _3907 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _3918 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1954].x * _1960) * _1998) + (((cbLight._m0[_1964].x * _1935) * _1973) * _1996);
    float _2006 = ((_1960 * cbLight._m0[_1954].y) * _1998) + (((cbLight._m0[_1964].y * _1936) * _1973) * _1996);
    float _2007 = ((_1960 * cbLight._m0[_1954].z) * _1998) + (((cbLight._m0[_1964].z * _1937) * _1973) * _1996);
    uint _2009 = _1943 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _794) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1943].x + _818;
    float _2025 = cbLight._m0[_1943].y + _819;
    float _2026 = cbLight._m0[_1943].z + _820;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_1943].xyz));
    float _3929 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _2038 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _2039 = dot(vec3(_791, _792, _793), vec3(_2031, _2032, _2033));
    float _3951 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2031, _2032, _2033));
    float _3962 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2023;
    float _2074 = (0.5 / (((_2038 * ((_2037 * _2063) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2063) + _2023) * _2037))) * _2037;
    float _3973 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2090 = _1943 + 9u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _794) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_1977].x + _818;
    float _2104 = cbLight._m0[_1977].y + _819;
    float _2105 = cbLight._m0[_1977].z + _820;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_1977].xyz));
    float _3984 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _2117 = dot(vec3(_791, _792, _793), vec3(_2110, _2111, _2112));
    float _3995 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _2121 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2110, _2111, _2112));
    float _4006 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = _2102 * _2102;
    float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2102;
    float _2149 = (0.5 / (((_2038 * ((_2116 * _2139) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2139) + _2102) * _2116))) * _2116;
    float _4017 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
    float _2161 = (((_2138 * cbLight._m0[_2090].x) * _2151) * _1960) + ((((cbLight._m0[_2009].x * _1935) * _2062) * _2076) * _1973);
    float _2162 = (((_2138 * cbLight._m0[_2090].y) * _2151) * _1960) + ((((cbLight._m0[_2009].y * _1936) * _2062) * _2076) * _1973);
    float _2163 = (((_2138 * cbLight._m0[_2090].z) * _2151) * _1960) + ((((cbLight._m0[_2009].z * _1937) * _2062) * _2076) * _1973);
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    if (_1941.y == 0u)
    {
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2218;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2218;
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2218;
        uvec4 _2233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2234 = _2233.x;
        uint _2245 = uint((float(_2233.y) * floor(float(uint(cbSceneParam._m0[85u].y * _827) / _2234))) + floor(float(uint(cbSceneParam._m0[85u].x * _826) / _2234)));
        float _2255 = (log2(_2221 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2256 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        uint _2259 = uint(isnan(14.0) ? _2256 : (isnan(_2256) ? 14.0 : min(_2256, 14.0)));
        uvec4 _2264 = texelFetch(g_lightClusterGridBuffer, int(((_2259 << 2u) + (_2245 << 6u)) >> 2u));
        uint _2265 = _2264.x;
        uint _2266 = _2233.z;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((((1u << ((_2266 >> 4u) & 15u)) + 4294967295u) & _2265) == 0u) || ((_2266 & 240u) == 0u))
        {
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
        }
        else
        {
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            uint _2538 = 0u;
            uint _2547;
            bool _2548;
            for (;;)
            {
                _2547 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2538 << 2u)) >> 2u)).x;
                _2548 = _2547 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2548)
                {
                    frontier_phi_90_pred = _2537;
                    frontier_phi_90_pred_1 = _2532;
                    frontier_phi_90_pred_2 = _2533;
                    frontier_phi_90_pred_3 = _2534;
                    frontier_phi_90_pred_4 = _2535;
                    frontier_phi_90_pred_5 = _2536;
                }
                else
                {
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    uint _2713;
                    _2707 = _2532;
                    _2708 = _2533;
                    _2709 = _2534;
                    _2710 = _2535;
                    _2711 = _2536;
                    _2712 = _2537;
                    _2713 = _2547;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    for (;;)
                    {
                        uint _2717 = uint(findLSB(_2713)) + (_2538 << 5u);
                        uint _2714 = (_2713 + 4294967295u) & _2713;
                        uint _2719 = _2717 * 48u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2739 = (_2717 * 48u) + 4u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2758 = (_2717 * 48u) + 8u;
                        vec3 _2769 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x));
                        float _2773 = _2733.x - _2219;
                        float _2774 = _2733.y - _2220;
                        float _2775 = _2733.z - _2221;
                        float _2776 = dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775));
                        float _2779 = inversesqrt(_2776);
                        float _2780 = _2779 * _2773;
                        float _2781 = _2779 * _2774;
                        float _2782 = _2779 * _2775;
                        float _2783 = dot(vec3(_846, _849, _852), vec3(_2780, _2781, _2782));
                        float _2788 = 1.0 - (_2776 * _2733.w);
                        float _4038 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2789 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2790 = sqrt(_2776) * _2752.w;
                        float _2793 = 1.39999997615814208984375 / (_2790 + 1.39999997615814208984375);
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2783) + _2794;
                        float _2800 = _2790 * _2790;
                        float _2804 = ((isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))) * _2789) / ((_2800 * 0.699999988079071044921875) + 1.0);
                        float _2808 = (-0.0) - _2219;
                        float _2809 = (-0.0) - _2220;
                        float _2810 = (-0.0) - _2221;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2825 = exp2(log2(1.0 / ((_2800 * 3.5) + 5.0)) * 0.25);
                        float _2826 = 1.0 - _907;
                        float _2833 = sqrt(1.0 - ((1.0 - (_2826 * _2826)) * (1.0 - (_2825 * _2825))));
                        float _2834 = _2833 * _2833;
                        float _2835 = _2834 * _2834;
                        float _2836 = _2815 + _2780;
                        float _2837 = _2816 + _2781;
                        float _2838 = _2817 + _2782;
                        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
                        float _2846 = dot(vec3(_846, _849, _852), vec3(_2815, _2816, _2817));
                        float _4054 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2849 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2850 = dot(vec3(_846, _849, _852), vec3(_2842 * _2836, _2842 * _2837, _2842 * _2838));
                        float _4065 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2857 = ((_2853 * _2853) * (_2835 + (-1.0))) + 1.0;
                        float _2858 = _2793 * _2834;
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2783) + _2859;
                        float _4076 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2864 = 1.0 - _2834;
                        float _2874 = (0.5 / (((_2863 * ((_2849 * _2864) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2863 * _2864) + _2834) * _2849))) * _2863;
                        float _4087 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2885 = (((_2835 * 3.1415927410125732421875) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) / ((_2857 * _2857) * ((_2800 * 2.1991131305694580078125) + 3.141590118408203125))) * _2789;
                        _2616 = (_2804 * _2752.x) + _2710;
                        _2617 = (_2804 * _2752.y) + _2711;
                        _2618 = (_2804 * _2752.z) + _2712;
                        _2613 = (_2885 * _2769.x) + _2707;
                        _2614 = (_2885 * _2769.y) + _2708;
                        _2615 = (_2885 * _2769.z) + _2709;
                        if (_2714 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2707 = _2613;
                            _2708 = _2614;
                            _2709 = _2615;
                            _2710 = _2616;
                            _2711 = _2617;
                            _2712 = _2618;
                            _2713 = _2714;
                        }
                    }
                    frontier_phi_90_pred = _2618;
                    frontier_phi_90_pred_1 = _2613;
                    frontier_phi_90_pred_2 = _2614;
                    frontier_phi_90_pred_3 = _2615;
                    frontier_phi_90_pred_4 = _2616;
                    frontier_phi_90_pred_5 = _2617;
                }
                _2367 = frontier_phi_90_pred;
                _2357 = frontier_phi_90_pred_1;
                _2359 = frontier_phi_90_pred_2;
                _2361 = frontier_phi_90_pred_3;
                _2363 = frontier_phi_90_pred_4;
                _2365 = frontier_phi_90_pred_5;
                uint _2539 = _2538 + 1u;
                if (_2539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2532 = _2357;
                    _2533 = _2359;
                    _2534 = _2361;
                    _2535 = _2363;
                    _2536 = _2365;
                    _2537 = _2367;
                    _2538 = _2539;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
        }
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.z;
        uint _2373 = (_2371 >> 8u) & 15u;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((4294967295u << _2373) & _2265) == 0u)
        {
            _2500 = _2356;
            _2502 = _2358;
            _2504 = _2360;
            _2506 = _2362;
            _2508 = _2364;
            _2510 = _2366;
        }
        else
        {
            float _2525 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
            float _2526 = _2525 * _2219;
            float _2527 = _2525 * _2220;
            float _2528 = _2525 * _2221;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2373 < ((_2371 >> 12u) & 15u))
            {
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2690 = _2356;
                float _2691 = _2358;
                float _2692 = _2360;
                float _2693 = _2362;
                float _2694 = _2364;
                float _2695 = _2366;
                uint _2696 = _2373;
                uint _2705;
                bool _2706;
                for (;;)
                {
                    _2705 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                    _2706 = _2705 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2706)
                    {
                        frontier_phi_99_pred = _2693;
                        frontier_phi_99_pred_1 = _2692;
                        frontier_phi_99_pred_2 = _2691;
                        frontier_phi_99_pred_3 = _2690;
                        frontier_phi_99_pred_4 = _2695;
                        frontier_phi_99_pred_5 = _2694;
                    }
                    else
                    {
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _2924 = _2690;
                        float _2925 = _2691;
                        float _2926 = _2692;
                        float _2927 = _2693;
                        float _2928 = _2694;
                        float _2929 = _2695;
                        uint _2930 = _2705;
                        uint _2931;
                        vec4 _2956;
                        float _2957;
                        vec4 _2972;
                        vec3 _2984;
                        vec4 _2999;
                        vec4 _3014;
                        float _3060;
                        bool _3061;
                        for (;;)
                        {
                            uint _2941 = ((_2696 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2930));
                            _2931 = (_2930 + 4294967295u) & _2930;
                            uint _2943 = _2941 * 40u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2957 = _2956.w;
                            uint _2959 = (_2941 * 40u) + 4u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2974 = (_2941 * 40u) + 8u;
                            _2984 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x));
                            uint _2986 = (_2941 * 40u) + 16u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2941 * 40u) + 20u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2941 * 40u) + 24u;
                            vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3035 = (_2941 * 40u) + 28u;
                            vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            _3060 = fma(_2221, _3048.z, fma(_2220, _3048.y, _3048.x * _2219)) + _3048.w;
                            _3061 = !((fma(_2221, _3029.z, fma(_2220, _3029.y, _3029.x * _2219)) + _3029.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3061)
                            {
                                float _3088 = _2956.x - _2219;
                                float _3089 = _2956.y - _2220;
                                float _3090 = _2956.z - _2221;
                                float _3091 = dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090));
                                float _3094 = inversesqrt(_3091);
                                float _3095 = _3094 * _3088;
                                float _3096 = _3094 * _3089;
                                float _3097 = _3094 * _3090;
                                float _3101 = 1.0 - (_3091 / (_2957 * _2957));
                                float _4098 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3106 = sqrt(_3091) * _2972.w;
                                float _3108 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                                float _3109 = _3108 * _3108;
                                float _3112 = ((1.0 - _3109) * dot(vec3(_3095, _3096, _3097), vec3(_846, _849, _852))) + _3109;
                                float _3115 = _3106 * _3106;
                                float _3119 = (fma(_2221, _2999.z, fma(_2220, _2999.y, _2999.x * _2219)) + _2999.w) / _3060;
                                float _3120 = (fma(_2221, _3014.z, fma(_2220, _3014.y, _3014.x * _2219)) + _3014.w) / _3060;
                                float _3124 = 1.0 - dot(vec2(_3119, _3120), vec2(_3119, _3120));
                                float _4114 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3126 = _3125 * (((isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))) * _3102) / ((_3115 * 0.699999988079071044921875) + 1.0));
                                float _3138 = exp2(log2(1.0 / ((_3115 * 3.5) + 5.0)) * 0.25);
                                float _3139 = 1.0 - _907;
                                float _3146 = sqrt(1.0 - ((1.0 - (_3139 * _3139)) * (1.0 - (_3138 * _3138))));
                                float _3147 = _3146 * _3146;
                                float _3148 = _3147 * _3147;
                                float _3149 = _3095 - _2526;
                                float _3150 = _3096 - _2527;
                                float _3151 = _3097 - _2528;
                                float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                                float _3159 = dot(vec3(_846, _849, _852), vec3((-0.0) - _2526, (-0.0) - _2527, (-0.0) - _2528));
                                float _4125 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3163 = dot(vec3(_846, _849, _852), vec3(_3155 * _3149, _3155 * _3150, _3155 * _3151));
                                float _4136 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3166 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3170 = ((_3166 * _3166) * (_3148 + (-1.0))) + 1.0;
                                float _3171 = _3108 * _3147;
                                float _3172 = _3171 * _3171;
                                float _3178 = ((1.0 - _3172) * dot(vec3(_846, _849, _852), vec3(_3095, _3096, _3097))) + _3172;
                                float _4147 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3180 = 1.0 - _3147;
                                float _3190 = (0.5 / (((_3179 * ((_3162 * _3180) + _3147)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3147) * _3162))) * _3179;
                                float _4158 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3200 = (_3125 * _3102) * (((_3148 * 3.1415927410125732421875) * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) / ((_3170 * _3170) * ((_3115 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3126 * _2972.z;
                                frontier_phi_105_pred_1 = _3200 * _2984.x;
                                frontier_phi_105_pred_2 = _3200 * _2984.y;
                                frontier_phi_105_pred_3 = _3200 * _2984.z;
                                frontier_phi_105_pred_4 = _3126 * _2972.x;
                                frontier_phi_105_pred_5 = _3126 * _2972.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3209 = frontier_phi_105_pred;
                            _3204 = frontier_phi_105_pred_1;
                            _3205 = frontier_phi_105_pred_2;
                            _3206 = frontier_phi_105_pred_3;
                            _3207 = frontier_phi_105_pred_4;
                            _3208 = frontier_phi_105_pred_5;
                            _2914 = _3207 + _2927;
                            _2915 = _3208 + _2928;
                            _2916 = _3209 + _2929;
                            _2911 = _3204 + _2924;
                            _2912 = _3205 + _2925;
                            _2913 = _3206 + _2926;
                            if (_2931 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2931;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2914;
                        frontier_phi_99_pred_1 = _2913;
                        frontier_phi_99_pred_2 = _2912;
                        frontier_phi_99_pred_3 = _2911;
                        frontier_phi_99_pred_4 = _2916;
                        frontier_phi_99_pred_5 = _2915;
                    }
                    _2507 = frontier_phi_99_pred;
                    _2505 = frontier_phi_99_pred_1;
                    _2503 = frontier_phi_99_pred_2;
                    _2501 = frontier_phi_99_pred_3;
                    _2511 = frontier_phi_99_pred_4;
                    _2509 = frontier_phi_99_pred_5;
                    uint _2697 = _2696 + 1u;
                    if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2690 = _2501;
                        _2691 = _2503;
                        _2692 = _2505;
                        _2693 = _2507;
                        _2694 = _2509;
                        _2695 = _2511;
                        _2696 = _2697;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2511;
                frontier_phi_81_82_ladder_1 = _2507;
                frontier_phi_81_82_ladder_2 = _2505;
                frontier_phi_81_82_ladder_3 = _2503;
                frontier_phi_81_82_ladder_4 = _2501;
                frontier_phi_81_82_ladder_5 = _2509;
            }
            else
            {
                frontier_phi_81_82_ladder = _2366;
                frontier_phi_81_82_ladder_1 = _2362;
                frontier_phi_81_82_ladder_2 = _2360;
                frontier_phi_81_82_ladder_3 = _2358;
                frontier_phi_81_82_ladder_4 = _2356;
                frontier_phi_81_82_ladder_5 = _2364;
            }
            _2500 = frontier_phi_81_82_ladder_4;
            _2502 = frontier_phi_81_82_ladder_3;
            _2504 = frontier_phi_81_82_ladder_2;
            _2506 = frontier_phi_81_82_ladder_1;
            _2508 = frontier_phi_81_82_ladder_5;
            _2510 = frontier_phi_81_82_ladder;
        }
        float _2515 = isnan(1.0) ? _891 : (isnan(_891) ? 1.0 : min(_891, 1.0));
        _2278 = (_2515 * _2506) + _2005;
        _2280 = (_2515 * _2508) + _2006;
        _2282 = (_2515 * _2510) + _2007;
        _2284 = ((_2500 * 0.039999999105930328369140625) * _2515) + _2161;
        _2286 = ((_2502 * 0.039999999105930328369140625) * _2515) + _2162;
        _2288 = ((_2504 * 0.039999999105930328369140625) * _2515) + _2163;
    }
    else
    {
        _2278 = _2005;
        _2280 = _2006;
        _2282 = _2007;
        _2284 = _2161;
        _2286 = _2162;
        _2288 = _2163;
    }
    float _4174 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4185 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4196 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2305 = ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2278 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _891))) + ((_2284 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    float _2306 = ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2280 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _891))) + ((_2286 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    float _2307 = ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2282 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _891))) + ((_2288 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    uint _2311 = _865 + 6u;
    float _2319 = _826 / cbSceneParam._m0[86u].x;
    float _2320 = _827 / cbSceneParam._m0[86u].y;
    vec4 _2334 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2319, _2320, (log2((isnan(cbSceneParam._m0[77u].w) ? _813 : (isnan(_813) ? cbSceneParam._m0[77u].w : min(_813, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2336 = _2334.x;
    float _2337 = _2334.y;
    float _2338 = _2334.z;
    float _2339 = _2334.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_813 > cbSceneParam._m0[78u].w)
    {
        float _2381 = isnan(_813) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _813 : min(cbSceneParam._m0[80u].w, _813));
        float _2382 = _2381 / _813;
        float _2393 = _2382 * _263;
        float _2394 = _264 * _2382;
        float _2395 = (-0.0) - _2394;
        float _2396 = _2382 * _265;
        float _2398 = (cbSceneParam._m0[77u].w * _2395) / _2381;
        float _2399 = _2398 + cbSceneParam._m0[79u].w;
        float _2400 = cbSceneParam._m0[79u].w - _2394;
        float _2406 = sqrt(((_2393 * _2393) + (_2394 * _2394)) + (_2396 * _2396));
        float _2409 = (1.0 - (cbSceneParam._m0[77u].w / _2381)) * _2406;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2626;
        if (abs((_2395 - _2398) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2626 = ((((_2399 > 0.0) ? exp2(_2415 * _2399) : (2.0 - exp2(_2417 * _2399))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2409;
        }
        else
        {
            float _2561 = 1.0 / cbSceneParam._m0[80u].x;
            float _2562 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : max(_2399, _2400));
            float _2563 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : min(_2399, _2400));
            float _2572 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : min(_2562, 0.0));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            _2626 = ((abs(_2406 / _2395) * cbSceneParam._m0[80u].y) * ((((_2572 - _2573) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))))) * _2561)) - ((exp2(_2417 * _2572) - exp2(_2417 * _2573)) * _2561))) + (_2409 * cbSceneParam._m0[80u].z);
        }
        vec4 _2628 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2319, _2320, 1.0), 0.0);
        float _2637 = exp2((_2626 * (-1.44269502162933349609375)) * (1.0 - _2628.w));
        float _2638 = log2(_2637);
        float _2654 = log2(_2339);
        _2419 = (exp2(_2654 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].x)) * _2628.x) / cbSceneParam._m0[78u].x)) + _2336;
        _2421 = (exp2(_2654 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].y)) * _2628.y) / cbSceneParam._m0[78u].y)) + _2337;
        _2423 = (exp2(_2654 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].z)) * _2628.z) / cbSceneParam._m0[78u].z)) + _2338;
        _2425 = _2637 * _2339;
    }
    else
    {
        _2419 = _2336;
        _2421 = _2337;
        _2423 = _2338;
        _2425 = _2339;
    }
    float _2437 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2438 = _2437 == 3.0;
    float _2439 = log2(_2425);
    float _2446 = exp2(_2439 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0)));
    float _2447 = exp2(_2439 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)));
    float _2448 = exp2(_2439 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0)));
    float _2457 = (_2437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2457 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.y = _2457 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.z = _2457 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.w = cbInstanceData._m0[_2311].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2311].w;
}


