#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1082;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    bool _374 = _352 > 0.0;
    float _376 = _374 ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _383 = _357 + (-0.5);
    float _386 = _358 + (-0.5);
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_383 + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_386 + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _430 = (_416 - (_416 * _286)) * cbMtdParam._m0[9u].x;
    float _431 = (_417 - (_417 * _286)) * cbMtdParam._m0[9u].y;
    float _432 = cbMtdParam._m0[9u].z * (_418 - (_418 * _286));
    float _454 = (cbMtdParam._m0[21u].x * _345) * _351;
    float _456 = (cbMtdParam._m0[20u].w * _346) * _351;
    bool _457 = _454 > 0.0;
    float _462;
    if (_457)
    {
        _462 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _462 = frontier_phi_11_10_ladder;
    }
    bool _464 = _456 > 0.0;
    float _469;
    if (_464)
    {
        _469 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _469 = frontier_phi_15_14_ladder;
    }
    float _472 = _374 ? (cbMtdParam._m0[16u].z / _352) : 5000.0;
    float _473 = isnan(_469) ? _462 : (isnan(_462) ? _469 : min(_462, _469));
    float _474 = isnan(_472) ? _473 : (isnan(_473) ? _472 : min(_473, _472));
    float _478 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _482 = ((_474 * _352) + _478) / _478;
    float _487 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _489 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _505 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_474 * _454)) / _482) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_474 * _456)) / _482) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _510 = _505.x * cbMtdParam._m0[10u].x;
    float _511 = _505.y * cbMtdParam._m0[10u].y;
    float _512 = _505.z * cbMtdParam._m0[10u].z;
    float _520;
    if (_457)
    {
        _520 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_464)
    {
        _526 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_472) ? _528 : (isnan(_528) ? _472 : min(_528, _472));
    float _536 = ((_529 * _352) + _478) / _478;
    vec4 _550 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_529 * _454)) / _536) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_529 * _456)) / _536) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _552 = _550.w;
    float _554 = _552 - (_552 * _286);
    vec4 _578 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _586 = (_578.x * 2.0) + (-1.0);
    float _588 = (_578.y * 2.0) + (-1.0);
    float _589 = dot(vec2(_586, _588), vec2(_586, _588));
    float _3233 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _594 = sqrt(1.0 - (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))));
    float _595 = _578.z * _286;
    float _598 = fma(_594, _195, fma(_588, _202, _586 * _188));
    float _601 = fma(_594, _196, fma(_588, _203, _586 * _189));
    float _604 = fma(_594, _197, fma(_588, _204, _586 * _190));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    float _609 = _608 * _598;
    float _610 = _608 * _601;
    float _611 = _608 * _604;
    float _3244 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _612 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
    float _3255 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3266 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3277 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _631 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _636 = _259 * _635;
    float _637 = _260 * _635;
    float _638 = _261 * _635;
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _666 = fma(_611, cbSceneParam._m0[5u].z, fma(_610, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _609));
    float _669 = fma(_611, cbSceneParam._m0[6u].z, fma(_610, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _609));
    float _672 = fma(_611, cbSceneParam._m0[7u].z, fma(_610, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _609));
    uint _685 = uint(roundEven(NORMAL.w)) * 13u;
    uint _687 = _685 + 9u;
    uint _688 = _687 + uint(cbMatDynParam._m0[0u].w);
    float _694 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0)))) * cbInstanceData._m0[_688].x;
    float _695 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_688].y;
    float _696 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_688].z;
    float _3288 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _3299 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _711 = _708.x * TEXCOORD.z;
    float _712 = dot(vec3(_609, _610, _611), vec3(_636, _637, _638));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _609) - _636;
    float _720 = (_715 * _610) - _637;
    float _721 = (_715 * _611) - _638;
    float _725 = abs(dot(vec3(_636, _637, _638), vec3(_609, _610, _611)));
    float _3321 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = sqrt(_612);
    float _740 = exp2((_727 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_727 * 3.0));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772));
        float _812 = fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772));
        float _816 = fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772));
        float _839 = _772 + _609;
        float _840 = _776 + _610;
        float _841 = _780 + _611;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _808;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _812;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _816;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_609, _610, _611), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3369 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_609, _610, _611), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3402 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_609, _610, _611), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3435 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1122 = fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772));
        float _1126 = fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772));
        float _1130 = fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772));
        float _1153 = _772 + _609;
        float _1154 = _776 + _610;
        float _1155 = _780 + _611;
        float _1165 = fma(_1155, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153)) - _1122;
        float _1166 = fma(_1155, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153)) - _1126;
        float _1167 = fma(_1155, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153)) - _1130;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1122 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1126 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[35u].z) + ((((((_1130 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1221 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1188.x + (-0.5));
        float _1223 = _1221 * (_1188.y + (-0.5));
        float _1224 = _1221 * (_1188.z + (-0.5));
        float _1231 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1195.x + (-0.5));
        float _1233 = _1231 * (_1195.y + (-0.5));
        float _1234 = _1231 * (_1195.z + (-0.5));
        float _1241 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1202.x + (-0.5));
        float _1243 = _1241 * (_1202.y + (-0.5));
        float _1244 = _1241 * (_1202.z + (-0.5));
        float _1251 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1209.x + (-0.5));
        float _1253 = _1251 * (_1209.y + (-0.5));
        float _1254 = _1251 * (_1209.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_609, _610, _611), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3498 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1285 + 1.0))) + _1290) * _1255;
        float _1300 = _1223 * 0.5;
        float _1301 = _1233 * 0.5;
        float _1302 = _1243 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_609, _610, _611), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3531 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1327 + 1.0))) + _1332) * _1256;
        float _1342 = _1224 * 0.5;
        float _1343 = _1234 * 0.5;
        float _1344 = _1244 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_609, _610, _611), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3564 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1369 + 1.0))) + _1374) * _1257;
        _1391 = _1224;
        _1392 = _1223;
        _1393 = _1222;
        _1394 = _1234;
        _1395 = _1233;
        _1396 = _1232;
        _1397 = _1244;
        _1398 = _1243;
        _1399 = _1242;
        _1400 = _1257;
        _1401 = _1256;
        _1402 = _1255;
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1082;
        _1392 = _1082;
        _1393 = _1082;
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1094)) + _1094;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1095)) + _1095;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1096)) + _1096;
    float _1438 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1441 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1444 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1415));
    float _1459 = _719 * 0.5;
    float _1460 = _720 * 0.5;
    float _1461 = _721 * 0.5;
    float _1462 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1465 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1468 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1502;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1475 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1479 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1483 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1490 = dot(vec4(cbModelParam._m0[39u]), vec4(_1459, _1460, _1461, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1513;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1504 = dot(vec4(cbModelParam._m0[40u]), vec4(_1459, _1460, _1461, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1517 = (_1513 * cbModelParam._m0[1u].x) + (_1502 * (1.0 - cbModelParam._m0[1u].x));
    float _1527 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _612);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1527 : min(cbModelParam._m0[25u].z, _1527));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1576 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1580 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1584 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1587 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1590 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1593 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1621;
        if (_1587 > 0.0)
        {
            _1621 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1621 = frontier_phi_38_36_ladder;
        }
        float _1990;
        if (_1590 > 0.0)
        {
            _1990 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1990 = frontier_phi_47_43_ladder;
        }
        float _2306;
        if (_1593 > 0.0)
        {
            _2306 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2306 = frontier_phi_61_54_ladder;
        }
        float _2308 = isnan(_1990) ? _1621 : (isnan(_1621) ? _1990 : min(_1621, _1990));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1587) + _1576;
        float _2314 = (_2309 * _1590) + _1580;
        float _2315 = (_2309 * _1593) + _1584;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1528);
            frontier_phi_37_61_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1609 = frontier_phi_37_61_ladder_2;
        _1611 = frontier_phi_37_61_ladder_1;
        _1613 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1528);
        _1609 = _1597.x * cbModelParam._m0[1u].y;
        _1611 = _1597.y * cbModelParam._m0[1u].y;
        _1613 = _1597.z * cbModelParam._m0[1u].y;
    }
    float _1617 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _612);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1617 : min(cbModelParam._m0[25u].w, _1617));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1670 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1674 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1678 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1681 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1684 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1687 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1995;
        if (_1681 > 0.0)
        {
            _1995 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1995 = frontier_phi_49_45_ladder;
        }
        float _2332;
        if (_1684 > 0.0)
        {
            _2332 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2332 = frontier_phi_63_56_ladder;
        }
        float _2501;
        if (_1687 > 0.0)
        {
            _2501 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2501 = frontier_phi_77_72_ladder;
        }
        float _2503 = isnan(_2332) ? _1995 : (isnan(_1995) ? _2332 : min(_1995, _2332));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1681) + _1670;
        float _2509 = (_2504 * _1684) + _1674;
        float _2510 = (_2504 * _1687) + _1678;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1618);
            frontier_phi_46_77_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1706 = frontier_phi_46_77_ladder_2;
        _1708 = frontier_phi_46_77_ladder_1;
        _1710 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1618);
        _1706 = _1690.x * cbModelParam._m0[1u].z;
        _1708 = _1690.y * cbModelParam._m0[1u].z;
        _1710 = _1690.z * cbModelParam._m0[1u].z;
    }
    float _1722 = ((((1.0 - _740) * ((_727 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_740 * _727)) * _711;
    float _1723 = _1722 * ((cbModelParam._m0[1u].w * (_1706 - _1609)) + _1609);
    float _1724 = _1722 * ((cbModelParam._m0[1u].w * (_1708 - _1611)) + _1611);
    float _1725 = _1722 * ((cbModelParam._m0[1u].w * (_1710 - _1613)) + _1613);
    float _1728 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, _1723 * cbSceneParam._m0[91u].x));
    vec4 _1742 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_644, _645));
    float _1744 = _1742.w;
    float _1756 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1744);
    float _1757 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1744);
    float _1758 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1744);
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_685 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1770 = _711 + (-1.0);
    float _1773 = (cbLight._m0[_1765].x * _1770) + 1.0;
    float _1774 = (cbLight._m0[_1765].y * _1770) + 1.0;
    uint _1775 = _1764 + 5u;
    float _1781 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1785 = _1764 + 4u;
    float _1794 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1798 = _1764 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_609, _610, _611));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_609, _610, _611));
    float _3700 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _3711 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1775].x * _1781) * _1819) + (((cbLight._m0[_1785].x * _1756) * _1794) * _1817);
    float _1827 = ((_1781 * cbLight._m0[_1775].y) * _1819) + (((cbLight._m0[_1785].y * _1757) * _1794) * _1817);
    float _1828 = ((_1781 * cbLight._m0[_1775].z) * _1819) + (((cbLight._m0[_1785].z * _1758) * _1794) * _1817);
    uint _1830 = _1764 + 8u;
    float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _612) * 0.949999988079071044921875);
    float _1844 = _1843 * _1843;
    float _1845 = cbLight._m0[_1764].x + _636;
    float _1846 = cbLight._m0[_1764].y + _637;
    float _1847 = cbLight._m0[_1764].z + _638;
    float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
    float _1852 = _1851 * _1845;
    float _1853 = _1851 * _1846;
    float _1854 = _1851 * _1847;
    float _1855 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1764].xyz));
    float _3722 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _1859 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _1860 = dot(vec3(_609, _610, _611), vec3(_1852, _1853, _1854));
    float _3744 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1852, _1853, _1854));
    float _3755 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1844 * _1844;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1884 = 1.0 - _1844;
    float _1895 = (0.5 / (((_1859 * ((_1858 * _1884) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1884) + _1844) * _1858))) * _1858;
    float _3766 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    uint _1911 = _1764 + 9u;
    float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _612) * 0.949999988079071044921875);
    float _1923 = _1922 * _1922;
    float _1924 = cbLight._m0[_1798].x + _636;
    float _1925 = cbLight._m0[_1798].y + _637;
    float _1926 = cbLight._m0[_1798].z + _638;
    float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
    float _1931 = _1930 * _1924;
    float _1932 = _1930 * _1925;
    float _1933 = _1930 * _1926;
    float _1934 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1798].xyz));
    float _3777 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1938 = dot(vec3(_609, _610, _611), vec3(_1931, _1932, _1933));
    float _3788 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1931, _1932, _1933));
    float _3799 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1946 = _1923 * _1923;
    float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
    float _1959 = (exp2(log2(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1960 = 1.0 - _1923;
    float _1970 = (0.5 / (((_1859 * ((_1937 * _1960) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1960) + _1923) * _1937))) * _1937;
    float _3810 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1972 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
    float _1982 = (((_1959 * cbLight._m0[_1911].x) * _1972) * _1781) + ((((cbLight._m0[_1830].x * _1756) * _1883) * _1897) * _1794);
    float _1983 = (((_1959 * cbLight._m0[_1911].y) * _1972) * _1781) + ((((cbLight._m0[_1830].y * _1757) * _1883) * _1897) * _1794);
    float _1984 = (((_1959 * cbLight._m0[_1911].z) * _1972) * _1781) + ((((cbLight._m0[_1830].z * _1758) * _1883) * _1897) * _1794);
    float _2099;
    float _2101;
    float _2103;
    float _2105;
    float _2107;
    float _2109;
    if (_1762.y == 0u)
    {
        float _2039 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2040 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2039;
        float _2041 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2039;
        float _2042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2039;
        uvec4 _2054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2055 = _2054.x;
        uint _2066 = uint((float(_2054.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2055))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2055)));
        float _2076 = (log2(_2042 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2077 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        uint _2080 = uint(isnan(14.0) ? _2077 : (isnan(_2077) ? 14.0 : min(_2077, 14.0)));
        uvec4 _2085 = texelFetch(g_lightClusterGridBuffer, int(((_2080 << 2u) + (_2066 << 6u)) >> 2u));
        uint _2086 = _2085.x;
        uint _2087 = _2054.z;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        float _2201;
        float _2203;
        if (((((1u << ((_2087 >> 4u) & 15u)) + 4294967295u) & _2086) == 0u) || ((_2087 & 240u) == 0u))
        {
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
            _2201 = 0.0;
            _2203 = 0.0;
        }
        else
        {
            float _2194;
            float _2196;
            float _2198;
            float _2200;
            float _2202;
            float _2204;
            float _2369 = 0.0;
            float _2370 = 0.0;
            float _2371 = 0.0;
            float _2372 = 0.0;
            float _2373 = 0.0;
            float _2374 = 0.0;
            uint _2375 = 0u;
            uint _2384;
            bool _2385;
            for (;;)
            {
                _2384 = texelFetch(g_lightClassification, int((((_2080 << 5u) + (_2066 << 9u)) + (_2375 << 2u)) >> 2u)).x;
                _2385 = _2384 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2385)
                {
                    frontier_phi_74_pred = _2372;
                    frontier_phi_74_pred_1 = _2371;
                    frontier_phi_74_pred_2 = _2370;
                    frontier_phi_74_pred_3 = _2369;
                    frontier_phi_74_pred_4 = _2373;
                    frontier_phi_74_pred_5 = _2374;
                }
                else
                {
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    uint _2550;
                    _2544 = _2369;
                    _2545 = _2370;
                    _2546 = _2371;
                    _2547 = _2372;
                    _2548 = _2373;
                    _2549 = _2374;
                    _2550 = _2384;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    for (;;)
                    {
                        uint _2554 = uint(findLSB(_2550)) + (_2375 << 5u);
                        uint _2551 = (_2550 + 4294967295u) & _2550;
                        uint _2556 = _2554 * 48u;
                        vec4 _2570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2556)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 3u)).x));
                        uint _2576 = (_2554 * 48u) + 4u;
                        vec4 _2589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2576)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 3u)).x));
                        uint _2595 = (_2554 * 48u) + 8u;
                        vec3 _2606 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x));
                        float _2610 = _2570.x - _2040;
                        float _2611 = _2570.y - _2041;
                        float _2612 = _2570.z - _2042;
                        float _2613 = dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612));
                        float _2616 = inversesqrt(_2613);
                        float _2617 = _2616 * _2610;
                        float _2618 = _2616 * _2611;
                        float _2619 = _2616 * _2612;
                        float _2620 = dot(vec3(_666, _669, _672), vec3(_2617, _2618, _2619));
                        float _2625 = 1.0 - (_2613 * _2570.w);
                        float _3831 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                        float _2626 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                        float _2627 = sqrt(_2613) * _2589.w;
                        float _2630 = 1.39999997615814208984375 / (_2627 + 1.39999997615814208984375);
                        float _2631 = _2630 * _2630;
                        float _2634 = ((1.0 - _2631) * _2620) + _2631;
                        float _2637 = _2627 * _2627;
                        float _2641 = ((isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0))) * _2626) / ((_2637 * 0.699999988079071044921875) + 1.0);
                        float _2645 = (-0.0) - _2040;
                        float _2646 = (-0.0) - _2041;
                        float _2647 = (-0.0) - _2042;
                        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
                        float _2652 = _2651 * _2645;
                        float _2653 = _2651 * _2646;
                        float _2654 = _2651 * _2647;
                        float _2662 = exp2(log2(1.0 / ((_2637 * 3.5) + 5.0)) * 0.25);
                        float _2663 = 1.0 - _727;
                        float _2670 = sqrt(1.0 - ((1.0 - (_2663 * _2663)) * (1.0 - (_2662 * _2662))));
                        float _2671 = _2670 * _2670;
                        float _2672 = _2671 * _2671;
                        float _2673 = _2652 + _2617;
                        float _2674 = _2653 + _2618;
                        float _2675 = _2654 + _2619;
                        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
                        float _2683 = dot(vec3(_666, _669, _672), vec3(_2652, _2653, _2654));
                        float _3847 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2686 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
                        float _2687 = dot(vec3(_666, _669, _672), vec3(_2679 * _2673, _2679 * _2674, _2679 * _2675));
                        float _3858 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
                        float _2690 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                        float _2694 = ((_2690 * _2690) * (_2672 + (-1.0))) + 1.0;
                        float _2695 = _2630 * _2671;
                        float _2696 = _2695 * _2695;
                        float _2699 = ((1.0 - _2696) * _2620) + _2696;
                        float _3869 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2700 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                        float _2701 = 1.0 - _2671;
                        float _2711 = (0.5 / (((_2700 * ((_2686 * _2701) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2701) + _2671) * _2686))) * _2700;
                        float _3880 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2722 = (((_2672 * 3.1415927410125732421875) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) / ((_2694 * _2694) * ((_2637 * 2.1991131305694580078125) + 3.141590118408203125))) * _2626;
                        _2453 = (_2641 * _2589.x) + _2547;
                        _2454 = (_2641 * _2589.y) + _2548;
                        _2455 = (_2641 * _2589.z) + _2549;
                        _2450 = (_2722 * _2606.x) + _2544;
                        _2451 = (_2722 * _2606.y) + _2545;
                        _2452 = (_2722 * _2606.z) + _2546;
                        if (_2551 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2544 = _2450;
                            _2545 = _2451;
                            _2546 = _2452;
                            _2547 = _2453;
                            _2548 = _2454;
                            _2549 = _2455;
                            _2550 = _2551;
                        }
                    }
                    frontier_phi_74_pred = _2453;
                    frontier_phi_74_pred_1 = _2452;
                    frontier_phi_74_pred_2 = _2451;
                    frontier_phi_74_pred_3 = _2450;
                    frontier_phi_74_pred_4 = _2454;
                    frontier_phi_74_pred_5 = _2455;
                }
                _2200 = frontier_phi_74_pred;
                _2198 = frontier_phi_74_pred_1;
                _2196 = frontier_phi_74_pred_2;
                _2194 = frontier_phi_74_pred_3;
                _2202 = frontier_phi_74_pred_4;
                _2204 = frontier_phi_74_pred_5;
                uint _2376 = _2375 + 1u;
                if (_2376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2369 = _2194;
                    _2370 = _2196;
                    _2371 = _2198;
                    _2372 = _2200;
                    _2373 = _2202;
                    _2374 = _2204;
                    _2375 = _2376;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
            _2201 = _2202;
            _2203 = _2204;
        }
        uvec4 _2207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2208 = _2207.z;
        uint _2210 = (_2208 >> 8u) & 15u;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        if (((4294967295u << _2210) & _2086) == 0u)
        {
            _2337 = _2193;
            _2339 = _2195;
            _2341 = _2197;
            _2343 = _2199;
            _2345 = _2201;
            _2347 = _2203;
        }
        else
        {
            float _2362 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
            float _2363 = _2362 * _2040;
            float _2364 = _2362 * _2041;
            float _2365 = _2362 * _2042;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2210 < ((_2208 >> 12u) & 15u))
            {
                float _2338;
                float _2340;
                float _2342;
                float _2344;
                float _2346;
                float _2348;
                float _2527 = _2193;
                float _2528 = _2195;
                float _2529 = _2197;
                float _2530 = _2199;
                float _2531 = _2201;
                float _2532 = _2203;
                uint _2533 = _2210;
                uint _2542;
                bool _2543;
                for (;;)
                {
                    _2542 = texelFetch(g_lightClassification, int((((_2080 << 5u) + (_2066 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                    _2543 = _2542 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2543)
                    {
                        frontier_phi_83_pred = _2530;
                        frontier_phi_83_pred_1 = _2529;
                        frontier_phi_83_pred_2 = _2528;
                        frontier_phi_83_pred_3 = _2527;
                        frontier_phi_83_pred_4 = _2532;
                        frontier_phi_83_pred_5 = _2531;
                    }
                    else
                    {
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _2761 = _2527;
                        float _2762 = _2528;
                        float _2763 = _2529;
                        float _2764 = _2530;
                        float _2765 = _2531;
                        float _2766 = _2532;
                        uint _2767 = _2542;
                        uint _2768;
                        vec4 _2793;
                        float _2794;
                        vec4 _2809;
                        vec3 _2821;
                        vec4 _2836;
                        vec4 _2851;
                        float _2897;
                        bool _2898;
                        for (;;)
                        {
                            uint _2778 = ((_2533 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2767));
                            _2768 = (_2767 + 4294967295u) & _2767;
                            uint _2780 = _2778 * 40u;
                            _2793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 3u)).x));
                            _2794 = _2793.w;
                            uint _2796 = (_2778 * 40u) + 4u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            uint _2811 = (_2778 * 40u) + 8u;
                            _2821 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x));
                            uint _2823 = (_2778 * 40u) + 16u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2838 = (_2778 * 40u) + 20u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2778 * 40u) + 24u;
                            vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2872 = (_2778 * 40u) + 28u;
                            vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            _2897 = fma(_2042, _2885.z, fma(_2041, _2885.y, _2885.x * _2040)) + _2885.w;
                            _2898 = !((fma(_2042, _2866.z, fma(_2041, _2866.y, _2866.x * _2040)) + _2866.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2898)
                            {
                                float _2925 = _2793.x - _2040;
                                float _2926 = _2793.y - _2041;
                                float _2927 = _2793.z - _2042;
                                float _2928 = dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927));
                                float _2931 = inversesqrt(_2928);
                                float _2932 = _2931 * _2925;
                                float _2933 = _2931 * _2926;
                                float _2934 = _2931 * _2927;
                                float _2938 = 1.0 - (_2928 / (_2794 * _2794));
                                float _3891 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                                float _2939 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                                float _2943 = sqrt(_2928) * _2809.w;
                                float _2945 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                                float _2946 = _2945 * _2945;
                                float _2949 = ((1.0 - _2946) * dot(vec3(_2932, _2933, _2934), vec3(_666, _669, _672))) + _2946;
                                float _2952 = _2943 * _2943;
                                float _2956 = (fma(_2042, _2836.z, fma(_2041, _2836.y, _2836.x * _2040)) + _2836.w) / _2897;
                                float _2957 = (fma(_2042, _2851.z, fma(_2041, _2851.y, _2851.x * _2040)) + _2851.w) / _2897;
                                float _2961 = 1.0 - dot(vec2(_2956, _2957), vec2(_2956, _2957));
                                float _3907 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                                float _2962 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                                float _2963 = _2962 * (((isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))) * _2939) / ((_2952 * 0.699999988079071044921875) + 1.0));
                                float _2975 = exp2(log2(1.0 / ((_2952 * 3.5) + 5.0)) * 0.25);
                                float _2976 = 1.0 - _727;
                                float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                                float _2984 = _2983 * _2983;
                                float _2985 = _2984 * _2984;
                                float _2986 = _2932 - _2363;
                                float _2987 = _2933 - _2364;
                                float _2988 = _2934 - _2365;
                                float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                                float _2996 = dot(vec3(_666, _669, _672), vec3((-0.0) - _2363, (-0.0) - _2364, (-0.0) - _2365));
                                float _3918 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2999 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
                                float _3000 = dot(vec3(_666, _669, _672), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                                float _3929 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3003 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                                float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                                float _3008 = _2945 * _2984;
                                float _3009 = _3008 * _3008;
                                float _3015 = ((1.0 - _3009) * dot(vec3(_666, _669, _672), vec3(_2932, _2933, _2934))) + _3009;
                                float _3940 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                                float _3017 = 1.0 - _2984;
                                float _3027 = (0.5 / (((_3016 * ((_2999 * _3017) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3016 * _3017) + _2984) * _2999))) * _3016;
                                float _3951 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3037 = (_2962 * _2939) * (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) / ((_3007 * _3007) * ((_2952 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2963 * _2809.x;
                                frontier_phi_89_pred_1 = _3037 * _2821.z;
                                frontier_phi_89_pred_2 = _3037 * _2821.y;
                                frontier_phi_89_pred_3 = _3037 * _2821.x;
                                frontier_phi_89_pred_4 = _2963 * _2809.z;
                                frontier_phi_89_pred_5 = _2963 * _2809.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3044 = frontier_phi_89_pred;
                            _3043 = frontier_phi_89_pred_1;
                            _3042 = frontier_phi_89_pred_2;
                            _3041 = frontier_phi_89_pred_3;
                            _3046 = frontier_phi_89_pred_4;
                            _3045 = frontier_phi_89_pred_5;
                            _2751 = _3044 + _2764;
                            _2752 = _3045 + _2765;
                            _2753 = _3046 + _2766;
                            _2748 = _3041 + _2761;
                            _2749 = _3042 + _2762;
                            _2750 = _3043 + _2763;
                            if (_2768 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2768;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2751;
                        frontier_phi_83_pred_1 = _2750;
                        frontier_phi_83_pred_2 = _2749;
                        frontier_phi_83_pred_3 = _2748;
                        frontier_phi_83_pred_4 = _2753;
                        frontier_phi_83_pred_5 = _2752;
                    }
                    _2344 = frontier_phi_83_pred;
                    _2342 = frontier_phi_83_pred_1;
                    _2340 = frontier_phi_83_pred_2;
                    _2338 = frontier_phi_83_pred_3;
                    _2348 = frontier_phi_83_pred_4;
                    _2346 = frontier_phi_83_pred_5;
                    uint _2534 = _2533 + 1u;
                    if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2527 = _2338;
                        _2528 = _2340;
                        _2529 = _2342;
                        _2530 = _2344;
                        _2531 = _2346;
                        _2532 = _2348;
                        _2533 = _2534;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2348;
                frontier_phi_65_66_ladder_1 = _2346;
                frontier_phi_65_66_ladder_2 = _2342;
                frontier_phi_65_66_ladder_3 = _2340;
                frontier_phi_65_66_ladder_4 = _2344;
                frontier_phi_65_66_ladder_5 = _2338;
            }
            else
            {
                frontier_phi_65_66_ladder = _2203;
                frontier_phi_65_66_ladder_1 = _2201;
                frontier_phi_65_66_ladder_2 = _2197;
                frontier_phi_65_66_ladder_3 = _2195;
                frontier_phi_65_66_ladder_4 = _2199;
                frontier_phi_65_66_ladder_5 = _2193;
            }
            _2337 = frontier_phi_65_66_ladder_5;
            _2339 = frontier_phi_65_66_ladder_3;
            _2341 = frontier_phi_65_66_ladder_2;
            _2343 = frontier_phi_65_66_ladder_4;
            _2345 = frontier_phi_65_66_ladder_1;
            _2347 = frontier_phi_65_66_ladder;
        }
        float _2352 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2099 = (_2352 * _2343) + _1826;
        _2101 = (_2352 * _2345) + _1827;
        _2103 = (_2352 * _2347) + _1828;
        _2105 = ((_2337 * 0.039999999105930328369140625) * _2352) + _1982;
        _2107 = ((_2339 * 0.039999999105930328369140625) * _2352) + _1983;
        _2109 = ((_2341 * 0.039999999105930328369140625) * _2352) + _1984;
    }
    else
    {
        _2099 = _1826;
        _2101 = _1827;
        _2103 = _1828;
        _2105 = _1982;
        _2107 = _1983;
        _2109 = _1984;
    }
    uint _2115 = _687 + uint(cbMatDynParam._m0[0u].w);
    float _3967 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3978 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3989 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _2140 = (((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_2099 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _711))) + ((_2105 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2115].x * ((_554 * ((_510 - _430) - (_510 * _286))) + _430));
    float _2142 = ((cbInstanceData._m0[_2115].y * ((_554 * ((_511 - _431) - (_511 * _286))) + _431)) + ((_2107 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_2101 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _711)));
    float _2144 = ((cbInstanceData._m0[_2115].z * ((_554 * ((_512 - _432) - (_512 * _286))) + _432)) + ((_2109 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2103 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _711)));
    uint _2148 = _685 + 6u;
    float _2156 = _644 / cbSceneParam._m0[86u].x;
    float _2157 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2171 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2156, _2157, (log2((isnan(cbSceneParam._m0[77u].w) ? _631 : (isnan(_631) ? cbSceneParam._m0[77u].w : min(_631, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2173 = _2171.x;
    float _2174 = _2171.y;
    float _2175 = _2171.z;
    float _2176 = _2171.w;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    if (_631 > cbSceneParam._m0[78u].w)
    {
        float _2218 = isnan(_631) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _631 : min(cbSceneParam._m0[80u].w, _631));
        float _2219 = _2218 / _631;
        float _2230 = _2219 * _259;
        float _2231 = _260 * _2219;
        float _2232 = (-0.0) - _2231;
        float _2233 = _2219 * _261;
        float _2235 = (cbSceneParam._m0[77u].w * _2232) / _2218;
        float _2236 = _2235 + cbSceneParam._m0[79u].w;
        float _2237 = cbSceneParam._m0[79u].w - _2231;
        float _2243 = sqrt(((_2230 * _2230) + (_2231 * _2231)) + (_2233 * _2233));
        float _2246 = (1.0 - (cbSceneParam._m0[77u].w / _2218)) * _2243;
        float _2252 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2254 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2463;
        if (abs((_2232 - _2235) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2463 = ((((_2236 > 0.0) ? exp2(_2252 * _2236) : (2.0 - exp2(_2254 * _2236))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2246;
        }
        else
        {
            float _2398 = 1.0 / cbSceneParam._m0[80u].x;
            float _2399 = isnan(_2237) ? _2236 : (isnan(_2236) ? _2237 : max(_2236, _2237));
            float _2400 = isnan(_2237) ? _2236 : (isnan(_2236) ? _2237 : min(_2236, _2237));
            float _2409 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : min(_2399, 0.0));
            float _2410 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : min(_2400, 0.0));
            _2463 = ((abs(_2243 / _2232) * cbSceneParam._m0[80u].y) * ((((_2409 - _2410) * 2.0) - ((exp2(_2252 * (isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0)))) - exp2(_2252 * (isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0))))) * _2398)) - ((exp2(_2254 * _2409) - exp2(_2254 * _2410)) * _2398))) + (_2246 * cbSceneParam._m0[80u].z);
        }
        vec4 _2465 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2156, _2157, 1.0), 0.0);
        float _2474 = exp2((_2463 * (-1.44269502162933349609375)) * (1.0 - _2465.w));
        float _2475 = log2(_2474);
        float _2491 = log2(_2176);
        _2256 = (exp2(_2491 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2475 * cbSceneParam._m0[78u].x)) * _2465.x) / cbSceneParam._m0[78u].x)) + _2173;
        _2258 = (exp2(_2491 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2475 * cbSceneParam._m0[78u].y)) * _2465.y) / cbSceneParam._m0[78u].y)) + _2174;
        _2260 = (exp2(_2491 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2475 * cbSceneParam._m0[78u].z)) * _2465.z) / cbSceneParam._m0[78u].z)) + _2175;
        _2262 = _2474 * _2176;
    }
    else
    {
        _2256 = _2173;
        _2258 = _2174;
        _2260 = _2175;
        _2262 = _2176;
    }
    float _2274 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2275 = _2274 == 3.0;
    float _2276 = log2(_2262);
    float _2283 = exp2(_2276 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0)));
    float _2284 = exp2(_2276 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0)));
    float _2285 = exp2(_2276 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0)));
    float _2294 = (_2274 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2294 * (_2275 ? _2283 : (_2283 + (cbSceneParam._m0[72u].w * _2256)));
    SV_Target.y = _2294 * (_2275 ? _2284 : (_2284 + (cbSceneParam._m0[72u].w * _2258)));
    SV_Target.z = _2294 * (_2275 ? _2285 : (_2285 + (cbSceneParam._m0[72u].w * _2260)));
    SV_Target.w = cbInstanceData._m0[_2148].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2148].w;
}


