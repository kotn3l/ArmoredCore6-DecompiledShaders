#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Ice_MB2_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1200;
float _3847;
float _3848;
float _3849;
float _3850;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _311 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _314 = _311.x;
    float _315 = 1.0 - _314;
    vec4 _339 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _363 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _365 = _363.x;
    float _366 = 1.0 - _365;
    vec4 _382 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _407 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _418 = cbMtdParam._m0[12u].x * _407.x;
    float _419 = cbMtdParam._m0[12u].y * _407.y;
    float _420 = cbMtdParam._m0[12u].z * _407.z;
    float _428 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].y * (1.0 - TEXCOORD_5.x)) * ((((_365 - _366) * cbMtdParam._m0[15u].w) + _366) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3859 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _441 = dot(vec3(_287, _288, _289), vec3(_216, _217, _218));
    float _444 = dot(vec3(_287, _288, _289), vec3(_230, _231, _232));
    float _447 = dot(vec3(_287, _288, _289), vec3(_223, _224, _225));
    float _453 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _475 = dot(vec4(texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _495 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_441 * cbMtdParam._m0[14u].x) * _453) * _475) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((((_444 * cbMtdParam._m0[14u].x) * _453) * _475) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _516 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _517 = _516 * _287;
    float _518 = _516 * _288;
    float _519 = _516 * _289;
    float _523 = dot(vec4(_517, _518, _519, 0.0), vec4(_223, _224, _225, 0.0)) - cbMtdParam._m0[14u].w;
    float _3870 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _530 = exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].x : (isnan(cbMtdParam._m0[15u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].x, 0.001000000047497451305389404296875))));
    float _545 = (((((_429 * ((cbMtdParam._m0[11u].x * _382.x) - _418)) + _418) * 4.55000019073486328125) * _495.x) * cbMtdParam._m0[9u].x) * ((_530 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _549 = (((((((cbMtdParam._m0[11u].y * _382.y) - _419) * _429) + _419) * 4.55000019073486328125) * _495.y) * cbMtdParam._m0[9u].y) * ((_530 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _553 = (((((((cbMtdParam._m0[11u].z * _382.z) - _420) * _429) + _420) * 4.55000019073486328125) * _495.z) * cbMtdParam._m0[9u].z) * ((_530 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _560 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].z * (1.0 - TEXCOORD_8)) * ((((_314 - _315) * cbMtdParam._m0[17u].x) + _315) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].y + 1.0);
    float _3886 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _568 = (((_339.x * cbMtdParam._m0[10u].x) - _545) * _561) + _545;
    float _569 = (((_339.y * cbMtdParam._m0[10u].y) - _549) * _561) + _549;
    float _570 = (((_339.z * cbMtdParam._m0[10u].z) - _553) * _561) + _553;
    vec4 _582 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _590 = (_582.x * 2.0) + (-1.0);
    float _591 = (_582.y * 2.0) + (-1.0);
    float _592 = dot(vec2(_590, _591), vec2(_590, _591));
    float _3897 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    vec4 _612 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _619 = (_612.x * 2.0) + (-1.0);
    float _620 = (_612.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3908 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _626 = sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))));
    float _628 = cbMtdParam._m0[16u].w + _612.z;
    float _631 = (((cbMtdParam._m0[16u].z + _582.z) - _628) * _429) + _628;
    vec4 _643 = texture(sampler2D(M_Ice_MB2_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _650 = (_643.x * 2.0) + (-1.0);
    float _651 = (_643.y * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3919 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _660 = (_561 * (_643.z - _631)) + _631;
    float _667 = (_429 * (_590 - _619)) + _619;
    float _668 = (_429 * (_591 - _620)) + _620;
    float _669 = (_429 * (sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) - _626)) + _626;
    float _681 = (((_650 - _667) + (_667 * cbMtdParam._m0[15u].z)) * _561) + _667;
    float _682 = (((_651 - _668) + (_668 * cbMtdParam._m0[15u].z)) * _561) + _668;
    float _683 = ((sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _669) * _561) + _669;
    float _686 = fma(_683, _223, fma(_682, _230, _681 * _216));
    float _689 = fma(_683, _224, fma(_682, _231, _681 * _217));
    float _692 = fma(_683, _225, fma(_682, _232, _681 * _218));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _3930 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _700 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3952 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3963 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _719 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _724 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _726 = _724.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _880 = sqrt(((_287 * _287) + (_288 * _288)) + (_289 * _289));
        float _886 = (cbMatDynParam._m0[5u].x * _880) + cbMatDynParam._m0[5u].y;
        float _3974 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _891 = (cbMatDynParam._m0[5u].z * _880) + cbMatDynParam._m0[5u].w;
        float _3985 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) - _887)) + _887) < ((_726 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_699, cbSceneParam._m0[5u].z, fma(_698, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _697));
    float _759 = fma(_699, cbSceneParam._m0[6u].z, fma(_698, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _697));
    float _762 = fma(_699, cbSceneParam._m0[7u].z, fma(_698, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _697));
    uint _775 = uint(roundEven(NORMAL.w)) * 13u;
    uint _776 = _775 + 9u;
    uint _777 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_777].z;
    float _3996 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _800 = _797.x * TEXCOORD_5.w;
    float _801 = dot(vec3(_697, _698, _699), vec3(_517, _518, _519));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _697) - _517;
    float _809 = (_804 * _698) - _518;
    float _810 = (_804 * _699) - _519;
    float _814 = abs(dot(vec3(_517, _518, _519), vec3(_697, _698, _699)));
    float _4029 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_700);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1199;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _924 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _928 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _932 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _957 = _861 + _697;
        float _958 = _865 + _698;
        float _959 = _869 + _699;
        float _969 = fma(_959, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957)) - _924;
        float _970 = fma(_959, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957)) - _928;
        float _971 = fma(_959, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957)) - _932;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_924 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_928 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[34u].z) + ((((((_932 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1027 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_993.x + (-0.5));
        float _1029 = _1027 * (_993.y + (-0.5));
        float _1030 = _1027 * (_993.z + (-0.5));
        float _1037 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1000.x + (-0.5));
        float _1039 = _1037 * (_1000.y + (-0.5));
        float _1040 = _1037 * (_1000.z + (-0.5));
        float _1047 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1007.x + (-0.5));
        float _1049 = _1047 * (_1007.y + (-0.5));
        float _1050 = _1047 * (_1007.z + (-0.5));
        float _1057 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1014.x + (-0.5));
        float _1059 = _1057 * (_1014.y + (-0.5));
        float _1060 = _1057 * (_1014.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1081 = (dot(vec3(_697, _698, _699), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1091 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _4077 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1093 + 1.0))) + _1098) * _1061;
        float _1108 = _1029 * 0.5;
        float _1109 = _1039 * 0.5;
        float _1110 = _1049 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_697, _698, _699), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _4110 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1135 + 1.0))) + _1140) * _1062;
        float _1150 = _1030 * 0.5;
        float _1151 = _1040 * 0.5;
        float _1152 = _1050 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_697, _698, _699), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4143 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1177 + 1.0))) + _1182) * _1063;
        _1199 = _1030;
        _1201 = _1029;
        _1202 = _1028;
        _1203 = _1040;
        _1204 = _1039;
        _1205 = _1038;
        _1206 = _1050;
        _1207 = _1049;
        _1208 = _1048;
        _1209 = _1063;
        _1210 = _1062;
        _1211 = _1061;
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _1200;
        _1201 = _1200;
        _1202 = _1200;
        _1203 = _1200;
        _1204 = _1200;
        _1205 = _1200;
        _1206 = _1200;
        _1207 = _1200;
        _1208 = _1200;
        _1209 = _1200;
        _1210 = _1200;
        _1211 = _1200;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1243 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1247 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1251 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1274 = _861 + _697;
        float _1275 = _865 + _698;
        float _1276 = _869 + _699;
        float _1286 = fma(_1276, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274)) - _1243;
        float _1287 = fma(_1276, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274)) - _1247;
        float _1288 = fma(_1276, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274)) - _1251;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1243 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1247 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[35u].z) + ((((((_1251 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1342 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1309.x + (-0.5));
        float _1344 = _1342 * (_1309.y + (-0.5));
        float _1345 = _1342 * (_1309.z + (-0.5));
        float _1352 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1316.x + (-0.5));
        float _1354 = _1352 * (_1316.y + (-0.5));
        float _1355 = _1352 * (_1316.z + (-0.5));
        float _1362 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1323.x + (-0.5));
        float _1364 = _1362 * (_1323.y + (-0.5));
        float _1365 = _1362 * (_1323.z + (-0.5));
        float _1372 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1330.x + (-0.5));
        float _1374 = _1372 * (_1330.y + (-0.5));
        float _1375 = _1372 * (_1330.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_697, _698, _699), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4206 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1406 + 1.0))) + _1411) * _1376;
        float _1421 = _1344 * 0.5;
        float _1422 = _1354 * 0.5;
        float _1423 = _1364 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_697, _698, _699), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4239 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1448 + 1.0))) + _1453) * _1377;
        float _1463 = _1345 * 0.5;
        float _1464 = _1355 * 0.5;
        float _1465 = _1365 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_697, _698, _699), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4272 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1490 + 1.0))) + _1495) * _1378;
        _1512 = _1345;
        _1513 = _1344;
        _1514 = _1343;
        _1515 = _1355;
        _1516 = _1354;
        _1517 = _1353;
        _1518 = _1365;
        _1519 = _1364;
        _1520 = _1363;
        _1521 = _1378;
        _1522 = _1377;
        _1523 = _1376;
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
    }
    else
    {
        _1512 = _1200;
        _1513 = _1200;
        _1514 = _1200;
        _1515 = _1200;
        _1516 = _1200;
        _1517 = _1200;
        _1518 = _1200;
        _1519 = _1200;
        _1520 = _1200;
        _1521 = _1200;
        _1522 = _1200;
        _1523 = _1200;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1212)) + _1212;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1213)) + _1213;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1214)) + _1214;
    float _1559 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1536));
    float _1580 = _808 * 0.5;
    float _1581 = _809 * 0.5;
    float _1582 = _810 * 0.5;
    float _1583 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1586 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1589 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1623;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1596 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1199, _1203, _1206, _1209));
        float _1600 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1604 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1611 = dot(vec4(cbModelParam._m0[39u]), vec4(_1580, _1581, _1582, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1634;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1625 = dot(vec4(cbModelParam._m0[40u]), vec4(_1580, _1581, _1582, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1638 = (_1634 * cbModelParam._m0[1u].x) + (_1623 * (1.0 - cbModelParam._m0[1u].x));
    float _1648 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1648 : min(cbModelParam._m0[25u].z, _1648));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1696 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1700 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1704 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1707 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1710 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1713 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1741;
        if (_1707 > 0.0)
        {
            _1741 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1741 = frontier_phi_17_15_ladder;
        }
        float _1913;
        if (_1710 > 0.0)
        {
            _1913 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1913 = frontier_phi_26_22_ladder;
        }
        float _2208;
        if (_1713 > 0.0)
        {
            _2208 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2208 = frontier_phi_38_33_ladder;
        }
        float _2210 = isnan(_1913) ? _1741 : (isnan(_1741) ? _1913 : min(_1741, _1913));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1707) + _1696;
        float _2216 = (_2211 * _1710) + _1700;
        float _2217 = (_2211 * _1713) + _1704;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1649);
            frontier_phi_16_38_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1729 = frontier_phi_16_38_ladder_2;
        _1731 = frontier_phi_16_38_ladder_1;
        _1733 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1649);
        _1729 = _1717.x * cbModelParam._m0[1u].y;
        _1731 = _1717.y * cbModelParam._m0[1u].y;
        _1733 = _1717.z * cbModelParam._m0[1u].y;
    }
    float _1737 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1737 : min(cbModelParam._m0[25u].w, _1737));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1794 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1798 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1802 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1805 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1808 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1811 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1918;
        if (_1805 > 0.0)
        {
            _1918 = abs((1.0 - _1794) / _1805);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1794 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1918 = frontier_phi_28_24_ladder;
        }
        float _2235;
        if (_1808 > 0.0)
        {
            _2235 = abs((1.0 - _1798) / _1808);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1798 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2235 = frontier_phi_40_35_ladder;
        }
        float _2562;
        if (_1811 > 0.0)
        {
            _2562 = abs((1.0 - _1802) / _1811);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1802 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2562 = frontier_phi_50_47_ladder;
        }
        float _2564 = isnan(_2235) ? _1918 : (isnan(_1918) ? _2235 : min(_1918, _2235));
        float _2565 = isnan(_2562) ? _2564 : (isnan(_2564) ? _2562 : min(_2564, _2562));
        float _2569 = (_2565 * _1805) + _1794;
        float _2570 = (_2565 * _1808) + _1798;
        float _2571 = (_2565 * _1811) + _1802;
        float _2572 = _2565 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2572;
        float _2575 = _2572 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2571 > _2575) || ((_2571 < _2573) || ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 < _2573) || (_2569 > _2575))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2571, cbModelParam._m0[17u].z, fma(_2570, cbModelParam._m0[17u].y, _2569 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2571, cbModelParam._m0[18u].z, fma(_2570, cbModelParam._m0[18u].y, _2569 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2571, cbModelParam._m0[19u].z, fma(_2570, cbModelParam._m0[19u].y, _2569 * cbModelParam._m0[19u].x))), _1738);
            frontier_phi_25_50_ladder = _2689.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2689.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2689.x * cbModelParam._m0[1u].z;
        }
        _1830 = frontier_phi_25_50_ladder_2;
        _1832 = frontier_phi_25_50_ladder_1;
        _1834 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1738);
        _1830 = _1814.x * cbModelParam._m0[1u].z;
        _1832 = _1814.y * cbModelParam._m0[1u].z;
        _1834 = _1814.z * cbModelParam._m0[1u].z;
    }
    float _1846 = ((((1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _816)) * _800;
    float _1847 = _1846 * ((cbModelParam._m0[1u].w * (_1830 - _1729)) + _1729);
    float _1848 = _1846 * ((cbModelParam._m0[1u].w * (_1832 - _1731)) + _1731);
    float _1849 = _1846 * ((cbModelParam._m0[1u].w * (_1834 - _1733)) + _1733);
    float _1852 = fma(_1849, cbSceneParam._m0[89u].z, fma(_1848, cbSceneParam._m0[89u].y, _1847 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1849, cbSceneParam._m0[90u].z, fma(_1848, cbSceneParam._m0[90u].y, _1847 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1849, cbSceneParam._m0[91u].z, fma(_1848, cbSceneParam._m0[91u].y, _1847 * cbSceneParam._m0[91u].x));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1905 = _1892 / _1904;
    float _1906 = _1896 / _1904;
    float _1907 = _1900 / _1904;
    float _2054;
    float _2055;
    float _2056;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1934 = ((uint(_1907 > cbSceneParam._m0[59u].y) + uint(_1907 > cbSceneParam._m0[59u].x)) + uint(_1907 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1935 = _1934 + 43u;
        uint _1943 = _1934 + 44u;
        uint _1951 = _1934 + 45u;
        uint _1959 = _1934 + 46u;
        float _1970 = fma(_1904, cbSceneParam._m0[_1935].w, fma(_1900, cbSceneParam._m0[_1935].z, fma(_1896, cbSceneParam._m0[_1935].y, _1892 * cbSceneParam._m0[_1935].x)));
        float _1974 = fma(_1904, cbSceneParam._m0[_1943].w, fma(_1900, cbSceneParam._m0[_1943].z, fma(_1896, cbSceneParam._m0[_1943].y, _1892 * cbSceneParam._m0[_1943].x)));
        float _1982 = fma(_1904, cbSceneParam._m0[_1959].w, fma(_1900, cbSceneParam._m0[_1959].z, fma(_1896, cbSceneParam._m0[_1959].y, _1892 * cbSceneParam._m0[_1959].x)));
        float _1987 = cbSceneParam._m0[33u].z * _1982;
        float _1989 = cbSceneParam._m0[33u].w * _1982;
        float _1992 = fma(_1904, cbSceneParam._m0[_1951].w, fma(_1900, cbSceneParam._m0[_1951].z, fma(_1896, cbSceneParam._m0[_1951].y, _1892 * cbSceneParam._m0[_1951].x))) / _1982;
        float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
        float _4398 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2047 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 + _1970) / _1982, (_1989 + _1974) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 + _1970) / _1982, (_1974 - _1987) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1987) / _1982, (_1974 - _1989) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1989) / _1982, (_1987 + _1974) / _1982), _1992), 0.0)).x), vec4(0.25)));
        _2054 = 1.0 - (_2047 * cbSceneParam._m0[34u].x);
        _2055 = 1.0 - (_2047 * cbSceneParam._m0[34u].y);
        _2056 = 1.0 - (_2047 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2054 = 1.0;
        _2055 = 1.0;
        _2056 = 1.0;
    }
    float _2120;
    float _2122;
    float _2124;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2108 = fma(_1904, cbSceneParam._m0[63u].w, fma(_1900, cbSceneParam._m0[63u].z, fma(_1896, cbSceneParam._m0[63u].y, _1892 * cbSceneParam._m0[63u].x)));
        float _2109 = fma(_1904, cbSceneParam._m0[60u].w, fma(_1900, cbSceneParam._m0[60u].z, fma(_1896, cbSceneParam._m0[60u].y, _1892 * cbSceneParam._m0[60u].x))) / _2108;
        float _2110 = fma(_1904, cbSceneParam._m0[61u].w, fma(_1900, cbSceneParam._m0[61u].z, fma(_1896, cbSceneParam._m0[61u].y, _1892 * cbSceneParam._m0[61u].x))) / _2108;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2109 >= cbSceneParam._m0[64u].x) && (_2110 >= cbSceneParam._m0[64u].y)) && (_2109 <= cbSceneParam._m0[64u].z)) && (_2110 <= cbSceneParam._m0[64u].w))
        {
            float _2248 = fma(_1904, cbSceneParam._m0[62u].w, fma(_1900, cbSceneParam._m0[62u].z, fma(_1896, cbSceneParam._m0[62u].y, _1892 * cbSceneParam._m0[62u].x))) / _2108;
            float _2252 = isnan(cbSceneParam._m0[41u].w) ? _2248 : (isnan(_2248) ? cbSceneParam._m0[41u].w : max(_2248, cbSceneParam._m0[41u].w));
            float _2295 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
            float _4414 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
            float _2302 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2109, cbSceneParam._m0[33u].w + _2110), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2109, _2110 - cbSceneParam._m0[33u].z), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2109 - cbSceneParam._m0[33u].z, _2110 - cbSceneParam._m0[33u].w), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2109 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2110), _2252), 0.0)).x), vec4(0.25)));
            float _2306 = 1.0 - (_2302 * cbSceneParam._m0[34u].x);
            float _2307 = 1.0 - (_2302 * cbSceneParam._m0[34u].y);
            float _2308 = 1.0 - (_2302 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2308) ? _2056 : (isnan(_2056) ? _2308 : min(_2056, _2308));
            frontier_phi_37_36_ladder_1 = isnan(_2307) ? _2055 : (isnan(_2055) ? _2307 : min(_2055, _2307));
            frontier_phi_37_36_ladder_2 = isnan(_2306) ? _2054 : (isnan(_2054) ? _2306 : min(_2054, _2306));
        }
        else
        {
            frontier_phi_37_36_ladder = _2056;
            frontier_phi_37_36_ladder_1 = _2055;
            frontier_phi_37_36_ladder_2 = _2054;
        }
        _2120 = frontier_phi_37_36_ladder_2;
        _2122 = frontier_phi_37_36_ladder_1;
        _2124 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2120 = _2054;
        _2122 = _2055;
        _2124 = _2056;
    }
    uvec4 _2129 = floatBitsToUint(cbInstanceData._m0[_775 + 5u]);
    uint _2131 = _2129.x * 14u;
    uint _2132 = _2131 + 13u;
    float _2139 = _800 + (-1.0);
    float _2144 = (cbLight._m0[_2132].x * _2139) + 1.0;
    float _2145 = (cbLight._m0[_2132].y * _2139) + 1.0;
    float _2146 = (cbLight._m0[_2132].z * _2139) + 1.0;
    float _2147 = (cbLight._m0[_2132].w * _2139) + 1.0;
    uint _2148 = _2131 + 5u;
    float _2154 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2158 = _2131 + 4u;
    float _2167 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
    uint _2171 = _2131 | 1u;
    float _2182 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_697, _698, _699));
    float _2185 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_697, _698, _699));
    float _4450 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _4461 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2190 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2192 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2199 = ((cbLight._m0[_2148].x * _2154) * _2192) + (((cbLight._m0[_2158].x * _2120) * _2167) * _2190);
    float _2200 = ((_2154 * cbLight._m0[_2148].y) * _2192) + (((cbLight._m0[_2158].y * _2122) * _2167) * _2190);
    float _2201 = ((_2154 * cbLight._m0[_2148].z) * _2192) + (((cbLight._m0[_2158].z * _2124) * _2167) * _2190);
    uvec4 _2205 = floatBitsToUint(cbLight._m0[_2131 + 12u]);
    bool _2207 = _2205.x == 0u;
    float _2309;
    float _2311;
    float _2313;
    if (_2207)
    {
        _2309 = _2199;
        _2311 = _2200;
        _2313 = _2201;
    }
    else
    {
        uint _2317 = _2131 + 6u;
        float _2333 = (dot(vec3(cbLight._m0[_2131 + 2u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4472 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2336 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2309 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2199;
        _2311 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2200;
        _2313 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2201;
    }
    bool _2316 = _2205.y == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2316)
    {
        _2371 = _2309;
        _2373 = _2311;
        _2375 = _2313;
    }
    else
    {
        uint _2533 = _2131 + 7u;
        float _2549 = (dot(vec3(cbLight._m0[_2131 + 3u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2550 = _2549 * _2549;
        float _4488 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2551 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2552 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2371 = (((cbLight._m0[_2533].x * 0.3183098733425140380859375) * _2551) * _2552) + _2309;
        _2373 = (((cbLight._m0[_2533].y * 0.3183098733425140380859375) * _2551) * _2552) + _2311;
        _2375 = (((cbLight._m0[_2533].z * 0.3183098733425140380859375) * _2551) * _2552) + _2313;
    }
    uint _2378 = _2131 + 8u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _700) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2131].x + _517;
    float _2394 = cbLight._m0[_2131].y + _518;
    float _2395 = cbLight._m0[_2131].z + _519;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2131].xyz));
    float _4504 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _4515 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2407 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2408 = dot(vec3(_697, _698, _699), vec3(_2400, _2401, _2402));
    float _4526 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2400, _2401, _2402));
    float _4537 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2392 * _2392;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2431 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2432 = 1.0 - _2392;
    float _2443 = (0.5 / (((_2407 * ((_2406 * _2432) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2432) + _2392) * _2406))) * _2406;
    float _4548 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    uint _2459 = _2131 + 9u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _700) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2171].x + _517;
    float _2473 = cbLight._m0[_2171].y + _518;
    float _2474 = cbLight._m0[_2171].z + _519;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2171].xyz));
    float _4559 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2486 = dot(vec3(_697, _698, _699), vec3(_2479, _2480, _2481));
    float _4570 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2490 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2479, _2480, _2481));
    float _4581 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = _2471 * _2471;
    float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
    float _2507 = (exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2508 = 1.0 - _2471;
    float _2518 = (0.5 / (((_2407 * ((_2485 * _2508) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2508) + _2471) * _2485))) * _2485;
    float _4592 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
    float _2530 = (((_2507 * cbLight._m0[_2459].x) * _2520) * _2154) + ((((cbLight._m0[_2378].x * _2120) * _2431) * _2445) * _2167);
    float _2531 = (((_2507 * cbLight._m0[_2459].y) * _2520) * _2154) + ((((cbLight._m0[_2378].y * _2122) * _2431) * _2445) * _2167);
    float _2532 = (((_2507 * cbLight._m0[_2459].z) * _2520) * _2154) + ((((cbLight._m0[_2378].z * _2124) * _2431) * _2445) * _2167);
    float _2588;
    float _2590;
    float _2592;
    if (_2207)
    {
        _2588 = _2530;
        _2590 = _2531;
        _2592 = _2532;
    }
    else
    {
        uint _2594 = _2131 + 2u;
        uint _2598 = _2131 + 10u;
        float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _700) * 0.949999988079071044921875);
        float _2613 = _2612 * _2612;
        float _2614 = cbLight._m0[_2594].x + _517;
        float _2615 = cbLight._m0[_2594].y + _518;
        float _2616 = cbLight._m0[_2594].z + _519;
        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
        float _2621 = _2620 * _2614;
        float _2622 = _2620 * _2615;
        float _2623 = _2620 * _2616;
        float _2624 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2594].xyz));
        float _4603 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2628 = dot(vec3(_697, _698, _699), vec3(_2621, _2622, _2623));
        float _4614 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2632 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2621, _2622, _2623));
        float _4625 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2636 = _2613 * _2613;
        float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
        float _2649 = (exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2650 = 1.0 - _2613;
        float _2660 = (0.5 / (((_2407 * ((_2627 * _2650) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2650) + _2613) * _2627))) * _2627;
        float _4636 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2588 = (((_2649 * cbLight._m0[_2598].x) * _2662) * _2663) + _2530;
        _2590 = (((_2649 * cbLight._m0[_2598].y) * _2662) * _2663) + _2531;
        _2592 = (((_2649 * cbLight._m0[_2598].z) * _2662) * _2663) + _2532;
    }
    float _2694;
    float _2696;
    float _2698;
    if (_2316)
    {
        _2694 = _2588;
        _2696 = _2590;
        _2698 = _2592;
    }
    else
    {
        uint _2705 = _2131 + 3u;
        uint _2709 = _2131 + 11u;
        float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2705].w)) * _700) * 0.949999988079071044921875);
        float _2724 = _2723 * _2723;
        float _2725 = cbLight._m0[_2705].x + _517;
        float _2726 = cbLight._m0[_2705].y + _518;
        float _2727 = cbLight._m0[_2705].z + _519;
        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
        float _2732 = _2731 * _2725;
        float _2733 = _2731 * _2726;
        float _2734 = _2731 * _2727;
        float _2735 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2705].xyz));
        float _4652 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2739 = dot(vec3(_697, _698, _699), vec3(_2732, _2733, _2734));
        float _4663 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2743 = dot(vec3(cbLight._m0[_2705].xyz), vec3(_2732, _2733, _2734));
        float _4674 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2747 = _2724 * _2724;
        float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
        float _2760 = (exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2761 = 1.0 - _2724;
        float _2771 = (0.5 / (((_2407 * ((_2738 * _2761) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2761) + _2724) * _2738))) * _2738;
        float _4685 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2773 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
        float _2774 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2694 = (((_2760 * cbLight._m0[_2709].x) * _2773) * _2774) + _2588;
        _2696 = (((_2760 * cbLight._m0[_2709].y) * _2773) * _2774) + _2590;
        _2698 = (((_2760 * cbLight._m0[_2709].z) * _2773) * _2774) + _2592;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2129.y == 0u)
    {
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2796)));
        float _2817 = (log2(_1907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
        }
        else
        {
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            uint _3066 = 0u;
            uint _3075;
            bool _3076;
            for (;;)
            {
                _3075 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                _3076 = _3075 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3076)
                {
                    frontier_phi_71_pred = _3065;
                    frontier_phi_71_pred_1 = _3064;
                    frontier_phi_71_pred_2 = _3063;
                    frontier_phi_71_pred_3 = _3062;
                    frontier_phi_71_pred_4 = _3061;
                    frontier_phi_71_pred_5 = _3060;
                }
                else
                {
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    uint _3211;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3075;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    for (;;)
                    {
                        uint _3215 = uint(findLSB(_3211)) + (_3066 << 5u);
                        uint _3212 = (_3211 + 4294967295u) & _3211;
                        uint _3217 = _3215 * 48u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3237 = (_3215 * 48u) + 4u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3256 = (_3215 * 48u) + 8u;
                        vec3 _3267 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x));
                        float _3271 = _3231.x - _1905;
                        float _3272 = _3231.y - _1906;
                        float _3273 = _3231.z - _1907;
                        float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                        float _3277 = inversesqrt(_3274);
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3281 = dot(vec3(_756, _759, _762), vec3(_3278, _3279, _3280));
                        float _3286 = 1.0 - (_3274 * _3231.w);
                        float _4711 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3288 = sqrt(_3274) * _3250.w;
                        float _3291 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3281) + _3292;
                        float _3298 = _3288 * _3288;
                        float _3302 = ((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3287) / ((_3298 * 0.699999988079071044921875) + 1.0);
                        float _3306 = (-0.0) - _1905;
                        float _3307 = (-0.0) - _1906;
                        float _3308 = (-0.0) - _1907;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3322 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                        float _3323 = 1.0 - _816;
                        float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                        float _3331 = _3330 * _3330;
                        float _3332 = _3331 * _3331;
                        float _3333 = _3313 + _3278;
                        float _3334 = _3314 + _3279;
                        float _3335 = _3315 + _3280;
                        float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                        float _3343 = dot(vec3(_756, _759, _762), vec3(_3313, _3314, _3315));
                        float _4727 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3347 = dot(vec3(_756, _759, _762), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                        float _4738 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3350 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                        float _3355 = _3291 * _3331;
                        float _3356 = _3355 * _3355;
                        float _3359 = ((1.0 - _3356) * _3281) + _3356;
                        float _4749 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3361 = 1.0 - _3331;
                        float _3371 = (0.5 / (((_3360 * ((_3346 * _3361) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3331) * _3346))) * _3360;
                        float _4760 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3382 = (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) / ((_3354 * _3354) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125))) * _3287;
                        _3135 = (_3302 * _3250.x) + _3208;
                        _3136 = (_3302 * _3250.y) + _3209;
                        _3137 = (_3302 * _3250.z) + _3210;
                        _3132 = (_3382 * _3267.x) + _3205;
                        _3133 = (_3382 * _3267.y) + _3206;
                        _3134 = (_3382 * _3267.z) + _3207;
                        if (_3212 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3212;
                        }
                    }
                    frontier_phi_71_pred = _3137;
                    frontier_phi_71_pred_1 = _3136;
                    frontier_phi_71_pred_2 = _3135;
                    frontier_phi_71_pred_3 = _3134;
                    frontier_phi_71_pred_4 = _3133;
                    frontier_phi_71_pred_5 = _3132;
                }
                _2918 = frontier_phi_71_pred;
                _2916 = frontier_phi_71_pred_1;
                _2914 = frontier_phi_71_pred_2;
                _2912 = frontier_phi_71_pred_3;
                _2910 = frontier_phi_71_pred_4;
                _2908 = frontier_phi_71_pred_5;
                uint _3067 = _3066 + 1u;
                if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3060 = _2908;
                    _3061 = _2910;
                    _3062 = _2912;
                    _3063 = _2914;
                    _3064 = _2916;
                    _3065 = _2918;
                    _3066 = _3067;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
        }
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.z;
        uint _2924 = (_2922 >> 8u) & 15u;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((4294967295u << _2924) & _2827) == 0u)
        {
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
        }
        else
        {
            float _3053 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
            float _3054 = _3053 * _1905;
            float _3055 = _3053 * _1906;
            float _3056 = _3053 * _1907;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2924 < ((_2922 >> 12u) & 15u))
            {
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3188 = _2907;
                float _3189 = _2909;
                float _3190 = _2911;
                float _3191 = _2913;
                float _3192 = _2915;
                float _3193 = _2917;
                uint _3194 = _2924;
                uint _3203;
                bool _3204;
                for (;;)
                {
                    _3203 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                    _3204 = _3203 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3204)
                    {
                        frontier_phi_82_pred = _3193;
                        frontier_phi_82_pred_1 = _3192;
                        frontier_phi_82_pred_2 = _3191;
                        frontier_phi_82_pred_3 = _3190;
                        frontier_phi_82_pred_4 = _3189;
                        frontier_phi_82_pred_5 = _3188;
                    }
                    else
                    {
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3409 = _3188;
                        float _3410 = _3189;
                        float _3411 = _3190;
                        float _3412 = _3191;
                        float _3413 = _3192;
                        float _3414 = _3193;
                        uint _3415 = _3203;
                        uint _3416;
                        vec4 _3441;
                        float _3442;
                        vec4 _3457;
                        vec3 _3469;
                        vec4 _3484;
                        vec4 _3500;
                        float _3547;
                        bool _3548;
                        for (;;)
                        {
                            uint _3426 = ((_3194 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3415));
                            _3416 = (_3415 + 4294967295u) & _3415;
                            uint _3428 = _3426 * 40u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3442 = _3441.w;
                            uint _3444 = (_3426 * 40u) + 4u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3426 * 40u) + 8u;
                            _3469 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x));
                            uint _3471 = (_3426 * 40u) + 16u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3487 = (_3426 * 40u) + 20u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3503 = (_3426 * 40u) + 24u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3522 = (_3426 * 40u) + 28u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3547 = fma(_1907, _3535.z, fma(_1906, _3535.y, _3535.x * _1905)) + _3535.w;
                            _3548 = !((fma(_1907, _3516.z, fma(_1906, _3516.y, _3516.x * _1905)) + _3516.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3548)
                            {
                                float _3575 = _3441.x - _1905;
                                float _3576 = _3441.y - _1906;
                                float _3577 = _3441.z - _1907;
                                float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                                float _3581 = inversesqrt(_3578);
                                float _3582 = _3581 * _3575;
                                float _3583 = _3581 * _3576;
                                float _3584 = _3581 * _3577;
                                float _3588 = 1.0 - (_3578 / (_3442 * _3442));
                                float _4771 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3593 = sqrt(_3578) * _3457.w;
                                float _3595 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                                float _3596 = _3595 * _3595;
                                float _3599 = ((1.0 - _3596) * dot(vec3(_3582, _3583, _3584), vec3(_756, _759, _762))) + _3596;
                                float _3602 = _3593 * _3593;
                                float _3606 = (fma(_1907, _3484.z, fma(_1906, _3484.y, _3484.x * _1905)) + _3484.w) / _3547;
                                float _3607 = (fma(_1907, _3500.z, fma(_1906, _3500.y, _3500.x * _1905)) + _3500.w) / _3547;
                                float _3611 = 1.0 - dot(vec2(_3606, _3607), vec2(_3606, _3607));
                                float _4787 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3613 = _3612 * (((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3589) / ((_3602 * 0.699999988079071044921875) + 1.0));
                                float _3625 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                                float _3626 = 1.0 - _816;
                                float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                                float _3634 = _3633 * _3633;
                                float _3635 = _3634 * _3634;
                                float _3636 = _3582 - _3054;
                                float _3637 = _3583 - _3055;
                                float _3638 = _3584 - _3056;
                                float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                                float _3646 = dot(vec3(_756, _759, _762), vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056));
                                float _4798 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3650 = dot(vec3(_756, _759, _762), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                                float _4809 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                                float _3658 = _3595 * _3634;
                                float _3659 = _3658 * _3658;
                                float _3665 = ((1.0 - _3659) * dot(vec3(_756, _759, _762), vec3(_3582, _3583, _3584))) + _3659;
                                float _4820 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3667 = 1.0 - _3634;
                                float _3677 = (0.5 / (((_3666 * ((_3649 * _3667) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3666 * _3667) + _3634) * _3649))) * _3666;
                                float _4831 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3687 = (_3612 * _3589) * (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3657 * _3657) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3613 * _3457.z;
                                frontier_phi_88_pred_1 = _3613 * _3457.y;
                                frontier_phi_88_pred_2 = _3613 * _3457.x;
                                frontier_phi_88_pred_3 = _3687 * _3469.z;
                                frontier_phi_88_pred_4 = _3687 * _3469.y;
                                frontier_phi_88_pred_5 = _3687 * _3469.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3696 = frontier_phi_88_pred;
                            _3695 = frontier_phi_88_pred_1;
                            _3694 = frontier_phi_88_pred_2;
                            _3693 = frontier_phi_88_pred_3;
                            _3692 = frontier_phi_88_pred_4;
                            _3691 = frontier_phi_88_pred_5;
                            _3399 = _3694 + _3412;
                            _3400 = _3695 + _3413;
                            _3401 = _3696 + _3414;
                            _3396 = _3691 + _3409;
                            _3397 = _3692 + _3410;
                            _3398 = _3693 + _3411;
                            if (_3416 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3416;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3401;
                        frontier_phi_82_pred_1 = _3400;
                        frontier_phi_82_pred_2 = _3399;
                        frontier_phi_82_pred_3 = _3398;
                        frontier_phi_82_pred_4 = _3397;
                        frontier_phi_82_pred_5 = _3396;
                    }
                    _3039 = frontier_phi_82_pred;
                    _3037 = frontier_phi_82_pred_1;
                    _3035 = frontier_phi_82_pred_2;
                    _3033 = frontier_phi_82_pred_3;
                    _3031 = frontier_phi_82_pred_4;
                    _3029 = frontier_phi_82_pred_5;
                    uint _3195 = _3194 + 1u;
                    if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3188 = _3029;
                        _3189 = _3031;
                        _3190 = _3033;
                        _3191 = _3035;
                        _3192 = _3037;
                        _3193 = _3039;
                        _3194 = _3195;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3035;
                frontier_phi_63_64_ladder_1 = _3039;
                frontier_phi_63_64_ladder_2 = _3037;
                frontier_phi_63_64_ladder_3 = _3033;
                frontier_phi_63_64_ladder_4 = _3031;
                frontier_phi_63_64_ladder_5 = _3029;
            }
            else
            {
                frontier_phi_63_64_ladder = _2913;
                frontier_phi_63_64_ladder_1 = _2917;
                frontier_phi_63_64_ladder_2 = _2915;
                frontier_phi_63_64_ladder_3 = _2911;
                frontier_phi_63_64_ladder_4 = _2909;
                frontier_phi_63_64_ladder_5 = _2907;
            }
            _3028 = frontier_phi_63_64_ladder_5;
            _3030 = frontier_phi_63_64_ladder_4;
            _3032 = frontier_phi_63_64_ladder_3;
            _3034 = frontier_phi_63_64_ladder;
            _3036 = frontier_phi_63_64_ladder_2;
            _3038 = frontier_phi_63_64_ladder_1;
        }
        float _3043 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2840 = (_3043 * _3034) + _2371;
        _2842 = (_3043 * _3036) + _2373;
        _2844 = (_3043 * _3038) + _2375;
        _2846 = ((_3028 * 0.039999999105930328369140625) * _3043) + _2694;
        _2848 = ((_3030 * 0.039999999105930328369140625) * _3043) + _2696;
        _2850 = ((_3032 * 0.039999999105930328369140625) * _3043) + _2698;
    }
    else
    {
        _2840 = _2371;
        _2842 = _2373;
        _2844 = _2375;
        _2846 = _2694;
        _2848 = _2696;
        _2850 = _2698;
    }
    float _4847 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4858 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4869 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2867 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2840 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _800))) + ((_2846 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2868 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2842 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _800))) + ((_2848 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2844 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _800))) + ((_2850 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    uint _2870 = _775 + 6u;
    float _2878 = _737 / cbSceneParam._m0[86u].x;
    float _2879 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, (log2((isnan(cbSceneParam._m0[77u].w) ? _719 : (isnan(_719) ? cbSceneParam._m0[77u].w : min(_719, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2895 = _2893.x;
    float _2896 = _2893.y;
    float _2897 = _2893.z;
    float _2898 = _2893.w;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_719 > cbSceneParam._m0[78u].w)
    {
        float _2932 = isnan(_719) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _719 : min(cbSceneParam._m0[80u].w, _719));
        float _2933 = _2932 / _719;
        float _2944 = _2933 * _287;
        float _2945 = _288 * _2933;
        float _2946 = (-0.0) - _2945;
        float _2948 = _2933 * _289;
        float _2950 = (cbSceneParam._m0[77u].w * _2946) / _2932;
        float _2951 = _2950 + cbSceneParam._m0[79u].w;
        float _2952 = cbSceneParam._m0[79u].w - _2945;
        float _2958 = sqrt(((_2944 * _2944) + (_2945 * _2945)) + (_2948 * _2948));
        float _2961 = (1.0 - (cbSceneParam._m0[77u].w / _2932)) * _2958;
        float _2966 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2968 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3145;
        if (abs((_2946 - _2950) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3145 = ((((_2951 > 0.0) ? exp2(_2966 * _2951) : (2.0 - exp2(_2968 * _2951))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2961;
        }
        else
        {
            float _3089 = 1.0 / cbSceneParam._m0[80u].x;
            float _3090 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : max(_2951, _2952));
            float _3091 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : min(_2951, _2952));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            _3145 = ((abs(_2958 / _2946) * cbSceneParam._m0[80u].y) * ((((_3100 - _3101) * 2.0) - ((exp2(_2966 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0)))) - exp2(_2966 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))))) * _3089)) - ((exp2(_2968 * _3100) - exp2(_2968 * _3101)) * _3089))) + (_2961 * cbSceneParam._m0[80u].z);
        }
        vec4 _3147 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, 1.0), 0.0);
        float _3156 = exp2((_3145 * (-1.44269502162933349609375)) * (1.0 - _3147.w));
        float _3157 = log2(_3156);
        float _3173 = log2(_2898);
        _2970 = (exp2(_3173 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].x)) * _3147.x) / cbSceneParam._m0[78u].x)) + _2895;
        _2972 = (exp2(_3173 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].y)) * _3147.y) / cbSceneParam._m0[78u].y)) + _2896;
        _2974 = (exp2(_3173 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].z)) * _3147.z) / cbSceneParam._m0[78u].z)) + _2897;
        _2976 = _3156 * _2898;
    }
    else
    {
        _2970 = _2895;
        _2972 = _2896;
        _2974 = _2897;
        _2976 = _2898;
    }
    bool _3183;
    vec4 _2986;
    vec4 _3008;
    float _3010;
    float _3014;
    float _3015;
    float _3016;
    float _3017;
    bool _3027;
    for (;;)
    {
        _2986 = cbMatDynParam._m0[0u];
        float _2988 = roundEven(_2986.y);
        bool _2989 = _2988 == 3.0;
        float _2990 = log2(_2976);
        float _2997 = exp2(_2990 * cbSceneParam._m0[78u].x) * _2867;
        float _2998 = exp2(_2990 * cbSceneParam._m0[78u].y) * _2868;
        float _2999 = exp2(_2990 * cbSceneParam._m0[78u].z) * _2869;
        float _3006 = _726 + (-0.5);
        _3008 = cbMtdParam._m0[1u];
        _3010 = _3008.y * _3006;
        float _3013 = (_2988 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3014 = _3013 * (_2989 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2970)));
        _3015 = _3013 * (_2989 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2972)));
        _3016 = _3013 * (_2989 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2974)));
        _3017 = _3006 * 0.999000012874603271484375;
        _3027 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3027)
        {
            if ((cbInstanceData._m0[_775 + 7u].x + _3017) < 0.5)
            {
                _3183 = true;
                break;
            }
        }
        uint _3124 = _776 + uint(_2986.w);
        if ((cbInstanceData._m0[_3124].w < 1.0) && ((cbInstanceData._m0[_3124].w + _3017) < 0.5))
        {
            _3183 = true;
            break;
        }
        if ((_3010 + 1.0) < _3008.x)
        {
            _3183 = true;
            break;
        }
        _3183 = false;
        break;
    }
    float _3387;
    if (_3183)
    {
        discard_state = true;
        _3387 = 0.0;
    }
    else
    {
        _3387 = cbInstanceData._m0[_2870].w;
    }
    SV_Target.x = _3014;
    SV_Target.y = _3015;
    SV_Target.z = _3016;
    SV_Target.w = _3387;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2870].w;
    discard_exit();
}


