#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Emissive_Glow_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Emissive_Glow_PK_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _627;
float _628;
float _629;
float _630;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    vec4 _124 = texture(sampler2D(M_A_M0_Emissive_Glow_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _130 = _124.x * cbMtdParam._m0[9u].x;
    float _131 = _124.y * cbMtdParam._m0[9u].y;
    float _132 = _124.z * cbMtdParam._m0[9u].z;
    vec4 _154 = texture(sampler2D(M_A_M0_Emissive_Glow_PK_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _160 = gl_FragCoord.x * 0.125;
    float _162 = gl_FragCoord.y * 0.125;
    if (!(cbMtdParam._m0[11u].y >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_160, _162)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _194 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _235 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _245 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _235);
    float _246 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _235);
    float _247 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _235);
    vec4 _249 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_160, _162));
    float _251 = _249.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _359 = sqrt(((_245 * _245) + (_246 * _246)) + (_247 * _247));
        float _366 = (cbMatDynParam._m0[5u].x * _359) + cbMatDynParam._m0[5u].y;
        float _654 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
        float _367 = isnan(1.0) ? _654 : (isnan(_654) ? 1.0 : min(_654, 1.0));
        float _371 = (cbMatDynParam._m0[5u].z * _359) + cbMatDynParam._m0[5u].w;
        float _665 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0))) - _367)) + _367) < ((_251 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _277 + 9u;
    uint _280 = _279 + uint(cbMatDynParam._m0[0u].w);
    float _287 = (cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _154.x;
    float _290 = (cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _154.y;
    float _293 = (cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _154.z;
    float _296 = cbInstanceData._m0[_280].x * (_287 + (cbMtdParam._m0[0u].x * (isnan(0.0) ? _130 : (isnan(_130) ? 0.0 : max(_130, 0.0)))));
    float _298 = cbInstanceData._m0[_280].y * (_290 + (cbMtdParam._m0[0u].y * (isnan(0.0) ? _131 : (isnan(_131) ? 0.0 : max(_131, 0.0)))));
    float _300 = cbInstanceData._m0[_280].z * (_293 + (cbMtdParam._m0[0u].z * (isnan(0.0) ? _132 : (isnan(_132) ? 0.0 : max(_132, 0.0)))));
    float _301 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _303 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _309 = cbMtdParam._m0[2u].x * (_287 * cbInstanceData._m0[_280].x);
    float _310 = cbMtdParam._m0[2u].y * (_290 * cbInstanceData._m0[_280].y);
    float _311 = cbMtdParam._m0[2u].z * (_293 * cbInstanceData._m0[_280].z);
    float _691 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _314 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
    uint _315 = _277 + 6u;
    float _324 = (cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x;
    float _325 = (cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y;
    vec4 _340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_324, _325, (log2((isnan(cbSceneParam._m0[77u].w) ? _194 : (isnan(_194) ? cbSceneParam._m0[77u].w : min(_194, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _342 = _340.x;
    float _343 = _340.y;
    float _344 = _340.z;
    float _345 = _340.w;
    float _425;
    float _427;
    float _429;
    float _431;
    if (_194 > cbSceneParam._m0[78u].w)
    {
        float _386 = isnan(_194) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _194 : min(cbSceneParam._m0[80u].w, _194));
        float _387 = _386 / _194;
        float _398 = _387 * _245;
        float _399 = _246 * _387;
        float _400 = (-0.0) - _399;
        float _402 = _387 * _247;
        float _404 = (cbSceneParam._m0[77u].w * _400) / _386;
        float _405 = _404 + cbSceneParam._m0[79u].w;
        float _406 = cbSceneParam._m0[79u].w - _399;
        float _412 = sqrt(((_398 * _398) + (_399 * _399)) + (_402 * _402));
        float _415 = (1.0 - (cbSceneParam._m0[77u].w / _386)) * _412;
        float _421 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _423 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _553;
        if (abs((_400 - _404) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _553 = ((((_405 > 0.0) ? exp2(_421 * _405) : (2.0 - exp2(_423 * _405))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _415;
        }
        else
        {
            float _508 = 1.0 / cbSceneParam._m0[80u].x;
            float _509 = isnan(_406) ? _405 : (isnan(_405) ? _406 : max(_405, _406));
            float _510 = isnan(_406) ? _405 : (isnan(_405) ? _406 : min(_405, _406));
            float _519 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : min(_509, 0.0));
            float _520 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : min(_510, 0.0));
            _553 = ((abs(_412 / _400) * cbSceneParam._m0[80u].y) * ((((_519 - _520) * 2.0) - ((exp2(_421 * (isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0)))) - exp2(_421 * (isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0))))) * _508)) - ((exp2(_423 * _519) - exp2(_423 * _520)) * _508))) + (_415 * cbSceneParam._m0[80u].z);
        }
        vec4 _555 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_324, _325, 1.0), 0.0);
        float _564 = exp2((_553 * (-1.44269502162933349609375)) * (1.0 - _555.w));
        float _565 = log2(_564);
        float _581 = log2(_345);
        _425 = (exp2(_581 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_565 * cbSceneParam._m0[78u].x)) * _555.x) / cbSceneParam._m0[78u].x)) + _342;
        _427 = (exp2(_581 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_565 * cbSceneParam._m0[78u].y)) * _555.y) / cbSceneParam._m0[78u].y)) + _343;
        _429 = (exp2(_581 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_565 * cbSceneParam._m0[78u].z)) * _555.z) / cbSceneParam._m0[78u].z)) + _344;
        _431 = _564 * _345;
    }
    else
    {
        _425 = _342;
        _427 = _343;
        _429 = _344;
        _431 = _345;
    }
    bool _591;
    vec4 _441;
    vec4 _465;
    float _467;
    float _472;
    float _473;
    float _474;
    float _477;
    float _480;
    float _483;
    float _484;
    bool _495;
    for (;;)
    {
        _441 = cbMatDynParam._m0[0u];
        float _443 = roundEven(_441.y);
        bool _444 = _443 == 3.0;
        float _446 = log2(_431);
        float _450 = exp2(_446 * cbSceneParam._m0[78u].x);
        float _451 = exp2(_446 * cbSceneParam._m0[78u].y);
        float _452 = exp2(_446 * cbSceneParam._m0[78u].z);
        float _453 = _450 * _301;
        float _454 = _451 * _302;
        float _455 = _452 * _303;
        float _462 = _251 + (-0.5);
        _465 = cbMtdParam._m0[1u];
        _467 = _465.y * _462;
        float _471 = (_443 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _472 = _471 * (_444 ? _453 : (_453 + (cbSceneParam._m0[72u].w * _425)));
        _473 = _471 * (_444 ? _454 : (_454 + (cbSceneParam._m0[72u].w * _427)));
        _474 = _471 * (_444 ? _455 : (_455 + (cbSceneParam._m0[72u].w * _429)));
        _477 = ((_309 * _314) * _450) * _471;
        _480 = ((_310 * _314) * _451) * _471;
        _483 = ((_311 * _314) * _452) * _471;
        _484 = _462 * 0.999000012874603271484375;
        _495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_495)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _484) < 0.5)
            {
                _591 = true;
                break;
            }
        }
        uint _545 = _279 + uint(_441.w);
        if ((cbInstanceData._m0[_545].w < 1.0) && ((cbInstanceData._m0[_545].w + _484) < 0.5))
        {
            _591 = true;
            break;
        }
        if ((_467 + 1.0) < _465.x)
        {
            _591 = true;
            break;
        }
        _591 = false;
        break;
    }
    float _596;
    if (_591)
    {
        discard_state = true;
        _596 = 0.0;
    }
    else
    {
        _596 = cbInstanceData._m0[_315].w;
    }
    SV_Target.x = _472;
    SV_Target.y = _473;
    SV_Target.z = _474;
    SV_Target.w = _596;
    SV_Target_1.x = _477;
    SV_Target_1.y = _480;
    SV_Target_1.z = _483;
    SV_Target_1.w = cbInstanceData._m0[_315].w;
    discard_exit();
}


