#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_01_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_01_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_01_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_01_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1226;
float _3628;
float _3629;
float _3630;
float _3631;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _273 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _283 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _273);
    float _284 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _273);
    float _285 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _273);
    float _298 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _316 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_5, SS_BumpMap), vec2((((_298 * cbMtdParam._m0[17u].z) + TEXCOORD_1.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_298 * cbMtdParam._m0[17u].w) + TEXCOORD_1.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _321 = _316.x * 2.0;
    float _323 = _316.y * 2.0;
    float _324 = _321 + (-1.0);
    float _326 = _323 + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3640 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))));
    float _347 = (cbMtdParam._m0[16u].z * _298) + TEXCOORD_1.x;
    float _348 = (cbMtdParam._m0[16u].w * _298) + TEXCOORD_1.y;
    vec4 _360 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_347 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_348 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _365 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].x * cbMtdParam._m0[13u].z);
    float _372 = ((_360.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _374 = (-0.0) - (cbMtdParam._m0[14u].z * ((_360.x * 0.5) + (-0.25)));
    float _375 = fract(_365);
    float _377 = fract(_365 + 0.5);
    float _388 = abs((_375 * 2.0) + (-1.0));
    vec4 _404 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_375 * _374) + _347) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_372 * _375) + _348) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _406 = _404.x;
    float _407 = _404.y;
    vec4 _408 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_377 * _374) + _347) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_372 * _377) + _348) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _434 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].x * _298) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].y * _298) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _444 = ((_321 + (-1.35000002384185791015625)) + ((((((_408.x - _406) * _388) + _406) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_434.x * 0.699999988079071044921875);
    float _447 = ((_323 + (-1.35000002384185791015625)) + ((((((_408.y - _407) * _388) + _407) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_434.y * 0.699999988079071044921875);
    float _450 = fma(_333, _227, fma(_447, _219 * TANGENT.x, _444 * (_205 * _197)));
    float _453 = fma(_333, _228, fma(_447, _219 * TANGENT.y, _444 * (_205 * _198)));
    float _456 = fma(_333, _229, fma(_447, _219 * TANGENT.z, _444 * (_205 * _199)));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _475 = (cbMtdParam._m0[17u].x * _298) + TEXCOORD_1.x;
    float _476 = (cbMtdParam._m0[17u].y * _298) + TEXCOORD_1.y;
    vec4 _488 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_475 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_476 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _475) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _476) + cbTextureTilingScale._m0[0u].w));
    float _518 = (cbMtdParam._m0[15u].z * _298) + TEXCOORD_1.x;
    float _519 = (cbMtdParam._m0[15u].w * _298) + TEXCOORD_1.y;
    vec4 _524 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_518 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_519 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _532 = ((_524.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _534 = (-0.0) - (cbMtdParam._m0[14u].z * ((_524.x * 0.5) + (-0.25)));
    vec4 _551 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_375 * _534) + _518) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_532 * _375) + _519) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _555 = _551.z;
    vec4 _556 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_377 * _534) + _518) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_532 * _377) + _519) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _570 = exp2(log2(_488.x) * cbMtdParam._m0[13u].y) * cbMtdParam._m0[14u].w;
    float _581 = ((_505.x + cbMtdParam._m0[10u].x) + cbMtdParam._m0[9u].x) + (_570 * (((_556.x - _553) * _388) + _553));
    float _584 = ((_505.y + cbMtdParam._m0[10u].y) + cbMtdParam._m0[9u].y) + (_570 * (((_556.y - _554) * _388) + _554));
    float _587 = ((_505.z + cbMtdParam._m0[10u].z) + cbMtdParam._m0[9u].z) + (_570 * (((_556.z - _555) * _388) + _555));
    float _598 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _605 = dot(vec4(_598 * _283, _598 * _284, _598 * _285, 0.0), vec4(_461, _462, _463, 0.0)) - cbMtdParam._m0[12u].w;
    float _3651 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _612 = exp2(log2(1.0 - (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _620 = ((_612 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _581;
    float _622 = ((_612 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _584;
    float _624 = ((_612 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _587;
    float _635 = cbMtdParam._m0[13u].w - cbMtdParam._m0[15u].y;
    float _637 = (sqrt(((_283 * _283) + (_284 * _284)) + (_285 * _285)) - cbMtdParam._m0[15u].y) / (isnan(0.001000000047497451305389404296875) ? _635 : (isnan(_635) ? 0.001000000047497451305389404296875 : max(_635, 0.001000000047497451305389404296875)));
    float _3672 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _649 = gl_FragCoord.x * 0.125;
    float _651 = gl_FragCoord.y * 0.125;
    float _661 = float((((((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (cbMtdParam._m0[15u].x + (-0.001000000047497451305389404296875))) + 0.001000000047497451305389404296875) * cbMtdParam._m0[15u].x) * ((TEXCOORD_1.z * 2.0) - (cbMtdParam._m0[13u].x * _505.w))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_649, _651)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _3683 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _671 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3705 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3716 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _730);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _730);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _730);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    vec4 _749 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_649, _651));
    float _751 = _749.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _908 = sqrt(((_739 * _739) + (_740 * _740)) + (_741 * _741));
        float _914 = (cbMatDynParam._m0[5u].x * _908) + cbMatDynParam._m0[5u].y;
        float _3727 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _919 = (cbMatDynParam._m0[5u].z * _908) + cbMatDynParam._m0[5u].w;
        float _3738 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) - _915)) + _915) < ((_751 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _763 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _764 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _784 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _787 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _790 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _803 = uint(roundEven(NORMAL.w)) * 13u;
    uint _804 = _803 + 9u;
    uint _805 = _804 + uint(cbMatDynParam._m0[0u].w);
    float _811 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_805].x;
    float _812 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_805].y;
    float _813 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_805].z;
    float _3749 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    vec4 _825 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _763, cbSceneParam._m0[86u].y * _764));
    float _828 = _825.x * TEXCOORD_1.w;
    float _829 = dot(vec3(_461, _462, _463), vec3(_746, _747, _748));
    float _832 = _829 * 2.0;
    float _836 = (_832 * _461) - _746;
    float _837 = (_832 * _462) - _747;
    float _838 = (_832 * _463) - _748;
    float _842 = abs(dot(vec3(_746, _747, _748), vec3(_461, _462, _463)));
    float _3782 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _844 = sqrt(_671);
    float _857 = exp2((_844 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_844 * 3.0));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1225;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _951 = fma(_897, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889));
        float _955 = fma(_897, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889));
        float _959 = fma(_897, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889));
        float _983 = _889 + _461;
        float _984 = _893 + _462;
        float _985 = _897 + _463;
        float _995 = fma(_985, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983)) - _951;
        float _996 = fma(_985, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983)) - _955;
        float _997 = fma(_985, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983)) - _959;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_951 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_955 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[34u].z) + ((((((_959 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1053 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1019.x + (-0.5));
        float _1055 = _1053 * (_1019.y + (-0.5));
        float _1056 = _1053 * (_1019.z + (-0.5));
        float _1063 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1026.x + (-0.5));
        float _1065 = _1063 * (_1026.y + (-0.5));
        float _1066 = _1063 * (_1026.z + (-0.5));
        float _1073 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1033.x + (-0.5));
        float _1075 = _1073 * (_1033.y + (-0.5));
        float _1076 = _1073 * (_1033.z + (-0.5));
        float _1083 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1040.x + (-0.5));
        float _1085 = _1083 * (_1040.y + (-0.5));
        float _1086 = _1083 * (_1040.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1107 = (dot(vec3(_461, _462, _463), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1117 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3830 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1119 + 1.0))) + _1124) * _1087;
        float _1134 = _1055 * 0.5;
        float _1135 = _1065 * 0.5;
        float _1136 = _1075 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_461, _462, _463), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3863 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1161 + 1.0))) + _1166) * _1088;
        float _1176 = _1056 * 0.5;
        float _1177 = _1066 * 0.5;
        float _1178 = _1076 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_461, _462, _463), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3896 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1203 + 1.0))) + _1208) * _1089;
        _1225 = _1056;
        _1227 = _1055;
        _1228 = _1054;
        _1229 = _1066;
        _1230 = _1065;
        _1231 = _1064;
        _1232 = _1076;
        _1233 = _1075;
        _1234 = _1074;
        _1235 = _1089;
        _1236 = _1088;
        _1237 = _1087;
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _1226;
        _1227 = _1226;
        _1228 = _1226;
        _1229 = _1226;
        _1230 = _1226;
        _1231 = _1226;
        _1232 = _1226;
        _1233 = _1226;
        _1234 = _1226;
        _1235 = _1226;
        _1236 = _1226;
        _1237 = _1226;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1269 = fma(_897, cbModelParam._m0[30u].z, fma(_893, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _889));
        float _1273 = fma(_897, cbModelParam._m0[31u].z, fma(_893, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _889));
        float _1277 = fma(_897, cbModelParam._m0[32u].z, fma(_893, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _889));
        float _1300 = _889 + _461;
        float _1301 = _893 + _462;
        float _1302 = _897 + _463;
        float _1312 = fma(_1302, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1300)) - _1269;
        float _1313 = fma(_1302, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1300)) - _1273;
        float _1314 = fma(_1302, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1300)) - _1277;
        float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
        float _1331 = ((_1318 * _1312) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1269 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1318 * _1313) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1273 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1318 * _1314) / cbModelParam._m0[35u].z) + ((((((_1277 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        float _1368 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1335.x + (-0.5));
        float _1370 = _1368 * (_1335.y + (-0.5));
        float _1371 = _1368 * (_1335.z + (-0.5));
        float _1378 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1342.x + (-0.5));
        float _1380 = _1378 * (_1342.y + (-0.5));
        float _1381 = _1378 * (_1342.z + (-0.5));
        float _1388 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1349.x + (-0.5));
        float _1390 = _1388 * (_1349.y + (-0.5));
        float _1391 = _1388 * (_1349.z + (-0.5));
        float _1398 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1356.x + (-0.5));
        float _1400 = _1398 * (_1356.y + (-0.5));
        float _1401 = _1398 * (_1356.z + (-0.5));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = _1369 * 0.5;
        float _1406 = _1379 * 0.5;
        float _1407 = _1389 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_461, _462, _463), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3959 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1432 + 1.0))) + _1437) * _1402;
        float _1447 = _1370 * 0.5;
        float _1448 = _1380 * 0.5;
        float _1449 = _1390 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_461, _462, _463), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3992 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1474 + 1.0))) + _1479) * _1403;
        float _1489 = _1371 * 0.5;
        float _1490 = _1381 * 0.5;
        float _1491 = _1391 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_461, _462, _463), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4025 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1516 + 1.0))) + _1521) * _1404;
        _1538 = _1371;
        _1539 = _1370;
        _1540 = _1369;
        _1541 = _1381;
        _1542 = _1380;
        _1543 = _1379;
        _1544 = _1391;
        _1545 = _1390;
        _1546 = _1389;
        _1547 = _1404;
        _1548 = _1403;
        _1549 = _1402;
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
    }
    else
    {
        _1538 = _1226;
        _1539 = _1226;
        _1540 = _1226;
        _1541 = _1226;
        _1542 = _1226;
        _1543 = _1226;
        _1544 = _1226;
        _1545 = _1226;
        _1546 = _1226;
        _1547 = _1226;
        _1548 = _1226;
        _1549 = _1226;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1238)) + _1238;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1239)) + _1239;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1240)) + _1240;
    float _1585 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1562));
    float _1606 = _836 * 0.5;
    float _1607 = _837 * 0.5;
    float _1608 = _838 * 0.5;
    float _1609 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1612 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1615 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1649;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1622 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1225, _1229, _1232, _1235));
        float _1626 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1630 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1637 = dot(vec4(cbModelParam._m0[39u]), vec4(_1606, _1607, _1608, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1660;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1651 = dot(vec4(cbModelParam._m0[40u]), vec4(_1606, _1607, _1608, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1664 = (_1660 * cbModelParam._m0[1u].x) + (_1649 * (1.0 - cbModelParam._m0[1u].x));
    float _1674 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _671);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1674 : min(cbModelParam._m0[25u].z, _1674));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1722 = fma(_897, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889)) + cbModelParam._m0[13u].w;
        float _1726 = fma(_897, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889)) + cbModelParam._m0[14u].w;
        float _1730 = fma(_897, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889)) + cbModelParam._m0[15u].w;
        float _1733 = fma(_838, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _836));
        float _1736 = fma(_838, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _836));
        float _1739 = fma(_838, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _836));
        float _1767;
        if (_1733 > 0.0)
        {
            _1767 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1767 = frontier_phi_19_17_ladder;
        }
        float _1938;
        if (_1736 > 0.0)
        {
            _1938 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1938 = frontier_phi_28_24_ladder;
        }
        float _2382;
        if (_1739 > 0.0)
        {
            _2382 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2382 = frontier_phi_40_35_ladder;
        }
        float _2384 = isnan(_1938) ? _1767 : (isnan(_1767) ? _1938 : min(_1767, _1938));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1733) + _1722;
        float _2390 = (_2385 * _1736) + _1726;
        float _2391 = (_2385 * _1739) + _1730;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2392;
        float _2396 = _2392 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 > _2396) || ((_2390 < _2394) || ((_2389 < _2394) || (_2389 > _2396))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2391, cbModelParam._m0[9u].z, fma(_2390, cbModelParam._m0[9u].y, _2389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2391, cbModelParam._m0[10u].z, fma(_2390, cbModelParam._m0[10u].y, _2389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2391, cbModelParam._m0[11u].z, fma(_2390, cbModelParam._m0[11u].y, _2389 * cbModelParam._m0[11u].x))), _1675);
            frontier_phi_18_40_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _1755 = frontier_phi_18_40_ladder_2;
        _1757 = frontier_phi_18_40_ladder_1;
        _1759 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_836, _837, _838), _1675);
        _1755 = _1743.x * cbModelParam._m0[1u].y;
        _1757 = _1743.y * cbModelParam._m0[1u].y;
        _1759 = _1743.z * cbModelParam._m0[1u].y;
    }
    float _1763 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _671);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1763 : min(cbModelParam._m0[25u].w, _1763));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_897, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_897, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_897, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_838, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _836));
        float _1833 = fma(_838, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _836));
        float _1836 = fma(_838, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _836));
        float _1943;
        if (_1830 > 0.0)
        {
            _1943 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1943 = frontier_phi_30_26_ladder;
        }
        float _2409;
        if (_1833 > 0.0)
        {
            _2409 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2409 = frontier_phi_42_37_ladder;
        }
        float _2769;
        if (_1836 > 0.0)
        {
            _2769 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2769 = frontier_phi_54_49_ladder;
        }
        float _2771 = isnan(_2409) ? _1943 : (isnan(_1943) ? _2409 : min(_1943, _2409));
        float _2772 = isnan(_2769) ? _2771 : (isnan(_2771) ? _2769 : min(_2771, _2769));
        float _2776 = (_2772 * _1830) + _1819;
        float _2777 = (_2772 * _1833) + _1823;
        float _2778 = (_2772 * _1836) + _1827;
        float _2779 = _2772 * 9.9999997473787516355514526367188e-05;
        float _2780 = (-1.0) - _2779;
        float _2782 = _2779 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_2778 > _2782) || ((_2778 < _2780) || ((_2777 > _2782) || ((_2777 < _2780) || ((_2776 < _2780) || (_2776 > _2782))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2778, cbModelParam._m0[17u].z, fma(_2777, cbModelParam._m0[17u].y, _2776 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2778, cbModelParam._m0[18u].z, fma(_2777, cbModelParam._m0[18u].y, _2776 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2778, cbModelParam._m0[19u].z, fma(_2777, cbModelParam._m0[19u].y, _2776 * cbModelParam._m0[19u].x))), _1764);
            frontier_phi_27_54_ladder = _2915.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _2915.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _2915.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_27_54_ladder_2;
        _1857 = frontier_phi_27_54_ladder_1;
        _1859 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_836, _837, _838), _1764);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1871 = ((((1.0 - _857) * ((_844 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_857 * _844)) * _828;
    float _1872 = _1871 * ((cbModelParam._m0[1u].w * (_1855 - _1755)) + _1755);
    float _1873 = _1871 * ((cbModelParam._m0[1u].w * (_1857 - _1757)) + _1757);
    float _1874 = _1871 * ((cbModelParam._m0[1u].w * (_1859 - _1759)) + _1759);
    float _1877 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1930 = _1917 / _1929;
    float _1931 = _1921 / _1929;
    float _1932 = _1925 / _1929;
    float _2079;
    float _2080;
    float _2081;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1959 = ((uint(_1932 > cbSceneParam._m0[59u].y) + uint(_1932 > cbSceneParam._m0[59u].x)) + uint(_1932 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1960 = _1959 + 43u;
        uint _1968 = _1959 + 44u;
        uint _1976 = _1959 + 45u;
        uint _1984 = _1959 + 46u;
        float _1995 = fma(_1929, cbSceneParam._m0[_1960].w, fma(_1925, cbSceneParam._m0[_1960].z, fma(_1921, cbSceneParam._m0[_1960].y, _1917 * cbSceneParam._m0[_1960].x)));
        float _1999 = fma(_1929, cbSceneParam._m0[_1968].w, fma(_1925, cbSceneParam._m0[_1968].z, fma(_1921, cbSceneParam._m0[_1968].y, _1917 * cbSceneParam._m0[_1968].x)));
        float _2007 = fma(_1929, cbSceneParam._m0[_1984].w, fma(_1925, cbSceneParam._m0[_1984].z, fma(_1921, cbSceneParam._m0[_1984].y, _1917 * cbSceneParam._m0[_1984].x)));
        float _2012 = cbSceneParam._m0[33u].z * _2007;
        float _2014 = cbSceneParam._m0[33u].w * _2007;
        float _2017 = fma(_1929, cbSceneParam._m0[_1976].w, fma(_1925, cbSceneParam._m0[_1976].z, fma(_1921, cbSceneParam._m0[_1976].y, _1917 * cbSceneParam._m0[_1976].x))) / _2007;
        float _2065 = (cbSceneParam._m0[33u].x - sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932))) * cbSceneParam._m0[33u].y;
        float _4151 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2072 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 + _1995) / _2007, (_2014 + _1999) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1995) / _2007, (_1999 - _2012) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 - _2012) / _2007, (_1999 - _2014) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 - _2014) / _2007, (_2012 + _1999) / _2007), _2017), 0.0)).x), vec4(0.25)));
        _2079 = 1.0 - (_2072 * cbSceneParam._m0[34u].x);
        _2080 = 1.0 - (_2072 * cbSceneParam._m0[34u].y);
        _2081 = 1.0 - (_2072 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2079 = 1.0;
        _2080 = 1.0;
        _2081 = 1.0;
    }
    float _2145;
    float _2147;
    float _2149;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2133 = fma(_1929, cbSceneParam._m0[63u].w, fma(_1925, cbSceneParam._m0[63u].z, fma(_1921, cbSceneParam._m0[63u].y, _1917 * cbSceneParam._m0[63u].x)));
        float _2134 = fma(_1929, cbSceneParam._m0[60u].w, fma(_1925, cbSceneParam._m0[60u].z, fma(_1921, cbSceneParam._m0[60u].y, _1917 * cbSceneParam._m0[60u].x))) / _2133;
        float _2135 = fma(_1929, cbSceneParam._m0[61u].w, fma(_1925, cbSceneParam._m0[61u].z, fma(_1921, cbSceneParam._m0[61u].y, _1917 * cbSceneParam._m0[61u].x))) / _2133;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2134 >= cbSceneParam._m0[64u].x) && (_2135 >= cbSceneParam._m0[64u].y)) && (_2134 <= cbSceneParam._m0[64u].z)) && (_2135 <= cbSceneParam._m0[64u].w))
        {
            float _2422 = fma(_1929, cbSceneParam._m0[62u].w, fma(_1925, cbSceneParam._m0[62u].z, fma(_1921, cbSceneParam._m0[62u].y, _1917 * cbSceneParam._m0[62u].x))) / _2133;
            float _2426 = isnan(cbSceneParam._m0[41u].w) ? _2422 : (isnan(_2422) ? cbSceneParam._m0[41u].w : max(_2422, cbSceneParam._m0[41u].w));
            float _2469 = (cbSceneParam._m0[33u].x - sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932))) * cbSceneParam._m0[33u].y;
            float _4167 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
            float _2476 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2134, cbSceneParam._m0[33u].w + _2135), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2134, _2135 - cbSceneParam._m0[33u].z), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2134 - cbSceneParam._m0[33u].z, _2135 - cbSceneParam._m0[33u].w), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2134 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2135), _2426), 0.0)).x), vec4(0.25)));
            float _2480 = 1.0 - (_2476 * cbSceneParam._m0[34u].x);
            float _2481 = 1.0 - (_2476 * cbSceneParam._m0[34u].y);
            float _2482 = 1.0 - (_2476 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2482) ? _2081 : (isnan(_2081) ? _2482 : min(_2081, _2482));
            frontier_phi_39_38_ladder_1 = isnan(_2481) ? _2080 : (isnan(_2080) ? _2481 : min(_2080, _2481));
            frontier_phi_39_38_ladder_2 = isnan(_2480) ? _2079 : (isnan(_2079) ? _2480 : min(_2079, _2480));
        }
        else
        {
            frontier_phi_39_38_ladder = _2081;
            frontier_phi_39_38_ladder_1 = _2080;
            frontier_phi_39_38_ladder_2 = _2079;
        }
        _2145 = frontier_phi_39_38_ladder_2;
        _2147 = frontier_phi_39_38_ladder_1;
        _2149 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2145 = _2079;
        _2147 = _2080;
        _2149 = _2081;
    }
    uvec4 _2154 = floatBitsToUint(cbInstanceData._m0[_803 + 5u]);
    uint _2156 = _2154.x * 14u;
    uint _2157 = _2156 + 13u;
    float _2162 = _828 + (-1.0);
    float _2165 = (cbLight._m0[_2157].x * _2162) + 1.0;
    float _2166 = (cbLight._m0[_2157].y * _2162) + 1.0;
    uint _2167 = _2156 + 5u;
    float _2173 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2177 = _2156 + 4u;
    float _2186 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2190 = _2156 | 1u;
    float _2201 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_461, _462, _463));
    float _2204 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_461, _462, _463));
    float _4203 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _4214 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2209 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2211 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _2218 = ((cbLight._m0[_2167].x * _2173) * _2211) + (((cbLight._m0[_2177].x * _2145) * _2186) * _2209);
    float _2219 = ((_2173 * cbLight._m0[_2167].y) * _2211) + (((cbLight._m0[_2177].y * _2147) * _2186) * _2209);
    float _2220 = ((_2173 * cbLight._m0[_2167].z) * _2211) + (((cbLight._m0[_2177].z * _2149) * _2186) * _2209);
    uint _2222 = _2156 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _671) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2156].x + _746;
    float _2238 = cbLight._m0[_2156].y + _747;
    float _2239 = cbLight._m0[_2156].z + _748;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2156].xyz));
    float _4225 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2251 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2252 = dot(vec3(_461, _462, _463), vec3(_2244, _2245, _2246));
    float _4247 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2244, _2245, _2246));
    float _4258 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2275 = (exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2276 = 1.0 - _2236;
    float _2287 = (0.5 / (((_2251 * ((_2250 * _2276) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2276) + _2236) * _2250))) * _2250;
    float _4269 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2303 = _2156 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _671) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2190].x + _746;
    float _2317 = cbLight._m0[_2190].y + _747;
    float _2318 = cbLight._m0[_2190].z + _748;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2190].xyz));
    float _4280 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2330 = dot(vec3(_461, _462, _463), vec3(_2323, _2324, _2325));
    float _4291 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2323, _2324, _2325));
    float _4302 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2315;
    float _2362 = (0.5 / (((_2251 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2352) + _2315) * _2329))) * _2329;
    float _4313 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2374 = (((_2351 * cbLight._m0[_2303].x) * _2364) * _2173) + ((((cbLight._m0[_2222].x * _2145) * _2275) * _2289) * _2186);
    float _2375 = (((_2351 * cbLight._m0[_2303].y) * _2364) * _2173) + ((((cbLight._m0[_2222].y * _2147) * _2275) * _2289) * _2186);
    float _2376 = (((_2351 * cbLight._m0[_2303].z) * _2364) * _2173) + ((((cbLight._m0[_2222].z * _2149) * _2275) * _2289) * _2186);
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_2154.y == 0u)
    {
        uvec4 _2494 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2495 = _2494.x;
        uint _2506 = uint((float(_2494.y) * floor(float(uint(cbSceneParam._m0[85u].y * _764) / _2495))) + floor(float(uint(cbSceneParam._m0[85u].x * _763) / _2495)));
        float _2516 = (log2(_1932 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2517 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        uint _2520 = uint(isnan(14.0) ? _2517 : (isnan(_2517) ? 14.0 : min(_2517, 14.0)));
        uvec4 _2525 = texelFetch(g_lightClusterGridBuffer, int(((_2520 << 2u) + (_2506 << 6u)) >> 2u));
        uint _2526 = _2525.x;
        uint _2527 = _2494.z;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((((1u << ((_2527 >> 4u) & 15u)) + 4294967295u) & _2526) == 0u) || ((_2527 & 240u) == 0u))
        {
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
        }
        else
        {
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            uint _2833 = 0u;
            uint _2842;
            bool _2843;
            for (;;)
            {
                _2842 = texelFetch(g_lightClassification, int((((_2520 << 5u) + (_2506 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                _2843 = _2842 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2843)
                {
                    frontier_phi_65_pred = _2829;
                    frontier_phi_65_pred_1 = _2828;
                    frontier_phi_65_pred_2 = _2827;
                    frontier_phi_65_pred_3 = _2830;
                    frontier_phi_65_pred_4 = _2832;
                    frontier_phi_65_pred_5 = _2831;
                }
                else
                {
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    uint _2999;
                    _2993 = _2827;
                    _2994 = _2828;
                    _2995 = _2829;
                    _2996 = _2830;
                    _2997 = _2831;
                    _2998 = _2832;
                    _2999 = _2842;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    for (;;)
                    {
                        uint _3003 = uint(findLSB(_2999)) + (_2833 << 5u);
                        uint _3000 = (_2999 + 4294967295u) & _2999;
                        uint _3005 = _3003 * 48u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3025 = (_3003 * 48u) + 4u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3044 = (_3003 * 48u) + 8u;
                        vec3 _3055 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x));
                        float _3059 = _3019.x - _1930;
                        float _3060 = _3019.y - _1931;
                        float _3061 = _3019.z - _1932;
                        float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                        float _3065 = inversesqrt(_3062);
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3069 = dot(vec3(_784, _787, _790), vec3(_3066, _3067, _3068));
                        float _3074 = 1.0 - (_3062 * _3019.w);
                        float _4334 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3076 = sqrt(_3062) * _3038.w;
                        float _3079 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3069) + _3080;
                        float _3086 = _3076 * _3076;
                        float _3089 = ((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3075) / ((_3086 * 0.699999988079071044921875) + 1.0);
                        float _3093 = (-0.0) - _1930;
                        float _3094 = (-0.0) - _1931;
                        float _3095 = (-0.0) - _1932;
                        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                        float _3110 = 1.0 - _844;
                        float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                        float _3118 = _3117 * _3117;
                        float _3119 = _3118 * _3118;
                        float _3120 = _3100 + _3066;
                        float _3121 = _3101 + _3067;
                        float _3122 = _3102 + _3068;
                        float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                        float _3130 = dot(vec3(_784, _787, _790), vec3(_3100, _3101, _3102));
                        float _4350 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3133 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3134 = dot(vec3(_784, _787, _790), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                        float _4361 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3137 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                        float _3142 = _3079 * _3118;
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3069) + _3143;
                        float _4372 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3147 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3148 = 1.0 - _3118;
                        float _3158 = (0.5 / (((_3147 * ((_3133 * _3148) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3118) * _3133))) * _3147;
                        float _4383 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3169 = (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125))) * _3075;
                        _2923 = (_3089 * _3038.x) + _2996;
                        _2924 = (_3089 * _3038.y) + _2997;
                        _2925 = (_3089 * _3038.z) + _2998;
                        _2920 = (_3169 * _3055.x) + _2993;
                        _2921 = (_3169 * _3055.y) + _2994;
                        _2922 = (_3169 * _3055.z) + _2995;
                        if (_3000 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _3000;
                        }
                    }
                    frontier_phi_65_pred = _2922;
                    frontier_phi_65_pred_1 = _2921;
                    frontier_phi_65_pred_2 = _2920;
                    frontier_phi_65_pred_3 = _2923;
                    frontier_phi_65_pred_4 = _2925;
                    frontier_phi_65_pred_5 = _2924;
                }
                _2654 = frontier_phi_65_pred;
                _2652 = frontier_phi_65_pred_1;
                _2650 = frontier_phi_65_pred_2;
                _2656 = frontier_phi_65_pred_3;
                _2660 = frontier_phi_65_pred_4;
                _2658 = frontier_phi_65_pred_5;
                uint _2834 = _2833 + 1u;
                if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2827 = _2650;
                    _2828 = _2652;
                    _2829 = _2654;
                    _2830 = _2656;
                    _2831 = _2658;
                    _2832 = _2660;
                    _2833 = _2834;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
        }
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.z;
        uint _2666 = (_2664 >> 8u) & 15u;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((4294967295u << _2666) & _2526) == 0u)
        {
            _2795 = _2649;
            _2797 = _2651;
            _2799 = _2653;
            _2801 = _2655;
            _2803 = _2657;
            _2805 = _2659;
        }
        else
        {
            float _2820 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
            float _2821 = _2820 * _1930;
            float _2822 = _2820 * _1931;
            float _2823 = _2820 * _1932;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2666 < ((_2664 >> 12u) & 15u))
            {
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2976 = _2649;
                float _2977 = _2651;
                float _2978 = _2653;
                float _2979 = _2655;
                float _2980 = _2657;
                float _2981 = _2659;
                uint _2982 = _2666;
                uint _2991;
                bool _2992;
                for (;;)
                {
                    _2991 = texelFetch(g_lightClassification, int((((_2520 << 5u) + (_2506 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                    _2992 = _2991 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2992)
                    {
                        frontier_phi_76_pred = _2978;
                        frontier_phi_76_pred_1 = _2977;
                        frontier_phi_76_pred_2 = _2976;
                        frontier_phi_76_pred_3 = _2981;
                        frontier_phi_76_pred_4 = _2980;
                        frontier_phi_76_pred_5 = _2979;
                    }
                    else
                    {
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3196 = _2976;
                        float _3197 = _2977;
                        float _3198 = _2978;
                        float _3199 = _2979;
                        float _3200 = _2980;
                        float _3201 = _2981;
                        uint _3202 = _2991;
                        uint _3203;
                        vec4 _3228;
                        float _3229;
                        vec4 _3244;
                        vec3 _3256;
                        vec4 _3271;
                        vec4 _3287;
                        float _3334;
                        bool _3335;
                        for (;;)
                        {
                            uint _3213 = ((_2982 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3202));
                            _3203 = (_3202 + 4294967295u) & _3202;
                            uint _3215 = _3213 * 40u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            _3229 = _3228.w;
                            uint _3231 = (_3213 * 40u) + 4u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3246 = (_3213 * 40u) + 8u;
                            _3256 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x));
                            uint _3258 = (_3213 * 40u) + 16u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3274 = (_3213 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3290 = (_3213 * 40u) + 24u;
                            vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3309 = (_3213 * 40u) + 28u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3334 = fma(_1932, _3322.z, fma(_1931, _3322.y, _3322.x * _1930)) + _3322.w;
                            _3335 = !((fma(_1932, _3303.z, fma(_1931, _3303.y, _3303.x * _1930)) + _3303.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3335)
                            {
                                float _3362 = _3228.x - _1930;
                                float _3363 = _3228.y - _1931;
                                float _3364 = _3228.z - _1932;
                                float _3365 = dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364));
                                float _3368 = inversesqrt(_3365);
                                float _3369 = _3368 * _3362;
                                float _3370 = _3368 * _3363;
                                float _3371 = _3368 * _3364;
                                float _3375 = 1.0 - (_3365 / (_3229 * _3229));
                                float _4394 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3380 = sqrt(_3365) * _3244.w;
                                float _3382 = 1.39999997615814208984375 / (_3380 + 1.39999997615814208984375);
                                float _3383 = _3382 * _3382;
                                float _3386 = ((1.0 - _3383) * dot(vec3(_3369, _3370, _3371), vec3(_784, _787, _790))) + _3383;
                                float _3389 = _3380 * _3380;
                                float _3393 = (fma(_1932, _3271.z, fma(_1931, _3271.y, _3271.x * _1930)) + _3271.w) / _3334;
                                float _3394 = (fma(_1932, _3287.z, fma(_1931, _3287.y, _3287.x * _1930)) + _3287.w) / _3334;
                                float _3398 = 1.0 - dot(vec2(_3393, _3394), vec2(_3393, _3394));
                                float _4410 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3400 = _3399 * (((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3376) / ((_3389 * 0.699999988079071044921875) + 1.0));
                                float _3412 = exp2(log2(1.0 / ((_3389 * 3.5) + 5.0)) * 0.25);
                                float _3413 = 1.0 - _844;
                                float _3420 = sqrt(1.0 - ((1.0 - (_3413 * _3413)) * (1.0 - (_3412 * _3412))));
                                float _3421 = _3420 * _3420;
                                float _3422 = _3421 * _3421;
                                float _3423 = _3369 - _2821;
                                float _3424 = _3370 - _2822;
                                float _3425 = _3371 - _2823;
                                float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                                float _3433 = dot(vec3(_784, _787, _790), vec3((-0.0) - _2821, (-0.0) - _2822, (-0.0) - _2823));
                                float _4421 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3436 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3437 = dot(vec3(_784, _787, _790), vec3(_3429 * _3423, _3429 * _3424, _3429 * _3425));
                                float _4432 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3440 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3444 = ((_3440 * _3440) * (_3422 + (-1.0))) + 1.0;
                                float _3445 = _3382 * _3421;
                                float _3446 = _3445 * _3445;
                                float _3452 = ((1.0 - _3446) * dot(vec3(_784, _787, _790), vec3(_3369, _3370, _3371))) + _3446;
                                float _4443 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3454 = 1.0 - _3421;
                                float _3464 = (0.5 / (((_3453 * ((_3436 * _3454) + _3421)) + 9.9999999392252902907785028219223e-09) + (((_3453 * _3454) + _3421) * _3436))) * _3453;
                                float _4454 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3474 = (_3399 * _3376) * (((_3422 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3444 * _3444) * ((_3389 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3474 * _3256.z;
                                frontier_phi_82_pred_1 = _3474 * _3256.y;
                                frontier_phi_82_pred_2 = _3474 * _3256.x;
                                frontier_phi_82_pred_3 = _3400 * _3244.z;
                                frontier_phi_82_pred_4 = _3400 * _3244.y;
                                frontier_phi_82_pred_5 = _3400 * _3244.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3480 = frontier_phi_82_pred;
                            _3479 = frontier_phi_82_pred_1;
                            _3478 = frontier_phi_82_pred_2;
                            _3483 = frontier_phi_82_pred_3;
                            _3482 = frontier_phi_82_pred_4;
                            _3481 = frontier_phi_82_pred_5;
                            _3186 = _3481 + _3199;
                            _3187 = _3482 + _3200;
                            _3188 = _3483 + _3201;
                            _3183 = _3478 + _3196;
                            _3184 = _3479 + _3197;
                            _3185 = _3480 + _3198;
                            if (_3203 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3203;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3185;
                        frontier_phi_76_pred_1 = _3184;
                        frontier_phi_76_pred_2 = _3183;
                        frontier_phi_76_pred_3 = _3188;
                        frontier_phi_76_pred_4 = _3187;
                        frontier_phi_76_pred_5 = _3186;
                    }
                    _2800 = frontier_phi_76_pred;
                    _2798 = frontier_phi_76_pred_1;
                    _2796 = frontier_phi_76_pred_2;
                    _2806 = frontier_phi_76_pred_3;
                    _2804 = frontier_phi_76_pred_4;
                    _2802 = frontier_phi_76_pred_5;
                    uint _2983 = _2982 + 1u;
                    if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2976 = _2796;
                        _2977 = _2798;
                        _2978 = _2800;
                        _2979 = _2802;
                        _2980 = _2804;
                        _2981 = _2806;
                        _2982 = _2983;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2806;
                frontier_phi_56_57_ladder_1 = _2804;
                frontier_phi_56_57_ladder_2 = _2802;
                frontier_phi_56_57_ladder_3 = _2798;
                frontier_phi_56_57_ladder_4 = _2796;
                frontier_phi_56_57_ladder_5 = _2800;
            }
            else
            {
                frontier_phi_56_57_ladder = _2659;
                frontier_phi_56_57_ladder_1 = _2657;
                frontier_phi_56_57_ladder_2 = _2655;
                frontier_phi_56_57_ladder_3 = _2651;
                frontier_phi_56_57_ladder_4 = _2649;
                frontier_phi_56_57_ladder_5 = _2653;
            }
            _2795 = frontier_phi_56_57_ladder_4;
            _2797 = frontier_phi_56_57_ladder_3;
            _2799 = frontier_phi_56_57_ladder_5;
            _2801 = frontier_phi_56_57_ladder_2;
            _2803 = frontier_phi_56_57_ladder_1;
            _2805 = frontier_phi_56_57_ladder;
        }
        float _2810 = isnan(1.0) ? _828 : (isnan(_828) ? 1.0 : min(_828, 1.0));
        _2538 = (_2810 * _2801) + _2218;
        _2540 = (_2810 * _2803) + _2219;
        _2542 = (_2810 * _2805) + _2220;
        _2544 = ((_2795 * 0.039999999105930328369140625) * _2810) + _2374;
        _2546 = ((_2797 * 0.039999999105930328369140625) * _2810) + _2375;
        _2548 = ((_2799 * 0.039999999105930328369140625) * _2810) + _2376;
    }
    else
    {
        _2538 = _2218;
        _2540 = _2219;
        _2542 = _2220;
        _2544 = _2374;
        _2546 = _2375;
        _2548 = _2376;
    }
    uint _2554 = _804 + uint(cbMatDynParam._m0[0u].w);
    float _4470 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4481 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4492 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2579 = (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2538 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _828))) + ((_2544 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1664)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[12u].y * _581) * cbInstanceData._m0[_2554].x);
    float _2581 = (((cbMtdParam._m0[12u].y * _584) * cbInstanceData._m0[_2554].y) + ((_2546 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1664)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2540 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _828)));
    float _2583 = (((cbMtdParam._m0[12u].y * _587) * cbInstanceData._m0[_2554].z) + ((_2548 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1664)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2542 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _828)));
    float _2584 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2585 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2586 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    uint _2587 = _803 + 6u;
    float _2595 = _763 / cbSceneParam._m0[86u].x;
    float _2596 = _764 / cbSceneParam._m0[86u].y;
    vec4 _2610 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2595, _2596, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2612 = _2610.x;
    float _2613 = _2610.y;
    float _2614 = _2610.z;
    float _2615 = _2610.w;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2674 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2675 = _2674 / _690;
        float _2686 = _2675 * _739;
        float _2687 = _740 * _2675;
        float _2688 = (-0.0) - _2687;
        float _2689 = _2675 * _741;
        float _2691 = (cbSceneParam._m0[77u].w * _2688) / _2674;
        float _2692 = _2691 + cbSceneParam._m0[79u].w;
        float _2693 = cbSceneParam._m0[79u].w - _2687;
        float _2699 = sqrt(((_2686 * _2686) + (_2687 * _2687)) + (_2689 * _2689));
        float _2702 = (1.0 - (cbSceneParam._m0[77u].w / _2674)) * _2699;
        float _2707 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2709 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2933;
        if (abs((_2688 - _2691) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2933 = ((((_2692 > 0.0) ? exp2(_2707 * _2692) : (2.0 - exp2(_2709 * _2692))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2702;
        }
        else
        {
            float _2856 = 1.0 / cbSceneParam._m0[80u].x;
            float _2857 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : max(_2692, _2693));
            float _2858 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : min(_2692, _2693));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            _2933 = ((abs(_2699 / _2688) * cbSceneParam._m0[80u].y) * ((((_2867 - _2868) * 2.0) - ((exp2(_2707 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0)))) - exp2(_2707 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))))) * _2856)) - ((exp2(_2709 * _2867) - exp2(_2709 * _2868)) * _2856))) + (_2702 * cbSceneParam._m0[80u].z);
        }
        vec4 _2935 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2595, _2596, 1.0), 0.0);
        float _2944 = exp2((_2933 * (-1.44269502162933349609375)) * (1.0 - _2935.w));
        float _2945 = log2(_2944);
        float _2961 = log2(_2615);
        _2711 = (exp2(_2961 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].x)) * _2935.x) / cbSceneParam._m0[78u].x)) + _2612;
        _2713 = (exp2(_2961 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].y)) * _2935.y) / cbSceneParam._m0[78u].y)) + _2613;
        _2715 = (exp2(_2961 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].z)) * _2935.z) / cbSceneParam._m0[78u].z)) + _2614;
        _2717 = _2944 * _2615;
    }
    else
    {
        _2711 = _2612;
        _2713 = _2613;
        _2715 = _2614;
        _2717 = _2615;
    }
    bool _2971;
    vec4 _2727;
    vec4 _2749;
    float _2751;
    float _2755;
    float _2756;
    float _2757;
    float _2758;
    bool _2768;
    for (;;)
    {
        _2727 = cbMatDynParam._m0[0u];
        float _2729 = roundEven(_2727.y);
        bool _2730 = _2729 == 3.0;
        float _2731 = log2(_2717);
        float _2738 = exp2(_2731 * cbSceneParam._m0[78u].x) * _2584;
        float _2739 = exp2(_2731 * cbSceneParam._m0[78u].y) * _2585;
        float _2740 = exp2(_2731 * cbSceneParam._m0[78u].z) * _2586;
        float _2747 = _751 + (-0.5);
        _2749 = cbMtdParam._m0[1u];
        _2751 = _2749.y * _2747;
        float _2754 = (_2729 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2755 = _2754 * (_2730 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2711)));
        _2756 = _2754 * (_2730 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2713)));
        _2757 = _2754 * (_2730 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2715)));
        _2758 = _2747 * 0.999000012874603271484375;
        _2768 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2768)
        {
            if ((cbInstanceData._m0[_803 + 7u].x + _2758) < 0.5)
            {
                _2971 = true;
                break;
            }
        }
        uint _2891 = _804 + uint(_2727.w);
        if ((cbInstanceData._m0[_2891].w < 1.0) && ((cbInstanceData._m0[_2891].w + _2758) < 0.5))
        {
            _2971 = true;
            break;
        }
        if ((_2751 + _661) < _2749.x)
        {
            _2971 = true;
            break;
        }
        _2971 = false;
        break;
    }
    float _3174;
    if (_2971)
    {
        discard_state = true;
        _3174 = 0.0;
    }
    else
    {
        _3174 = cbInstanceData._m0[_2587].w;
    }
    SV_Target.x = _2755;
    SV_Target.y = _2756;
    SV_Target.z = _2757;
    SV_Target.w = _3174;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2587].w;
    discard_exit();
}


