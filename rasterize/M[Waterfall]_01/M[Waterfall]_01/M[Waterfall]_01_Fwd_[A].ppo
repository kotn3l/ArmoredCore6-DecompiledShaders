#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_01_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_01_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_01_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_01_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1222;
float _3341;
float _3342;
float _3343;
float _3344;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    float _294 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _312 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_5, SS_BumpMap), vec2((((_294 * cbMtdParam._m0[17u].z) + TEXCOORD_1.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_294 * cbMtdParam._m0[17u].w) + TEXCOORD_1.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _317 = _312.x * 2.0;
    float _319 = _312.y * 2.0;
    float _320 = _317 + (-1.0);
    float _322 = _319 + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3353 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _343 = (cbMtdParam._m0[16u].z * _294) + TEXCOORD_1.x;
    float _344 = (cbMtdParam._m0[16u].w * _294) + TEXCOORD_1.y;
    vec4 _356 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_343 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_344 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _361 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].x * cbMtdParam._m0[13u].z);
    float _368 = ((_356.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _370 = (-0.0) - (cbMtdParam._m0[14u].z * ((_356.x * 0.5) + (-0.25)));
    float _371 = fract(_361);
    float _373 = fract(_361 + 0.5);
    float _384 = abs((_371 * 2.0) + (-1.0));
    vec4 _400 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_371 * _370) + _343) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_368 * _371) + _344) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _402 = _400.x;
    float _403 = _400.y;
    vec4 _404 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_373 * _370) + _343) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_368 * _373) + _344) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _430 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].x * _294) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].y * _294) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _440 = ((_317 + (-1.35000002384185791015625)) + ((((((_404.x - _402) * _384) + _402) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_430.x * 0.699999988079071044921875);
    float _443 = ((_319 + (-1.35000002384185791015625)) + ((((((_404.y - _403) * _384) + _403) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_430.y * 0.699999988079071044921875);
    float _446 = fma(_329, _223, fma(_443, _215 * TANGENT.x, _440 * (_201 * _193)));
    float _449 = fma(_329, _224, fma(_443, _215 * TANGENT.y, _440 * (_201 * _194)));
    float _452 = fma(_329, _225, fma(_443, _215 * TANGENT.z, _440 * (_201 * _195)));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _471 = (cbMtdParam._m0[17u].x * _294) + TEXCOORD_1.x;
    float _472 = (cbMtdParam._m0[17u].y * _294) + TEXCOORD_1.y;
    vec4 _484 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_471 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_472 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _471) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _472) + cbTextureTilingScale._m0[0u].w));
    float _514 = (cbMtdParam._m0[15u].z * _294) + TEXCOORD_1.x;
    float _515 = (cbMtdParam._m0[15u].w * _294) + TEXCOORD_1.y;
    vec4 _520 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_514 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_515 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _528 = ((_520.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _530 = (-0.0) - (cbMtdParam._m0[14u].z * ((_520.x * 0.5) + (-0.25)));
    vec4 _547 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_371 * _530) + _514) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_528 * _371) + _515) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    vec4 _552 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_373 * _530) + _514) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_528 * _373) + _515) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _566 = exp2(log2(_484.x) * cbMtdParam._m0[13u].y) * cbMtdParam._m0[14u].w;
    float _577 = ((_501.x + cbMtdParam._m0[10u].x) + cbMtdParam._m0[9u].x) + (_566 * (((_552.x - _549) * _384) + _549));
    float _580 = ((_501.y + cbMtdParam._m0[10u].y) + cbMtdParam._m0[9u].y) + (_566 * (((_552.y - _550) * _384) + _550));
    float _583 = ((_501.z + cbMtdParam._m0[10u].z) + cbMtdParam._m0[9u].z) + (_566 * (((_552.z - _551) * _384) + _551));
    float _594 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _601 = dot(vec4(_594 * _279, _594 * _280, _594 * _281, 0.0), vec4(_457, _458, _459, 0.0)) - cbMtdParam._m0[12u].w;
    float _3364 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _608 = exp2(log2(1.0 - (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _616 = ((_608 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _577;
    float _618 = ((_608 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _580;
    float _620 = ((_608 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _583;
    float _631 = cbMtdParam._m0[13u].w - cbMtdParam._m0[15u].y;
    float _633 = (sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281)) - cbMtdParam._m0[15u].y) / (isnan(0.001000000047497451305389404296875) ? _631 : (isnan(_631) ? 0.001000000047497451305389404296875 : max(_631, 0.001000000047497451305389404296875)));
    float _3385 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _645 = gl_FragCoord.x * 0.125;
    float _647 = gl_FragCoord.y * 0.125;
    float _657 = float((((((isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (cbMtdParam._m0[15u].x + (-0.001000000047497451305389404296875))) + 0.001000000047497451305389404296875) * cbMtdParam._m0[15u].x) * ((TEXCOORD_1.z * 2.0) - (cbMtdParam._m0[13u].x * _501.w))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_645, _647)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _3396 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _667 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3418 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3429 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _735 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _726);
    float _736 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _726);
    float _737 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _726);
    float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
    float _742 = _735 * _741;
    float _743 = _736 * _741;
    float _744 = _737 * _741;
    vec4 _745 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_645, _647));
    float _747 = _745.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _904 = sqrt(((_735 * _735) + (_736 * _736)) + (_737 * _737));
        float _910 = (cbMatDynParam._m0[5u].x * _904) + cbMatDynParam._m0[5u].y;
        float _3440 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _915 = (cbMatDynParam._m0[5u].z * _904) + cbMatDynParam._m0[5u].w;
        float _3451 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) - _911)) + _911) < ((_747 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _780 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _783 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _786 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _799 = uint(roundEven(NORMAL.w)) * 13u;
    uint _800 = _799 + 9u;
    uint _801 = _800 + uint(cbMatDynParam._m0[0u].w);
    float _807 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_801].x;
    float _808 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_801].y;
    float _809 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_801].z;
    float _3462 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    vec4 _821 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _824 = _821.x * TEXCOORD_1.w;
    float _825 = dot(vec3(_457, _458, _459), vec3(_742, _743, _744));
    float _828 = _825 * 2.0;
    float _832 = (_828 * _457) - _742;
    float _833 = (_828 * _458) - _743;
    float _834 = (_828 * _459) - _744;
    float _838 = abs(dot(vec3(_742, _743, _744), vec3(_457, _458, _459)));
    float _3495 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _840 = sqrt(_667);
    float _853 = exp2((_840 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_840 * 3.0));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1221;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _947 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _951 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _955 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _979 = _885 + _457;
        float _980 = _889 + _458;
        float _981 = _893 + _459;
        float _991 = fma(_981, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979)) - _947;
        float _992 = fma(_981, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979)) - _951;
        float _993 = fma(_981, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979)) - _955;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_947 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_951 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[34u].z) + ((((((_955 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1049 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1015.x + (-0.5));
        float _1051 = _1049 * (_1015.y + (-0.5));
        float _1052 = _1049 * (_1015.z + (-0.5));
        float _1059 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1022.x + (-0.5));
        float _1061 = _1059 * (_1022.y + (-0.5));
        float _1062 = _1059 * (_1022.z + (-0.5));
        float _1069 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1029.x + (-0.5));
        float _1071 = _1069 * (_1029.y + (-0.5));
        float _1072 = _1069 * (_1029.z + (-0.5));
        float _1079 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1036.x + (-0.5));
        float _1081 = _1079 * (_1036.y + (-0.5));
        float _1082 = _1079 * (_1036.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1103 = (dot(vec3(_457, _458, _459), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1113 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3543 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1115 + 1.0))) + _1120) * _1083;
        float _1130 = _1051 * 0.5;
        float _1131 = _1061 * 0.5;
        float _1132 = _1071 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_457, _458, _459), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3576 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1157 + 1.0))) + _1162) * _1084;
        float _1172 = _1052 * 0.5;
        float _1173 = _1062 * 0.5;
        float _1174 = _1072 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_457, _458, _459), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3609 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1199 + 1.0))) + _1204) * _1085;
        _1221 = _1052;
        _1223 = _1051;
        _1224 = _1050;
        _1225 = _1062;
        _1226 = _1061;
        _1227 = _1060;
        _1228 = _1072;
        _1229 = _1071;
        _1230 = _1070;
        _1231 = _1085;
        _1232 = _1084;
        _1233 = _1083;
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _1222;
        _1223 = _1222;
        _1224 = _1222;
        _1225 = _1222;
        _1226 = _1222;
        _1227 = _1222;
        _1228 = _1222;
        _1229 = _1222;
        _1230 = _1222;
        _1231 = _1222;
        _1232 = _1222;
        _1233 = _1222;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1265 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1269 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1273 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1296 = _885 + _457;
        float _1297 = _889 + _458;
        float _1298 = _893 + _459;
        float _1308 = fma(_1298, cbModelParam._m0[30u].z, fma(_1297, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1296)) - _1265;
        float _1309 = fma(_1298, cbModelParam._m0[31u].z, fma(_1297, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1296)) - _1269;
        float _1310 = fma(_1298, cbModelParam._m0[32u].z, fma(_1297, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1296)) - _1273;
        float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
        float _1327 = ((_1314 * _1308) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1265 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1314 * _1309) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1269 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1314 * _1310) / cbModelParam._m0[35u].z) + ((((((_1273 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        float _1364 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1331.x + (-0.5));
        float _1366 = _1364 * (_1331.y + (-0.5));
        float _1367 = _1364 * (_1331.z + (-0.5));
        float _1374 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1338.x + (-0.5));
        float _1376 = _1374 * (_1338.y + (-0.5));
        float _1377 = _1374 * (_1338.z + (-0.5));
        float _1384 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1345.x + (-0.5));
        float _1386 = _1384 * (_1345.y + (-0.5));
        float _1387 = _1384 * (_1345.z + (-0.5));
        float _1394 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1352.x + (-0.5));
        float _1396 = _1394 * (_1352.y + (-0.5));
        float _1397 = _1394 * (_1352.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_457, _458, _459), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3672 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1428 + 1.0))) + _1433) * _1398;
        float _1443 = _1366 * 0.5;
        float _1444 = _1376 * 0.5;
        float _1445 = _1386 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_457, _458, _459), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3705 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1470 + 1.0))) + _1475) * _1399;
        float _1485 = _1367 * 0.5;
        float _1486 = _1377 * 0.5;
        float _1487 = _1387 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_457, _458, _459), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _3738 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1512 + 1.0))) + _1517) * _1400;
        _1534 = _1367;
        _1535 = _1366;
        _1536 = _1365;
        _1537 = _1377;
        _1538 = _1376;
        _1539 = _1375;
        _1540 = _1387;
        _1541 = _1386;
        _1542 = _1385;
        _1543 = _1400;
        _1544 = _1399;
        _1545 = _1398;
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1222;
        _1535 = _1222;
        _1536 = _1222;
        _1537 = _1222;
        _1538 = _1222;
        _1539 = _1222;
        _1540 = _1222;
        _1541 = _1222;
        _1542 = _1222;
        _1543 = _1222;
        _1544 = _1222;
        _1545 = _1222;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1234)) + _1234;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1235)) + _1235;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1236)) + _1236;
    float _1581 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1558));
    float _1602 = _832 * 0.5;
    float _1603 = _833 * 0.5;
    float _1604 = _834 * 0.5;
    float _1605 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1608 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1611 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1645;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1618 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1221, _1225, _1228, _1231));
        float _1622 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1626 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1633 = dot(vec4(cbModelParam._m0[39u]), vec4(_1602, _1603, _1604, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1656;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1647 = dot(vec4(cbModelParam._m0[40u]), vec4(_1602, _1603, _1604, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1660 = (_1656 * cbModelParam._m0[1u].x) + (_1645 * (1.0 - cbModelParam._m0[1u].x));
    float _1670 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _667);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1670 : min(cbModelParam._m0[25u].z, _1670));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1718 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1722 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1726 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1729 = fma(_834, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832));
        float _1732 = fma(_834, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832));
        float _1735 = fma(_834, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832));
        float _1763;
        if (_1729 > 0.0)
        {
            _1763 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1763 = frontier_phi_19_17_ladder;
        }
        float _2111;
        if (_1732 > 0.0)
        {
            _2111 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2111 = frontier_phi_28_24_ladder;
        }
        float _2434;
        if (_1735 > 0.0)
        {
            _2434 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2434 = frontier_phi_42_35_ladder;
        }
        float _2436 = isnan(_2111) ? _1763 : (isnan(_1763) ? _2111 : min(_1763, _2111));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1729) + _1718;
        float _2442 = (_2437 * _1732) + _1722;
        float _2443 = (_2437 * _1735) + _1726;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2444;
        float _2447 = _2444 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2443 > _2447) || ((_2443 < _2445) || ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 < _2445) || (_2441 > _2447))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2443, cbModelParam._m0[9u].z, fma(_2442, cbModelParam._m0[9u].y, _2441 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2443, cbModelParam._m0[10u].z, fma(_2442, cbModelParam._m0[10u].y, _2441 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2443, cbModelParam._m0[11u].z, fma(_2442, cbModelParam._m0[11u].y, _2441 * cbModelParam._m0[11u].x))), _1671);
            frontier_phi_18_42_ladder = _2585.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2585.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2585.x * cbModelParam._m0[1u].y;
        }
        _1751 = frontier_phi_18_42_ladder_2;
        _1753 = frontier_phi_18_42_ladder_1;
        _1755 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_832, _833, _834), _1671);
        _1751 = _1739.x * cbModelParam._m0[1u].y;
        _1753 = _1739.y * cbModelParam._m0[1u].y;
        _1755 = _1739.z * cbModelParam._m0[1u].y;
    }
    float _1759 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _667);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1759 : min(cbModelParam._m0[25u].w, _1759));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1815 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1819 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1823 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1826 = fma(_834, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832));
        float _1829 = fma(_834, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832));
        float _1832 = fma(_834, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832));
        float _2116;
        if (_1826 > 0.0)
        {
            _2116 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2116 = frontier_phi_30_26_ladder;
        }
        float _2460;
        if (_1829 > 0.0)
        {
            _2460 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2460 = frontier_phi_44_37_ladder;
        }
        float _2650;
        if (_1832 > 0.0)
        {
            _2650 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2650 = frontier_phi_62_55_ladder;
        }
        float _2652 = isnan(_2460) ? _2116 : (isnan(_2116) ? _2460 : min(_2116, _2460));
        float _2653 = isnan(_2650) ? _2652 : (isnan(_2652) ? _2650 : min(_2652, _2650));
        float _2657 = (_2653 * _1826) + _1815;
        float _2658 = (_2653 * _1829) + _1819;
        float _2659 = (_2653 * _1832) + _1823;
        float _2660 = _2653 * 9.9999997473787516355514526367188e-05;
        float _2661 = (-1.0) - _2660;
        float _2663 = _2660 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2659 > _2663) || ((_2659 < _2661) || ((_2658 > _2663) || ((_2658 < _2661) || ((_2657 < _2661) || (_2657 > _2663))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2659, cbModelParam._m0[17u].z, fma(_2658, cbModelParam._m0[17u].y, _2657 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2659, cbModelParam._m0[18u].z, fma(_2658, cbModelParam._m0[18u].y, _2657 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2659, cbModelParam._m0[19u].z, fma(_2658, cbModelParam._m0[19u].y, _2657 * cbModelParam._m0[19u].x))), _1760);
            frontier_phi_27_62_ladder = _2900.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2900.y * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2900.x * cbModelParam._m0[1u].z;
        }
        _1851 = frontier_phi_27_62_ladder_2;
        _1853 = frontier_phi_27_62_ladder_1;
        _1855 = frontier_phi_27_62_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_832, _833, _834), _1760);
        _1851 = _1835.x * cbModelParam._m0[1u].z;
        _1853 = _1835.y * cbModelParam._m0[1u].z;
        _1855 = _1835.z * cbModelParam._m0[1u].z;
    }
    float _1867 = ((((1.0 - _853) * ((_840 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_853 * _840)) * _824;
    float _1868 = _1867 * ((cbModelParam._m0[1u].w * (_1851 - _1751)) + _1751);
    float _1869 = _1867 * ((cbModelParam._m0[1u].w * (_1853 - _1753)) + _1753);
    float _1870 = _1867 * ((cbModelParam._m0[1u].w * (_1855 - _1755)) + _1755);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, _1868 * cbSceneParam._m0[91u].x));
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_799 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1897 = _824 + (-1.0);
    float _1900 = (cbLight._m0[_1892].x * _1897) + 1.0;
    float _1901 = (cbLight._m0[_1892].y * _1897) + 1.0;
    uint _1902 = _1891 + 5u;
    float _1908 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1912 = _1891 + 4u;
    float _1918 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1922 = _1891 | 1u;
    float _1933 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_457, _458, _459));
    float _1936 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_457, _458, _459));
    float _3874 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _3885 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1941 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.3183098733425140380859375;
    float _1943 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.3183098733425140380859375;
    float _1950 = ((cbLight._m0[_1902].x * _1908) * _1943) + ((cbLight._m0[_1912].x * _1918) * _1941);
    float _1951 = ((_1908 * cbLight._m0[_1902].y) * _1943) + ((_1918 * cbLight._m0[_1912].y) * _1941);
    float _1952 = ((_1908 * cbLight._m0[_1902].z) * _1943) + ((_1918 * cbLight._m0[_1912].z) * _1941);
    uint _1954 = _1891 + 8u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _667) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1891].x + _742;
    float _1970 = cbLight._m0[_1891].y + _743;
    float _1971 = cbLight._m0[_1891].z + _744;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1891].xyz));
    float _3896 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _1983 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1984 = dot(vec3(_457, _458, _459), vec3(_1976, _1977, _1978));
    float _3918 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_1976, _1977, _1978));
    float _3929 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1992 = _1968 * _1968;
    float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2008 = 1.0 - _1968;
    float _2019 = (0.5 / (((_1983 * ((_1982 * _2008) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2008) + _1968) * _1982))) * _1982;
    float _3940 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
    uint _2032 = _1891 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _667) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1922].x + _742;
    float _2046 = cbLight._m0[_1922].y + _743;
    float _2047 = cbLight._m0[_1922].z + _744;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1922].xyz));
    float _3951 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _2059 = dot(vec3(_457, _458, _459), vec3(_2052, _2053, _2054));
    float _3962 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2052, _2053, _2054));
    float _3973 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2081 = 1.0 - _2044;
    float _2091 = (0.5 / (((_1983 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2081) + _2044) * _2058))) * _2058;
    float _3984 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2103 = (((_2080 * cbLight._m0[_2032].x) * _2093) * _1908) + (((_2007 * cbLight._m0[_1954].x) * _2021) * _1918);
    float _2104 = (((_2080 * cbLight._m0[_2032].y) * _2093) * _1908) + (((_2007 * cbLight._m0[_1954].y) * _2021) * _1918);
    float _2105 = (((_2080 * cbLight._m0[_2032].z) * _2093) * _1908) + (((_2007 * cbLight._m0[_1954].z) * _2021) * _1918);
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    if (_1889.y == 0u)
    {
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2160;
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2160;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2160;
        uvec4 _2175 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2176 = _2175.x;
        uint _2187 = uint((float(_2175.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2176))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2176)));
        float _2197 = (log2(_2163 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2198 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        uint _2201 = uint(isnan(14.0) ? _2198 : (isnan(_2198) ? 14.0 : min(_2198, 14.0)));
        uvec4 _2206 = texelFetch(g_lightClusterGridBuffer, int(((_2201 << 2u) + (_2187 << 6u)) >> 2u));
        uint _2207 = _2206.x;
        uint _2208 = _2175.z;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        if (((((1u << ((_2208 >> 4u) & 15u)) + 4294967295u) & _2207) == 0u) || ((_2208 & 240u) == 0u))
        {
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
        }
        else
        {
            float _2314;
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            uint _2503 = 0u;
            uint _2512;
            bool _2513;
            for (;;)
            {
                _2512 = texelFetch(g_lightClassification, int((((_2201 << 5u) + (_2187 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                _2513 = _2512 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2513)
                {
                    frontier_phi_57_pred = _2498;
                    frontier_phi_57_pred_1 = _2502;
                    frontier_phi_57_pred_2 = _2501;
                    frontier_phi_57_pred_3 = _2500;
                    frontier_phi_57_pred_4 = _2499;
                    frontier_phi_57_pred_5 = _2497;
                }
                else
                {
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    uint _2699;
                    _2693 = _2497;
                    _2694 = _2498;
                    _2695 = _2499;
                    _2696 = _2500;
                    _2697 = _2501;
                    _2698 = _2502;
                    _2699 = _2512;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    for (;;)
                    {
                        uint _2703 = uint(findLSB(_2699)) + (_2503 << 5u);
                        uint _2700 = (_2699 + 4294967295u) & _2699;
                        uint _2705 = _2703 * 48u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2725 = (_2703 * 48u) + 4u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2744 = (_2703 * 48u) + 8u;
                        vec3 _2755 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x));
                        float _2759 = _2719.x - _2161;
                        float _2760 = _2719.y - _2162;
                        float _2761 = _2719.z - _2163;
                        float _2762 = dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761));
                        float _2765 = inversesqrt(_2762);
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2769 = dot(vec3(_780, _783, _786), vec3(_2766, _2767, _2768));
                        float _2774 = 1.0 - (_2762 * _2719.w);
                        float _4005 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2776 = sqrt(_2762) * _2738.w;
                        float _2779 = 1.39999997615814208984375 / (_2776 + 1.39999997615814208984375);
                        float _2780 = _2779 * _2779;
                        float _2783 = ((1.0 - _2780) * _2769) + _2780;
                        float _2786 = _2776 * _2776;
                        float _2789 = ((isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))) * _2775) / ((_2786 * 0.699999988079071044921875) + 1.0);
                        float _2793 = (-0.0) - _2161;
                        float _2794 = (-0.0) - _2162;
                        float _2795 = (-0.0) - _2163;
                        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
                        float _2800 = _2799 * _2793;
                        float _2801 = _2799 * _2794;
                        float _2802 = _2799 * _2795;
                        float _2810 = exp2(log2(1.0 / ((_2786 * 3.5) + 5.0)) * 0.25);
                        float _2811 = 1.0 - _840;
                        float _2818 = sqrt(1.0 - ((1.0 - (_2811 * _2811)) * (1.0 - (_2810 * _2810))));
                        float _2819 = _2818 * _2818;
                        float _2820 = _2819 * _2819;
                        float _2821 = _2800 + _2766;
                        float _2822 = _2801 + _2767;
                        float _2823 = _2802 + _2768;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2831 = dot(vec3(_780, _783, _786), vec3(_2800, _2801, _2802));
                        float _4021 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2835 = dot(vec3(_780, _783, _786), vec3(_2827 * _2821, _2827 * _2822, _2827 * _2823));
                        float _4032 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2842 = ((_2838 * _2838) * (_2820 + (-1.0))) + 1.0;
                        float _2843 = _2779 * _2819;
                        float _2844 = _2843 * _2843;
                        float _2847 = ((1.0 - _2844) * _2769) + _2844;
                        float _4043 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2848 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                        float _2849 = 1.0 - _2819;
                        float _2859 = (0.5 / (((_2848 * ((_2834 * _2849) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2848 * _2849) + _2819) * _2834))) * _2848;
                        float _4054 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2870 = (((_2820 * 3.1415927410125732421875) * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) / ((_2842 * _2842) * ((_2786 * 2.1991131305694580078125) + 3.141590118408203125))) * _2775;
                        _2597 = (_2789 * _2738.x) + _2696;
                        _2598 = (_2789 * _2738.y) + _2697;
                        _2599 = (_2789 * _2738.z) + _2698;
                        _2594 = (_2870 * _2755.x) + _2693;
                        _2595 = (_2870 * _2755.y) + _2694;
                        _2596 = (_2870 * _2755.z) + _2695;
                        if (_2700 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2693 = _2594;
                            _2694 = _2595;
                            _2695 = _2596;
                            _2696 = _2597;
                            _2697 = _2598;
                            _2698 = _2599;
                            _2699 = _2700;
                        }
                    }
                    frontier_phi_57_pred = _2595;
                    frontier_phi_57_pred_1 = _2599;
                    frontier_phi_57_pred_2 = _2598;
                    frontier_phi_57_pred_3 = _2597;
                    frontier_phi_57_pred_4 = _2596;
                    frontier_phi_57_pred_5 = _2594;
                }
                _2316 = frontier_phi_57_pred;
                _2324 = frontier_phi_57_pred_1;
                _2322 = frontier_phi_57_pred_2;
                _2320 = frontier_phi_57_pred_3;
                _2318 = frontier_phi_57_pred_4;
                _2314 = frontier_phi_57_pred_5;
                uint _2504 = _2503 + 1u;
                if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2497 = _2314;
                    _2498 = _2316;
                    _2499 = _2318;
                    _2500 = _2320;
                    _2501 = _2322;
                    _2502 = _2324;
                    _2503 = _2504;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
        }
        uvec4 _2327 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2328 = _2327.z;
        uint _2330 = (_2328 >> 8u) & 15u;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((4294967295u << _2330) & _2207) == 0u)
        {
            _2465 = _2313;
            _2467 = _2315;
            _2469 = _2317;
            _2471 = _2319;
            _2473 = _2321;
            _2475 = _2323;
        }
        else
        {
            float _2490 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
            float _2491 = _2490 * _2161;
            float _2492 = _2490 * _2162;
            float _2493 = _2490 * _2163;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2330 < ((_2328 >> 12u) & 15u))
            {
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2676 = _2313;
                float _2677 = _2315;
                float _2678 = _2317;
                float _2679 = _2319;
                float _2680 = _2321;
                float _2681 = _2323;
                uint _2682 = _2330;
                uint _2691;
                bool _2692;
                for (;;)
                {
                    _2691 = texelFetch(g_lightClassification, int((((_2201 << 5u) + (_2187 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                    _2692 = _2691 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2692)
                    {
                        frontier_phi_71_pred = _2681;
                        frontier_phi_71_pred_1 = _2680;
                        frontier_phi_71_pred_2 = _2679;
                        frontier_phi_71_pred_3 = _2678;
                        frontier_phi_71_pred_4 = _2677;
                        frontier_phi_71_pred_5 = _2676;
                    }
                    else
                    {
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _2918 = _2676;
                        float _2919 = _2677;
                        float _2920 = _2678;
                        float _2921 = _2679;
                        float _2922 = _2680;
                        float _2923 = _2681;
                        uint _2924 = _2691;
                        uint _2925;
                        vec4 _2950;
                        float _2951;
                        vec4 _2966;
                        vec3 _2978;
                        vec4 _2993;
                        vec4 _3009;
                        float _3056;
                        bool _3057;
                        for (;;)
                        {
                            uint _2935 = ((_2682 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2924));
                            _2925 = (_2924 + 4294967295u) & _2924;
                            uint _2937 = _2935 * 40u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            _2951 = _2950.w;
                            uint _2953 = (_2935 * 40u) + 4u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2968 = (_2935 * 40u) + 8u;
                            _2978 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x));
                            uint _2980 = (_2935 * 40u) + 16u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2996 = (_2935 * 40u) + 20u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2935 * 40u) + 24u;
                            vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3031 = (_2935 * 40u) + 28u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3056 = fma(_2163, _3044.z, fma(_2162, _3044.y, _3044.x * _2161)) + _3044.w;
                            _3057 = !((fma(_2163, _3025.z, fma(_2162, _3025.y, _3025.x * _2161)) + _3025.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3057)
                            {
                                float _3084 = _2950.x - _2161;
                                float _3085 = _2950.y - _2162;
                                float _3086 = _2950.z - _2163;
                                float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                                float _3090 = inversesqrt(_3087);
                                float _3091 = _3090 * _3084;
                                float _3092 = _3090 * _3085;
                                float _3093 = _3090 * _3086;
                                float _3097 = 1.0 - (_3087 / (_2951 * _2951));
                                float _4065 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3102 = sqrt(_3087) * _2966.w;
                                float _3104 = 1.39999997615814208984375 / (_3102 + 1.39999997615814208984375);
                                float _3105 = _3104 * _3104;
                                float _3108 = ((1.0 - _3105) * dot(vec3(_3091, _3092, _3093), vec3(_780, _783, _786))) + _3105;
                                float _3111 = _3102 * _3102;
                                float _3115 = (fma(_2163, _2993.z, fma(_2162, _2993.y, _2993.x * _2161)) + _2993.w) / _3056;
                                float _3116 = (fma(_2163, _3009.z, fma(_2162, _3009.y, _3009.x * _2161)) + _3009.w) / _3056;
                                float _3120 = 1.0 - dot(vec2(_3115, _3116), vec2(_3115, _3116));
                                float _4081 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3122 = _3121 * (((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3098) / ((_3111 * 0.699999988079071044921875) + 1.0));
                                float _3134 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                                float _3135 = 1.0 - _840;
                                float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                                float _3143 = _3142 * _3142;
                                float _3144 = _3143 * _3143;
                                float _3145 = _3091 - _2491;
                                float _3146 = _3092 - _2492;
                                float _3147 = _3093 - _2493;
                                float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                                float _3155 = dot(vec3(_780, _783, _786), vec3((-0.0) - _2491, (-0.0) - _2492, (-0.0) - _2493));
                                float _4092 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3159 = dot(vec3(_780, _783, _786), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                                float _4103 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                                float _3167 = _3104 * _3143;
                                float _3168 = _3167 * _3167;
                                float _3174 = ((1.0 - _3168) * dot(vec3(_780, _783, _786), vec3(_3091, _3092, _3093))) + _3168;
                                float _4114 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3176 = 1.0 - _3143;
                                float _3186 = (0.5 / (((_3175 * ((_3158 * _3176) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3143) * _3158))) * _3175;
                                float _4125 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3196 = (_3121 * _3098) * (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) / ((_3166 * _3166) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3122 * _2966.x;
                                frontier_phi_77_pred_1 = _3122 * _2966.z;
                                frontier_phi_77_pred_2 = _3122 * _2966.y;
                                frontier_phi_77_pred_3 = _3196 * _2978.z;
                                frontier_phi_77_pred_4 = _3196 * _2978.y;
                                frontier_phi_77_pred_5 = _3196 * _2978.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3203 = frontier_phi_77_pred;
                            _3205 = frontier_phi_77_pred_1;
                            _3204 = frontier_phi_77_pred_2;
                            _3202 = frontier_phi_77_pred_3;
                            _3201 = frontier_phi_77_pred_4;
                            _3200 = frontier_phi_77_pred_5;
                            _2908 = _3203 + _2921;
                            _2909 = _3204 + _2922;
                            _2910 = _3205 + _2923;
                            _2905 = _3200 + _2918;
                            _2906 = _3201 + _2919;
                            _2907 = _3202 + _2920;
                            if (_2925 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2925;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2910;
                        frontier_phi_71_pred_1 = _2909;
                        frontier_phi_71_pred_2 = _2908;
                        frontier_phi_71_pred_3 = _2907;
                        frontier_phi_71_pred_4 = _2906;
                        frontier_phi_71_pred_5 = _2905;
                    }
                    _2476 = frontier_phi_71_pred;
                    _2474 = frontier_phi_71_pred_1;
                    _2472 = frontier_phi_71_pred_2;
                    _2470 = frontier_phi_71_pred_3;
                    _2468 = frontier_phi_71_pred_4;
                    _2466 = frontier_phi_71_pred_5;
                    uint _2683 = _2682 + 1u;
                    if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2676 = _2466;
                        _2677 = _2468;
                        _2678 = _2470;
                        _2679 = _2472;
                        _2680 = _2474;
                        _2681 = _2476;
                        _2682 = _2683;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2476;
                frontier_phi_46_47_ladder_1 = _2468;
                frontier_phi_46_47_ladder_2 = _2474;
                frontier_phi_46_47_ladder_3 = _2472;
                frontier_phi_46_47_ladder_4 = _2470;
                frontier_phi_46_47_ladder_5 = _2466;
            }
            else
            {
                frontier_phi_46_47_ladder = _2323;
                frontier_phi_46_47_ladder_1 = _2315;
                frontier_phi_46_47_ladder_2 = _2321;
                frontier_phi_46_47_ladder_3 = _2319;
                frontier_phi_46_47_ladder_4 = _2317;
                frontier_phi_46_47_ladder_5 = _2313;
            }
            _2465 = frontier_phi_46_47_ladder_5;
            _2467 = frontier_phi_46_47_ladder_1;
            _2469 = frontier_phi_46_47_ladder_4;
            _2471 = frontier_phi_46_47_ladder_3;
            _2473 = frontier_phi_46_47_ladder_2;
            _2475 = frontier_phi_46_47_ladder;
        }
        float _2480 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
        _2219 = (_2480 * _2471) + _1950;
        _2221 = (_2480 * _2473) + _1951;
        _2223 = (_2480 * _2475) + _1952;
        _2225 = ((_2465 * 0.039999999105930328369140625) * _2480) + _2103;
        _2227 = ((_2467 * 0.039999999105930328369140625) * _2480) + _2104;
        _2229 = ((_2469 * 0.039999999105930328369140625) * _2480) + _2105;
    }
    else
    {
        _2219 = _1950;
        _2221 = _1951;
        _2223 = _1952;
        _2225 = _2103;
        _2227 = _2104;
        _2229 = _2105;
    }
    uint _2235 = _800 + uint(cbMatDynParam._m0[0u].w);
    float _4141 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4152 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4163 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2260 = (((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2219 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _824))) + ((_2225 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1660)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[12u].y * _577) * cbInstanceData._m0[_2235].x);
    float _2262 = (((cbMtdParam._m0[12u].y * _580) * cbInstanceData._m0[_2235].y) + ((_2227 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1660)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2221 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _824)));
    float _2264 = (((cbMtdParam._m0[12u].y * _583) * cbInstanceData._m0[_2235].z) + ((_2229 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1660)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2223 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _824)));
    float _2265 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2266 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2267 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    uint _2268 = _799 + 6u;
    float _2276 = _759 / cbSceneParam._m0[86u].x;
    float _2277 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2291 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2293 = _2291.x;
    float _2294 = _2291.y;
    float _2295 = _2291.z;
    float _2296 = _2291.w;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2338 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2339 = _2338 / _686;
        float _2350 = _2339 * _735;
        float _2351 = _736 * _2339;
        float _2352 = (-0.0) - _2351;
        float _2353 = _2339 * _737;
        float _2355 = (cbSceneParam._m0[77u].w * _2352) / _2338;
        float _2356 = _2355 + cbSceneParam._m0[79u].w;
        float _2357 = cbSceneParam._m0[79u].w - _2351;
        float _2363 = sqrt(((_2350 * _2350) + (_2351 * _2351)) + (_2353 * _2353));
        float _2366 = (1.0 - (cbSceneParam._m0[77u].w / _2338)) * _2363;
        float _2372 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2374 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2607;
        if (abs((_2352 - _2355) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2607 = ((((_2356 > 0.0) ? exp2(_2372 * _2356) : (2.0 - exp2(_2374 * _2356))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2366;
        }
        else
        {
            float _2526 = 1.0 / cbSceneParam._m0[80u].x;
            float _2527 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : max(_2356, _2357));
            float _2528 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : min(_2356, _2357));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            _2607 = ((abs(_2363 / _2352) * cbSceneParam._m0[80u].y) * ((((_2537 - _2538) * 2.0) - ((exp2(_2372 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)))) - exp2(_2372 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))))) * _2526)) - ((exp2(_2374 * _2537) - exp2(_2374 * _2538)) * _2526))) + (_2366 * cbSceneParam._m0[80u].z);
        }
        vec4 _2609 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, 1.0), 0.0);
        float _2618 = exp2((_2607 * (-1.44269502162933349609375)) * (1.0 - _2609.w));
        float _2619 = log2(_2618);
        float _2635 = log2(_2296);
        _2376 = (exp2(_2635 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].x)) * _2609.x) / cbSceneParam._m0[78u].x)) + _2293;
        _2378 = (exp2(_2635 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].y)) * _2609.y) / cbSceneParam._m0[78u].y)) + _2294;
        _2380 = (exp2(_2635 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].z)) * _2609.z) / cbSceneParam._m0[78u].z)) + _2295;
        _2382 = _2618 * _2296;
    }
    else
    {
        _2376 = _2293;
        _2378 = _2294;
        _2380 = _2295;
        _2382 = _2296;
    }
    bool _2645;
    vec4 _2392;
    vec4 _2414;
    float _2416;
    float _2420;
    float _2421;
    float _2422;
    float _2423;
    bool _2433;
    for (;;)
    {
        _2392 = cbMatDynParam._m0[0u];
        float _2394 = roundEven(_2392.y);
        bool _2395 = _2394 == 3.0;
        float _2396 = log2(_2382);
        float _2403 = exp2(_2396 * cbSceneParam._m0[78u].x) * _2265;
        float _2404 = exp2(_2396 * cbSceneParam._m0[78u].y) * _2266;
        float _2405 = exp2(_2396 * cbSceneParam._m0[78u].z) * _2267;
        float _2412 = _747 + (-0.5);
        _2414 = cbMtdParam._m0[1u];
        _2416 = _2414.y * _2412;
        float _2419 = (_2394 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2420 = _2419 * (_2395 ? _2403 : (_2403 + (cbSceneParam._m0[72u].w * _2376)));
        _2421 = _2419 * (_2395 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2378)));
        _2422 = _2419 * (_2395 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2380)));
        _2423 = _2412 * 0.999000012874603271484375;
        _2433 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2433)
        {
            if ((cbInstanceData._m0[_799 + 7u].x + _2423) < 0.5)
            {
                _2645 = true;
                break;
            }
        }
        uint _2561 = _800 + uint(_2392.w);
        if ((cbInstanceData._m0[_2561].w < 1.0) && ((cbInstanceData._m0[_2561].w + _2423) < 0.5))
        {
            _2645 = true;
            break;
        }
        if ((_2416 + _657) < _2414.x)
        {
            _2645 = true;
            break;
        }
        _2645 = false;
        break;
    }
    float _2875;
    if (_2645)
    {
        discard_state = true;
        _2875 = 0.0;
    }
    else
    {
        _2875 = cbInstanceData._m0[_2268].w;
    }
    SV_Target.x = _2420;
    SV_Target.y = _2421;
    SV_Target.z = _2422;
    SV_Target.w = _2875;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2268].w;
    discard_exit();
}


