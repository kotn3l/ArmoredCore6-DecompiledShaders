#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_01_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_01_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_01_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_01_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1081;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _288 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _306 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_5, SS_BumpMap), vec2((((_288 * cbMtdParam._m0[17u].z) + TEXCOORD_1.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_288 * cbMtdParam._m0[17u].w) + TEXCOORD_1.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _311 = _306.x * 2.0;
    float _313 = _306.y * 2.0;
    float _314 = _311 + (-1.0);
    float _316 = _313 + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3146 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _323 = sqrt(1.0 - (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0))));
    float _337 = (cbMtdParam._m0[16u].z * _288) + TEXCOORD_1.x;
    float _338 = (cbMtdParam._m0[16u].w * _288) + TEXCOORD_1.y;
    vec4 _350 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_337 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_338 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _355 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].x * cbMtdParam._m0[13u].z);
    float _362 = ((_350.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _364 = (-0.0) - (cbMtdParam._m0[14u].z * ((_350.x * 0.5) + (-0.25)));
    float _365 = fract(_355);
    float _367 = fract(_355 + 0.5);
    float _378 = abs((_365 * 2.0) + (-1.0));
    vec4 _394 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_365 * _364) + _337) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_362 * _365) + _338) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _396 = _394.x;
    float _397 = _394.y;
    vec4 _398 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_367 * _364) + _337) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_362 * _367) + _338) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _424 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].x * _288) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].y * _288) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _434 = ((_311 + (-1.35000002384185791015625)) + ((((((_398.x - _396) * _378) + _396) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_424.x * 0.699999988079071044921875);
    float _437 = ((_313 + (-1.35000002384185791015625)) + ((((((_398.y - _397) * _378) + _397) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_424.y * 0.699999988079071044921875);
    float _440 = fma(_323, _217, fma(_437, _209 * TANGENT.x, _434 * (_195 * _187)));
    float _443 = fma(_323, _218, fma(_437, _209 * TANGENT.y, _434 * (_195 * _188)));
    float _446 = fma(_323, _219, fma(_437, _209 * TANGENT.z, _434 * (_195 * _189)));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _451 = _450 * _440;
    float _452 = _450 * _443;
    float _453 = _450 * _446;
    float _465 = (cbMtdParam._m0[17u].x * _288) + TEXCOORD_1.x;
    float _466 = (cbMtdParam._m0[17u].y * _288) + TEXCOORD_1.y;
    vec4 _478 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_465 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_466 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _495 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _465) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _466) + cbTextureTilingScale._m0[0u].w));
    float _507 = (cbMtdParam._m0[15u].z * _288) + TEXCOORD_1.x;
    float _508 = (cbMtdParam._m0[15u].w * _288) + TEXCOORD_1.y;
    vec4 _513 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_507 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_508 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _521 = ((_513.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _523 = (-0.0) - (cbMtdParam._m0[14u].z * ((_513.x * 0.5) + (-0.25)));
    vec4 _540 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_365 * _523) + _507) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_521 * _365) + _508) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    vec4 _545 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_367 * _523) + _507) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_521 * _367) + _508) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _559 = exp2(log2(_478.x) * cbMtdParam._m0[13u].y) * cbMtdParam._m0[14u].w;
    float _570 = ((_495.x + cbMtdParam._m0[10u].x) + cbMtdParam._m0[9u].x) + (_559 * (((_545.x - _542) * _378) + _542));
    float _573 = ((_495.y + cbMtdParam._m0[10u].y) + cbMtdParam._m0[9u].y) + (_559 * (((_545.y - _543) * _378) + _543));
    float _576 = ((_495.z + cbMtdParam._m0[10u].z) + cbMtdParam._m0[9u].z) + (_559 * (((_545.z - _544) * _378) + _544));
    float _587 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _588 = _587 * _273;
    float _589 = _587 * _274;
    float _590 = _587 * _275;
    float _594 = dot(vec4(_588, _589, _590, 0.0), vec4(_451, _452, _453, 0.0)) - cbMtdParam._m0[12u].w;
    float _3157 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _601 = exp2(log2(1.0 - (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _609 = ((_601 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _570;
    float _611 = ((_601 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _573;
    float _613 = ((_601 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _576;
    float _3173 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _619 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
    float _3184 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3195 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3206 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _638 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _666 = fma(_453, cbSceneParam._m0[5u].z, fma(_452, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _451));
    float _669 = fma(_453, cbSceneParam._m0[6u].z, fma(_452, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _451));
    float _672 = fma(_453, cbSceneParam._m0[7u].z, fma(_452, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _451));
    uint _685 = uint(roundEven(NORMAL.w)) * 13u;
    uint _686 = _685 + 9u;
    uint _687 = _686 + uint(cbMatDynParam._m0[0u].w);
    float _693 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0)))) * cbInstanceData._m0[_687].x;
    float _694 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0)))) * cbInstanceData._m0[_687].y;
    float _695 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0)))) * cbInstanceData._m0[_687].z;
    float _3217 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _3228 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _3239 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    vec4 _707 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _710 = _707.x * TEXCOORD_1.w;
    float _711 = dot(vec3(_451, _452, _453), vec3(_588, _589, _590));
    float _714 = _711 * 2.0;
    float _718 = (_714 * _451) - _588;
    float _719 = (_714 * _452) - _589;
    float _720 = (_714 * _453) - _590;
    float _724 = abs(dot(vec3(_588, _589, _590), vec3(_451, _452, _453)));
    float _3250 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _726 = sqrt(_619);
    float _739 = exp2((_726 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_726 * 3.0));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1080;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771));
        float _810 = fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771));
        float _814 = fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771));
        float _838 = _771 + _451;
        float _839 = _775 + _452;
        float _840 = _779 + _453;
        float _850 = fma(_840, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838)) - _806;
        float _851 = fma(_840, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838)) - _810;
        float _852 = fma(_840, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838)) - _814;
        float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
        float _869 = ((_856 * _850) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_856 * _851) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_856 * _852) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        float _908 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_874.x + (-0.5));
        float _910 = _908 * (_874.y + (-0.5));
        float _911 = _908 * (_874.z + (-0.5));
        float _918 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_881.x + (-0.5));
        float _920 = _918 * (_881.y + (-0.5));
        float _921 = _918 * (_881.z + (-0.5));
        float _928 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_888.x + (-0.5));
        float _930 = _928 * (_888.y + (-0.5));
        float _931 = _928 * (_888.z + (-0.5));
        float _938 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_895.x + (-0.5));
        float _940 = _938 * (_895.y + (-0.5));
        float _941 = _938 * (_895.z + (-0.5));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = _909 * 0.5;
        float _946 = _919 * 0.5;
        float _947 = _929 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _962 = (dot(vec3(_451, _452, _453), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3276 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _972 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3287 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3298 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * (_974 + 1.0))) + _979) * _942;
        float _989 = _910 * 0.5;
        float _990 = _920 * 0.5;
        float _991 = _930 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_451, _452, _453), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3331 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_1016 + 1.0))) + _1021) * _943;
        float _1031 = _911 * 0.5;
        float _1032 = _921 * 0.5;
        float _1033 = _931 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_451, _452, _453), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3364 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_1058 + 1.0))) + _1063) * _944;
        _1080 = _911;
        _1082 = _910;
        _1083 = _909;
        _1084 = _921;
        _1085 = _920;
        _1086 = _919;
        _1087 = _931;
        _1088 = _930;
        _1089 = _929;
        _1090 = _944;
        _1091 = _943;
        _1092 = _942;
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _1081;
        _1082 = _1081;
        _1083 = _1081;
        _1084 = _1081;
        _1085 = _1081;
        _1086 = _1081;
        _1087 = _1081;
        _1088 = _1081;
        _1089 = _1081;
        _1090 = _1081;
        _1091 = _1081;
        _1092 = _1081;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771));
        float _1125 = fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771));
        float _1129 = fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771));
        float _1152 = _771 + _451;
        float _1153 = _775 + _452;
        float _1154 = _779 + _453;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_451, _452, _453), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3427 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_451, _452, _453), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3460 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_451, _452, _453), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3493 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1081;
        _1391 = _1081;
        _1392 = _1081;
        _1393 = _1081;
        _1394 = _1081;
        _1395 = _1081;
        _1396 = _1081;
        _1397 = _1081;
        _1398 = _1081;
        _1399 = _1081;
        _1400 = _1081;
        _1401 = _1081;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1093)) + _1093;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1094)) + _1094;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1095)) + _1095;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _718 * 0.5;
    float _1459 = _719 * 0.5;
    float _1460 = _720 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1080, _1084, _1087, _1090));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_720, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718));
        float _1588 = fma(_720, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718));
        float _1591 = fma(_720, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1619 = frontier_phi_16_14_ladder;
        }
        float _1967;
        if (_1588 > 0.0)
        {
            _1967 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1967 = frontier_phi_25_21_ladder;
        }
        float _2282;
        if (_1591 > 0.0)
        {
            _2282 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2282 = frontier_phi_39_32_ladder;
        }
        float _2284 = isnan(_1967) ? _1619 : (isnan(_1619) ? _1967 : min(_1619, _1967));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1585) + _1574;
        float _2290 = (_2285 * _1588) + _1578;
        float _2291 = (_2285 * _1591) + _1582;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2292;
        float _2295 = _2292 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2291 > _2295) || ((_2291 < _2293) || ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 < _2293) || (_2289 > _2295))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2291, cbModelParam._m0[9u].z, fma(_2290, cbModelParam._m0[9u].y, _2289 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2291, cbModelParam._m0[10u].z, fma(_2290, cbModelParam._m0[10u].y, _2289 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2291, cbModelParam._m0[11u].z, fma(_2290, cbModelParam._m0[11u].y, _2289 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_15_39_ladder = _2417.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2417.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2417.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_15_39_ladder_2;
        _1609 = frontier_phi_15_39_ladder_1;
        _1611 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_718, _719, _720), _1527);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1671 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1675 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1679 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1682 = fma(_720, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718));
        float _1685 = fma(_720, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718));
        float _1688 = fma(_720, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718));
        float _1972;
        if (_1682 > 0.0)
        {
            _1972 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1972 = frontier_phi_27_23_ladder;
        }
        float _2308;
        if (_1685 > 0.0)
        {
            _2308 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2308 = frontier_phi_41_34_ladder;
        }
        float _2477;
        if (_1688 > 0.0)
        {
            _2477 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _2477 = frontier_phi_55_50_ladder;
        }
        float _2479 = isnan(_2308) ? _1972 : (isnan(_1972) ? _2308 : min(_1972, _2308));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1682) + _1671;
        float _2485 = (_2480 * _1685) + _1675;
        float _2486 = (_2480 * _1688) + _1679;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_24_55_ladder;
        float frontier_phi_24_55_ladder_1;
        float frontier_phi_24_55_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_24_55_ladder = 0.0;
            frontier_phi_24_55_ladder_1 = 0.0;
            frontier_phi_24_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_24_55_ladder = _2718.z * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_1 = _2718.y * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_2 = _2718.x * cbModelParam._m0[1u].z;
        }
        _1707 = frontier_phi_24_55_ladder_2;
        _1709 = frontier_phi_24_55_ladder_1;
        _1711 = frontier_phi_24_55_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_718, _719, _720), _1616);
        _1707 = _1691.x * cbModelParam._m0[1u].z;
        _1709 = _1691.y * cbModelParam._m0[1u].z;
        _1711 = _1691.z * cbModelParam._m0[1u].z;
    }
    float _1723 = ((((1.0 - _739) * ((_726 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_739 * _726)) * _710;
    float _1724 = _1723 * ((cbModelParam._m0[1u].w * (_1707 - _1607)) + _1607);
    float _1725 = _1723 * ((cbModelParam._m0[1u].w * (_1709 - _1609)) + _1609);
    float _1726 = _1723 * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1729 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, _1724 * cbSceneParam._m0[91u].x));
    uvec4 _1745 = floatBitsToUint(cbInstanceData._m0[_685 + 5u]);
    uint _1747 = _1745.x * 14u;
    uint _1748 = _1747 + 13u;
    float _1753 = _710 + (-1.0);
    float _1756 = (cbLight._m0[_1748].x * _1753) + 1.0;
    float _1757 = (cbLight._m0[_1748].y * _1753) + 1.0;
    uint _1758 = _1747 + 5u;
    float _1764 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1768 = _1747 + 4u;
    float _1774 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1778 = _1747 | 1u;
    float _1789 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_451, _452, _453));
    float _1792 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_451, _452, _453));
    float _3629 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _3640 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1797 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.3183098733425140380859375;
    float _1799 = (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.3183098733425140380859375;
    float _1806 = ((cbLight._m0[_1758].x * _1764) * _1799) + ((cbLight._m0[_1768].x * _1774) * _1797);
    float _1807 = ((_1764 * cbLight._m0[_1758].y) * _1799) + ((_1774 * cbLight._m0[_1768].y) * _1797);
    float _1808 = ((_1764 * cbLight._m0[_1758].z) * _1799) + ((_1774 * cbLight._m0[_1768].z) * _1797);
    uint _1810 = _1747 + 8u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _619) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1747].x + _588;
    float _1826 = cbLight._m0[_1747].y + _589;
    float _1827 = cbLight._m0[_1747].z + _590;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1747].xyz));
    float _3651 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _1839 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _1840 = dot(vec3(_451, _452, _453), vec3(_1832, _1833, _1834));
    float _3673 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _1844 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1832, _1833, _1834));
    float _3684 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1848 = _1824 * _1824;
    float _1852 = ((_1843 * _1843) * (_1848 + (-1.0))) + 1.0;
    float _1863 = (exp2(log2(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1864 = 1.0 - _1824;
    float _1875 = (0.5 / (((_1839 * ((_1838 * _1864) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1864) + _1824) * _1838))) * _1838;
    float _3695 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1848 / ((_1852 * _1852) * 3.141590118408203125));
    uint _1888 = _1747 + 9u;
    float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _619) * 0.949999988079071044921875);
    float _1900 = _1899 * _1899;
    float _1901 = cbLight._m0[_1778].x + _588;
    float _1902 = cbLight._m0[_1778].y + _589;
    float _1903 = cbLight._m0[_1778].z + _590;
    float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
    float _1908 = _1907 * _1901;
    float _1909 = _1907 * _1902;
    float _1910 = _1907 * _1903;
    float _1911 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1778].xyz));
    float _3706 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _1915 = dot(vec3(_451, _452, _453), vec3(_1908, _1909, _1910));
    float _3717 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_1908, _1909, _1910));
    float _3728 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1923 = _1900 * _1900;
    float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
    float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1937 = 1.0 - _1900;
    float _1947 = (0.5 / (((_1839 * ((_1914 * _1937) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1937) + _1900) * _1914))) * _1914;
    float _3739 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1949 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
    float _1959 = (((_1936 * cbLight._m0[_1888].x) * _1949) * _1764) + (((_1863 * cbLight._m0[_1810].x) * _1877) * _1774);
    float _1960 = (((_1936 * cbLight._m0[_1888].y) * _1949) * _1764) + (((_1863 * cbLight._m0[_1810].y) * _1877) * _1774);
    float _1961 = (((_1936 * cbLight._m0[_1888].z) * _1949) * _1764) + (((_1863 * cbLight._m0[_1810].z) * _1877) * _1774);
    float _2075;
    float _2077;
    float _2079;
    float _2081;
    float _2083;
    float _2085;
    if (_1745.y == 0u)
    {
        float _2016 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2017 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2016;
        float _2018 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2016;
        float _2019 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2016;
        uvec4 _2031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2032 = _2031.x;
        uint _2043 = uint((float(_2031.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2032))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2032)));
        float _2053 = (log2(_2019 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2054 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        uint _2057 = uint(isnan(14.0) ? _2054 : (isnan(_2054) ? 14.0 : min(_2054, 14.0)));
        uvec4 _2062 = texelFetch(g_lightClusterGridBuffer, int(((_2057 << 2u) + (_2043 << 6u)) >> 2u));
        uint _2063 = _2062.x;
        uint _2064 = _2031.z;
        float _2169;
        float _2171;
        float _2173;
        float _2175;
        float _2177;
        float _2179;
        if (((((1u << ((_2064 >> 4u) & 15u)) + 4294967295u) & _2063) == 0u) || ((_2064 & 240u) == 0u))
        {
            _2169 = 0.0;
            _2171 = 0.0;
            _2173 = 0.0;
            _2175 = 0.0;
            _2177 = 0.0;
            _2179 = 0.0;
        }
        else
        {
            float _2170;
            float _2172;
            float _2174;
            float _2176;
            float _2178;
            float _2180;
            float _2345 = 0.0;
            float _2346 = 0.0;
            float _2347 = 0.0;
            float _2348 = 0.0;
            float _2349 = 0.0;
            float _2350 = 0.0;
            uint _2351 = 0u;
            uint _2360;
            bool _2361;
            for (;;)
            {
                _2360 = texelFetch(g_lightClassification, int((((_2057 << 5u) + (_2043 << 9u)) + (_2351 << 2u)) >> 2u)).x;
                _2361 = _2360 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2361)
                {
                    frontier_phi_52_pred = _2345;
                    frontier_phi_52_pred_1 = _2350;
                    frontier_phi_52_pred_2 = _2349;
                    frontier_phi_52_pred_3 = _2348;
                    frontier_phi_52_pred_4 = _2347;
                    frontier_phi_52_pred_5 = _2346;
                }
                else
                {
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    uint _2526;
                    _2520 = _2345;
                    _2521 = _2346;
                    _2522 = _2347;
                    _2523 = _2348;
                    _2524 = _2349;
                    _2525 = _2350;
                    _2526 = _2360;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    for (;;)
                    {
                        uint _2530 = uint(findLSB(_2526)) + (_2351 << 5u);
                        uint _2527 = (_2526 + 4294967295u) & _2526;
                        uint _2532 = _2530 * 48u;
                        vec4 _2546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2532)).x, texelFetch(g_PointLightRenderingBuffer, int(_2532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2532 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2532 + 3u)).x));
                        uint _2552 = (_2530 * 48u) + 4u;
                        vec4 _2565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2552)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 3u)).x));
                        uint _2571 = (_2530 * 48u) + 8u;
                        vec3 _2582 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2571)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 2u)).x));
                        float _2586 = _2546.x - _2017;
                        float _2587 = _2546.y - _2018;
                        float _2588 = _2546.z - _2019;
                        float _2589 = dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588));
                        float _2592 = inversesqrt(_2589);
                        float _2593 = _2592 * _2586;
                        float _2594 = _2592 * _2587;
                        float _2595 = _2592 * _2588;
                        float _2596 = dot(vec3(_666, _669, _672), vec3(_2593, _2594, _2595));
                        float _2601 = 1.0 - (_2589 * _2546.w);
                        float _3760 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                        float _2602 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                        float _2603 = sqrt(_2589) * _2565.w;
                        float _2606 = 1.39999997615814208984375 / (_2603 + 1.39999997615814208984375);
                        float _2607 = _2606 * _2606;
                        float _2610 = ((1.0 - _2607) * _2596) + _2607;
                        float _2613 = _2603 * _2603;
                        float _2616 = ((isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0))) * _2602) / ((_2613 * 0.699999988079071044921875) + 1.0);
                        float _2620 = (-0.0) - _2017;
                        float _2621 = (-0.0) - _2018;
                        float _2622 = (-0.0) - _2019;
                        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
                        float _2627 = _2626 * _2620;
                        float _2628 = _2626 * _2621;
                        float _2629 = _2626 * _2622;
                        float _2637 = exp2(log2(1.0 / ((_2613 * 3.5) + 5.0)) * 0.25);
                        float _2638 = 1.0 - _726;
                        float _2645 = sqrt(1.0 - ((1.0 - (_2638 * _2638)) * (1.0 - (_2637 * _2637))));
                        float _2646 = _2645 * _2645;
                        float _2647 = _2646 * _2646;
                        float _2648 = _2627 + _2593;
                        float _2649 = _2628 + _2594;
                        float _2650 = _2629 + _2595;
                        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
                        float _2658 = dot(vec3(_666, _669, _672), vec3(_2627, _2628, _2629));
                        float _3776 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                        float _2661 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
                        float _2662 = dot(vec3(_666, _669, _672), vec3(_2654 * _2648, _2654 * _2649, _2654 * _2650));
                        float _3787 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2665 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                        float _2669 = ((_2665 * _2665) * (_2647 + (-1.0))) + 1.0;
                        float _2670 = _2606 * _2646;
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2596) + _2671;
                        float _3798 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2675 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
                        float _2676 = 1.0 - _2646;
                        float _2686 = (0.5 / (((_2675 * ((_2661 * _2676) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2675 * _2676) + _2646) * _2661))) * _2675;
                        float _3809 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2697 = (((_2647 * 3.1415927410125732421875) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) / ((_2669 * _2669) * ((_2613 * 2.1991131305694580078125) + 3.141590118408203125))) * _2602;
                        _2429 = (_2616 * _2565.x) + _2523;
                        _2430 = (_2616 * _2565.y) + _2524;
                        _2431 = (_2616 * _2565.z) + _2525;
                        _2426 = (_2697 * _2582.x) + _2520;
                        _2427 = (_2697 * _2582.y) + _2521;
                        _2428 = (_2697 * _2582.z) + _2522;
                        if (_2527 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2520 = _2426;
                            _2521 = _2427;
                            _2522 = _2428;
                            _2523 = _2429;
                            _2524 = _2430;
                            _2525 = _2431;
                            _2526 = _2527;
                        }
                    }
                    frontier_phi_52_pred = _2426;
                    frontier_phi_52_pred_1 = _2431;
                    frontier_phi_52_pred_2 = _2430;
                    frontier_phi_52_pred_3 = _2429;
                    frontier_phi_52_pred_4 = _2428;
                    frontier_phi_52_pred_5 = _2427;
                }
                _2170 = frontier_phi_52_pred;
                _2180 = frontier_phi_52_pred_1;
                _2178 = frontier_phi_52_pred_2;
                _2176 = frontier_phi_52_pred_3;
                _2174 = frontier_phi_52_pred_4;
                _2172 = frontier_phi_52_pred_5;
                uint _2352 = _2351 + 1u;
                if (_2352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2345 = _2170;
                    _2346 = _2172;
                    _2347 = _2174;
                    _2348 = _2176;
                    _2349 = _2178;
                    _2350 = _2180;
                    _2351 = _2352;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2169 = _2170;
            _2171 = _2172;
            _2173 = _2174;
            _2175 = _2176;
            _2177 = _2178;
            _2179 = _2180;
        }
        uvec4 _2183 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2184 = _2183.z;
        uint _2186 = (_2184 >> 8u) & 15u;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        if (((4294967295u << _2186) & _2063) == 0u)
        {
            _2313 = _2169;
            _2315 = _2171;
            _2317 = _2173;
            _2319 = _2175;
            _2321 = _2177;
            _2323 = _2179;
        }
        else
        {
            float _2338 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
            float _2339 = _2338 * _2017;
            float _2340 = _2338 * _2018;
            float _2341 = _2338 * _2019;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2186 < ((_2184 >> 12u) & 15u))
            {
                float _2314;
                float _2316;
                float _2318;
                float _2320;
                float _2322;
                float _2324;
                float _2503 = _2169;
                float _2504 = _2171;
                float _2505 = _2173;
                float _2506 = _2175;
                float _2507 = _2177;
                float _2508 = _2179;
                uint _2509 = _2186;
                uint _2518;
                bool _2519;
                for (;;)
                {
                    _2518 = texelFetch(g_lightClassification, int((((_2057 << 5u) + (_2043 << 9u)) + (_2509 << 2u)) >> 2u)).x;
                    _2519 = _2518 == 0u;
                    float frontier_phi_61_pred;
                    float frontier_phi_61_pred_1;
                    float frontier_phi_61_pred_2;
                    float frontier_phi_61_pred_3;
                    float frontier_phi_61_pred_4;
                    float frontier_phi_61_pred_5;
                    if (_2519)
                    {
                        frontier_phi_61_pred = _2508;
                        frontier_phi_61_pred_1 = _2507;
                        frontier_phi_61_pred_2 = _2506;
                        frontier_phi_61_pred_3 = _2505;
                        frontier_phi_61_pred_4 = _2504;
                        frontier_phi_61_pred_5 = _2503;
                    }
                    else
                    {
                        float _2723;
                        float _2724;
                        float _2725;
                        float _2726;
                        float _2727;
                        float _2728;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _2736 = _2503;
                        float _2737 = _2504;
                        float _2738 = _2505;
                        float _2739 = _2506;
                        float _2740 = _2507;
                        float _2741 = _2508;
                        uint _2742 = _2518;
                        uint _2743;
                        vec4 _2768;
                        float _2769;
                        vec4 _2784;
                        vec3 _2796;
                        vec4 _2811;
                        vec4 _2827;
                        float _2874;
                        bool _2875;
                        for (;;)
                        {
                            uint _2753 = ((_2509 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2742));
                            _2743 = (_2742 + 4294967295u) & _2742;
                            uint _2755 = _2753 * 40u;
                            _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            _2769 = _2768.w;
                            uint _2771 = (_2753 * 40u) + 4u;
                            _2784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 3u)).x));
                            uint _2786 = (_2753 * 40u) + 8u;
                            _2796 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x));
                            uint _2798 = (_2753 * 40u) + 16u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2814 = (_2753 * 40u) + 20u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2830 = (_2753 * 40u) + 24u;
                            vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            uint _2849 = (_2753 * 40u) + 28u;
                            vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            _2874 = fma(_2019, _2862.z, fma(_2018, _2862.y, _2862.x * _2017)) + _2862.w;
                            _2875 = !((fma(_2019, _2843.z, fma(_2018, _2843.y, _2843.x * _2017)) + _2843.w) <= 0.0);
                            float frontier_phi_67_pred;
                            float frontier_phi_67_pred_1;
                            float frontier_phi_67_pred_2;
                            float frontier_phi_67_pred_3;
                            float frontier_phi_67_pred_4;
                            float frontier_phi_67_pred_5;
                            if (_2875)
                            {
                                float _2902 = _2768.x - _2017;
                                float _2903 = _2768.y - _2018;
                                float _2904 = _2768.z - _2019;
                                float _2905 = dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904));
                                float _2908 = inversesqrt(_2905);
                                float _2909 = _2908 * _2902;
                                float _2910 = _2908 * _2903;
                                float _2911 = _2908 * _2904;
                                float _2915 = 1.0 - (_2905 / (_2769 * _2769));
                                float _3820 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2916 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
                                float _2920 = sqrt(_2905) * _2784.w;
                                float _2922 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                                float _2923 = _2922 * _2922;
                                float _2926 = ((1.0 - _2923) * dot(vec3(_2909, _2910, _2911), vec3(_666, _669, _672))) + _2923;
                                float _2929 = _2920 * _2920;
                                float _2933 = (fma(_2019, _2811.z, fma(_2018, _2811.y, _2811.x * _2017)) + _2811.w) / _2874;
                                float _2934 = (fma(_2019, _2827.z, fma(_2018, _2827.y, _2827.x * _2017)) + _2827.w) / _2874;
                                float _2938 = 1.0 - dot(vec2(_2933, _2934), vec2(_2933, _2934));
                                float _3836 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                                float _2939 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                                float _2940 = _2939 * (((isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0))) * _2916) / ((_2929 * 0.699999988079071044921875) + 1.0));
                                float _2952 = exp2(log2(1.0 / ((_2929 * 3.5) + 5.0)) * 0.25);
                                float _2953 = 1.0 - _726;
                                float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                                float _2961 = _2960 * _2960;
                                float _2962 = _2961 * _2961;
                                float _2963 = _2909 - _2339;
                                float _2964 = _2910 - _2340;
                                float _2965 = _2911 - _2341;
                                float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                                float _2973 = dot(vec3(_666, _669, _672), vec3((-0.0) - _2339, (-0.0) - _2340, (-0.0) - _2341));
                                float _3847 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                                float _2976 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
                                float _2977 = dot(vec3(_666, _669, _672), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                                float _3858 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2980 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                                float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                                float _2985 = _2922 * _2961;
                                float _2986 = _2985 * _2985;
                                float _2992 = ((1.0 - _2986) * dot(vec3(_666, _669, _672), vec3(_2909, _2910, _2911))) + _2986;
                                float _3869 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                                float _2994 = 1.0 - _2961;
                                float _3004 = (0.5 / (((_2993 * ((_2976 * _2994) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2961) * _2976))) * _2993;
                                float _3880 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3014 = (_2939 * _2916) * (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) / ((_2984 * _2984) * ((_2929 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_67_pred = _2940 * _2784.z;
                                frontier_phi_67_pred_1 = _2940 * _2784.y;
                                frontier_phi_67_pred_2 = _2940 * _2784.x;
                                frontier_phi_67_pred_3 = _3014 * _2796.z;
                                frontier_phi_67_pred_4 = _3014 * _2796.y;
                                frontier_phi_67_pred_5 = _3014 * _2796.x;
                            }
                            else
                            {
                                frontier_phi_67_pred = 0.0;
                                frontier_phi_67_pred_1 = 0.0;
                                frontier_phi_67_pred_2 = 0.0;
                                frontier_phi_67_pred_3 = 0.0;
                                frontier_phi_67_pred_4 = 0.0;
                                frontier_phi_67_pred_5 = 0.0;
                            }
                            _3023 = frontier_phi_67_pred;
                            _3022 = frontier_phi_67_pred_1;
                            _3021 = frontier_phi_67_pred_2;
                            _3020 = frontier_phi_67_pred_3;
                            _3019 = frontier_phi_67_pred_4;
                            _3018 = frontier_phi_67_pred_5;
                            _2726 = _3021 + _2739;
                            _2727 = _3022 + _2740;
                            _2728 = _3023 + _2741;
                            _2723 = _3018 + _2736;
                            _2724 = _3019 + _2737;
                            _2725 = _3020 + _2738;
                            if (_2743 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2736 = _2723;
                                _2737 = _2724;
                                _2738 = _2725;
                                _2739 = _2726;
                                _2740 = _2727;
                                _2741 = _2728;
                                _2742 = _2743;
                                continue;
                            }
                        }
                        frontier_phi_61_pred = _2728;
                        frontier_phi_61_pred_1 = _2727;
                        frontier_phi_61_pred_2 = _2726;
                        frontier_phi_61_pred_3 = _2725;
                        frontier_phi_61_pred_4 = _2724;
                        frontier_phi_61_pred_5 = _2723;
                    }
                    _2324 = frontier_phi_61_pred;
                    _2322 = frontier_phi_61_pred_1;
                    _2320 = frontier_phi_61_pred_2;
                    _2318 = frontier_phi_61_pred_3;
                    _2316 = frontier_phi_61_pred_4;
                    _2314 = frontier_phi_61_pred_5;
                    uint _2510 = _2509 + 1u;
                    if (_2510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2503 = _2314;
                        _2504 = _2316;
                        _2505 = _2318;
                        _2506 = _2320;
                        _2507 = _2322;
                        _2508 = _2324;
                        _2509 = _2510;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2324;
                frontier_phi_43_44_ladder_1 = _2320;
                frontier_phi_43_44_ladder_2 = _2322;
                frontier_phi_43_44_ladder_3 = _2318;
                frontier_phi_43_44_ladder_4 = _2316;
                frontier_phi_43_44_ladder_5 = _2314;
            }
            else
            {
                frontier_phi_43_44_ladder = _2179;
                frontier_phi_43_44_ladder_1 = _2175;
                frontier_phi_43_44_ladder_2 = _2177;
                frontier_phi_43_44_ladder_3 = _2173;
                frontier_phi_43_44_ladder_4 = _2171;
                frontier_phi_43_44_ladder_5 = _2169;
            }
            _2313 = frontier_phi_43_44_ladder_5;
            _2315 = frontier_phi_43_44_ladder_4;
            _2317 = frontier_phi_43_44_ladder_3;
            _2319 = frontier_phi_43_44_ladder_1;
            _2321 = frontier_phi_43_44_ladder_2;
            _2323 = frontier_phi_43_44_ladder;
        }
        float _2328 = isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0));
        _2075 = (_2328 * _2319) + _1806;
        _2077 = (_2328 * _2321) + _1807;
        _2079 = (_2328 * _2323) + _1808;
        _2081 = ((_2313 * 0.039999999105930328369140625) * _2328) + _1959;
        _2083 = ((_2315 * 0.039999999105930328369140625) * _2328) + _1960;
        _2085 = ((_2317 * 0.039999999105930328369140625) * _2328) + _1961;
    }
    else
    {
        _2075 = _1806;
        _2077 = _1807;
        _2079 = _1808;
        _2081 = _1959;
        _2083 = _1960;
        _2085 = _1961;
    }
    uint _2091 = _686 + uint(cbMatDynParam._m0[0u].w);
    float _3896 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3907 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3918 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _2116 = (((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_2075 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _710))) + ((_2081 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[12u].y * _570) * cbInstanceData._m0[_2091].x);
    float _2118 = (((cbMtdParam._m0[12u].y * _573) * cbInstanceData._m0[_2091].y) + ((_2083 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_2077 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _710)));
    float _2120 = (((cbMtdParam._m0[12u].y * _576) * cbInstanceData._m0[_2091].z) + ((_2085 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_2079 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _710)));
    uint _2124 = _685 + 6u;
    float _2132 = _644 / cbSceneParam._m0[86u].x;
    float _2133 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2147 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2132, _2133, (log2((isnan(cbSceneParam._m0[77u].w) ? _638 : (isnan(_638) ? cbSceneParam._m0[77u].w : min(_638, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2149 = _2147.x;
    float _2150 = _2147.y;
    float _2151 = _2147.z;
    float _2152 = _2147.w;
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    if (_638 > cbSceneParam._m0[78u].w)
    {
        float _2194 = isnan(_638) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _638 : min(cbSceneParam._m0[80u].w, _638));
        float _2195 = _2194 / _638;
        float _2206 = _2195 * _273;
        float _2207 = _274 * _2195;
        float _2208 = (-0.0) - _2207;
        float _2209 = _2195 * _275;
        float _2211 = (cbSceneParam._m0[77u].w * _2208) / _2194;
        float _2212 = _2211 + cbSceneParam._m0[79u].w;
        float _2213 = cbSceneParam._m0[79u].w - _2207;
        float _2219 = sqrt(((_2206 * _2206) + (_2207 * _2207)) + (_2209 * _2209));
        float _2222 = (1.0 - (cbSceneParam._m0[77u].w / _2194)) * _2219;
        float _2228 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2230 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2439;
        if (abs((_2208 - _2211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2439 = ((((_2212 > 0.0) ? exp2(_2228 * _2212) : (2.0 - exp2(_2230 * _2212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2222;
        }
        else
        {
            float _2374 = 1.0 / cbSceneParam._m0[80u].x;
            float _2375 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : max(_2212, _2213));
            float _2376 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : min(_2212, _2213));
            float _2385 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : min(_2375, 0.0));
            float _2386 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : min(_2376, 0.0));
            _2439 = ((abs(_2219 / _2208) * cbSceneParam._m0[80u].y) * ((((_2385 - _2386) * 2.0) - ((exp2(_2228 * (isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0)))) - exp2(_2228 * (isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0))))) * _2374)) - ((exp2(_2230 * _2385) - exp2(_2230 * _2386)) * _2374))) + (_2222 * cbSceneParam._m0[80u].z);
        }
        vec4 _2441 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2132, _2133, 1.0), 0.0);
        float _2450 = exp2((_2439 * (-1.44269502162933349609375)) * (1.0 - _2441.w));
        float _2451 = log2(_2450);
        float _2467 = log2(_2152);
        _2232 = (exp2(_2467 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].x)) * _2441.x) / cbSceneParam._m0[78u].x)) + _2149;
        _2234 = (exp2(_2467 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].y)) * _2441.y) / cbSceneParam._m0[78u].y)) + _2150;
        _2236 = (exp2(_2467 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].z)) * _2441.z) / cbSceneParam._m0[78u].z)) + _2151;
        _2238 = _2450 * _2152;
    }
    else
    {
        _2232 = _2149;
        _2234 = _2150;
        _2236 = _2151;
        _2238 = _2152;
    }
    float _2250 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2251 = _2250 == 3.0;
    float _2252 = log2(_2238);
    float _2259 = exp2(_2252 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0)));
    float _2260 = exp2(_2252 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)));
    float _2261 = exp2(_2252 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0)));
    float _2270 = (_2250 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2270 * (_2251 ? _2259 : (_2259 + (cbSceneParam._m0[72u].w * _2232)));
    SV_Target.y = _2270 * (_2251 ? _2260 : (_2260 + (cbSceneParam._m0[72u].w * _2234)));
    SV_Target.z = _2270 * (_2251 ? _2261 : (_2261 + (cbSceneParam._m0[72u].w * _2236)));
    SV_Target.w = cbInstanceData._m0[_2124].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2124].w;
}


