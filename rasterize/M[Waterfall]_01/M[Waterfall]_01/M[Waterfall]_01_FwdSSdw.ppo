#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_01_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_01_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_01_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_01_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1083;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _290 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _308 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_5, SS_BumpMap), vec2((((_290 * cbMtdParam._m0[17u].z) + TEXCOORD_1.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_290 * cbMtdParam._m0[17u].w) + TEXCOORD_1.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _313 = _308.x * 2.0;
    float _315 = _308.y * 2.0;
    float _316 = _313 + (-1.0);
    float _318 = _315 + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3172 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))));
    float _339 = (cbMtdParam._m0[16u].z * _290) + TEXCOORD_1.x;
    float _340 = (cbMtdParam._m0[16u].w * _290) + TEXCOORD_1.y;
    vec4 _352 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_339 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_340 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _357 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].x * cbMtdParam._m0[13u].z);
    float _364 = ((_352.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _366 = (-0.0) - (cbMtdParam._m0[14u].z * ((_352.x * 0.5) + (-0.25)));
    float _367 = fract(_357);
    float _369 = fract(_357 + 0.5);
    float _380 = abs((_367 * 2.0) + (-1.0));
    vec4 _396 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_367 * _366) + _339) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_364 * _367) + _340) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _398 = _396.x;
    float _399 = _396.y;
    vec4 _400 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_369 * _366) + _339) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_364 * _369) + _340) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _426 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].x * _290) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].y * _290) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _436 = ((_313 + (-1.35000002384185791015625)) + ((((((_400.x - _398) * _380) + _398) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_426.x * 0.699999988079071044921875);
    float _439 = ((_315 + (-1.35000002384185791015625)) + ((((((_400.y - _399) * _380) + _399) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_426.y * 0.699999988079071044921875);
    float _442 = fma(_325, _219, fma(_439, _211 * TANGENT.x, _436 * (_197 * _189)));
    float _445 = fma(_325, _220, fma(_439, _211 * TANGENT.y, _436 * (_197 * _190)));
    float _448 = fma(_325, _221, fma(_439, _211 * TANGENT.z, _436 * (_197 * _191)));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _467 = (cbMtdParam._m0[17u].x * _290) + TEXCOORD_1.x;
    float _468 = (cbMtdParam._m0[17u].y * _290) + TEXCOORD_1.y;
    vec4 _480 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_467 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_468 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _497 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _467) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _468) + cbTextureTilingScale._m0[0u].w));
    float _509 = (cbMtdParam._m0[15u].z * _290) + TEXCOORD_1.x;
    float _510 = (cbMtdParam._m0[15u].w * _290) + TEXCOORD_1.y;
    vec4 _515 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_509 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_510 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _523 = ((_515.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _525 = (-0.0) - (cbMtdParam._m0[14u].z * ((_515.x * 0.5) + (-0.25)));
    vec4 _542 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_367 * _525) + _509) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_523 * _367) + _510) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _546 = _542.z;
    vec4 _547 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_369 * _525) + _509) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_523 * _369) + _510) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _561 = exp2(log2(_480.x) * cbMtdParam._m0[13u].y) * cbMtdParam._m0[14u].w;
    float _572 = ((_497.x + cbMtdParam._m0[10u].x) + cbMtdParam._m0[9u].x) + (_561 * (((_547.x - _544) * _380) + _544));
    float _575 = ((_497.y + cbMtdParam._m0[10u].y) + cbMtdParam._m0[9u].y) + (_561 * (((_547.y - _545) * _380) + _545));
    float _578 = ((_497.z + cbMtdParam._m0[10u].z) + cbMtdParam._m0[9u].z) + (_561 * (((_547.z - _546) * _380) + _546));
    float _589 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _590 = _589 * _275;
    float _591 = _589 * _276;
    float _592 = _589 * _277;
    float _596 = dot(vec4(_590, _591, _592, 0.0), vec4(_453, _454, _455, 0.0)) - cbMtdParam._m0[12u].w;
    float _3183 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _603 = exp2(log2(1.0 - (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _611 = ((_603 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _572;
    float _613 = ((_603 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _575;
    float _615 = ((_603 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _578;
    float _3199 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _621 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
    float _3210 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3221 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3232 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _640 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _646 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _647 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _668 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _671 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _674 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    uint _687 = uint(roundEven(NORMAL.w)) * 13u;
    uint _688 = _687 + 9u;
    uint _689 = _688 + uint(cbMatDynParam._m0[0u].w);
    float _695 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_689].x;
    float _696 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_689].y;
    float _697 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_689].z;
    float _3243 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _3254 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    vec4 _709 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _646, cbSceneParam._m0[86u].y * _647));
    float _712 = _709.x * TEXCOORD_1.w;
    float _713 = dot(vec3(_453, _454, _455), vec3(_590, _591, _592));
    float _716 = _713 * 2.0;
    float _720 = (_716 * _453) - _590;
    float _721 = (_716 * _454) - _591;
    float _722 = (_716 * _455) - _592;
    float _726 = abs(dot(vec3(_590, _591, _592), vec3(_453, _454, _455)));
    float _3276 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _728 = sqrt(_621);
    float _741 = exp2((_728 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_728 * 3.0));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1082;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_781, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773));
        float _812 = fma(_781, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773));
        float _816 = fma(_781, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773));
        float _840 = _773 + _453;
        float _841 = _777 + _454;
        float _842 = _781 + _455;
        float _852 = fma(_842, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840)) - _808;
        float _853 = fma(_842, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840)) - _812;
        float _854 = fma(_842, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840)) - _816;
        float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
        float _871 = ((_858 * _852) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_858 * _853) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_858 * _854) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        float _910 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_876.x + (-0.5));
        float _912 = _910 * (_876.y + (-0.5));
        float _913 = _910 * (_876.z + (-0.5));
        float _920 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_883.x + (-0.5));
        float _922 = _920 * (_883.y + (-0.5));
        float _923 = _920 * (_883.z + (-0.5));
        float _930 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_890.x + (-0.5));
        float _932 = _930 * (_890.y + (-0.5));
        float _933 = _930 * (_890.z + (-0.5));
        float _940 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_897.x + (-0.5));
        float _942 = _940 * (_897.y + (-0.5));
        float _943 = _940 * (_897.z + (-0.5));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = _911 * 0.5;
        float _948 = _921 * 0.5;
        float _949 = _931 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _964 = (dot(vec3(_453, _454, _455), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3302 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _974 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3313 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3324 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * (_976 + 1.0))) + _981) * _944;
        float _991 = _912 * 0.5;
        float _992 = _922 * 0.5;
        float _993 = _932 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_453, _454, _455), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3357 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_1018 + 1.0))) + _1023) * _945;
        float _1033 = _913 * 0.5;
        float _1034 = _923 * 0.5;
        float _1035 = _933 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_453, _454, _455), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3390 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_1060 + 1.0))) + _1065) * _946;
        _1082 = _913;
        _1084 = _912;
        _1085 = _911;
        _1086 = _923;
        _1087 = _922;
        _1088 = _921;
        _1089 = _933;
        _1090 = _932;
        _1091 = _931;
        _1092 = _946;
        _1093 = _945;
        _1094 = _944;
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
    }
    else
    {
        _1082 = _1083;
        _1084 = _1083;
        _1085 = _1083;
        _1086 = _1083;
        _1087 = _1083;
        _1088 = _1083;
        _1089 = _1083;
        _1090 = _1083;
        _1091 = _1083;
        _1092 = _1083;
        _1093 = _1083;
        _1094 = _1083;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_781, cbModelParam._m0[30u].z, fma(_777, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _773));
        float _1127 = fma(_781, cbModelParam._m0[31u].z, fma(_777, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _773));
        float _1131 = fma(_781, cbModelParam._m0[32u].z, fma(_777, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _773));
        float _1154 = _773 + _453;
        float _1155 = _777 + _454;
        float _1156 = _781 + _455;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_453, _454, _455), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3453 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_453, _454, _455), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3486 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_453, _454, _455), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3519 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1083;
        _1393 = _1083;
        _1394 = _1083;
        _1395 = _1083;
        _1396 = _1083;
        _1397 = _1083;
        _1398 = _1083;
        _1399 = _1083;
        _1400 = _1083;
        _1401 = _1083;
        _1402 = _1083;
        _1403 = _1083;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1095)) + _1095;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1096)) + _1096;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1097)) + _1097;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _720 * 0.5;
    float _1461 = _721 * 0.5;
    float _1462 = _722 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1086, _1089, _1092));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1576 = fma(_781, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773)) + cbModelParam._m0[13u].w;
        float _1580 = fma(_781, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773)) + cbModelParam._m0[14u].w;
        float _1584 = fma(_781, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773)) + cbModelParam._m0[15u].w;
        float _1587 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1590 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1593 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1621;
        if (_1587 > 0.0)
        {
            _1621 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1621 = frontier_phi_16_14_ladder;
        }
        float _1993;
        if (_1590 > 0.0)
        {
            _1993 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1993 = frontier_phi_25_21_ladder;
        }
        float _2308;
        if (_1593 > 0.0)
        {
            _2308 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2308 = frontier_phi_39_32_ladder;
        }
        float _2310 = isnan(_1993) ? _1621 : (isnan(_1621) ? _1993 : min(_1621, _1993));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1587) + _1576;
        float _2316 = (_2311 * _1590) + _1580;
        float _2317 = (_2311 * _1593) + _1584;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2318;
        float _2321 = _2318 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2317 > _2321) || ((_2317 < _2319) || ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 < _2319) || (_2315 > _2321))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2317, cbModelParam._m0[9u].z, fma(_2316, cbModelParam._m0[9u].y, _2315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2317, cbModelParam._m0[10u].z, fma(_2316, cbModelParam._m0[10u].y, _2315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2317, cbModelParam._m0[11u].z, fma(_2316, cbModelParam._m0[11u].y, _2315 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_15_39_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1609 = frontier_phi_15_39_ladder_2;
        _1611 = frontier_phi_15_39_ladder_1;
        _1613 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1529);
        _1609 = _1597.x * cbModelParam._m0[1u].y;
        _1611 = _1597.y * cbModelParam._m0[1u].y;
        _1613 = _1597.z * cbModelParam._m0[1u].y;
    }
    float _1617 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1617 : min(cbModelParam._m0[25u].w, _1617));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_781, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_781, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_781, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1687 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1690 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1998;
        if (_1684 > 0.0)
        {
            _1998 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1998 = frontier_phi_27_23_ladder;
        }
        float _2334;
        if (_1687 > 0.0)
        {
            _2334 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2334 = frontier_phi_41_34_ladder;
        }
        float _2503;
        if (_1690 > 0.0)
        {
            _2503 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _2503 = frontier_phi_55_50_ladder;
        }
        float _2505 = isnan(_2334) ? _1998 : (isnan(_1998) ? _2334 : min(_1998, _2334));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1684) + _1673;
        float _2511 = (_2506 * _1687) + _1677;
        float _2512 = (_2506 * _1690) + _1681;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_24_55_ladder;
        float frontier_phi_24_55_ladder_1;
        float frontier_phi_24_55_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_24_55_ladder = 0.0;
            frontier_phi_24_55_ladder_1 = 0.0;
            frontier_phi_24_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1618);
            frontier_phi_24_55_ladder = _2744.z * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_1 = _2744.y * cbModelParam._m0[1u].z;
            frontier_phi_24_55_ladder_2 = _2744.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_24_55_ladder_2;
        _1711 = frontier_phi_24_55_ladder_1;
        _1713 = frontier_phi_24_55_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1618);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1725 = ((((1.0 - _741) * ((_728 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_741 * _728)) * _712;
    float _1726 = _1725 * ((cbModelParam._m0[1u].w * (_1709 - _1609)) + _1609);
    float _1727 = _1725 * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1728 = _1725 * ((cbModelParam._m0[1u].w * (_1713 - _1613)) + _1613);
    float _1731 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    vec4 _1745 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_646, _647));
    float _1747 = _1745.w;
    float _1759 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1747);
    float _1760 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1747);
    float _1761 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1747);
    uvec4 _1765 = floatBitsToUint(cbInstanceData._m0[_687 + 5u]);
    uint _1767 = _1765.x * 14u;
    uint _1768 = _1767 + 13u;
    float _1773 = _712 + (-1.0);
    float _1776 = (cbLight._m0[_1768].x * _1773) + 1.0;
    float _1777 = (cbLight._m0[_1768].y * _1773) + 1.0;
    uint _1778 = _1767 + 5u;
    float _1784 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1788 = _1767 + 4u;
    float _1797 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1801 = _1767 | 1u;
    float _1812 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_453, _454, _455));
    float _1815 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_453, _454, _455));
    float _3655 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _3666 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1820 = (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.3183098733425140380859375;
    float _1822 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.3183098733425140380859375;
    float _1829 = ((cbLight._m0[_1778].x * _1784) * _1822) + (((cbLight._m0[_1788].x * _1759) * _1797) * _1820);
    float _1830 = ((_1784 * cbLight._m0[_1778].y) * _1822) + (((cbLight._m0[_1788].y * _1760) * _1797) * _1820);
    float _1831 = ((_1784 * cbLight._m0[_1778].z) * _1822) + (((cbLight._m0[_1788].z * _1761) * _1797) * _1820);
    uint _1833 = _1767 + 8u;
    float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * _621) * 0.949999988079071044921875);
    float _1847 = _1846 * _1846;
    float _1848 = cbLight._m0[_1767].x + _590;
    float _1849 = cbLight._m0[_1767].y + _591;
    float _1850 = cbLight._m0[_1767].z + _592;
    float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
    float _1855 = _1854 * _1848;
    float _1856 = _1854 * _1849;
    float _1857 = _1854 * _1850;
    float _1858 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1767].xyz));
    float _3677 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _1862 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _1863 = dot(vec3(_453, _454, _455), vec3(_1855, _1856, _1857));
    float _3699 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1867 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1855, _1856, _1857));
    float _3710 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1871 = _1847 * _1847;
    float _1875 = ((_1866 * _1866) * (_1871 + (-1.0))) + 1.0;
    float _1886 = (exp2(log2(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1887 = 1.0 - _1847;
    float _1898 = (0.5 / (((_1862 * ((_1861 * _1887) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _1887) + _1847) * _1861))) * _1861;
    float _3721 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1900 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1871 / ((_1875 * _1875) * 3.141590118408203125));
    uint _1914 = _1767 + 9u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _621) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1801].x + _590;
    float _1928 = cbLight._m0[_1801].y + _591;
    float _1929 = cbLight._m0[_1801].z + _592;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1801].xyz));
    float _3732 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _1941 = dot(vec3(_453, _454, _455), vec3(_1934, _1935, _1936));
    float _3743 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1934, _1935, _1936));
    float _3754 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1926 * _1926;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1963 = 1.0 - _1926;
    float _1973 = (0.5 / (((_1862 * ((_1940 * _1963) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _1963) + _1926) * _1940))) * _1940;
    float _3765 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1975 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    float _1985 = (((_1962 * cbLight._m0[_1914].x) * _1975) * _1784) + ((((cbLight._m0[_1833].x * _1759) * _1886) * _1900) * _1797);
    float _1986 = (((_1962 * cbLight._m0[_1914].y) * _1975) * _1784) + ((((cbLight._m0[_1833].y * _1760) * _1886) * _1900) * _1797);
    float _1987 = (((_1962 * cbLight._m0[_1914].z) * _1975) * _1784) + ((((cbLight._m0[_1833].z * _1761) * _1886) * _1900) * _1797);
    float _2101;
    float _2103;
    float _2105;
    float _2107;
    float _2109;
    float _2111;
    if (_1765.y == 0u)
    {
        float _2042 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2042;
        float _2044 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2042;
        float _2045 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2042;
        uvec4 _2057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2058 = _2057.x;
        uint _2069 = uint((float(_2057.y) * floor(float(uint(cbSceneParam._m0[85u].y * _647) / _2058))) + floor(float(uint(cbSceneParam._m0[85u].x * _646) / _2058)));
        float _2079 = (log2(_2045 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2080 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        uint _2083 = uint(isnan(14.0) ? _2080 : (isnan(_2080) ? 14.0 : min(_2080, 14.0)));
        uvec4 _2088 = texelFetch(g_lightClusterGridBuffer, int(((_2083 << 2u) + (_2069 << 6u)) >> 2u));
        uint _2089 = _2088.x;
        uint _2090 = _2057.z;
        float _2195;
        float _2197;
        float _2199;
        float _2201;
        float _2203;
        float _2205;
        if (((((1u << ((_2090 >> 4u) & 15u)) + 4294967295u) & _2089) == 0u) || ((_2090 & 240u) == 0u))
        {
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
            _2201 = 0.0;
            _2203 = 0.0;
            _2205 = 0.0;
        }
        else
        {
            float _2196;
            float _2198;
            float _2200;
            float _2202;
            float _2204;
            float _2206;
            float _2371 = 0.0;
            float _2372 = 0.0;
            float _2373 = 0.0;
            float _2374 = 0.0;
            float _2375 = 0.0;
            float _2376 = 0.0;
            uint _2377 = 0u;
            uint _2386;
            bool _2387;
            for (;;)
            {
                _2386 = texelFetch(g_lightClassification, int((((_2083 << 5u) + (_2069 << 9u)) + (_2377 << 2u)) >> 2u)).x;
                _2387 = _2386 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2387)
                {
                    frontier_phi_52_pred = _2371;
                    frontier_phi_52_pred_1 = _2376;
                    frontier_phi_52_pred_2 = _2375;
                    frontier_phi_52_pred_3 = _2374;
                    frontier_phi_52_pred_4 = _2373;
                    frontier_phi_52_pred_5 = _2372;
                }
                else
                {
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    uint _2552;
                    _2546 = _2371;
                    _2547 = _2372;
                    _2548 = _2373;
                    _2549 = _2374;
                    _2550 = _2375;
                    _2551 = _2376;
                    _2552 = _2386;
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    for (;;)
                    {
                        uint _2556 = uint(findLSB(_2552)) + (_2377 << 5u);
                        uint _2553 = (_2552 + 4294967295u) & _2552;
                        uint _2558 = _2556 * 48u;
                        vec4 _2572 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2558)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 3u)).x));
                        uint _2578 = (_2556 * 48u) + 4u;
                        vec4 _2591 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 3u)).x));
                        uint _2597 = (_2556 * 48u) + 8u;
                        vec3 _2608 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2597)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 2u)).x));
                        float _2612 = _2572.x - _2043;
                        float _2613 = _2572.y - _2044;
                        float _2614 = _2572.z - _2045;
                        float _2615 = dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614));
                        float _2618 = inversesqrt(_2615);
                        float _2619 = _2618 * _2612;
                        float _2620 = _2618 * _2613;
                        float _2621 = _2618 * _2614;
                        float _2622 = dot(vec3(_668, _671, _674), vec3(_2619, _2620, _2621));
                        float _2627 = 1.0 - (_2615 * _2572.w);
                        float _3786 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                        float _2628 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
                        float _2629 = sqrt(_2615) * _2591.w;
                        float _2632 = 1.39999997615814208984375 / (_2629 + 1.39999997615814208984375);
                        float _2633 = _2632 * _2632;
                        float _2636 = ((1.0 - _2633) * _2622) + _2633;
                        float _2639 = _2629 * _2629;
                        float _2642 = ((isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0))) * _2628) / ((_2639 * 0.699999988079071044921875) + 1.0);
                        float _2646 = (-0.0) - _2043;
                        float _2647 = (-0.0) - _2044;
                        float _2648 = (-0.0) - _2045;
                        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
                        float _2653 = _2652 * _2646;
                        float _2654 = _2652 * _2647;
                        float _2655 = _2652 * _2648;
                        float _2663 = exp2(log2(1.0 / ((_2639 * 3.5) + 5.0)) * 0.25);
                        float _2664 = 1.0 - _728;
                        float _2671 = sqrt(1.0 - ((1.0 - (_2664 * _2664)) * (1.0 - (_2663 * _2663))));
                        float _2672 = _2671 * _2671;
                        float _2673 = _2672 * _2672;
                        float _2674 = _2653 + _2619;
                        float _2675 = _2654 + _2620;
                        float _2676 = _2655 + _2621;
                        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
                        float _2684 = dot(vec3(_668, _671, _674), vec3(_2653, _2654, _2655));
                        float _3802 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2687 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
                        float _2688 = dot(vec3(_668, _671, _674), vec3(_2680 * _2674, _2680 * _2675, _2680 * _2676));
                        float _3813 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2691 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                        float _2695 = ((_2691 * _2691) * (_2673 + (-1.0))) + 1.0;
                        float _2696 = _2632 * _2672;
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2622) + _2697;
                        float _3824 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                        float _2702 = 1.0 - _2672;
                        float _2712 = (0.5 / (((_2701 * ((_2687 * _2702) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2702) + _2672) * _2687))) * _2701;
                        float _3835 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2723 = (((_2673 * 3.1415927410125732421875) * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) / ((_2695 * _2695) * ((_2639 * 2.1991131305694580078125) + 3.141590118408203125))) * _2628;
                        _2455 = (_2642 * _2591.x) + _2549;
                        _2456 = (_2642 * _2591.y) + _2550;
                        _2457 = (_2642 * _2591.z) + _2551;
                        _2452 = (_2723 * _2608.x) + _2546;
                        _2453 = (_2723 * _2608.y) + _2547;
                        _2454 = (_2723 * _2608.z) + _2548;
                        if (_2553 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2546 = _2452;
                            _2547 = _2453;
                            _2548 = _2454;
                            _2549 = _2455;
                            _2550 = _2456;
                            _2551 = _2457;
                            _2552 = _2553;
                        }
                    }
                    frontier_phi_52_pred = _2452;
                    frontier_phi_52_pred_1 = _2457;
                    frontier_phi_52_pred_2 = _2456;
                    frontier_phi_52_pred_3 = _2455;
                    frontier_phi_52_pred_4 = _2454;
                    frontier_phi_52_pred_5 = _2453;
                }
                _2196 = frontier_phi_52_pred;
                _2206 = frontier_phi_52_pred_1;
                _2204 = frontier_phi_52_pred_2;
                _2202 = frontier_phi_52_pred_3;
                _2200 = frontier_phi_52_pred_4;
                _2198 = frontier_phi_52_pred_5;
                uint _2378 = _2377 + 1u;
                if (_2378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2371 = _2196;
                    _2372 = _2198;
                    _2373 = _2200;
                    _2374 = _2202;
                    _2375 = _2204;
                    _2376 = _2206;
                    _2377 = _2378;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
            _2201 = _2202;
            _2203 = _2204;
            _2205 = _2206;
        }
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.z;
        uint _2212 = (_2210 >> 8u) & 15u;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        if (((4294967295u << _2212) & _2089) == 0u)
        {
            _2339 = _2195;
            _2341 = _2197;
            _2343 = _2199;
            _2345 = _2201;
            _2347 = _2203;
            _2349 = _2205;
        }
        else
        {
            float _2364 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
            float _2365 = _2364 * _2043;
            float _2366 = _2364 * _2044;
            float _2367 = _2364 * _2045;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2212 < ((_2210 >> 12u) & 15u))
            {
                float _2340;
                float _2342;
                float _2344;
                float _2346;
                float _2348;
                float _2350;
                float _2529 = _2195;
                float _2530 = _2197;
                float _2531 = _2199;
                float _2532 = _2201;
                float _2533 = _2203;
                float _2534 = _2205;
                uint _2535 = _2212;
                uint _2544;
                bool _2545;
                for (;;)
                {
                    _2544 = texelFetch(g_lightClassification, int((((_2083 << 5u) + (_2069 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                    _2545 = _2544 == 0u;
                    float frontier_phi_61_pred;
                    float frontier_phi_61_pred_1;
                    float frontier_phi_61_pred_2;
                    float frontier_phi_61_pred_3;
                    float frontier_phi_61_pred_4;
                    float frontier_phi_61_pred_5;
                    if (_2545)
                    {
                        frontier_phi_61_pred = _2534;
                        frontier_phi_61_pred_1 = _2533;
                        frontier_phi_61_pred_2 = _2532;
                        frontier_phi_61_pred_3 = _2531;
                        frontier_phi_61_pred_4 = _2530;
                        frontier_phi_61_pred_5 = _2529;
                    }
                    else
                    {
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2754;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _2762 = _2529;
                        float _2763 = _2530;
                        float _2764 = _2531;
                        float _2765 = _2532;
                        float _2766 = _2533;
                        float _2767 = _2534;
                        uint _2768 = _2544;
                        uint _2769;
                        vec4 _2794;
                        float _2795;
                        vec4 _2810;
                        vec3 _2822;
                        vec4 _2837;
                        vec4 _2853;
                        float _2900;
                        bool _2901;
                        for (;;)
                        {
                            uint _2779 = ((_2535 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2768));
                            _2769 = (_2768 + 4294967295u) & _2768;
                            uint _2781 = _2779 * 40u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            _2795 = _2794.w;
                            uint _2797 = (_2779 * 40u) + 4u;
                            _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            uint _2812 = (_2779 * 40u) + 8u;
                            _2822 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x));
                            uint _2824 = (_2779 * 40u) + 16u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2840 = (_2779 * 40u) + 20u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2856 = (_2779 * 40u) + 24u;
                            vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2875 = (_2779 * 40u) + 28u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            _2900 = fma(_2045, _2888.z, fma(_2044, _2888.y, _2888.x * _2043)) + _2888.w;
                            _2901 = !((fma(_2045, _2869.z, fma(_2044, _2869.y, _2869.x * _2043)) + _2869.w) <= 0.0);
                            float frontier_phi_67_pred;
                            float frontier_phi_67_pred_1;
                            float frontier_phi_67_pred_2;
                            float frontier_phi_67_pred_3;
                            float frontier_phi_67_pred_4;
                            float frontier_phi_67_pred_5;
                            if (_2901)
                            {
                                float _2928 = _2794.x - _2043;
                                float _2929 = _2794.y - _2044;
                                float _2930 = _2794.z - _2045;
                                float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                                float _2934 = inversesqrt(_2931);
                                float _2935 = _2934 * _2928;
                                float _2936 = _2934 * _2929;
                                float _2937 = _2934 * _2930;
                                float _2941 = 1.0 - (_2931 / (_2795 * _2795));
                                float _3846 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2942 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
                                float _2946 = sqrt(_2931) * _2810.w;
                                float _2948 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                                float _2949 = _2948 * _2948;
                                float _2952 = ((1.0 - _2949) * dot(vec3(_2935, _2936, _2937), vec3(_668, _671, _674))) + _2949;
                                float _2955 = _2946 * _2946;
                                float _2959 = (fma(_2045, _2837.z, fma(_2044, _2837.y, _2837.x * _2043)) + _2837.w) / _2900;
                                float _2960 = (fma(_2045, _2853.z, fma(_2044, _2853.y, _2853.x * _2043)) + _2853.w) / _2900;
                                float _2964 = 1.0 - dot(vec2(_2959, _2960), vec2(_2959, _2960));
                                float _3862 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2965 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                                float _2966 = _2965 * (((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2942) / ((_2955 * 0.699999988079071044921875) + 1.0));
                                float _2978 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                                float _2979 = 1.0 - _728;
                                float _2986 = sqrt(1.0 - ((1.0 - (_2979 * _2979)) * (1.0 - (_2978 * _2978))));
                                float _2987 = _2986 * _2986;
                                float _2988 = _2987 * _2987;
                                float _2989 = _2935 - _2365;
                                float _2990 = _2936 - _2366;
                                float _2991 = _2937 - _2367;
                                float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                                float _2999 = dot(vec3(_668, _671, _674), vec3((-0.0) - _2365, (-0.0) - _2366, (-0.0) - _2367));
                                float _3873 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3002 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                                float _3003 = dot(vec3(_668, _671, _674), vec3(_2995 * _2989, _2995 * _2990, _2995 * _2991));
                                float _3884 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3006 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                                float _3010 = ((_3006 * _3006) * (_2988 + (-1.0))) + 1.0;
                                float _3011 = _2948 * _2987;
                                float _3012 = _3011 * _3011;
                                float _3018 = ((1.0 - _3012) * dot(vec3(_668, _671, _674), vec3(_2935, _2936, _2937))) + _3012;
                                float _3895 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                                float _3020 = 1.0 - _2987;
                                float _3030 = (0.5 / (((_3019 * ((_3002 * _3020) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2987) * _3002))) * _3019;
                                float _3906 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3040 = (_2965 * _2942) * (((_2988 * 3.1415927410125732421875) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) / ((_3010 * _3010) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_67_pred = _2966 * _2810.z;
                                frontier_phi_67_pred_1 = _2966 * _2810.y;
                                frontier_phi_67_pred_2 = _2966 * _2810.x;
                                frontier_phi_67_pred_3 = _3040 * _2822.z;
                                frontier_phi_67_pred_4 = _3040 * _2822.y;
                                frontier_phi_67_pred_5 = _3040 * _2822.x;
                            }
                            else
                            {
                                frontier_phi_67_pred = 0.0;
                                frontier_phi_67_pred_1 = 0.0;
                                frontier_phi_67_pred_2 = 0.0;
                                frontier_phi_67_pred_3 = 0.0;
                                frontier_phi_67_pred_4 = 0.0;
                                frontier_phi_67_pred_5 = 0.0;
                            }
                            _3049 = frontier_phi_67_pred;
                            _3048 = frontier_phi_67_pred_1;
                            _3047 = frontier_phi_67_pred_2;
                            _3046 = frontier_phi_67_pred_3;
                            _3045 = frontier_phi_67_pred_4;
                            _3044 = frontier_phi_67_pred_5;
                            _2752 = _3047 + _2765;
                            _2753 = _3048 + _2766;
                            _2754 = _3049 + _2767;
                            _2749 = _3044 + _2762;
                            _2750 = _3045 + _2763;
                            _2751 = _3046 + _2764;
                            if (_2769 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2769;
                                continue;
                            }
                        }
                        frontier_phi_61_pred = _2754;
                        frontier_phi_61_pred_1 = _2753;
                        frontier_phi_61_pred_2 = _2752;
                        frontier_phi_61_pred_3 = _2751;
                        frontier_phi_61_pred_4 = _2750;
                        frontier_phi_61_pred_5 = _2749;
                    }
                    _2350 = frontier_phi_61_pred;
                    _2348 = frontier_phi_61_pred_1;
                    _2346 = frontier_phi_61_pred_2;
                    _2344 = frontier_phi_61_pred_3;
                    _2342 = frontier_phi_61_pred_4;
                    _2340 = frontier_phi_61_pred_5;
                    uint _2536 = _2535 + 1u;
                    if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2529 = _2340;
                        _2530 = _2342;
                        _2531 = _2344;
                        _2532 = _2346;
                        _2533 = _2348;
                        _2534 = _2350;
                        _2535 = _2536;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2350;
                frontier_phi_43_44_ladder_1 = _2346;
                frontier_phi_43_44_ladder_2 = _2348;
                frontier_phi_43_44_ladder_3 = _2344;
                frontier_phi_43_44_ladder_4 = _2342;
                frontier_phi_43_44_ladder_5 = _2340;
            }
            else
            {
                frontier_phi_43_44_ladder = _2205;
                frontier_phi_43_44_ladder_1 = _2201;
                frontier_phi_43_44_ladder_2 = _2203;
                frontier_phi_43_44_ladder_3 = _2199;
                frontier_phi_43_44_ladder_4 = _2197;
                frontier_phi_43_44_ladder_5 = _2195;
            }
            _2339 = frontier_phi_43_44_ladder_5;
            _2341 = frontier_phi_43_44_ladder_4;
            _2343 = frontier_phi_43_44_ladder_3;
            _2345 = frontier_phi_43_44_ladder_1;
            _2347 = frontier_phi_43_44_ladder_2;
            _2349 = frontier_phi_43_44_ladder;
        }
        float _2354 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
        _2101 = (_2354 * _2345) + _1829;
        _2103 = (_2354 * _2347) + _1830;
        _2105 = (_2354 * _2349) + _1831;
        _2107 = ((_2339 * 0.039999999105930328369140625) * _2354) + _1985;
        _2109 = ((_2341 * 0.039999999105930328369140625) * _2354) + _1986;
        _2111 = ((_2343 * 0.039999999105930328369140625) * _2354) + _1987;
    }
    else
    {
        _2101 = _1829;
        _2103 = _1830;
        _2105 = _1831;
        _2107 = _1985;
        _2109 = _1986;
        _2111 = _1987;
    }
    uint _2117 = _688 + uint(cbMatDynParam._m0[0u].w);
    float _3922 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3933 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _3944 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _2142 = (((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_2101 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _712))) + ((_2107 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[12u].y * _572) * cbInstanceData._m0[_2117].x);
    float _2144 = (((cbMtdParam._m0[12u].y * _575) * cbInstanceData._m0[_2117].y) + ((_2109 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2103 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _712)));
    float _2146 = (((cbMtdParam._m0[12u].y * _578) * cbInstanceData._m0[_2117].z) + ((_2111 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_2105 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _712)));
    uint _2150 = _687 + 6u;
    float _2158 = _646 / cbSceneParam._m0[86u].x;
    float _2159 = _647 / cbSceneParam._m0[86u].y;
    vec4 _2173 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2158, _2159, (log2((isnan(cbSceneParam._m0[77u].w) ? _640 : (isnan(_640) ? cbSceneParam._m0[77u].w : min(_640, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2175 = _2173.x;
    float _2176 = _2173.y;
    float _2177 = _2173.z;
    float _2178 = _2173.w;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_640 > cbSceneParam._m0[78u].w)
    {
        float _2220 = isnan(_640) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _640 : min(cbSceneParam._m0[80u].w, _640));
        float _2221 = _2220 / _640;
        float _2232 = _2221 * _275;
        float _2233 = _276 * _2221;
        float _2234 = (-0.0) - _2233;
        float _2235 = _2221 * _277;
        float _2237 = (cbSceneParam._m0[77u].w * _2234) / _2220;
        float _2238 = _2237 + cbSceneParam._m0[79u].w;
        float _2239 = cbSceneParam._m0[79u].w - _2233;
        float _2245 = sqrt(((_2232 * _2232) + (_2233 * _2233)) + (_2235 * _2235));
        float _2248 = (1.0 - (cbSceneParam._m0[77u].w / _2220)) * _2245;
        float _2254 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2256 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2465;
        if (abs((_2234 - _2237) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2465 = ((((_2238 > 0.0) ? exp2(_2254 * _2238) : (2.0 - exp2(_2256 * _2238))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2248;
        }
        else
        {
            float _2400 = 1.0 / cbSceneParam._m0[80u].x;
            float _2401 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : max(_2238, _2239));
            float _2402 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : min(_2238, _2239));
            float _2411 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : min(_2401, 0.0));
            float _2412 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : min(_2402, 0.0));
            _2465 = ((abs(_2245 / _2234) * cbSceneParam._m0[80u].y) * ((((_2411 - _2412) * 2.0) - ((exp2(_2254 * (isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0)))) - exp2(_2254 * (isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0))))) * _2400)) - ((exp2(_2256 * _2411) - exp2(_2256 * _2412)) * _2400))) + (_2248 * cbSceneParam._m0[80u].z);
        }
        vec4 _2467 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2158, _2159, 1.0), 0.0);
        float _2476 = exp2((_2465 * (-1.44269502162933349609375)) * (1.0 - _2467.w));
        float _2477 = log2(_2476);
        float _2493 = log2(_2178);
        _2258 = (exp2(_2493 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2477 * cbSceneParam._m0[78u].x)) * _2467.x) / cbSceneParam._m0[78u].x)) + _2175;
        _2260 = (exp2(_2493 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2477 * cbSceneParam._m0[78u].y)) * _2467.y) / cbSceneParam._m0[78u].y)) + _2176;
        _2262 = (exp2(_2493 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2477 * cbSceneParam._m0[78u].z)) * _2467.z) / cbSceneParam._m0[78u].z)) + _2177;
        _2264 = _2476 * _2178;
    }
    else
    {
        _2258 = _2175;
        _2260 = _2176;
        _2262 = _2177;
        _2264 = _2178;
    }
    float _2276 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2277 = _2276 == 3.0;
    float _2278 = log2(_2264);
    float _2285 = exp2(_2278 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0)));
    float _2286 = exp2(_2278 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0)));
    float _2287 = exp2(_2278 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0)));
    float _2296 = (_2276 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2296 * (_2277 ? _2285 : (_2285 + (cbSceneParam._m0[72u].w * _2258)));
    SV_Target.y = _2296 * (_2277 ? _2286 : (_2286 + (cbSceneParam._m0[72u].w * _2260)));
    SV_Target.z = _2296 * (_2277 ? _2287 : (_2287 + (cbSceneParam._m0[72u].w * _2262)));
    SV_Target.w = cbInstanceData._m0[_2150].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2150].w;
}


