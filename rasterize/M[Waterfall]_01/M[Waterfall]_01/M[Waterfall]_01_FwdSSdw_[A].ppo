#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_01_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_01_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_01_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_01_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1224;
float _3367;
float _3368;
float _3369;
float _3370;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    float _271 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _281 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _271);
    float _282 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _271);
    float _283 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _271);
    float _296 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _314 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_5, SS_BumpMap), vec2((((_296 * cbMtdParam._m0[17u].z) + TEXCOORD_1.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_296 * cbMtdParam._m0[17u].w) + TEXCOORD_1.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _319 = _314.x * 2.0;
    float _321 = _314.y * 2.0;
    float _322 = _319 + (-1.0);
    float _324 = _321 + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3379 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    float _345 = (cbMtdParam._m0[16u].z * _296) + TEXCOORD_1.x;
    float _346 = (cbMtdParam._m0[16u].w * _296) + TEXCOORD_1.y;
    vec4 _358 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_345 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_346 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _363 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].x * cbMtdParam._m0[13u].z);
    float _370 = ((_358.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _372 = (-0.0) - (cbMtdParam._m0[14u].z * ((_358.x * 0.5) + (-0.25)));
    float _373 = fract(_363);
    float _375 = fract(_363 + 0.5);
    float _386 = abs((_373 * 2.0) + (-1.0));
    vec4 _402 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_373 * _372) + _345) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_370 * _373) + _346) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _404 = _402.x;
    float _405 = _402.y;
    vec4 _406 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_375 * _372) + _345) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_370 * _375) + _346) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _432 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].x * _296) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].y * _296) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _442 = ((_319 + (-1.35000002384185791015625)) + ((((((_406.x - _404) * _386) + _404) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_432.x * 0.699999988079071044921875);
    float _445 = ((_321 + (-1.35000002384185791015625)) + ((((((_406.y - _405) * _386) + _405) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_432.y * 0.699999988079071044921875);
    float _448 = fma(_331, _225, fma(_445, _217 * TANGENT.x, _442 * (_203 * _195)));
    float _451 = fma(_331, _226, fma(_445, _217 * TANGENT.y, _442 * (_203 * _196)));
    float _454 = fma(_331, _227, fma(_445, _217 * TANGENT.z, _442 * (_203 * _197)));
    float _458 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _459 = _458 * _448;
    float _460 = _458 * _451;
    float _461 = _458 * _454;
    float _473 = (cbMtdParam._m0[17u].x * _296) + TEXCOORD_1.x;
    float _474 = (cbMtdParam._m0[17u].y * _296) + TEXCOORD_1.y;
    vec4 _486 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_473 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_474 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _473) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _474) + cbTextureTilingScale._m0[0u].w));
    float _516 = (cbMtdParam._m0[15u].z * _296) + TEXCOORD_1.x;
    float _517 = (cbMtdParam._m0[15u].w * _296) + TEXCOORD_1.y;
    vec4 _522 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_516 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_517 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _530 = ((_522.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _532 = (-0.0) - (cbMtdParam._m0[14u].z * ((_522.x * 0.5) + (-0.25)));
    vec4 _549 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_373 * _532) + _516) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_530 * _373) + _517) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    vec4 _554 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_375 * _532) + _516) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_530 * _375) + _517) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _568 = exp2(log2(_486.x) * cbMtdParam._m0[13u].y) * cbMtdParam._m0[14u].w;
    float _579 = ((_503.x + cbMtdParam._m0[10u].x) + cbMtdParam._m0[9u].x) + (_568 * (((_554.x - _551) * _386) + _551));
    float _582 = ((_503.y + cbMtdParam._m0[10u].y) + cbMtdParam._m0[9u].y) + (_568 * (((_554.y - _552) * _386) + _552));
    float _585 = ((_503.z + cbMtdParam._m0[10u].z) + cbMtdParam._m0[9u].z) + (_568 * (((_554.z - _553) * _386) + _553));
    float _596 = inversesqrt(dot(vec3(_281, _282, _283), vec3(_281, _282, _283)));
    float _603 = dot(vec4(_596 * _281, _596 * _282, _596 * _283, 0.0), vec4(_459, _460, _461, 0.0)) - cbMtdParam._m0[12u].w;
    float _3390 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _610 = exp2(log2(1.0 - (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _618 = ((_610 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _579;
    float _620 = ((_610 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _582;
    float _622 = ((_610 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _585;
    float _633 = cbMtdParam._m0[13u].w - cbMtdParam._m0[15u].y;
    float _635 = (sqrt(((_281 * _281) + (_282 * _282)) + (_283 * _283)) - cbMtdParam._m0[15u].y) / (isnan(0.001000000047497451305389404296875) ? _633 : (isnan(_633) ? 0.001000000047497451305389404296875 : max(_633, 0.001000000047497451305389404296875)));
    float _3411 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _647 = gl_FragCoord.x * 0.125;
    float _649 = gl_FragCoord.y * 0.125;
    float _659 = float((((((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (cbMtdParam._m0[15u].x + (-0.001000000047497451305389404296875))) + 0.001000000047497451305389404296875) * cbMtdParam._m0[15u].x) * ((TEXCOORD_1.z * 2.0) - (cbMtdParam._m0[13u].x * _503.w))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_647, _649)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _3422 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _669 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3444 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3455 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _737 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _728);
    float _738 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _728);
    float _739 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _728);
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _737 * _743;
    float _745 = _738 * _743;
    float _746 = _739 * _743;
    vec4 _747 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_647, _649));
    float _749 = _747.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _906 = sqrt(((_737 * _737) + (_738 * _738)) + (_739 * _739));
        float _912 = (cbMatDynParam._m0[5u].x * _906) + cbMatDynParam._m0[5u].y;
        float _3466 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _917 = (cbMatDynParam._m0[5u].z * _906) + cbMatDynParam._m0[5u].w;
        float _3477 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) - _913)) + _913) < ((_749 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _782 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _785 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _788 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _801 = uint(roundEven(NORMAL.w)) * 13u;
    uint _802 = _801 + 9u;
    uint _803 = _802 + uint(cbMatDynParam._m0[0u].w);
    float _809 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_803].x;
    float _810 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_803].y;
    float _811 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_803].z;
    float _3488 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    vec4 _823 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _826 = _823.x * TEXCOORD_1.w;
    float _827 = dot(vec3(_459, _460, _461), vec3(_744, _745, _746));
    float _830 = _827 * 2.0;
    float _834 = (_830 * _459) - _744;
    float _835 = (_830 * _460) - _745;
    float _836 = (_830 * _461) - _746;
    float _840 = abs(dot(vec3(_744, _745, _746), vec3(_459, _460, _461)));
    float _3521 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _842 = sqrt(_669);
    float _855 = exp2((_842 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_842 * 3.0));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1223;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _949 = fma(_895, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887));
        float _953 = fma(_895, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887));
        float _957 = fma(_895, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887));
        float _981 = _887 + _459;
        float _982 = _891 + _460;
        float _983 = _895 + _461;
        float _993 = fma(_983, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981)) - _949;
        float _994 = fma(_983, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981)) - _953;
        float _995 = fma(_983, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981)) - _957;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_949 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_953 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[34u].z) + ((((((_957 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1051 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1017.x + (-0.5));
        float _1053 = _1051 * (_1017.y + (-0.5));
        float _1054 = _1051 * (_1017.z + (-0.5));
        float _1061 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1024.x + (-0.5));
        float _1063 = _1061 * (_1024.y + (-0.5));
        float _1064 = _1061 * (_1024.z + (-0.5));
        float _1071 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1031.x + (-0.5));
        float _1073 = _1071 * (_1031.y + (-0.5));
        float _1074 = _1071 * (_1031.z + (-0.5));
        float _1081 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1038.x + (-0.5));
        float _1083 = _1081 * (_1038.y + (-0.5));
        float _1084 = _1081 * (_1038.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1105 = (dot(vec3(_459, _460, _461), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1115 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3569 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1117 + 1.0))) + _1122) * _1085;
        float _1132 = _1053 * 0.5;
        float _1133 = _1063 * 0.5;
        float _1134 = _1073 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_459, _460, _461), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3602 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1159 + 1.0))) + _1164) * _1086;
        float _1174 = _1054 * 0.5;
        float _1175 = _1064 * 0.5;
        float _1176 = _1074 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_459, _460, _461), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3635 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1201 + 1.0))) + _1206) * _1087;
        _1223 = _1054;
        _1225 = _1053;
        _1226 = _1052;
        _1227 = _1064;
        _1228 = _1063;
        _1229 = _1062;
        _1230 = _1074;
        _1231 = _1073;
        _1232 = _1072;
        _1233 = _1087;
        _1234 = _1086;
        _1235 = _1085;
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _1224;
        _1225 = _1224;
        _1226 = _1224;
        _1227 = _1224;
        _1228 = _1224;
        _1229 = _1224;
        _1230 = _1224;
        _1231 = _1224;
        _1232 = _1224;
        _1233 = _1224;
        _1234 = _1224;
        _1235 = _1224;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1267 = fma(_895, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887));
        float _1271 = fma(_895, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887));
        float _1275 = fma(_895, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887));
        float _1298 = _887 + _459;
        float _1299 = _891 + _460;
        float _1300 = _895 + _461;
        float _1310 = fma(_1300, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1298)) - _1267;
        float _1311 = fma(_1300, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1298)) - _1271;
        float _1312 = fma(_1300, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1298)) - _1275;
        float _1316 = inversesqrt(dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312)));
        float _1329 = ((_1316 * _1310) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1267 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1316 * _1311) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1271 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1316 * _1312) / cbModelParam._m0[35u].z) + ((((((_1275 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        float _1366 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1333.x + (-0.5));
        float _1368 = _1366 * (_1333.y + (-0.5));
        float _1369 = _1366 * (_1333.z + (-0.5));
        float _1376 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1340.x + (-0.5));
        float _1378 = _1376 * (_1340.y + (-0.5));
        float _1379 = _1376 * (_1340.z + (-0.5));
        float _1386 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1347.x + (-0.5));
        float _1388 = _1386 * (_1347.y + (-0.5));
        float _1389 = _1386 * (_1347.z + (-0.5));
        float _1396 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1354.x + (-0.5));
        float _1398 = _1396 * (_1354.y + (-0.5));
        float _1399 = _1396 * (_1354.z + (-0.5));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = _1367 * 0.5;
        float _1404 = _1377 * 0.5;
        float _1405 = _1387 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_459, _460, _461), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3698 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1430 + 1.0))) + _1435) * _1400;
        float _1445 = _1368 * 0.5;
        float _1446 = _1378 * 0.5;
        float _1447 = _1388 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_459, _460, _461), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3731 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1472 + 1.0))) + _1477) * _1401;
        float _1487 = _1369 * 0.5;
        float _1488 = _1379 * 0.5;
        float _1489 = _1389 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_459, _460, _461), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _3764 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1514 + 1.0))) + _1519) * _1402;
        _1536 = _1369;
        _1537 = _1368;
        _1538 = _1367;
        _1539 = _1379;
        _1540 = _1378;
        _1541 = _1377;
        _1542 = _1389;
        _1543 = _1388;
        _1544 = _1387;
        _1545 = _1402;
        _1546 = _1401;
        _1547 = _1400;
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _1224;
        _1537 = _1224;
        _1538 = _1224;
        _1539 = _1224;
        _1540 = _1224;
        _1541 = _1224;
        _1542 = _1224;
        _1543 = _1224;
        _1544 = _1224;
        _1545 = _1224;
        _1546 = _1224;
        _1547 = _1224;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1236)) + _1236;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1237)) + _1237;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1238)) + _1238;
    float _1583 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1560));
    float _1604 = _834 * 0.5;
    float _1605 = _835 * 0.5;
    float _1606 = _836 * 0.5;
    float _1607 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1610 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1613 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1647;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1620 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1223, _1227, _1230, _1233));
        float _1624 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1628 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1635 = dot(vec4(cbModelParam._m0[39u]), vec4(_1604, _1605, _1606, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1658;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1649 = dot(vec4(cbModelParam._m0[40u]), vec4(_1604, _1605, _1606, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1662 = (_1658 * cbModelParam._m0[1u].x) + (_1647 * (1.0 - cbModelParam._m0[1u].x));
    float _1672 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1672 : min(cbModelParam._m0[25u].z, _1672));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1720 = fma(_895, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887)) + cbModelParam._m0[13u].w;
        float _1724 = fma(_895, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887)) + cbModelParam._m0[14u].w;
        float _1728 = fma(_895, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887)) + cbModelParam._m0[15u].w;
        float _1731 = fma(_836, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834));
        float _1734 = fma(_836, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834));
        float _1737 = fma(_836, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834));
        float _1765;
        if (_1731 > 0.0)
        {
            _1765 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1765 = frontier_phi_19_17_ladder;
        }
        float _2137;
        if (_1734 > 0.0)
        {
            _2137 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2137 = frontier_phi_28_24_ladder;
        }
        float _2460;
        if (_1737 > 0.0)
        {
            _2460 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2460 = frontier_phi_42_35_ladder;
        }
        float _2462 = isnan(_2137) ? _1765 : (isnan(_1765) ? _2137 : min(_1765, _2137));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1731) + _1720;
        float _2468 = (_2463 * _1734) + _1724;
        float _2469 = (_2463 * _1737) + _1728;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2469, cbModelParam._m0[9u].z, fma(_2468, cbModelParam._m0[9u].y, _2467 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2469, cbModelParam._m0[10u].z, fma(_2468, cbModelParam._m0[10u].y, _2467 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2469, cbModelParam._m0[11u].z, fma(_2468, cbModelParam._m0[11u].y, _2467 * cbModelParam._m0[11u].x))), _1673);
            frontier_phi_18_42_ladder = _2611.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2611.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2611.x * cbModelParam._m0[1u].y;
        }
        _1753 = frontier_phi_18_42_ladder_2;
        _1755 = frontier_phi_18_42_ladder_1;
        _1757 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_834, _835, _836), _1673);
        _1753 = _1741.x * cbModelParam._m0[1u].y;
        _1755 = _1741.y * cbModelParam._m0[1u].y;
        _1757 = _1741.z * cbModelParam._m0[1u].y;
    }
    float _1761 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1761 : min(cbModelParam._m0[25u].w, _1761));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1817 = fma(_895, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887)) + cbModelParam._m0[21u].w;
        float _1821 = fma(_895, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887)) + cbModelParam._m0[22u].w;
        float _1825 = fma(_895, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887)) + cbModelParam._m0[23u].w;
        float _1828 = fma(_836, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834));
        float _1831 = fma(_836, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834));
        float _1834 = fma(_836, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834));
        float _2142;
        if (_1828 > 0.0)
        {
            _2142 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2142 = frontier_phi_30_26_ladder;
        }
        float _2486;
        if (_1831 > 0.0)
        {
            _2486 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2486 = frontier_phi_44_37_ladder;
        }
        float _2676;
        if (_1834 > 0.0)
        {
            _2676 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_62_55_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_62_55_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_62_55_ladder = 5000.0;
            }
            _2676 = frontier_phi_62_55_ladder;
        }
        float _2678 = isnan(_2486) ? _2142 : (isnan(_2142) ? _2486 : min(_2142, _2486));
        float _2679 = isnan(_2676) ? _2678 : (isnan(_2678) ? _2676 : min(_2678, _2676));
        float _2683 = (_2679 * _1828) + _1817;
        float _2684 = (_2679 * _1831) + _1821;
        float _2685 = (_2679 * _1834) + _1825;
        float _2686 = _2679 * 9.9999997473787516355514526367188e-05;
        float _2687 = (-1.0) - _2686;
        float _2689 = _2686 + 1.0;
        float frontier_phi_27_62_ladder;
        float frontier_phi_27_62_ladder_1;
        float frontier_phi_27_62_ladder_2;
        if ((_2685 > _2689) || ((_2685 < _2687) || ((_2684 > _2689) || ((_2684 < _2687) || ((_2683 < _2687) || (_2683 > _2689))))))
        {
            frontier_phi_27_62_ladder = 0.0;
            frontier_phi_27_62_ladder_1 = 0.0;
            frontier_phi_27_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2685, cbModelParam._m0[17u].z, fma(_2684, cbModelParam._m0[17u].y, _2683 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2685, cbModelParam._m0[18u].z, fma(_2684, cbModelParam._m0[18u].y, _2683 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2685, cbModelParam._m0[19u].z, fma(_2684, cbModelParam._m0[19u].y, _2683 * cbModelParam._m0[19u].x))), _1762);
            frontier_phi_27_62_ladder = _2926.z * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_1 = _2926.y * cbModelParam._m0[1u].z;
            frontier_phi_27_62_ladder_2 = _2926.x * cbModelParam._m0[1u].z;
        }
        _1853 = frontier_phi_27_62_ladder_2;
        _1855 = frontier_phi_27_62_ladder_1;
        _1857 = frontier_phi_27_62_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_834, _835, _836), _1762);
        _1853 = _1837.x * cbModelParam._m0[1u].z;
        _1855 = _1837.y * cbModelParam._m0[1u].z;
        _1857 = _1837.z * cbModelParam._m0[1u].z;
    }
    float _1869 = ((((1.0 - _855) * ((_842 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_855 * _842)) * _826;
    float _1870 = _1869 * ((cbModelParam._m0[1u].w * (_1853 - _1753)) + _1753);
    float _1871 = _1869 * ((cbModelParam._m0[1u].w * (_1855 - _1755)) + _1755);
    float _1872 = _1869 * ((cbModelParam._m0[1u].w * (_1857 - _1757)) + _1757);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1870 * cbSceneParam._m0[91u].x));
    vec4 _1889 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_761, _762));
    float _1891 = _1889.w;
    float _1903 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1891);
    float _1904 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1891);
    float _1905 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1891);
    uvec4 _1909 = floatBitsToUint(cbInstanceData._m0[_801 + 5u]);
    uint _1911 = _1909.x * 14u;
    uint _1912 = _1911 + 13u;
    float _1917 = _826 + (-1.0);
    float _1920 = (cbLight._m0[_1912].x * _1917) + 1.0;
    float _1921 = (cbLight._m0[_1912].y * _1917) + 1.0;
    uint _1922 = _1911 + 5u;
    float _1928 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1932 = _1911 + 4u;
    float _1941 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1945 = _1911 | 1u;
    float _1956 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_459, _460, _461));
    float _1959 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_459, _460, _461));
    float _3900 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _3911 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1964 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1966 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.3183098733425140380859375;
    float _1973 = ((cbLight._m0[_1922].x * _1928) * _1966) + (((cbLight._m0[_1932].x * _1903) * _1941) * _1964);
    float _1974 = ((_1928 * cbLight._m0[_1922].y) * _1966) + (((cbLight._m0[_1932].y * _1904) * _1941) * _1964);
    float _1975 = ((_1928 * cbLight._m0[_1922].z) * _1966) + (((cbLight._m0[_1932].z * _1905) * _1941) * _1964);
    uint _1977 = _1911 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _669) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1911].x + _744;
    float _1993 = cbLight._m0[_1911].y + _745;
    float _1994 = cbLight._m0[_1911].z + _746;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1911].xyz));
    float _3922 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2006 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _2007 = dot(vec3(_459, _460, _461), vec3(_1999, _2000, _2001));
    float _3944 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_1999, _2000, _2001));
    float _3955 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2030 = (exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2031 = 1.0 - _1991;
    float _2042 = (0.5 / (((_2006 * ((_2005 * _2031) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2031) + _1991) * _2005))) * _2005;
    float _3966 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2058 = _1911 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _669) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1945].x + _744;
    float _2072 = cbLight._m0[_1945].y + _745;
    float _2073 = cbLight._m0[_1945].z + _746;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1945].xyz));
    float _3977 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _2085 = dot(vec3(_459, _460, _461), vec3(_2078, _2079, _2080));
    float _3988 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2078, _2079, _2080));
    float _3999 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = 1.0 - _2070;
    float _2117 = (0.5 / (((_2006 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2107) + _2070) * _2084))) * _2084;
    float _4010 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2129 = (((_2106 * cbLight._m0[_2058].x) * _2119) * _1928) + ((((cbLight._m0[_1977].x * _1903) * _2030) * _2044) * _1941);
    float _2130 = (((_2106 * cbLight._m0[_2058].y) * _2119) * _1928) + ((((cbLight._m0[_1977].y * _1904) * _2030) * _2044) * _1941);
    float _2131 = (((_2106 * cbLight._m0[_2058].z) * _2119) * _1928) + ((((cbLight._m0[_1977].z * _1905) * _2030) * _2044) * _1941);
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    if (_1909.y == 0u)
    {
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2186;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2186;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2186;
        uvec4 _2201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2202 = _2201.x;
        uint _2213 = uint((float(_2201.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2202))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2202)));
        float _2223 = (log2(_2189 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2224 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        uint _2227 = uint(isnan(14.0) ? _2224 : (isnan(_2224) ? 14.0 : min(_2224, 14.0)));
        uvec4 _2232 = texelFetch(g_lightClusterGridBuffer, int(((_2227 << 2u) + (_2213 << 6u)) >> 2u));
        uint _2233 = _2232.x;
        uint _2234 = _2201.z;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        if (((((1u << ((_2234 >> 4u) & 15u)) + 4294967295u) & _2233) == 0u) || ((_2234 & 240u) == 0u))
        {
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
        }
        else
        {
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            uint _2529 = 0u;
            uint _2538;
            bool _2539;
            for (;;)
            {
                _2538 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                _2539 = _2538 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                float frontier_phi_57_pred_3;
                float frontier_phi_57_pred_4;
                float frontier_phi_57_pred_5;
                if (_2539)
                {
                    frontier_phi_57_pred = _2524;
                    frontier_phi_57_pred_1 = _2528;
                    frontier_phi_57_pred_2 = _2527;
                    frontier_phi_57_pred_3 = _2526;
                    frontier_phi_57_pred_4 = _2525;
                    frontier_phi_57_pred_5 = _2523;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2523;
                    _2720 = _2524;
                    _2721 = _2525;
                    _2722 = _2526;
                    _2723 = _2527;
                    _2724 = _2528;
                    _2725 = _2538;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2529 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _2187;
                        float _2786 = _2745.y - _2188;
                        float _2787 = _2745.z - _2189;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2795 = dot(vec3(_782, _785, _788), vec3(_2792, _2793, _2794));
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _4031 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2795) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2815 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2819 = (-0.0) - _2187;
                        float _2820 = (-0.0) - _2188;
                        float _2821 = (-0.0) - _2189;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2836 = exp2(log2(1.0 / ((_2812 * 3.5) + 5.0)) * 0.25);
                        float _2837 = 1.0 - _842;
                        float _2844 = sqrt(1.0 - ((1.0 - (_2837 * _2837)) * (1.0 - (_2836 * _2836))));
                        float _2845 = _2844 * _2844;
                        float _2846 = _2845 * _2845;
                        float _2847 = _2826 + _2792;
                        float _2848 = _2827 + _2793;
                        float _2849 = _2828 + _2794;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2857 = dot(vec3(_782, _785, _788), vec3(_2826, _2827, _2828));
                        float _4047 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2861 = dot(vec3(_782, _785, _788), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849));
                        float _4058 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2868 = ((_2864 * _2864) * (_2846 + (-1.0))) + 1.0;
                        float _2869 = _2805 * _2845;
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2795) + _2870;
                        float _4069 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2875 = 1.0 - _2845;
                        float _2885 = (0.5 / (((_2874 * ((_2860 * _2875) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2874 * _2875) + _2845) * _2860))) * _2874;
                        float _4080 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2896 = (((_2846 * 3.1415927410125732421875) * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) / ((_2868 * _2868) * ((_2812 * 2.1991131305694580078125) + 3.141590118408203125))) * _2801;
                        _2623 = (_2815 * _2764.x) + _2722;
                        _2624 = (_2815 * _2764.y) + _2723;
                        _2625 = (_2815 * _2764.z) + _2724;
                        _2620 = (_2896 * _2781.x) + _2719;
                        _2621 = (_2896 * _2781.y) + _2720;
                        _2622 = (_2896 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2620;
                            _2720 = _2621;
                            _2721 = _2622;
                            _2722 = _2623;
                            _2723 = _2624;
                            _2724 = _2625;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_57_pred = _2621;
                    frontier_phi_57_pred_1 = _2625;
                    frontier_phi_57_pred_2 = _2624;
                    frontier_phi_57_pred_3 = _2623;
                    frontier_phi_57_pred_4 = _2622;
                    frontier_phi_57_pred_5 = _2620;
                }
                _2342 = frontier_phi_57_pred;
                _2350 = frontier_phi_57_pred_1;
                _2348 = frontier_phi_57_pred_2;
                _2346 = frontier_phi_57_pred_3;
                _2344 = frontier_phi_57_pred_4;
                _2340 = frontier_phi_57_pred_5;
                uint _2530 = _2529 + 1u;
                if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2523 = _2340;
                    _2524 = _2342;
                    _2525 = _2344;
                    _2526 = _2346;
                    _2527 = _2348;
                    _2528 = _2350;
                    _2529 = _2530;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
        }
        uvec4 _2353 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2354 = _2353.z;
        uint _2356 = (_2354 >> 8u) & 15u;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((4294967295u << _2356) & _2233) == 0u)
        {
            _2491 = _2339;
            _2493 = _2341;
            _2495 = _2343;
            _2497 = _2345;
            _2499 = _2347;
            _2501 = _2349;
        }
        else
        {
            float _2516 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
            float _2517 = _2516 * _2187;
            float _2518 = _2516 * _2188;
            float _2519 = _2516 * _2189;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2356 < ((_2354 >> 12u) & 15u))
            {
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2702 = _2339;
                float _2703 = _2341;
                float _2704 = _2343;
                float _2705 = _2345;
                float _2706 = _2347;
                float _2707 = _2349;
                uint _2708 = _2356;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2718)
                    {
                        frontier_phi_71_pred = _2707;
                        frontier_phi_71_pred_1 = _2706;
                        frontier_phi_71_pred_2 = _2705;
                        frontier_phi_71_pred_3 = _2704;
                        frontier_phi_71_pred_4 = _2703;
                        frontier_phi_71_pred_5 = _2702;
                    }
                    else
                    {
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _2944 = _2702;
                        float _2945 = _2703;
                        float _2946 = _2704;
                        float _2947 = _2705;
                        float _2948 = _2706;
                        float _2949 = _2707;
                        uint _2950 = _2717;
                        uint _2951;
                        vec4 _2976;
                        float _2977;
                        vec4 _2992;
                        vec3 _3004;
                        vec4 _3019;
                        vec4 _3035;
                        float _3082;
                        bool _3083;
                        for (;;)
                        {
                            uint _2961 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2950));
                            _2951 = (_2950 + 4294967295u) & _2950;
                            uint _2963 = _2961 * 40u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2977 = _2976.w;
                            uint _2979 = (_2961 * 40u) + 4u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2994 = (_2961 * 40u) + 8u;
                            _3004 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x));
                            uint _3006 = (_2961 * 40u) + 16u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3022 = (_2961 * 40u) + 20u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3038 = (_2961 * 40u) + 24u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3057 = (_2961 * 40u) + 28u;
                            vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            _3082 = fma(_2189, _3070.z, fma(_2188, _3070.y, _3070.x * _2187)) + _3070.w;
                            _3083 = !((fma(_2189, _3051.z, fma(_2188, _3051.y, _3051.x * _2187)) + _3051.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3083)
                            {
                                float _3110 = _2976.x - _2187;
                                float _3111 = _2976.y - _2188;
                                float _3112 = _2976.z - _2189;
                                float _3113 = dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112));
                                float _3116 = inversesqrt(_3113);
                                float _3117 = _3116 * _3110;
                                float _3118 = _3116 * _3111;
                                float _3119 = _3116 * _3112;
                                float _3123 = 1.0 - (_3113 / (_2977 * _2977));
                                float _4091 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3128 = sqrt(_3113) * _2992.w;
                                float _3130 = 1.39999997615814208984375 / (_3128 + 1.39999997615814208984375);
                                float _3131 = _3130 * _3130;
                                float _3134 = ((1.0 - _3131) * dot(vec3(_3117, _3118, _3119), vec3(_782, _785, _788))) + _3131;
                                float _3137 = _3128 * _3128;
                                float _3141 = (fma(_2189, _3019.z, fma(_2188, _3019.y, _3019.x * _2187)) + _3019.w) / _3082;
                                float _3142 = (fma(_2189, _3035.z, fma(_2188, _3035.y, _3035.x * _2187)) + _3035.w) / _3082;
                                float _3146 = 1.0 - dot(vec2(_3141, _3142), vec2(_3141, _3142));
                                float _4107 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3148 = _3147 * (((isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))) * _3124) / ((_3137 * 0.699999988079071044921875) + 1.0));
                                float _3160 = exp2(log2(1.0 / ((_3137 * 3.5) + 5.0)) * 0.25);
                                float _3161 = 1.0 - _842;
                                float _3168 = sqrt(1.0 - ((1.0 - (_3161 * _3161)) * (1.0 - (_3160 * _3160))));
                                float _3169 = _3168 * _3168;
                                float _3170 = _3169 * _3169;
                                float _3171 = _3117 - _2517;
                                float _3172 = _3118 - _2518;
                                float _3173 = _3119 - _2519;
                                float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                                float _3181 = dot(vec3(_782, _785, _788), vec3((-0.0) - _2517, (-0.0) - _2518, (-0.0) - _2519));
                                float _4118 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3184 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3185 = dot(vec3(_782, _785, _788), vec3(_3177 * _3171, _3177 * _3172, _3177 * _3173));
                                float _4129 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3188 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3192 = ((_3188 * _3188) * (_3170 + (-1.0))) + 1.0;
                                float _3193 = _3130 * _3169;
                                float _3194 = _3193 * _3193;
                                float _3200 = ((1.0 - _3194) * dot(vec3(_782, _785, _788), vec3(_3117, _3118, _3119))) + _3194;
                                float _4140 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3202 = 1.0 - _3169;
                                float _3212 = (0.5 / (((_3201 * ((_3184 * _3202) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3169) * _3184))) * _3201;
                                float _4151 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3222 = (_3147 * _3124) * (((_3170 * 3.1415927410125732421875) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) / ((_3192 * _3192) * ((_3137 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3148 * _2992.x;
                                frontier_phi_77_pred_1 = _3148 * _2992.z;
                                frontier_phi_77_pred_2 = _3148 * _2992.y;
                                frontier_phi_77_pred_3 = _3222 * _3004.z;
                                frontier_phi_77_pred_4 = _3222 * _3004.y;
                                frontier_phi_77_pred_5 = _3222 * _3004.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3229 = frontier_phi_77_pred;
                            _3231 = frontier_phi_77_pred_1;
                            _3230 = frontier_phi_77_pred_2;
                            _3228 = frontier_phi_77_pred_3;
                            _3227 = frontier_phi_77_pred_4;
                            _3226 = frontier_phi_77_pred_5;
                            _2934 = _3229 + _2947;
                            _2935 = _3230 + _2948;
                            _2936 = _3231 + _2949;
                            _2931 = _3226 + _2944;
                            _2932 = _3227 + _2945;
                            _2933 = _3228 + _2946;
                            if (_2951 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2951;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2936;
                        frontier_phi_71_pred_1 = _2935;
                        frontier_phi_71_pred_2 = _2934;
                        frontier_phi_71_pred_3 = _2933;
                        frontier_phi_71_pred_4 = _2932;
                        frontier_phi_71_pred_5 = _2931;
                    }
                    _2502 = frontier_phi_71_pred;
                    _2500 = frontier_phi_71_pred_1;
                    _2498 = frontier_phi_71_pred_2;
                    _2496 = frontier_phi_71_pred_3;
                    _2494 = frontier_phi_71_pred_4;
                    _2492 = frontier_phi_71_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2492;
                        _2703 = _2494;
                        _2704 = _2496;
                        _2705 = _2498;
                        _2706 = _2500;
                        _2707 = _2502;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2502;
                frontier_phi_46_47_ladder_1 = _2494;
                frontier_phi_46_47_ladder_2 = _2500;
                frontier_phi_46_47_ladder_3 = _2498;
                frontier_phi_46_47_ladder_4 = _2496;
                frontier_phi_46_47_ladder_5 = _2492;
            }
            else
            {
                frontier_phi_46_47_ladder = _2349;
                frontier_phi_46_47_ladder_1 = _2341;
                frontier_phi_46_47_ladder_2 = _2347;
                frontier_phi_46_47_ladder_3 = _2345;
                frontier_phi_46_47_ladder_4 = _2343;
                frontier_phi_46_47_ladder_5 = _2339;
            }
            _2491 = frontier_phi_46_47_ladder_5;
            _2493 = frontier_phi_46_47_ladder_1;
            _2495 = frontier_phi_46_47_ladder_4;
            _2497 = frontier_phi_46_47_ladder_3;
            _2499 = frontier_phi_46_47_ladder_2;
            _2501 = frontier_phi_46_47_ladder;
        }
        float _2506 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
        _2245 = (_2506 * _2497) + _1973;
        _2247 = (_2506 * _2499) + _1974;
        _2249 = (_2506 * _2501) + _1975;
        _2251 = ((_2491 * 0.039999999105930328369140625) * _2506) + _2129;
        _2253 = ((_2493 * 0.039999999105930328369140625) * _2506) + _2130;
        _2255 = ((_2495 * 0.039999999105930328369140625) * _2506) + _2131;
    }
    else
    {
        _2245 = _1973;
        _2247 = _1974;
        _2249 = _1975;
        _2251 = _2129;
        _2253 = _2130;
        _2255 = _2131;
    }
    uint _2261 = _802 + uint(cbMatDynParam._m0[0u].w);
    float _4167 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4178 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4189 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2286 = (((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2245 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _826))) + ((_2251 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[12u].y * _579) * cbInstanceData._m0[_2261].x);
    float _2288 = (((cbMtdParam._m0[12u].y * _582) * cbInstanceData._m0[_2261].y) + ((_2253 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2247 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _826)));
    float _2290 = (((cbMtdParam._m0[12u].y * _585) * cbInstanceData._m0[_2261].z) + ((_2255 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2249 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _826)));
    float _2291 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2292 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2293 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    uint _2294 = _801 + 6u;
    float _2302 = _761 / cbSceneParam._m0[86u].x;
    float _2303 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2317 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2302, _2303, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2319 = _2317.x;
    float _2320 = _2317.y;
    float _2321 = _2317.z;
    float _2322 = _2317.w;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2364 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2365 = _2364 / _688;
        float _2376 = _2365 * _737;
        float _2377 = _738 * _2365;
        float _2378 = (-0.0) - _2377;
        float _2379 = _2365 * _739;
        float _2381 = (cbSceneParam._m0[77u].w * _2378) / _2364;
        float _2382 = _2381 + cbSceneParam._m0[79u].w;
        float _2383 = cbSceneParam._m0[79u].w - _2377;
        float _2389 = sqrt(((_2376 * _2376) + (_2377 * _2377)) + (_2379 * _2379));
        float _2392 = (1.0 - (cbSceneParam._m0[77u].w / _2364)) * _2389;
        float _2398 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2400 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2633;
        if (abs((_2378 - _2381) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2633 = ((((_2382 > 0.0) ? exp2(_2398 * _2382) : (2.0 - exp2(_2400 * _2382))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2392;
        }
        else
        {
            float _2552 = 1.0 / cbSceneParam._m0[80u].x;
            float _2553 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : max(_2382, _2383));
            float _2554 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : min(_2382, _2383));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            _2633 = ((abs(_2389 / _2378) * cbSceneParam._m0[80u].y) * ((((_2563 - _2564) * 2.0) - ((exp2(_2398 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)))) - exp2(_2398 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0))))) * _2552)) - ((exp2(_2400 * _2563) - exp2(_2400 * _2564)) * _2552))) + (_2392 * cbSceneParam._m0[80u].z);
        }
        vec4 _2635 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2302, _2303, 1.0), 0.0);
        float _2644 = exp2((_2633 * (-1.44269502162933349609375)) * (1.0 - _2635.w));
        float _2645 = log2(_2644);
        float _2661 = log2(_2322);
        _2402 = (exp2(_2661 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].x)) * _2635.x) / cbSceneParam._m0[78u].x)) + _2319;
        _2404 = (exp2(_2661 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].y)) * _2635.y) / cbSceneParam._m0[78u].y)) + _2320;
        _2406 = (exp2(_2661 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].z)) * _2635.z) / cbSceneParam._m0[78u].z)) + _2321;
        _2408 = _2644 * _2322;
    }
    else
    {
        _2402 = _2319;
        _2404 = _2320;
        _2406 = _2321;
        _2408 = _2322;
    }
    bool _2671;
    vec4 _2418;
    vec4 _2440;
    float _2442;
    float _2446;
    float _2447;
    float _2448;
    float _2449;
    bool _2459;
    for (;;)
    {
        _2418 = cbMatDynParam._m0[0u];
        float _2420 = roundEven(_2418.y);
        bool _2421 = _2420 == 3.0;
        float _2422 = log2(_2408);
        float _2429 = exp2(_2422 * cbSceneParam._m0[78u].x) * _2291;
        float _2430 = exp2(_2422 * cbSceneParam._m0[78u].y) * _2292;
        float _2431 = exp2(_2422 * cbSceneParam._m0[78u].z) * _2293;
        float _2438 = _749 + (-0.5);
        _2440 = cbMtdParam._m0[1u];
        _2442 = _2440.y * _2438;
        float _2445 = (_2420 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2446 = _2445 * (_2421 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2402)));
        _2447 = _2445 * (_2421 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2404)));
        _2448 = _2445 * (_2421 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2406)));
        _2449 = _2438 * 0.999000012874603271484375;
        _2459 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2459)
        {
            if ((cbInstanceData._m0[_801 + 7u].x + _2449) < 0.5)
            {
                _2671 = true;
                break;
            }
        }
        uint _2587 = _802 + uint(_2418.w);
        if ((cbInstanceData._m0[_2587].w < 1.0) && ((cbInstanceData._m0[_2587].w + _2449) < 0.5))
        {
            _2671 = true;
            break;
        }
        if ((_2442 + _659) < _2440.x)
        {
            _2671 = true;
            break;
        }
        _2671 = false;
        break;
    }
    float _2901;
    if (_2671)
    {
        discard_state = true;
        _2901 = 0.0;
    }
    else
    {
        _2901 = cbInstanceData._m0[_2294].w;
    }
    SV_Target.x = _2446;
    SV_Target.y = _2447;
    SV_Target.z = _2448;
    SV_Target.w = _2901;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2294].w;
    discard_exit();
}


