#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Waterfall_01_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_Waterfall_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Waterfall_01_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_Waterfall_01_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_Waterfall_01_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1085;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    float _292 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _310 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_5, SS_BumpMap), vec2((((_292 * cbMtdParam._m0[17u].z) + TEXCOORD_1.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_292 * cbMtdParam._m0[17u].w) + TEXCOORD_1.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _315 = _310.x * 2.0;
    float _317 = _310.y * 2.0;
    float _318 = _315 + (-1.0);
    float _320 = _317 + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3433 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _341 = (cbMtdParam._m0[16u].z * _292) + TEXCOORD_1.x;
    float _342 = (cbMtdParam._m0[16u].w * _292) + TEXCOORD_1.y;
    vec4 _354 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_341 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_342 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _359 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[14u].x * cbMtdParam._m0[13u].z);
    float _366 = ((_354.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _368 = (-0.0) - (cbMtdParam._m0[14u].z * ((_354.x * 0.5) + (-0.25)));
    float _369 = fract(_359);
    float _371 = fract(_359 + 0.5);
    float _382 = abs((_369 * 2.0) + (-1.0));
    vec4 _398 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_369 * _368) + _341) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_366 * _369) + _342) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _400 = _398.x;
    float _401 = _398.y;
    vec4 _402 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_371 * _368) + _341) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((_366 * _371) + _342) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _428 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[16u].x * _292) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].y * _292) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _438 = ((_315 + (-1.35000002384185791015625)) + ((((((_402.x - _400) * _382) + _400) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_428.x * 0.699999988079071044921875);
    float _441 = ((_317 + (-1.35000002384185791015625)) + ((((((_402.y - _401) * _382) + _401) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].x)) + (_428.y * 0.699999988079071044921875);
    float _444 = fma(_327, _221, fma(_441, _213 * TANGENT.x, _438 * (_199 * _191)));
    float _447 = fma(_327, _222, fma(_441, _213 * TANGENT.y, _438 * (_199 * _192)));
    float _450 = fma(_327, _223, fma(_441, _213 * TANGENT.z, _438 * (_199 * _193)));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    float _455 = _454 * _444;
    float _456 = _454 * _447;
    float _457 = _454 * _450;
    float _469 = (cbMtdParam._m0[17u].x * _292) + TEXCOORD_1.x;
    float _470 = (cbMtdParam._m0[17u].y * _292) + TEXCOORD_1.y;
    vec4 _482 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_469 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_470 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _499 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _469) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _470) + cbTextureTilingScale._m0[0u].w));
    float _511 = (cbMtdParam._m0[15u].z * _292) + TEXCOORD_1.x;
    float _512 = (cbMtdParam._m0[15u].w * _292) + TEXCOORD_1.y;
    vec4 _517 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_3, SS_WrapLinear), vec2((_511 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_512 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _525 = ((_517.y * 0.5) + (-0.25)) * cbMtdParam._m0[14u].z;
    float _527 = (-0.0) - (cbMtdParam._m0[14u].z * ((_517.x * 0.5) + (-0.25)));
    vec4 _544 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_369 * _527) + _511) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_525 * _369) + _512) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    vec4 _549 = texture(sampler2D(M_Waterfall_01_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((_371 * _527) + _511) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_525 * _371) + _512) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _563 = exp2(log2(_482.x) * cbMtdParam._m0[13u].y) * cbMtdParam._m0[14u].w;
    float _574 = ((_499.x + cbMtdParam._m0[10u].x) + cbMtdParam._m0[9u].x) + (_563 * (((_549.x - _546) * _382) + _546));
    float _577 = ((_499.y + cbMtdParam._m0[10u].y) + cbMtdParam._m0[9u].y) + (_563 * (((_549.y - _547) * _382) + _547));
    float _580 = ((_499.z + cbMtdParam._m0[10u].z) + cbMtdParam._m0[9u].z) + (_563 * (((_549.z - _548) * _382) + _548));
    float _591 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _592 = _591 * _277;
    float _593 = _591 * _278;
    float _594 = _591 * _279;
    float _598 = dot(vec4(_592, _593, _594, 0.0), vec4(_455, _456, _457, 0.0)) - cbMtdParam._m0[12u].w;
    float _3444 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _605 = exp2(log2(1.0 - (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _613 = ((_605 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x) * _574;
    float _615 = ((_605 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y) * _577;
    float _617 = ((_605 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * _580;
    float _3460 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _623 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3482 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3493 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _649 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _670 = fma(_457, cbSceneParam._m0[5u].z, fma(_456, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _455));
    float _673 = fma(_457, cbSceneParam._m0[6u].z, fma(_456, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _455));
    float _676 = fma(_457, cbSceneParam._m0[7u].z, fma(_456, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _455));
    uint _689 = uint(roundEven(NORMAL.w)) * 13u;
    uint _690 = _689 + 9u;
    uint _691 = _690 + uint(cbMatDynParam._m0[0u].w);
    float _697 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_691].x;
    float _698 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_691].y;
    float _699 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_691].z;
    float _3504 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _648, cbSceneParam._m0[86u].y * _649));
    float _714 = _711.x * TEXCOORD_1.w;
    float _715 = dot(vec3(_455, _456, _457), vec3(_592, _593, _594));
    float _718 = _715 * 2.0;
    float _722 = (_718 * _455) - _592;
    float _723 = (_718 * _456) - _593;
    float _724 = (_718 * _457) - _594;
    float _728 = abs(dot(vec3(_592, _593, _594), vec3(_455, _456, _457)));
    float _3537 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _730 = sqrt(_623);
    float _743 = exp2((_730 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_730 * 3.0));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1084;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_783, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775));
        float _814 = fma(_783, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775));
        float _818 = fma(_783, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775));
        float _842 = _775 + _455;
        float _843 = _779 + _456;
        float _844 = _783 + _457;
        float _854 = fma(_844, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842)) - _810;
        float _855 = fma(_844, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842)) - _814;
        float _856 = fma(_844, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842)) - _818;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _912 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_878.x + (-0.5));
        float _914 = _912 * (_878.y + (-0.5));
        float _915 = _912 * (_878.z + (-0.5));
        float _922 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_885.x + (-0.5));
        float _924 = _922 * (_885.y + (-0.5));
        float _925 = _922 * (_885.z + (-0.5));
        float _932 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_892.x + (-0.5));
        float _934 = _932 * (_892.y + (-0.5));
        float _935 = _932 * (_892.z + (-0.5));
        float _942 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_899.x + (-0.5));
        float _944 = _942 * (_899.y + (-0.5));
        float _945 = _942 * (_899.z + (-0.5));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = _913 * 0.5;
        float _950 = _923 * 0.5;
        float _951 = _933 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _966 = (dot(vec3(_455, _456, _457), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _976 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3585 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_978 + 1.0))) + _983) * _946;
        float _993 = _914 * 0.5;
        float _994 = _924 * 0.5;
        float _995 = _934 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_455, _456, _457), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3618 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1020 + 1.0))) + _1025) * _947;
        float _1035 = _915 * 0.5;
        float _1036 = _925 * 0.5;
        float _1037 = _935 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_455, _456, _457), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3651 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1062 + 1.0))) + _1067) * _948;
        _1084 = _915;
        _1086 = _914;
        _1087 = _913;
        _1088 = _925;
        _1089 = _924;
        _1090 = _923;
        _1091 = _935;
        _1092 = _934;
        _1093 = _933;
        _1094 = _948;
        _1095 = _947;
        _1096 = _946;
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
    }
    else
    {
        _1084 = _1085;
        _1086 = _1085;
        _1087 = _1085;
        _1088 = _1085;
        _1089 = _1085;
        _1090 = _1085;
        _1091 = _1085;
        _1092 = _1085;
        _1093 = _1085;
        _1094 = _1085;
        _1095 = _1085;
        _1096 = _1085;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_783, cbModelParam._m0[30u].z, fma(_779, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775));
        float _1129 = fma(_783, cbModelParam._m0[31u].z, fma(_779, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775));
        float _1133 = fma(_783, cbModelParam._m0[32u].z, fma(_779, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775));
        float _1156 = _775 + _455;
        float _1157 = _779 + _456;
        float _1158 = _783 + _457;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_455, _456, _457), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3714 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_455, _456, _457), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3747 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_455, _456, _457), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3780 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1085;
        _1395 = _1085;
        _1396 = _1085;
        _1397 = _1085;
        _1398 = _1085;
        _1399 = _1085;
        _1400 = _1085;
        _1401 = _1085;
        _1402 = _1085;
        _1403 = _1085;
        _1404 = _1085;
        _1405 = _1085;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1097)) + _1097;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1098)) + _1098;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1099)) + _1099;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _722 * 0.5;
    float _1463 = _723 * 0.5;
    float _1464 = _724 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1088, _1091, _1094));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_783, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_783, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_783, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_724, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722));
        float _1592 = fma(_724, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722));
        float _1595 = fma(_724, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1623 = frontier_phi_16_14_ladder;
        }
        float _1794;
        if (_1592 > 0.0)
        {
            _1794 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1794 = frontier_phi_25_21_ladder;
        }
        float _2238;
        if (_1595 > 0.0)
        {
            _2238 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2238 = frontier_phi_37_32_ladder;
        }
        float _2240 = isnan(_1794) ? _1623 : (isnan(_1623) ? _1794 : min(_1623, _1794));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1589) + _1578;
        float _2246 = (_2241 * _1592) + _1582;
        float _2247 = (_2241 * _1595) + _1586;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2248;
        float _2252 = _2248 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 > _2252) || ((_2246 < _2250) || ((_2245 < _2250) || (_2245 > _2252))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_15_37_ladder = _2496.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2496.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2496.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_15_37_ladder_2;
        _1613 = frontier_phi_15_37_ladder_1;
        _1615 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_722, _723, _724), _1531);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1675 = fma(_783, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775)) + cbModelParam._m0[21u].w;
        float _1679 = fma(_783, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775)) + cbModelParam._m0[22u].w;
        float _1683 = fma(_783, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775)) + cbModelParam._m0[23u].w;
        float _1686 = fma(_724, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722));
        float _1689 = fma(_724, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722));
        float _1692 = fma(_724, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722));
        float _1799;
        if (_1686 > 0.0)
        {
            _1799 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1799 = frontier_phi_27_23_ladder;
        }
        float _2265;
        if (_1689 > 0.0)
        {
            _2265 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2265 = frontier_phi_39_34_ladder;
        }
        float _2617;
        if (_1692 > 0.0)
        {
            _2617 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2617 = frontier_phi_51_46_ladder;
        }
        float _2619 = isnan(_2265) ? _1799 : (isnan(_1799) ? _2265 : min(_1799, _2265));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _1686) + _1675;
        float _2625 = (_2620 * _1689) + _1679;
        float _2626 = (_2620 * _1692) + _1683;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2627;
        float _2630 = _2627 + 1.0;
        float frontier_phi_24_51_ladder;
        float frontier_phi_24_51_ladder_1;
        float frontier_phi_24_51_ladder_2;
        if ((_2626 > _2630) || ((_2626 < _2628) || ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 < _2628) || (_2624 > _2630))))))
        {
            frontier_phi_24_51_ladder = 0.0;
            frontier_phi_24_51_ladder_1 = 0.0;
            frontier_phi_24_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2626, cbModelParam._m0[17u].z, fma(_2625, cbModelParam._m0[17u].y, _2624 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2626, cbModelParam._m0[18u].z, fma(_2625, cbModelParam._m0[18u].y, _2624 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2626, cbModelParam._m0[19u].z, fma(_2625, cbModelParam._m0[19u].y, _2624 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_24_51_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_1 = _2747.x * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_2 = _2747.y * cbModelParam._m0[1u].z;
        }
        _1711 = frontier_phi_24_51_ladder_1;
        _1713 = frontier_phi_24_51_ladder_2;
        _1715 = frontier_phi_24_51_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_722, _723, _724), _1620);
        _1711 = _1695.x * cbModelParam._m0[1u].z;
        _1713 = _1695.y * cbModelParam._m0[1u].z;
        _1715 = _1695.z * cbModelParam._m0[1u].z;
    }
    float _1727 = ((((1.0 - _743) * ((_730 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_743 * _730)) * _714;
    float _1728 = _1727 * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1729 = _1727 * ((cbModelParam._m0[1u].w * (_1713 - _1613)) + _1613);
    float _1730 = _1727 * ((cbModelParam._m0[1u].w * (_1715 - _1615)) + _1615);
    float _1733 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, _1728 * cbSceneParam._m0[91u].x));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1786 = _1773 / _1785;
    float _1787 = _1777 / _1785;
    float _1788 = _1781 / _1785;
    float _1935;
    float _1936;
    float _1937;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1815 = ((uint(_1788 > cbSceneParam._m0[59u].y) + uint(_1788 > cbSceneParam._m0[59u].x)) + uint(_1788 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1816 = _1815 + 43u;
        uint _1824 = _1815 + 44u;
        uint _1832 = _1815 + 45u;
        uint _1840 = _1815 + 46u;
        float _1851 = fma(_1785, cbSceneParam._m0[_1816].w, fma(_1781, cbSceneParam._m0[_1816].z, fma(_1777, cbSceneParam._m0[_1816].y, _1773 * cbSceneParam._m0[_1816].x)));
        float _1855 = fma(_1785, cbSceneParam._m0[_1824].w, fma(_1781, cbSceneParam._m0[_1824].z, fma(_1777, cbSceneParam._m0[_1824].y, _1773 * cbSceneParam._m0[_1824].x)));
        float _1863 = fma(_1785, cbSceneParam._m0[_1840].w, fma(_1781, cbSceneParam._m0[_1840].z, fma(_1777, cbSceneParam._m0[_1840].y, _1773 * cbSceneParam._m0[_1840].x)));
        float _1868 = cbSceneParam._m0[33u].z * _1863;
        float _1870 = cbSceneParam._m0[33u].w * _1863;
        float _1873 = fma(_1785, cbSceneParam._m0[_1832].w, fma(_1781, cbSceneParam._m0[_1832].z, fma(_1777, cbSceneParam._m0[_1832].y, _1773 * cbSceneParam._m0[_1832].x))) / _1863;
        float _1921 = (cbSceneParam._m0[33u].x - sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788))) * cbSceneParam._m0[33u].y;
        float _3906 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1928 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 + _1851) / _1863, (_1870 + _1855) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 + _1851) / _1863, (_1855 - _1868) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 - _1868) / _1863, (_1855 - _1870) / _1863), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 - _1870) / _1863, (_1868 + _1855) / _1863), _1873), 0.0)).x), vec4(0.25)));
        _1935 = 1.0 - (_1928 * cbSceneParam._m0[34u].x);
        _1936 = 1.0 - (_1928 * cbSceneParam._m0[34u].y);
        _1937 = 1.0 - (_1928 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1935 = 1.0;
        _1936 = 1.0;
        _1937 = 1.0;
    }
    float _2001;
    float _2003;
    float _2005;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1989 = fma(_1785, cbSceneParam._m0[63u].w, fma(_1781, cbSceneParam._m0[63u].z, fma(_1777, cbSceneParam._m0[63u].y, _1773 * cbSceneParam._m0[63u].x)));
        float _1990 = fma(_1785, cbSceneParam._m0[60u].w, fma(_1781, cbSceneParam._m0[60u].z, fma(_1777, cbSceneParam._m0[60u].y, _1773 * cbSceneParam._m0[60u].x))) / _1989;
        float _1991 = fma(_1785, cbSceneParam._m0[61u].w, fma(_1781, cbSceneParam._m0[61u].z, fma(_1777, cbSceneParam._m0[61u].y, _1773 * cbSceneParam._m0[61u].x))) / _1989;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1990 >= cbSceneParam._m0[64u].x) && (_1991 >= cbSceneParam._m0[64u].y)) && (_1990 <= cbSceneParam._m0[64u].z)) && (_1991 <= cbSceneParam._m0[64u].w))
        {
            float _2278 = fma(_1785, cbSceneParam._m0[62u].w, fma(_1781, cbSceneParam._m0[62u].z, fma(_1777, cbSceneParam._m0[62u].y, _1773 * cbSceneParam._m0[62u].x))) / _1989;
            float _2282 = isnan(cbSceneParam._m0[41u].w) ? _2278 : (isnan(_2278) ? cbSceneParam._m0[41u].w : max(_2278, cbSceneParam._m0[41u].w));
            float _2325 = (cbSceneParam._m0[33u].x - sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788))) * cbSceneParam._m0[33u].y;
            float _3922 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
            float _2332 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1990, cbSceneParam._m0[33u].w + _1991), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1990, _1991 - cbSceneParam._m0[33u].z), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1990 - cbSceneParam._m0[33u].z, _1991 - cbSceneParam._m0[33u].w), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1990 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1991), _2282), 0.0)).x), vec4(0.25)));
            float _2336 = 1.0 - (_2332 * cbSceneParam._m0[34u].x);
            float _2337 = 1.0 - (_2332 * cbSceneParam._m0[34u].y);
            float _2338 = 1.0 - (_2332 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2338) ? _1937 : (isnan(_1937) ? _2338 : min(_1937, _2338));
            frontier_phi_36_35_ladder_1 = isnan(_2336) ? _1935 : (isnan(_1935) ? _2336 : min(_1935, _2336));
            frontier_phi_36_35_ladder_2 = isnan(_2337) ? _1936 : (isnan(_1936) ? _2337 : min(_1936, _2337));
        }
        else
        {
            frontier_phi_36_35_ladder = _1937;
            frontier_phi_36_35_ladder_1 = _1935;
            frontier_phi_36_35_ladder_2 = _1936;
        }
        _2001 = frontier_phi_36_35_ladder_1;
        _2003 = frontier_phi_36_35_ladder_2;
        _2005 = frontier_phi_36_35_ladder;
    }
    else
    {
        _2001 = _1935;
        _2003 = _1936;
        _2005 = _1937;
    }
    uvec4 _2010 = floatBitsToUint(cbInstanceData._m0[_689 + 5u]);
    uint _2012 = _2010.x * 14u;
    uint _2013 = _2012 + 13u;
    float _2018 = _714 + (-1.0);
    float _2021 = (cbLight._m0[_2013].x * _2018) + 1.0;
    float _2022 = (cbLight._m0[_2013].y * _2018) + 1.0;
    uint _2023 = _2012 + 5u;
    float _2029 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2033 = _2012 + 4u;
    float _2042 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2046 = _2012 | 1u;
    float _2057 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_455, _456, _457));
    float _2060 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_455, _456, _457));
    float _3958 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _3969 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2065 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _2067 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.3183098733425140380859375;
    float _2074 = ((cbLight._m0[_2023].x * _2029) * _2067) + (((cbLight._m0[_2033].x * _2001) * _2042) * _2065);
    float _2075 = ((_2029 * cbLight._m0[_2023].y) * _2067) + (((cbLight._m0[_2033].y * _2003) * _2042) * _2065);
    float _2076 = ((_2029 * cbLight._m0[_2023].z) * _2067) + (((cbLight._m0[_2033].z * _2005) * _2042) * _2065);
    uint _2078 = _2012 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _623) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_2012].x + _592;
    float _2094 = cbLight._m0[_2012].y + _593;
    float _2095 = cbLight._m0[_2012].z + _594;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2012].xyz));
    float _3980 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2107 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _2108 = dot(vec3(_455, _456, _457), vec3(_2100, _2101, _2102));
    float _4002 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2100, _2101, _2102));
    float _4013 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2132 = 1.0 - _2092;
    float _2143 = (0.5 / (((_2107 * ((_2106 * _2132) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2132) + _2092) * _2106))) * _2106;
    float _4024 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2159 = _2012 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _623) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2046].x + _592;
    float _2173 = cbLight._m0[_2046].y + _593;
    float _2174 = cbLight._m0[_2046].z + _594;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2046].xyz));
    float _4035 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _2186 = dot(vec3(_455, _456, _457), vec3(_2179, _2180, _2181));
    float _4046 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2179, _2180, _2181));
    float _4057 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2207 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2208 = 1.0 - _2171;
    float _2218 = (0.5 / (((_2107 * ((_2185 * _2208) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2208) + _2171) * _2185))) * _2185;
    float _4068 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2230 = (((_2207 * cbLight._m0[_2159].x) * _2220) * _2029) + ((((cbLight._m0[_2078].x * _2001) * _2131) * _2145) * _2042);
    float _2231 = (((_2207 * cbLight._m0[_2159].y) * _2220) * _2029) + ((((cbLight._m0[_2078].y * _2003) * _2131) * _2145) * _2042);
    float _2232 = (((_2207 * cbLight._m0[_2159].z) * _2220) * _2029) + ((((cbLight._m0[_2078].z * _2005) * _2131) * _2145) * _2042);
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_2010.y == 0u)
    {
        uvec4 _2350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2351 = _2350.x;
        uint _2362 = uint((float(_2350.y) * floor(float(uint(cbSceneParam._m0[85u].y * _649) / _2351))) + floor(float(uint(cbSceneParam._m0[85u].x * _648) / _2351)));
        float _2372 = (log2(_1788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2373 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        uint _2376 = uint(isnan(14.0) ? _2373 : (isnan(_2373) ? 14.0 : min(_2373, 14.0)));
        uvec4 _2381 = texelFetch(g_lightClusterGridBuffer, int(((_2376 << 2u) + (_2362 << 6u)) >> 2u));
        uint _2382 = _2381.x;
        uint _2383 = _2350.z;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((((1u << ((_2383 >> 4u) & 15u)) + 4294967295u) & _2382) == 0u) || ((_2383 & 240u) == 0u))
        {
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
        }
        else
        {
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            uint _2681 = 0u;
            uint _2690;
            bool _2691;
            for (;;)
            {
                _2690 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2681 << 2u)) >> 2u)).x;
                _2691 = _2690 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_2691)
                {
                    frontier_phi_60_pred = _2675;
                    frontier_phi_60_pred_1 = _2676;
                    frontier_phi_60_pred_2 = _2680;
                    frontier_phi_60_pred_3 = _2679;
                    frontier_phi_60_pred_4 = _2678;
                    frontier_phi_60_pred_5 = _2677;
                }
                else
                {
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    uint _2826;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2680;
                    _2826 = _2690;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    for (;;)
                    {
                        uint _2830 = uint(findLSB(_2826)) + (_2681 << 5u);
                        uint _2827 = (_2826 + 4294967295u) & _2826;
                        uint _2832 = _2830 * 48u;
                        vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2852 = (_2830 * 48u) + 4u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 3u)).x));
                        uint _2871 = (_2830 * 48u) + 8u;
                        vec3 _2882 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x));
                        float _2886 = _2846.x - _1786;
                        float _2887 = _2846.y - _1787;
                        float _2888 = _2846.z - _1788;
                        float _2889 = dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888));
                        float _2892 = inversesqrt(_2889);
                        float _2893 = _2892 * _2886;
                        float _2894 = _2892 * _2887;
                        float _2895 = _2892 * _2888;
                        float _2896 = dot(vec3(_670, _673, _676), vec3(_2893, _2894, _2895));
                        float _2901 = 1.0 - (_2889 * _2846.w);
                        float _4089 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2902 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2903 = sqrt(_2889) * _2865.w;
                        float _2906 = 1.39999997615814208984375 / (_2903 + 1.39999997615814208984375);
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2896) + _2907;
                        float _2913 = _2903 * _2903;
                        float _2916 = ((isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))) * _2902) / ((_2913 * 0.699999988079071044921875) + 1.0);
                        float _2920 = (-0.0) - _1786;
                        float _2921 = (-0.0) - _1787;
                        float _2922 = (-0.0) - _1788;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2936 = exp2(log2(1.0 / ((_2913 * 3.5) + 5.0)) * 0.25);
                        float _2937 = 1.0 - _730;
                        float _2944 = sqrt(1.0 - ((1.0 - (_2937 * _2937)) * (1.0 - (_2936 * _2936))));
                        float _2945 = _2944 * _2944;
                        float _2946 = _2945 * _2945;
                        float _2947 = _2927 + _2893;
                        float _2948 = _2928 + _2894;
                        float _2949 = _2929 + _2895;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2957 = dot(vec3(_670, _673, _676), vec3(_2927, _2928, _2929));
                        float _4105 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2961 = dot(vec3(_670, _673, _676), vec3(_2953 * _2947, _2953 * _2948, _2953 * _2949));
                        float _4116 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2968 = ((_2964 * _2964) * (_2946 + (-1.0))) + 1.0;
                        float _2969 = _2906 * _2945;
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2896) + _2970;
                        float _4127 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2975 = 1.0 - _2945;
                        float _2985 = (0.5 / (((_2974 * ((_2960 * _2975) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2974 * _2975) + _2945) * _2960))) * _2974;
                        float _4138 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2996 = (((_2946 * 3.1415927410125732421875) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) / ((_2968 * _2968) * ((_2913 * 2.1991131305694580078125) + 3.141590118408203125))) * _2902;
                        _2755 = (_2916 * _2865.x) + _2823;
                        _2756 = (_2916 * _2865.y) + _2824;
                        _2757 = (_2916 * _2865.z) + _2825;
                        _2752 = (_2996 * _2882.x) + _2820;
                        _2753 = (_2996 * _2882.y) + _2821;
                        _2754 = (_2996 * _2882.z) + _2822;
                        if (_2827 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2827;
                        }
                    }
                    frontier_phi_60_pred = _2752;
                    frontier_phi_60_pred_1 = _2753;
                    frontier_phi_60_pred_2 = _2757;
                    frontier_phi_60_pred_3 = _2756;
                    frontier_phi_60_pred_4 = _2755;
                    frontier_phi_60_pred_5 = _2754;
                }
                _2506 = frontier_phi_60_pred;
                _2508 = frontier_phi_60_pred_1;
                _2516 = frontier_phi_60_pred_2;
                _2514 = frontier_phi_60_pred_3;
                _2512 = frontier_phi_60_pred_4;
                _2510 = frontier_phi_60_pred_5;
                uint _2682 = _2681 + 1u;
                if (_2682 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2675 = _2506;
                    _2676 = _2508;
                    _2677 = _2510;
                    _2678 = _2512;
                    _2679 = _2514;
                    _2680 = _2516;
                    _2681 = _2682;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
        }
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.z;
        uint _2522 = (_2520 >> 8u) & 15u;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((4294967295u << _2522) & _2382) == 0u)
        {
            _2643 = _2505;
            _2645 = _2507;
            _2647 = _2509;
            _2649 = _2511;
            _2651 = _2513;
            _2653 = _2515;
        }
        else
        {
            float _2668 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
            float _2669 = _2668 * _1786;
            float _2670 = _2668 * _1787;
            float _2671 = _2668 * _1788;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2522 < ((_2520 >> 12u) & 15u))
            {
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2803 = _2505;
                float _2804 = _2507;
                float _2805 = _2509;
                float _2806 = _2511;
                float _2807 = _2513;
                float _2808 = _2515;
                uint _2809 = _2522;
                uint _2818;
                bool _2819;
                for (;;)
                {
                    _2818 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2809 << 2u)) >> 2u)).x;
                    _2819 = _2818 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2819)
                    {
                        frontier_phi_66_pred = _2803;
                        frontier_phi_66_pred_1 = _2808;
                        frontier_phi_66_pred_2 = _2807;
                        frontier_phi_66_pred_3 = _2806;
                        frontier_phi_66_pred_4 = _2805;
                        frontier_phi_66_pred_5 = _2804;
                    }
                    else
                    {
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3014 = _2803;
                        float _3015 = _2804;
                        float _3016 = _2805;
                        float _3017 = _2806;
                        float _3018 = _2807;
                        float _3019 = _2808;
                        uint _3020 = _2818;
                        uint _3021;
                        vec4 _3046;
                        float _3047;
                        vec4 _3062;
                        vec3 _3074;
                        vec4 _3089;
                        vec4 _3105;
                        float _3152;
                        bool _3153;
                        for (;;)
                        {
                            uint _3031 = ((_2809 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3020));
                            _3021 = (_3020 + 4294967295u) & _3020;
                            uint _3033 = _3031 * 40u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3047 = _3046.w;
                            uint _3049 = (_3031 * 40u) + 4u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3064 = (_3031 * 40u) + 8u;
                            _3074 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x));
                            uint _3076 = (_3031 * 40u) + 16u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3092 = (_3031 * 40u) + 20u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3108 = (_3031 * 40u) + 24u;
                            vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3127 = (_3031 * 40u) + 28u;
                            vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3152 = fma(_1788, _3140.z, fma(_1787, _3140.y, _3140.x * _1786)) + _3140.w;
                            _3153 = !((fma(_1788, _3121.z, fma(_1787, _3121.y, _3121.x * _1786)) + _3121.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3153)
                            {
                                float _3180 = _3046.x - _1786;
                                float _3181 = _3046.y - _1787;
                                float _3182 = _3046.z - _1788;
                                float _3183 = dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182));
                                float _3186 = inversesqrt(_3183);
                                float _3187 = _3186 * _3180;
                                float _3188 = _3186 * _3181;
                                float _3189 = _3186 * _3182;
                                float _3193 = 1.0 - (_3183 / (_3047 * _3047));
                                float _4149 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3198 = sqrt(_3183) * _3062.w;
                                float _3200 = 1.39999997615814208984375 / (_3198 + 1.39999997615814208984375);
                                float _3201 = _3200 * _3200;
                                float _3204 = ((1.0 - _3201) * dot(vec3(_3187, _3188, _3189), vec3(_670, _673, _676))) + _3201;
                                float _3207 = _3198 * _3198;
                                float _3211 = (fma(_1788, _3089.z, fma(_1787, _3089.y, _3089.x * _1786)) + _3089.w) / _3152;
                                float _3212 = (fma(_1788, _3105.z, fma(_1787, _3105.y, _3105.x * _1786)) + _3105.w) / _3152;
                                float _3216 = 1.0 - dot(vec2(_3211, _3212), vec2(_3211, _3212));
                                float _4165 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3218 = _3217 * (((isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))) * _3194) / ((_3207 * 0.699999988079071044921875) + 1.0));
                                float _3230 = exp2(log2(1.0 / ((_3207 * 3.5) + 5.0)) * 0.25);
                                float _3231 = 1.0 - _730;
                                float _3238 = sqrt(1.0 - ((1.0 - (_3231 * _3231)) * (1.0 - (_3230 * _3230))));
                                float _3239 = _3238 * _3238;
                                float _3240 = _3239 * _3239;
                                float _3241 = _3187 - _2669;
                                float _3242 = _3188 - _2670;
                                float _3243 = _3189 - _2671;
                                float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                                float _3251 = dot(vec3(_670, _673, _676), vec3((-0.0) - _2669, (-0.0) - _2670, (-0.0) - _2671));
                                float _4176 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3254 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3255 = dot(vec3(_670, _673, _676), vec3(_3247 * _3241, _3247 * _3242, _3247 * _3243));
                                float _4187 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3258 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3262 = ((_3258 * _3258) * (_3240 + (-1.0))) + 1.0;
                                float _3263 = _3200 * _3239;
                                float _3264 = _3263 * _3263;
                                float _3270 = ((1.0 - _3264) * dot(vec3(_670, _673, _676), vec3(_3187, _3188, _3189))) + _3264;
                                float _4198 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3272 = 1.0 - _3239;
                                float _3282 = (0.5 / (((_3271 * ((_3254 * _3272) + _3239)) + 9.9999999392252902907785028219223e-09) + (((_3271 * _3272) + _3239) * _3254))) * _3271;
                                float _4209 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3292 = (_3217 * _3194) * (((_3240 * 3.1415927410125732421875) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) / ((_3262 * _3262) * ((_3207 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _3218 * _3062.z;
                                frontier_phi_72_pred_1 = _3218 * _3062.y;
                                frontier_phi_72_pred_2 = _3218 * _3062.x;
                                frontier_phi_72_pred_3 = _3292 * _3074.z;
                                frontier_phi_72_pred_4 = _3292 * _3074.y;
                                frontier_phi_72_pred_5 = _3292 * _3074.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3301 = frontier_phi_72_pred;
                            _3300 = frontier_phi_72_pred_1;
                            _3299 = frontier_phi_72_pred_2;
                            _3298 = frontier_phi_72_pred_3;
                            _3297 = frontier_phi_72_pred_4;
                            _3296 = frontier_phi_72_pred_5;
                            _3004 = _3299 + _3017;
                            _3005 = _3300 + _3018;
                            _3006 = _3301 + _3019;
                            _3001 = _3296 + _3014;
                            _3002 = _3297 + _3015;
                            _3003 = _3298 + _3016;
                            if (_3021 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3021;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _3001;
                        frontier_phi_66_pred_1 = _3006;
                        frontier_phi_66_pred_2 = _3005;
                        frontier_phi_66_pred_3 = _3004;
                        frontier_phi_66_pred_4 = _3003;
                        frontier_phi_66_pred_5 = _3002;
                    }
                    _2644 = frontier_phi_66_pred;
                    _2654 = frontier_phi_66_pred_1;
                    _2652 = frontier_phi_66_pred_2;
                    _2650 = frontier_phi_66_pred_3;
                    _2648 = frontier_phi_66_pred_4;
                    _2646 = frontier_phi_66_pred_5;
                    uint _2810 = _2809 + 1u;
                    if (_2810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2803 = _2644;
                        _2804 = _2646;
                        _2805 = _2648;
                        _2806 = _2650;
                        _2807 = _2652;
                        _2808 = _2654;
                        _2809 = _2810;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2652;
                frontier_phi_53_54_ladder_1 = _2654;
                frontier_phi_53_54_ladder_2 = _2650;
                frontier_phi_53_54_ladder_3 = _2648;
                frontier_phi_53_54_ladder_4 = _2646;
                frontier_phi_53_54_ladder_5 = _2644;
            }
            else
            {
                frontier_phi_53_54_ladder = _2513;
                frontier_phi_53_54_ladder_1 = _2515;
                frontier_phi_53_54_ladder_2 = _2511;
                frontier_phi_53_54_ladder_3 = _2509;
                frontier_phi_53_54_ladder_4 = _2507;
                frontier_phi_53_54_ladder_5 = _2505;
            }
            _2643 = frontier_phi_53_54_ladder_5;
            _2645 = frontier_phi_53_54_ladder_4;
            _2647 = frontier_phi_53_54_ladder_3;
            _2649 = frontier_phi_53_54_ladder_2;
            _2651 = frontier_phi_53_54_ladder;
            _2653 = frontier_phi_53_54_ladder_1;
        }
        float _2658 = isnan(1.0) ? _714 : (isnan(_714) ? 1.0 : min(_714, 1.0));
        _2394 = (_2658 * _2649) + _2074;
        _2396 = (_2658 * _2651) + _2075;
        _2398 = (_2658 * _2653) + _2076;
        _2400 = ((_2643 * 0.039999999105930328369140625) * _2658) + _2230;
        _2402 = ((_2645 * 0.039999999105930328369140625) * _2658) + _2231;
        _2404 = ((_2647 * 0.039999999105930328369140625) * _2658) + _2232;
    }
    else
    {
        _2394 = _2074;
        _2396 = _2075;
        _2398 = _2076;
        _2400 = _2230;
        _2402 = _2231;
        _2404 = _2232;
    }
    uint _2410 = _690 + uint(cbMatDynParam._m0[0u].w);
    float _4225 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4236 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4247 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _2435 = (((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2394 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _714))) + ((_2400 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((cbMtdParam._m0[12u].y * _574) * cbInstanceData._m0[_2410].x);
    float _2437 = (((cbMtdParam._m0[12u].y * _577) * cbInstanceData._m0[_2410].y) + ((_2402 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2396 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _714)));
    float _2439 = (((cbMtdParam._m0[12u].y * _580) * cbInstanceData._m0[_2410].z) + ((_2404 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2398 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _714)));
    uint _2443 = _689 + 6u;
    float _2451 = _648 / cbSceneParam._m0[86u].x;
    float _2452 = _649 / cbSceneParam._m0[86u].y;
    vec4 _2466 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2451, _2452, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2468 = _2466.x;
    float _2469 = _2466.y;
    float _2470 = _2466.z;
    float _2471 = _2466.w;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _2530 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _2531 = _2530 / _642;
        float _2542 = _2531 * _277;
        float _2543 = _278 * _2531;
        float _2544 = (-0.0) - _2543;
        float _2545 = _2531 * _279;
        float _2547 = (cbSceneParam._m0[77u].w * _2544) / _2530;
        float _2548 = _2547 + cbSceneParam._m0[79u].w;
        float _2549 = cbSceneParam._m0[79u].w - _2543;
        float _2555 = sqrt(((_2542 * _2542) + (_2543 * _2543)) + (_2545 * _2545));
        float _2558 = (1.0 - (cbSceneParam._m0[77u].w / _2530)) * _2555;
        float _2563 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2565 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2765;
        if (abs((_2544 - _2547) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2765 = ((((_2548 > 0.0) ? exp2(_2563 * _2548) : (2.0 - exp2(_2565 * _2548))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2558;
        }
        else
        {
            float _2704 = 1.0 / cbSceneParam._m0[80u].x;
            float _2705 = isnan(_2549) ? _2548 : (isnan(_2548) ? _2549 : max(_2548, _2549));
            float _2706 = isnan(_2549) ? _2548 : (isnan(_2548) ? _2549 : min(_2548, _2549));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            _2765 = ((abs(_2555 / _2544) * cbSceneParam._m0[80u].y) * ((((_2715 - _2716) * 2.0) - ((exp2(_2563 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0)))) - exp2(_2563 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0))))) * _2704)) - ((exp2(_2565 * _2715) - exp2(_2565 * _2716)) * _2704))) + (_2558 * cbSceneParam._m0[80u].z);
        }
        vec4 _2767 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2451, _2452, 1.0), 0.0);
        float _2776 = exp2((_2765 * (-1.44269502162933349609375)) * (1.0 - _2767.w));
        float _2777 = log2(_2776);
        float _2793 = log2(_2471);
        _2567 = (exp2(_2793 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].x)) * _2767.x) / cbSceneParam._m0[78u].x)) + _2468;
        _2569 = (exp2(_2793 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].y)) * _2767.y) / cbSceneParam._m0[78u].y)) + _2469;
        _2571 = (exp2(_2793 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].z)) * _2767.z) / cbSceneParam._m0[78u].z)) + _2470;
        _2573 = _2776 * _2471;
    }
    else
    {
        _2567 = _2468;
        _2569 = _2469;
        _2571 = _2470;
        _2573 = _2471;
    }
    float _2585 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2586 = _2585 == 3.0;
    float _2587 = log2(_2573);
    float _2594 = exp2(_2587 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0)));
    float _2595 = exp2(_2587 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0)));
    float _2596 = exp2(_2587 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0)));
    float _2605 = (_2585 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2605 * (_2586 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.y = _2605 * (_2586 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.z = _2605 * (_2586 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.w = cbInstanceData._m0[_2443].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2443].w;
}


