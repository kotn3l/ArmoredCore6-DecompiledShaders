#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _952;
float _3367;
float _3368;
float _3369;
float _3370;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _246 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(C_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _273 = cbMtdParam._m0[10u].x + _266.x;
    vec4 _285 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _289 = _285.z;
    float _293 = (_285.x * 2.0) + (-1.0);
    float _295 = (_285.y * 2.0) + (-1.0);
    float _296 = dot(vec2(_293, _295), vec2(_293, _295));
    float _3379 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    float _305 = fma(_302, _224, fma(_295, _216 * TANGENT.x, (_202 * _194) * _293));
    float _308 = fma(_302, _225, fma(_295, _216 * TANGENT.y, (_202 * _195) * _293));
    float _311 = fma(_302, _226, fma(_295, _216 * TANGENT.z, (_202 * _196) * _293));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    float _316 = _315 * _305;
    float _317 = _315 * _308;
    float _318 = _315 * _311;
    float _3390 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _319 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3412 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3423 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3434 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _323 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _339 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _380 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _390 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _380);
    float _391 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _380);
    float _392 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _380);
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _397 = _390 * _396;
    float _398 = _391 * _396;
    float _399 = _392 * _396;
    vec4 _404 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _406 = _404.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _631 = sqrt(((_390 * _390) + (_391 * _391)) + (_392 * _392));
        float _637 = (cbMatDynParam._m0[5u].x * _631) + cbMatDynParam._m0[5u].y;
        float _3445 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _642 = (cbMatDynParam._m0[5u].z * _631) + cbMatDynParam._m0[5u].w;
        float _3456 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) - _638)) + _638) < ((_406 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _418 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _419 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _421 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _423 = _421.w;
    float _443 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _446 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _449 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    vec4 _451 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _462 = (((_451.y - _319) + (_451.w * _319)) * cbMtdParam._m0[3u].x) + _319;
    uint _475 = uint(roundEven(NORMAL.w)) * 13u;
    uint _477 = _475 + 9u;
    uint _478 = _477 + uint(cbMatDynParam._m0[0u].w);
    float _484 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_478].x;
    float _485 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_478].y;
    float _486 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_478].z;
    float _3467 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    vec4 _490 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _495 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _506 = (((_495.x - _323) + (_495.w * _323)) * cbMtdParam._m0[3u].x) + _323;
    float _519 = (cbMtdParam._m0[3u].x * (((_487 * _423) - _487) + _490.x)) + _487;
    float _520 = (cbMtdParam._m0[3u].x * (((_488 * _423) - _488) + _490.y)) + _488;
    float _521 = (cbMtdParam._m0[3u].x * (((_489 * _423) - _489) + _490.z)) + _489;
    float _522 = 1.0 - _506;
    float _523 = _522 * _519;
    float _524 = _522 * _520;
    float _525 = _522 * _521;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _506;
    float _531 = (_520 + (-0.039999999105930328369140625)) * _506;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _506;
    float _533 = _530 + 0.039999999105930328369140625;
    float _535 = _531 + 0.039999999105930328369140625;
    float _536 = _532 + 0.039999999105930328369140625;
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _418, cbSceneParam._m0[86u].y * _419));
    float _548 = _545.x * TEXCOORD_4;
    float _549 = dot(vec3(_316, _317, _318), vec3(_397, _398, _399));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _316) - _397;
    float _557 = (_552 * _317) - _398;
    float _558 = (_552 * _318) - _399;
    float _562 = abs(dot(vec3(_397, _398, _399), vec3(_316, _317, _318)));
    float _3500 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_462);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _583 = (1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _584 = _577 * _564;
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _951;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _676 = fma(_620, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612));
        float _680 = fma(_620, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612));
        float _684 = fma(_620, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612));
        float _709 = _612 + _316;
        float _710 = _616 + _317;
        float _711 = _620 + _318;
        float _721 = fma(_711, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709)) - _676;
        float _722 = fma(_711, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709)) - _680;
        float _723 = fma(_711, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709)) - _684;
        float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
        float _740 = ((_727 * _721) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_676 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_727 * _722) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_680 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_727 * _723) / cbModelParam._m0[34u].z) + ((((((_684 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        float _779 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_745.x + (-0.5));
        float _781 = _779 * (_745.y + (-0.5));
        float _782 = _779 * (_745.z + (-0.5));
        float _789 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_752.x + (-0.5));
        float _791 = _789 * (_752.y + (-0.5));
        float _792 = _789 * (_752.z + (-0.5));
        float _799 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_759.x + (-0.5));
        float _801 = _799 * (_759.y + (-0.5));
        float _802 = _799 * (_759.z + (-0.5));
        float _809 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_766.x + (-0.5));
        float _811 = _809 * (_766.y + (-0.5));
        float _812 = _809 * (_766.z + (-0.5));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = _780 * 0.5;
        float _817 = _790 * 0.5;
        float _818 = _800 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _833 = (dot(vec3(_316, _317, _318), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _843 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3548 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_845 + 1.0))) + _850) * _813;
        float _860 = _781 * 0.5;
        float _861 = _791 * 0.5;
        float _862 = _801 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_316, _317, _318), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3581 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_887 + 1.0))) + _892) * _814;
        float _902 = _782 * 0.5;
        float _903 = _792 * 0.5;
        float _904 = _802 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_316, _317, _318), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3614 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_929 + 1.0))) + _934) * _815;
        _951 = _782;
        _953 = _781;
        _954 = _780;
        _955 = _792;
        _956 = _791;
        _957 = _790;
        _958 = _802;
        _959 = _801;
        _960 = _800;
        _961 = _815;
        _962 = _814;
        _963 = _813;
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
    }
    else
    {
        _951 = _952;
        _953 = _952;
        _954 = _952;
        _955 = _952;
        _956 = _952;
        _957 = _952;
        _958 = _952;
        _959 = _952;
        _960 = _952;
        _961 = _952;
        _962 = _952;
        _963 = _952;
        _964 = 0.0;
        _965 = 0.0;
        _966 = 0.0;
    }
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _995 = fma(_620, cbModelParam._m0[30u].z, fma(_616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _612));
        float _999 = fma(_620, cbModelParam._m0[31u].z, fma(_616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _612));
        float _1003 = fma(_620, cbModelParam._m0[32u].z, fma(_616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _612));
        float _1026 = _612 + _316;
        float _1027 = _616 + _317;
        float _1028 = _620 + _318;
        float _1038 = fma(_1028, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026)) - _995;
        float _1039 = fma(_1028, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026)) - _999;
        float _1040 = fma(_1028, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026)) - _1003;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_995 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_999 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[35u].z) + ((((((_1003 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1094 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1061.x + (-0.5));
        float _1096 = _1094 * (_1061.y + (-0.5));
        float _1097 = _1094 * (_1061.z + (-0.5));
        float _1104 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1068.x + (-0.5));
        float _1106 = _1104 * (_1068.y + (-0.5));
        float _1107 = _1104 * (_1068.z + (-0.5));
        float _1114 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1075.x + (-0.5));
        float _1116 = _1114 * (_1075.y + (-0.5));
        float _1117 = _1114 * (_1075.z + (-0.5));
        float _1124 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1082.x + (-0.5));
        float _1126 = _1124 * (_1082.y + (-0.5));
        float _1127 = _1124 * (_1082.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_316, _317, _318), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3677 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1158 + 1.0))) + _1163) * _1128;
        float _1173 = _1096 * 0.5;
        float _1174 = _1106 * 0.5;
        float _1175 = _1116 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_316, _317, _318), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3710 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1200 + 1.0))) + _1205) * _1129;
        float _1215 = _1097 * 0.5;
        float _1216 = _1107 * 0.5;
        float _1217 = _1117 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_316, _317, _318), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3743 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1242 + 1.0))) + _1247) * _1130;
        _1264 = _1097;
        _1265 = _1096;
        _1266 = _1095;
        _1267 = _1107;
        _1268 = _1106;
        _1269 = _1105;
        _1270 = _1117;
        _1271 = _1116;
        _1272 = _1115;
        _1273 = _1130;
        _1274 = _1129;
        _1275 = _1128;
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _952;
        _1265 = _952;
        _1266 = _952;
        _1267 = _952;
        _1268 = _952;
        _1269 = _952;
        _1270 = _952;
        _1271 = _952;
        _1272 = _952;
        _1273 = _952;
        _1274 = _952;
        _1275 = _952;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _965)) + _965;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1311 = fma(_1290, cbSceneParam._m0[89u].z, fma(_1289, cbSceneParam._m0[89u].y, _1288 * cbSceneParam._m0[89u].x));
    float _1314 = fma(_1290, cbSceneParam._m0[90u].z, fma(_1289, cbSceneParam._m0[90u].y, _1288 * cbSceneParam._m0[90u].x));
    float _1317 = fma(_1290, cbSceneParam._m0[91u].z, fma(_1289, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1288));
    float _1332 = _556 * 0.5;
    float _1333 = _557 * 0.5;
    float _1334 = _558 * 0.5;
    float _1335 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1338 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1341 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1375;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1348 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_951, _955, _958, _961));
        float _1352 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_953, _956, _959, _962));
        float _1356 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_954, _957, _960, _963));
        float _1363 = dot(vec4(cbModelParam._m0[39u]), vec4(_1332, _1333, _1334, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1386;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1377 = dot(vec4(cbModelParam._m0[40u]), vec4(_1332, _1333, _1334, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1390 = (_1386 * cbModelParam._m0[1u].x) + (_1375 * (1.0 - cbModelParam._m0[1u].x));
    float _1400 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1400 : min(cbModelParam._m0[25u].z, _1400));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1450 = fma(_620, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612)) + cbModelParam._m0[13u].w;
        float _1454 = fma(_620, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612)) + cbModelParam._m0[14u].w;
        float _1458 = fma(_620, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612)) + cbModelParam._m0[15u].w;
        float _1461 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1464 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1467 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1495;
        if (_1461 > 0.0)
        {
            _1495 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1495 = frontier_phi_19_17_ladder;
        }
        float _1724;
        if (_1464 > 0.0)
        {
            _1724 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1724 = frontier_phi_28_24_ladder;
        }
        float _1981;
        if (_1467 > 0.0)
        {
            _1981 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1981 = frontier_phi_40_35_ladder;
        }
        float _1983 = isnan(_1724) ? _1495 : (isnan(_1495) ? _1724 : min(_1495, _1724));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1461) + _1450;
        float _1989 = (_1984 * _1464) + _1454;
        float _1990 = (_1984 * _1467) + _1458;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1401);
            frontier_phi_18_40_ladder = _2118.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2118.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2118.x * cbModelParam._m0[1u].y;
        }
        _1483 = frontier_phi_18_40_ladder_2;
        _1485 = frontier_phi_18_40_ladder_1;
        _1487 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1401);
        _1483 = _1471.x * cbModelParam._m0[1u].y;
        _1485 = _1471.y * cbModelParam._m0[1u].y;
        _1487 = _1471.z * cbModelParam._m0[1u].y;
    }
    float _1491 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1491 : min(cbModelParam._m0[25u].w, _1491));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1549 = fma(_620, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612)) + cbModelParam._m0[21u].w;
        float _1553 = fma(_620, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612)) + cbModelParam._m0[22u].w;
        float _1557 = fma(_620, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612)) + cbModelParam._m0[23u].w;
        float _1560 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1563 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1566 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1729;
        if (_1560 > 0.0)
        {
            _1729 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1729 = frontier_phi_30_26_ladder;
        }
        float _2008;
        if (_1563 > 0.0)
        {
            _2008 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2008 = frontier_phi_42_37_ladder;
        }
        float _2221;
        if (_1566 > 0.0)
        {
            _2221 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2221 = frontier_phi_51_48_ladder;
        }
        float _2223 = isnan(_2008) ? _1729 : (isnan(_1729) ? _2008 : min(_1729, _2008));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1560) + _1549;
        float _2229 = (_2224 * _1563) + _1553;
        float _2230 = (_2224 * _1566) + _1557;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2231;
        float _2234 = _2231 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2230 > _2234) || ((_2230 < _2232) || ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 < _2232) || (_2228 > _2234))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2230, cbModelParam._m0[17u].z, fma(_2229, cbModelParam._m0[17u].y, _2228 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2230, cbModelParam._m0[18u].z, fma(_2229, cbModelParam._m0[18u].y, _2228 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2230, cbModelParam._m0[19u].z, fma(_2229, cbModelParam._m0[19u].y, _2228 * cbModelParam._m0[19u].x))), _1492);
            frontier_phi_27_51_ladder = _2428.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2428.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2428.x * cbModelParam._m0[1u].z;
        }
        _1585 = frontier_phi_27_51_ladder_2;
        _1587 = frontier_phi_27_51_ladder_1;
        _1589 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1492);
        _1585 = _1569.x * cbModelParam._m0[1u].z;
        _1587 = _1569.y * cbModelParam._m0[1u].z;
        _1589 = _1569.z * cbModelParam._m0[1u].z;
    }
    float _1602 = (((_583 * _533) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_583 * _535) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_583 * _536) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1602 * cbSceneParam._m0[91u].x));
    vec4 _1623 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_418, _419));
    float _1625 = _1623.w;
    float _1637 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1625);
    float _1638 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1625);
    float _1639 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1625);
    uvec4 _1643 = floatBitsToUint(cbInstanceData._m0[_475 + 5u]);
    uint _1645 = _1643.x * 14u;
    uint _1646 = _1645 + 13u;
    float _1653 = _548 + (-1.0);
    float _1658 = (cbLight._m0[_1646].x * _1653) + 1.0;
    float _1659 = (cbLight._m0[_1646].y * _1653) + 1.0;
    float _1660 = (cbLight._m0[_1646].z * _1653) + 1.0;
    float _1661 = (cbLight._m0[_1646].w * _1653) + 1.0;
    uint _1662 = _1645 + 5u;
    float _1668 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
    uint _1672 = _1645 + 4u;
    float _1682 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
    uint _1686 = _1645 | 1u;
    float _1697 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_316, _317, _318));
    float _1700 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_316, _317, _318));
    float _3879 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _3890 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1705 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1707 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.3183098733425140380859375;
    float _1714 = ((cbLight._m0[_1662].x * _1668) * _1707) + (((cbLight._m0[_1672].x * _1637) * _1682) * _1705);
    float _1715 = ((_1668 * cbLight._m0[_1662].y) * _1707) + (((cbLight._m0[_1672].y * _1638) * _1682) * _1705);
    float _1716 = ((_1668 * cbLight._m0[_1662].z) * _1707) + (((cbLight._m0[_1672].z * _1639) * _1682) * _1705);
    uvec4 _1721 = floatBitsToUint(cbLight._m0[_1645 + 12u]);
    bool _1723 = _1721.x == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1723)
    {
        _1734 = _1714;
        _1736 = _1715;
        _1738 = _1716;
    }
    else
    {
        uint _1742 = _1645 + 6u;
        float _1758 = (dot(vec3(cbLight._m0[_1645 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1759 = _1758 * _1758;
        float _3901 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1761 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _1734 = (((cbLight._m0[_1742].x * 0.3183098733425140380859375) * _1760) * _1761) + _1714;
        _1736 = (((cbLight._m0[_1742].y * 0.3183098733425140380859375) * _1760) * _1761) + _1715;
        _1738 = (((cbLight._m0[_1742].z * 0.3183098733425140380859375) * _1760) * _1761) + _1716;
    }
    bool _1741 = _1721.y == 0u;
    float _1779;
    float _1781;
    float _1783;
    if (_1741)
    {
        _1779 = _1734;
        _1781 = _1736;
        _1783 = _1738;
    }
    else
    {
        uint _1952 = _1645 + 7u;
        float _1968 = (dot(vec3(cbLight._m0[_1645 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _3917 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1971 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _1779 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1734;
        _1781 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1736;
        _1783 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1738;
    }
    uint _1786 = _1645 + 8u;
    float _1799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _462) * 0.949999988079071044921875);
    float _1800 = _1799 * _1799;
    float _1801 = cbLight._m0[_1645].x + _397;
    float _1802 = cbLight._m0[_1645].y + _398;
    float _1803 = cbLight._m0[_1645].z + _399;
    float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
    float _1808 = _1807 * _1801;
    float _1809 = _1807 * _1802;
    float _1810 = _1807 * _1803;
    float _1811 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1645].xyz));
    float _3933 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _1815 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1816 = dot(vec3(_316, _317, _318), vec3(_1808, _1809, _1810));
    float _3955 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1808, _1809, _1810));
    float _3966 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1824 = _1800 * _1800;
    float _1828 = ((_1819 * _1819) * (_1824 + (-1.0))) + 1.0;
    float _1836 = exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0);
    float _1837 = 0.959999978542327880859375 - _530;
    float _1839 = 0.959999978542327880859375 - _531;
    float _1840 = 0.959999978542327880859375 - _532;
    float _1847 = 1.0 - _1800;
    float _1858 = (0.5 / (((_1815 * ((_1814 * _1847) + _1800)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1847) + _1800) * _1814))) * _1814;
    float _3977 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1824 / ((_1828 * _1828) * 3.141590118408203125));
    uint _1874 = _1645 + 9u;
    float _1885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _462) * 0.949999988079071044921875);
    float _1886 = _1885 * _1885;
    float _1887 = cbLight._m0[_1686].x + _397;
    float _1888 = cbLight._m0[_1686].y + _398;
    float _1889 = cbLight._m0[_1686].z + _399;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1894 = _1893 * _1887;
    float _1895 = _1893 * _1888;
    float _1896 = _1893 * _1889;
    float _1897 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1686].xyz));
    float _3988 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1901 = dot(vec3(_316, _317, _318), vec3(_1894, _1895, _1896));
    float _3999 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1894, _1895, _1896));
    float _4010 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1886 * _1886;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
    float _1927 = 1.0 - _1886;
    float _1937 = (0.5 / (((_1815 * ((_1900 * _1927) + _1886)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1927) + _1886) * _1900))) * _1900;
    float _4021 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    float _1949 = (((((_1920 * _1837) + _533) * cbLight._m0[_1874].x) * _1939) * _1668) + ((((cbLight._m0[_1786].x * _1637) * ((_1836 * _1837) + _533)) * _1860) * _1682);
    float _1950 = (((((_1920 * _1839) + _535) * cbLight._m0[_1874].y) * _1939) * _1668) + ((((cbLight._m0[_1786].y * _1638) * ((_1836 * _1839) + _535)) * _1860) * _1682);
    float _1951 = (((((_1920 * _1840) + _536) * cbLight._m0[_1874].z) * _1939) * _1668) + ((((cbLight._m0[_1786].z * _1639) * ((_1836 * _1840) + _536)) * _1860) * _1682);
    float _2013;
    float _2015;
    float _2017;
    if (_1723)
    {
        _2013 = _1949;
        _2015 = _1950;
        _2017 = _1951;
    }
    else
    {
        uint _2019 = _1645 + 2u;
        uint _2023 = _1645 + 10u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _462) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _397;
        float _2040 = cbLight._m0[_2019].y + _398;
        float _2041 = cbLight._m0[_2019].z + _399;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2019].xyz));
        float _4032 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2053 = dot(vec3(_316, _317, _318), vec3(_2046, _2047, _2048));
        float _4043 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _4054 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1815 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2079) + _2038) * _2052))) * _2052;
        float _4065 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _2013 = (((((_2072 * _1837) + _533) * cbLight._m0[_2023].x) * _2091) * _2092) + _1949;
        _2015 = (((((_2072 * _1839) + _535) * cbLight._m0[_2023].y) * _2091) * _2092) + _1950;
        _2017 = (((((_2072 * _1840) + _536) * cbLight._m0[_2023].z) * _2091) * _2092) + _1951;
    }
    float _2127;
    float _2129;
    float _2131;
    if (_1741)
    {
        _2127 = _2013;
        _2129 = _2015;
        _2131 = _2017;
    }
    else
    {
        uint _2138 = _1645 + 3u;
        uint _2142 = _1645 + 11u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _462) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _397;
        float _2159 = cbLight._m0[_2138].y + _398;
        float _2160 = cbLight._m0[_2138].z + _399;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2138].xyz));
        float _4081 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2172 = dot(vec3(_316, _317, _318), vec3(_2165, _2166, _2167));
        float _4092 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4103 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0);
        float _2198 = 1.0 - _2157;
        float _2208 = (0.5 / (((_1815 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2198) + _2157) * _2171))) * _2171;
        float _4114 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _2127 = (((((_2191 * _1837) + _533) * cbLight._m0[_2142].x) * _2210) * _2211) + _2013;
        _2129 = (((((_2191 * _1839) + _535) * cbLight._m0[_2142].y) * _2210) * _2211) + _2015;
        _2131 = (((((_2191 * _1840) + _536) * cbLight._m0[_2142].z) * _2210) * _2211) + _2017;
    }
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_1643.y == 0u)
    {
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2286;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2286;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2286;
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.x;
        uint _2313 = uint((float(_2301.y) * floor(float(uint(cbSceneParam._m0[85u].y * _419) / _2302))) + floor(float(uint(cbSceneParam._m0[85u].x * _418) / _2302)));
        float _2323 = (log2(_2289 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2324 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        uint _2327 = uint(isnan(14.0) ? _2324 : (isnan(_2324) ? 14.0 : min(_2324, 14.0)));
        uvec4 _2332 = texelFetch(g_lightClusterGridBuffer, int(((_2327 << 2u) + (_2313 << 6u)) >> 2u));
        uint _2333 = _2332.x;
        uint _2334 = _2301.z;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((((1u << ((_2334 >> 4u) & 15u)) + 4294967295u) & _2333) == 0u) || ((_2334 & 240u) == 0u))
        {
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
        }
        else
        {
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            uint _2591 = 0u;
            uint _2600;
            bool _2601;
            for (;;)
            {
                _2600 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                _2601 = _2600 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2601)
                {
                    frontier_phi_68_pred = _2587;
                    frontier_phi_68_pred_1 = _2590;
                    frontier_phi_68_pred_2 = _2589;
                    frontier_phi_68_pred_3 = _2588;
                    frontier_phi_68_pred_4 = _2586;
                    frontier_phi_68_pred_5 = _2585;
                }
                else
                {
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    uint _2736;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2600;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2740 = uint(findLSB(_2736)) + (_2591 << 5u);
                        uint _2737 = (_2736 + 4294967295u) & _2736;
                        uint _2742 = _2740 * 48u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2762 = (_2740 * 48u) + 4u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 3u)).x));
                        uint _2781 = (_2740 * 48u) + 8u;
                        vec3 _2792 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x));
                        float _2796 = _2756.x - _2287;
                        float _2797 = _2756.y - _2288;
                        float _2798 = _2756.z - _2289;
                        float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                        float _2802 = inversesqrt(_2799);
                        float _2803 = _2802 * _2796;
                        float _2804 = _2802 * _2797;
                        float _2805 = _2802 * _2798;
                        float _2806 = dot(vec3(_443, _446, _449), vec3(_2803, _2804, _2805));
                        float _2811 = 1.0 - (_2799 * _2756.w);
                        float _4140 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2813 = sqrt(_2799) * _2775.w;
                        float _2816 = 1.39999997615814208984375 / (_2813 + 1.39999997615814208984375);
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2806) + _2817;
                        float _2823 = _2813 * _2813;
                        float _2827 = ((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2812) / ((_2823 * 0.699999988079071044921875) + 1.0);
                        float _2831 = (-0.0) - _2287;
                        float _2832 = (-0.0) - _2288;
                        float _2833 = (-0.0) - _2289;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2838 = _2837 * _2831;
                        float _2839 = _2837 * _2832;
                        float _2840 = _2837 * _2833;
                        float _2848 = exp2(log2(1.0 / ((_2823 * 3.5) + 5.0)) * 0.25);
                        float _2849 = 1.0 - _564;
                        float _2856 = sqrt(1.0 - ((1.0 - (_2849 * _2849)) * (1.0 - (_2848 * _2848))));
                        float _2857 = _2856 * _2856;
                        float _2858 = _2857 * _2857;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2861 = _2840 + _2805;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2869 = dot(vec3(_443, _446, _449), vec3(_2838, _2839, _2840));
                        float _4156 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2873 = dot(vec3(_443, _446, _449), vec3(_2865 * _2859, _2865 * _2860, _2865 * _2861));
                        float _4167 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2880 = ((_2876 * _2876) * (_2858 + (-1.0))) + 1.0;
                        float _2881 = _2816 * _2857;
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2806) + _2882;
                        float _4178 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2887 = 1.0 - _2857;
                        float _2897 = (0.5 / (((_2886 * ((_2872 * _2887) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2886 * _2887) + _2857) * _2872))) * _2886;
                        float _4189 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2908 = (((_2858 * 3.1415927410125732421875) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) / ((_2880 * _2880) * ((_2823 * 2.1991131305694580078125) + 3.141590118408203125))) * _2812;
                        _2660 = (_2827 * _2775.x) + _2733;
                        _2661 = (_2827 * _2775.y) + _2734;
                        _2662 = (_2827 * _2775.z) + _2735;
                        _2657 = (_2908 * _2792.x) + _2730;
                        _2658 = (_2908 * _2792.y) + _2731;
                        _2659 = (_2908 * _2792.z) + _2732;
                        if (_2737 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2737;
                        }
                    }
                    frontier_phi_68_pred = _2659;
                    frontier_phi_68_pred_1 = _2662;
                    frontier_phi_68_pred_2 = _2661;
                    frontier_phi_68_pred_3 = _2660;
                    frontier_phi_68_pred_4 = _2658;
                    frontier_phi_68_pred_5 = _2657;
                }
                _2438 = frontier_phi_68_pred;
                _2444 = frontier_phi_68_pred_1;
                _2442 = frontier_phi_68_pred_2;
                _2440 = frontier_phi_68_pred_3;
                _2436 = frontier_phi_68_pred_4;
                _2434 = frontier_phi_68_pred_5;
                uint _2592 = _2591 + 1u;
                if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2585 = _2434;
                    _2586 = _2436;
                    _2587 = _2438;
                    _2588 = _2440;
                    _2589 = _2442;
                    _2590 = _2444;
                    _2591 = _2592;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
        }
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.z;
        uint _2450 = (_2448 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2450) & _2333) == 0u)
        {
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
            _2561 = _2441;
            _2563 = _2443;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
            float _2579 = _2578 * _2287;
            float _2580 = _2578 * _2288;
            float _2581 = _2578 * _2289;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2450 < ((_2448 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2713 = _2433;
                float _2714 = _2435;
                float _2715 = _2437;
                float _2716 = _2439;
                float _2717 = _2441;
                float _2718 = _2443;
                uint _2719 = _2450;
                uint _2728;
                bool _2729;
                for (;;)
                {
                    _2728 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                    _2729 = _2728 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2729)
                    {
                        frontier_phi_79_pred = _2718;
                        frontier_phi_79_pred_1 = _2717;
                        frontier_phi_79_pred_2 = _2716;
                        frontier_phi_79_pred_3 = _2715;
                        frontier_phi_79_pred_4 = _2714;
                        frontier_phi_79_pred_5 = _2713;
                    }
                    else
                    {
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        uint _2941 = _2728;
                        uint _2942;
                        vec4 _2967;
                        float _2968;
                        vec4 _2983;
                        vec3 _2995;
                        vec4 _3011;
                        vec4 _3027;
                        float _3074;
                        bool _3075;
                        for (;;)
                        {
                            uint _2952 = ((_2719 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2941));
                            _2942 = (_2941 + 4294967295u) & _2941;
                            uint _2954 = _2952 * 40u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2968 = _2967.w;
                            uint _2970 = (_2952 * 40u) + 4u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2985 = (_2952 * 40u) + 8u;
                            _2995 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x));
                            uint _2998 = (_2952 * 40u) + 16u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2952 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2952 * 40u) + 24u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3049 = (_2952 * 40u) + 28u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3074 = fma(_2289, _3062.z, fma(_2288, _3062.y, _3062.x * _2287)) + _3062.w;
                            _3075 = !((fma(_2289, _3043.z, fma(_2288, _3043.y, _3043.x * _2287)) + _3043.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3075)
                            {
                                float _3102 = _2967.x - _2287;
                                float _3103 = _2967.y - _2288;
                                float _3104 = _2967.z - _2289;
                                float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                                float _3108 = inversesqrt(_3105);
                                float _3109 = _3108 * _3102;
                                float _3110 = _3108 * _3103;
                                float _3111 = _3108 * _3104;
                                float _3115 = 1.0 - (_3105 / (_2968 * _2968));
                                float _4200 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3120 = sqrt(_3105) * _2983.w;
                                float _3122 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                                float _3123 = _3122 * _3122;
                                float _3126 = ((1.0 - _3123) * dot(vec3(_3109, _3110, _3111), vec3(_443, _446, _449))) + _3123;
                                float _3129 = _3120 * _3120;
                                float _3133 = (fma(_2289, _3011.z, fma(_2288, _3011.y, _3011.x * _2287)) + _3011.w) / _3074;
                                float _3134 = (fma(_2289, _3027.z, fma(_2288, _3027.y, _3027.x * _2287)) + _3027.w) / _3074;
                                float _3138 = 1.0 - dot(vec2(_3133, _3134), vec2(_3133, _3134));
                                float _4216 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3140 = _3139 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3116) / ((_3129 * 0.699999988079071044921875) + 1.0));
                                float _3152 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3153 = 1.0 - _564;
                                float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                                float _3161 = _3160 * _3160;
                                float _3162 = _3161 * _3161;
                                float _3163 = _3109 - _2579;
                                float _3164 = _3110 - _2580;
                                float _3165 = _3111 - _2581;
                                float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                                float _3173 = dot(vec3(_443, _446, _449), vec3((-0.0) - _2579, (-0.0) - _2580, (-0.0) - _2581));
                                float _4227 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3177 = dot(vec3(_443, _446, _449), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                                float _4238 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                                float _3185 = _3122 * _3161;
                                float _3186 = _3185 * _3185;
                                float _3192 = ((1.0 - _3186) * dot(vec3(_443, _446, _449), vec3(_3109, _3110, _3111))) + _3186;
                                float _4249 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3194 = 1.0 - _3161;
                                float _3204 = (0.5 / (((_3193 * ((_3176 * _3194) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3193 * _3194) + _3161) * _3176))) * _3193;
                                float _4260 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3214 = (_3139 * _3116) * (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_3184 * _3184) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3140 * _2983.z;
                                frontier_phi_85_pred_1 = _3140 * _2983.y;
                                frontier_phi_85_pred_2 = _3140 * _2983.x;
                                frontier_phi_85_pred_3 = _3214 * _2995.z;
                                frontier_phi_85_pred_4 = _3214 * _2995.y;
                                frontier_phi_85_pred_5 = _3214 * _2995.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3223 = frontier_phi_85_pred;
                            _3222 = frontier_phi_85_pred_1;
                            _3221 = frontier_phi_85_pred_2;
                            _3220 = frontier_phi_85_pred_3;
                            _3219 = frontier_phi_85_pred_4;
                            _3218 = frontier_phi_85_pred_5;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            if (_2942 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2942;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2927;
                        frontier_phi_79_pred_1 = _2926;
                        frontier_phi_79_pred_2 = _2925;
                        frontier_phi_79_pred_3 = _2924;
                        frontier_phi_79_pred_4 = _2923;
                        frontier_phi_79_pred_5 = _2922;
                    }
                    _2564 = frontier_phi_79_pred;
                    _2562 = frontier_phi_79_pred_1;
                    _2560 = frontier_phi_79_pred_2;
                    _2558 = frontier_phi_79_pred_3;
                    _2556 = frontier_phi_79_pred_4;
                    _2554 = frontier_phi_79_pred_5;
                    uint _2720 = _2719 + 1u;
                    if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2713 = _2554;
                        _2714 = _2556;
                        _2715 = _2558;
                        _2716 = _2560;
                        _2717 = _2562;
                        _2718 = _2564;
                        _2719 = _2720;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2560;
                frontier_phi_60_61_ladder_1 = _2564;
                frontier_phi_60_61_ladder_2 = _2562;
                frontier_phi_60_61_ladder_3 = _2558;
                frontier_phi_60_61_ladder_4 = _2556;
                frontier_phi_60_61_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_60_61_ladder = _2439;
                frontier_phi_60_61_ladder_1 = _2443;
                frontier_phi_60_61_ladder_2 = _2441;
                frontier_phi_60_61_ladder_3 = _2437;
                frontier_phi_60_61_ladder_4 = _2435;
                frontier_phi_60_61_ladder_5 = _2433;
            }
            _2553 = frontier_phi_60_61_ladder_5;
            _2555 = frontier_phi_60_61_ladder_4;
            _2557 = frontier_phi_60_61_ladder_3;
            _2559 = frontier_phi_60_61_ladder;
            _2561 = frontier_phi_60_61_ladder_2;
            _2563 = frontier_phi_60_61_ladder_1;
        }
        float _2568 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2345 = (_2568 * _2559) + _1779;
        _2347 = (_2568 * _2561) + _1781;
        _2349 = (_2568 * _2563) + _1783;
        _2351 = ((_2553 * _533) * _2568) + _2127;
        _2353 = ((_2555 * _535) * _2568) + _2129;
        _2355 = ((_2557 * _536) * _2568) + _2131;
    }
    else
    {
        _2345 = _1779;
        _2347 = _1781;
        _2349 = _1783;
        _2351 = _2127;
        _2353 = _2129;
        _2355 = _2131;
    }
    float _4276 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4287 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4298 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _2372 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2345 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _548))) + ((_2351 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    float _2373 = ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2347 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _548))) + ((_2353 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    float _2374 = ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2349 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _548))) + ((_2355 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    uint _2375 = _475 + 6u;
    float _2383 = _418 / cbSceneParam._m0[86u].x;
    float _2384 = _419 / cbSceneParam._m0[86u].y;
    vec4 _2398 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2400 = _2398.x;
    float _2401 = _2398.y;
    float _2402 = _2398.z;
    float _2403 = _2398.w;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2458 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2459 = _2458 / _339;
        float _2470 = _2459 * _390;
        float _2471 = _391 * _2459;
        float _2472 = (-0.0) - _2471;
        float _2473 = _2459 * _392;
        float _2475 = (cbSceneParam._m0[77u].w * _2472) / _2458;
        float _2476 = _2475 + cbSceneParam._m0[79u].w;
        float _2477 = cbSceneParam._m0[79u].w - _2471;
        float _2483 = sqrt(((_2470 * _2470) + (_2471 * _2471)) + (_2473 * _2473));
        float _2486 = (1.0 - (cbSceneParam._m0[77u].w / _2458)) * _2483;
        float _2491 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2493 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2472 - _2475) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2476 > 0.0) ? exp2(_2491 * _2476) : (2.0 - exp2(_2493 * _2476))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2486;
        }
        else
        {
            float _2614 = 1.0 / cbSceneParam._m0[80u].x;
            float _2615 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : max(_2476, _2477));
            float _2616 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : min(_2476, _2477));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            _2670 = ((abs(_2483 / _2472) * cbSceneParam._m0[80u].y) * ((((_2625 - _2626) * 2.0) - ((exp2(_2491 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)))) - exp2(_2491 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))))) * _2614)) - ((exp2(_2493 * _2625) - exp2(_2493 * _2626)) * _2614))) + (_2486 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2403);
        _2495 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2400;
        _2497 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2401;
        _2499 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2402;
        _2501 = _2681 * _2403;
    }
    else
    {
        _2495 = _2400;
        _2497 = _2401;
        _2499 = _2402;
        _2501 = _2403;
    }
    bool _2708;
    vec4 _2511;
    vec4 _2533;
    float _2535;
    float _2539;
    float _2540;
    float _2541;
    float _2542;
    bool _2552;
    for (;;)
    {
        _2511 = cbMatDynParam._m0[0u];
        float _2513 = roundEven(_2511.y);
        bool _2514 = _2513 == 3.0;
        float _2515 = log2(_2501);
        float _2522 = exp2(_2515 * cbSceneParam._m0[78u].x) * _2372;
        float _2523 = exp2(_2515 * cbSceneParam._m0[78u].y) * _2373;
        float _2524 = exp2(_2515 * cbSceneParam._m0[78u].z) * _2374;
        float _2531 = _406 + (-0.5);
        _2533 = cbMtdParam._m0[1u];
        _2535 = _2533.y * _2531;
        float _2538 = (_2513 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2539 = _2538 * (_2514 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2495)));
        _2540 = _2538 * (_2514 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2497)));
        _2541 = _2538 * (_2514 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2499)));
        _2542 = _2531 * 0.999000012874603271484375;
        _2552 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2552)
        {
            if ((cbInstanceData._m0[_475 + 7u].x + _2542) < 0.5)
            {
                _2708 = true;
                break;
            }
        }
        uint _2649 = _477 + uint(_2511.w);
        if ((cbInstanceData._m0[_2649].w < 1.0) && ((cbInstanceData._m0[_2649].w + _2542) < 0.5))
        {
            _2708 = true;
            break;
        }
        if ((_2535 + 1.0) < _2533.x)
        {
            _2708 = true;
            break;
        }
        _2708 = false;
        break;
    }
    float _2913;
    if (_2708)
    {
        discard_state = true;
        _2913 = 0.0;
    }
    else
    {
        _2913 = cbInstanceData._m0[_2375].w;
    }
    SV_Target.x = _2539;
    SV_Target.y = _2540;
    SV_Target.z = _2541;
    SV_Target.w = _2913;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2375].w;
    discard_exit();
}


