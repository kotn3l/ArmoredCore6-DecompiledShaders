#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _888;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3225 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))));
    float _282 = fma(_279, _216, fma(_272, _208 * TANGENT.x, (_194 * _186) * _270));
    float _285 = fma(_279, _217, fma(_272, _208 * TANGENT.y, (_194 * _187) * _270));
    float _288 = fma(_279, _218, fma(_272, _208 * TANGENT.z, (_194 * _188) * _270));
    float _292 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    float _293 = _292 * _282;
    float _294 = _292 * _285;
    float _295 = _292 * _288;
    float _3236 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _296 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3258 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3269 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3280 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _300 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _316 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _357 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _367 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _357);
    float _368 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _357);
    float _369 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _357);
    float _373 = inversesqrt(dot(vec3(_367, _368, _369), vec3(_367, _368, _369)));
    float _374 = _367 * _373;
    float _375 = _368 * _373;
    float _376 = _369 * _373;
    float _382 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _383 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _385 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _387 = _385.w;
    float _408 = fma(_295, cbSceneParam._m0[5u].z, fma(_294, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _293));
    float _411 = fma(_295, cbSceneParam._m0[6u].z, fma(_294, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _293));
    float _414 = fma(_295, cbSceneParam._m0[7u].z, fma(_294, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _293));
    vec4 _416 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _427 = (((_416.y - _296) + (_416.w * _296)) * cbMtdParam._m0[3u].x) + _296;
    uint _440 = uint(roundEven(NORMAL.w)) * 13u;
    uint _443 = (_440 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3291 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    vec4 _455 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _460 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _471 = (((_460.x - _300) + (_460.w * _300)) * cbMtdParam._m0[3u].x) + _300;
    float _484 = (cbMtdParam._m0[3u].x * (((_452 * _387) - _452) + _455.x)) + _452;
    float _485 = (cbMtdParam._m0[3u].x * (((_453 * _387) - _453) + _455.y)) + _453;
    float _486 = (cbMtdParam._m0[3u].x * (((_454 * _387) - _454) + _455.z)) + _454;
    float _487 = 1.0 - _471;
    float _488 = _487 * _484;
    float _489 = _487 * _485;
    float _490 = _487 * _486;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _471;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _471;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _471;
    float _498 = _495 + 0.039999999105930328369140625;
    float _500 = _496 + 0.039999999105930328369140625;
    float _501 = _497 + 0.039999999105930328369140625;
    vec4 _510 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _382, cbSceneParam._m0[86u].y * _383));
    float _513 = _510.x * TEXCOORD_4;
    float _514 = dot(vec3(_293, _294, _295), vec3(_374, _375, _376));
    float _517 = _514 * 2.0;
    float _521 = (_517 * _293) - _374;
    float _522 = (_517 * _294) - _375;
    float _523 = (_517 * _295) - _376;
    float _527 = abs(dot(vec3(_374, _375, _376), vec3(_293, _294, _295)));
    float _3324 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _529 = sqrt(_427);
    float _542 = exp2((_529 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_529 * 3.0));
    float _548 = (1.0 - _542) * ((_529 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _549 = _542 * _529;
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _887;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _612 = fma(_585, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _577));
        float _616 = fma(_585, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _577));
        float _620 = fma(_585, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _577));
        float _645 = _577 + _293;
        float _646 = _581 + _294;
        float _647 = _585 + _295;
        float _657 = fma(_647, cbModelParam._m0[26u].z, fma(_646, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645)) - _612;
        float _658 = fma(_647, cbModelParam._m0[27u].z, fma(_646, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645)) - _616;
        float _659 = fma(_647, cbModelParam._m0[28u].z, fma(_646, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645)) - _620;
        float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
        float _676 = ((_663 * _657) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_612 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_663 * _658) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_616 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_663 * _659) / cbModelParam._m0[34u].z) + ((((((_620 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_676, _677, _678), 0.0);
        float _715 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_681.x + (-0.5));
        float _717 = _715 * (_681.y + (-0.5));
        float _718 = _715 * (_681.z + (-0.5));
        float _725 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_688.x + (-0.5));
        float _727 = _725 * (_688.y + (-0.5));
        float _728 = _725 * (_688.z + (-0.5));
        float _735 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_695.x + (-0.5));
        float _737 = _735 * (_695.y + (-0.5));
        float _738 = _735 * (_695.z + (-0.5));
        float _745 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_702.x + (-0.5));
        float _747 = _745 * (_702.y + (-0.5));
        float _748 = _745 * (_702.z + (-0.5));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = _716 * 0.5;
        float _753 = _726 * 0.5;
        float _754 = _736 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _769 = (dot(vec3(_293, _294, _295), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _779 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3372 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_781 + 1.0))) + _786) * _749;
        float _796 = _717 * 0.5;
        float _797 = _727 * 0.5;
        float _798 = _737 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_293, _294, _295), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3405 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_823 + 1.0))) + _828) * _750;
        float _838 = _718 * 0.5;
        float _839 = _728 * 0.5;
        float _840 = _738 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_293, _294, _295), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3438 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_865 + 1.0))) + _870) * _751;
        _887 = _718;
        _889 = _717;
        _890 = _716;
        _891 = _728;
        _892 = _727;
        _893 = _726;
        _894 = _738;
        _895 = _737;
        _896 = _736;
        _897 = _751;
        _898 = _750;
        _899 = _749;
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
    }
    else
    {
        _887 = _888;
        _889 = _888;
        _890 = _888;
        _891 = _888;
        _892 = _888;
        _893 = _888;
        _894 = _888;
        _895 = _888;
        _896 = _888;
        _897 = _888;
        _898 = _888;
        _899 = _888;
        _900 = 0.0;
        _901 = 0.0;
        _902 = 0.0;
    }
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _928 = fma(_585, cbModelParam._m0[30u].z, fma(_581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _577));
        float _932 = fma(_585, cbModelParam._m0[31u].z, fma(_581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _577));
        float _936 = fma(_585, cbModelParam._m0[32u].z, fma(_581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _577));
        float _959 = _577 + _293;
        float _960 = _581 + _294;
        float _961 = _585 + _295;
        float _971 = fma(_961, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959)) - _928;
        float _972 = fma(_961, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959)) - _932;
        float _973 = fma(_961, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959)) - _936;
        float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
        float _990 = ((_977 * _971) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_928 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_977 * _972) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_932 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_977 * _973) / cbModelParam._m0[35u].z) + ((((((_936 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        float _1027 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_994.x + (-0.5));
        float _1029 = _1027 * (_994.y + (-0.5));
        float _1030 = _1027 * (_994.z + (-0.5));
        float _1037 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1001.x + (-0.5));
        float _1039 = _1037 * (_1001.y + (-0.5));
        float _1040 = _1037 * (_1001.z + (-0.5));
        float _1047 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1008.x + (-0.5));
        float _1049 = _1047 * (_1008.y + (-0.5));
        float _1050 = _1047 * (_1008.z + (-0.5));
        float _1057 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1015.x + (-0.5));
        float _1059 = _1057 * (_1015.y + (-0.5));
        float _1060 = _1057 * (_1015.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_293, _294, _295), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3501 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1091 + 1.0))) + _1096) * _1061;
        float _1106 = _1029 * 0.5;
        float _1107 = _1039 * 0.5;
        float _1108 = _1049 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_293, _294, _295), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3534 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1133 + 1.0))) + _1138) * _1062;
        float _1148 = _1030 * 0.5;
        float _1149 = _1040 * 0.5;
        float _1150 = _1050 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_293, _294, _295), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3567 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1175 + 1.0))) + _1180) * _1063;
        _1197 = _1030;
        _1198 = _1029;
        _1199 = _1028;
        _1200 = _1040;
        _1201 = _1039;
        _1202 = _1038;
        _1203 = _1050;
        _1204 = _1049;
        _1205 = _1048;
        _1206 = _1063;
        _1207 = _1062;
        _1208 = _1061;
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _888;
        _1198 = _888;
        _1199 = _888;
        _1200 = _888;
        _1201 = _888;
        _1202 = _888;
        _1203 = _888;
        _1204 = _888;
        _1205 = _888;
        _1206 = _888;
        _1207 = _888;
        _1208 = _888;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _900)) + _900;
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _901)) + _901;
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _902)) + _902;
    float _1244 = fma(_1223, cbSceneParam._m0[89u].z, fma(_1222, cbSceneParam._m0[89u].y, _1221 * cbSceneParam._m0[89u].x));
    float _1247 = fma(_1223, cbSceneParam._m0[90u].z, fma(_1222, cbSceneParam._m0[90u].y, _1221 * cbSceneParam._m0[90u].x));
    float _1250 = fma(_1223, cbSceneParam._m0[91u].z, fma(_1222, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1221));
    float _1265 = _521 * 0.5;
    float _1266 = _522 * 0.5;
    float _1267 = _523 * 0.5;
    float _1268 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1271 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1274 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1308;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1281 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_887, _891, _894, _897));
        float _1285 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_889, _892, _895, _898));
        float _1289 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_890, _893, _896, _899));
        float _1296 = dot(vec4(cbModelParam._m0[39u]), vec4(_1265, _1266, _1267, 1.0));
        _1308 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1308 = 1.0;
    }
    float _1319;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1310 = dot(vec4(cbModelParam._m0[40u]), vec4(_1265, _1266, _1267, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1323 = (_1319 * cbModelParam._m0[1u].x) + (_1308 * (1.0 - cbModelParam._m0[1u].x));
    float _1333 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _427);
    float _1334 = isnan(_1333) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1333 : min(cbModelParam._m0[25u].z, _1333));
    float _1416;
    float _1418;
    float _1420;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1383 = fma(_585, cbModelParam._m0[13u].z, fma(_581, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _577)) + cbModelParam._m0[13u].w;
        float _1387 = fma(_585, cbModelParam._m0[14u].z, fma(_581, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _577)) + cbModelParam._m0[14u].w;
        float _1391 = fma(_585, cbModelParam._m0[15u].z, fma(_581, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _577)) + cbModelParam._m0[15u].w;
        float _1394 = fma(_523, cbModelParam._m0[13u].z, fma(_522, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521));
        float _1397 = fma(_523, cbModelParam._m0[14u].z, fma(_522, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521));
        float _1400 = fma(_523, cbModelParam._m0[15u].z, fma(_522, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521));
        float _1428;
        if (_1394 > 0.0)
        {
            _1428 = abs((1.0 - _1383) / _1394);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1383 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1428 = frontier_phi_16_14_ladder;
        }
        float _1636;
        if (_1397 > 0.0)
        {
            _1636 = abs((1.0 - _1387) / _1397);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1387 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1636 = frontier_phi_25_21_ladder;
        }
        float _1890;
        if (_1400 > 0.0)
        {
            _1890 = abs((1.0 - _1391) / _1400);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1391 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1890 = frontier_phi_37_32_ladder;
        }
        float _1892 = isnan(_1636) ? _1428 : (isnan(_1428) ? _1636 : min(_1428, _1636));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1394) + _1383;
        float _1898 = (_1893 * _1397) + _1387;
        float _1899 = (_1893 * _1400) + _1391;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1902 = (-1.0) - _1900;
        float _1904 = _1900 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1899 > _1904) || ((_1899 < _1902) || ((_1898 > _1904) || ((_1898 < _1902) || ((_1897 < _1902) || (_1897 > _1904))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1899, cbModelParam._m0[9u].z, fma(_1898, cbModelParam._m0[9u].y, _1897 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1899, cbModelParam._m0[10u].z, fma(_1898, cbModelParam._m0[10u].y, _1897 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1899, cbModelParam._m0[11u].z, fma(_1898, cbModelParam._m0[11u].y, _1897 * cbModelParam._m0[11u].x))), _1334);
            frontier_phi_15_37_ladder = _2027.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2027.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2027.x * cbModelParam._m0[1u].y;
        }
        _1416 = frontier_phi_15_37_ladder_2;
        _1418 = frontier_phi_15_37_ladder_1;
        _1420 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_521, _522, _523), _1334);
        _1416 = _1404.x * cbModelParam._m0[1u].y;
        _1418 = _1404.y * cbModelParam._m0[1u].y;
        _1420 = _1404.z * cbModelParam._m0[1u].y;
    }
    float _1424 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _427);
    float _1425 = isnan(_1424) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1424 : min(cbModelParam._m0[25u].w, _1424));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1482 = fma(_585, cbModelParam._m0[21u].z, fma(_581, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _577)) + cbModelParam._m0[21u].w;
        float _1486 = fma(_585, cbModelParam._m0[22u].z, fma(_581, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _577)) + cbModelParam._m0[22u].w;
        float _1490 = fma(_585, cbModelParam._m0[23u].z, fma(_581, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _577)) + cbModelParam._m0[23u].w;
        float _1493 = fma(_523, cbModelParam._m0[21u].z, fma(_522, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521));
        float _1496 = fma(_523, cbModelParam._m0[22u].z, fma(_522, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521));
        float _1499 = fma(_523, cbModelParam._m0[23u].z, fma(_522, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521));
        float _1641;
        if (_1493 > 0.0)
        {
            _1641 = abs((1.0 - _1482) / _1493);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1482 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1641 = frontier_phi_27_23_ladder;
        }
        float _1917;
        if (_1496 > 0.0)
        {
            _1917 = abs((1.0 - _1486) / _1496);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1486 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1917 = frontier_phi_39_34_ladder;
        }
        float _2130;
        if (_1499 > 0.0)
        {
            _2130 = abs((1.0 - _1490) / _1499);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1490 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2130 = frontier_phi_48_45_ladder;
        }
        float _2132 = isnan(_1917) ? _1641 : (isnan(_1641) ? _1917 : min(_1641, _1917));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1493) + _1482;
        float _2138 = (_2133 * _1496) + _1486;
        float _2139 = (_2133 * _1499) + _1490;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2140;
        float _2143 = _2140 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2139 > _2143) || ((_2139 < _2141) || ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 < _2141) || (_2137 > _2143))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2139, cbModelParam._m0[17u].z, fma(_2138, cbModelParam._m0[17u].y, _2137 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2139, cbModelParam._m0[18u].z, fma(_2138, cbModelParam._m0[18u].y, _2137 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2139, cbModelParam._m0[19u].z, fma(_2138, cbModelParam._m0[19u].y, _2137 * cbModelParam._m0[19u].x))), _1425);
            frontier_phi_24_48_ladder = _2337.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2337.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2337.x * cbModelParam._m0[1u].z;
        }
        _1518 = frontier_phi_24_48_ladder_2;
        _1520 = frontier_phi_24_48_ladder_1;
        _1522 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_521, _522, _523), _1425);
        _1518 = _1502.x * cbModelParam._m0[1u].z;
        _1520 = _1502.y * cbModelParam._m0[1u].z;
        _1522 = _1502.z * cbModelParam._m0[1u].z;
    }
    float _1535 = (((_548 * _498) + _549) * _513) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1537 = (((_548 * _500) + _549) * _513) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1539 = (((_548 * _501) + _549) * _513) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1542 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, _1535 * cbSceneParam._m0[91u].x));
    uvec4 _1558 = floatBitsToUint(cbInstanceData._m0[_440 + 5u]);
    uint _1560 = _1558.x * 14u;
    uint _1561 = _1560 + 13u;
    float _1568 = _513 + (-1.0);
    float _1573 = (cbLight._m0[_1561].x * _1568) + 1.0;
    float _1574 = (cbLight._m0[_1561].y * _1568) + 1.0;
    float _1575 = (cbLight._m0[_1561].z * _1568) + 1.0;
    float _1576 = (cbLight._m0[_1561].w * _1568) + 1.0;
    uint _1577 = _1560 + 5u;
    float _1583 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
    uint _1587 = _1560 + 4u;
    float _1594 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
    uint _1598 = _1560 | 1u;
    float _1609 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_293, _294, _295));
    float _1612 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_293, _294, _295));
    float _3703 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _3714 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1617 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1619 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1626 = ((cbLight._m0[_1577].x * _1583) * _1619) + ((cbLight._m0[_1587].x * _1594) * _1617);
    float _1627 = ((_1583 * cbLight._m0[_1577].y) * _1619) + ((_1594 * cbLight._m0[_1587].y) * _1617);
    float _1628 = ((_1583 * cbLight._m0[_1577].z) * _1619) + ((_1594 * cbLight._m0[_1587].z) * _1617);
    uvec4 _1633 = floatBitsToUint(cbLight._m0[_1560 + 12u]);
    bool _1635 = _1633.x == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1635)
    {
        _1646 = _1626;
        _1648 = _1627;
        _1650 = _1628;
    }
    else
    {
        uint _1654 = _1560 + 6u;
        float _1670 = (dot(vec3(cbLight._m0[_1560 + 2u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1671 = _1670 * _1670;
        float _3725 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1673 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _1646 = (((cbLight._m0[_1654].x * 0.3183098733425140380859375) * _1672) * _1673) + _1626;
        _1648 = (((cbLight._m0[_1654].y * 0.3183098733425140380859375) * _1672) * _1673) + _1627;
        _1650 = (((cbLight._m0[_1654].z * 0.3183098733425140380859375) * _1672) * _1673) + _1628;
    }
    bool _1653 = _1633.y == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1653)
    {
        _1691 = _1646;
        _1693 = _1648;
        _1695 = _1650;
    }
    else
    {
        uint _1861 = _1560 + 7u;
        float _1877 = (dot(vec3(cbLight._m0[_1560 + 3u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3741 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1880 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _1691 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1646;
        _1693 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1648;
        _1695 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1650;
    }
    uint _1698 = _1560 + 8u;
    float _1711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1560].w)) * _427) * 0.949999988079071044921875);
    float _1712 = _1711 * _1711;
    float _1713 = cbLight._m0[_1560].x + _374;
    float _1714 = cbLight._m0[_1560].y + _375;
    float _1715 = cbLight._m0[_1560].z + _376;
    float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
    float _1720 = _1719 * _1713;
    float _1721 = _1719 * _1714;
    float _1722 = _1719 * _1715;
    float _1723 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1560].xyz));
    float _3757 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _1727 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1728 = dot(vec3(_293, _294, _295), vec3(_1720, _1721, _1722));
    float _3779 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1732 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_1720, _1721, _1722));
    float _3790 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1736 = _1712 * _1712;
    float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
    float _1748 = exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0);
    float _1749 = 0.959999978542327880859375 - _495;
    float _1751 = 0.959999978542327880859375 - _496;
    float _1752 = 0.959999978542327880859375 - _497;
    float _1759 = 1.0 - _1712;
    float _1770 = (0.5 / (((_1727 * ((_1726 * _1759) + _1712)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1759) + _1712) * _1726))) * _1726;
    float _3801 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1772 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
    uint _1783 = _1560 + 9u;
    float _1794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _427) * 0.949999988079071044921875);
    float _1795 = _1794 * _1794;
    float _1796 = cbLight._m0[_1598].x + _374;
    float _1797 = cbLight._m0[_1598].y + _375;
    float _1798 = cbLight._m0[_1598].z + _376;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1803 = _1802 * _1796;
    float _1804 = _1802 * _1797;
    float _1805 = _1802 * _1798;
    float _1806 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1598].xyz));
    float _3812 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1810 = dot(vec3(_293, _294, _295), vec3(_1803, _1804, _1805));
    float _3823 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1803, _1804, _1805));
    float _3834 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1795 * _1795;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0);
    float _1836 = 1.0 - _1795;
    float _1846 = (0.5 / (((_1727 * ((_1809 * _1836) + _1795)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1836) + _1795) * _1809))) * _1809;
    float _3845 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    float _1858 = (((((_1829 * _1749) + _498) * cbLight._m0[_1783].x) * _1848) * _1583) + (((((_1748 * _1749) + _498) * cbLight._m0[_1698].x) * _1772) * _1594);
    float _1859 = (((((_1829 * _1751) + _500) * cbLight._m0[_1783].y) * _1848) * _1583) + (((((_1748 * _1751) + _500) * cbLight._m0[_1698].y) * _1772) * _1594);
    float _1860 = (((((_1829 * _1752) + _501) * cbLight._m0[_1783].z) * _1848) * _1583) + (((((_1748 * _1752) + _501) * cbLight._m0[_1698].z) * _1772) * _1594);
    float _1922;
    float _1924;
    float _1926;
    if (_1635)
    {
        _1922 = _1858;
        _1924 = _1859;
        _1926 = _1860;
    }
    else
    {
        uint _1928 = _1560 + 2u;
        uint _1932 = _1560 + 10u;
        float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _427) * 0.949999988079071044921875);
        float _1947 = _1946 * _1946;
        float _1948 = cbLight._m0[_1928].x + _374;
        float _1949 = cbLight._m0[_1928].y + _375;
        float _1950 = cbLight._m0[_1928].z + _376;
        float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
        float _1955 = _1954 * _1948;
        float _1956 = _1954 * _1949;
        float _1957 = _1954 * _1950;
        float _1958 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1928].xyz));
        float _3856 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1962 = dot(vec3(_293, _294, _295), vec3(_1955, _1956, _1957));
        float _3867 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1965 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1966 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_1955, _1956, _1957));
        float _3878 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1970 = _1947 * _1947;
        float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
        float _1981 = exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0);
        float _1988 = 1.0 - _1947;
        float _1998 = (0.5 / (((_1727 * ((_1961 * _1988) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1988) + _1947) * _1961))) * _1961;
        float _3889 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2000 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
        float _2001 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _1922 = (((((_1981 * _1749) + _498) * cbLight._m0[_1932].x) * _2000) * _2001) + _1858;
        _1924 = (((((_1981 * _1751) + _500) * cbLight._m0[_1932].y) * _2000) * _2001) + _1859;
        _1926 = (((((_1981 * _1752) + _501) * cbLight._m0[_1932].z) * _2000) * _2001) + _1860;
    }
    float _2036;
    float _2038;
    float _2040;
    if (_1653)
    {
        _2036 = _1922;
        _2038 = _1924;
        _2040 = _1926;
    }
    else
    {
        uint _2047 = _1560 + 3u;
        uint _2051 = _1560 + 11u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _427) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _374;
        float _2068 = cbLight._m0[_2047].y + _375;
        float _2069 = cbLight._m0[_2047].z + _376;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_2047].xyz));
        float _3905 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _2081 = dot(vec3(_293, _294, _295), vec3(_2074, _2075, _2076));
        float _3916 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _3927 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2100 = exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0);
        float _2107 = 1.0 - _2066;
        float _2117 = (0.5 / (((_1727 * ((_2080 * _2107) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _2107) + _2066) * _2080))) * _2080;
        float _3938 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2120 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _2036 = (((((_2100 * _1749) + _498) * cbLight._m0[_2051].x) * _2119) * _2120) + _1922;
        _2038 = (((((_2100 * _1751) + _500) * cbLight._m0[_2051].y) * _2119) * _2120) + _1924;
        _2040 = (((((_2100 * _1752) + _501) * cbLight._m0[_2051].z) * _2119) * _2120) + _1926;
    }
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_1558.y == 0u)
    {
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2195;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2195;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2195;
        uvec4 _2210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2211 = _2210.x;
        uint _2222 = uint((float(_2210.y) * floor(float(uint(cbSceneParam._m0[85u].y * _383) / _2211))) + floor(float(uint(cbSceneParam._m0[85u].x * _382) / _2211)));
        float _2232 = (log2(_2198 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2233 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        uint _2236 = uint(isnan(14.0) ? _2233 : (isnan(_2233) ? 14.0 : min(_2233, 14.0)));
        uvec4 _2241 = texelFetch(g_lightClusterGridBuffer, int(((_2236 << 2u) + (_2222 << 6u)) >> 2u));
        uint _2242 = _2241.x;
        uint _2243 = _2210.z;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        if (((((1u << ((_2243 >> 4u) & 15u)) + 4294967295u) & _2242) == 0u) || ((_2243 & 240u) == 0u))
        {
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
        }
        else
        {
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            uint _2492 = 0u;
            uint _2501;
            bool _2502;
            for (;;)
            {
                _2501 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2492 << 2u)) >> 2u)).x;
                _2502 = _2501 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2502)
                {
                    frontier_phi_63_pred = _2491;
                    frontier_phi_63_pred_1 = _2490;
                    frontier_phi_63_pred_2 = _2489;
                    frontier_phi_63_pred_3 = _2488;
                    frontier_phi_63_pred_4 = _2487;
                    frontier_phi_63_pred_5 = _2486;
                }
                else
                {
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    uint _2616;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2501;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    for (;;)
                    {
                        uint _2620 = uint(findLSB(_2616)) + (_2492 << 5u);
                        uint _2617 = (_2616 + 4294967295u) & _2616;
                        uint _2622 = _2620 * 48u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 3u)).x));
                        uint _2642 = (_2620 * 48u) + 4u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2661 = (_2620 * 48u) + 8u;
                        vec3 _2672 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x));
                        float _2676 = _2636.x - _2196;
                        float _2677 = _2636.y - _2197;
                        float _2678 = _2636.z - _2198;
                        float _2679 = dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678));
                        float _2682 = inversesqrt(_2679);
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2686 = dot(vec3(_408, _411, _414), vec3(_2683, _2684, _2685));
                        float _2691 = 1.0 - (_2679 * _2636.w);
                        float _3964 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2692 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2693 = sqrt(_2679) * _2655.w;
                        float _2696 = 1.39999997615814208984375 / (_2693 + 1.39999997615814208984375);
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2686) + _2697;
                        float _2703 = _2693 * _2693;
                        float _2707 = ((isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))) * _2692) / ((_2703 * 0.699999988079071044921875) + 1.0);
                        float _2711 = (-0.0) - _2196;
                        float _2712 = (-0.0) - _2197;
                        float _2713 = (-0.0) - _2198;
                        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2728 = exp2(log2(1.0 / ((_2703 * 3.5) + 5.0)) * 0.25);
                        float _2729 = 1.0 - _529;
                        float _2736 = sqrt(1.0 - ((1.0 - (_2729 * _2729)) * (1.0 - (_2728 * _2728))));
                        float _2737 = _2736 * _2736;
                        float _2738 = _2737 * _2737;
                        float _2739 = _2718 + _2683;
                        float _2740 = _2719 + _2684;
                        float _2741 = _2720 + _2685;
                        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
                        float _2749 = dot(vec3(_408, _411, _414), vec3(_2718, _2719, _2720));
                        float _3980 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2752 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2753 = dot(vec3(_408, _411, _414), vec3(_2745 * _2739, _2745 * _2740, _2745 * _2741));
                        float _3991 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2756 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2760 = ((_2756 * _2756) * (_2738 + (-1.0))) + 1.0;
                        float _2761 = _2696 * _2737;
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2686) + _2762;
                        float _4002 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2767 = 1.0 - _2737;
                        float _2777 = (0.5 / (((_2766 * ((_2752 * _2767) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2766 * _2767) + _2737) * _2752))) * _2766;
                        float _4013 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2788 = (((_2738 * 3.1415927410125732421875) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) / ((_2760 * _2760) * ((_2703 * 2.1991131305694580078125) + 3.141590118408203125))) * _2692;
                        _2545 = (_2707 * _2655.x) + _2613;
                        _2546 = (_2707 * _2655.y) + _2614;
                        _2547 = (_2707 * _2655.z) + _2615;
                        _2542 = (_2788 * _2672.x) + _2610;
                        _2543 = (_2788 * _2672.y) + _2611;
                        _2544 = (_2788 * _2672.z) + _2612;
                        if (_2617 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2617;
                        }
                    }
                    frontier_phi_63_pred = _2547;
                    frontier_phi_63_pred_1 = _2546;
                    frontier_phi_63_pred_2 = _2545;
                    frontier_phi_63_pred_3 = _2544;
                    frontier_phi_63_pred_4 = _2543;
                    frontier_phi_63_pred_5 = _2542;
                }
                _2353 = frontier_phi_63_pred;
                _2351 = frontier_phi_63_pred_1;
                _2349 = frontier_phi_63_pred_2;
                _2347 = frontier_phi_63_pred_3;
                _2345 = frontier_phi_63_pred_4;
                _2343 = frontier_phi_63_pred_5;
                uint _2493 = _2492 + 1u;
                if (_2493 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2486 = _2343;
                    _2487 = _2345;
                    _2488 = _2347;
                    _2489 = _2349;
                    _2490 = _2351;
                    _2491 = _2353;
                    _2492 = _2493;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
        }
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.z;
        uint _2359 = (_2357 >> 8u) & 15u;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((4294967295u << _2359) & _2242) == 0u)
        {
            _2454 = _2342;
            _2456 = _2344;
            _2458 = _2346;
            _2460 = _2348;
            _2462 = _2350;
            _2464 = _2352;
        }
        else
        {
            float _2479 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
            float _2480 = _2479 * _2196;
            float _2481 = _2479 * _2197;
            float _2482 = _2479 * _2198;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2359 < ((_2357 >> 12u) & 15u))
            {
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2593 = _2342;
                float _2594 = _2344;
                float _2595 = _2346;
                float _2596 = _2348;
                float _2597 = _2350;
                float _2598 = _2352;
                uint _2599 = _2359;
                uint _2608;
                bool _2609;
                for (;;)
                {
                    _2608 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                    _2609 = _2608 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2609)
                    {
                        frontier_phi_69_pred = _2598;
                        frontier_phi_69_pred_1 = _2597;
                        frontier_phi_69_pred_2 = _2596;
                        frontier_phi_69_pred_3 = _2595;
                        frontier_phi_69_pred_4 = _2594;
                        frontier_phi_69_pred_5 = _2593;
                    }
                    else
                    {
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        uint _2812 = _2608;
                        uint _2813;
                        vec4 _2838;
                        float _2839;
                        vec4 _2854;
                        vec3 _2866;
                        vec4 _2882;
                        vec4 _2898;
                        float _2945;
                        bool _2946;
                        for (;;)
                        {
                            uint _2823 = ((_2599 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2812));
                            _2813 = (_2812 + 4294967295u) & _2812;
                            uint _2825 = _2823 * 40u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2839 = _2838.w;
                            uint _2841 = (_2823 * 40u) + 4u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2823 * 40u) + 8u;
                            _2866 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x));
                            uint _2869 = (_2823 * 40u) + 16u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2885 = (_2823 * 40u) + 20u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2823 * 40u) + 24u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2920 = (_2823 * 40u) + 28u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2945 = fma(_2198, _2933.z, fma(_2197, _2933.y, _2933.x * _2196)) + _2933.w;
                            _2946 = !((fma(_2198, _2914.z, fma(_2197, _2914.y, _2914.x * _2196)) + _2914.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2946)
                            {
                                float _2973 = _2838.x - _2196;
                                float _2974 = _2838.y - _2197;
                                float _2975 = _2838.z - _2198;
                                float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                                float _2979 = inversesqrt(_2976);
                                float _2980 = _2979 * _2973;
                                float _2981 = _2979 * _2974;
                                float _2982 = _2979 * _2975;
                                float _2986 = 1.0 - (_2976 / (_2839 * _2839));
                                float _4024 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _2991 = sqrt(_2976) * _2854.w;
                                float _2993 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                                float _2994 = _2993 * _2993;
                                float _2997 = ((1.0 - _2994) * dot(vec3(_2980, _2981, _2982), vec3(_408, _411, _414))) + _2994;
                                float _3000 = _2991 * _2991;
                                float _3004 = (fma(_2198, _2882.z, fma(_2197, _2882.y, _2882.x * _2196)) + _2882.w) / _2945;
                                float _3005 = (fma(_2198, _2898.z, fma(_2197, _2898.y, _2898.x * _2196)) + _2898.w) / _2945;
                                float _3009 = 1.0 - dot(vec2(_3004, _3005), vec2(_3004, _3005));
                                float _4040 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3011 = _3010 * (((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2987) / ((_3000 * 0.699999988079071044921875) + 1.0));
                                float _3023 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                                float _3024 = 1.0 - _529;
                                float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                                float _3032 = _3031 * _3031;
                                float _3033 = _3032 * _3032;
                                float _3034 = _2980 - _2480;
                                float _3035 = _2981 - _2481;
                                float _3036 = _2982 - _2482;
                                float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                                float _3044 = dot(vec3(_408, _411, _414), vec3((-0.0) - _2480, (-0.0) - _2481, (-0.0) - _2482));
                                float _4051 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3048 = dot(vec3(_408, _411, _414), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                                float _4062 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                                float _3056 = _2993 * _3032;
                                float _3057 = _3056 * _3056;
                                float _3063 = ((1.0 - _3057) * dot(vec3(_408, _411, _414), vec3(_2980, _2981, _2982))) + _3057;
                                float _4073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3065 = 1.0 - _3032;
                                float _3075 = (0.5 / (((_3064 * ((_3047 * _3065) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3032) * _3047))) * _3064;
                                float _4084 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3085 = (_3010 * _2987) * (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) / ((_3055 * _3055) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3011 * _2854.z;
                                frontier_phi_75_pred_1 = _3011 * _2854.y;
                                frontier_phi_75_pred_2 = _3011 * _2854.x;
                                frontier_phi_75_pred_3 = _3085 * _2866.z;
                                frontier_phi_75_pred_4 = _3085 * _2866.y;
                                frontier_phi_75_pred_5 = _3085 * _2866.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3094 = frontier_phi_75_pred;
                            _3093 = frontier_phi_75_pred_1;
                            _3092 = frontier_phi_75_pred_2;
                            _3091 = frontier_phi_75_pred_3;
                            _3090 = frontier_phi_75_pred_4;
                            _3089 = frontier_phi_75_pred_5;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            if (_2813 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2813;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2798;
                        frontier_phi_69_pred_1 = _2797;
                        frontier_phi_69_pred_2 = _2796;
                        frontier_phi_69_pred_3 = _2795;
                        frontier_phi_69_pred_4 = _2794;
                        frontier_phi_69_pred_5 = _2793;
                    }
                    _2465 = frontier_phi_69_pred;
                    _2463 = frontier_phi_69_pred_1;
                    _2461 = frontier_phi_69_pred_2;
                    _2459 = frontier_phi_69_pred_3;
                    _2457 = frontier_phi_69_pred_4;
                    _2455 = frontier_phi_69_pred_5;
                    uint _2600 = _2599 + 1u;
                    if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2593 = _2455;
                        _2594 = _2457;
                        _2595 = _2459;
                        _2596 = _2461;
                        _2597 = _2463;
                        _2598 = _2465;
                        _2599 = _2600;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2465;
                frontier_phi_57_58_ladder_1 = _2463;
                frontier_phi_57_58_ladder_2 = _2461;
                frontier_phi_57_58_ladder_3 = _2459;
                frontier_phi_57_58_ladder_4 = _2457;
                frontier_phi_57_58_ladder_5 = _2455;
            }
            else
            {
                frontier_phi_57_58_ladder = _2352;
                frontier_phi_57_58_ladder_1 = _2350;
                frontier_phi_57_58_ladder_2 = _2348;
                frontier_phi_57_58_ladder_3 = _2346;
                frontier_phi_57_58_ladder_4 = _2344;
                frontier_phi_57_58_ladder_5 = _2342;
            }
            _2454 = frontier_phi_57_58_ladder_5;
            _2456 = frontier_phi_57_58_ladder_4;
            _2458 = frontier_phi_57_58_ladder_3;
            _2460 = frontier_phi_57_58_ladder_2;
            _2462 = frontier_phi_57_58_ladder_1;
            _2464 = frontier_phi_57_58_ladder;
        }
        float _2469 = isnan(1.0) ? _513 : (isnan(_513) ? 1.0 : min(_513, 1.0));
        _2254 = (_2469 * _2460) + _1691;
        _2256 = (_2469 * _2462) + _1693;
        _2258 = (_2469 * _2464) + _1695;
        _2260 = ((_2454 * _498) * _2469) + _2036;
        _2262 = ((_2456 * _500) * _2469) + _2038;
        _2264 = ((_2458 * _501) * _2469) + _2040;
    }
    else
    {
        _2254 = _1691;
        _2256 = _1693;
        _2258 = _1695;
        _2260 = _2036;
        _2262 = _2038;
        _2264 = _2040;
    }
    float _4100 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4111 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4122 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    uint _2284 = _440 + 6u;
    float _2292 = _382 / cbSceneParam._m0[86u].x;
    float _2293 = _383 / cbSceneParam._m0[86u].y;
    vec4 _2307 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, (log2((isnan(cbSceneParam._m0[77u].w) ? _316 : (isnan(_316) ? cbSceneParam._m0[77u].w : min(_316, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2309 = _2307.x;
    float _2310 = _2307.y;
    float _2311 = _2307.z;
    float _2312 = _2307.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_316 > cbSceneParam._m0[78u].w)
    {
        float _2367 = isnan(_316) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _316 : min(cbSceneParam._m0[80u].w, _316));
        float _2368 = _2367 / _316;
        float _2379 = _2368 * _367;
        float _2380 = _368 * _2368;
        float _2381 = (-0.0) - _2380;
        float _2382 = _2368 * _369;
        float _2384 = (cbSceneParam._m0[77u].w * _2381) / _2367;
        float _2385 = _2384 + cbSceneParam._m0[79u].w;
        float _2386 = cbSceneParam._m0[79u].w - _2380;
        float _2392 = sqrt(((_2379 * _2379) + (_2380 * _2380)) + (_2382 * _2382));
        float _2395 = (1.0 - (cbSceneParam._m0[77u].w / _2367)) * _2392;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2555;
        if (abs((_2381 - _2384) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2555 = ((((_2385 > 0.0) ? exp2(_2400 * _2385) : (2.0 - exp2(_2402 * _2385))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2395;
        }
        else
        {
            float _2515 = 1.0 / cbSceneParam._m0[80u].x;
            float _2516 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : max(_2385, _2386));
            float _2517 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : min(_2385, _2386));
            float _2526 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : min(_2516, 0.0));
            float _2527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : min(_2517, 0.0));
            _2555 = ((abs(_2392 / _2381) * cbSceneParam._m0[80u].y) * ((((_2526 - _2527) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0))))) * _2515)) - ((exp2(_2402 * _2526) - exp2(_2402 * _2527)) * _2515))) + (_2395 * cbSceneParam._m0[80u].z);
        }
        vec4 _2557 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, 1.0), 0.0);
        float _2566 = exp2((_2555 * (-1.44269502162933349609375)) * (1.0 - _2557.w));
        float _2567 = log2(_2566);
        float _2583 = log2(_2312);
        _2404 = (exp2(_2583 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].x)) * _2557.x) / cbSceneParam._m0[78u].x)) + _2309;
        _2406 = (exp2(_2583 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].y)) * _2557.y) / cbSceneParam._m0[78u].y)) + _2310;
        _2408 = (exp2(_2583 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].z)) * _2557.z) / cbSceneParam._m0[78u].z)) + _2311;
        _2410 = _2566 * _2312;
    }
    else
    {
        _2404 = _2309;
        _2406 = _2310;
        _2408 = _2311;
        _2410 = _2312;
    }
    float _2422 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2423 = _2422 == 3.0;
    float _2424 = log2(_2410);
    float _2431 = exp2(_2424 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2254 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _513))) + ((_2260 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1323)) * cbPerFrame._m0[3u].x));
    float _2432 = exp2(_2424 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2256 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _513))) + ((_2262 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1323)) * cbPerFrame._m0[3u].x));
    float _2433 = exp2(_2424 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2258 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _513))) + ((_2264 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1323)) * cbPerFrame._m0[3u].x));
    float _2442 = (_2422 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2442 * (_2423 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.y = _2442 * (_2423 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.z = _2442 * (_2423 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.w = cbInstanceData._m0[_2284].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2284].w;
}


