#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _251 = log2(0.0);
    bool _254 = exp2(_251 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _255;
    float _257;
    float _259;
    if (_254)
    {
        _255 = cbMtdParam._m0[19u].x;
        _257 = cbMtdParam._m0[19u].y;
        _259 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _255 = cbMtdParam._m0[18u].x;
        _257 = cbMtdParam._m0[18u].y;
        _259 = cbMtdParam._m0[18u].z;
    }
    float _265;
    if (_254)
    {
        _265 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _265 = cbMtdParam._m0[20u].z;
    }
    float _271;
    float _273;
    if (_254)
    {
        _271 = cbMtdParam._m0[28u].z;
        _273 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _271 = cbMtdParam._m0[24u].x;
        _273 = cbMtdParam._m0[24u].y;
    }
    float _275 = _271 * TEXCOORD.x;
    float _276 = _273 * TEXCOORD.y;
    float _288 = floor(_265);
    vec4 _291 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _275) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _276) + cbTextureTilingScale._m0[8u].w, _288));
    vec4 _314 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = (((_255 * cbMtdParam._m0[20u].w) * _291.x) * cbMtdParam._m0[9u].x) * _314.x;
    float _327 = (((_257 * cbMtdParam._m0[20u].w) * _291.y) * cbMtdParam._m0[9u].y) * _314.y;
    float _331 = (((_259 * cbMtdParam._m0[20u].w) * _291.z) * cbMtdParam._m0[9u].z) * _314.z;
    vec4 _343 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _347 = _343.z;
    vec4 _361 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _275) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _276) + cbTextureTilingScale._m0[10u].w, _288));
    float _179[2];
    float _180[2];
    _179[0u] = cbMtdParam._m0[27u].z;
    _180[0u] = cbMtdParam._m0[27u].w;
    _179[1u] = cbMtdParam._m0[28u].x;
    _180[1u] = cbMtdParam._m0[28u].y;
    float _378 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _381 = uint(int(isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0))));
    float _387 = (_361.x + _343.w) + _180[_381];
    vec4 _405 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _275) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _276) + cbTextureTilingScale._m0[9u].w, _288));
    float _412 = (_405.x * 2.0) + (-1.0);
    float _413 = (_405.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_412, _413), vec2(_412, _413));
    float _3410 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _419 = sqrt(1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))));
    float _429 = (cbMtdParam._m0[21u].x * (((_347 * 2.0) * (_405.z + _179[_381])) - _347)) + _347;
    float _433 = (cbMtdParam._m0[21u].y * ((_343.x * 2.0) + (-1.0))) + _412;
    float _434 = (cbMtdParam._m0[21u].y * ((_343.y * 2.0) + (-1.0))) + _413;
    float _437 = fma(_419, _230, fma(_434, _222 * TANGENT.x, (_208 * _200) * _433));
    float _440 = fma(_419, _231, fma(_434, _222 * TANGENT.y, (_208 * _201) * _433));
    float _443 = fma(_419, _232, fma(_434, _222 * TANGENT.z, (_208 * _202) * _433));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3421 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _451 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3443 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3454 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3465 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _455 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _471 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _540 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _542 = _540.w;
    float _563 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _566 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _569 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    vec4 _571 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _582 = (((_571.y - _451) + (_571.w * _451)) * cbMtdParam._m0[3u].x) + _451;
    uint _595 = uint(roundEven(NORMAL.w)) * 13u;
    uint _598 = (_595 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _604 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_598].x;
    float _605 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_598].y;
    float _606 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_598].z;
    float _3476 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    vec4 _610 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _615 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _626 = (((_615.x - _455) + (_615.w * _455)) * cbMtdParam._m0[3u].x) + _455;
    float _639 = (cbMtdParam._m0[3u].x * (((_607 * _542) - _607) + _610.x)) + _607;
    float _640 = (cbMtdParam._m0[3u].x * (((_608 * _542) - _608) + _610.y)) + _608;
    float _641 = (cbMtdParam._m0[3u].x * (((_609 * _542) - _609) + _610.z)) + _609;
    float _642 = 1.0 - _626;
    float _643 = _642 * _639;
    float _644 = _642 * _640;
    float _645 = _642 * _641;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _626;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _626;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _626;
    float _653 = _650 + 0.039999999105930328369140625;
    float _655 = _651 + 0.039999999105930328369140625;
    float _656 = _652 + 0.039999999105930328369140625;
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _668 = _665.x * TEXCOORD_4;
    float _669 = dot(vec3(_448, _449, _450), vec3(_529, _530, _531));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _448) - _529;
    float _677 = (_672 * _449) - _530;
    float _678 = (_672 * _450) - _531;
    float _682 = abs(dot(vec3(_529, _530, _531), vec3(_448, _449, _450)));
    float _3509 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _684 = sqrt(_582);
    float _697 = exp2((_684 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_684 * 3.0));
    float _703 = (1.0 - _697) * ((_684 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _704 = _697 * _684;
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_740, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732));
        float _773 = fma(_740, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732));
        float _777 = fma(_740, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732));
        float _802 = _732 + _448;
        float _803 = _736 + _449;
        float _804 = _740 + _450;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_448, _449, _450), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3557 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_448, _449, _450), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3590 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_448, _449, _450), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3623 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_740, cbModelParam._m0[30u].z, fma(_736, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _732));
        float _1089 = fma(_740, cbModelParam._m0[31u].z, fma(_736, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _732));
        float _1093 = fma(_740, cbModelParam._m0[32u].z, fma(_736, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _732));
        float _1116 = _732 + _448;
        float _1117 = _736 + _449;
        float _1118 = _740 + _450;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_448, _449, _450), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3686 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_448, _449, _450), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3719 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_448, _449, _450), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3752 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _676 * 0.5;
    float _1423 = _677 * 0.5;
    float _1424 = _678 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_740, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_740, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_740, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1554 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1557 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1585 = frontier_phi_22_20_ladder;
        }
        float _1789;
        if (_1554 > 0.0)
        {
            _1789 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1789 = frontier_phi_31_27_ladder;
        }
        float _2043;
        if (_1557 > 0.0)
        {
            _2043 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2043 = frontier_phi_43_38_ladder;
        }
        float _2045 = isnan(_1789) ? _1585 : (isnan(_1585) ? _1789 : min(_1585, _1789));
        float _2046 = isnan(_2043) ? _2045 : (isnan(_2045) ? _2043 : min(_2045, _2043));
        float _2050 = (_2046 * _1551) + _1540;
        float _2051 = (_2046 * _1554) + _1544;
        float _2052 = (_2046 * _1557) + _1548;
        float _2053 = _2046 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2053;
        float _2057 = _2053 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 > _2057) || ((_2051 < _2055) || ((_2050 < _2055) || (_2050 > _2057))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2052, cbModelParam._m0[9u].z, fma(_2051, cbModelParam._m0[9u].y, _2050 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2052, cbModelParam._m0[10u].z, fma(_2051, cbModelParam._m0[10u].y, _2050 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2052, cbModelParam._m0[11u].z, fma(_2051, cbModelParam._m0[11u].y, _2050 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_21_43_ladder = _2180.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2180.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2180.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_21_43_ladder_2;
        _1575 = frontier_phi_21_43_ladder_1;
        _1577 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1491);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1635 = fma(_740, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732)) + cbModelParam._m0[21u].w;
        float _1639 = fma(_740, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732)) + cbModelParam._m0[22u].w;
        float _1643 = fma(_740, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732)) + cbModelParam._m0[23u].w;
        float _1646 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1649 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1652 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1794;
        if (_1646 > 0.0)
        {
            _1794 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1794 = frontier_phi_33_29_ladder;
        }
        float _2070;
        if (_1649 > 0.0)
        {
            _2070 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2070 = frontier_phi_45_40_ladder;
        }
        float _2283;
        if (_1652 > 0.0)
        {
            _2283 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2283 = frontier_phi_54_51_ladder;
        }
        float _2285 = isnan(_2070) ? _1794 : (isnan(_1794) ? _2070 : min(_1794, _2070));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1646) + _1635;
        float _2291 = (_2286 * _1649) + _1639;
        float _2292 = (_2286 * _1652) + _1643;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_30_54_ladder = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1671 = frontier_phi_30_54_ladder_2;
        _1673 = frontier_phi_30_54_ladder;
        _1675 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1582);
        _1671 = _1655.x * cbModelParam._m0[1u].z;
        _1673 = _1655.y * cbModelParam._m0[1u].z;
        _1675 = _1655.z * cbModelParam._m0[1u].z;
    }
    float _1688 = (((_703 * _653) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1671 - _1573)) + _1573);
    float _1690 = (((_703 * _655) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1673 - _1575)) + _1575);
    float _1692 = (((_703 * _656) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1675 - _1577)) + _1577);
    float _1695 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1688 * cbSceneParam._m0[91u].x));
    uvec4 _1711 = floatBitsToUint(cbInstanceData._m0[_595 + 5u]);
    uint _1713 = _1711.x * 14u;
    uint _1714 = _1713 + 13u;
    float _1721 = _668 + (-1.0);
    float _1726 = (cbLight._m0[_1714].x * _1721) + 1.0;
    float _1727 = (cbLight._m0[_1714].y * _1721) + 1.0;
    float _1728 = (cbLight._m0[_1714].z * _1721) + 1.0;
    float _1729 = (cbLight._m0[_1714].w * _1721) + 1.0;
    uint _1730 = _1713 + 5u;
    float _1736 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
    uint _1740 = _1713 + 4u;
    float _1747 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1751 = _1713 | 1u;
    float _1762 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_448, _449, _450));
    float _1765 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_448, _449, _450));
    float _3888 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _3899 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1770 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.3183098733425140380859375;
    float _1772 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
    float _1779 = ((cbLight._m0[_1730].x * _1736) * _1772) + ((cbLight._m0[_1740].x * _1747) * _1770);
    float _1780 = ((_1736 * cbLight._m0[_1730].y) * _1772) + ((_1747 * cbLight._m0[_1740].y) * _1770);
    float _1781 = ((_1736 * cbLight._m0[_1730].z) * _1772) + ((_1747 * cbLight._m0[_1740].z) * _1770);
    uvec4 _1786 = floatBitsToUint(cbLight._m0[_1713 + 12u]);
    bool _1788 = _1786.x == 0u;
    float _1799;
    float _1801;
    float _1803;
    if (_1788)
    {
        _1799 = _1779;
        _1801 = _1780;
        _1803 = _1781;
    }
    else
    {
        uint _1807 = _1713 + 6u;
        float _1823 = (dot(vec3(cbLight._m0[_1713 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1824 = _1823 * _1823;
        float _3910 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1826 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1799 = (((cbLight._m0[_1807].x * 0.3183098733425140380859375) * _1825) * _1826) + _1779;
        _1801 = (((cbLight._m0[_1807].y * 0.3183098733425140380859375) * _1825) * _1826) + _1780;
        _1803 = (((cbLight._m0[_1807].z * 0.3183098733425140380859375) * _1825) * _1826) + _1781;
    }
    bool _1806 = _1786.y == 0u;
    float _1844;
    float _1846;
    float _1848;
    if (_1806)
    {
        _1844 = _1799;
        _1846 = _1801;
        _1848 = _1803;
    }
    else
    {
        uint _2014 = _1713 + 7u;
        float _2030 = (dot(vec3(cbLight._m0[_1713 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _3926 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2033 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _1844 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1799;
        _1846 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1801;
        _1848 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1803;
    }
    uint _1851 = _1713 + 8u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1713].w)) * _582) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1713].x + _529;
    float _1867 = cbLight._m0[_1713].y + _530;
    float _1868 = cbLight._m0[_1713].z + _531;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1713].xyz));
    float _3942 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1880 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1881 = dot(vec3(_448, _449, _450), vec3(_1873, _1874, _1875));
    float _3964 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_1873, _1874, _1875));
    float _3975 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1865 * _1865;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1901 = exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0);
    float _1902 = 0.959999978542327880859375 - _650;
    float _1904 = 0.959999978542327880859375 - _651;
    float _1905 = 0.959999978542327880859375 - _652;
    float _1912 = 1.0 - _1865;
    float _1923 = (0.5 / (((_1880 * ((_1879 * _1912) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1912) + _1865) * _1879))) * _1879;
    float _3986 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    uint _1936 = _1713 + 9u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _582) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1751].x + _529;
    float _1950 = cbLight._m0[_1751].y + _530;
    float _1951 = cbLight._m0[_1751].z + _531;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1751].xyz));
    float _3997 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1963 = dot(vec3(_448, _449, _450), vec3(_1956, _1957, _1958));
    float _4008 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1956, _1957, _1958));
    float _4019 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1948 * _1948;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0);
    float _1989 = 1.0 - _1948;
    float _1999 = (0.5 / (((_1880 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1989) + _1948) * _1962))) * _1962;
    float _4030 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    float _2011 = (((((_1982 * _1902) + _653) * cbLight._m0[_1936].x) * _2001) * _1736) + (((((_1901 * _1902) + _653) * cbLight._m0[_1851].x) * _1925) * _1747);
    float _2012 = (((((_1982 * _1904) + _655) * cbLight._m0[_1936].y) * _2001) * _1736) + (((((_1901 * _1904) + _655) * cbLight._m0[_1851].y) * _1925) * _1747);
    float _2013 = (((((_1982 * _1905) + _656) * cbLight._m0[_1936].z) * _2001) * _1736) + (((((_1901 * _1905) + _656) * cbLight._m0[_1851].z) * _1925) * _1747);
    float _2075;
    float _2077;
    float _2079;
    if (_1788)
    {
        _2075 = _2011;
        _2077 = _2012;
        _2079 = _2013;
    }
    else
    {
        uint _2081 = _1713 + 2u;
        uint _2085 = _1713 + 10u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _582) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _529;
        float _2102 = cbLight._m0[_2081].y + _530;
        float _2103 = cbLight._m0[_2081].z + _531;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2081].xyz));
        float _4041 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2115 = dot(vec3(_448, _449, _450), vec3(_2108, _2109, _2110));
        float _4052 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4063 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0);
        float _2141 = 1.0 - _2100;
        float _2151 = (0.5 / (((_1880 * ((_2114 * _2141) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _2141) + _2100) * _2114))) * _2114;
        float _4074 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2154 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2075 = (((((_2134 * _1902) + _653) * cbLight._m0[_2085].x) * _2153) * _2154) + _2011;
        _2077 = (((((_2134 * _1904) + _655) * cbLight._m0[_2085].y) * _2153) * _2154) + _2012;
        _2079 = (((((_2134 * _1905) + _656) * cbLight._m0[_2085].z) * _2153) * _2154) + _2013;
    }
    float _2189;
    float _2191;
    float _2193;
    if (_1806)
    {
        _2189 = _2075;
        _2191 = _2077;
        _2193 = _2079;
    }
    else
    {
        uint _2200 = _1713 + 3u;
        uint _2204 = _1713 + 11u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _582) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _529;
        float _2221 = cbLight._m0[_2200].y + _530;
        float _2222 = cbLight._m0[_2200].z + _531;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2200].xyz));
        float _4090 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2234 = dot(vec3(_448, _449, _450), vec3(_2227, _2228, _2229));
        float _4101 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4112 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
        float _2260 = 1.0 - _2219;
        float _2270 = (0.5 / (((_1880 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _2260) + _2219) * _2233))) * _2233;
        float _4123 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _2189 = (((((_2253 * _1902) + _653) * cbLight._m0[_2204].x) * _2272) * _2273) + _2075;
        _2191 = (((((_2253 * _1904) + _655) * cbLight._m0[_2204].y) * _2272) * _2273) + _2077;
        _2193 = (((((_2253 * _1905) + _656) * cbLight._m0[_2204].z) * _2272) * _2273) + _2079;
    }
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_1711.y == 0u)
    {
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2348;
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2348;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2348;
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.x;
        uint _2375 = uint((float(_2363.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _2364))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _2364)));
        float _2385 = (log2(_2351 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2386 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        uint _2389 = uint(isnan(14.0) ? _2386 : (isnan(_2386) ? 14.0 : min(_2386, 14.0)));
        uvec4 _2394 = texelFetch(g_lightClusterGridBuffer, int(((_2389 << 2u) + (_2375 << 6u)) >> 2u));
        uint _2395 = _2394.x;
        uint _2396 = _2363.z;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((((1u << ((_2396 >> 4u) & 15u)) + 4294967295u) & _2395) == 0u) || ((_2396 & 240u) == 0u))
        {
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
        }
        else
        {
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            uint _2663 = 0u;
            uint _2672;
            bool _2673;
            for (;;)
            {
                _2672 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                _2673 = _2672 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2673)
                {
                    frontier_phi_69_pred = _2662;
                    frontier_phi_69_pred_1 = _2661;
                    frontier_phi_69_pred_2 = _2660;
                    frontier_phi_69_pred_3 = _2658;
                    frontier_phi_69_pred_4 = _2657;
                    frontier_phi_69_pred_5 = _2659;
                }
                else
                {
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    uint _2787;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2672;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    for (;;)
                    {
                        uint _2791 = uint(findLSB(_2787)) + (_2663 << 5u);
                        uint _2788 = (_2787 + 4294967295u) & _2787;
                        uint _2793 = _2791 * 48u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2813 = (_2791 * 48u) + 4u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2832 = (_2791 * 48u) + 8u;
                        vec3 _2843 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x));
                        float _2847 = _2807.x - _2349;
                        float _2848 = _2807.y - _2350;
                        float _2849 = _2807.z - _2351;
                        float _2850 = dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849));
                        float _2853 = inversesqrt(_2850);
                        float _2854 = _2853 * _2847;
                        float _2855 = _2853 * _2848;
                        float _2856 = _2853 * _2849;
                        float _2857 = dot(vec3(_563, _566, _569), vec3(_2854, _2855, _2856));
                        float _2862 = 1.0 - (_2850 * _2807.w);
                        float _4149 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2864 = sqrt(_2850) * _2826.w;
                        float _2867 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2857) + _2868;
                        float _2874 = _2864 * _2864;
                        float _2878 = ((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * _2863) / ((_2874 * 0.699999988079071044921875) + 1.0);
                        float _2882 = (-0.0) - _2349;
                        float _2883 = (-0.0) - _2350;
                        float _2884 = (-0.0) - _2351;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2899 = exp2(log2(1.0 / ((_2874 * 3.5) + 5.0)) * 0.25);
                        float _2900 = 1.0 - _684;
                        float _2907 = sqrt(1.0 - ((1.0 - (_2900 * _2900)) * (1.0 - (_2899 * _2899))));
                        float _2908 = _2907 * _2907;
                        float _2909 = _2908 * _2908;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2920 = dot(vec3(_563, _566, _569), vec3(_2889, _2890, _2891));
                        float _4165 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2924 = dot(vec3(_563, _566, _569), vec3(_2916 * _2910, _2916 * _2911, _2916 * _2912));
                        float _4176 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2927 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2931 = ((_2927 * _2927) * (_2909 + (-1.0))) + 1.0;
                        float _2932 = _2867 * _2908;
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2857) + _2933;
                        float _4187 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2938 = 1.0 - _2908;
                        float _2948 = (0.5 / (((_2937 * ((_2923 * _2938) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2937 * _2938) + _2908) * _2923))) * _2937;
                        float _4198 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2959 = (((_2909 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_2931 * _2931) * ((_2874 * 2.1991131305694580078125) + 3.141590118408203125))) * _2863;
                        _2716 = (_2878 * _2826.x) + _2784;
                        _2717 = (_2878 * _2826.y) + _2785;
                        _2718 = (_2878 * _2826.z) + _2786;
                        _2713 = (_2959 * _2843.x) + _2781;
                        _2714 = (_2959 * _2843.y) + _2782;
                        _2715 = (_2959 * _2843.z) + _2783;
                        if (_2788 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2788;
                        }
                    }
                    frontier_phi_69_pred = _2718;
                    frontier_phi_69_pred_1 = _2717;
                    frontier_phi_69_pred_2 = _2716;
                    frontier_phi_69_pred_3 = _2714;
                    frontier_phi_69_pred_4 = _2713;
                    frontier_phi_69_pred_5 = _2715;
                }
                _2524 = frontier_phi_69_pred;
                _2522 = frontier_phi_69_pred_1;
                _2520 = frontier_phi_69_pred_2;
                _2516 = frontier_phi_69_pred_3;
                _2514 = frontier_phi_69_pred_4;
                _2518 = frontier_phi_69_pred_5;
                uint _2664 = _2663 + 1u;
                if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2657 = _2514;
                    _2658 = _2516;
                    _2659 = _2518;
                    _2660 = _2520;
                    _2661 = _2522;
                    _2662 = _2524;
                    _2663 = _2664;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
        }
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.z;
        uint _2530 = (_2528 >> 8u) & 15u;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((4294967295u << _2530) & _2395) == 0u)
        {
            _2625 = _2513;
            _2627 = _2515;
            _2629 = _2517;
            _2631 = _2519;
            _2633 = _2521;
            _2635 = _2523;
        }
        else
        {
            float _2650 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
            float _2651 = _2650 * _2349;
            float _2652 = _2650 * _2350;
            float _2653 = _2650 * _2351;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2530 < ((_2528 >> 12u) & 15u))
            {
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2764 = _2513;
                float _2765 = _2515;
                float _2766 = _2517;
                float _2767 = _2519;
                float _2768 = _2521;
                float _2769 = _2523;
                uint _2770 = _2530;
                uint _2779;
                bool _2780;
                for (;;)
                {
                    _2779 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                    _2780 = _2779 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2780)
                    {
                        frontier_phi_75_pred = _2766;
                        frontier_phi_75_pred_1 = _2765;
                        frontier_phi_75_pred_2 = _2764;
                        frontier_phi_75_pred_3 = _2769;
                        frontier_phi_75_pred_4 = _2768;
                        frontier_phi_75_pred_5 = _2767;
                    }
                    else
                    {
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        uint _2983 = _2779;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        vec3 _3037;
                        vec4 _3053;
                        vec4 _3068;
                        float _3114;
                        bool _3115;
                        for (;;)
                        {
                            uint _2994 = ((_2770 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2994 * 40u) + 8u;
                            _3037 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x));
                            uint _3040 = (_2994 * 40u) + 16u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3055 = (_2994 * 40u) + 20u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3070 = (_2994 * 40u) + 24u;
                            vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3089 = (_2994 * 40u) + 28u;
                            vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            _3114 = fma(_2351, _3102.z, fma(_2350, _3102.y, _3102.x * _2349)) + _3102.w;
                            _3115 = !((fma(_2351, _3083.z, fma(_2350, _3083.y, _3083.x * _2349)) + _3083.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3115)
                            {
                                float _3142 = _3009.x - _2349;
                                float _3143 = _3009.y - _2350;
                                float _3144 = _3009.z - _2351;
                                float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                                float _3148 = inversesqrt(_3145);
                                float _3149 = _3148 * _3142;
                                float _3150 = _3148 * _3143;
                                float _3151 = _3148 * _3144;
                                float _3155 = 1.0 - (_3145 / (_3010 * _3010));
                                float _4209 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3156 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3160 = sqrt(_3145) * _3025.w;
                                float _3162 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                                float _3163 = _3162 * _3162;
                                float _3166 = ((1.0 - _3163) * dot(vec3(_3149, _3150, _3151), vec3(_563, _566, _569))) + _3163;
                                float _3169 = _3160 * _3160;
                                float _3173 = (fma(_2351, _3053.z, fma(_2350, _3053.y, _3053.x * _2349)) + _3053.w) / _3114;
                                float _3174 = (fma(_2351, _3068.z, fma(_2350, _3068.y, _3068.x * _2349)) + _3068.w) / _3114;
                                float _3178 = 1.0 - dot(vec2(_3173, _3174), vec2(_3173, _3174));
                                float _4225 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3180 = _3179 * (((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3156) / ((_3169 * 0.699999988079071044921875) + 1.0));
                                float _3192 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                                float _3193 = 1.0 - _684;
                                float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                                float _3201 = _3200 * _3200;
                                float _3202 = _3201 * _3201;
                                float _3203 = _3149 - _2651;
                                float _3204 = _3150 - _2652;
                                float _3205 = _3151 - _2653;
                                float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                                float _3213 = dot(vec3(_563, _566, _569), vec3((-0.0) - _2651, (-0.0) - _2652, (-0.0) - _2653));
                                float _4236 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3216 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3217 = dot(vec3(_563, _566, _569), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                                float _4247 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3220 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                                float _3225 = _3162 * _3201;
                                float _3226 = _3225 * _3225;
                                float _3232 = ((1.0 - _3226) * dot(vec3(_563, _566, _569), vec3(_3149, _3150, _3151))) + _3226;
                                float _4258 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3234 = 1.0 - _3201;
                                float _3244 = (0.5 / (((_3233 * ((_3216 * _3234) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3201) * _3216))) * _3233;
                                float _4269 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3254 = (_3179 * _3156) * (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) / ((_3224 * _3224) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3254 * _3037.z;
                                frontier_phi_81_pred_1 = _3254 * _3037.y;
                                frontier_phi_81_pred_2 = _3254 * _3037.x;
                                frontier_phi_81_pred_3 = _3180 * _3025.z;
                                frontier_phi_81_pred_4 = _3180 * _3025.y;
                                frontier_phi_81_pred_5 = _3180 * _3025.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_81_pred;
                            _3259 = frontier_phi_81_pred_1;
                            _3258 = frontier_phi_81_pred_2;
                            _3263 = frontier_phi_81_pred_3;
                            _3262 = frontier_phi_81_pred_4;
                            _3261 = frontier_phi_81_pred_5;
                            _2967 = _3261 + _2980;
                            _2968 = _3262 + _2981;
                            _2969 = _3263 + _2982;
                            _2964 = _3258 + _2977;
                            _2965 = _3259 + _2978;
                            _2966 = _3260 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2966;
                        frontier_phi_75_pred_1 = _2965;
                        frontier_phi_75_pred_2 = _2964;
                        frontier_phi_75_pred_3 = _2969;
                        frontier_phi_75_pred_4 = _2968;
                        frontier_phi_75_pred_5 = _2967;
                    }
                    _2630 = frontier_phi_75_pred;
                    _2628 = frontier_phi_75_pred_1;
                    _2626 = frontier_phi_75_pred_2;
                    _2636 = frontier_phi_75_pred_3;
                    _2634 = frontier_phi_75_pred_4;
                    _2632 = frontier_phi_75_pred_5;
                    uint _2771 = _2770 + 1u;
                    if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2764 = _2626;
                        _2765 = _2628;
                        _2766 = _2630;
                        _2767 = _2632;
                        _2768 = _2634;
                        _2769 = _2636;
                        _2770 = _2771;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2634;
                frontier_phi_63_64_ladder_1 = _2632;
                frontier_phi_63_64_ladder_2 = _2630;
                frontier_phi_63_64_ladder_3 = _2636;
                frontier_phi_63_64_ladder_4 = _2628;
                frontier_phi_63_64_ladder_5 = _2626;
            }
            else
            {
                frontier_phi_63_64_ladder = _2521;
                frontier_phi_63_64_ladder_1 = _2519;
                frontier_phi_63_64_ladder_2 = _2517;
                frontier_phi_63_64_ladder_3 = _2523;
                frontier_phi_63_64_ladder_4 = _2515;
                frontier_phi_63_64_ladder_5 = _2513;
            }
            _2625 = frontier_phi_63_64_ladder_5;
            _2627 = frontier_phi_63_64_ladder_4;
            _2629 = frontier_phi_63_64_ladder_2;
            _2631 = frontier_phi_63_64_ladder_1;
            _2633 = frontier_phi_63_64_ladder;
            _2635 = frontier_phi_63_64_ladder_3;
        }
        float _2640 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2407 = (_2640 * _2631) + _1844;
        _2409 = (_2640 * _2633) + _1846;
        _2411 = (_2640 * _2635) + _1848;
        _2413 = ((_2625 * _653) * _2640) + _2189;
        _2415 = ((_2627 * _655) * _2640) + _2191;
        _2417 = ((_2629 * _656) * _2640) + _2193;
    }
    else
    {
        _2407 = _1844;
        _2409 = _1846;
        _2411 = _1848;
        _2413 = _2189;
        _2415 = _2191;
        _2417 = _2193;
    }
    vec4 _2423 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4285 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4296 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4307 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _2447 = (((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2407 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _668))) + ((_2413 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + (_2423.x * cbMtdParam._m0[3u].x);
    float _2449 = ((_2423.y * cbMtdParam._m0[3u].x) + ((_2415 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2409 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _668)));
    float _2451 = ((_2423.z * cbMtdParam._m0[3u].x) + ((_2417 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2411 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _668)));
    uint _2455 = _595 + 6u;
    float _2463 = _537 / cbSceneParam._m0[86u].x;
    float _2464 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2478 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, (log2((isnan(cbSceneParam._m0[77u].w) ? _471 : (isnan(_471) ? cbSceneParam._m0[77u].w : min(_471, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2480 = _2478.x;
    float _2481 = _2478.y;
    float _2482 = _2478.z;
    float _2483 = _2478.w;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_471 > cbSceneParam._m0[78u].w)
    {
        float _2538 = isnan(_471) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _471 : min(cbSceneParam._m0[80u].w, _471));
        float _2539 = _2538 / _471;
        float _2550 = _2539 * _522;
        float _2551 = _523 * _2539;
        float _2552 = (-0.0) - _2551;
        float _2553 = _2539 * _524;
        float _2555 = (cbSceneParam._m0[77u].w * _2552) / _2538;
        float _2556 = _2555 + cbSceneParam._m0[79u].w;
        float _2557 = cbSceneParam._m0[79u].w - _2551;
        float _2563 = sqrt(((_2550 * _2550) + (_2551 * _2551)) + (_2553 * _2553));
        float _2566 = (1.0 - (cbSceneParam._m0[77u].w / _2538)) * _2563;
        float _2571 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2573 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2726;
        if (abs((_2552 - _2555) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2726 = ((((_2556 > 0.0) ? exp2(_2571 * _2556) : (2.0 - exp2(_2573 * _2556))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2566;
        }
        else
        {
            float _2686 = 1.0 / cbSceneParam._m0[80u].x;
            float _2687 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : max(_2556, _2557));
            float _2688 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : min(_2556, _2557));
            float _2697 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : min(_2687, 0.0));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            _2726 = ((abs(_2563 / _2552) * cbSceneParam._m0[80u].y) * ((((_2697 - _2698) * 2.0) - ((exp2(_2571 * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0)))) - exp2(_2571 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))))) * _2686)) - ((exp2(_2573 * _2697) - exp2(_2573 * _2698)) * _2686))) + (_2566 * cbSceneParam._m0[80u].z);
        }
        vec4 _2728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, 1.0), 0.0);
        float _2737 = exp2((_2726 * (-1.44269502162933349609375)) * (1.0 - _2728.w));
        float _2738 = log2(_2737);
        float _2754 = log2(_2483);
        _2575 = (exp2(_2754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].x)) * _2728.x) / cbSceneParam._m0[78u].x)) + _2480;
        _2577 = (exp2(_2754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].y)) * _2728.y) / cbSceneParam._m0[78u].y)) + _2481;
        _2579 = (exp2(_2754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].z)) * _2728.z) / cbSceneParam._m0[78u].z)) + _2482;
        _2581 = _2737 * _2483;
    }
    else
    {
        _2575 = _2480;
        _2577 = _2481;
        _2579 = _2482;
        _2581 = _2483;
    }
    float _2593 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2594 = _2593 == 3.0;
    float _2595 = log2(_2581);
    float _2602 = exp2(_2595 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)));
    float _2603 = exp2(_2595 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0)));
    float _2604 = exp2(_2595 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0)));
    float _2613 = (_2593 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2613 * (_2594 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.y = _2613 * (_2594 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.z = _2613 * (_2594 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2579)));
    SV_Target.w = cbInstanceData._m0[_2455].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2455].w;
}


