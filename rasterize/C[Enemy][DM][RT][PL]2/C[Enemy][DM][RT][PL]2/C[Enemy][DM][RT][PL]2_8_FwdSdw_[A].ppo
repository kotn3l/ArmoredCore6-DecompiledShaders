#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1305;
float _3997;
float _3998;
float _3999;
float _4000;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248;
    float _249;
    float _250;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
    }
    else
    {
        _248 = _234;
        _249 = _235;
        _250 = _236;
    }
    vec4 _277 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _288 = exp2(log2(_277.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _289;
    float _291;
    float _293;
    if (_288)
    {
        _289 = cbMtdParam._m0[19u].x;
        _291 = cbMtdParam._m0[19u].y;
        _293 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _289 = cbMtdParam._m0[18u].x;
        _291 = cbMtdParam._m0[18u].y;
        _293 = cbMtdParam._m0[18u].z;
    }
    float _299;
    if (_288)
    {
        _299 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _299 = cbMtdParam._m0[20u].z;
    }
    float _305;
    float _307;
    if (_288)
    {
        _305 = cbMtdParam._m0[28u].z;
        _307 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _305 = cbMtdParam._m0[24u].x;
        _307 = cbMtdParam._m0[24u].y;
    }
    float _309 = _305 * TEXCOORD.x;
    float _310 = _307 * TEXCOORD.y;
    float _322 = floor(_299);
    vec4 _325 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _309) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _310) + cbTextureTilingScale._m0[8u].w, _322));
    vec4 _347 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _356 = (((_289 * cbMtdParam._m0[20u].w) * _325.x) * cbMtdParam._m0[9u].x) * _347.x;
    float _360 = (((_291 * cbMtdParam._m0[20u].w) * _325.y) * cbMtdParam._m0[9u].y) * _347.y;
    float _364 = (((_293 * cbMtdParam._m0[20u].w) * _325.z) * cbMtdParam._m0[9u].z) * _347.z;
    float _376 = cbMtdParam._m0[24u].z * TEXCOORD.x;
    float _377 = cbMtdParam._m0[24u].w * TEXCOORD.y;
    vec4 _389 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _376) + cbTextureTilingScale._m0[3u].z, (_377 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _411 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _415 = _411.z;
    float _416 = _411.w;
    float _421 = exp2(log2(_416 * cbMtdParam._m0[22u].z) * cbMtdParam._m0[22u].y);
    float _428 = (_421 * ((_389.x * cbMtdParam._m0[10u].x) - _356)) + _356;
    float _429 = (_421 * ((_389.y * cbMtdParam._m0[10u].y) - _360)) + _360;
    float _430 = (_421 * ((_389.z * cbMtdParam._m0[10u].z) - _364)) + _364;
    vec4 _443 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _467 = exp2(log2(cbMtdParam._m0[20u].x * _347.w) * cbMtdParam._m0[21u].w);
    float _468 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _469 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
    float _477 = (_469 * ((cbMtdParam._m0[11u].x * _443.x) - _428)) + _428;
    float _478 = (_469 * ((cbMtdParam._m0[11u].y * _443.y) - _429)) + _429;
    float _479 = (_469 * ((cbMtdParam._m0[11u].z * _443.z) - _430)) + _430;
    float _197[2];
    float _198[2];
    _197[0u] = cbMtdParam._m0[27u].z;
    _198[0u] = cbMtdParam._m0[27u].w;
    _197[1u] = cbMtdParam._m0[28u].x;
    _198[1u] = cbMtdParam._m0[28u].y;
    float _511 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    uint _513 = uint(int(isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0))));
    float _518 = _198[_513] + texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w, _322)).x;
    float _521 = ((cbMtdParam._m0[23u].y - _518) * _421) + _518;
    float _528 = (_521 + _416) + ((cbMtdParam._m0[22u].x - _521) * _469);
    vec4 _546 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w, _322));
    float _553 = (_546.x * 2.0) + (-1.0);
    float _554 = (_546.y * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _4029 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))));
    float _569 = (cbMtdParam._m0[21u].x * (((_415 * 2.0) * (_546.z + _197[_513])) - _415)) + _415;
    vec4 _582 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _376) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _377) + cbTextureTilingScale._m0[6u].w));
    float _589 = (_582.x * 2.0) + (-1.0);
    float _590 = (_582.y * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _4040 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _603 = (((_582.z - _569) + cbMtdParam._m0[23u].z) * _421) + _569;
    vec4 _616 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _623 = (_616.x * 2.0) + (-1.0);
    float _624 = (_616.y * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _4051 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _635 = (((_616.z - _603) + cbMtdParam._m0[23u].w) * _469) + _603;
    float _639 = (cbMtdParam._m0[21u].y * ((_411.x * 2.0) + (-1.0))) + _553;
    float _640 = (cbMtdParam._m0[21u].y * ((_411.y * 2.0) + (-1.0))) + _554;
    float _647 = ((_589 - _639) * _421) + _639;
    float _648 = ((_590 - _640) * _421) + _640;
    float _649 = ((sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) - _560) * _421) + _560;
    float _656 = ((_623 - _647) * _469) + _647;
    float _657 = ((_624 - _648) * _469) + _648;
    float _658 = ((sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) - _649) * _469) + _649;
    float _661 = fma(_658, _248, fma(_657, _240 * TANGENT.x, (_226 * _218) * _656));
    float _664 = fma(_658, _249, fma(_657, _240 * TANGENT.y, (_226 * _219) * _656));
    float _667 = fma(_658, _250, fma(_657, _240 * TANGENT.z, (_226 * _220) * _656));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _4062 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _675 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4084 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4095 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4106 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _679 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _745 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _735);
    float _746 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _735);
    float _747 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _735);
    float _751 = inversesqrt(dot(vec3(_745, _746, _747), vec3(_745, _746, _747)));
    float _752 = _745 * _751;
    float _753 = _746 * _751;
    float _754 = _747 * _751;
    vec4 _759 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _761 = _759.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _985 = sqrt(((_745 * _745) + (_746 * _746)) + (_747 * _747));
        float _991 = (cbMatDynParam._m0[5u].x * _985) + cbMatDynParam._m0[5u].y;
        float _4117 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _996 = (cbMatDynParam._m0[5u].z * _985) + cbMatDynParam._m0[5u].w;
        float _4128 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) - _992)) + _992) < ((_761 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _777 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _779 = _777.w;
    float _797 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _800 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _803 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    vec4 _805 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _816 = (((_805.y - _675) + (_805.w * _675)) * cbMtdParam._m0[3u].x) + _675;
    uint _829 = uint(roundEven(NORMAL.w)) * 13u;
    uint _831 = _829 + 9u;
    uint _832 = _831 + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_832].z;
    float _4139 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    vec4 _844 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _849 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _860 = (((_849.x - _679) + (_849.w * _679)) * cbMtdParam._m0[3u].x) + _679;
    float _873 = (cbMtdParam._m0[3u].x * (((_841 * _779) - _841) + _844.x)) + _841;
    float _874 = (cbMtdParam._m0[3u].x * (((_842 * _779) - _842) + _844.y)) + _842;
    float _875 = (cbMtdParam._m0[3u].x * (((_843 * _779) - _843) + _844.z)) + _843;
    float _876 = 1.0 - _860;
    float _877 = _876 * _873;
    float _878 = _876 * _874;
    float _879 = _876 * _875;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _860;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _860;
    float _886 = (_875 + (-0.039999999105930328369140625)) * _860;
    float _887 = _884 + 0.039999999105930328369140625;
    float _889 = _885 + 0.039999999105930328369140625;
    float _890 = _886 + 0.039999999105930328369140625;
    vec4 _899 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _902 = _899.x * TEXCOORD_4;
    float _903 = dot(vec3(_672, _673, _674), vec3(_752, _753, _754));
    float _906 = _903 * 2.0;
    float _910 = (_906 * _672) - _752;
    float _911 = (_906 * _673) - _753;
    float _912 = (_906 * _674) - _754;
    float _916 = abs(dot(vec3(_752, _753, _754), vec3(_672, _673, _674)));
    float _4172 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _918 = sqrt(_816);
    float _931 = exp2((_918 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_918 * 3.0));
    float _937 = (1.0 - _931) * ((_918 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _938 = _931 * _918;
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1304;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966));
        float _1033 = fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966));
        float _1037 = fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966));
        float _1062 = _966 + _672;
        float _1063 = _970 + _673;
        float _1064 = _974 + _674;
        float _1074 = fma(_1064, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062)) - _1029;
        float _1075 = fma(_1064, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062)) - _1033;
        float _1076 = fma(_1064, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062)) - _1037;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1132 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1098.x + (-0.5));
        float _1134 = _1132 * (_1098.y + (-0.5));
        float _1135 = _1132 * (_1098.z + (-0.5));
        float _1142 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1105.x + (-0.5));
        float _1144 = _1142 * (_1105.y + (-0.5));
        float _1145 = _1142 * (_1105.z + (-0.5));
        float _1152 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1112.x + (-0.5));
        float _1154 = _1152 * (_1112.y + (-0.5));
        float _1155 = _1152 * (_1112.z + (-0.5));
        float _1162 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1119.x + (-0.5));
        float _1164 = _1162 * (_1119.y + (-0.5));
        float _1165 = _1162 * (_1119.z + (-0.5));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = _1133 * 0.5;
        float _1170 = _1143 * 0.5;
        float _1171 = _1153 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1186 = (dot(vec3(_672, _673, _674), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1196 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4220 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1198 + 1.0))) + _1203) * _1166;
        float _1213 = _1134 * 0.5;
        float _1214 = _1144 * 0.5;
        float _1215 = _1154 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_672, _673, _674), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4253 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1240 + 1.0))) + _1245) * _1167;
        float _1255 = _1135 * 0.5;
        float _1256 = _1145 * 0.5;
        float _1257 = _1155 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_672, _673, _674), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4286 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1282 + 1.0))) + _1287) * _1168;
        _1304 = _1135;
        _1306 = _1134;
        _1307 = _1133;
        _1308 = _1145;
        _1309 = _1144;
        _1310 = _1143;
        _1311 = _1155;
        _1312 = _1154;
        _1313 = _1153;
        _1314 = _1168;
        _1315 = _1167;
        _1316 = _1166;
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _1305;
        _1306 = _1305;
        _1307 = _1305;
        _1308 = _1305;
        _1309 = _1305;
        _1310 = _1305;
        _1311 = _1305;
        _1312 = _1305;
        _1313 = _1305;
        _1314 = _1305;
        _1315 = _1305;
        _1316 = _1305;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1348 = fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966));
        float _1352 = fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966));
        float _1356 = fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966));
        float _1379 = _966 + _672;
        float _1380 = _970 + _673;
        float _1381 = _974 + _674;
        float _1391 = fma(_1381, cbModelParam._m0[30u].z, fma(_1380, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1379)) - _1348;
        float _1392 = fma(_1381, cbModelParam._m0[31u].z, fma(_1380, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1379)) - _1352;
        float _1393 = fma(_1381, cbModelParam._m0[32u].z, fma(_1380, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1379)) - _1356;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1348 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1352 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[35u].z) + ((((((_1356 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1447 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1414.x + (-0.5));
        float _1449 = _1447 * (_1414.y + (-0.5));
        float _1450 = _1447 * (_1414.z + (-0.5));
        float _1457 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1421.x + (-0.5));
        float _1459 = _1457 * (_1421.y + (-0.5));
        float _1460 = _1457 * (_1421.z + (-0.5));
        float _1467 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1428.x + (-0.5));
        float _1469 = _1467 * (_1428.y + (-0.5));
        float _1470 = _1467 * (_1428.z + (-0.5));
        float _1477 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1435.x + (-0.5));
        float _1479 = _1477 * (_1435.y + (-0.5));
        float _1480 = _1477 * (_1435.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_672, _673, _674), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4349 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1511 + 1.0))) + _1516) * _1481;
        float _1526 = _1449 * 0.5;
        float _1527 = _1459 * 0.5;
        float _1528 = _1469 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_672, _673, _674), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4382 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1553 + 1.0))) + _1558) * _1482;
        float _1568 = _1450 * 0.5;
        float _1569 = _1460 * 0.5;
        float _1570 = _1470 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_672, _673, _674), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4415 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1595 + 1.0))) + _1600) * _1483;
        _1617 = _1450;
        _1618 = _1449;
        _1619 = _1448;
        _1620 = _1460;
        _1621 = _1459;
        _1622 = _1458;
        _1623 = _1470;
        _1624 = _1469;
        _1625 = _1468;
        _1626 = _1483;
        _1627 = _1482;
        _1628 = _1481;
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1305;
        _1618 = _1305;
        _1619 = _1305;
        _1620 = _1305;
        _1621 = _1305;
        _1622 = _1305;
        _1623 = _1305;
        _1624 = _1305;
        _1625 = _1305;
        _1626 = _1305;
        _1627 = _1305;
        _1628 = _1305;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1317)) + _1317;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1318)) + _1318;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1319)) + _1319;
    float _1664 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1641));
    float _1685 = _910 * 0.5;
    float _1686 = _911 * 0.5;
    float _1687 = _912 * 0.5;
    float _1688 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1691 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1694 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1728;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1701 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1304, _1308, _1311, _1314));
        float _1705 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1709 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1716 = dot(vec4(cbModelParam._m0[39u]), vec4(_1685, _1686, _1687, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1739;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1730 = dot(vec4(cbModelParam._m0[40u]), vec4(_1685, _1686, _1687, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1743 = (_1739 * cbModelParam._m0[1u].x) + (_1728 * (1.0 - cbModelParam._m0[1u].x));
    float _1753 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _816);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1753 : min(cbModelParam._m0[25u].z, _1753));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_912, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910));
        float _1817 = fma(_912, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910));
        float _1820 = fma(_912, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1848 = frontier_phi_25_23_ladder;
        }
        float _2020;
        if (_1817 > 0.0)
        {
            _2020 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2020 = frontier_phi_34_30_ladder;
        }
        float _2316;
        if (_1820 > 0.0)
        {
            _2316 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2316 = frontier_phi_46_41_ladder;
        }
        float _2318 = isnan(_2020) ? _1848 : (isnan(_1848) ? _2020 : min(_1848, _2020));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1814) + _1803;
        float _2324 = (_2319 * _1817) + _1807;
        float _2325 = (_2319 * _1820) + _1811;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2326;
        float _2330 = _2326 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 > _2330) || ((_2324 < _2328) || ((_2323 < _2328) || (_2323 > _2330))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2325, cbModelParam._m0[9u].z, fma(_2324, cbModelParam._m0[9u].y, _2323 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2325, cbModelParam._m0[10u].z, fma(_2324, cbModelParam._m0[10u].y, _2323 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2325, cbModelParam._m0[11u].z, fma(_2324, cbModelParam._m0[11u].y, _2323 * cbModelParam._m0[11u].x))), _1754);
            frontier_phi_24_46_ladder = _2470.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2470.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2470.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_24_46_ladder_2;
        _1838 = frontier_phi_24_46_ladder_1;
        _1840 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_910, _911, _912), _1754);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _816);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1898 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1902 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1906 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1909 = fma(_912, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910));
        float _1912 = fma(_912, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910));
        float _1915 = fma(_912, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910));
        float _2025;
        if (_1909 > 0.0)
        {
            _2025 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2025 = frontier_phi_36_32_ladder;
        }
        float _2343;
        if (_1912 > 0.0)
        {
            _2343 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2343 = frontier_phi_48_43_ladder;
        }
        float _2681;
        if (_1915 > 0.0)
        {
            _2681 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2681 = frontier_phi_58_55_ladder;
        }
        float _2683 = isnan(_2343) ? _2025 : (isnan(_2025) ? _2343 : min(_2025, _2343));
        float _2684 = isnan(_2681) ? _2683 : (isnan(_2683) ? _2681 : min(_2683, _2681));
        float _2688 = (_2684 * _1909) + _1898;
        float _2689 = (_2684 * _1912) + _1902;
        float _2690 = (_2684 * _1915) + _1906;
        float _2691 = _2684 * 9.9999997473787516355514526367188e-05;
        float _2692 = (-1.0) - _2691;
        float _2694 = _2691 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2690 > _2694) || ((_2690 < _2692) || ((_2689 > _2694) || ((_2689 < _2692) || ((_2688 < _2692) || (_2688 > _2694))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2690, cbModelParam._m0[17u].z, fma(_2689, cbModelParam._m0[17u].y, _2688 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2690, cbModelParam._m0[18u].z, fma(_2689, cbModelParam._m0[18u].y, _2688 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2690, cbModelParam._m0[19u].z, fma(_2689, cbModelParam._m0[19u].y, _2688 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_33_58_ladder = _2812.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2812.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2812.x * cbModelParam._m0[1u].z;
        }
        _1934 = frontier_phi_33_58_ladder_2;
        _1936 = frontier_phi_33_58_ladder_1;
        _1938 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_910, _911, _912), _1845);
        _1934 = _1918.x * cbModelParam._m0[1u].z;
        _1936 = _1918.y * cbModelParam._m0[1u].z;
        _1938 = _1918.z * cbModelParam._m0[1u].z;
    }
    float _1951 = (((_937 * _887) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1934 - _1836)) + _1836);
    float _1953 = (((_937 * _889) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1936 - _1838)) + _1838);
    float _1955 = (((_937 * _890) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1938 - _1840)) + _1840);
    float _1958 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1953, cbSceneParam._m0[89u].y, _1951 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1953, cbSceneParam._m0[90u].y, _1951 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1953, cbSceneParam._m0[91u].y, _1951 * cbSceneParam._m0[91u].x));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2012 = _1999 / _2011;
    float _2013 = _2003 / _2011;
    float _2014 = _2007 / _2011;
    float _2161;
    float _2162;
    float _2163;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2041 = ((uint(_2014 > cbSceneParam._m0[59u].y) + uint(_2014 > cbSceneParam._m0[59u].x)) + uint(_2014 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2042 = _2041 + 43u;
        uint _2050 = _2041 + 44u;
        uint _2058 = _2041 + 45u;
        uint _2066 = _2041 + 46u;
        float _2077 = fma(_2011, cbSceneParam._m0[_2042].w, fma(_2007, cbSceneParam._m0[_2042].z, fma(_2003, cbSceneParam._m0[_2042].y, _1999 * cbSceneParam._m0[_2042].x)));
        float _2081 = fma(_2011, cbSceneParam._m0[_2050].w, fma(_2007, cbSceneParam._m0[_2050].z, fma(_2003, cbSceneParam._m0[_2050].y, _1999 * cbSceneParam._m0[_2050].x)));
        float _2089 = fma(_2011, cbSceneParam._m0[_2066].w, fma(_2007, cbSceneParam._m0[_2066].z, fma(_2003, cbSceneParam._m0[_2066].y, _1999 * cbSceneParam._m0[_2066].x)));
        float _2094 = cbSceneParam._m0[33u].z * _2089;
        float _2096 = cbSceneParam._m0[33u].w * _2089;
        float _2099 = fma(_2011, cbSceneParam._m0[_2058].w, fma(_2007, cbSceneParam._m0[_2058].z, fma(_2003, cbSceneParam._m0[_2058].y, _1999 * cbSceneParam._m0[_2058].x))) / _2089;
        float _2147 = (cbSceneParam._m0[33u].x - sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014))) * cbSceneParam._m0[33u].y;
        float _4541 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2154 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 + _2077) / _2089, (_2096 + _2081) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 + _2077) / _2089, (_2081 - _2094) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 - _2094) / _2089, (_2081 - _2096) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 - _2096) / _2089, (_2094 + _2081) / _2089), _2099), 0.0)).x), vec4(0.25)));
        _2161 = 1.0 - (_2154 * cbSceneParam._m0[34u].x);
        _2162 = 1.0 - (_2154 * cbSceneParam._m0[34u].y);
        _2163 = 1.0 - (_2154 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2161 = 1.0;
        _2162 = 1.0;
        _2163 = 1.0;
    }
    float _2227;
    float _2229;
    float _2231;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2215 = fma(_2011, cbSceneParam._m0[63u].w, fma(_2007, cbSceneParam._m0[63u].z, fma(_2003, cbSceneParam._m0[63u].y, _1999 * cbSceneParam._m0[63u].x)));
        float _2216 = fma(_2011, cbSceneParam._m0[60u].w, fma(_2007, cbSceneParam._m0[60u].z, fma(_2003, cbSceneParam._m0[60u].y, _1999 * cbSceneParam._m0[60u].x))) / _2215;
        float _2217 = fma(_2011, cbSceneParam._m0[61u].w, fma(_2007, cbSceneParam._m0[61u].z, fma(_2003, cbSceneParam._m0[61u].y, _1999 * cbSceneParam._m0[61u].x))) / _2215;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_2216 >= cbSceneParam._m0[64u].x) && (_2217 >= cbSceneParam._m0[64u].y)) && (_2216 <= cbSceneParam._m0[64u].z)) && (_2217 <= cbSceneParam._m0[64u].w))
        {
            float _2356 = fma(_2011, cbSceneParam._m0[62u].w, fma(_2007, cbSceneParam._m0[62u].z, fma(_2003, cbSceneParam._m0[62u].y, _1999 * cbSceneParam._m0[62u].x))) / _2215;
            float _2360 = isnan(cbSceneParam._m0[41u].w) ? _2356 : (isnan(_2356) ? cbSceneParam._m0[41u].w : max(_2356, cbSceneParam._m0[41u].w));
            float _2403 = (cbSceneParam._m0[33u].x - sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014))) * cbSceneParam._m0[33u].y;
            float _4557 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
            float _2410 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2216, cbSceneParam._m0[33u].w + _2217), _2360), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2216, _2217 - cbSceneParam._m0[33u].z), _2360), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2216 - cbSceneParam._m0[33u].z, _2217 - cbSceneParam._m0[33u].w), _2360), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2216 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2217), _2360), 0.0)).x), vec4(0.25)));
            float _2414 = 1.0 - (_2410 * cbSceneParam._m0[34u].x);
            float _2415 = 1.0 - (_2410 * cbSceneParam._m0[34u].y);
            float _2416 = 1.0 - (_2410 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2416) ? _2163 : (isnan(_2163) ? _2416 : min(_2163, _2416));
            frontier_phi_45_44_ladder_1 = isnan(_2415) ? _2162 : (isnan(_2162) ? _2415 : min(_2162, _2415));
            frontier_phi_45_44_ladder_2 = isnan(_2414) ? _2161 : (isnan(_2161) ? _2414 : min(_2161, _2414));
        }
        else
        {
            frontier_phi_45_44_ladder = _2163;
            frontier_phi_45_44_ladder_1 = _2162;
            frontier_phi_45_44_ladder_2 = _2161;
        }
        _2227 = frontier_phi_45_44_ladder_2;
        _2229 = frontier_phi_45_44_ladder_1;
        _2231 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2227 = _2161;
        _2229 = _2162;
        _2231 = _2163;
    }
    uvec4 _2236 = floatBitsToUint(cbInstanceData._m0[_829 + 5u]);
    uint _2238 = _2236.x * 14u;
    uint _2239 = _2238 + 13u;
    float _2246 = _902 + (-1.0);
    float _2251 = (cbLight._m0[_2239].x * _2246) + 1.0;
    float _2252 = (cbLight._m0[_2239].y * _2246) + 1.0;
    float _2253 = (cbLight._m0[_2239].z * _2246) + 1.0;
    float _2254 = (cbLight._m0[_2239].w * _2246) + 1.0;
    uint _2255 = _2238 + 5u;
    float _2261 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2265 = _2238 + 4u;
    float _2275 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2279 = _2238 | 1u;
    float _2290 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_672, _673, _674));
    float _2293 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_672, _673, _674));
    float _4593 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _4604 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2298 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2300 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * 0.3183098733425140380859375;
    float _2307 = ((cbLight._m0[_2255].x * _2261) * _2300) + (((cbLight._m0[_2265].x * _2227) * _2275) * _2298);
    float _2308 = ((_2261 * cbLight._m0[_2255].y) * _2300) + (((cbLight._m0[_2265].y * _2229) * _2275) * _2298);
    float _2309 = ((_2261 * cbLight._m0[_2255].z) * _2300) + (((cbLight._m0[_2265].z * _2231) * _2275) * _2298);
    uvec4 _2313 = floatBitsToUint(cbLight._m0[_2238 + 12u]);
    bool _2315 = _2313.x == 0u;
    float _2417;
    float _2419;
    float _2421;
    if (_2315)
    {
        _2417 = _2307;
        _2419 = _2308;
        _2421 = _2309;
    }
    else
    {
        uint _2425 = _2238 + 6u;
        float _2441 = (dot(vec3(cbLight._m0[_2238 + 2u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2442 = _2441 * _2441;
        float _4615 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2443 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2444 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2417 = (((cbLight._m0[_2425].x * 0.3183098733425140380859375) * _2443) * _2444) + _2307;
        _2419 = (((cbLight._m0[_2425].y * 0.3183098733425140380859375) * _2443) * _2444) + _2308;
        _2421 = (((cbLight._m0[_2425].z * 0.3183098733425140380859375) * _2443) * _2444) + _2309;
    }
    bool _2424 = _2313.y == 0u;
    float _2479;
    float _2481;
    float _2483;
    if (_2424)
    {
        _2479 = _2417;
        _2481 = _2419;
        _2483 = _2421;
    }
    else
    {
        uint _2652 = _2238 + 7u;
        float _2668 = (dot(vec3(cbLight._m0[_2238 + 3u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2669 = _2668 * _2668;
        float _4631 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2670 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2671 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2479 = (((cbLight._m0[_2652].x * 0.3183098733425140380859375) * _2670) * _2671) + _2417;
        _2481 = (((cbLight._m0[_2652].y * 0.3183098733425140380859375) * _2670) * _2671) + _2419;
        _2483 = (((cbLight._m0[_2652].z * 0.3183098733425140380859375) * _2670) * _2671) + _2421;
    }
    uint _2486 = _2238 + 8u;
    float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _816) * 0.949999988079071044921875);
    float _2500 = _2499 * _2499;
    float _2501 = cbLight._m0[_2238].x + _752;
    float _2502 = cbLight._m0[_2238].y + _753;
    float _2503 = cbLight._m0[_2238].z + _754;
    float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
    float _2508 = _2507 * _2501;
    float _2509 = _2507 * _2502;
    float _2510 = _2507 * _2503;
    float _2511 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2238].xyz));
    float _4647 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _4658 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2515 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2516 = dot(vec3(_672, _673, _674), vec3(_2508, _2509, _2510));
    float _4669 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2520 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2508, _2509, _2510));
    float _4680 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = _2500 * _2500;
    float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
    float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
    float _2537 = 0.959999978542327880859375 - _884;
    float _2539 = 0.959999978542327880859375 - _885;
    float _2540 = 0.959999978542327880859375 - _886;
    float _2547 = 1.0 - _2500;
    float _2558 = (0.5 / (((_2515 * ((_2514 * _2547) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2547) + _2500) * _2514))) * _2514;
    float _4691 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2560 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
    uint _2574 = _2238 + 9u;
    float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _816) * 0.949999988079071044921875);
    float _2586 = _2585 * _2585;
    float _2587 = cbLight._m0[_2279].x + _752;
    float _2588 = cbLight._m0[_2279].y + _753;
    float _2589 = cbLight._m0[_2279].z + _754;
    float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
    float _2594 = _2593 * _2587;
    float _2595 = _2593 * _2588;
    float _2596 = _2593 * _2589;
    float _2597 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2279].xyz));
    float _4702 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2601 = dot(vec3(_672, _673, _674), vec3(_2594, _2595, _2596));
    float _4713 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2605 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2594, _2595, _2596));
    float _4724 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2609 = _2586 * _2586;
    float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
    float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
    float _2627 = 1.0 - _2586;
    float _2637 = (0.5 / (((_2515 * ((_2600 * _2627) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2627) + _2586) * _2600))) * _2600;
    float _4735 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2639 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
    float _2649 = (((((_2620 * _2537) + _887) * cbLight._m0[_2574].x) * _2639) * _2261) + ((((cbLight._m0[_2486].x * _2227) * ((_2536 * _2537) + _887)) * _2560) * _2275);
    float _2650 = (((((_2620 * _2539) + _889) * cbLight._m0[_2574].y) * _2639) * _2261) + ((((cbLight._m0[_2486].y * _2229) * ((_2536 * _2539) + _889)) * _2560) * _2275);
    float _2651 = (((((_2620 * _2540) + _890) * cbLight._m0[_2574].z) * _2639) * _2261) + ((((cbLight._m0[_2486].z * _2231) * ((_2536 * _2540) + _890)) * _2560) * _2275);
    float _2707;
    float _2709;
    float _2711;
    if (_2315)
    {
        _2707 = _2649;
        _2709 = _2650;
        _2711 = _2651;
    }
    else
    {
        uint _2713 = _2238 + 2u;
        uint _2717 = _2238 + 10u;
        float _2731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2713].w)) * _816) * 0.949999988079071044921875);
        float _2732 = _2731 * _2731;
        float _2733 = cbLight._m0[_2713].x + _752;
        float _2734 = cbLight._m0[_2713].y + _753;
        float _2735 = cbLight._m0[_2713].z + _754;
        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
        float _2740 = _2739 * _2733;
        float _2741 = _2739 * _2734;
        float _2742 = _2739 * _2735;
        float _2743 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2713].xyz));
        float _4746 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2747 = dot(vec3(_672, _673, _674), vec3(_2740, _2741, _2742));
        float _4757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2751 = dot(vec3(cbLight._m0[_2713].xyz), vec3(_2740, _2741, _2742));
        float _4768 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2755 = _2732 * _2732;
        float _2759 = ((_2750 * _2750) * (_2755 + (-1.0))) + 1.0;
        float _2766 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
        float _2773 = 1.0 - _2732;
        float _2783 = (0.5 / (((_2515 * ((_2746 * _2773) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2773) + _2732) * _2746))) * _2746;
        float _4779 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2785 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2755 / ((_2759 * _2759) * 3.141590118408203125));
        float _2786 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2707 = (((((_2766 * _2537) + _887) * cbLight._m0[_2717].x) * _2785) * _2786) + _2649;
        _2709 = (((((_2766 * _2539) + _889) * cbLight._m0[_2717].y) * _2785) * _2786) + _2650;
        _2711 = (((((_2766 * _2540) + _890) * cbLight._m0[_2717].z) * _2785) * _2786) + _2651;
    }
    float _2817;
    float _2819;
    float _2821;
    if (_2424)
    {
        _2817 = _2707;
        _2819 = _2709;
        _2821 = _2711;
    }
    else
    {
        uint _2828 = _2238 + 3u;
        uint _2832 = _2238 + 11u;
        float _2846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2828].w)) * _816) * 0.949999988079071044921875);
        float _2847 = _2846 * _2846;
        float _2848 = cbLight._m0[_2828].x + _752;
        float _2849 = cbLight._m0[_2828].y + _753;
        float _2850 = cbLight._m0[_2828].z + _754;
        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
        float _2855 = _2854 * _2848;
        float _2856 = _2854 * _2849;
        float _2857 = _2854 * _2850;
        float _2858 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2828].xyz));
        float _4795 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2862 = dot(vec3(_672, _673, _674), vec3(_2855, _2856, _2857));
        float _4806 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2866 = dot(vec3(cbLight._m0[_2828].xyz), vec3(_2855, _2856, _2857));
        float _4817 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2870 = _2847 * _2847;
        float _2874 = ((_2865 * _2865) * (_2870 + (-1.0))) + 1.0;
        float _2881 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
        float _2888 = 1.0 - _2847;
        float _2898 = (0.5 / (((_2515 * ((_2861 * _2888) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2888) + _2847) * _2861))) * _2861;
        float _4828 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2900 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2870 / ((_2874 * _2874) * 3.141590118408203125));
        float _2901 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2817 = (((((_2881 * _2537) + _887) * cbLight._m0[_2832].x) * _2900) * _2901) + _2707;
        _2819 = (((((_2881 * _2539) + _889) * cbLight._m0[_2832].y) * _2900) * _2901) + _2709;
        _2821 = (((((_2881 * _2540) + _890) * cbLight._m0[_2832].z) * _2900) * _2901) + _2711;
    }
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_2236.y == 0u)
    {
        uvec4 _2922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2923 = _2922.x;
        uint _2934 = uint((float(_2922.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2923))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2923)));
        float _2944 = (log2(_2014 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2945 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        uint _2948 = uint(isnan(14.0) ? _2945 : (isnan(_2945) ? 14.0 : min(_2945, 14.0)));
        uvec4 _2953 = texelFetch(g_lightClusterGridBuffer, int(((_2948 << 2u) + (_2934 << 6u)) >> 2u));
        uint _2954 = _2953.x;
        uint _2955 = _2922.z;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((((1u << ((_2955 >> 4u) & 15u)) + 4294967295u) & _2954) == 0u) || ((_2955 & 240u) == 0u))
        {
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
        }
        else
        {
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            uint _3209 = 0u;
            uint _3218;
            bool _3219;
            for (;;)
            {
                _3218 = texelFetch(g_lightClassification, int((((_2948 << 5u) + (_2934 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                _3219 = _3218 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3219)
                {
                    frontier_phi_79_pred = _3206;
                    frontier_phi_79_pred_1 = _3208;
                    frontier_phi_79_pred_2 = _3207;
                    frontier_phi_79_pred_3 = _3205;
                    frontier_phi_79_pred_4 = _3204;
                    frontier_phi_79_pred_5 = _3203;
                }
                else
                {
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    uint _3354;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3218;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    for (;;)
                    {
                        uint _3358 = uint(findLSB(_3354)) + (_3209 << 5u);
                        uint _3355 = (_3354 + 4294967295u) & _3354;
                        uint _3360 = _3358 * 48u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 3u)).x));
                        uint _3380 = (_3358 * 48u) + 4u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 3u)).x));
                        uint _3399 = (_3358 * 48u) + 8u;
                        vec3 _3410 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x));
                        float _3414 = _3374.x - _2012;
                        float _3415 = _3374.y - _2013;
                        float _3416 = _3374.z - _2014;
                        float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                        float _3420 = inversesqrt(_3417);
                        float _3421 = _3420 * _3414;
                        float _3422 = _3420 * _3415;
                        float _3423 = _3420 * _3416;
                        float _3424 = dot(vec3(_797, _800, _803), vec3(_3421, _3422, _3423));
                        float _3429 = 1.0 - (_3417 * _3374.w);
                        float _4854 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3431 = sqrt(_3417) * _3393.w;
                        float _3434 = 1.39999997615814208984375 / (_3431 + 1.39999997615814208984375);
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3424) + _3435;
                        float _3441 = _3431 * _3431;
                        float _3445 = ((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3430) / ((_3441 * 0.699999988079071044921875) + 1.0);
                        float _3449 = (-0.0) - _2012;
                        float _3450 = (-0.0) - _2013;
                        float _3451 = (-0.0) - _2014;
                        float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                        float _3456 = _3455 * _3449;
                        float _3457 = _3455 * _3450;
                        float _3458 = _3455 * _3451;
                        float _3465 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                        float _3466 = 1.0 - _918;
                        float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                        float _3474 = _3473 * _3473;
                        float _3475 = _3474 * _3474;
                        float _3476 = _3456 + _3421;
                        float _3477 = _3457 + _3422;
                        float _3478 = _3458 + _3423;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3486 = dot(vec3(_797, _800, _803), vec3(_3456, _3457, _3458));
                        float _4870 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3489 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3490 = dot(vec3(_797, _800, _803), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                        float _4881 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3493 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                        float _3498 = _3434 * _3474;
                        float _3499 = _3498 * _3498;
                        float _3502 = ((1.0 - _3499) * _3424) + _3499;
                        float _4892 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3503 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3504 = 1.0 - _3474;
                        float _3514 = (0.5 / (((_3503 * ((_3489 * _3504) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3474) * _3489))) * _3503;
                        float _4903 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3525 = (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3497 * _3497) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125))) * _3430;
                        _3278 = (_3445 * _3393.x) + _3351;
                        _3279 = (_3445 * _3393.y) + _3352;
                        _3280 = (_3445 * _3393.z) + _3353;
                        _3275 = (_3525 * _3410.x) + _3348;
                        _3276 = (_3525 * _3410.y) + _3349;
                        _3277 = (_3525 * _3410.z) + _3350;
                        if (_3355 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3355;
                        }
                    }
                    frontier_phi_79_pred = _3278;
                    frontier_phi_79_pred_1 = _3280;
                    frontier_phi_79_pred_2 = _3279;
                    frontier_phi_79_pred_3 = _3277;
                    frontier_phi_79_pred_4 = _3276;
                    frontier_phi_79_pred_5 = _3275;
                }
                _3058 = frontier_phi_79_pred;
                _3062 = frontier_phi_79_pred_1;
                _3060 = frontier_phi_79_pred_2;
                _3056 = frontier_phi_79_pred_3;
                _3054 = frontier_phi_79_pred_4;
                _3052 = frontier_phi_79_pred_5;
                uint _3210 = _3209 + 1u;
                if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3203 = _3052;
                    _3204 = _3054;
                    _3205 = _3056;
                    _3206 = _3058;
                    _3207 = _3060;
                    _3208 = _3062;
                    _3209 = _3210;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
        }
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.z;
        uint _3068 = (_3066 >> 8u) & 15u;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        if (((4294967295u << _3068) & _2954) == 0u)
        {
            _3171 = _3051;
            _3173 = _3053;
            _3175 = _3055;
            _3177 = _3057;
            _3179 = _3059;
            _3181 = _3061;
        }
        else
        {
            float _3196 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
            float _3197 = _3196 * _2012;
            float _3198 = _3196 * _2013;
            float _3199 = _3196 * _2014;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_3068 < ((_3066 >> 12u) & 15u))
            {
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3331 = _3051;
                float _3332 = _3053;
                float _3333 = _3055;
                float _3334 = _3057;
                float _3335 = _3059;
                float _3336 = _3061;
                uint _3337 = _3068;
                uint _3346;
                bool _3347;
                for (;;)
                {
                    _3346 = texelFetch(g_lightClassification, int((((_2948 << 5u) + (_2934 << 9u)) + (_3337 << 2u)) >> 2u)).x;
                    _3347 = _3346 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3347)
                    {
                        frontier_phi_90_pred = _3333;
                        frontier_phi_90_pred_1 = _3334;
                        frontier_phi_90_pred_2 = _3336;
                        frontier_phi_90_pred_3 = _3335;
                        frontier_phi_90_pred_4 = _3332;
                        frontier_phi_90_pred_5 = _3331;
                    }
                    else
                    {
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3552 = _3331;
                        float _3553 = _3332;
                        float _3554 = _3333;
                        float _3555 = _3334;
                        float _3556 = _3335;
                        float _3557 = _3336;
                        uint _3558 = _3346;
                        uint _3559;
                        vec4 _3584;
                        float _3585;
                        vec4 _3600;
                        vec3 _3612;
                        vec4 _3628;
                        vec4 _3643;
                        float _3689;
                        bool _3690;
                        for (;;)
                        {
                            uint _3569 = ((_3337 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3558));
                            _3559 = (_3558 + 4294967295u) & _3558;
                            uint _3571 = _3569 * 40u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3585 = _3584.w;
                            uint _3587 = (_3569 * 40u) + 4u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3569 * 40u) + 8u;
                            _3612 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x));
                            uint _3615 = (_3569 * 40u) + 16u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3569 * 40u) + 20u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3569 * 40u) + 24u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3664 = (_3569 * 40u) + 28u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            _3689 = fma(_2014, _3677.z, fma(_2013, _3677.y, _3677.x * _2012)) + _3677.w;
                            _3690 = !((fma(_2014, _3658.z, fma(_2013, _3658.y, _3658.x * _2012)) + _3658.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3690)
                            {
                                float _3717 = _3584.x - _2012;
                                float _3718 = _3584.y - _2013;
                                float _3719 = _3584.z - _2014;
                                float _3720 = dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719));
                                float _3723 = inversesqrt(_3720);
                                float _3724 = _3723 * _3717;
                                float _3725 = _3723 * _3718;
                                float _3726 = _3723 * _3719;
                                float _3730 = 1.0 - (_3720 / (_3585 * _3585));
                                float _4914 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3735 = sqrt(_3720) * _3600.w;
                                float _3737 = 1.39999997615814208984375 / (_3735 + 1.39999997615814208984375);
                                float _3738 = _3737 * _3737;
                                float _3741 = ((1.0 - _3738) * dot(vec3(_3724, _3725, _3726), vec3(_797, _800, _803))) + _3738;
                                float _3744 = _3735 * _3735;
                                float _3748 = (fma(_2014, _3628.z, fma(_2013, _3628.y, _3628.x * _2012)) + _3628.w) / _3689;
                                float _3749 = (fma(_2014, _3643.z, fma(_2013, _3643.y, _3643.x * _2012)) + _3643.w) / _3689;
                                float _3753 = 1.0 - dot(vec2(_3748, _3749), vec2(_3748, _3749));
                                float _4930 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3755 = _3754 * (((isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0))) * _3731) / ((_3744 * 0.699999988079071044921875) + 1.0));
                                float _3767 = exp2(log2(1.0 / ((_3744 * 3.5) + 5.0)) * 0.25);
                                float _3768 = 1.0 - _918;
                                float _3775 = sqrt(1.0 - ((1.0 - (_3768 * _3768)) * (1.0 - (_3767 * _3767))));
                                float _3776 = _3775 * _3775;
                                float _3777 = _3776 * _3776;
                                float _3778 = _3724 - _3197;
                                float _3779 = _3725 - _3198;
                                float _3780 = _3726 - _3199;
                                float _3784 = inversesqrt(dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780)));
                                float _3788 = dot(vec3(_797, _800, _803), vec3((-0.0) - _3197, (-0.0) - _3198, (-0.0) - _3199));
                                float _4941 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3792 = dot(vec3(_797, _800, _803), vec3(_3784 * _3778, _3784 * _3779, _3784 * _3780));
                                float _4952 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3795 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3799 = ((_3795 * _3795) * (_3777 + (-1.0))) + 1.0;
                                float _3800 = _3737 * _3776;
                                float _3801 = _3800 * _3800;
                                float _3807 = ((1.0 - _3801) * dot(vec3(_797, _800, _803), vec3(_3724, _3725, _3726))) + _3801;
                                float _4963 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3809 = 1.0 - _3776;
                                float _3819 = (0.5 / (((_3808 * ((_3791 * _3809) + _3776)) + 9.9999999392252902907785028219223e-09) + (((_3808 * _3809) + _3776) * _3791))) * _3808;
                                float _4974 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3829 = (_3754 * _3731) * (((_3777 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3799 * _3799) * ((_3744 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3755 * _3600.z;
                                frontier_phi_96_pred_1 = _3755 * _3600.y;
                                frontier_phi_96_pred_2 = _3755 * _3600.x;
                                frontier_phi_96_pred_3 = _3829 * _3612.z;
                                frontier_phi_96_pred_4 = _3829 * _3612.y;
                                frontier_phi_96_pred_5 = _3829 * _3612.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3838 = frontier_phi_96_pred;
                            _3837 = frontier_phi_96_pred_1;
                            _3836 = frontier_phi_96_pred_2;
                            _3835 = frontier_phi_96_pred_3;
                            _3834 = frontier_phi_96_pred_4;
                            _3833 = frontier_phi_96_pred_5;
                            _3542 = _3836 + _3555;
                            _3543 = _3837 + _3556;
                            _3544 = _3838 + _3557;
                            _3539 = _3833 + _3552;
                            _3540 = _3834 + _3553;
                            _3541 = _3835 + _3554;
                            if (_3559 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3559;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3541;
                        frontier_phi_90_pred_1 = _3542;
                        frontier_phi_90_pred_2 = _3544;
                        frontier_phi_90_pred_3 = _3543;
                        frontier_phi_90_pred_4 = _3540;
                        frontier_phi_90_pred_5 = _3539;
                    }
                    _3176 = frontier_phi_90_pred;
                    _3178 = frontier_phi_90_pred_1;
                    _3182 = frontier_phi_90_pred_2;
                    _3180 = frontier_phi_90_pred_3;
                    _3174 = frontier_phi_90_pred_4;
                    _3172 = frontier_phi_90_pred_5;
                    uint _3338 = _3337 + 1u;
                    if (_3338 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3331 = _3172;
                        _3332 = _3174;
                        _3333 = _3176;
                        _3334 = _3178;
                        _3335 = _3180;
                        _3336 = _3182;
                        _3337 = _3338;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _3180;
                frontier_phi_71_72_ladder_1 = _3182;
                frontier_phi_71_72_ladder_2 = _3178;
                frontier_phi_71_72_ladder_3 = _3176;
                frontier_phi_71_72_ladder_4 = _3174;
                frontier_phi_71_72_ladder_5 = _3172;
            }
            else
            {
                frontier_phi_71_72_ladder = _3059;
                frontier_phi_71_72_ladder_1 = _3061;
                frontier_phi_71_72_ladder_2 = _3057;
                frontier_phi_71_72_ladder_3 = _3055;
                frontier_phi_71_72_ladder_4 = _3053;
                frontier_phi_71_72_ladder_5 = _3051;
            }
            _3171 = frontier_phi_71_72_ladder_5;
            _3173 = frontier_phi_71_72_ladder_4;
            _3175 = frontier_phi_71_72_ladder_3;
            _3177 = frontier_phi_71_72_ladder_2;
            _3179 = frontier_phi_71_72_ladder;
            _3181 = frontier_phi_71_72_ladder_1;
        }
        float _3186 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
        _2966 = (_3186 * _3177) + _2479;
        _2968 = (_3186 * _3179) + _2481;
        _2970 = (_3186 * _3181) + _2483;
        _2972 = ((_3171 * _887) * _3186) + _2817;
        _2974 = ((_3173 * _889) * _3186) + _2819;
        _2976 = ((_3175 * _890) * _3186) + _2821;
    }
    else
    {
        _2966 = _2479;
        _2968 = _2481;
        _2970 = _2483;
        _2972 = _2817;
        _2974 = _2819;
        _2976 = _2821;
    }
    vec4 _2982 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4990 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _5001 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _5012 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _3006 = (((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2966 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _902))) + ((_2972 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1743)) * cbPerFrame._m0[3u].x)) + (_2982.x * cbMtdParam._m0[3u].x);
    float _3008 = ((_2982.y * cbMtdParam._m0[3u].x) + ((_2974 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1743)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2968 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _902)));
    float _3010 = ((_2982.z * cbMtdParam._m0[3u].x) + ((_2976 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1743)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2970 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _902)));
    float _3011 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
    float _3012 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
    float _3013 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
    uint _3014 = _829 + 6u;
    float _3022 = _774 / cbSceneParam._m0[86u].x;
    float _3023 = _775 / cbSceneParam._m0[86u].y;
    vec4 _3037 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3039 = _3037.x;
    float _3040 = _3037.y;
    float _3041 = _3037.z;
    float _3042 = _3037.w;
    float _3113;
    float _3115;
    float _3117;
    float _3119;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _3076 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _3077 = _3076 / _695;
        float _3088 = _3077 * _745;
        float _3089 = _746 * _3077;
        float _3090 = (-0.0) - _3089;
        float _3091 = _3077 * _747;
        float _3093 = (cbSceneParam._m0[77u].w * _3090) / _3076;
        float _3094 = _3093 + cbSceneParam._m0[79u].w;
        float _3095 = cbSceneParam._m0[79u].w - _3089;
        float _3101 = sqrt(((_3088 * _3088) + (_3089 * _3089)) + (_3091 * _3091));
        float _3104 = (1.0 - (cbSceneParam._m0[77u].w / _3076)) * _3101;
        float _3109 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3111 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3288;
        if (abs((_3090 - _3093) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3288 = ((((_3094 > 0.0) ? exp2(_3109 * _3094) : (2.0 - exp2(_3111 * _3094))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3104;
        }
        else
        {
            float _3232 = 1.0 / cbSceneParam._m0[80u].x;
            float _3233 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : max(_3094, _3095));
            float _3234 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : min(_3094, _3095));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            _3288 = ((abs(_3101 / _3090) * cbSceneParam._m0[80u].y) * ((((_3243 - _3244) * 2.0) - ((exp2(_3109 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0)))) - exp2(_3109 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))))) * _3232)) - ((exp2(_3111 * _3243) - exp2(_3111 * _3244)) * _3232))) + (_3104 * cbSceneParam._m0[80u].z);
        }
        vec4 _3290 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, 1.0), 0.0);
        float _3299 = exp2((_3288 * (-1.44269502162933349609375)) * (1.0 - _3290.w));
        float _3300 = log2(_3299);
        float _3316 = log2(_3042);
        _3113 = (exp2(_3316 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].x)) * _3290.x) / cbSceneParam._m0[78u].x)) + _3039;
        _3115 = (exp2(_3316 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].y)) * _3290.y) / cbSceneParam._m0[78u].y)) + _3040;
        _3117 = (exp2(_3316 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].z)) * _3290.z) / cbSceneParam._m0[78u].z)) + _3041;
        _3119 = _3299 * _3042;
    }
    else
    {
        _3113 = _3039;
        _3115 = _3040;
        _3117 = _3041;
        _3119 = _3042;
    }
    bool _3326;
    vec4 _3129;
    vec4 _3151;
    float _3153;
    float _3157;
    float _3158;
    float _3159;
    float _3160;
    bool _3170;
    for (;;)
    {
        _3129 = cbMatDynParam._m0[0u];
        float _3131 = roundEven(_3129.y);
        bool _3132 = _3131 == 3.0;
        float _3133 = log2(_3119);
        float _3140 = exp2(_3133 * cbSceneParam._m0[78u].x) * _3011;
        float _3141 = exp2(_3133 * cbSceneParam._m0[78u].y) * _3012;
        float _3142 = exp2(_3133 * cbSceneParam._m0[78u].z) * _3013;
        float _3149 = _761 + (-0.5);
        _3151 = cbMtdParam._m0[1u];
        _3153 = _3151.y * _3149;
        float _3156 = (_3131 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3157 = _3156 * (_3132 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3113)));
        _3158 = _3156 * (_3132 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3115)));
        _3159 = _3156 * (_3132 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3117)));
        _3160 = _3149 * 0.999000012874603271484375;
        _3170 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3170)
        {
            if ((cbInstanceData._m0[_829 + 7u].x + _3160) < 0.5)
            {
                _3326 = true;
                break;
            }
        }
        uint _3267 = _831 + uint(_3129.w);
        if ((cbInstanceData._m0[_3267].w < 1.0) && ((cbInstanceData._m0[_3267].w + _3160) < 0.5))
        {
            _3326 = true;
            break;
        }
        if ((_3153 + 1.0) < _3151.x)
        {
            _3326 = true;
            break;
        }
        _3326 = false;
        break;
    }
    float _3530;
    if (_3326)
    {
        discard_state = true;
        _3530 = 0.0;
    }
    else
    {
        _3530 = cbInstanceData._m0[_3014].w;
    }
    SV_Target.x = _3157;
    SV_Target.y = _3158;
    SV_Target.z = _3159;
    SV_Target.w = _3530;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3014].w;
    discard_exit();
}


