#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1110;
float _3802;
float _3803;
float _3804;
float _3805;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _269 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _280 = exp2(log2(_269.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _281;
    float _283;
    float _285;
    if (_280)
    {
        _281 = cbMtdParam._m0[19u].x;
        _283 = cbMtdParam._m0[19u].y;
        _285 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _281 = cbMtdParam._m0[18u].x;
        _283 = cbMtdParam._m0[18u].y;
        _285 = cbMtdParam._m0[18u].z;
    }
    float _291;
    if (_280)
    {
        _291 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _291 = cbMtdParam._m0[20u].z;
    }
    float _297;
    float _299;
    if (_280)
    {
        _297 = cbMtdParam._m0[28u].z;
        _299 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _297 = cbMtdParam._m0[24u].x;
        _299 = cbMtdParam._m0[24u].y;
    }
    float _301 = _297 * TEXCOORD.x;
    float _302 = _299 * TEXCOORD.y;
    float _314 = floor(_291);
    vec4 _317 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _301) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _302) + cbTextureTilingScale._m0[8u].w, _314));
    vec4 _339 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _347 = (((_281 * cbMtdParam._m0[20u].w) * _317.x) * cbMtdParam._m0[9u].x) * _339.x;
    float _351 = (((_283 * cbMtdParam._m0[20u].w) * _317.y) * cbMtdParam._m0[9u].y) * _339.y;
    float _355 = (((_285 * cbMtdParam._m0[20u].w) * _317.z) * cbMtdParam._m0[9u].z) * _339.z;
    vec4 _367 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _371 = _367.z;
    vec4 _385 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _301) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _302) + cbTextureTilingScale._m0[10u].w, _314));
    float _189[2];
    float _190[2];
    _189[0u] = cbMtdParam._m0[27u].z;
    _190[0u] = cbMtdParam._m0[27u].w;
    _189[1u] = cbMtdParam._m0[28u].x;
    _190[1u] = cbMtdParam._m0[28u].y;
    float _402 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _405 = uint(int(isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0))));
    float _411 = (_385.x + _367.w) + _190[_405];
    vec4 _429 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w, _314));
    float _436 = (_429.x * 2.0) + (-1.0);
    float _437 = (_429.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_436, _437), vec2(_436, _437));
    float _3824 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _443 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    float _453 = (cbMtdParam._m0[21u].x * (((_371 * 2.0) * (_429.z + _189[_405])) - _371)) + _371;
    float _457 = (cbMtdParam._m0[21u].y * ((_367.x * 2.0) + (-1.0))) + _436;
    float _458 = (cbMtdParam._m0[21u].y * ((_367.y * 2.0) + (-1.0))) + _437;
    float _461 = fma(_443, _240, fma(_458, _232 * TANGENT.x, (_218 * _210) * _457));
    float _464 = fma(_443, _241, fma(_458, _232 * TANGENT.y, (_218 * _211) * _457));
    float _467 = fma(_443, _242, fma(_458, _232 * TANGENT.z, (_218 * _212) * _457));
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    float _472 = _471 * _461;
    float _473 = _471 * _464;
    float _474 = _471 * _467;
    float _3835 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _475 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3857 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3868 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3879 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _479 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    vec4 _560 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _562 = _560.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _790 = sqrt(((_546 * _546) + (_547 * _547)) + (_548 * _548));
        float _796 = (cbMatDynParam._m0[5u].x * _790) + cbMatDynParam._m0[5u].y;
        float _3890 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _801 = (cbMatDynParam._m0[5u].z * _790) + cbMatDynParam._m0[5u].w;
        float _3901 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) - _797)) + _797) < ((_562 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _577 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _578 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _580 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _582 = _580.w;
    float _602 = fma(_474, cbSceneParam._m0[5u].z, fma(_473, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _472));
    float _605 = fma(_474, cbSceneParam._m0[6u].z, fma(_473, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _472));
    float _608 = fma(_474, cbSceneParam._m0[7u].z, fma(_473, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _472));
    vec4 _610 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _621 = (((_610.y - _475) + (_610.w * _475)) * cbMtdParam._m0[3u].x) + _475;
    uint _634 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = _634 + 9u;
    uint _637 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3912 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    vec4 _649 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _654 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _665 = (((_654.x - _479) + (_654.w * _479)) * cbMtdParam._m0[3u].x) + _479;
    float _678 = (cbMtdParam._m0[3u].x * (((_646 * _582) - _646) + _649.x)) + _646;
    float _679 = (cbMtdParam._m0[3u].x * (((_647 * _582) - _647) + _649.y)) + _647;
    float _680 = (cbMtdParam._m0[3u].x * (((_648 * _582) - _648) + _649.z)) + _648;
    float _681 = 1.0 - _665;
    float _682 = _681 * _678;
    float _683 = _681 * _679;
    float _684 = _681 * _680;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _665;
    float _690 = (_679 + (-0.039999999105930328369140625)) * _665;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _665;
    float _692 = _689 + 0.039999999105930328369140625;
    float _694 = _690 + 0.039999999105930328369140625;
    float _695 = _691 + 0.039999999105930328369140625;
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _577, cbSceneParam._m0[86u].y * _578));
    float _707 = _704.x * TEXCOORD_4;
    float _708 = dot(vec3(_472, _473, _474), vec3(_553, _554, _555));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _472) - _553;
    float _716 = (_711 * _473) - _554;
    float _717 = (_711 * _474) - _555;
    float _721 = abs(dot(vec3(_553, _554, _555), vec3(_472, _473, _474)));
    float _3945 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_621);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _742 = (1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _743 = _736 * _723;
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771));
        float _838 = fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771));
        float _842 = fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771));
        float _867 = _771 + _472;
        float _868 = _775 + _473;
        float _869 = _779 + _474;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _834;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _838;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _842;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_472, _473, _474), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3993 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_472, _473, _474), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _4026 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_472, _473, _474), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _4059 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771));
        float _1157 = fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771));
        float _1161 = fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771));
        float _1184 = _771 + _472;
        float _1185 = _775 + _473;
        float _1186 = _779 + _474;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_472, _473, _474), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4122 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_472, _473, _474), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4155 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_472, _473, _474), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4188 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = _1110;
        _1431 = _1110;
        _1432 = _1110;
        _1433 = _1110;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1123)) + _1123;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1124)) + _1124;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _715 * 0.5;
    float _1491 = _716 * 0.5;
    float _1492 = _717 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1622 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1625 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1653 = frontier_phi_25_23_ladder;
        }
        float _1825;
        if (_1622 > 0.0)
        {
            _1825 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1825 = frontier_phi_34_30_ladder;
        }
        float _2121;
        if (_1625 > 0.0)
        {
            _2121 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2121 = frontier_phi_46_41_ladder;
        }
        float _2123 = isnan(_1825) ? _1653 : (isnan(_1653) ? _1825 : min(_1653, _1825));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1619) + _1608;
        float _2129 = (_2124 * _1622) + _1612;
        float _2130 = (_2124 * _1625) + _1616;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2131;
        float _2135 = _2131 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 > _2135) || ((_2129 < _2133) || ((_2128 < _2133) || (_2128 > _2135))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2275 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2130, cbModelParam._m0[9u].z, fma(_2129, cbModelParam._m0[9u].y, _2128 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2130, cbModelParam._m0[10u].z, fma(_2129, cbModelParam._m0[10u].y, _2128 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2130, cbModelParam._m0[11u].z, fma(_2129, cbModelParam._m0[11u].y, _2128 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_24_46_ladder = _2275.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2275.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2275.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_24_46_ladder_2;
        _1643 = frontier_phi_24_46_ladder_1;
        _1645 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1559);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1717 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1720 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1830;
        if (_1714 > 0.0)
        {
            _1830 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1830 = frontier_phi_36_32_ladder;
        }
        float _2148;
        if (_1717 > 0.0)
        {
            _2148 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2148 = frontier_phi_48_43_ladder;
        }
        float _2486;
        if (_1720 > 0.0)
        {
            _2486 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2486 = frontier_phi_58_55_ladder;
        }
        float _2488 = isnan(_2148) ? _1830 : (isnan(_1830) ? _2148 : min(_1830, _2148));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1714) + _1703;
        float _2494 = (_2489 * _1717) + _1707;
        float _2495 = (_2489 * _1720) + _1711;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_33_58_ladder = _2617.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2617.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2617.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_33_58_ladder_2;
        _1741 = frontier_phi_33_58_ladder_1;
        _1743 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1650);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1756 = (((_742 * _692) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1758 = (((_742 * _694) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1760 = (((_742 * _695) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1817 = _1804 / _1816;
    float _1818 = _1808 / _1816;
    float _1819 = _1812 / _1816;
    float _1966;
    float _1967;
    float _1968;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1846 = ((uint(_1819 > cbSceneParam._m0[59u].y) + uint(_1819 > cbSceneParam._m0[59u].x)) + uint(_1819 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1847 = _1846 + 43u;
        uint _1855 = _1846 + 44u;
        uint _1863 = _1846 + 45u;
        uint _1871 = _1846 + 46u;
        float _1882 = fma(_1816, cbSceneParam._m0[_1847].w, fma(_1812, cbSceneParam._m0[_1847].z, fma(_1808, cbSceneParam._m0[_1847].y, _1804 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1816, cbSceneParam._m0[_1855].w, fma(_1812, cbSceneParam._m0[_1855].z, fma(_1808, cbSceneParam._m0[_1855].y, _1804 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1816, cbSceneParam._m0[_1871].w, fma(_1812, cbSceneParam._m0[_1871].z, fma(_1808, cbSceneParam._m0[_1871].y, _1804 * cbSceneParam._m0[_1871].x)));
        float _1899 = cbSceneParam._m0[33u].z * _1894;
        float _1901 = cbSceneParam._m0[33u].w * _1894;
        float _1904 = fma(_1816, cbSceneParam._m0[_1863].w, fma(_1812, cbSceneParam._m0[_1863].z, fma(_1808, cbSceneParam._m0[_1863].y, _1804 * cbSceneParam._m0[_1863].x))) / _1894;
        float _1952 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
        float _4314 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1959 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 + _1882) / _1894, (_1901 + _1886) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 + _1882) / _1894, (_1886 - _1899) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1899) / _1894, (_1886 - _1901) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1901) / _1894, (_1899 + _1886) / _1894), _1904), 0.0)).x), vec4(0.25)));
        _1966 = 1.0 - (_1959 * cbSceneParam._m0[34u].x);
        _1967 = 1.0 - (_1959 * cbSceneParam._m0[34u].y);
        _1968 = 1.0 - (_1959 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1966 = 1.0;
        _1967 = 1.0;
        _1968 = 1.0;
    }
    float _2032;
    float _2034;
    float _2036;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2020 = fma(_1816, cbSceneParam._m0[63u].w, fma(_1812, cbSceneParam._m0[63u].z, fma(_1808, cbSceneParam._m0[63u].y, _1804 * cbSceneParam._m0[63u].x)));
        float _2021 = fma(_1816, cbSceneParam._m0[60u].w, fma(_1812, cbSceneParam._m0[60u].z, fma(_1808, cbSceneParam._m0[60u].y, _1804 * cbSceneParam._m0[60u].x))) / _2020;
        float _2022 = fma(_1816, cbSceneParam._m0[61u].w, fma(_1812, cbSceneParam._m0[61u].z, fma(_1808, cbSceneParam._m0[61u].y, _1804 * cbSceneParam._m0[61u].x))) / _2020;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_2021 >= cbSceneParam._m0[64u].x) && (_2022 >= cbSceneParam._m0[64u].y)) && (_2021 <= cbSceneParam._m0[64u].z)) && (_2022 <= cbSceneParam._m0[64u].w))
        {
            float _2161 = fma(_1816, cbSceneParam._m0[62u].w, fma(_1812, cbSceneParam._m0[62u].z, fma(_1808, cbSceneParam._m0[62u].y, _1804 * cbSceneParam._m0[62u].x))) / _2020;
            float _2165 = isnan(cbSceneParam._m0[41u].w) ? _2161 : (isnan(_2161) ? cbSceneParam._m0[41u].w : max(_2161, cbSceneParam._m0[41u].w));
            float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
            float _4330 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
            float _2215 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2021, cbSceneParam._m0[33u].w + _2022), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2021, _2022 - cbSceneParam._m0[33u].z), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].z, _2022 - cbSceneParam._m0[33u].w), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2022), _2165), 0.0)).x), vec4(0.25)));
            float _2219 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
            float _2220 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
            float _2221 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2221) ? _1968 : (isnan(_1968) ? _2221 : min(_1968, _2221));
            frontier_phi_45_44_ladder_1 = isnan(_2220) ? _1967 : (isnan(_1967) ? _2220 : min(_1967, _2220));
            frontier_phi_45_44_ladder_2 = isnan(_2219) ? _1966 : (isnan(_1966) ? _2219 : min(_1966, _2219));
        }
        else
        {
            frontier_phi_45_44_ladder = _1968;
            frontier_phi_45_44_ladder_1 = _1967;
            frontier_phi_45_44_ladder_2 = _1966;
        }
        _2032 = frontier_phi_45_44_ladder_2;
        _2034 = frontier_phi_45_44_ladder_1;
        _2036 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2032 = _1966;
        _2034 = _1967;
        _2036 = _1968;
    }
    uvec4 _2041 = floatBitsToUint(cbInstanceData._m0[_634 + 5u]);
    uint _2043 = _2041.x * 14u;
    uint _2044 = _2043 + 13u;
    float _2051 = _707 + (-1.0);
    float _2056 = (cbLight._m0[_2044].x * _2051) + 1.0;
    float _2057 = (cbLight._m0[_2044].y * _2051) + 1.0;
    float _2058 = (cbLight._m0[_2044].z * _2051) + 1.0;
    float _2059 = (cbLight._m0[_2044].w * _2051) + 1.0;
    uint _2060 = _2043 + 5u;
    float _2066 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2070 = _2043 + 4u;
    float _2080 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2084 = _2043 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_472, _473, _474));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_472, _473, _474));
    float _4366 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4377 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2060].x * _2066) * _2105) + (((cbLight._m0[_2070].x * _2032) * _2080) * _2103);
    float _2113 = ((_2066 * cbLight._m0[_2060].y) * _2105) + (((cbLight._m0[_2070].y * _2034) * _2080) * _2103);
    float _2114 = ((_2066 * cbLight._m0[_2060].z) * _2105) + (((cbLight._m0[_2070].z * _2036) * _2080) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2043 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2120)
    {
        _2222 = _2112;
        _2224 = _2113;
        _2226 = _2114;
    }
    else
    {
        uint _2230 = _2043 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2043 + 2u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4388 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2249 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2112;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2113;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2114;
    }
    bool _2229 = _2118.y == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2229)
    {
        _2284 = _2222;
        _2286 = _2224;
        _2288 = _2226;
    }
    else
    {
        uint _2457 = _2043 + 7u;
        float _2473 = (dot(vec3(cbLight._m0[_2043 + 3u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _2474 = _2473 * _2473;
        float _4404 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2475 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2476 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2284 = (((cbLight._m0[_2457].x * 0.3183098733425140380859375) * _2475) * _2476) + _2222;
        _2286 = (((cbLight._m0[_2457].y * 0.3183098733425140380859375) * _2475) * _2476) + _2224;
        _2288 = (((cbLight._m0[_2457].z * 0.3183098733425140380859375) * _2475) * _2476) + _2226;
    }
    uint _2291 = _2043 + 8u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _621) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2043].x + _553;
    float _2307 = cbLight._m0[_2043].y + _554;
    float _2308 = cbLight._m0[_2043].z + _555;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2043].xyz));
    float _4420 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2320 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2321 = dot(vec3(_472, _473, _474), vec3(_2313, _2314, _2315));
    float _4442 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2313, _2314, _2315));
    float _4453 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2305 * _2305;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
    float _2342 = 0.959999978542327880859375 - _689;
    float _2344 = 0.959999978542327880859375 - _690;
    float _2345 = 0.959999978542327880859375 - _691;
    float _2352 = 1.0 - _2305;
    float _2363 = (0.5 / (((_2320 * ((_2319 * _2352) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2352) + _2305) * _2319))) * _2319;
    float _4464 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    uint _2379 = _2043 + 9u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _621) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2084].x + _553;
    float _2393 = cbLight._m0[_2084].y + _554;
    float _2394 = cbLight._m0[_2084].z + _555;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2084].xyz));
    float _4475 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2406 = dot(vec3(_472, _473, _474), vec3(_2399, _2400, _2401));
    float _4486 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2399, _2400, _2401));
    float _4497 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2391 * _2391;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2432 = 1.0 - _2391;
    float _2442 = (0.5 / (((_2320 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2432) + _2391) * _2405))) * _2405;
    float _4508 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2444 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    float _2454 = (((((_2425 * _2342) + _692) * cbLight._m0[_2379].x) * _2444) * _2066) + ((((cbLight._m0[_2291].x * _2032) * ((_2341 * _2342) + _692)) * _2365) * _2080);
    float _2455 = (((((_2425 * _2344) + _694) * cbLight._m0[_2379].y) * _2444) * _2066) + ((((cbLight._m0[_2291].y * _2034) * ((_2341 * _2344) + _694)) * _2365) * _2080);
    float _2456 = (((((_2425 * _2345) + _695) * cbLight._m0[_2379].z) * _2444) * _2066) + ((((cbLight._m0[_2291].z * _2036) * ((_2341 * _2345) + _695)) * _2365) * _2080);
    float _2512;
    float _2514;
    float _2516;
    if (_2120)
    {
        _2512 = _2454;
        _2514 = _2455;
        _2516 = _2456;
    }
    else
    {
        uint _2518 = _2043 + 2u;
        uint _2522 = _2043 + 10u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _621) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _553;
        float _2539 = cbLight._m0[_2518].y + _554;
        float _2540 = cbLight._m0[_2518].z + _555;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2518].xyz));
        float _4519 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2552 = dot(vec3(_472, _473, _474), vec3(_2545, _2546, _2547));
        float _4530 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4541 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2320 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2578) + _2537) * _2551))) * _2551;
        float _4552 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2512 = (((((_2571 * _2342) + _692) * cbLight._m0[_2522].x) * _2590) * _2591) + _2454;
        _2514 = (((((_2571 * _2344) + _694) * cbLight._m0[_2522].y) * _2590) * _2591) + _2455;
        _2516 = (((((_2571 * _2345) + _695) * cbLight._m0[_2522].z) * _2590) * _2591) + _2456;
    }
    float _2622;
    float _2624;
    float _2626;
    if (_2229)
    {
        _2622 = _2512;
        _2624 = _2514;
        _2626 = _2516;
    }
    else
    {
        uint _2633 = _2043 + 3u;
        uint _2637 = _2043 + 11u;
        float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2633].w)) * _621) * 0.949999988079071044921875);
        float _2652 = _2651 * _2651;
        float _2653 = cbLight._m0[_2633].x + _553;
        float _2654 = cbLight._m0[_2633].y + _554;
        float _2655 = cbLight._m0[_2633].z + _555;
        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
        float _2660 = _2659 * _2653;
        float _2661 = _2659 * _2654;
        float _2662 = _2659 * _2655;
        float _2663 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2633].xyz));
        float _4568 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2667 = dot(vec3(_472, _473, _474), vec3(_2660, _2661, _2662));
        float _4579 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2671 = dot(vec3(cbLight._m0[_2633].xyz), vec3(_2660, _2661, _2662));
        float _4590 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2675 = _2652 * _2652;
        float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
        float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
        float _2693 = 1.0 - _2652;
        float _2703 = (0.5 / (((_2320 * ((_2666 * _2693) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2693) + _2652) * _2666))) * _2666;
        float _4601 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2622 = (((((_2686 * _2342) + _692) * cbLight._m0[_2637].x) * _2705) * _2706) + _2512;
        _2624 = (((((_2686 * _2344) + _694) * cbLight._m0[_2637].y) * _2705) * _2706) + _2514;
        _2626 = (((((_2686 * _2345) + _695) * cbLight._m0[_2637].z) * _2705) * _2706) + _2516;
    }
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_2041.y == 0u)
    {
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.x;
        uint _2739 = uint((float(_2727.y) * floor(float(uint(cbSceneParam._m0[85u].y * _578) / _2728))) + floor(float(uint(cbSceneParam._m0[85u].x * _577) / _2728)));
        float _2749 = (log2(_1819 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        uint _2753 = uint(isnan(14.0) ? _2750 : (isnan(_2750) ? 14.0 : min(_2750, 14.0)));
        uvec4 _2758 = texelFetch(g_lightClusterGridBuffer, int(((_2753 << 2u) + (_2739 << 6u)) >> 2u));
        uint _2759 = _2758.x;
        uint _2760 = _2727.z;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((((1u << ((_2760 >> 4u) & 15u)) + 4294967295u) & _2759) == 0u) || ((_2760 & 240u) == 0u))
        {
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
        }
        else
        {
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            uint _3014 = 0u;
            uint _3023;
            bool _3024;
            for (;;)
            {
                _3023 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                _3024 = _3023 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3024)
                {
                    frontier_phi_79_pred = _3011;
                    frontier_phi_79_pred_1 = _3013;
                    frontier_phi_79_pred_2 = _3012;
                    frontier_phi_79_pred_3 = _3010;
                    frontier_phi_79_pred_4 = _3009;
                    frontier_phi_79_pred_5 = _3008;
                }
                else
                {
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    uint _3159;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3023;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    for (;;)
                    {
                        uint _3163 = uint(findLSB(_3159)) + (_3014 << 5u);
                        uint _3160 = (_3159 + 4294967295u) & _3159;
                        uint _3165 = _3163 * 48u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3185 = (_3163 * 48u) + 4u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3204 = (_3163 * 48u) + 8u;
                        vec3 _3215 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x));
                        float _3219 = _3179.x - _1817;
                        float _3220 = _3179.y - _1818;
                        float _3221 = _3179.z - _1819;
                        float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                        float _3225 = inversesqrt(_3222);
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3229 = dot(vec3(_602, _605, _608), vec3(_3226, _3227, _3228));
                        float _3234 = 1.0 - (_3222 * _3179.w);
                        float _4627 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3236 = sqrt(_3222) * _3198.w;
                        float _3239 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3229) + _3240;
                        float _3246 = _3236 * _3236;
                        float _3250 = ((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3235) / ((_3246 * 0.699999988079071044921875) + 1.0);
                        float _3254 = (-0.0) - _1817;
                        float _3255 = (-0.0) - _1818;
                        float _3256 = (-0.0) - _1819;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3270 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                        float _3271 = 1.0 - _723;
                        float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                        float _3279 = _3278 * _3278;
                        float _3280 = _3279 * _3279;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3283 = _3263 + _3228;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3291 = dot(vec3(_602, _605, _608), vec3(_3261, _3262, _3263));
                        float _4643 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3295 = dot(vec3(_602, _605, _608), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                        float _4654 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                        float _3303 = _3239 * _3279;
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3229) + _3304;
                        float _4665 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3309 = 1.0 - _3279;
                        float _3319 = (0.5 / (((_3308 * ((_3294 * _3309) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3279) * _3294))) * _3308;
                        float _4676 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3330 = (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3302 * _3302) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125))) * _3235;
                        _3083 = (_3250 * _3198.x) + _3156;
                        _3084 = (_3250 * _3198.y) + _3157;
                        _3085 = (_3250 * _3198.z) + _3158;
                        _3080 = (_3330 * _3215.x) + _3153;
                        _3081 = (_3330 * _3215.y) + _3154;
                        _3082 = (_3330 * _3215.z) + _3155;
                        if (_3160 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3160;
                        }
                    }
                    frontier_phi_79_pred = _3083;
                    frontier_phi_79_pred_1 = _3085;
                    frontier_phi_79_pred_2 = _3084;
                    frontier_phi_79_pred_3 = _3082;
                    frontier_phi_79_pred_4 = _3081;
                    frontier_phi_79_pred_5 = _3080;
                }
                _2863 = frontier_phi_79_pred;
                _2867 = frontier_phi_79_pred_1;
                _2865 = frontier_phi_79_pred_2;
                _2861 = frontier_phi_79_pred_3;
                _2859 = frontier_phi_79_pred_4;
                _2857 = frontier_phi_79_pred_5;
                uint _3015 = _3014 + 1u;
                if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3008 = _2857;
                    _3009 = _2859;
                    _3010 = _2861;
                    _3011 = _2863;
                    _3012 = _2865;
                    _3013 = _2867;
                    _3014 = _3015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
        }
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.z;
        uint _2873 = (_2871 >> 8u) & 15u;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((4294967295u << _2873) & _2759) == 0u)
        {
            _2976 = _2856;
            _2978 = _2858;
            _2980 = _2860;
            _2982 = _2862;
            _2984 = _2864;
            _2986 = _2866;
        }
        else
        {
            float _3001 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
            float _3002 = _3001 * _1817;
            float _3003 = _3001 * _1818;
            float _3004 = _3001 * _1819;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2873 < ((_2871 >> 12u) & 15u))
            {
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _3136 = _2856;
                float _3137 = _2858;
                float _3138 = _2860;
                float _3139 = _2862;
                float _3140 = _2864;
                float _3141 = _2866;
                uint _3142 = _2873;
                uint _3151;
                bool _3152;
                for (;;)
                {
                    _3151 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                    _3152 = _3151 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3152)
                    {
                        frontier_phi_90_pred = _3138;
                        frontier_phi_90_pred_1 = _3139;
                        frontier_phi_90_pred_2 = _3141;
                        frontier_phi_90_pred_3 = _3140;
                        frontier_phi_90_pred_4 = _3137;
                        frontier_phi_90_pred_5 = _3136;
                    }
                    else
                    {
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3357 = _3136;
                        float _3358 = _3137;
                        float _3359 = _3138;
                        float _3360 = _3139;
                        float _3361 = _3140;
                        float _3362 = _3141;
                        uint _3363 = _3151;
                        uint _3364;
                        vec4 _3389;
                        float _3390;
                        vec4 _3405;
                        vec3 _3417;
                        vec4 _3433;
                        vec4 _3448;
                        float _3494;
                        bool _3495;
                        for (;;)
                        {
                            uint _3374 = ((_3142 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3363));
                            _3364 = (_3363 + 4294967295u) & _3363;
                            uint _3376 = _3374 * 40u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3390 = _3389.w;
                            uint _3392 = (_3374 * 40u) + 4u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3374 * 40u) + 8u;
                            _3417 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x));
                            uint _3420 = (_3374 * 40u) + 16u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3374 * 40u) + 20u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3374 * 40u) + 24u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3469 = (_3374 * 40u) + 28u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3494 = fma(_1819, _3482.z, fma(_1818, _3482.y, _3482.x * _1817)) + _3482.w;
                            _3495 = !((fma(_1819, _3463.z, fma(_1818, _3463.y, _3463.x * _1817)) + _3463.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3495)
                            {
                                float _3522 = _3389.x - _1817;
                                float _3523 = _3389.y - _1818;
                                float _3524 = _3389.z - _1819;
                                float _3525 = dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524));
                                float _3528 = inversesqrt(_3525);
                                float _3529 = _3528 * _3522;
                                float _3530 = _3528 * _3523;
                                float _3531 = _3528 * _3524;
                                float _3535 = 1.0 - (_3525 / (_3390 * _3390));
                                float _4687 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3540 = sqrt(_3525) * _3405.w;
                                float _3542 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                                float _3543 = _3542 * _3542;
                                float _3546 = ((1.0 - _3543) * dot(vec3(_3529, _3530, _3531), vec3(_602, _605, _608))) + _3543;
                                float _3549 = _3540 * _3540;
                                float _3553 = (fma(_1819, _3433.z, fma(_1818, _3433.y, _3433.x * _1817)) + _3433.w) / _3494;
                                float _3554 = (fma(_1819, _3448.z, fma(_1818, _3448.y, _3448.x * _1817)) + _3448.w) / _3494;
                                float _3558 = 1.0 - dot(vec2(_3553, _3554), vec2(_3553, _3554));
                                float _4703 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3560 = _3559 * (((isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0))) * _3536) / ((_3549 * 0.699999988079071044921875) + 1.0));
                                float _3572 = exp2(log2(1.0 / ((_3549 * 3.5) + 5.0)) * 0.25);
                                float _3573 = 1.0 - _723;
                                float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                                float _3581 = _3580 * _3580;
                                float _3582 = _3581 * _3581;
                                float _3583 = _3529 - _3002;
                                float _3584 = _3530 - _3003;
                                float _3585 = _3531 - _3004;
                                float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                                float _3593 = dot(vec3(_602, _605, _608), vec3((-0.0) - _3002, (-0.0) - _3003, (-0.0) - _3004));
                                float _4714 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3597 = dot(vec3(_602, _605, _608), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                                float _4725 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                                float _3605 = _3542 * _3581;
                                float _3606 = _3605 * _3605;
                                float _3612 = ((1.0 - _3606) * dot(vec3(_602, _605, _608), vec3(_3529, _3530, _3531))) + _3606;
                                float _4736 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3614 = 1.0 - _3581;
                                float _3624 = (0.5 / (((_3613 * ((_3596 * _3614) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3613 * _3614) + _3581) * _3596))) * _3613;
                                float _4747 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3634 = (_3559 * _3536) * (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3604 * _3604) * ((_3549 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3560 * _3405.z;
                                frontier_phi_96_pred_1 = _3560 * _3405.y;
                                frontier_phi_96_pred_2 = _3560 * _3405.x;
                                frontier_phi_96_pred_3 = _3634 * _3417.z;
                                frontier_phi_96_pred_4 = _3634 * _3417.y;
                                frontier_phi_96_pred_5 = _3634 * _3417.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_96_pred;
                            _3642 = frontier_phi_96_pred_1;
                            _3641 = frontier_phi_96_pred_2;
                            _3640 = frontier_phi_96_pred_3;
                            _3639 = frontier_phi_96_pred_4;
                            _3638 = frontier_phi_96_pred_5;
                            _3347 = _3641 + _3360;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            _3344 = _3638 + _3357;
                            _3345 = _3639 + _3358;
                            _3346 = _3640 + _3359;
                            if (_3364 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3364;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3346;
                        frontier_phi_90_pred_1 = _3347;
                        frontier_phi_90_pred_2 = _3349;
                        frontier_phi_90_pred_3 = _3348;
                        frontier_phi_90_pred_4 = _3345;
                        frontier_phi_90_pred_5 = _3344;
                    }
                    _2981 = frontier_phi_90_pred;
                    _2983 = frontier_phi_90_pred_1;
                    _2987 = frontier_phi_90_pred_2;
                    _2985 = frontier_phi_90_pred_3;
                    _2979 = frontier_phi_90_pred_4;
                    _2977 = frontier_phi_90_pred_5;
                    uint _3143 = _3142 + 1u;
                    if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3136 = _2977;
                        _3137 = _2979;
                        _3138 = _2981;
                        _3139 = _2983;
                        _3140 = _2985;
                        _3141 = _2987;
                        _3142 = _3143;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2985;
                frontier_phi_71_72_ladder_1 = _2987;
                frontier_phi_71_72_ladder_2 = _2983;
                frontier_phi_71_72_ladder_3 = _2981;
                frontier_phi_71_72_ladder_4 = _2979;
                frontier_phi_71_72_ladder_5 = _2977;
            }
            else
            {
                frontier_phi_71_72_ladder = _2864;
                frontier_phi_71_72_ladder_1 = _2866;
                frontier_phi_71_72_ladder_2 = _2862;
                frontier_phi_71_72_ladder_3 = _2860;
                frontier_phi_71_72_ladder_4 = _2858;
                frontier_phi_71_72_ladder_5 = _2856;
            }
            _2976 = frontier_phi_71_72_ladder_5;
            _2978 = frontier_phi_71_72_ladder_4;
            _2980 = frontier_phi_71_72_ladder_3;
            _2982 = frontier_phi_71_72_ladder_2;
            _2984 = frontier_phi_71_72_ladder;
            _2986 = frontier_phi_71_72_ladder_1;
        }
        float _2991 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2771 = (_2991 * _2982) + _2284;
        _2773 = (_2991 * _2984) + _2286;
        _2775 = (_2991 * _2986) + _2288;
        _2777 = ((_2976 * _692) * _2991) + _2622;
        _2779 = ((_2978 * _694) * _2991) + _2624;
        _2781 = ((_2980 * _695) * _2991) + _2626;
    }
    else
    {
        _2771 = _2284;
        _2773 = _2286;
        _2775 = _2288;
        _2777 = _2622;
        _2779 = _2624;
        _2781 = _2626;
    }
    vec4 _2787 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4763 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4774 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4785 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2811 = (((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2771 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _707))) + ((_2777 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1548)) * cbPerFrame._m0[3u].x)) + (_2787.x * cbMtdParam._m0[3u].x);
    float _2813 = ((_2787.y * cbMtdParam._m0[3u].x) + ((_2779 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1548)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2773 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _707)));
    float _2815 = ((_2787.z * cbMtdParam._m0[3u].x) + ((_2781 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1548)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2775 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _707)));
    float _2816 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2817 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2818 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    uint _2819 = _634 + 6u;
    float _2827 = _577 / cbSceneParam._m0[86u].x;
    float _2828 = _578 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2881 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2882 = _2881 / _495;
        float _2893 = _2882 * _546;
        float _2894 = _547 * _2882;
        float _2895 = (-0.0) - _2894;
        float _2896 = _2882 * _548;
        float _2898 = (cbSceneParam._m0[77u].w * _2895) / _2881;
        float _2899 = _2898 + cbSceneParam._m0[79u].w;
        float _2900 = cbSceneParam._m0[79u].w - _2894;
        float _2906 = sqrt(((_2893 * _2893) + (_2894 * _2894)) + (_2896 * _2896));
        float _2909 = (1.0 - (cbSceneParam._m0[77u].w / _2881)) * _2906;
        float _2914 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2916 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3093;
        if (abs((_2895 - _2898) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3093 = ((((_2899 > 0.0) ? exp2(_2914 * _2899) : (2.0 - exp2(_2916 * _2899))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2909;
        }
        else
        {
            float _3037 = 1.0 / cbSceneParam._m0[80u].x;
            float _3038 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : max(_2899, _2900));
            float _3039 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : min(_2899, _2900));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            _3093 = ((abs(_2906 / _2895) * cbSceneParam._m0[80u].y) * ((((_3048 - _3049) * 2.0) - ((exp2(_2914 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0)))) - exp2(_2914 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))))) * _3037)) - ((exp2(_2916 * _3048) - exp2(_2916 * _3049)) * _3037))) + (_2909 * cbSceneParam._m0[80u].z);
        }
        vec4 _3095 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3104 = exp2((_3093 * (-1.44269502162933349609375)) * (1.0 - _3095.w));
        float _3105 = log2(_3104);
        float _3121 = log2(_2847);
        _2918 = (exp2(_3121 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].x)) * _3095.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2920 = (exp2(_3121 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].y)) * _3095.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2922 = (exp2(_3121 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].z)) * _3095.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2924 = _3104 * _2847;
    }
    else
    {
        _2918 = _2844;
        _2920 = _2845;
        _2922 = _2846;
        _2924 = _2847;
    }
    bool _3131;
    vec4 _2934;
    vec4 _2956;
    float _2958;
    float _2962;
    float _2963;
    float _2964;
    float _2965;
    bool _2975;
    for (;;)
    {
        _2934 = cbMatDynParam._m0[0u];
        float _2936 = roundEven(_2934.y);
        bool _2937 = _2936 == 3.0;
        float _2938 = log2(_2924);
        float _2945 = exp2(_2938 * cbSceneParam._m0[78u].x) * _2816;
        float _2946 = exp2(_2938 * cbSceneParam._m0[78u].y) * _2817;
        float _2947 = exp2(_2938 * cbSceneParam._m0[78u].z) * _2818;
        float _2954 = _562 + (-0.5);
        _2956 = cbMtdParam._m0[1u];
        _2958 = _2956.y * _2954;
        float _2961 = (_2936 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2962 = _2961 * (_2937 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2918)));
        _2963 = _2961 * (_2937 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2920)));
        _2964 = _2961 * (_2937 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2922)));
        _2965 = _2954 * 0.999000012874603271484375;
        _2975 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2975)
        {
            if ((cbInstanceData._m0[_634 + 7u].x + _2965) < 0.5)
            {
                _3131 = true;
                break;
            }
        }
        uint _3072 = _636 + uint(_2934.w);
        if ((cbInstanceData._m0[_3072].w < 1.0) && ((cbInstanceData._m0[_3072].w + _2965) < 0.5))
        {
            _3131 = true;
            break;
        }
        if ((_2958 + 1.0) < _2956.x)
        {
            _3131 = true;
            break;
        }
        _3131 = false;
        break;
    }
    float _3335;
    if (_3131)
    {
        discard_state = true;
        _3335 = 0.0;
    }
    else
    {
        _3335 = cbInstanceData._m0[_2819].w;
    }
    SV_Target.x = _2962;
    SV_Target.y = _2963;
    SV_Target.z = _2964;
    SV_Target.w = _3335;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2819].w;
    discard_exit();
}


