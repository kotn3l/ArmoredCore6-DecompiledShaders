#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1168;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _270 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _281 = exp2(log2(_270.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[15u].x;
    _190[0u] = cbMtdParam._m0[15u].y;
    _191[0u] = cbMtdParam._m0[15u].z;
    _189[1u] = cbMtdParam._m0[16u].x;
    _190[1u] = cbMtdParam._m0[16u].y;
    _191[1u] = cbMtdParam._m0[16u].z;
    _189[2u] = cbMtdParam._m0[17u].x;
    _190[2u] = cbMtdParam._m0[17u].y;
    _191[2u] = cbMtdParam._m0[17u].z;
    _189[3u] = cbMtdParam._m0[12u].x;
    _190[3u] = cbMtdParam._m0[12u].y;
    _191[3u] = cbMtdParam._m0[12u].z;
    _189[4u] = cbMtdParam._m0[13u].x;
    _190[4u] = cbMtdParam._m0[13u].y;
    _191[4u] = cbMtdParam._m0[13u].z;
    _189[5u] = cbMtdParam._m0[14u].x;
    _190[5u] = cbMtdParam._m0[14u].y;
    _191[5u] = cbMtdParam._m0[14u].z;
    vec4 _348 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _351 = _348.y;
    float _354 = (_348.x + (-0.02500000037252902984619140625)) * 8.0;
    float _356 = roundEven(_354);
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    uint _360 = uint(int(isnan(5.0) ? _357 : (isnan(_357) ? 5.0 : min(_357, 5.0))));
    float _377;
    if (_281)
    {
        _377 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _377 = cbMtdParam._m0[20u].z;
    }
    float _383;
    float _385;
    if (_281)
    {
        _383 = cbMtdParam._m0[28u].z;
        _385 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _383 = cbMtdParam._m0[24u].x;
        _385 = cbMtdParam._m0[24u].y;
    }
    float _387 = _383 * TEXCOORD.x;
    float _388 = _385 * TEXCOORD.y;
    float _400 = floor(_377);
    vec4 _403 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _387) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _388) + cbTextureTilingScale._m0[8u].w, _400));
    vec4 _425 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _433 = ((((((_189[_360] - cbMtdParam._m0[19u].x) * _351) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _403.x) * cbMtdParam._m0[9u].x) * _425.x;
    float _437 = ((((((_190[_360] - cbMtdParam._m0[19u].y) * _351) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _403.y) * cbMtdParam._m0[9u].y) * _425.y;
    float _441 = ((((((_191[_360] - cbMtdParam._m0[19u].z) * _351) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _403.z) * cbMtdParam._m0[9u].z) * _425.z;
    vec4 _453 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _457 = _453.z;
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].x;
    _185[0u] = cbMtdParam._m0[25u].y;
    _184[1u] = cbMtdParam._m0[26u].x;
    _185[1u] = cbMtdParam._m0[26u].y;
    _184[2u] = cbMtdParam._m0[26u].z;
    _185[2u] = cbMtdParam._m0[26u].w;
    _184[3u] = cbMtdParam._m0[27u].x;
    _185[3u] = cbMtdParam._m0[27u].y;
    _184[4u] = cbMtdParam._m0[25u].z;
    _185[4u] = cbMtdParam._m0[25u].w;
    float _502 = roundEven(5.0 - _354);
    float _503 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = isnan(4.0) ? _503 : (isnan(_503) ? 4.0 : min(_503, 4.0));
    float _506 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    uint _508 = uint(int(isnan(4.0) ? _506 : (isnan(_506) ? 4.0 : min(_506, 4.0))));
    float _514 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _387) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _388) + cbTextureTilingScale._m0[10u].w, _400)).x + _453.w) + _185[_508];
    vec4 _532 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _387) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _388) + cbTextureTilingScale._m0[9u].w, _400));
    float _539 = (_532.x * 2.0) + (-1.0);
    float _540 = (_532.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3547 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))));
    float _557 = (cbMtdParam._m0[21u].x * (((_457 * 2.0) * (_532.z + _184[_508])) - _457)) + _457;
    float _561 = (cbMtdParam._m0[21u].y * ((_453.x * 2.0) + (-1.0))) + _539;
    float _562 = (cbMtdParam._m0[21u].y * ((_453.y * 2.0) + (-1.0))) + _540;
    float _565 = fma(_547, _241, fma(_562, _233 * TANGENT.x, (_219 * _211) * _561));
    float _568 = fma(_547, _242, fma(_562, _233 * TANGENT.y, (_219 * _212) * _561));
    float _571 = fma(_547, _243, fma(_562, _233 * TANGENT.z, (_219 * _213) * _561));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    float _576 = _575 * _565;
    float _577 = _575 * _568;
    float _578 = _575 * _571;
    float _3558 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _579 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3580 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3591 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3602 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _583 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    float _665 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _666 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _668 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _670 = _668.w;
    float _689 = fma(_578, cbSceneParam._m0[5u].z, fma(_577, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _576));
    float _692 = fma(_578, cbSceneParam._m0[6u].z, fma(_577, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _576));
    float _695 = fma(_578, cbSceneParam._m0[7u].z, fma(_577, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _576));
    vec4 _697 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = (((_697.y - _579) + (_697.w * _579)) * cbMtdParam._m0[3u].x) + _579;
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _723 = (_721 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3613 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    vec4 _735 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _740 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = (((_740.x - _583) + (_740.w * _583)) * cbMtdParam._m0[3u].x) + _583;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _670) - _732) + _735.x)) + _732;
    float _765 = (cbMtdParam._m0[3u].x * (((_733 * _670) - _733) + _735.y)) + _733;
    float _766 = (cbMtdParam._m0[3u].x * (((_734 * _670) - _734) + _735.z)) + _734;
    float _767 = 1.0 - _751;
    float _768 = _767 * _764;
    float _769 = _767 * _765;
    float _770 = _767 * _766;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _751;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _751;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _751;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _665, cbSceneParam._m0[86u].y * _666));
    float _793 = _790.x * TEXCOORD_4;
    float _794 = dot(vec3(_576, _577, _578), vec3(_657, _658, _659));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _576) - _657;
    float _802 = (_797 * _577) - _658;
    float _803 = (_797 * _578) - _659;
    float _807 = abs(dot(vec3(_657, _658, _659), vec3(_576, _577, _578)));
    float _3646 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_708);
    float _820 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _826 = (1.0 - _820) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _827 = _820 * _809;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1167;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _892 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _896 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _900 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _925 = _855 + _576;
        float _926 = _859 + _577;
        float _927 = _863 + _578;
        float _937 = fma(_927, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925)) - _892;
        float _938 = fma(_927, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925)) - _896;
        float _939 = fma(_927, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925)) - _900;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_892 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_896 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[34u].z) + ((((((_900 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _995 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_961.x + (-0.5));
        float _997 = _995 * (_961.y + (-0.5));
        float _998 = _995 * (_961.z + (-0.5));
        float _1005 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_968.x + (-0.5));
        float _1007 = _1005 * (_968.y + (-0.5));
        float _1008 = _1005 * (_968.z + (-0.5));
        float _1015 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_975.x + (-0.5));
        float _1017 = _1015 * (_975.y + (-0.5));
        float _1018 = _1015 * (_975.z + (-0.5));
        float _1025 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_982.x + (-0.5));
        float _1027 = _1025 * (_982.y + (-0.5));
        float _1028 = _1025 * (_982.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1049 = (dot(vec3(_576, _577, _578), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1059 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3694 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1061 + 1.0))) + _1066) * _1029;
        float _1076 = _997 * 0.5;
        float _1077 = _1007 * 0.5;
        float _1078 = _1017 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_576, _577, _578), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3727 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1103 + 1.0))) + _1108) * _1030;
        float _1118 = _998 * 0.5;
        float _1119 = _1008 * 0.5;
        float _1120 = _1018 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_576, _577, _578), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3760 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1145 + 1.0))) + _1150) * _1031;
        _1167 = _998;
        _1169 = _997;
        _1170 = _996;
        _1171 = _1008;
        _1172 = _1007;
        _1173 = _1006;
        _1174 = _1018;
        _1175 = _1017;
        _1176 = _1016;
        _1177 = _1031;
        _1178 = _1030;
        _1179 = _1029;
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _1168;
        _1169 = _1168;
        _1170 = _1168;
        _1171 = _1168;
        _1172 = _1168;
        _1173 = _1168;
        _1174 = _1168;
        _1175 = _1168;
        _1176 = _1168;
        _1177 = _1168;
        _1178 = _1168;
        _1179 = _1168;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1212 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1216 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1239 = _855 + _576;
        float _1240 = _859 + _577;
        float _1241 = _863 + _578;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_576, _577, _578), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3823 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_576, _577, _578), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3856 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_576, _577, _578), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3889 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1168;
        _1478 = _1168;
        _1479 = _1168;
        _1480 = _1168;
        _1481 = _1168;
        _1482 = _1168;
        _1483 = _1168;
        _1484 = _1168;
        _1485 = _1168;
        _1486 = _1168;
        _1487 = _1168;
        _1488 = _1168;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1180)) + _1180;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1181)) + _1181;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1182)) + _1182;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _801 * 0.5;
    float _1546 = _802 * 0.5;
    float _1547 = _803 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1167, _1171, _1174, _1177));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1661 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1665 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1669 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1672 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1675 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1678 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1706;
        if (_1672 > 0.0)
        {
            _1706 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1706 = frontier_phi_20_18_ladder;
        }
        float _1909;
        if (_1675 > 0.0)
        {
            _1909 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1909 = frontier_phi_29_25_ladder;
        }
        float _2163;
        if (_1678 > 0.0)
        {
            _2163 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2163 = frontier_phi_41_36_ladder;
        }
        float _2165 = isnan(_1909) ? _1706 : (isnan(_1706) ? _1909 : min(_1706, _1909));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1672) + _1661;
        float _2171 = (_2166 * _1675) + _1665;
        float _2172 = (_2166 * _1678) + _1669;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2173;
        float _2177 = _2173 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 > _2177) || ((_2171 < _2175) || ((_2170 < _2175) || (_2170 > _2177))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2172, cbModelParam._m0[9u].z, fma(_2171, cbModelParam._m0[9u].y, _2170 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2172, cbModelParam._m0[10u].z, fma(_2171, cbModelParam._m0[10u].y, _2170 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2172, cbModelParam._m0[11u].z, fma(_2171, cbModelParam._m0[11u].y, _2170 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_19_41_ladder = _2300.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2300.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2300.x * cbModelParam._m0[1u].y;
        }
        _1694 = frontier_phi_19_41_ladder_2;
        _1696 = frontier_phi_19_41_ladder_1;
        _1698 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1614);
        _1694 = _1682.x * cbModelParam._m0[1u].y;
        _1696 = _1682.y * cbModelParam._m0[1u].y;
        _1698 = _1682.z * cbModelParam._m0[1u].y;
    }
    float _1702 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1702 : min(cbModelParam._m0[25u].w, _1702));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1757 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1761 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1765 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1768 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1771 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1774 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1914;
        if (_1768 > 0.0)
        {
            _1914 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1914 = frontier_phi_31_27_ladder;
        }
        float _2190;
        if (_1771 > 0.0)
        {
            _2190 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2190 = frontier_phi_43_38_ladder;
        }
        float _2403;
        if (_1774 > 0.0)
        {
            _2403 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2403 = frontier_phi_52_49_ladder;
        }
        float _2405 = isnan(_2190) ? _1914 : (isnan(_1914) ? _2190 : min(_1914, _2190));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1768) + _1757;
        float _2411 = (_2406 * _1771) + _1761;
        float _2412 = (_2406 * _1774) + _1765;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2413;
        float _2416 = _2413 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2412 > _2416) || ((_2412 < _2414) || ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 < _2414) || (_2410 > _2416))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2412, cbModelParam._m0[17u].z, fma(_2411, cbModelParam._m0[17u].y, _2410 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2412, cbModelParam._m0[18u].z, fma(_2411, cbModelParam._m0[18u].y, _2410 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2412, cbModelParam._m0[19u].z, fma(_2411, cbModelParam._m0[19u].y, _2410 * cbModelParam._m0[19u].x))), _1703);
            frontier_phi_28_52_ladder = _2628.z * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_1 = _2628.y * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_2 = _2628.x * cbModelParam._m0[1u].z;
        }
        _1793 = frontier_phi_28_52_ladder_2;
        _1795 = frontier_phi_28_52_ladder_1;
        _1797 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1703);
        _1793 = _1777.x * cbModelParam._m0[1u].z;
        _1795 = _1777.y * cbModelParam._m0[1u].z;
        _1797 = _1777.z * cbModelParam._m0[1u].z;
    }
    float _1810 = (((_826 * _778) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1793 - _1694)) + _1694);
    float _1812 = (((_826 * _780) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1795 - _1696)) + _1696);
    float _1814 = (((_826 * _781) + _827) * _793) * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1817 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1810 * cbSceneParam._m0[91u].x));
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _793 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1868 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1872 = _1835 | 1u;
    float _1883 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_576, _577, _578));
    float _1886 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_576, _577, _578));
    float _4025 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _4036 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1891 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.3183098733425140380859375;
    float _1893 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.3183098733425140380859375;
    float _1900 = ((cbLight._m0[_1852].x * _1858) * _1893) + ((cbLight._m0[_1862].x * _1868) * _1891);
    float _1901 = ((_1858 * cbLight._m0[_1852].y) * _1893) + ((_1868 * cbLight._m0[_1862].y) * _1891);
    float _1902 = ((_1858 * cbLight._m0[_1852].z) * _1893) + ((_1868 * cbLight._m0[_1862].z) * _1891);
    uvec4 _1906 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1908 = _1906.x == 0u;
    float _1919;
    float _1921;
    float _1923;
    if (_1908)
    {
        _1919 = _1900;
        _1921 = _1901;
        _1923 = _1902;
    }
    else
    {
        uint _1927 = _1835 + 6u;
        float _1943 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _4047 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1946 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1919 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1900;
        _1921 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1901;
        _1923 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1902;
    }
    bool _1926 = _1906.y == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1926)
    {
        _1964 = _1919;
        _1966 = _1921;
        _1968 = _1923;
    }
    else
    {
        uint _2134 = _1835 + 7u;
        float _2150 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4063 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2153 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1964 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _1919;
        _1966 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _1921;
        _1968 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _1923;
    }
    uint _1971 = _1835 + 8u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _708) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1835].x + _657;
    float _1987 = cbLight._m0[_1835].y + _658;
    float _1988 = cbLight._m0[_1835].z + _659;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1835].xyz));
    float _4079 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2000 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _2001 = dot(vec3(_576, _577, _578), vec3(_1993, _1994, _1995));
    float _4101 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1993, _1994, _1995));
    float _4112 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1985 * _1985;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2021 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
    float _2022 = 0.959999978542327880859375 - _775;
    float _2024 = 0.959999978542327880859375 - _776;
    float _2025 = 0.959999978542327880859375 - _777;
    float _2032 = 1.0 - _1985;
    float _2043 = (0.5 / (((_2000 * ((_1999 * _2032) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2032) + _1985) * _1999))) * _1999;
    float _4123 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    uint _2056 = _1835 + 9u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _708) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1872].x + _657;
    float _2070 = cbLight._m0[_1872].y + _658;
    float _2071 = cbLight._m0[_1872].z + _659;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1872].xyz));
    float _4134 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2083 = dot(vec3(_576, _577, _578), vec3(_2076, _2077, _2078));
    float _4145 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2076, _2077, _2078));
    float _4156 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2068 * _2068;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2109 = 1.0 - _2068;
    float _2119 = (0.5 / (((_2000 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2109) + _2068) * _2082))) * _2082;
    float _4167 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2121 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    float _2131 = (((((_2102 * _2022) + _778) * cbLight._m0[_2056].x) * _2121) * _1858) + (((((_2021 * _2022) + _778) * cbLight._m0[_1971].x) * _2045) * _1868);
    float _2132 = (((((_2102 * _2024) + _780) * cbLight._m0[_2056].y) * _2121) * _1858) + (((((_2021 * _2024) + _780) * cbLight._m0[_1971].y) * _2045) * _1868);
    float _2133 = (((((_2102 * _2025) + _781) * cbLight._m0[_2056].z) * _2121) * _1858) + (((((_2021 * _2025) + _781) * cbLight._m0[_1971].z) * _2045) * _1868);
    float _2195;
    float _2197;
    float _2199;
    if (_1908)
    {
        _2195 = _2131;
        _2197 = _2132;
        _2199 = _2133;
    }
    else
    {
        uint _2201 = _1835 + 2u;
        uint _2205 = _1835 + 10u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _708) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _657;
        float _2222 = cbLight._m0[_2201].y + _658;
        float _2223 = cbLight._m0[_2201].z + _659;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2201].xyz));
        float _4178 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2235 = dot(vec3(_576, _577, _578), vec3(_2228, _2229, _2230));
        float _4189 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4200 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
        float _2261 = 1.0 - _2220;
        float _2271 = (0.5 / (((_2000 * ((_2234 * _2261) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2261) + _2220) * _2234))) * _2234;
        float _4211 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2195 = (((((_2254 * _2022) + _778) * cbLight._m0[_2205].x) * _2273) * _2274) + _2131;
        _2197 = (((((_2254 * _2024) + _780) * cbLight._m0[_2205].y) * _2273) * _2274) + _2132;
        _2199 = (((((_2254 * _2025) + _781) * cbLight._m0[_2205].z) * _2273) * _2274) + _2133;
    }
    float _2309;
    float _2311;
    float _2313;
    if (_1926)
    {
        _2309 = _2195;
        _2311 = _2197;
        _2313 = _2199;
    }
    else
    {
        uint _2320 = _1835 + 3u;
        uint _2324 = _1835 + 11u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _708) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _657;
        float _2341 = cbLight._m0[_2320].y + _658;
        float _2342 = cbLight._m0[_2320].z + _659;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2320].xyz));
        float _4227 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2354 = dot(vec3(_576, _577, _578), vec3(_2347, _2348, _2349));
        float _4238 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4249 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0);
        float _2380 = 1.0 - _2339;
        float _2390 = (0.5 / (((_2000 * ((_2353 * _2380) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2380) + _2339) * _2353))) * _2353;
        float _4260 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2392 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2393 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2309 = (((((_2373 * _2022) + _778) * cbLight._m0[_2324].x) * _2392) * _2393) + _2195;
        _2311 = (((((_2373 * _2024) + _780) * cbLight._m0[_2324].y) * _2392) * _2393) + _2197;
        _2313 = (((((_2373 * _2025) + _781) * cbLight._m0[_2324].z) * _2392) * _2393) + _2199;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1833.y == 0u)
    {
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2468;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2468;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2468;
        uvec4 _2483 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2484 = _2483.x;
        uint _2495 = uint((float(_2483.y) * floor(float(uint(cbSceneParam._m0[85u].y * _666) / _2484))) + floor(float(uint(cbSceneParam._m0[85u].x * _665) / _2484)));
        float _2505 = (log2(_2471 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2506 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        uint _2509 = uint(isnan(14.0) ? _2506 : (isnan(_2506) ? 14.0 : min(_2506, 14.0)));
        uvec4 _2514 = texelFetch(g_lightClusterGridBuffer, int(((_2509 << 2u) + (_2495 << 6u)) >> 2u));
        uint _2515 = _2514.x;
        uint _2516 = _2483.z;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((((1u << ((_2516 >> 4u) & 15u)) + 4294967295u) & _2515) == 0u) || ((_2516 & 240u) == 0u))
        {
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
        }
        else
        {
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            uint _2783 = 0u;
            uint _2792;
            bool _2793;
            for (;;)
            {
                _2792 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                _2793 = _2792 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2793)
                {
                    frontier_phi_67_pred = _2782;
                    frontier_phi_67_pred_1 = _2781;
                    frontier_phi_67_pred_2 = _2780;
                    frontier_phi_67_pred_3 = _2779;
                    frontier_phi_67_pred_4 = _2778;
                    frontier_phi_67_pred_5 = _2777;
                }
                else
                {
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    uint _2907;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2792;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    for (;;)
                    {
                        uint _2911 = uint(findLSB(_2907)) + (_2783 << 5u);
                        uint _2908 = (_2907 + 4294967295u) & _2907;
                        uint _2913 = _2911 * 48u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2933 = (_2911 * 48u) + 4u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2952 = (_2911 * 48u) + 8u;
                        vec3 _2963 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x));
                        float _2967 = _2927.x - _2469;
                        float _2968 = _2927.y - _2470;
                        float _2969 = _2927.z - _2471;
                        float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                        float _2973 = inversesqrt(_2970);
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2977 = dot(vec3(_689, _692, _695), vec3(_2974, _2975, _2976));
                        float _2982 = 1.0 - (_2970 * _2927.w);
                        float _4286 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _2984 = sqrt(_2970) * _2946.w;
                        float _2987 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2977) + _2988;
                        float _2994 = _2984 * _2984;
                        float _2998 = ((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2983) / ((_2994 * 0.699999988079071044921875) + 1.0);
                        float _3002 = (-0.0) - _2469;
                        float _3003 = (-0.0) - _2470;
                        float _3004 = (-0.0) - _2471;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3019 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                        float _3020 = 1.0 - _809;
                        float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                        float _3028 = _3027 * _3027;
                        float _3029 = _3028 * _3028;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                        float _3040 = dot(vec3(_689, _692, _695), vec3(_3009, _3010, _3011));
                        float _4302 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3044 = dot(vec3(_689, _692, _695), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                        float _4313 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                        float _3052 = _2987 * _3028;
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _2977) + _3053;
                        float _4324 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3058 = 1.0 - _3028;
                        float _3068 = (0.5 / (((_3057 * ((_3043 * _3058) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3057 * _3058) + _3028) * _3043))) * _3057;
                        float _4335 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3079 = (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_3051 * _3051) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125))) * _2983;
                        _2836 = (_2998 * _2946.x) + _2904;
                        _2837 = (_2998 * _2946.y) + _2905;
                        _2838 = (_2998 * _2946.z) + _2906;
                        _2833 = (_3079 * _2963.x) + _2901;
                        _2834 = (_3079 * _2963.y) + _2902;
                        _2835 = (_3079 * _2963.z) + _2903;
                        if (_2908 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2908;
                        }
                    }
                    frontier_phi_67_pred = _2838;
                    frontier_phi_67_pred_1 = _2837;
                    frontier_phi_67_pred_2 = _2836;
                    frontier_phi_67_pred_3 = _2835;
                    frontier_phi_67_pred_4 = _2834;
                    frontier_phi_67_pred_5 = _2833;
                }
                _2644 = frontier_phi_67_pred;
                _2642 = frontier_phi_67_pred_1;
                _2640 = frontier_phi_67_pred_2;
                _2638 = frontier_phi_67_pred_3;
                _2636 = frontier_phi_67_pred_4;
                _2634 = frontier_phi_67_pred_5;
                uint _2784 = _2783 + 1u;
                if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2777 = _2634;
                    _2778 = _2636;
                    _2779 = _2638;
                    _2780 = _2640;
                    _2781 = _2642;
                    _2782 = _2644;
                    _2783 = _2784;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
        }
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.z;
        uint _2650 = (_2648 >> 8u) & 15u;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((4294967295u << _2650) & _2515) == 0u)
        {
            _2745 = _2633;
            _2747 = _2635;
            _2749 = _2637;
            _2751 = _2639;
            _2753 = _2641;
            _2755 = _2643;
        }
        else
        {
            float _2770 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
            float _2771 = _2770 * _2469;
            float _2772 = _2770 * _2470;
            float _2773 = _2770 * _2471;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2650 < ((_2648 >> 12u) & 15u))
            {
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2884 = _2633;
                float _2885 = _2635;
                float _2886 = _2637;
                float _2887 = _2639;
                float _2888 = _2641;
                float _2889 = _2643;
                uint _2890 = _2650;
                uint _2899;
                bool _2900;
                for (;;)
                {
                    _2899 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                    _2900 = _2899 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2900)
                    {
                        frontier_phi_73_pred = _2889;
                        frontier_phi_73_pred_1 = _2888;
                        frontier_phi_73_pred_2 = _2887;
                        frontier_phi_73_pred_3 = _2886;
                        frontier_phi_73_pred_4 = _2885;
                        frontier_phi_73_pred_5 = _2884;
                    }
                    else
                    {
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        uint _3103 = _2899;
                        uint _3104;
                        vec4 _3129;
                        float _3130;
                        vec4 _3145;
                        vec3 _3157;
                        vec4 _3172;
                        vec4 _3187;
                        float _3233;
                        bool _3234;
                        for (;;)
                        {
                            uint _3114 = ((_2890 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3103));
                            _3104 = (_3103 + 4294967295u) & _3103;
                            uint _3116 = _3114 * 40u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            _3130 = _3129.w;
                            uint _3132 = (_3114 * 40u) + 4u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3114 * 40u) + 8u;
                            _3157 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x));
                            uint _3159 = (_3114 * 40u) + 16u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3114 * 40u) + 20u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3114 * 40u) + 24u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3208 = (_3114 * 40u) + 28u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3233 = fma(_2471, _3221.z, fma(_2470, _3221.y, _3221.x * _2469)) + _3221.w;
                            _3234 = !((fma(_2471, _3202.z, fma(_2470, _3202.y, _3202.x * _2469)) + _3202.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3234)
                            {
                                float _3261 = _3129.x - _2469;
                                float _3262 = _3129.y - _2470;
                                float _3263 = _3129.z - _2471;
                                float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                                float _3267 = inversesqrt(_3264);
                                float _3268 = _3267 * _3261;
                                float _3269 = _3267 * _3262;
                                float _3270 = _3267 * _3263;
                                float _3274 = 1.0 - (_3264 / (_3130 * _3130));
                                float _4346 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3279 = sqrt(_3264) * _3145.w;
                                float _3281 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                                float _3282 = _3281 * _3281;
                                float _3285 = ((1.0 - _3282) * dot(vec3(_3268, _3269, _3270), vec3(_689, _692, _695))) + _3282;
                                float _3288 = _3279 * _3279;
                                float _3292 = (fma(_2471, _3172.z, fma(_2470, _3172.y, _3172.x * _2469)) + _3172.w) / _3233;
                                float _3293 = (fma(_2471, _3187.z, fma(_2470, _3187.y, _3187.x * _2469)) + _3187.w) / _3233;
                                float _3297 = 1.0 - dot(vec2(_3292, _3293), vec2(_3292, _3293));
                                float _4362 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3299 = _3298 * (((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3275) / ((_3288 * 0.699999988079071044921875) + 1.0));
                                float _3311 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                                float _3312 = 1.0 - _809;
                                float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                                float _3320 = _3319 * _3319;
                                float _3321 = _3320 * _3320;
                                float _3322 = _3268 - _2771;
                                float _3323 = _3269 - _2772;
                                float _3324 = _3270 - _2773;
                                float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                                float _3332 = dot(vec3(_689, _692, _695), vec3((-0.0) - _2771, (-0.0) - _2772, (-0.0) - _2773));
                                float _4373 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3336 = dot(vec3(_689, _692, _695), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                                float _4384 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                                float _3344 = _3281 * _3320;
                                float _3345 = _3344 * _3344;
                                float _3351 = ((1.0 - _3345) * dot(vec3(_689, _692, _695), vec3(_3268, _3269, _3270))) + _3345;
                                float _4395 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3353 = 1.0 - _3320;
                                float _3363 = (0.5 / (((_3352 * ((_3335 * _3353) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3320) * _3335))) * _3352;
                                float _4406 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3373 = (_3298 * _3275) * (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3343 * _3343) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3299 * _3145.y;
                                frontier_phi_79_pred_1 = _3299 * _3145.x;
                                frontier_phi_79_pred_2 = _3373 * _3157.z;
                                frontier_phi_79_pred_3 = _3373 * _3157.y;
                                frontier_phi_79_pred_4 = _3373 * _3157.x;
                                frontier_phi_79_pred_5 = _3299 * _3145.z;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3381 = frontier_phi_79_pred;
                            _3380 = frontier_phi_79_pred_1;
                            _3379 = frontier_phi_79_pred_2;
                            _3378 = frontier_phi_79_pred_3;
                            _3377 = frontier_phi_79_pred_4;
                            _3382 = frontier_phi_79_pred_5;
                            _3087 = _3380 + _3100;
                            _3088 = _3381 + _3101;
                            _3089 = _3382 + _3102;
                            _3084 = _3377 + _3097;
                            _3085 = _3378 + _3098;
                            _3086 = _3379 + _3099;
                            if (_3104 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3104;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3089;
                        frontier_phi_73_pred_1 = _3088;
                        frontier_phi_73_pred_2 = _3087;
                        frontier_phi_73_pred_3 = _3086;
                        frontier_phi_73_pred_4 = _3085;
                        frontier_phi_73_pred_5 = _3084;
                    }
                    _2756 = frontier_phi_73_pred;
                    _2754 = frontier_phi_73_pred_1;
                    _2752 = frontier_phi_73_pred_2;
                    _2750 = frontier_phi_73_pred_3;
                    _2748 = frontier_phi_73_pred_4;
                    _2746 = frontier_phi_73_pred_5;
                    uint _2891 = _2890 + 1u;
                    if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2884 = _2746;
                        _2885 = _2748;
                        _2886 = _2750;
                        _2887 = _2752;
                        _2888 = _2754;
                        _2889 = _2756;
                        _2890 = _2891;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2756;
                frontier_phi_61_62_ladder_1 = _2754;
                frontier_phi_61_62_ladder_2 = _2750;
                frontier_phi_61_62_ladder_3 = _2748;
                frontier_phi_61_62_ladder_4 = _2746;
                frontier_phi_61_62_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_61_62_ladder = _2643;
                frontier_phi_61_62_ladder_1 = _2641;
                frontier_phi_61_62_ladder_2 = _2637;
                frontier_phi_61_62_ladder_3 = _2635;
                frontier_phi_61_62_ladder_4 = _2633;
                frontier_phi_61_62_ladder_5 = _2639;
            }
            _2745 = frontier_phi_61_62_ladder_4;
            _2747 = frontier_phi_61_62_ladder_3;
            _2749 = frontier_phi_61_62_ladder_2;
            _2751 = frontier_phi_61_62_ladder_5;
            _2753 = frontier_phi_61_62_ladder_1;
            _2755 = frontier_phi_61_62_ladder;
        }
        float _2760 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2527 = (_2760 * _2751) + _1964;
        _2529 = (_2760 * _2753) + _1966;
        _2531 = (_2760 * _2755) + _1968;
        _2533 = ((_2745 * _778) * _2760) + _2309;
        _2535 = ((_2747 * _780) * _2760) + _2311;
        _2537 = ((_2749 * _781) * _2760) + _2313;
    }
    else
    {
        _2527 = _1964;
        _2529 = _1966;
        _2531 = _1968;
        _2533 = _2309;
        _2535 = _2311;
        _2537 = _2313;
    }
    vec4 _2543 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4422 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4433 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4444 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2567 = (((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2527 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _793))) + ((_2533 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1603)) * cbPerFrame._m0[3u].x)) + (_2543.x * cbMtdParam._m0[3u].x);
    float _2569 = ((_2543.y * cbMtdParam._m0[3u].x) + ((_2535 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1603)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2529 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _793)));
    float _2571 = ((_2543.z * cbMtdParam._m0[3u].x) + ((_2537 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1603)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2531 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _793)));
    uint _2575 = _721 + 6u;
    float _2583 = _665 / cbSceneParam._m0[86u].x;
    float _2584 = _666 / cbSceneParam._m0[86u].y;
    vec4 _2598 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2600 = _2598.x;
    float _2601 = _2598.y;
    float _2602 = _2598.z;
    float _2603 = _2598.w;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2658 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2659 = _2658 / _599;
        float _2670 = _2659 * _650;
        float _2671 = _651 * _2659;
        float _2672 = (-0.0) - _2671;
        float _2673 = _2659 * _652;
        float _2675 = (cbSceneParam._m0[77u].w * _2672) / _2658;
        float _2676 = _2675 + cbSceneParam._m0[79u].w;
        float _2677 = cbSceneParam._m0[79u].w - _2671;
        float _2683 = sqrt(((_2670 * _2670) + (_2671 * _2671)) + (_2673 * _2673));
        float _2686 = (1.0 - (cbSceneParam._m0[77u].w / _2658)) * _2683;
        float _2691 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2693 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2846;
        if (abs((_2672 - _2675) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2846 = ((((_2676 > 0.0) ? exp2(_2691 * _2676) : (2.0 - exp2(_2693 * _2676))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2686;
        }
        else
        {
            float _2806 = 1.0 / cbSceneParam._m0[80u].x;
            float _2807 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : max(_2676, _2677));
            float _2808 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : min(_2676, _2677));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            _2846 = ((abs(_2683 / _2672) * cbSceneParam._m0[80u].y) * ((((_2817 - _2818) * 2.0) - ((exp2(_2691 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0)))) - exp2(_2691 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))))) * _2806)) - ((exp2(_2693 * _2817) - exp2(_2693 * _2818)) * _2806))) + (_2686 * cbSceneParam._m0[80u].z);
        }
        vec4 _2848 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, 1.0), 0.0);
        float _2857 = exp2((_2846 * (-1.44269502162933349609375)) * (1.0 - _2848.w));
        float _2858 = log2(_2857);
        float _2874 = log2(_2603);
        _2695 = (exp2(_2874 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].x)) * _2848.x) / cbSceneParam._m0[78u].x)) + _2600;
        _2697 = (exp2(_2874 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].y)) * _2848.y) / cbSceneParam._m0[78u].y)) + _2601;
        _2699 = (exp2(_2874 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].z)) * _2848.z) / cbSceneParam._m0[78u].z)) + _2602;
        _2701 = _2857 * _2603;
    }
    else
    {
        _2695 = _2600;
        _2697 = _2601;
        _2699 = _2602;
        _2701 = _2603;
    }
    float _2713 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2714 = _2713 == 3.0;
    float _2715 = log2(_2701);
    float _2722 = exp2(_2715 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0)));
    float _2723 = exp2(_2715 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0)));
    float _2724 = exp2(_2715 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0)));
    float _2733 = (_2713 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2733 * (_2714 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.y = _2733 * (_2714 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2697)));
    SV_Target.z = _2733 * (_2714 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.w = cbInstanceData._m0[_2575].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2575].w;
}


