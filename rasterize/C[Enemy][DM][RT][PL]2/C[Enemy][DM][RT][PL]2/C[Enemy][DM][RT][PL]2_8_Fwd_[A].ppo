#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1301;
float _3710;
float _3711;
float _3712;
float _3713;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244;
    float _245;
    float _246;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
    }
    else
    {
        _244 = _230;
        _245 = _231;
        _246 = _232;
    }
    vec4 _273 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _284 = exp2(log2(_273.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _285;
    float _287;
    float _289;
    if (_284)
    {
        _285 = cbMtdParam._m0[19u].x;
        _287 = cbMtdParam._m0[19u].y;
        _289 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _285 = cbMtdParam._m0[18u].x;
        _287 = cbMtdParam._m0[18u].y;
        _289 = cbMtdParam._m0[18u].z;
    }
    float _295;
    if (_284)
    {
        _295 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _295 = cbMtdParam._m0[20u].z;
    }
    float _301;
    float _303;
    if (_284)
    {
        _301 = cbMtdParam._m0[28u].z;
        _303 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _301 = cbMtdParam._m0[24u].x;
        _303 = cbMtdParam._m0[24u].y;
    }
    float _305 = _301 * TEXCOORD.x;
    float _306 = _303 * TEXCOORD.y;
    float _318 = floor(_295);
    vec4 _321 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _305) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _306) + cbTextureTilingScale._m0[8u].w, _318));
    vec4 _343 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _352 = (((_285 * cbMtdParam._m0[20u].w) * _321.x) * cbMtdParam._m0[9u].x) * _343.x;
    float _356 = (((_287 * cbMtdParam._m0[20u].w) * _321.y) * cbMtdParam._m0[9u].y) * _343.y;
    float _360 = (((_289 * cbMtdParam._m0[20u].w) * _321.z) * cbMtdParam._m0[9u].z) * _343.z;
    float _372 = cbMtdParam._m0[24u].z * TEXCOORD.x;
    float _373 = cbMtdParam._m0[24u].w * TEXCOORD.y;
    vec4 _385 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _372) + cbTextureTilingScale._m0[3u].z, (_373 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _407 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _411 = _407.z;
    float _412 = _407.w;
    float _417 = exp2(log2(_412 * cbMtdParam._m0[22u].z) * cbMtdParam._m0[22u].y);
    float _424 = (_417 * ((_385.x * cbMtdParam._m0[10u].x) - _352)) + _352;
    float _425 = (_417 * ((_385.y * cbMtdParam._m0[10u].y) - _356)) + _356;
    float _426 = (_417 * ((_385.z * cbMtdParam._m0[10u].z) - _360)) + _360;
    vec4 _439 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _463 = exp2(log2(cbMtdParam._m0[20u].x * _343.w) * cbMtdParam._m0[21u].w);
    float _464 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
    float _473 = (_465 * ((cbMtdParam._m0[11u].x * _439.x) - _424)) + _424;
    float _474 = (_465 * ((cbMtdParam._m0[11u].y * _439.y) - _425)) + _425;
    float _475 = (_465 * ((cbMtdParam._m0[11u].z * _439.z) - _426)) + _426;
    float _193[2];
    float _194[2];
    _193[0u] = cbMtdParam._m0[27u].z;
    _194[0u] = cbMtdParam._m0[27u].w;
    _193[1u] = cbMtdParam._m0[28u].x;
    _194[1u] = cbMtdParam._m0[28u].y;
    float _507 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _509 = uint(int(isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0))));
    float _514 = _194[_509] + texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w, _318)).x;
    float _517 = ((cbMtdParam._m0[23u].y - _514) * _417) + _514;
    float _524 = (_517 + _412) + ((cbMtdParam._m0[22u].x - _517) * _465);
    vec4 _542 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w, _318));
    float _549 = (_542.x * 2.0) + (-1.0);
    float _550 = (_542.y * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3742 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))));
    float _565 = (cbMtdParam._m0[21u].x * (((_411 * 2.0) * (_542.z + _193[_509])) - _411)) + _411;
    vec4 _578 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _372) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _373) + cbTextureTilingScale._m0[6u].w));
    float _585 = (_578.x * 2.0) + (-1.0);
    float _586 = (_578.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3753 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _599 = (((_578.z - _565) + cbMtdParam._m0[23u].z) * _417) + _565;
    vec4 _612 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _619 = (_612.x * 2.0) + (-1.0);
    float _620 = (_612.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3764 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _631 = (((_612.z - _599) + cbMtdParam._m0[23u].w) * _465) + _599;
    float _635 = (cbMtdParam._m0[21u].y * ((_407.x * 2.0) + (-1.0))) + _549;
    float _636 = (cbMtdParam._m0[21u].y * ((_407.y * 2.0) + (-1.0))) + _550;
    float _643 = ((_585 - _635) * _417) + _635;
    float _644 = ((_586 - _636) * _417) + _636;
    float _645 = ((sqrt(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) - _556) * _417) + _556;
    float _652 = ((_619 - _643) * _465) + _643;
    float _653 = ((_620 - _644) * _465) + _644;
    float _654 = ((sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) - _645) * _465) + _645;
    float _657 = fma(_654, _244, fma(_653, _236 * TANGENT.x, (_222 * _214) * _652));
    float _660 = fma(_654, _245, fma(_653, _236 * TANGENT.y, (_222 * _215) * _652));
    float _663 = fma(_654, _246, fma(_653, _236 * TANGENT.z, (_222 * _216) * _652));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3775 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _671 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3797 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3808 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3819 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _675 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _741 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _731);
    float _742 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _731);
    float _743 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _731);
    float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
    float _748 = _741 * _747;
    float _749 = _742 * _747;
    float _750 = _743 * _747;
    vec4 _755 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _757 = _755.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _981 = sqrt(((_741 * _741) + (_742 * _742)) + (_743 * _743));
        float _987 = (cbMatDynParam._m0[5u].x * _981) + cbMatDynParam._m0[5u].y;
        float _3830 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _992 = (cbMatDynParam._m0[5u].z * _981) + cbMatDynParam._m0[5u].w;
        float _3841 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) - _988)) + _988) < ((_757 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _770 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _771 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _773 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _775 = _773.w;
    float _793 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _796 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _799 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    vec4 _801 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _812 = (((_801.y - _671) + (_801.w * _671)) * cbMtdParam._m0[3u].x) + _671;
    uint _825 = uint(roundEven(NORMAL.w)) * 13u;
    uint _827 = _825 + 9u;
    uint _828 = _827 + uint(cbMatDynParam._m0[0u].w);
    float _834 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_828].x;
    float _835 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_828].y;
    float _836 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_828].z;
    float _3852 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    vec4 _840 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _845 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _856 = (((_845.x - _675) + (_845.w * _675)) * cbMtdParam._m0[3u].x) + _675;
    float _869 = (cbMtdParam._m0[3u].x * (((_837 * _775) - _837) + _840.x)) + _837;
    float _870 = (cbMtdParam._m0[3u].x * (((_838 * _775) - _838) + _840.y)) + _838;
    float _871 = (cbMtdParam._m0[3u].x * (((_839 * _775) - _839) + _840.z)) + _839;
    float _872 = 1.0 - _856;
    float _873 = _872 * _869;
    float _874 = _872 * _870;
    float _875 = _872 * _871;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _856;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _856;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _856;
    float _883 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    vec4 _895 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _770, cbSceneParam._m0[86u].y * _771));
    float _898 = _895.x * TEXCOORD_4;
    float _899 = dot(vec3(_668, _669, _670), vec3(_748, _749, _750));
    float _902 = _899 * 2.0;
    float _906 = (_902 * _668) - _748;
    float _907 = (_902 * _669) - _749;
    float _908 = (_902 * _670) - _750;
    float _912 = abs(dot(vec3(_748, _749, _750), vec3(_668, _669, _670)));
    float _3885 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _914 = sqrt(_812);
    float _927 = exp2((_914 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_914 * 3.0));
    float _933 = (1.0 - _927) * ((_914 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _934 = _927 * _914;
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_970, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962));
        float _1029 = fma(_970, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962));
        float _1033 = fma(_970, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962));
        float _1058 = _962 + _668;
        float _1059 = _966 + _669;
        float _1060 = _970 + _670;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1025;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1029;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1033;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_668, _669, _670), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3933 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_668, _669, _670), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3966 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_668, _669, _670), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3999 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_970, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962));
        float _1348 = fma(_970, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962));
        float _1352 = fma(_970, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962));
        float _1375 = _962 + _668;
        float _1376 = _966 + _669;
        float _1377 = _970 + _670;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_668, _669, _670), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4062 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_668, _669, _670), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4095 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_668, _669, _670), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4128 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = _1301;
        _1621 = _1301;
        _1622 = _1301;
        _1623 = _1301;
        _1624 = _1301;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1314)) + _1314;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1315)) + _1315;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _906 * 0.5;
    float _1682 = _907 * 0.5;
    float _1683 = _908 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1799 = fma(_970, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962)) + cbModelParam._m0[13u].w;
        float _1803 = fma(_970, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962)) + cbModelParam._m0[14u].w;
        float _1807 = fma(_970, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962)) + cbModelParam._m0[15u].w;
        float _1810 = fma(_908, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906));
        float _1813 = fma(_908, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906));
        float _1816 = fma(_908, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906));
        float _1844;
        if (_1810 > 0.0)
        {
            _1844 = abs((1.0 - _1799) / _1810);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1799 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1844 = frontier_phi_25_23_ladder;
        }
        float _2048;
        if (_1813 > 0.0)
        {
            _2048 = abs((1.0 - _1803) / _1813);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1803 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2048 = frontier_phi_34_30_ladder;
        }
        float _2302;
        if (_1816 > 0.0)
        {
            _2302 = abs((1.0 - _1807) / _1816);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1807 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2302 = frontier_phi_46_41_ladder;
        }
        float _2304 = isnan(_2048) ? _1844 : (isnan(_1844) ? _2048 : min(_1844, _2048));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1810) + _1799;
        float _2310 = (_2305 * _1813) + _1803;
        float _2311 = (_2305 * _1816) + _1807;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_24_46_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1832 = frontier_phi_24_46_ladder_2;
        _1834 = frontier_phi_24_46_ladder_1;
        _1836 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1820 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_906, _907, _908), _1750);
        _1832 = _1820.x * cbModelParam._m0[1u].y;
        _1834 = _1820.y * cbModelParam._m0[1u].y;
        _1836 = _1820.z * cbModelParam._m0[1u].y;
    }
    float _1840 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1841 = isnan(_1840) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1840 : min(cbModelParam._m0[25u].w, _1840));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1894 = fma(_970, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962)) + cbModelParam._m0[21u].w;
        float _1898 = fma(_970, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962)) + cbModelParam._m0[22u].w;
        float _1902 = fma(_970, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962)) + cbModelParam._m0[23u].w;
        float _1905 = fma(_908, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906));
        float _1908 = fma(_908, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906));
        float _1911 = fma(_908, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906));
        float _2053;
        if (_1905 > 0.0)
        {
            _2053 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2053 = frontier_phi_36_32_ladder;
        }
        float _2329;
        if (_1908 > 0.0)
        {
            _2329 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2329 = frontier_phi_48_43_ladder;
        }
        float _2542;
        if (_1911 > 0.0)
        {
            _2542 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2542 = frontier_phi_57_54_ladder;
        }
        float _2544 = isnan(_2329) ? _2053 : (isnan(_2053) ? _2329 : min(_2053, _2329));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1905) + _1894;
        float _2550 = (_2545 * _1908) + _1898;
        float _2551 = (_2545 * _1911) + _1902;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1841);
            frontier_phi_33_57_ladder = _2767.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2767.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2767.z * cbModelParam._m0[1u].z;
        }
        _1930 = frontier_phi_33_57_ladder_1;
        _1932 = frontier_phi_33_57_ladder;
        _1934 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_906, _907, _908), _1841);
        _1930 = _1914.x * cbModelParam._m0[1u].z;
        _1932 = _1914.y * cbModelParam._m0[1u].z;
        _1934 = _1914.z * cbModelParam._m0[1u].z;
    }
    float _1947 = (((_933 * _883) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1949 = (((_933 * _885) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1951 = (((_933 * _886) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1934 - _1836)) + _1836);
    float _1954 = fma(_1951, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1957 = fma(_1951, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1960 = fma(_1951, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, _1947 * cbSceneParam._m0[91u].x));
    uvec4 _1970 = floatBitsToUint(cbInstanceData._m0[_825 + 5u]);
    uint _1972 = _1970.x * 14u;
    uint _1973 = _1972 + 13u;
    float _1980 = _898 + (-1.0);
    float _1985 = (cbLight._m0[_1973].x * _1980) + 1.0;
    float _1986 = (cbLight._m0[_1973].y * _1980) + 1.0;
    float _1987 = (cbLight._m0[_1973].z * _1980) + 1.0;
    float _1988 = (cbLight._m0[_1973].w * _1980) + 1.0;
    uint _1989 = _1972 + 5u;
    float _1995 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _1999 = _1972 + 4u;
    float _2006 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _2010 = _1972 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_668, _669, _670));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_668, _669, _670));
    float _4264 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4275 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1989].x * _1995) * _2031) + ((cbLight._m0[_1999].x * _2006) * _2029);
    float _2039 = ((_1995 * cbLight._m0[_1989].y) * _2031) + ((_2006 * cbLight._m0[_1999].y) * _2029);
    float _2040 = ((_1995 * cbLight._m0[_1989].z) * _2031) + ((_2006 * cbLight._m0[_1999].z) * _2029);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1972 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2047)
    {
        _2058 = _2038;
        _2060 = _2039;
        _2062 = _2040;
    }
    else
    {
        uint _2066 = _1972 + 6u;
        float _2082 = (dot(vec3(cbLight._m0[_1972 + 2u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _4286 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2085 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2058 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _2038;
        _2060 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _2039;
        _2062 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _2040;
    }
    bool _2065 = _2045.y == 0u;
    float _2103;
    float _2105;
    float _2107;
    if (_2065)
    {
        _2103 = _2058;
        _2105 = _2060;
        _2107 = _2062;
    }
    else
    {
        uint _2273 = _1972 + 7u;
        float _2289 = (dot(vec3(cbLight._m0[_1972 + 3u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4302 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2292 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2103 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2058;
        _2105 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2060;
        _2107 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2062;
    }
    uint _2110 = _1972 + 8u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _812) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1972].x + _748;
    float _2126 = cbLight._m0[_1972].y + _749;
    float _2127 = cbLight._m0[_1972].z + _750;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1972].xyz));
    float _4318 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2139 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2140 = dot(vec3(_668, _669, _670), vec3(_2132, _2133, _2134));
    float _4340 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2132, _2133, _2134));
    float _4351 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2124 * _2124;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
    float _2161 = 0.959999978542327880859375 - _880;
    float _2163 = 0.959999978542327880859375 - _881;
    float _2164 = 0.959999978542327880859375 - _882;
    float _2171 = 1.0 - _2124;
    float _2182 = (0.5 / (((_2139 * ((_2138 * _2171) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2171) + _2124) * _2138))) * _2138;
    float _4362 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    uint _2195 = _1972 + 9u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _812) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2010].x + _748;
    float _2209 = cbLight._m0[_2010].y + _749;
    float _2210 = cbLight._m0[_2010].z + _750;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2010].xyz));
    float _4373 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2222 = dot(vec3(_668, _669, _670), vec3(_2215, _2216, _2217));
    float _4384 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2226 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2215, _2216, _2217));
    float _4395 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2230 = _2207 * _2207;
    float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
    float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
    float _2248 = 1.0 - _2207;
    float _2258 = (0.5 / (((_2139 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2248) + _2207) * _2221))) * _2221;
    float _4406 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
    float _2270 = (((((_2241 * _2161) + _883) * cbLight._m0[_2195].x) * _2260) * _1995) + (((((_2160 * _2161) + _883) * cbLight._m0[_2110].x) * _2184) * _2006);
    float _2271 = (((((_2241 * _2163) + _885) * cbLight._m0[_2195].y) * _2260) * _1995) + (((((_2160 * _2163) + _885) * cbLight._m0[_2110].y) * _2184) * _2006);
    float _2272 = (((((_2241 * _2164) + _886) * cbLight._m0[_2195].z) * _2260) * _1995) + (((((_2160 * _2164) + _886) * cbLight._m0[_2110].z) * _2184) * _2006);
    float _2334;
    float _2336;
    float _2338;
    if (_2047)
    {
        _2334 = _2270;
        _2336 = _2271;
        _2338 = _2272;
    }
    else
    {
        uint _2340 = _1972 + 2u;
        uint _2344 = _1972 + 10u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _812) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _748;
        float _2361 = cbLight._m0[_2340].y + _749;
        float _2362 = cbLight._m0[_2340].z + _750;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2340].xyz));
        float _4417 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2374 = dot(vec3(_668, _669, _670), vec3(_2367, _2368, _2369));
        float _4428 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4439 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
        float _2400 = 1.0 - _2359;
        float _2410 = (0.5 / (((_2139 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2400) + _2359) * _2373))) * _2373;
        float _4450 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2334 = (((((_2393 * _2161) + _883) * cbLight._m0[_2344].x) * _2412) * _2413) + _2270;
        _2336 = (((((_2393 * _2163) + _885) * cbLight._m0[_2344].y) * _2412) * _2413) + _2271;
        _2338 = (((((_2393 * _2164) + _886) * cbLight._m0[_2344].z) * _2412) * _2413) + _2272;
    }
    float _2448;
    float _2450;
    float _2452;
    if (_2065)
    {
        _2448 = _2334;
        _2450 = _2336;
        _2452 = _2338;
    }
    else
    {
        uint _2459 = _1972 + 3u;
        uint _2463 = _1972 + 11u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _812) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _748;
        float _2480 = cbLight._m0[_2459].y + _749;
        float _2481 = cbLight._m0[_2459].z + _750;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2459].xyz));
        float _4466 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2493 = dot(vec3(_668, _669, _670), vec3(_2486, _2487, _2488));
        float _4477 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4488 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2139 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2519) + _2478) * _2492))) * _2492;
        float _4499 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2448 = (((((_2512 * _2161) + _883) * cbLight._m0[_2463].x) * _2531) * _2532) + _2334;
        _2450 = (((((_2512 * _2163) + _885) * cbLight._m0[_2463].y) * _2531) * _2532) + _2336;
        _2452 = (((((_2512 * _2164) + _886) * cbLight._m0[_2463].z) * _2531) * _2532) + _2338;
    }
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1970.y == 0u)
    {
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2607;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2607;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2607;
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _771) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _770) / _2623)));
        float _2644 = (log2(_2610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
        }
        else
        {
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            uint _2930 = 0u;
            uint _2939;
            bool _2940;
            for (;;)
            {
                _2939 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                _2940 = _2939 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2940)
                {
                    frontier_phi_74_pred = _2929;
                    frontier_phi_74_pred_1 = _2928;
                    frontier_phi_74_pred_2 = _2927;
                    frontier_phi_74_pred_3 = _2926;
                    frontier_phi_74_pred_4 = _2925;
                    frontier_phi_74_pred_5 = _2924;
                }
                else
                {
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    uint _3075;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2939;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3079 = uint(findLSB(_3075)) + (_2930 << 5u);
                        uint _3076 = (_3075 + 4294967295u) & _3075;
                        uint _3081 = _3079 * 48u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3101 = (_3079 * 48u) + 4u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3120 = (_3079 * 48u) + 8u;
                        vec3 _3131 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x));
                        float _3135 = _3095.x - _2608;
                        float _3136 = _3095.y - _2609;
                        float _3137 = _3095.z - _2610;
                        float _3138 = dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137));
                        float _3141 = inversesqrt(_3138);
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3145 = dot(vec3(_793, _796, _799), vec3(_3142, _3143, _3144));
                        float _3150 = 1.0 - (_3138 * _3095.w);
                        float _4525 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3152 = sqrt(_3138) * _3114.w;
                        float _3155 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3145) + _3156;
                        float _3162 = _3152 * _3152;
                        float _3166 = ((isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))) * _3151) / ((_3162 * 0.699999988079071044921875) + 1.0);
                        float _3170 = (-0.0) - _2608;
                        float _3171 = (-0.0) - _2609;
                        float _3172 = (-0.0) - _2610;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3187 = exp2(log2(1.0 / ((_3162 * 3.5) + 5.0)) * 0.25);
                        float _3188 = 1.0 - _914;
                        float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                        float _3196 = _3195 * _3195;
                        float _3197 = _3196 * _3196;
                        float _3198 = _3177 + _3142;
                        float _3199 = _3178 + _3143;
                        float _3200 = _3179 + _3144;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3208 = dot(vec3(_793, _796, _799), vec3(_3177, _3178, _3179));
                        float _4541 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3212 = dot(vec3(_793, _796, _799), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                        float _4552 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                        float _3220 = _3155 * _3196;
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3145) + _3221;
                        float _4563 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3226 = 1.0 - _3196;
                        float _3236 = (0.5 / (((_3225 * ((_3211 * _3226) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3196) * _3211))) * _3225;
                        float _4574 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3247 = (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3219 * _3219) * ((_3162 * 2.1991131305694580078125) + 3.141590118408203125))) * _3151;
                        _2999 = (_3166 * _3114.x) + _3072;
                        _3000 = (_3166 * _3114.y) + _3073;
                        _3001 = (_3166 * _3114.z) + _3074;
                        _2996 = (_3247 * _3131.x) + _3069;
                        _2997 = (_3247 * _3131.y) + _3070;
                        _2998 = (_3247 * _3131.z) + _3071;
                        if (_3076 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3076;
                        }
                    }
                    frontier_phi_74_pred = _3001;
                    frontier_phi_74_pred_1 = _3000;
                    frontier_phi_74_pred_2 = _2999;
                    frontier_phi_74_pred_3 = _2998;
                    frontier_phi_74_pred_4 = _2997;
                    frontier_phi_74_pred_5 = _2996;
                }
                _2783 = frontier_phi_74_pred;
                _2781 = frontier_phi_74_pred_1;
                _2779 = frontier_phi_74_pred_2;
                _2777 = frontier_phi_74_pred_3;
                _2775 = frontier_phi_74_pred_4;
                _2773 = frontier_phi_74_pred_5;
                uint _2931 = _2930 + 1u;
                if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2924 = _2773;
                    _2925 = _2775;
                    _2926 = _2777;
                    _2927 = _2779;
                    _2928 = _2781;
                    _2929 = _2783;
                    _2930 = _2931;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
        }
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.z;
        uint _2789 = (_2787 >> 8u) & 15u;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((4294967295u << _2789) & _2654) == 0u)
        {
            _2892 = _2772;
            _2894 = _2774;
            _2896 = _2776;
            _2898 = _2778;
            _2900 = _2780;
            _2902 = _2782;
        }
        else
        {
            float _2917 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
            float _2918 = _2917 * _2608;
            float _2919 = _2917 * _2609;
            float _2920 = _2917 * _2610;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2789 < ((_2787 >> 12u) & 15u))
            {
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _3052 = _2772;
                float _3053 = _2774;
                float _3054 = _2776;
                float _3055 = _2778;
                float _3056 = _2780;
                float _3057 = _2782;
                uint _3058 = _2789;
                uint _3067;
                bool _3068;
                for (;;)
                {
                    _3067 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                    _3068 = _3067 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_3068)
                    {
                        frontier_phi_85_pred = _3056;
                        frontier_phi_85_pred_1 = _3055;
                        frontier_phi_85_pred_2 = _3054;
                        frontier_phi_85_pred_3 = _3053;
                        frontier_phi_85_pred_4 = _3052;
                        frontier_phi_85_pred_5 = _3057;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        uint _3280 = _3067;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3350;
                        vec4 _3365;
                        float _3411;
                        bool _3412;
                        for (;;)
                        {
                            uint _3291 = ((_3058 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3337 = (_3291 * 40u) + 16u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3291 * 40u) + 20u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3291 * 40u) + 24u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3386 = (_3291 * 40u) + 28u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3411 = fma(_2610, _3399.z, fma(_2609, _3399.y, _3399.x * _2608)) + _3399.w;
                            _3412 = !((fma(_2610, _3380.z, fma(_2609, _3380.y, _3380.x * _2608)) + _3380.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3412)
                            {
                                float _3439 = _3306.x - _2608;
                                float _3440 = _3306.y - _2609;
                                float _3441 = _3306.z - _2610;
                                float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                                float _3445 = inversesqrt(_3442);
                                float _3446 = _3445 * _3439;
                                float _3447 = _3445 * _3440;
                                float _3448 = _3445 * _3441;
                                float _3452 = 1.0 - (_3442 / (_3307 * _3307));
                                float _4585 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3457 = sqrt(_3442) * _3322.w;
                                float _3459 = 1.39999997615814208984375 / (_3457 + 1.39999997615814208984375);
                                float _3460 = _3459 * _3459;
                                float _3463 = ((1.0 - _3460) * dot(vec3(_3446, _3447, _3448), vec3(_793, _796, _799))) + _3460;
                                float _3466 = _3457 * _3457;
                                float _3470 = (fma(_2610, _3350.z, fma(_2609, _3350.y, _3350.x * _2608)) + _3350.w) / _3411;
                                float _3471 = (fma(_2610, _3365.z, fma(_2609, _3365.y, _3365.x * _2608)) + _3365.w) / _3411;
                                float _3475 = 1.0 - dot(vec2(_3470, _3471), vec2(_3470, _3471));
                                float _4601 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3477 = _3476 * (((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3453) / ((_3466 * 0.699999988079071044921875) + 1.0));
                                float _3489 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                                float _3490 = 1.0 - _914;
                                float _3497 = sqrt(1.0 - ((1.0 - (_3490 * _3490)) * (1.0 - (_3489 * _3489))));
                                float _3498 = _3497 * _3497;
                                float _3499 = _3498 * _3498;
                                float _3500 = _3446 - _2918;
                                float _3501 = _3447 - _2919;
                                float _3502 = _3448 - _2920;
                                float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                                float _3510 = dot(vec3(_793, _796, _799), vec3((-0.0) - _2918, (-0.0) - _2919, (-0.0) - _2920));
                                float _4612 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3514 = dot(vec3(_793, _796, _799), vec3(_3506 * _3500, _3506 * _3501, _3506 * _3502));
                                float _4623 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3521 = ((_3517 * _3517) * (_3499 + (-1.0))) + 1.0;
                                float _3522 = _3459 * _3498;
                                float _3523 = _3522 * _3522;
                                float _3529 = ((1.0 - _3523) * dot(vec3(_793, _796, _799), vec3(_3446, _3447, _3448))) + _3523;
                                float _4634 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3531 = 1.0 - _3498;
                                float _3541 = (0.5 / (((_3530 * ((_3513 * _3531) + _3498)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3498) * _3513))) * _3530;
                                float _4645 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3551 = (_3476 * _3453) * (((_3499 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3521 * _3521) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3477 * _3322.y;
                                frontier_phi_91_pred_1 = _3477 * _3322.x;
                                frontier_phi_91_pred_2 = _3551 * _3334.z;
                                frontier_phi_91_pred_3 = _3551 * _3334.y;
                                frontier_phi_91_pred_4 = _3551 * _3334.x;
                                frontier_phi_91_pred_5 = _3477 * _3322.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3559 = frontier_phi_91_pred;
                            _3558 = frontier_phi_91_pred_1;
                            _3557 = frontier_phi_91_pred_2;
                            _3556 = frontier_phi_91_pred_3;
                            _3555 = frontier_phi_91_pred_4;
                            _3560 = frontier_phi_91_pred_5;
                            _3264 = _3558 + _3277;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3265;
                        frontier_phi_85_pred_1 = _3264;
                        frontier_phi_85_pred_2 = _3263;
                        frontier_phi_85_pred_3 = _3262;
                        frontier_phi_85_pred_4 = _3261;
                        frontier_phi_85_pred_5 = _3266;
                    }
                    _2901 = frontier_phi_85_pred;
                    _2899 = frontier_phi_85_pred_1;
                    _2897 = frontier_phi_85_pred_2;
                    _2895 = frontier_phi_85_pred_3;
                    _2893 = frontier_phi_85_pred_4;
                    _2903 = frontier_phi_85_pred_5;
                    uint _3059 = _3058 + 1u;
                    if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3052 = _2893;
                        _3053 = _2895;
                        _3054 = _2897;
                        _3055 = _2899;
                        _3056 = _2901;
                        _3057 = _2903;
                        _3058 = _3059;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2903;
                frontier_phi_66_67_ladder_1 = _2899;
                frontier_phi_66_67_ladder_2 = _2901;
                frontier_phi_66_67_ladder_3 = _2895;
                frontier_phi_66_67_ladder_4 = _2893;
                frontier_phi_66_67_ladder_5 = _2897;
            }
            else
            {
                frontier_phi_66_67_ladder = _2782;
                frontier_phi_66_67_ladder_1 = _2778;
                frontier_phi_66_67_ladder_2 = _2780;
                frontier_phi_66_67_ladder_3 = _2774;
                frontier_phi_66_67_ladder_4 = _2772;
                frontier_phi_66_67_ladder_5 = _2776;
            }
            _2892 = frontier_phi_66_67_ladder_4;
            _2894 = frontier_phi_66_67_ladder_3;
            _2896 = frontier_phi_66_67_ladder_5;
            _2898 = frontier_phi_66_67_ladder_1;
            _2900 = frontier_phi_66_67_ladder_2;
            _2902 = frontier_phi_66_67_ladder;
        }
        float _2907 = isnan(1.0) ? _898 : (isnan(_898) ? 1.0 : min(_898, 1.0));
        _2666 = (_2907 * _2898) + _2103;
        _2668 = (_2907 * _2900) + _2105;
        _2670 = (_2907 * _2902) + _2107;
        _2672 = ((_2892 * _883) * _2907) + _2448;
        _2674 = ((_2894 * _885) * _2907) + _2450;
        _2676 = ((_2896 * _886) * _2907) + _2452;
    }
    else
    {
        _2666 = _2103;
        _2668 = _2105;
        _2670 = _2107;
        _2672 = _2448;
        _2674 = _2450;
        _2676 = _2452;
    }
    vec4 _2682 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4661 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4672 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4683 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2706 = (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2666 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _898))) + ((_2672 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1739)) * cbPerFrame._m0[3u].x)) + (_2682.x * cbMtdParam._m0[3u].x);
    float _2708 = ((_2682.y * cbMtdParam._m0[3u].x) + ((_2674 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1739)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2668 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _898)));
    float _2710 = ((_2682.z * cbMtdParam._m0[3u].x) + ((_2676 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1739)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2670 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _898)));
    float _2711 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2712 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2713 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    uint _2714 = _825 + 6u;
    float _2722 = _770 / cbSceneParam._m0[86u].x;
    float _2723 = _771 / cbSceneParam._m0[86u].y;
    vec4 _2737 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2739 = _2737.x;
    float _2740 = _2737.y;
    float _2741 = _2737.z;
    float _2742 = _2737.w;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2797 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2798 = _2797 / _691;
        float _2809 = _2798 * _741;
        float _2810 = _742 * _2798;
        float _2811 = (-0.0) - _2810;
        float _2812 = _2798 * _743;
        float _2814 = (cbSceneParam._m0[77u].w * _2811) / _2797;
        float _2815 = _2814 + cbSceneParam._m0[79u].w;
        float _2816 = cbSceneParam._m0[79u].w - _2810;
        float _2822 = sqrt(((_2809 * _2809) + (_2810 * _2810)) + (_2812 * _2812));
        float _2825 = (1.0 - (cbSceneParam._m0[77u].w / _2797)) * _2822;
        float _2830 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2832 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2811 - _2814) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2815 > 0.0) ? exp2(_2830 * _2815) : (2.0 - exp2(_2832 * _2815))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2825;
        }
        else
        {
            float _2953 = 1.0 / cbSceneParam._m0[80u].x;
            float _2954 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : max(_2815, _2816));
            float _2955 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : min(_2815, _2816));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            _3009 = ((abs(_2822 / _2811) * cbSceneParam._m0[80u].y) * ((((_2964 - _2965) * 2.0) - ((exp2(_2830 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)))) - exp2(_2830 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))))) * _2953)) - ((exp2(_2832 * _2964) - exp2(_2832 * _2965)) * _2953))) + (_2825 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2742);
        _2834 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2739;
        _2836 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2740;
        _2838 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2741;
        _2840 = _3020 * _2742;
    }
    else
    {
        _2834 = _2739;
        _2836 = _2740;
        _2838 = _2741;
        _2840 = _2742;
    }
    bool _3047;
    vec4 _2850;
    vec4 _2872;
    float _2874;
    float _2878;
    float _2879;
    float _2880;
    float _2881;
    bool _2891;
    for (;;)
    {
        _2850 = cbMatDynParam._m0[0u];
        float _2852 = roundEven(_2850.y);
        bool _2853 = _2852 == 3.0;
        float _2854 = log2(_2840);
        float _2861 = exp2(_2854 * cbSceneParam._m0[78u].x) * _2711;
        float _2862 = exp2(_2854 * cbSceneParam._m0[78u].y) * _2712;
        float _2863 = exp2(_2854 * cbSceneParam._m0[78u].z) * _2713;
        float _2870 = _757 + (-0.5);
        _2872 = cbMtdParam._m0[1u];
        _2874 = _2872.y * _2870;
        float _2877 = (_2852 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2878 = _2877 * (_2853 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2834)));
        _2879 = _2877 * (_2853 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2836)));
        _2880 = _2877 * (_2853 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2838)));
        _2881 = _2870 * 0.999000012874603271484375;
        _2891 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2891)
        {
            if ((cbInstanceData._m0[_825 + 7u].x + _2881) < 0.5)
            {
                _3047 = true;
                break;
            }
        }
        uint _2988 = _827 + uint(_2850.w);
        if ((cbInstanceData._m0[_2988].w < 1.0) && ((cbInstanceData._m0[_2988].w + _2881) < 0.5))
        {
            _3047 = true;
            break;
        }
        if ((_2874 + 1.0) < _2872.x)
        {
            _3047 = true;
            break;
        }
        _3047 = false;
        break;
    }
    float _3252;
    if (_3047)
    {
        discard_state = true;
        _3252 = 0.0;
    }
    else
    {
        _3252 = cbInstanceData._m0[_2714].w;
    }
    SV_Target.x = _2878;
    SV_Target.y = _2879;
    SV_Target.z = _2880;
    SV_Target.w = _3252;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2714].w;
    discard_exit();
}


