#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1051;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    float _253 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _258 = log2(0.0);
    bool _261 = exp2(_258 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _262;
    float _264;
    float _266;
    if (_261)
    {
        _262 = cbMtdParam._m0[19u].x;
        _264 = cbMtdParam._m0[19u].y;
        _266 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _262 = cbMtdParam._m0[18u].x;
        _264 = cbMtdParam._m0[18u].y;
        _266 = cbMtdParam._m0[18u].z;
    }
    float _272;
    if (_261)
    {
        _272 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _272 = cbMtdParam._m0[20u].z;
    }
    float _278;
    float _280;
    if (_261)
    {
        _278 = cbMtdParam._m0[28u].z;
        _280 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _278 = cbMtdParam._m0[24u].x;
        _280 = cbMtdParam._m0[24u].y;
    }
    float _282 = _278 * TEXCOORD.x;
    float _283 = _280 * TEXCOORD.y;
    float _295 = floor(_272);
    vec4 _298 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _282) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _283) + cbTextureTilingScale._m0[8u].w, _295));
    vec4 _321 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _253) + cbTextureTilingScale._m0[0u].w));
    float _330 = (((_262 * cbMtdParam._m0[20u].w) * _298.x) * cbMtdParam._m0[9u].x) * _321.x;
    float _334 = (((_264 * cbMtdParam._m0[20u].w) * _298.y) * cbMtdParam._m0[9u].y) * _321.y;
    float _338 = (((_266 * cbMtdParam._m0[20u].w) * _298.z) * cbMtdParam._m0[9u].z) * _321.z;
    vec4 _350 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _253) + cbTextureTilingScale._m0[1u].w));
    float _354 = _350.z;
    float _181[2];
    float _182[2];
    _181[0u] = cbMtdParam._m0[27u].z;
    _182[0u] = cbMtdParam._m0[27u].w;
    _181[1u] = cbMtdParam._m0[28u].x;
    _182[1u] = cbMtdParam._m0[28u].y;
    float _385 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _388 = uint(int(isnan(1.0) ? _385 : (isnan(_385) ? 1.0 : min(_385, 1.0))));
    float _394 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _282) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _283) + cbTextureTilingScale._m0[10u].w, _295)).x + _350.w) + _182[_388];
    vec4 _412 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w, _295));
    float _419 = (_412.x * 2.0) + (-1.0);
    float _420 = (_412.y * 2.0) + (-1.0);
    float _421 = dot(vec2(_419, _420), vec2(_419, _420));
    float _3440 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))));
    float _435 = (cbMtdParam._m0[21u].x * (((_354 * 2.0) * (_412.z + _181[_388])) - _354)) + _354;
    float _439 = (cbMtdParam._m0[21u].y * ((_350.x * 2.0) + (-1.0))) + _419;
    float _440 = (cbMtdParam._m0[21u].y * ((_350.y * 2.0) + (-1.0))) + _420;
    float _443 = fma(_426, _232, fma(_440, _224 * TANGENT.x, (_210 * _202) * _439));
    float _446 = fma(_426, _233, fma(_440, _224 * TANGENT.y, (_210 * _203) * _439));
    float _449 = fma(_426, _234, fma(_440, _224 * TANGENT.z, (_210 * _204) * _439));
    float _453 = inversesqrt(dot(vec3(_443, _446, _449), vec3(_443, _446, _449)));
    float _454 = _453 * _443;
    float _455 = _453 * _446;
    float _456 = _453 * _449;
    float _3451 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _457 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3473 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3484 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3495 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _461 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    float _543 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _544 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _546 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _548 = _546.w;
    float _569 = fma(_456, cbSceneParam._m0[5u].z, fma(_455, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _454));
    float _572 = fma(_456, cbSceneParam._m0[6u].z, fma(_455, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _454));
    float _575 = fma(_456, cbSceneParam._m0[7u].z, fma(_455, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _454));
    vec4 _577 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _588 = (((_577.y - _457) + (_577.w * _457)) * cbMtdParam._m0[3u].x) + _457;
    uint _601 = uint(roundEven(NORMAL.w)) * 13u;
    uint _604 = (_601 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _610 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_604].x;
    float _611 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_604].y;
    float _612 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_604].z;
    float _3506 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    vec4 _616 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _621 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _632 = (((_621.x - _461) + (_621.w * _461)) * cbMtdParam._m0[3u].x) + _461;
    float _645 = (cbMtdParam._m0[3u].x * (((_613 * _548) - _613) + _616.x)) + _613;
    float _646 = (cbMtdParam._m0[3u].x * (((_614 * _548) - _614) + _616.y)) + _614;
    float _647 = (cbMtdParam._m0[3u].x * (((_615 * _548) - _615) + _616.z)) + _615;
    float _648 = 1.0 - _632;
    float _649 = _648 * _645;
    float _650 = _648 * _646;
    float _651 = _648 * _647;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _632;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _632;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _632;
    float _659 = _656 + 0.039999999105930328369140625;
    float _661 = _657 + 0.039999999105930328369140625;
    float _662 = _658 + 0.039999999105930328369140625;
    vec4 _671 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _543, cbSceneParam._m0[86u].y * _544));
    float _674 = _671.x * TEXCOORD_4;
    float _675 = dot(vec3(_454, _455, _456), vec3(_535, _536, _537));
    float _678 = _675 * 2.0;
    float _682 = (_678 * _454) - _535;
    float _683 = (_678 * _455) - _536;
    float _684 = (_678 * _456) - _537;
    float _688 = abs(dot(vec3(_535, _536, _537), vec3(_454, _455, _456)));
    float _3539 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _690 = sqrt(_588);
    float _703 = exp2((_690 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_690 * 3.0));
    float _709 = (1.0 - _703) * ((_690 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _710 = _703 * _690;
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_746, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738));
        float _779 = fma(_746, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738));
        float _783 = fma(_746, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738));
        float _808 = _738 + _454;
        float _809 = _742 + _455;
        float _810 = _746 + _456;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _775;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _779;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _783;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_454, _455, _456), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3587 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_454, _455, _456), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3620 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_454, _455, _456), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3653 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1091 = fma(_746, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _738));
        float _1095 = fma(_746, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _738));
        float _1099 = fma(_746, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _738));
        float _1122 = _738 + _454;
        float _1123 = _742 + _455;
        float _1124 = _746 + _456;
        float _1134 = fma(_1124, cbModelParam._m0[30u].z, fma(_1123, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122)) - _1091;
        float _1135 = fma(_1124, cbModelParam._m0[31u].z, fma(_1123, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122)) - _1095;
        float _1136 = fma(_1124, cbModelParam._m0[32u].z, fma(_1123, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122)) - _1099;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1091 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1095 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[35u].z) + ((((((_1099 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1190 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1157.x + (-0.5));
        float _1192 = _1190 * (_1157.y + (-0.5));
        float _1193 = _1190 * (_1157.z + (-0.5));
        float _1200 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1164.x + (-0.5));
        float _1202 = _1200 * (_1164.y + (-0.5));
        float _1203 = _1200 * (_1164.z + (-0.5));
        float _1210 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1171.x + (-0.5));
        float _1212 = _1210 * (_1171.y + (-0.5));
        float _1213 = _1210 * (_1171.z + (-0.5));
        float _1220 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1178.x + (-0.5));
        float _1222 = _1220 * (_1178.y + (-0.5));
        float _1223 = _1220 * (_1178.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_454, _455, _456), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3716 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1254 + 1.0))) + _1259) * _1224;
        float _1269 = _1192 * 0.5;
        float _1270 = _1202 * 0.5;
        float _1271 = _1212 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_454, _455, _456), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3749 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1296 + 1.0))) + _1301) * _1225;
        float _1311 = _1193 * 0.5;
        float _1312 = _1203 * 0.5;
        float _1313 = _1213 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_454, _455, _456), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3782 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1338 + 1.0))) + _1343) * _1226;
        _1360 = _1193;
        _1361 = _1192;
        _1362 = _1191;
        _1363 = _1203;
        _1364 = _1202;
        _1365 = _1201;
        _1366 = _1213;
        _1367 = _1212;
        _1368 = _1211;
        _1369 = _1226;
        _1370 = _1225;
        _1371 = _1224;
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
    }
    else
    {
        _1360 = _1051;
        _1361 = _1051;
        _1362 = _1051;
        _1363 = _1051;
        _1364 = _1051;
        _1365 = _1051;
        _1366 = _1051;
        _1367 = _1051;
        _1368 = _1051;
        _1369 = _1051;
        _1370 = _1051;
        _1371 = _1051;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1064)) + _1064;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1065)) + _1065;
    float _1407 = fma(_1386, cbSceneParam._m0[89u].z, fma(_1385, cbSceneParam._m0[89u].y, _1384 * cbSceneParam._m0[89u].x));
    float _1410 = fma(_1386, cbSceneParam._m0[90u].z, fma(_1385, cbSceneParam._m0[90u].y, _1384 * cbSceneParam._m0[90u].x));
    float _1413 = fma(_1386, cbSceneParam._m0[91u].z, fma(_1385, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1384));
    float _1428 = _682 * 0.5;
    float _1429 = _683 * 0.5;
    float _1430 = _684 * 0.5;
    float _1431 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1434 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1437 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1471;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1444 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1448 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1452 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1459 = dot(vec4(cbModelParam._m0[39u]), vec4(_1428, _1429, _1430, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1482;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1473 = dot(vec4(cbModelParam._m0[40u]), vec4(_1428, _1429, _1430, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1486 = (_1482 * cbModelParam._m0[1u].x) + (_1471 * (1.0 - cbModelParam._m0[1u].x));
    float _1496 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _588);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1496 : min(cbModelParam._m0[25u].z, _1496));
    float _1579;
    float _1581;
    float _1583;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1546 = fma(_746, cbModelParam._m0[13u].z, fma(_742, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738)) + cbModelParam._m0[13u].w;
        float _1550 = fma(_746, cbModelParam._m0[14u].z, fma(_742, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738)) + cbModelParam._m0[14u].w;
        float _1554 = fma(_746, cbModelParam._m0[15u].z, fma(_742, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738)) + cbModelParam._m0[15u].w;
        float _1557 = fma(_684, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682));
        float _1560 = fma(_684, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682));
        float _1563 = fma(_684, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682));
        float _1591;
        if (_1557 > 0.0)
        {
            _1591 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1591 = frontier_phi_22_20_ladder;
        }
        float _1816;
        if (_1560 > 0.0)
        {
            _1816 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1816 = frontier_phi_31_27_ladder;
        }
        float _2073;
        if (_1563 > 0.0)
        {
            _2073 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2073 = frontier_phi_43_38_ladder;
        }
        float _2075 = isnan(_1816) ? _1591 : (isnan(_1591) ? _1816 : min(_1591, _1816));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1557) + _1546;
        float _2081 = (_2076 * _1560) + _1550;
        float _2082 = (_2076 * _1563) + _1554;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2083;
        float _2087 = _2083 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 > _2087) || ((_2081 < _2085) || ((_2080 < _2085) || (_2080 > _2087))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1497);
            frontier_phi_21_43_ladder = _2210.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2210.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2210.x * cbModelParam._m0[1u].y;
        }
        _1579 = frontier_phi_21_43_ladder_2;
        _1581 = frontier_phi_21_43_ladder_1;
        _1583 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_682, _683, _684), _1497);
        _1579 = _1567.x * cbModelParam._m0[1u].y;
        _1581 = _1567.y * cbModelParam._m0[1u].y;
        _1583 = _1567.z * cbModelParam._m0[1u].y;
    }
    float _1587 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _588);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1587 : min(cbModelParam._m0[25u].w, _1587));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1641 = fma(_746, cbModelParam._m0[21u].z, fma(_742, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738)) + cbModelParam._m0[21u].w;
        float _1645 = fma(_746, cbModelParam._m0[22u].z, fma(_742, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738)) + cbModelParam._m0[22u].w;
        float _1649 = fma(_746, cbModelParam._m0[23u].z, fma(_742, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738)) + cbModelParam._m0[23u].w;
        float _1652 = fma(_684, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682));
        float _1655 = fma(_684, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682));
        float _1658 = fma(_684, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682));
        float _1821;
        if (_1652 > 0.0)
        {
            _1821 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1821 = frontier_phi_33_29_ladder;
        }
        float _2100;
        if (_1655 > 0.0)
        {
            _2100 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2100 = frontier_phi_45_40_ladder;
        }
        float _2313;
        if (_1658 > 0.0)
        {
            _2313 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2313 = frontier_phi_54_51_ladder;
        }
        float _2315 = isnan(_2100) ? _1821 : (isnan(_1821) ? _2100 : min(_1821, _2100));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1652) + _1641;
        float _2321 = (_2316 * _1655) + _1645;
        float _2322 = (_2316 * _1658) + _1649;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2323;
        float _2326 = _2323 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2322 > _2326) || ((_2322 < _2324) || ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 < _2324) || (_2320 > _2326))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2322, cbModelParam._m0[17u].z, fma(_2321, cbModelParam._m0[17u].y, _2320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2322, cbModelParam._m0[18u].z, fma(_2321, cbModelParam._m0[18u].y, _2320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2322, cbModelParam._m0[19u].z, fma(_2321, cbModelParam._m0[19u].y, _2320 * cbModelParam._m0[19u].x))), _1588);
            frontier_phi_30_54_ladder = _2538.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2538.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2538.x * cbModelParam._m0[1u].z;
        }
        _1677 = frontier_phi_30_54_ladder_2;
        _1679 = frontier_phi_30_54_ladder;
        _1681 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_682, _683, _684), _1588);
        _1677 = _1661.x * cbModelParam._m0[1u].z;
        _1679 = _1661.y * cbModelParam._m0[1u].z;
        _1681 = _1661.z * cbModelParam._m0[1u].z;
    }
    float _1694 = (((_709 * _659) + _710) * _674) * ((cbModelParam._m0[1u].w * (_1677 - _1579)) + _1579);
    float _1696 = (((_709 * _661) + _710) * _674) * ((cbModelParam._m0[1u].w * (_1679 - _1581)) + _1581);
    float _1698 = (((_709 * _662) + _710) * _674) * ((cbModelParam._m0[1u].w * (_1681 - _1583)) + _1583);
    float _1701 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, _1694 * cbSceneParam._m0[91u].x));
    vec4 _1715 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_543, _544));
    float _1717 = _1715.w;
    float _1729 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1717);
    float _1730 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1717);
    float _1731 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1717);
    uvec4 _1735 = floatBitsToUint(cbInstanceData._m0[_601 + 5u]);
    uint _1737 = _1735.x * 14u;
    uint _1738 = _1737 + 13u;
    float _1745 = _674 + (-1.0);
    float _1750 = (cbLight._m0[_1738].x * _1745) + 1.0;
    float _1751 = (cbLight._m0[_1738].y * _1745) + 1.0;
    float _1752 = (cbLight._m0[_1738].z * _1745) + 1.0;
    float _1753 = (cbLight._m0[_1738].w * _1745) + 1.0;
    uint _1754 = _1737 + 5u;
    float _1760 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1764 = _1737 + 4u;
    float _1774 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1778 = _1737 | 1u;
    float _1789 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_454, _455, _456));
    float _1792 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_454, _455, _456));
    float _3918 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _3929 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1797 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _1799 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _1806 = ((cbLight._m0[_1754].x * _1760) * _1799) + (((cbLight._m0[_1764].x * _1729) * _1774) * _1797);
    float _1807 = ((_1760 * cbLight._m0[_1754].y) * _1799) + (((cbLight._m0[_1764].y * _1730) * _1774) * _1797);
    float _1808 = ((_1760 * cbLight._m0[_1754].z) * _1799) + (((cbLight._m0[_1764].z * _1731) * _1774) * _1797);
    uvec4 _1813 = floatBitsToUint(cbLight._m0[_1737 + 12u]);
    bool _1815 = _1813.x == 0u;
    float _1826;
    float _1828;
    float _1830;
    if (_1815)
    {
        _1826 = _1806;
        _1828 = _1807;
        _1830 = _1808;
    }
    else
    {
        uint _1834 = _1737 + 6u;
        float _1850 = (dot(vec3(cbLight._m0[_1737 + 2u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _1851 = _1850 * _1850;
        float _3940 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1853 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1826 = (((cbLight._m0[_1834].x * 0.3183098733425140380859375) * _1852) * _1853) + _1806;
        _1828 = (((cbLight._m0[_1834].y * 0.3183098733425140380859375) * _1852) * _1853) + _1807;
        _1830 = (((cbLight._m0[_1834].z * 0.3183098733425140380859375) * _1852) * _1853) + _1808;
    }
    bool _1833 = _1813.y == 0u;
    float _1871;
    float _1873;
    float _1875;
    if (_1833)
    {
        _1871 = _1826;
        _1873 = _1828;
        _1875 = _1830;
    }
    else
    {
        uint _2044 = _1737 + 7u;
        float _2060 = (dot(vec3(cbLight._m0[_1737 + 3u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _2061 = _2060 * _2060;
        float _3956 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2063 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _1871 = (((cbLight._m0[_2044].x * 0.3183098733425140380859375) * _2062) * _2063) + _1826;
        _1873 = (((cbLight._m0[_2044].y * 0.3183098733425140380859375) * _2062) * _2063) + _1828;
        _1875 = (((cbLight._m0[_2044].z * 0.3183098733425140380859375) * _2062) * _2063) + _1830;
    }
    uint _1878 = _1737 + 8u;
    float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1737].w)) * _588) * 0.949999988079071044921875);
    float _1892 = _1891 * _1891;
    float _1893 = cbLight._m0[_1737].x + _535;
    float _1894 = cbLight._m0[_1737].y + _536;
    float _1895 = cbLight._m0[_1737].z + _537;
    float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
    float _1900 = _1899 * _1893;
    float _1901 = _1899 * _1894;
    float _1902 = _1899 * _1895;
    float _1903 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1737].xyz));
    float _3972 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _1907 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1908 = dot(vec3(_454, _455, _456), vec3(_1900, _1901, _1902));
    float _3994 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1912 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1900, _1901, _1902));
    float _4005 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = _1892 * _1892;
    float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
    float _1928 = exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0);
    float _1929 = 0.959999978542327880859375 - _656;
    float _1931 = 0.959999978542327880859375 - _657;
    float _1932 = 0.959999978542327880859375 - _658;
    float _1939 = 1.0 - _1892;
    float _1950 = (0.5 / (((_1907 * ((_1906 * _1939) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _1939) + _1892) * _1906))) * _1906;
    float _4016 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1952 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
    uint _1966 = _1737 + 9u;
    float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1778].w)) * _588) * 0.949999988079071044921875);
    float _1978 = _1977 * _1977;
    float _1979 = cbLight._m0[_1778].x + _535;
    float _1980 = cbLight._m0[_1778].y + _536;
    float _1981 = cbLight._m0[_1778].z + _537;
    float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
    float _1986 = _1985 * _1979;
    float _1987 = _1985 * _1980;
    float _1988 = _1985 * _1981;
    float _1989 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1778].xyz));
    float _4027 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1993 = dot(vec3(_454, _455, _456), vec3(_1986, _1987, _1988));
    float _4038 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1997 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_1986, _1987, _1988));
    float _4049 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2001 = _1978 * _1978;
    float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
    float _2012 = exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0);
    float _2019 = 1.0 - _1978;
    float _2029 = (0.5 / (((_1907 * ((_1992 * _2019) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _2019) + _1978) * _1992))) * _1992;
    float _4060 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2031 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
    float _2041 = (((((_2012 * _1929) + _659) * cbLight._m0[_1966].x) * _2031) * _1760) + ((((cbLight._m0[_1878].x * _1729) * ((_1928 * _1929) + _659)) * _1952) * _1774);
    float _2042 = (((((_2012 * _1931) + _661) * cbLight._m0[_1966].y) * _2031) * _1760) + ((((cbLight._m0[_1878].y * _1730) * ((_1928 * _1931) + _661)) * _1952) * _1774);
    float _2043 = (((((_2012 * _1932) + _662) * cbLight._m0[_1966].z) * _2031) * _1760) + ((((cbLight._m0[_1878].z * _1731) * ((_1928 * _1932) + _662)) * _1952) * _1774);
    float _2105;
    float _2107;
    float _2109;
    if (_1815)
    {
        _2105 = _2041;
        _2107 = _2042;
        _2109 = _2043;
    }
    else
    {
        uint _2111 = _1737 + 2u;
        uint _2115 = _1737 + 10u;
        float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _588) * 0.949999988079071044921875);
        float _2130 = _2129 * _2129;
        float _2131 = cbLight._m0[_2111].x + _535;
        float _2132 = cbLight._m0[_2111].y + _536;
        float _2133 = cbLight._m0[_2111].z + _537;
        float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
        float _2138 = _2137 * _2131;
        float _2139 = _2137 * _2132;
        float _2140 = _2137 * _2133;
        float _2141 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2111].xyz));
        float _4071 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2145 = dot(vec3(_454, _455, _456), vec3(_2138, _2139, _2140));
        float _4082 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2149 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2138, _2139, _2140));
        float _4093 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2153 = _2130 * _2130;
        float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
        float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0);
        float _2171 = 1.0 - _2130;
        float _2181 = (0.5 / (((_1907 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _2171) + _2130) * _2144))) * _2144;
        float _4104 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2183 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
        float _2184 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2105 = (((((_2164 * _1929) + _659) * cbLight._m0[_2115].x) * _2183) * _2184) + _2041;
        _2107 = (((((_2164 * _1931) + _661) * cbLight._m0[_2115].y) * _2183) * _2184) + _2042;
        _2109 = (((((_2164 * _1932) + _662) * cbLight._m0[_2115].z) * _2183) * _2184) + _2043;
    }
    float _2219;
    float _2221;
    float _2223;
    if (_1833)
    {
        _2219 = _2105;
        _2221 = _2107;
        _2223 = _2109;
    }
    else
    {
        uint _2230 = _1737 + 3u;
        uint _2234 = _1737 + 11u;
        float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _588) * 0.949999988079071044921875);
        float _2249 = _2248 * _2248;
        float _2250 = cbLight._m0[_2230].x + _535;
        float _2251 = cbLight._m0[_2230].y + _536;
        float _2252 = cbLight._m0[_2230].z + _537;
        float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
        float _2257 = _2256 * _2250;
        float _2258 = _2256 * _2251;
        float _2259 = _2256 * _2252;
        float _2260 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2230].xyz));
        float _4120 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2264 = dot(vec3(_454, _455, _456), vec3(_2257, _2258, _2259));
        float _4131 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2268 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2257, _2258, _2259));
        float _4142 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2272 = _2249 * _2249;
        float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
        float _2283 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
        float _2290 = 1.0 - _2249;
        float _2300 = (0.5 / (((_1907 * ((_2263 * _2290) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _2290) + _2249) * _2263))) * _2263;
        float _4153 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2302 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
        float _2303 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _2219 = (((((_2283 * _1929) + _659) * cbLight._m0[_2234].x) * _2302) * _2303) + _2105;
        _2221 = (((((_2283 * _1931) + _661) * cbLight._m0[_2234].y) * _2302) * _2303) + _2107;
        _2223 = (((((_2283 * _1932) + _662) * cbLight._m0[_2234].z) * _2302) * _2303) + _2109;
    }
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    if (_1735.y == 0u)
    {
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2378;
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2378;
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2378;
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.x;
        uint _2405 = uint((float(_2393.y) * floor(float(uint(cbSceneParam._m0[85u].y * _544) / _2394))) + floor(float(uint(cbSceneParam._m0[85u].x * _543) / _2394)));
        float _2415 = (log2(_2381 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2416 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        uint _2419 = uint(isnan(14.0) ? _2416 : (isnan(_2416) ? 14.0 : min(_2416, 14.0)));
        uvec4 _2424 = texelFetch(g_lightClusterGridBuffer, int(((_2419 << 2u) + (_2405 << 6u)) >> 2u));
        uint _2425 = _2424.x;
        uint _2426 = _2393.z;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((((1u << ((_2426 >> 4u) & 15u)) + 4294967295u) & _2425) == 0u) || ((_2426 & 240u) == 0u))
        {
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
        }
        else
        {
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            uint _2693 = 0u;
            uint _2702;
            bool _2703;
            for (;;)
            {
                _2702 = texelFetch(g_lightClassification, int((((_2419 << 5u) + (_2405 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                _2703 = _2702 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2703)
                {
                    frontier_phi_69_pred = _2692;
                    frontier_phi_69_pred_1 = _2691;
                    frontier_phi_69_pred_2 = _2690;
                    frontier_phi_69_pred_3 = _2688;
                    frontier_phi_69_pred_4 = _2687;
                    frontier_phi_69_pred_5 = _2689;
                }
                else
                {
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    uint _2817;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2702;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    for (;;)
                    {
                        uint _2821 = uint(findLSB(_2817)) + (_2693 << 5u);
                        uint _2818 = (_2817 + 4294967295u) & _2817;
                        uint _2823 = _2821 * 48u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2843 = (_2821 * 48u) + 4u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2862 = (_2821 * 48u) + 8u;
                        vec3 _2873 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x));
                        float _2877 = _2837.x - _2379;
                        float _2878 = _2837.y - _2380;
                        float _2879 = _2837.z - _2381;
                        float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                        float _2883 = inversesqrt(_2880);
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2887 = dot(vec3(_569, _572, _575), vec3(_2884, _2885, _2886));
                        float _2892 = 1.0 - (_2880 * _2837.w);
                        float _4179 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2894 = sqrt(_2880) * _2856.w;
                        float _2897 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2887) + _2898;
                        float _2904 = _2894 * _2894;
                        float _2908 = ((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2893) / ((_2904 * 0.699999988079071044921875) + 1.0);
                        float _2912 = (-0.0) - _2379;
                        float _2913 = (-0.0) - _2380;
                        float _2914 = (-0.0) - _2381;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2929 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                        float _2930 = 1.0 - _690;
                        float _2937 = sqrt(1.0 - ((1.0 - (_2930 * _2930)) * (1.0 - (_2929 * _2929))));
                        float _2938 = _2937 * _2937;
                        float _2939 = _2938 * _2938;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2950 = dot(vec3(_569, _572, _575), vec3(_2919, _2920, _2921));
                        float _4195 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2954 = dot(vec3(_569, _572, _575), vec3(_2946 * _2940, _2946 * _2941, _2946 * _2942));
                        float _4206 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2961 = ((_2957 * _2957) * (_2939 + (-1.0))) + 1.0;
                        float _2962 = _2897 * _2938;
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2887) + _2963;
                        float _4217 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2968 = 1.0 - _2938;
                        float _2978 = (0.5 / (((_2967 * ((_2953 * _2968) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2967 * _2968) + _2938) * _2953))) * _2967;
                        float _4228 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2989 = (((_2939 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_2961 * _2961) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125))) * _2893;
                        _2746 = (_2908 * _2856.x) + _2814;
                        _2747 = (_2908 * _2856.y) + _2815;
                        _2748 = (_2908 * _2856.z) + _2816;
                        _2743 = (_2989 * _2873.x) + _2811;
                        _2744 = (_2989 * _2873.y) + _2812;
                        _2745 = (_2989 * _2873.z) + _2813;
                        if (_2818 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2818;
                        }
                    }
                    frontier_phi_69_pred = _2748;
                    frontier_phi_69_pred_1 = _2747;
                    frontier_phi_69_pred_2 = _2746;
                    frontier_phi_69_pred_3 = _2744;
                    frontier_phi_69_pred_4 = _2743;
                    frontier_phi_69_pred_5 = _2745;
                }
                _2554 = frontier_phi_69_pred;
                _2552 = frontier_phi_69_pred_1;
                _2550 = frontier_phi_69_pred_2;
                _2546 = frontier_phi_69_pred_3;
                _2544 = frontier_phi_69_pred_4;
                _2548 = frontier_phi_69_pred_5;
                uint _2694 = _2693 + 1u;
                if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2687 = _2544;
                    _2688 = _2546;
                    _2689 = _2548;
                    _2690 = _2550;
                    _2691 = _2552;
                    _2692 = _2554;
                    _2693 = _2694;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
        }
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.z;
        uint _2560 = (_2558 >> 8u) & 15u;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((4294967295u << _2560) & _2425) == 0u)
        {
            _2655 = _2543;
            _2657 = _2545;
            _2659 = _2547;
            _2661 = _2549;
            _2663 = _2551;
            _2665 = _2553;
        }
        else
        {
            float _2680 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
            float _2681 = _2680 * _2379;
            float _2682 = _2680 * _2380;
            float _2683 = _2680 * _2381;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2560 < ((_2558 >> 12u) & 15u))
            {
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2794 = _2543;
                float _2795 = _2545;
                float _2796 = _2547;
                float _2797 = _2549;
                float _2798 = _2551;
                float _2799 = _2553;
                uint _2800 = _2560;
                uint _2809;
                bool _2810;
                for (;;)
                {
                    _2809 = texelFetch(g_lightClassification, int((((_2419 << 5u) + (_2405 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                    _2810 = _2809 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2810)
                    {
                        frontier_phi_75_pred = _2796;
                        frontier_phi_75_pred_1 = _2795;
                        frontier_phi_75_pred_2 = _2794;
                        frontier_phi_75_pred_3 = _2799;
                        frontier_phi_75_pred_4 = _2798;
                        frontier_phi_75_pred_5 = _2797;
                    }
                    else
                    {
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        uint _3013 = _2809;
                        uint _3014;
                        vec4 _3039;
                        float _3040;
                        vec4 _3055;
                        vec3 _3067;
                        vec4 _3083;
                        vec4 _3098;
                        float _3144;
                        bool _3145;
                        for (;;)
                        {
                            uint _3024 = ((_2800 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3013));
                            _3014 = (_3013 + 4294967295u) & _3013;
                            uint _3026 = _3024 * 40u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3040 = _3039.w;
                            uint _3042 = (_3024 * 40u) + 4u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_3024 * 40u) + 8u;
                            _3067 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x));
                            uint _3070 = (_3024 * 40u) + 16u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3024 * 40u) + 20u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3024 * 40u) + 24u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3119 = (_3024 * 40u) + 28u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3144 = fma(_2381, _3132.z, fma(_2380, _3132.y, _3132.x * _2379)) + _3132.w;
                            _3145 = !((fma(_2381, _3113.z, fma(_2380, _3113.y, _3113.x * _2379)) + _3113.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3145)
                            {
                                float _3172 = _3039.x - _2379;
                                float _3173 = _3039.y - _2380;
                                float _3174 = _3039.z - _2381;
                                float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                                float _3178 = inversesqrt(_3175);
                                float _3179 = _3178 * _3172;
                                float _3180 = _3178 * _3173;
                                float _3181 = _3178 * _3174;
                                float _3185 = 1.0 - (_3175 / (_3040 * _3040));
                                float _4239 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3190 = sqrt(_3175) * _3055.w;
                                float _3192 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                                float _3193 = _3192 * _3192;
                                float _3196 = ((1.0 - _3193) * dot(vec3(_3179, _3180, _3181), vec3(_569, _572, _575))) + _3193;
                                float _3199 = _3190 * _3190;
                                float _3203 = (fma(_2381, _3083.z, fma(_2380, _3083.y, _3083.x * _2379)) + _3083.w) / _3144;
                                float _3204 = (fma(_2381, _3098.z, fma(_2380, _3098.y, _3098.x * _2379)) + _3098.w) / _3144;
                                float _3208 = 1.0 - dot(vec2(_3203, _3204), vec2(_3203, _3204));
                                float _4255 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3210 = _3209 * (((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3186) / ((_3199 * 0.699999988079071044921875) + 1.0));
                                float _3222 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                                float _3223 = 1.0 - _690;
                                float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                                float _3231 = _3230 * _3230;
                                float _3232 = _3231 * _3231;
                                float _3233 = _3179 - _2681;
                                float _3234 = _3180 - _2682;
                                float _3235 = _3181 - _2683;
                                float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                                float _3243 = dot(vec3(_569, _572, _575), vec3((-0.0) - _2681, (-0.0) - _2682, (-0.0) - _2683));
                                float _4266 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3247 = dot(vec3(_569, _572, _575), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                                float _4277 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                                float _3255 = _3192 * _3231;
                                float _3256 = _3255 * _3255;
                                float _3262 = ((1.0 - _3256) * dot(vec3(_569, _572, _575), vec3(_3179, _3180, _3181))) + _3256;
                                float _4288 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3264 = 1.0 - _3231;
                                float _3274 = (0.5 / (((_3263 * ((_3246 * _3264) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3231) * _3246))) * _3263;
                                float _4299 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3284 = (_3209 * _3186) * (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) / ((_3254 * _3254) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3284 * _3067.z;
                                frontier_phi_81_pred_1 = _3284 * _3067.y;
                                frontier_phi_81_pred_2 = _3284 * _3067.x;
                                frontier_phi_81_pred_3 = _3210 * _3055.z;
                                frontier_phi_81_pred_4 = _3210 * _3055.y;
                                frontier_phi_81_pred_5 = _3210 * _3055.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3290 = frontier_phi_81_pred;
                            _3289 = frontier_phi_81_pred_1;
                            _3288 = frontier_phi_81_pred_2;
                            _3293 = frontier_phi_81_pred_3;
                            _3292 = frontier_phi_81_pred_4;
                            _3291 = frontier_phi_81_pred_5;
                            _2997 = _3291 + _3010;
                            _2998 = _3292 + _3011;
                            _2999 = _3293 + _3012;
                            _2994 = _3288 + _3007;
                            _2995 = _3289 + _3008;
                            _2996 = _3290 + _3009;
                            if (_3014 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3014;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2996;
                        frontier_phi_75_pred_1 = _2995;
                        frontier_phi_75_pred_2 = _2994;
                        frontier_phi_75_pred_3 = _2999;
                        frontier_phi_75_pred_4 = _2998;
                        frontier_phi_75_pred_5 = _2997;
                    }
                    _2660 = frontier_phi_75_pred;
                    _2658 = frontier_phi_75_pred_1;
                    _2656 = frontier_phi_75_pred_2;
                    _2666 = frontier_phi_75_pred_3;
                    _2664 = frontier_phi_75_pred_4;
                    _2662 = frontier_phi_75_pred_5;
                    uint _2801 = _2800 + 1u;
                    if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2794 = _2656;
                        _2795 = _2658;
                        _2796 = _2660;
                        _2797 = _2662;
                        _2798 = _2664;
                        _2799 = _2666;
                        _2800 = _2801;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2664;
                frontier_phi_63_64_ladder_1 = _2662;
                frontier_phi_63_64_ladder_2 = _2660;
                frontier_phi_63_64_ladder_3 = _2666;
                frontier_phi_63_64_ladder_4 = _2658;
                frontier_phi_63_64_ladder_5 = _2656;
            }
            else
            {
                frontier_phi_63_64_ladder = _2551;
                frontier_phi_63_64_ladder_1 = _2549;
                frontier_phi_63_64_ladder_2 = _2547;
                frontier_phi_63_64_ladder_3 = _2553;
                frontier_phi_63_64_ladder_4 = _2545;
                frontier_phi_63_64_ladder_5 = _2543;
            }
            _2655 = frontier_phi_63_64_ladder_5;
            _2657 = frontier_phi_63_64_ladder_4;
            _2659 = frontier_phi_63_64_ladder_2;
            _2661 = frontier_phi_63_64_ladder_1;
            _2663 = frontier_phi_63_64_ladder;
            _2665 = frontier_phi_63_64_ladder_3;
        }
        float _2670 = isnan(1.0) ? _674 : (isnan(_674) ? 1.0 : min(_674, 1.0));
        _2437 = (_2670 * _2661) + _1871;
        _2439 = (_2670 * _2663) + _1873;
        _2441 = (_2670 * _2665) + _1875;
        _2443 = ((_2655 * _659) * _2670) + _2219;
        _2445 = ((_2657 * _661) * _2670) + _2221;
        _2447 = ((_2659 * _662) * _2670) + _2223;
    }
    else
    {
        _2437 = _1871;
        _2439 = _1873;
        _2441 = _1875;
        _2443 = _2219;
        _2445 = _2221;
        _2447 = _2223;
    }
    vec4 _2453 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4315 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4326 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4337 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _2477 = (((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2437 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _674))) + ((_2443 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1486)) * cbPerFrame._m0[3u].x)) + (_2453.x * cbMtdParam._m0[3u].x);
    float _2479 = ((_2453.y * cbMtdParam._m0[3u].x) + ((_2445 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1486)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2439 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _674)));
    float _2481 = ((_2453.z * cbMtdParam._m0[3u].x) + ((_2447 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1486)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2441 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _674)));
    uint _2485 = _601 + 6u;
    float _2493 = _543 / cbSceneParam._m0[86u].x;
    float _2494 = _544 / cbSceneParam._m0[86u].y;
    vec4 _2508 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2510 = _2508.x;
    float _2511 = _2508.y;
    float _2512 = _2508.z;
    float _2513 = _2508.w;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2568 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2569 = _2568 / _477;
        float _2580 = _2569 * _528;
        float _2581 = _529 * _2569;
        float _2582 = (-0.0) - _2581;
        float _2583 = _2569 * _530;
        float _2585 = (cbSceneParam._m0[77u].w * _2582) / _2568;
        float _2586 = _2585 + cbSceneParam._m0[79u].w;
        float _2587 = cbSceneParam._m0[79u].w - _2581;
        float _2593 = sqrt(((_2580 * _2580) + (_2581 * _2581)) + (_2583 * _2583));
        float _2596 = (1.0 - (cbSceneParam._m0[77u].w / _2568)) * _2593;
        float _2601 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2603 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2756;
        if (abs((_2582 - _2585) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2756 = ((((_2586 > 0.0) ? exp2(_2601 * _2586) : (2.0 - exp2(_2603 * _2586))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2596;
        }
        else
        {
            float _2716 = 1.0 / cbSceneParam._m0[80u].x;
            float _2717 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : max(_2586, _2587));
            float _2718 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : min(_2586, _2587));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            _2756 = ((abs(_2593 / _2582) * cbSceneParam._m0[80u].y) * ((((_2727 - _2728) * 2.0) - ((exp2(_2601 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0)))) - exp2(_2601 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))))) * _2716)) - ((exp2(_2603 * _2727) - exp2(_2603 * _2728)) * _2716))) + (_2596 * cbSceneParam._m0[80u].z);
        }
        vec4 _2758 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, 1.0), 0.0);
        float _2767 = exp2((_2756 * (-1.44269502162933349609375)) * (1.0 - _2758.w));
        float _2768 = log2(_2767);
        float _2784 = log2(_2513);
        _2605 = (exp2(_2784 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].x)) * _2758.x) / cbSceneParam._m0[78u].x)) + _2510;
        _2607 = (exp2(_2784 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].y)) * _2758.y) / cbSceneParam._m0[78u].y)) + _2511;
        _2609 = (exp2(_2784 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].z)) * _2758.z) / cbSceneParam._m0[78u].z)) + _2512;
        _2611 = _2767 * _2513;
    }
    else
    {
        _2605 = _2510;
        _2607 = _2511;
        _2609 = _2512;
        _2611 = _2513;
    }
    float _2623 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2624 = _2623 == 3.0;
    float _2625 = log2(_2611);
    float _2632 = exp2(_2625 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)));
    float _2633 = exp2(_2625 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0)));
    float _2634 = exp2(_2625 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0)));
    float _2643 = (_2623 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2643 * (_2624 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.y = _2643 * (_2624 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.z = _2643 * (_2624 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.w = cbInstanceData._m0[_2485].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2485].w;
}


