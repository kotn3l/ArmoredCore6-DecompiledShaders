#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1110;
float _3519;
float _3520;
float _3521;
float _3522;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _257 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _270 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_257 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _281 = exp2(log2(_270.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _282;
    float _284;
    float _286;
    if (_281)
    {
        _282 = cbMtdParam._m0[19u].x;
        _284 = cbMtdParam._m0[19u].y;
        _286 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _282 = cbMtdParam._m0[18u].x;
        _284 = cbMtdParam._m0[18u].y;
        _286 = cbMtdParam._m0[18u].z;
    }
    float _292;
    if (_281)
    {
        _292 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _292 = cbMtdParam._m0[20u].z;
    }
    float _298;
    float _300;
    if (_281)
    {
        _298 = cbMtdParam._m0[28u].z;
        _300 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _298 = cbMtdParam._m0[24u].x;
        _300 = cbMtdParam._m0[24u].y;
    }
    float _302 = _298 * TEXCOORD.x;
    float _303 = _300 * TEXCOORD.y;
    float _315 = floor(_292);
    vec4 _318 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _302) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _303) + cbTextureTilingScale._m0[8u].w, _315));
    vec4 _340 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _257) + cbTextureTilingScale._m0[0u].w));
    float _348 = (((_282 * cbMtdParam._m0[20u].w) * _318.x) * cbMtdParam._m0[9u].x) * _340.x;
    float _352 = (((_284 * cbMtdParam._m0[20u].w) * _318.y) * cbMtdParam._m0[9u].y) * _340.y;
    float _356 = (((_286 * cbMtdParam._m0[20u].w) * _318.z) * cbMtdParam._m0[9u].z) * _340.z;
    vec4 _368 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _257) + cbTextureTilingScale._m0[1u].w));
    float _372 = _368.z;
    vec4 _386 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _302) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _303) + cbTextureTilingScale._m0[10u].w, _315));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[27u].z;
    _186[0u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _186[1u] = cbMtdParam._m0[28u].y;
    float _403 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    uint _406 = uint(int(isnan(1.0) ? _403 : (isnan(_403) ? 1.0 : min(_403, 1.0))));
    float _412 = (_386.x + _368.w) + _186[_406];
    vec4 _430 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w, _315));
    float _437 = (_430.x * 2.0) + (-1.0);
    float _438 = (_430.y * 2.0) + (-1.0);
    float _439 = dot(vec2(_437, _438), vec2(_437, _438));
    float _3541 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))));
    float _453 = (cbMtdParam._m0[21u].x * (((_372 * 2.0) * (_430.z + _185[_406])) - _372)) + _372;
    float _457 = (cbMtdParam._m0[21u].y * ((_368.x * 2.0) + (-1.0))) + _437;
    float _458 = (cbMtdParam._m0[21u].y * ((_368.y * 2.0) + (-1.0))) + _438;
    float _461 = fma(_444, _236, fma(_458, _228 * TANGENT.x, (_214 * _206) * _457));
    float _464 = fma(_444, _237, fma(_458, _228 * TANGENT.y, (_214 * _207) * _457));
    float _467 = fma(_444, _238, fma(_458, _228 * TANGENT.z, (_214 * _208) * _457));
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    float _472 = _471 * _461;
    float _473 = _471 * _464;
    float _474 = _471 * _467;
    float _3552 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _475 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3574 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3585 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3596 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _479 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    vec4 _560 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _562 = _560.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _790 = sqrt(((_546 * _546) + (_547 * _547)) + (_548 * _548));
        float _796 = (cbMatDynParam._m0[5u].x * _790) + cbMatDynParam._m0[5u].y;
        float _3607 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _801 = (cbMatDynParam._m0[5u].z * _790) + cbMatDynParam._m0[5u].w;
        float _3618 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) - _797)) + _797) < ((_562 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _577 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _578 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _580 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _582 = _580.w;
    float _602 = fma(_474, cbSceneParam._m0[5u].z, fma(_473, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _472));
    float _605 = fma(_474, cbSceneParam._m0[6u].z, fma(_473, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _472));
    float _608 = fma(_474, cbSceneParam._m0[7u].z, fma(_473, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _472));
    vec4 _610 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _621 = (((_610.y - _475) + (_610.w * _475)) * cbMtdParam._m0[3u].x) + _475;
    uint _634 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = _634 + 9u;
    uint _637 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3629 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    vec4 _649 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _654 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _665 = (((_654.x - _479) + (_654.w * _479)) * cbMtdParam._m0[3u].x) + _479;
    float _678 = (cbMtdParam._m0[3u].x * (((_646 * _582) - _646) + _649.x)) + _646;
    float _679 = (cbMtdParam._m0[3u].x * (((_647 * _582) - _647) + _649.y)) + _647;
    float _680 = (cbMtdParam._m0[3u].x * (((_648 * _582) - _648) + _649.z)) + _648;
    float _681 = 1.0 - _665;
    float _682 = _681 * _678;
    float _683 = _681 * _679;
    float _684 = _681 * _680;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _665;
    float _690 = (_679 + (-0.039999999105930328369140625)) * _665;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _665;
    float _692 = _689 + 0.039999999105930328369140625;
    float _694 = _690 + 0.039999999105930328369140625;
    float _695 = _691 + 0.039999999105930328369140625;
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _577, cbSceneParam._m0[86u].y * _578));
    float _707 = _704.x * TEXCOORD_4;
    float _708 = dot(vec3(_472, _473, _474), vec3(_553, _554, _555));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _472) - _553;
    float _716 = (_711 * _473) - _554;
    float _717 = (_711 * _474) - _555;
    float _721 = abs(dot(vec3(_553, _554, _555), vec3(_472, _473, _474)));
    float _3662 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_621);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _742 = (1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _743 = _736 * _723;
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771));
        float _838 = fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771));
        float _842 = fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771));
        float _867 = _771 + _472;
        float _868 = _775 + _473;
        float _869 = _779 + _474;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _834;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _838;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _842;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_472, _473, _474), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3710 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_472, _473, _474), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3743 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_472, _473, _474), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3776 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771));
        float _1157 = fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771));
        float _1161 = fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771));
        float _1184 = _771 + _472;
        float _1185 = _775 + _473;
        float _1186 = _779 + _474;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_472, _473, _474), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3839 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_472, _473, _474), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3872 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_472, _473, _474), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3905 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = _1110;
        _1431 = _1110;
        _1432 = _1110;
        _1433 = _1110;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1123)) + _1123;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1124)) + _1124;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _715 * 0.5;
    float _1491 = _716 * 0.5;
    float _1492 = _717 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1622 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1625 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1653 = frontier_phi_25_23_ladder;
        }
        float _1857;
        if (_1622 > 0.0)
        {
            _1857 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1857 = frontier_phi_34_30_ladder;
        }
        float _2111;
        if (_1625 > 0.0)
        {
            _2111 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2111 = frontier_phi_46_41_ladder;
        }
        float _2113 = isnan(_1857) ? _1653 : (isnan(_1653) ? _1857 : min(_1653, _1857));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1619) + _1608;
        float _2119 = (_2114 * _1622) + _1612;
        float _2120 = (_2114 * _1625) + _1616;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2121;
        float _2125 = _2121 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 > _2125) || ((_2119 < _2123) || ((_2118 < _2123) || (_2118 > _2125))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2120, cbModelParam._m0[9u].z, fma(_2119, cbModelParam._m0[9u].y, _2118 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2120, cbModelParam._m0[10u].z, fma(_2119, cbModelParam._m0[10u].y, _2118 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2120, cbModelParam._m0[11u].z, fma(_2119, cbModelParam._m0[11u].y, _2118 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_24_46_ladder = _2248.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2248.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_24_46_ladder_2;
        _1643 = frontier_phi_24_46_ladder_1;
        _1645 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1559);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1717 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1720 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1862;
        if (_1714 > 0.0)
        {
            _1862 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1862 = frontier_phi_36_32_ladder;
        }
        float _2138;
        if (_1717 > 0.0)
        {
            _2138 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2138 = frontier_phi_48_43_ladder;
        }
        float _2351;
        if (_1720 > 0.0)
        {
            _2351 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2351 = frontier_phi_57_54_ladder;
        }
        float _2353 = isnan(_2138) ? _1862 : (isnan(_1862) ? _2138 : min(_1862, _2138));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1714) + _1703;
        float _2359 = (_2354 * _1717) + _1707;
        float _2360 = (_2354 * _1720) + _1711;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_33_57_ladder = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2576.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2576.z * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_33_57_ladder_1;
        _1741 = frontier_phi_33_57_ladder;
        _1743 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1650);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1756 = (((_742 * _692) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1758 = (((_742 * _694) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1760 = (((_742 * _695) + _743) * _707) * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_634 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _707 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1815 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1819 = _1781 | 1u;
    float _1830 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_472, _473, _474));
    float _1833 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_472, _473, _474));
    float _4041 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _4052 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1838 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1840 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1847 = ((cbLight._m0[_1798].x * _1804) * _1840) + ((cbLight._m0[_1808].x * _1815) * _1838);
    float _1848 = ((_1804 * cbLight._m0[_1798].y) * _1840) + ((_1815 * cbLight._m0[_1808].y) * _1838);
    float _1849 = ((_1804 * cbLight._m0[_1798].z) * _1840) + ((_1815 * cbLight._m0[_1808].z) * _1838);
    uvec4 _1854 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1856 = _1854.x == 0u;
    float _1867;
    float _1869;
    float _1871;
    if (_1856)
    {
        _1867 = _1847;
        _1869 = _1848;
        _1871 = _1849;
    }
    else
    {
        uint _1875 = _1781 + 6u;
        float _1891 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _1892 = _1891 * _1891;
        float _4063 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1894 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1867 = (((cbLight._m0[_1875].x * 0.3183098733425140380859375) * _1893) * _1894) + _1847;
        _1869 = (((cbLight._m0[_1875].y * 0.3183098733425140380859375) * _1893) * _1894) + _1848;
        _1871 = (((cbLight._m0[_1875].z * 0.3183098733425140380859375) * _1893) * _1894) + _1849;
    }
    bool _1874 = _1854.y == 0u;
    float _1912;
    float _1914;
    float _1916;
    if (_1874)
    {
        _1912 = _1867;
        _1914 = _1869;
        _1916 = _1871;
    }
    else
    {
        uint _2082 = _1781 + 7u;
        float _2098 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _4079 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2101 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1912 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _1867;
        _1914 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _1869;
        _1916 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _1871;
    }
    uint _1919 = _1781 + 8u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _621) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1781].x + _553;
    float _1935 = cbLight._m0[_1781].y + _554;
    float _1936 = cbLight._m0[_1781].z + _555;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_1781].xyz));
    float _4095 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _1948 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1949 = dot(vec3(_472, _473, _474), vec3(_1941, _1942, _1943));
    float _4117 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1941, _1942, _1943));
    float _4128 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = _1933 * _1933;
    float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
    float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
    float _1970 = 0.959999978542327880859375 - _689;
    float _1972 = 0.959999978542327880859375 - _690;
    float _1973 = 0.959999978542327880859375 - _691;
    float _1980 = 1.0 - _1933;
    float _1991 = (0.5 / (((_1948 * ((_1947 * _1980) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _1980) + _1933) * _1947))) * _1947;
    float _4139 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1993 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
    uint _2004 = _1781 + 9u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _621) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1819].x + _553;
    float _2018 = cbLight._m0[_1819].y + _554;
    float _2019 = cbLight._m0[_1819].z + _555;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_1819].xyz));
    float _4150 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2031 = dot(vec3(_472, _473, _474), vec3(_2024, _2025, _2026));
    float _4161 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_2024, _2025, _2026));
    float _4172 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2039 = _2016 * _2016;
    float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
    float _2050 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
    float _2057 = 1.0 - _2016;
    float _2067 = (0.5 / (((_1948 * ((_2030 * _2057) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _2057) + _2016) * _2030))) * _2030;
    float _4183 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
    float _2079 = (((((_2050 * _1970) + _692) * cbLight._m0[_2004].x) * _2069) * _1804) + (((((_1969 * _1970) + _692) * cbLight._m0[_1919].x) * _1993) * _1815);
    float _2080 = (((((_2050 * _1972) + _694) * cbLight._m0[_2004].y) * _2069) * _1804) + (((((_1969 * _1972) + _694) * cbLight._m0[_1919].y) * _1993) * _1815);
    float _2081 = (((((_2050 * _1973) + _695) * cbLight._m0[_2004].z) * _2069) * _1804) + (((((_1969 * _1973) + _695) * cbLight._m0[_1919].z) * _1993) * _1815);
    float _2143;
    float _2145;
    float _2147;
    if (_1856)
    {
        _2143 = _2079;
        _2145 = _2080;
        _2147 = _2081;
    }
    else
    {
        uint _2149 = _1781 + 2u;
        uint _2153 = _1781 + 10u;
        float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _621) * 0.949999988079071044921875);
        float _2168 = _2167 * _2167;
        float _2169 = cbLight._m0[_2149].x + _553;
        float _2170 = cbLight._m0[_2149].y + _554;
        float _2171 = cbLight._m0[_2149].z + _555;
        float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
        float _2176 = _2175 * _2169;
        float _2177 = _2175 * _2170;
        float _2178 = _2175 * _2171;
        float _2179 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2149].xyz));
        float _4194 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2183 = dot(vec3(_472, _473, _474), vec3(_2176, _2177, _2178));
        float _4205 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2187 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2176, _2177, _2178));
        float _4216 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2191 = _2168 * _2168;
        float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
        float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2209 = 1.0 - _2168;
        float _2219 = (0.5 / (((_1948 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _2209) + _2168) * _2182))) * _2182;
        float _4227 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
        float _2222 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2143 = (((((_2202 * _1970) + _692) * cbLight._m0[_2153].x) * _2221) * _2222) + _2079;
        _2145 = (((((_2202 * _1972) + _694) * cbLight._m0[_2153].y) * _2221) * _2222) + _2080;
        _2147 = (((((_2202 * _1973) + _695) * cbLight._m0[_2153].z) * _2221) * _2222) + _2081;
    }
    float _2257;
    float _2259;
    float _2261;
    if (_1874)
    {
        _2257 = _2143;
        _2259 = _2145;
        _2261 = _2147;
    }
    else
    {
        uint _2268 = _1781 + 3u;
        uint _2272 = _1781 + 11u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _621) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _553;
        float _2289 = cbLight._m0[_2268].y + _554;
        float _2290 = cbLight._m0[_2268].z + _555;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2268].xyz));
        float _4243 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2302 = dot(vec3(_472, _473, _474), vec3(_2295, _2296, _2297));
        float _4254 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4265 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_1948 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_1948 * _2328) + _2287) * _2301))) * _2301;
        float _4276 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2257 = (((((_2321 * _1970) + _692) * cbLight._m0[_2272].x) * _2340) * _2341) + _2143;
        _2259 = (((((_2321 * _1972) + _694) * cbLight._m0[_2272].y) * _2340) * _2341) + _2145;
        _2261 = (((((_2321 * _1973) + _695) * cbLight._m0[_2272].z) * _2340) * _2341) + _2147;
    }
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_1779.y == 0u)
    {
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2416;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2416;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2416;
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.x;
        uint _2443 = uint((float(_2431.y) * floor(float(uint(cbSceneParam._m0[85u].y * _578) / _2432))) + floor(float(uint(cbSceneParam._m0[85u].x * _577) / _2432)));
        float _2453 = (log2(_2419 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        uint _2457 = uint(isnan(14.0) ? _2454 : (isnan(_2454) ? 14.0 : min(_2454, 14.0)));
        uvec4 _2462 = texelFetch(g_lightClusterGridBuffer, int(((_2457 << 2u) + (_2443 << 6u)) >> 2u));
        uint _2463 = _2462.x;
        uint _2464 = _2431.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2464 >> 4u) & 15u)) + 4294967295u) & _2463) == 0u) || ((_2464 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            uint _2739 = 0u;
            uint _2748;
            bool _2749;
            for (;;)
            {
                _2748 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                _2749 = _2748 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2749)
                {
                    frontier_phi_74_pred = _2738;
                    frontier_phi_74_pred_1 = _2737;
                    frontier_phi_74_pred_2 = _2736;
                    frontier_phi_74_pred_3 = _2735;
                    frontier_phi_74_pred_4 = _2734;
                    frontier_phi_74_pred_5 = _2733;
                }
                else
                {
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    uint _2884;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2748;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    for (;;)
                    {
                        uint _2888 = uint(findLSB(_2884)) + (_2739 << 5u);
                        uint _2885 = (_2884 + 4294967295u) & _2884;
                        uint _2890 = _2888 * 48u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2910 = (_2888 * 48u) + 4u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2929 = (_2888 * 48u) + 8u;
                        vec3 _2940 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x));
                        float _2944 = _2904.x - _2417;
                        float _2945 = _2904.y - _2418;
                        float _2946 = _2904.z - _2419;
                        float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                        float _2950 = inversesqrt(_2947);
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2954 = dot(vec3(_602, _605, _608), vec3(_2951, _2952, _2953));
                        float _2959 = 1.0 - (_2947 * _2904.w);
                        float _4302 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2961 = sqrt(_2947) * _2923.w;
                        float _2964 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2954) + _2965;
                        float _2971 = _2961 * _2961;
                        float _2975 = ((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2960) / ((_2971 * 0.699999988079071044921875) + 1.0);
                        float _2979 = (-0.0) - _2417;
                        float _2980 = (-0.0) - _2418;
                        float _2981 = (-0.0) - _2419;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2996 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                        float _2997 = 1.0 - _723;
                        float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                        float _3005 = _3004 * _3004;
                        float _3006 = _3005 * _3005;
                        float _3007 = _2986 + _2951;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3017 = dot(vec3(_602, _605, _608), vec3(_2986, _2987, _2988));
                        float _4318 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3021 = dot(vec3(_602, _605, _608), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                        float _4329 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                        float _3029 = _2964 * _3005;
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _2954) + _3030;
                        float _4340 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3035 = 1.0 - _3005;
                        float _3045 = (0.5 / (((_3034 * ((_3020 * _3035) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3005) * _3020))) * _3034;
                        float _4351 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3056 = (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3028 * _3028) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125))) * _2960;
                        _2808 = (_2975 * _2923.x) + _2881;
                        _2809 = (_2975 * _2923.y) + _2882;
                        _2810 = (_2975 * _2923.z) + _2883;
                        _2805 = (_3056 * _2940.x) + _2878;
                        _2806 = (_3056 * _2940.y) + _2879;
                        _2807 = (_3056 * _2940.z) + _2880;
                        if (_2885 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2885;
                        }
                    }
                    frontier_phi_74_pred = _2810;
                    frontier_phi_74_pred_1 = _2809;
                    frontier_phi_74_pred_2 = _2808;
                    frontier_phi_74_pred_3 = _2807;
                    frontier_phi_74_pred_4 = _2806;
                    frontier_phi_74_pred_5 = _2805;
                }
                _2592 = frontier_phi_74_pred;
                _2590 = frontier_phi_74_pred_1;
                _2588 = frontier_phi_74_pred_2;
                _2586 = frontier_phi_74_pred_3;
                _2584 = frontier_phi_74_pred_4;
                _2582 = frontier_phi_74_pred_5;
                uint _2740 = _2739 + 1u;
                if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2733 = _2582;
                    _2734 = _2584;
                    _2735 = _2586;
                    _2736 = _2588;
                    _2737 = _2590;
                    _2738 = _2592;
                    _2739 = _2740;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((4294967295u << _2598) & _2463) == 0u)
        {
            _2701 = _2581;
            _2703 = _2583;
            _2705 = _2585;
            _2707 = _2587;
            _2709 = _2589;
            _2711 = _2591;
        }
        else
        {
            float _2726 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
            float _2727 = _2726 * _2417;
            float _2728 = _2726 * _2418;
            float _2729 = _2726 * _2419;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2861 = _2581;
                float _2862 = _2583;
                float _2863 = _2585;
                float _2864 = _2587;
                float _2865 = _2589;
                float _2866 = _2591;
                uint _2867 = _2598;
                uint _2876;
                bool _2877;
                for (;;)
                {
                    _2876 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                    _2877 = _2876 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2877)
                    {
                        frontier_phi_85_pred = _2865;
                        frontier_phi_85_pred_1 = _2864;
                        frontier_phi_85_pred_2 = _2863;
                        frontier_phi_85_pred_3 = _2862;
                        frontier_phi_85_pred_4 = _2861;
                        frontier_phi_85_pred_5 = _2866;
                    }
                    else
                    {
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        uint _3089 = _2876;
                        uint _3090;
                        vec4 _3115;
                        float _3116;
                        vec4 _3131;
                        vec3 _3143;
                        vec4 _3159;
                        vec4 _3174;
                        float _3220;
                        bool _3221;
                        for (;;)
                        {
                            uint _3100 = ((_2867 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3089));
                            _3090 = (_3089 + 4294967295u) & _3089;
                            uint _3102 = _3100 * 40u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3116 = _3115.w;
                            uint _3118 = (_3100 * 40u) + 4u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3100 * 40u) + 8u;
                            _3143 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x));
                            uint _3146 = (_3100 * 40u) + 16u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3161 = (_3100 * 40u) + 20u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3100 * 40u) + 24u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3195 = (_3100 * 40u) + 28u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3220 = fma(_2419, _3208.z, fma(_2418, _3208.y, _3208.x * _2417)) + _3208.w;
                            _3221 = !((fma(_2419, _3189.z, fma(_2418, _3189.y, _3189.x * _2417)) + _3189.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3221)
                            {
                                float _3248 = _3115.x - _2417;
                                float _3249 = _3115.y - _2418;
                                float _3250 = _3115.z - _2419;
                                float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                                float _3254 = inversesqrt(_3251);
                                float _3255 = _3254 * _3248;
                                float _3256 = _3254 * _3249;
                                float _3257 = _3254 * _3250;
                                float _3261 = 1.0 - (_3251 / (_3116 * _3116));
                                float _4362 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3266 = sqrt(_3251) * _3131.w;
                                float _3268 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                                float _3269 = _3268 * _3268;
                                float _3272 = ((1.0 - _3269) * dot(vec3(_3255, _3256, _3257), vec3(_602, _605, _608))) + _3269;
                                float _3275 = _3266 * _3266;
                                float _3279 = (fma(_2419, _3159.z, fma(_2418, _3159.y, _3159.x * _2417)) + _3159.w) / _3220;
                                float _3280 = (fma(_2419, _3174.z, fma(_2418, _3174.y, _3174.x * _2417)) + _3174.w) / _3220;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4378 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3262) / ((_3275 * 0.699999988079071044921875) + 1.0));
                                float _3298 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3299 = 1.0 - _723;
                                float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                                float _3307 = _3306 * _3306;
                                float _3308 = _3307 * _3307;
                                float _3309 = _3255 - _2727;
                                float _3310 = _3256 - _2728;
                                float _3311 = _3257 - _2729;
                                float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                                float _3319 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2727, (-0.0) - _2728, (-0.0) - _2729));
                                float _4389 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3323 = dot(vec3(_602, _605, _608), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                                float _4400 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                                float _3331 = _3268 * _3307;
                                float _3332 = _3331 * _3331;
                                float _3338 = ((1.0 - _3332) * dot(vec3(_602, _605, _608), vec3(_3255, _3256, _3257))) + _3332;
                                float _4411 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3340 = 1.0 - _3307;
                                float _3350 = (0.5 / (((_3339 * ((_3322 * _3340) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3307) * _3322))) * _3339;
                                float _4422 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3360 = (_3285 * _3262) * (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3330 * _3330) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3286 * _3131.y;
                                frontier_phi_91_pred_1 = _3286 * _3131.x;
                                frontier_phi_91_pred_2 = _3360 * _3143.z;
                                frontier_phi_91_pred_3 = _3360 * _3143.y;
                                frontier_phi_91_pred_4 = _3360 * _3143.x;
                                frontier_phi_91_pred_5 = _3286 * _3131.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3368 = frontier_phi_91_pred;
                            _3367 = frontier_phi_91_pred_1;
                            _3366 = frontier_phi_91_pred_2;
                            _3365 = frontier_phi_91_pred_3;
                            _3364 = frontier_phi_91_pred_4;
                            _3369 = frontier_phi_91_pred_5;
                            _3073 = _3367 + _3086;
                            _3074 = _3368 + _3087;
                            _3075 = _3369 + _3088;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            if (_3090 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3090;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3074;
                        frontier_phi_85_pred_1 = _3073;
                        frontier_phi_85_pred_2 = _3072;
                        frontier_phi_85_pred_3 = _3071;
                        frontier_phi_85_pred_4 = _3070;
                        frontier_phi_85_pred_5 = _3075;
                    }
                    _2710 = frontier_phi_85_pred;
                    _2708 = frontier_phi_85_pred_1;
                    _2706 = frontier_phi_85_pred_2;
                    _2704 = frontier_phi_85_pred_3;
                    _2702 = frontier_phi_85_pred_4;
                    _2712 = frontier_phi_85_pred_5;
                    uint _2868 = _2867 + 1u;
                    if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2861 = _2702;
                        _2862 = _2704;
                        _2863 = _2706;
                        _2864 = _2708;
                        _2865 = _2710;
                        _2866 = _2712;
                        _2867 = _2868;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2712;
                frontier_phi_66_67_ladder_1 = _2708;
                frontier_phi_66_67_ladder_2 = _2710;
                frontier_phi_66_67_ladder_3 = _2704;
                frontier_phi_66_67_ladder_4 = _2702;
                frontier_phi_66_67_ladder_5 = _2706;
            }
            else
            {
                frontier_phi_66_67_ladder = _2591;
                frontier_phi_66_67_ladder_1 = _2587;
                frontier_phi_66_67_ladder_2 = _2589;
                frontier_phi_66_67_ladder_3 = _2583;
                frontier_phi_66_67_ladder_4 = _2581;
                frontier_phi_66_67_ladder_5 = _2585;
            }
            _2701 = frontier_phi_66_67_ladder_4;
            _2703 = frontier_phi_66_67_ladder_3;
            _2705 = frontier_phi_66_67_ladder_5;
            _2707 = frontier_phi_66_67_ladder_1;
            _2709 = frontier_phi_66_67_ladder_2;
            _2711 = frontier_phi_66_67_ladder;
        }
        float _2716 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2475 = (_2716 * _2707) + _1912;
        _2477 = (_2716 * _2709) + _1914;
        _2479 = (_2716 * _2711) + _1916;
        _2481 = ((_2701 * _692) * _2716) + _2257;
        _2483 = ((_2703 * _694) * _2716) + _2259;
        _2485 = ((_2705 * _695) * _2716) + _2261;
    }
    else
    {
        _2475 = _1912;
        _2477 = _1914;
        _2479 = _1916;
        _2481 = _2257;
        _2483 = _2259;
        _2485 = _2261;
    }
    vec4 _2491 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4438 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4449 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4460 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2515 = (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2475 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _707))) + ((_2481 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1548)) * cbPerFrame._m0[3u].x)) + (_2491.x * cbMtdParam._m0[3u].x);
    float _2517 = ((_2491.y * cbMtdParam._m0[3u].x) + ((_2483 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1548)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2477 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _707)));
    float _2519 = ((_2491.z * cbMtdParam._m0[3u].x) + ((_2485 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1548)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2479 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _707)));
    float _2520 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2521 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2522 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    uint _2523 = _634 + 6u;
    float _2531 = _577 / cbSceneParam._m0[86u].x;
    float _2532 = _578 / cbSceneParam._m0[86u].y;
    vec4 _2546 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2548 = _2546.x;
    float _2549 = _2546.y;
    float _2550 = _2546.z;
    float _2551 = _2546.w;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2607 = _2606 / _495;
        float _2618 = _2607 * _546;
        float _2619 = _547 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2621 = _2607 * _548;
        float _2623 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2624 = _2623 + cbSceneParam._m0[79u].w;
        float _2625 = cbSceneParam._m0[79u].w - _2619;
        float _2631 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2621 * _2621));
        float _2634 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2631;
        float _2639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2818;
        if (abs((_2620 - _2623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2818 = ((((_2624 > 0.0) ? exp2(_2639 * _2624) : (2.0 - exp2(_2641 * _2624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2634;
        }
        else
        {
            float _2762 = 1.0 / cbSceneParam._m0[80u].x;
            float _2763 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : max(_2624, _2625));
            float _2764 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : min(_2624, _2625));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            _2818 = ((abs(_2631 / _2620) * cbSceneParam._m0[80u].y) * ((((_2773 - _2774) * 2.0) - ((exp2(_2639 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)))) - exp2(_2639 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))))) * _2762)) - ((exp2(_2641 * _2773) - exp2(_2641 * _2774)) * _2762))) + (_2634 * cbSceneParam._m0[80u].z);
        }
        vec4 _2820 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, 1.0), 0.0);
        float _2829 = exp2((_2818 * (-1.44269502162933349609375)) * (1.0 - _2820.w));
        float _2830 = log2(_2829);
        float _2846 = log2(_2551);
        _2643 = (exp2(_2846 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].x)) * _2820.x) / cbSceneParam._m0[78u].x)) + _2548;
        _2645 = (exp2(_2846 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].y)) * _2820.y) / cbSceneParam._m0[78u].y)) + _2549;
        _2647 = (exp2(_2846 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].z)) * _2820.z) / cbSceneParam._m0[78u].z)) + _2550;
        _2649 = _2829 * _2551;
    }
    else
    {
        _2643 = _2548;
        _2645 = _2549;
        _2647 = _2550;
        _2649 = _2551;
    }
    bool _2856;
    vec4 _2659;
    vec4 _2681;
    float _2683;
    float _2687;
    float _2688;
    float _2689;
    float _2690;
    bool _2700;
    for (;;)
    {
        _2659 = cbMatDynParam._m0[0u];
        float _2661 = roundEven(_2659.y);
        bool _2662 = _2661 == 3.0;
        float _2663 = log2(_2649);
        float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * _2520;
        float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * _2521;
        float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * _2522;
        float _2679 = _562 + (-0.5);
        _2681 = cbMtdParam._m0[1u];
        _2683 = _2681.y * _2679;
        float _2686 = (_2661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2687 = _2686 * (_2662 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2643)));
        _2688 = _2686 * (_2662 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
        _2689 = _2686 * (_2662 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
        _2690 = _2679 * 0.999000012874603271484375;
        _2700 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2700)
        {
            if ((cbInstanceData._m0[_634 + 7u].x + _2690) < 0.5)
            {
                _2856 = true;
                break;
            }
        }
        uint _2797 = _636 + uint(_2659.w);
        if ((cbInstanceData._m0[_2797].w < 1.0) && ((cbInstanceData._m0[_2797].w + _2690) < 0.5))
        {
            _2856 = true;
            break;
        }
        if ((_2683 + 1.0) < _2681.x)
        {
            _2856 = true;
            break;
        }
        _2856 = false;
        break;
    }
    float _3061;
    if (_2856)
    {
        discard_state = true;
        _3061 = 0.0;
    }
    else
    {
        _3061 = cbInstanceData._m0[_2523].w;
    }
    SV_Target.x = _2687;
    SV_Target.y = _2688;
    SV_Target.z = _2689;
    SV_Target.w = _3061;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2523].w;
    discard_exit();
}


