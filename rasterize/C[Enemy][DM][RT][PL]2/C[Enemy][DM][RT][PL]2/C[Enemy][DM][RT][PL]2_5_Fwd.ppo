#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1049;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _251 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _256 = log2(0.0);
    bool _259 = exp2(_256 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _260;
    float _262;
    float _264;
    if (_259)
    {
        _260 = cbMtdParam._m0[19u].x;
        _262 = cbMtdParam._m0[19u].y;
        _264 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _260 = cbMtdParam._m0[18u].x;
        _262 = cbMtdParam._m0[18u].y;
        _264 = cbMtdParam._m0[18u].z;
    }
    float _270;
    if (_259)
    {
        _270 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _270 = cbMtdParam._m0[20u].z;
    }
    float _276;
    float _278;
    if (_259)
    {
        _276 = cbMtdParam._m0[28u].z;
        _278 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _276 = cbMtdParam._m0[24u].x;
        _278 = cbMtdParam._m0[24u].y;
    }
    float _280 = _276 * TEXCOORD.x;
    float _281 = _278 * TEXCOORD.y;
    float _293 = floor(_270);
    vec4 _296 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _280) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _281) + cbTextureTilingScale._m0[8u].w, _293));
    vec4 _319 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _251) + cbTextureTilingScale._m0[0u].w));
    float _328 = (((_260 * cbMtdParam._m0[20u].w) * _296.x) * cbMtdParam._m0[9u].x) * _319.x;
    float _332 = (((_262 * cbMtdParam._m0[20u].w) * _296.y) * cbMtdParam._m0[9u].y) * _319.y;
    float _336 = (((_264 * cbMtdParam._m0[20u].w) * _296.z) * cbMtdParam._m0[9u].z) * _319.z;
    vec4 _348 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _251) + cbTextureTilingScale._m0[1u].w));
    float _352 = _348.z;
    float _179[2];
    float _180[2];
    _179[0u] = cbMtdParam._m0[27u].z;
    _180[0u] = cbMtdParam._m0[27u].w;
    _179[1u] = cbMtdParam._m0[28u].x;
    _180[1u] = cbMtdParam._m0[28u].y;
    float _383 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _386 = uint(int(isnan(1.0) ? _383 : (isnan(_383) ? 1.0 : min(_383, 1.0))));
    float _392 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w, _293)).x + _348.w) + _180[_386];
    vec4 _410 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w, _293));
    float _417 = (_410.x * 2.0) + (-1.0);
    float _418 = (_410.y * 2.0) + (-1.0);
    float _419 = dot(vec2(_417, _418), vec2(_417, _418));
    float _3414 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _424 = sqrt(1.0 - (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))));
    float _433 = (cbMtdParam._m0[21u].x * (((_352 * 2.0) * (_410.z + _179[_386])) - _352)) + _352;
    float _437 = (cbMtdParam._m0[21u].y * ((_348.x * 2.0) + (-1.0))) + _417;
    float _438 = (cbMtdParam._m0[21u].y * ((_348.y * 2.0) + (-1.0))) + _418;
    float _441 = fma(_424, _230, fma(_438, _222 * TANGENT.x, (_208 * _200) * _437));
    float _444 = fma(_424, _231, fma(_438, _222 * TANGENT.y, (_208 * _201) * _437));
    float _447 = fma(_424, _232, fma(_438, _222 * TANGENT.z, (_208 * _202) * _437));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3425 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _455 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3447 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3458 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3469 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _459 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    float _541 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _542 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _544 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _546 = _544.w;
    float _567 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _570 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _573 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    vec4 _575 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _586 = (((_575.y - _455) + (_575.w * _455)) * cbMtdParam._m0[3u].x) + _455;
    uint _599 = uint(roundEven(NORMAL.w)) * 13u;
    uint _602 = (_599 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _608 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_602].x;
    float _609 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_602].y;
    float _610 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_602].z;
    float _3480 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    vec4 _614 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _619 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _630 = (((_619.x - _459) + (_619.w * _459)) * cbMtdParam._m0[3u].x) + _459;
    float _643 = (cbMtdParam._m0[3u].x * (((_611 * _546) - _611) + _614.x)) + _611;
    float _644 = (cbMtdParam._m0[3u].x * (((_612 * _546) - _612) + _614.y)) + _612;
    float _645 = (cbMtdParam._m0[3u].x * (((_613 * _546) - _613) + _614.z)) + _613;
    float _646 = 1.0 - _630;
    float _647 = _646 * _643;
    float _648 = _646 * _644;
    float _649 = _646 * _645;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _630;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _630;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _630;
    float _657 = _654 + 0.039999999105930328369140625;
    float _659 = _655 + 0.039999999105930328369140625;
    float _660 = _656 + 0.039999999105930328369140625;
    vec4 _669 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _541, cbSceneParam._m0[86u].y * _542));
    float _672 = _669.x * TEXCOORD_4;
    float _673 = dot(vec3(_452, _453, _454), vec3(_533, _534, _535));
    float _676 = _673 * 2.0;
    float _680 = (_676 * _452) - _533;
    float _681 = (_676 * _453) - _534;
    float _682 = (_676 * _454) - _535;
    float _686 = abs(dot(vec3(_533, _534, _535), vec3(_452, _453, _454)));
    float _3513 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _688 = sqrt(_586);
    float _701 = exp2((_688 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_688 * 3.0));
    float _707 = (1.0 - _701) * ((_688 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _708 = _701 * _688;
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_744, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736));
        float _777 = fma(_744, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736));
        float _781 = fma(_744, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736));
        float _806 = _736 + _452;
        float _807 = _740 + _453;
        float _808 = _744 + _454;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_452, _453, _454), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3561 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_452, _453, _454), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3594 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_452, _453, _454), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3627 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1089 = fma(_744, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736));
        float _1093 = fma(_744, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736));
        float _1097 = fma(_744, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736));
        float _1120 = _736 + _452;
        float _1121 = _740 + _453;
        float _1122 = _744 + _454;
        float _1132 = fma(_1122, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120)) - _1089;
        float _1133 = fma(_1122, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120)) - _1093;
        float _1134 = fma(_1122, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120)) - _1097;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1089 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1093 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[35u].z) + ((((((_1097 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1188 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1155.x + (-0.5));
        float _1190 = _1188 * (_1155.y + (-0.5));
        float _1191 = _1188 * (_1155.z + (-0.5));
        float _1198 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1162.x + (-0.5));
        float _1200 = _1198 * (_1162.y + (-0.5));
        float _1201 = _1198 * (_1162.z + (-0.5));
        float _1208 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1169.x + (-0.5));
        float _1210 = _1208 * (_1169.y + (-0.5));
        float _1211 = _1208 * (_1169.z + (-0.5));
        float _1218 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1176.x + (-0.5));
        float _1220 = _1218 * (_1176.y + (-0.5));
        float _1221 = _1218 * (_1176.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_452, _453, _454), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3690 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1252 + 1.0))) + _1257) * _1222;
        float _1267 = _1190 * 0.5;
        float _1268 = _1200 * 0.5;
        float _1269 = _1210 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_452, _453, _454), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3723 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1294 + 1.0))) + _1299) * _1223;
        float _1309 = _1191 * 0.5;
        float _1310 = _1201 * 0.5;
        float _1311 = _1211 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_452, _453, _454), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3756 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1336 + 1.0))) + _1341) * _1224;
        _1358 = _1191;
        _1359 = _1190;
        _1360 = _1189;
        _1361 = _1201;
        _1362 = _1200;
        _1363 = _1199;
        _1364 = _1211;
        _1365 = _1210;
        _1366 = _1209;
        _1367 = _1224;
        _1368 = _1223;
        _1369 = _1222;
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1049;
        _1359 = _1049;
        _1360 = _1049;
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1405 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1382));
    float _1426 = _680 * 0.5;
    float _1427 = _681 * 0.5;
    float _1428 = _682 * 0.5;
    float _1429 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1432 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1435 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1469;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1442 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1446 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1450 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1457 = dot(vec4(cbModelParam._m0[39u]), vec4(_1426, _1427, _1428, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1480;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1471 = dot(vec4(cbModelParam._m0[40u]), vec4(_1426, _1427, _1428, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1484 = (_1480 * cbModelParam._m0[1u].x) + (_1469 * (1.0 - cbModelParam._m0[1u].x));
    float _1494 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _586);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1494 : min(cbModelParam._m0[25u].z, _1494));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1544 = fma(_744, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736)) + cbModelParam._m0[13u].w;
        float _1548 = fma(_744, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736)) + cbModelParam._m0[14u].w;
        float _1552 = fma(_744, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736)) + cbModelParam._m0[15u].w;
        float _1555 = fma(_682, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680));
        float _1558 = fma(_682, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680));
        float _1561 = fma(_682, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680));
        float _1589;
        if (_1555 > 0.0)
        {
            _1589 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1589 = frontier_phi_22_20_ladder;
        }
        float _1793;
        if (_1558 > 0.0)
        {
            _1793 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1793 = frontier_phi_31_27_ladder;
        }
        float _2047;
        if (_1561 > 0.0)
        {
            _2047 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2047 = frontier_phi_43_38_ladder;
        }
        float _2049 = isnan(_1793) ? _1589 : (isnan(_1589) ? _1793 : min(_1589, _1793));
        float _2050 = isnan(_2047) ? _2049 : (isnan(_2049) ? _2047 : min(_2049, _2047));
        float _2054 = (_2050 * _1555) + _1544;
        float _2055 = (_2050 * _1558) + _1548;
        float _2056 = (_2050 * _1561) + _1552;
        float _2057 = _2050 * 9.9999997473787516355514526367188e-05;
        float _2059 = (-1.0) - _2057;
        float _2061 = _2057 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2056 > _2061) || ((_2056 < _2059) || ((_2055 > _2061) || ((_2055 < _2059) || ((_2054 < _2059) || (_2054 > _2061))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2184 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2056, cbModelParam._m0[9u].z, fma(_2055, cbModelParam._m0[9u].y, _2054 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2056, cbModelParam._m0[10u].z, fma(_2055, cbModelParam._m0[10u].y, _2054 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2056, cbModelParam._m0[11u].z, fma(_2055, cbModelParam._m0[11u].y, _2054 * cbModelParam._m0[11u].x))), _1495);
            frontier_phi_21_43_ladder = _2184.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2184.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2184.x * cbModelParam._m0[1u].y;
        }
        _1577 = frontier_phi_21_43_ladder_2;
        _1579 = frontier_phi_21_43_ladder_1;
        _1581 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_680, _681, _682), _1495);
        _1577 = _1565.x * cbModelParam._m0[1u].y;
        _1579 = _1565.y * cbModelParam._m0[1u].y;
        _1581 = _1565.z * cbModelParam._m0[1u].y;
    }
    float _1585 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _586);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1585 : min(cbModelParam._m0[25u].w, _1585));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_744, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_744, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_744, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_682, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680));
        float _1653 = fma(_682, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680));
        float _1656 = fma(_682, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680));
        float _1798;
        if (_1650 > 0.0)
        {
            _1798 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1798 = frontier_phi_33_29_ladder;
        }
        float _2074;
        if (_1653 > 0.0)
        {
            _2074 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2074 = frontier_phi_45_40_ladder;
        }
        float _2287;
        if (_1656 > 0.0)
        {
            _2287 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2287 = frontier_phi_54_51_ladder;
        }
        float _2289 = isnan(_2074) ? _1798 : (isnan(_1798) ? _2074 : min(_1798, _2074));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1650) + _1639;
        float _2295 = (_2290 * _1653) + _1643;
        float _2296 = (_2290 * _1656) + _1647;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1586);
            frontier_phi_30_54_ladder = _2512.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2512.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2512.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_30_54_ladder_2;
        _1677 = frontier_phi_30_54_ladder;
        _1679 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_680, _681, _682), _1586);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_707 * _657) + _708) * _672) * ((cbModelParam._m0[1u].w * (_1675 - _1577)) + _1577);
    float _1694 = (((_707 * _659) + _708) * _672) * ((cbModelParam._m0[1u].w * (_1677 - _1579)) + _1579);
    float _1696 = (((_707 * _660) + _708) * _672) * ((cbModelParam._m0[1u].w * (_1679 - _1581)) + _1581);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    uvec4 _1715 = floatBitsToUint(cbInstanceData._m0[_599 + 5u]);
    uint _1717 = _1715.x * 14u;
    uint _1718 = _1717 + 13u;
    float _1725 = _672 + (-1.0);
    float _1730 = (cbLight._m0[_1718].x * _1725) + 1.0;
    float _1731 = (cbLight._m0[_1718].y * _1725) + 1.0;
    float _1732 = (cbLight._m0[_1718].z * _1725) + 1.0;
    float _1733 = (cbLight._m0[_1718].w * _1725) + 1.0;
    uint _1734 = _1717 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1717 + 4u;
    float _1751 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1755 = _1717 | 1u;
    float _1766 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_452, _453, _454));
    float _1769 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_452, _453, _454));
    float _3892 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _3903 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1774 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1776 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1783 = ((cbLight._m0[_1734].x * _1740) * _1776) + ((cbLight._m0[_1744].x * _1751) * _1774);
    float _1784 = ((_1740 * cbLight._m0[_1734].y) * _1776) + ((_1751 * cbLight._m0[_1744].y) * _1774);
    float _1785 = ((_1740 * cbLight._m0[_1734].z) * _1776) + ((_1751 * cbLight._m0[_1744].z) * _1774);
    uvec4 _1790 = floatBitsToUint(cbLight._m0[_1717 + 12u]);
    bool _1792 = _1790.x == 0u;
    float _1803;
    float _1805;
    float _1807;
    if (_1792)
    {
        _1803 = _1783;
        _1805 = _1784;
        _1807 = _1785;
    }
    else
    {
        uint _1811 = _1717 + 6u;
        float _1827 = (dot(vec3(cbLight._m0[_1717 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _1828 = _1827 * _1827;
        float _3914 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1830 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1803 = (((cbLight._m0[_1811].x * 0.3183098733425140380859375) * _1829) * _1830) + _1783;
        _1805 = (((cbLight._m0[_1811].y * 0.3183098733425140380859375) * _1829) * _1830) + _1784;
        _1807 = (((cbLight._m0[_1811].z * 0.3183098733425140380859375) * _1829) * _1830) + _1785;
    }
    bool _1810 = _1790.y == 0u;
    float _1848;
    float _1850;
    float _1852;
    if (_1810)
    {
        _1848 = _1803;
        _1850 = _1805;
        _1852 = _1807;
    }
    else
    {
        uint _2018 = _1717 + 7u;
        float _2034 = (dot(vec3(cbLight._m0[_1717 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2035 = _2034 * _2034;
        float _3930 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2037 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1848 = (((cbLight._m0[_2018].x * 0.3183098733425140380859375) * _2036) * _2037) + _1803;
        _1850 = (((cbLight._m0[_2018].y * 0.3183098733425140380859375) * _2036) * _2037) + _1805;
        _1852 = (((cbLight._m0[_2018].z * 0.3183098733425140380859375) * _2036) * _2037) + _1807;
    }
    uint _1855 = _1717 + 8u;
    float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _586) * 0.949999988079071044921875);
    float _1869 = _1868 * _1868;
    float _1870 = cbLight._m0[_1717].x + _533;
    float _1871 = cbLight._m0[_1717].y + _534;
    float _1872 = cbLight._m0[_1717].z + _535;
    float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
    float _1877 = _1876 * _1870;
    float _1878 = _1876 * _1871;
    float _1879 = _1876 * _1872;
    float _1880 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1717].xyz));
    float _3946 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _1884 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1885 = dot(vec3(_452, _453, _454), vec3(_1877, _1878, _1879));
    float _3968 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1877, _1878, _1879));
    float _3979 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1869 * _1869;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1905 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
    float _1906 = 0.959999978542327880859375 - _654;
    float _1908 = 0.959999978542327880859375 - _655;
    float _1909 = 0.959999978542327880859375 - _656;
    float _1916 = 1.0 - _1869;
    float _1927 = (0.5 / (((_1884 * ((_1883 * _1916) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _1916) + _1869) * _1883))) * _1883;
    float _3990 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    uint _1940 = _1717 + 9u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _586) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1755].x + _533;
    float _1954 = cbLight._m0[_1755].y + _534;
    float _1955 = cbLight._m0[_1755].z + _535;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1755].xyz));
    float _4001 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1967 = dot(vec3(_452, _453, _454), vec3(_1960, _1961, _1962));
    float _4012 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1960, _1961, _1962));
    float _4023 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1952 * _1952;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1986 = exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0);
    float _1993 = 1.0 - _1952;
    float _2003 = (0.5 / (((_1884 * ((_1966 * _1993) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _1993) + _1952) * _1966))) * _1966;
    float _4034 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2005 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    float _2015 = (((((_1986 * _1906) + _657) * cbLight._m0[_1940].x) * _2005) * _1740) + (((((_1905 * _1906) + _657) * cbLight._m0[_1855].x) * _1929) * _1751);
    float _2016 = (((((_1986 * _1908) + _659) * cbLight._m0[_1940].y) * _2005) * _1740) + (((((_1905 * _1908) + _659) * cbLight._m0[_1855].y) * _1929) * _1751);
    float _2017 = (((((_1986 * _1909) + _660) * cbLight._m0[_1940].z) * _2005) * _1740) + (((((_1905 * _1909) + _660) * cbLight._m0[_1855].z) * _1929) * _1751);
    float _2079;
    float _2081;
    float _2083;
    if (_1792)
    {
        _2079 = _2015;
        _2081 = _2016;
        _2083 = _2017;
    }
    else
    {
        uint _2085 = _1717 + 2u;
        uint _2089 = _1717 + 10u;
        float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _586) * 0.949999988079071044921875);
        float _2104 = _2103 * _2103;
        float _2105 = cbLight._m0[_2085].x + _533;
        float _2106 = cbLight._m0[_2085].y + _534;
        float _2107 = cbLight._m0[_2085].z + _535;
        float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
        float _2112 = _2111 * _2105;
        float _2113 = _2111 * _2106;
        float _2114 = _2111 * _2107;
        float _2115 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2085].xyz));
        float _4045 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2119 = dot(vec3(_452, _453, _454), vec3(_2112, _2113, _2114));
        float _4056 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2123 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2112, _2113, _2114));
        float _4067 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2127 = _2104 * _2104;
        float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
        float _2138 = exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0);
        float _2145 = 1.0 - _2104;
        float _2155 = (0.5 / (((_1884 * ((_2118 * _2145) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _2145) + _2104) * _2118))) * _2118;
        float _4078 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2157 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
        float _2158 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2079 = (((((_2138 * _1906) + _657) * cbLight._m0[_2089].x) * _2157) * _2158) + _2015;
        _2081 = (((((_2138 * _1908) + _659) * cbLight._m0[_2089].y) * _2157) * _2158) + _2016;
        _2083 = (((((_2138 * _1909) + _660) * cbLight._m0[_2089].z) * _2157) * _2158) + _2017;
    }
    float _2193;
    float _2195;
    float _2197;
    if (_1810)
    {
        _2193 = _2079;
        _2195 = _2081;
        _2197 = _2083;
    }
    else
    {
        uint _2204 = _1717 + 3u;
        uint _2208 = _1717 + 11u;
        float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _586) * 0.949999988079071044921875);
        float _2223 = _2222 * _2222;
        float _2224 = cbLight._m0[_2204].x + _533;
        float _2225 = cbLight._m0[_2204].y + _534;
        float _2226 = cbLight._m0[_2204].z + _535;
        float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
        float _2231 = _2230 * _2224;
        float _2232 = _2230 * _2225;
        float _2233 = _2230 * _2226;
        float _2234 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2204].xyz));
        float _4094 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2238 = dot(vec3(_452, _453, _454), vec3(_2231, _2232, _2233));
        float _4105 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2242 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2231, _2232, _2233));
        float _4116 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2246 = _2223 * _2223;
        float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
        float _2257 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
        float _2264 = 1.0 - _2223;
        float _2274 = (0.5 / (((_1884 * ((_2237 * _2264) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _2264) + _2223) * _2237))) * _2237;
        float _4127 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2276 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
        float _2277 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2193 = (((((_2257 * _1906) + _657) * cbLight._m0[_2208].x) * _2276) * _2277) + _2079;
        _2195 = (((((_2257 * _1908) + _659) * cbLight._m0[_2208].y) * _2276) * _2277) + _2081;
        _2197 = (((((_2257 * _1909) + _660) * cbLight._m0[_2208].z) * _2276) * _2277) + _2083;
    }
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_1715.y == 0u)
    {
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2352;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2352;
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2352;
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.x;
        uint _2379 = uint((float(_2367.y) * floor(float(uint(cbSceneParam._m0[85u].y * _542) / _2368))) + floor(float(uint(cbSceneParam._m0[85u].x * _541) / _2368)));
        float _2389 = (log2(_2355 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2390 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        uint _2393 = uint(isnan(14.0) ? _2390 : (isnan(_2390) ? 14.0 : min(_2390, 14.0)));
        uvec4 _2398 = texelFetch(g_lightClusterGridBuffer, int(((_2393 << 2u) + (_2379 << 6u)) >> 2u));
        uint _2399 = _2398.x;
        uint _2400 = _2367.z;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        if (((((1u << ((_2400 >> 4u) & 15u)) + 4294967295u) & _2399) == 0u) || ((_2400 & 240u) == 0u))
        {
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
        }
        else
        {
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            uint _2667 = 0u;
            uint _2676;
            bool _2677;
            for (;;)
            {
                _2676 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                _2677 = _2676 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2677)
                {
                    frontier_phi_69_pred = _2666;
                    frontier_phi_69_pred_1 = _2665;
                    frontier_phi_69_pred_2 = _2664;
                    frontier_phi_69_pred_3 = _2662;
                    frontier_phi_69_pred_4 = _2661;
                    frontier_phi_69_pred_5 = _2663;
                }
                else
                {
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    uint _2791;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2676;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    for (;;)
                    {
                        uint _2795 = uint(findLSB(_2791)) + (_2667 << 5u);
                        uint _2792 = (_2791 + 4294967295u) & _2791;
                        uint _2797 = _2795 * 48u;
                        vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2797)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 3u)).x));
                        uint _2817 = (_2795 * 48u) + 4u;
                        vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 3u)).x));
                        uint _2836 = (_2795 * 48u) + 8u;
                        vec3 _2847 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x));
                        float _2851 = _2811.x - _2353;
                        float _2852 = _2811.y - _2354;
                        float _2853 = _2811.z - _2355;
                        float _2854 = dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853));
                        float _2857 = inversesqrt(_2854);
                        float _2858 = _2857 * _2851;
                        float _2859 = _2857 * _2852;
                        float _2860 = _2857 * _2853;
                        float _2861 = dot(vec3(_567, _570, _573), vec3(_2858, _2859, _2860));
                        float _2866 = 1.0 - (_2854 * _2811.w);
                        float _4153 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2867 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2868 = sqrt(_2854) * _2830.w;
                        float _2871 = 1.39999997615814208984375 / (_2868 + 1.39999997615814208984375);
                        float _2872 = _2871 * _2871;
                        float _2875 = ((1.0 - _2872) * _2861) + _2872;
                        float _2878 = _2868 * _2868;
                        float _2882 = ((isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))) * _2867) / ((_2878 * 0.699999988079071044921875) + 1.0);
                        float _2886 = (-0.0) - _2353;
                        float _2887 = (-0.0) - _2354;
                        float _2888 = (-0.0) - _2355;
                        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
                        float _2893 = _2892 * _2886;
                        float _2894 = _2892 * _2887;
                        float _2895 = _2892 * _2888;
                        float _2903 = exp2(log2(1.0 / ((_2878 * 3.5) + 5.0)) * 0.25);
                        float _2904 = 1.0 - _688;
                        float _2911 = sqrt(1.0 - ((1.0 - (_2904 * _2904)) * (1.0 - (_2903 * _2903))));
                        float _2912 = _2911 * _2911;
                        float _2913 = _2912 * _2912;
                        float _2914 = _2893 + _2858;
                        float _2915 = _2894 + _2859;
                        float _2916 = _2895 + _2860;
                        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
                        float _2924 = dot(vec3(_567, _570, _573), vec3(_2893, _2894, _2895));
                        float _4169 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2927 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2928 = dot(vec3(_567, _570, _573), vec3(_2920 * _2914, _2920 * _2915, _2920 * _2916));
                        float _4180 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2935 = ((_2931 * _2931) * (_2913 + (-1.0))) + 1.0;
                        float _2936 = _2871 * _2912;
                        float _2937 = _2936 * _2936;
                        float _2940 = ((1.0 - _2937) * _2861) + _2937;
                        float _4191 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2941 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2942 = 1.0 - _2912;
                        float _2952 = (0.5 / (((_2941 * ((_2927 * _2942) + _2912)) + 9.9999999392252902907785028219223e-09) + (((_2941 * _2942) + _2912) * _2927))) * _2941;
                        float _4202 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2963 = (((_2913 * 3.1415927410125732421875) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) / ((_2935 * _2935) * ((_2878 * 2.1991131305694580078125) + 3.141590118408203125))) * _2867;
                        _2720 = (_2882 * _2830.x) + _2788;
                        _2721 = (_2882 * _2830.y) + _2789;
                        _2722 = (_2882 * _2830.z) + _2790;
                        _2717 = (_2963 * _2847.x) + _2785;
                        _2718 = (_2963 * _2847.y) + _2786;
                        _2719 = (_2963 * _2847.z) + _2787;
                        if (_2792 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2792;
                        }
                    }
                    frontier_phi_69_pred = _2722;
                    frontier_phi_69_pred_1 = _2721;
                    frontier_phi_69_pred_2 = _2720;
                    frontier_phi_69_pred_3 = _2718;
                    frontier_phi_69_pred_4 = _2717;
                    frontier_phi_69_pred_5 = _2719;
                }
                _2528 = frontier_phi_69_pred;
                _2526 = frontier_phi_69_pred_1;
                _2524 = frontier_phi_69_pred_2;
                _2520 = frontier_phi_69_pred_3;
                _2518 = frontier_phi_69_pred_4;
                _2522 = frontier_phi_69_pred_5;
                uint _2668 = _2667 + 1u;
                if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2661 = _2518;
                    _2662 = _2520;
                    _2663 = _2522;
                    _2664 = _2524;
                    _2665 = _2526;
                    _2666 = _2528;
                    _2667 = _2668;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
        }
        uvec4 _2531 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2532 = _2531.z;
        uint _2534 = (_2532 >> 8u) & 15u;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((4294967295u << _2534) & _2399) == 0u)
        {
            _2629 = _2517;
            _2631 = _2519;
            _2633 = _2521;
            _2635 = _2523;
            _2637 = _2525;
            _2639 = _2527;
        }
        else
        {
            float _2654 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
            float _2655 = _2654 * _2353;
            float _2656 = _2654 * _2354;
            float _2657 = _2654 * _2355;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2534 < ((_2532 >> 12u) & 15u))
            {
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2768 = _2517;
                float _2769 = _2519;
                float _2770 = _2521;
                float _2771 = _2523;
                float _2772 = _2525;
                float _2773 = _2527;
                uint _2774 = _2534;
                uint _2783;
                bool _2784;
                for (;;)
                {
                    _2783 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2774 << 2u)) >> 2u)).x;
                    _2784 = _2783 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2784)
                    {
                        frontier_phi_75_pred = _2770;
                        frontier_phi_75_pred_1 = _2769;
                        frontier_phi_75_pred_2 = _2768;
                        frontier_phi_75_pred_3 = _2773;
                        frontier_phi_75_pred_4 = _2772;
                        frontier_phi_75_pred_5 = _2771;
                    }
                    else
                    {
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        float _2983 = _2770;
                        float _2984 = _2771;
                        float _2985 = _2772;
                        float _2986 = _2773;
                        uint _2987 = _2783;
                        uint _2988;
                        vec4 _3013;
                        float _3014;
                        vec4 _3029;
                        vec3 _3041;
                        vec4 _3057;
                        vec4 _3072;
                        float _3118;
                        bool _3119;
                        for (;;)
                        {
                            uint _2998 = ((_2774 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2987));
                            _2988 = (_2987 + 4294967295u) & _2987;
                            uint _3000 = _2998 * 40u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3014 = _3013.w;
                            uint _3016 = (_2998 * 40u) + 4u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3031 = (_2998 * 40u) + 8u;
                            _3041 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x));
                            uint _3044 = (_2998 * 40u) + 16u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_2998 * 40u) + 20u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_2998 * 40u) + 24u;
                            vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3093 = (_2998 * 40u) + 28u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            _3118 = fma(_2355, _3106.z, fma(_2354, _3106.y, _3106.x * _2353)) + _3106.w;
                            _3119 = !((fma(_2355, _3087.z, fma(_2354, _3087.y, _3087.x * _2353)) + _3087.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3119)
                            {
                                float _3146 = _3013.x - _2353;
                                float _3147 = _3013.y - _2354;
                                float _3148 = _3013.z - _2355;
                                float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                                float _3152 = inversesqrt(_3149);
                                float _3153 = _3152 * _3146;
                                float _3154 = _3152 * _3147;
                                float _3155 = _3152 * _3148;
                                float _3159 = 1.0 - (_3149 / (_3014 * _3014));
                                float _4213 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3164 = sqrt(_3149) * _3029.w;
                                float _3166 = 1.39999997615814208984375 / (_3164 + 1.39999997615814208984375);
                                float _3167 = _3166 * _3166;
                                float _3170 = ((1.0 - _3167) * dot(vec3(_3153, _3154, _3155), vec3(_567, _570, _573))) + _3167;
                                float _3173 = _3164 * _3164;
                                float _3177 = (fma(_2355, _3057.z, fma(_2354, _3057.y, _3057.x * _2353)) + _3057.w) / _3118;
                                float _3178 = (fma(_2355, _3072.z, fma(_2354, _3072.y, _3072.x * _2353)) + _3072.w) / _3118;
                                float _3182 = 1.0 - dot(vec2(_3177, _3178), vec2(_3177, _3178));
                                float _4229 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3184 = _3183 * (((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3160) / ((_3173 * 0.699999988079071044921875) + 1.0));
                                float _3196 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                                float _3197 = 1.0 - _688;
                                float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                                float _3205 = _3204 * _3204;
                                float _3206 = _3205 * _3205;
                                float _3207 = _3153 - _2655;
                                float _3208 = _3154 - _2656;
                                float _3209 = _3155 - _2657;
                                float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                                float _3217 = dot(vec3(_567, _570, _573), vec3((-0.0) - _2655, (-0.0) - _2656, (-0.0) - _2657));
                                float _4240 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3220 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3221 = dot(vec3(_567, _570, _573), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                                float _4251 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                                float _3229 = _3166 * _3205;
                                float _3230 = _3229 * _3229;
                                float _3236 = ((1.0 - _3230) * dot(vec3(_567, _570, _573), vec3(_3153, _3154, _3155))) + _3230;
                                float _4262 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3238 = 1.0 - _3205;
                                float _3248 = (0.5 / (((_3237 * ((_3220 * _3238) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3237 * _3238) + _3205) * _3220))) * _3237;
                                float _4273 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3258 = (_3183 * _3160) * (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) / ((_3228 * _3228) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3258 * _3041.z;
                                frontier_phi_81_pred_1 = _3258 * _3041.y;
                                frontier_phi_81_pred_2 = _3258 * _3041.x;
                                frontier_phi_81_pred_3 = _3184 * _3029.z;
                                frontier_phi_81_pred_4 = _3184 * _3029.y;
                                frontier_phi_81_pred_5 = _3184 * _3029.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3264 = frontier_phi_81_pred;
                            _3263 = frontier_phi_81_pred_1;
                            _3262 = frontier_phi_81_pred_2;
                            _3267 = frontier_phi_81_pred_3;
                            _3266 = frontier_phi_81_pred_4;
                            _3265 = frontier_phi_81_pred_5;
                            _2971 = _3265 + _2984;
                            _2972 = _3266 + _2985;
                            _2973 = _3267 + _2986;
                            _2968 = _3262 + _2981;
                            _2969 = _3263 + _2982;
                            _2970 = _3264 + _2983;
                            if (_2988 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2988;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2970;
                        frontier_phi_75_pred_1 = _2969;
                        frontier_phi_75_pred_2 = _2968;
                        frontier_phi_75_pred_3 = _2973;
                        frontier_phi_75_pred_4 = _2972;
                        frontier_phi_75_pred_5 = _2971;
                    }
                    _2634 = frontier_phi_75_pred;
                    _2632 = frontier_phi_75_pred_1;
                    _2630 = frontier_phi_75_pred_2;
                    _2640 = frontier_phi_75_pred_3;
                    _2638 = frontier_phi_75_pred_4;
                    _2636 = frontier_phi_75_pred_5;
                    uint _2775 = _2774 + 1u;
                    if (_2775 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2768 = _2630;
                        _2769 = _2632;
                        _2770 = _2634;
                        _2771 = _2636;
                        _2772 = _2638;
                        _2773 = _2640;
                        _2774 = _2775;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2638;
                frontier_phi_63_64_ladder_1 = _2636;
                frontier_phi_63_64_ladder_2 = _2634;
                frontier_phi_63_64_ladder_3 = _2640;
                frontier_phi_63_64_ladder_4 = _2632;
                frontier_phi_63_64_ladder_5 = _2630;
            }
            else
            {
                frontier_phi_63_64_ladder = _2525;
                frontier_phi_63_64_ladder_1 = _2523;
                frontier_phi_63_64_ladder_2 = _2521;
                frontier_phi_63_64_ladder_3 = _2527;
                frontier_phi_63_64_ladder_4 = _2519;
                frontier_phi_63_64_ladder_5 = _2517;
            }
            _2629 = frontier_phi_63_64_ladder_5;
            _2631 = frontier_phi_63_64_ladder_4;
            _2633 = frontier_phi_63_64_ladder_2;
            _2635 = frontier_phi_63_64_ladder_1;
            _2637 = frontier_phi_63_64_ladder;
            _2639 = frontier_phi_63_64_ladder_3;
        }
        float _2644 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _2411 = (_2644 * _2635) + _1848;
        _2413 = (_2644 * _2637) + _1850;
        _2415 = (_2644 * _2639) + _1852;
        _2417 = ((_2629 * _657) * _2644) + _2193;
        _2419 = ((_2631 * _659) * _2644) + _2195;
        _2421 = ((_2633 * _660) * _2644) + _2197;
    }
    else
    {
        _2411 = _1848;
        _2413 = _1850;
        _2415 = _1852;
        _2417 = _2193;
        _2419 = _2195;
        _2421 = _2197;
    }
    vec4 _2427 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4289 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4300 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4311 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _2451 = (((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2411 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _672))) + ((_2417 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + (_2427.x * cbMtdParam._m0[3u].x);
    float _2453 = ((_2427.y * cbMtdParam._m0[3u].x) + ((_2419 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2413 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _672)));
    float _2455 = ((_2427.z * cbMtdParam._m0[3u].x) + ((_2421 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2415 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _672)));
    uint _2459 = _599 + 6u;
    float _2467 = _541 / cbSceneParam._m0[86u].x;
    float _2468 = _542 / cbSceneParam._m0[86u].y;
    vec4 _2482 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2467, _2468, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2484 = _2482.x;
    float _2485 = _2482.y;
    float _2486 = _2482.z;
    float _2487 = _2482.w;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2542 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2543 = _2542 / _475;
        float _2554 = _2543 * _526;
        float _2555 = _527 * _2543;
        float _2556 = (-0.0) - _2555;
        float _2557 = _2543 * _528;
        float _2559 = (cbSceneParam._m0[77u].w * _2556) / _2542;
        float _2560 = _2559 + cbSceneParam._m0[79u].w;
        float _2561 = cbSceneParam._m0[79u].w - _2555;
        float _2567 = sqrt(((_2554 * _2554) + (_2555 * _2555)) + (_2557 * _2557));
        float _2570 = (1.0 - (cbSceneParam._m0[77u].w / _2542)) * _2567;
        float _2575 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2577 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2730;
        if (abs((_2556 - _2559) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2730 = ((((_2560 > 0.0) ? exp2(_2575 * _2560) : (2.0 - exp2(_2577 * _2560))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2570;
        }
        else
        {
            float _2690 = 1.0 / cbSceneParam._m0[80u].x;
            float _2691 = isnan(_2561) ? _2560 : (isnan(_2560) ? _2561 : max(_2560, _2561));
            float _2692 = isnan(_2561) ? _2560 : (isnan(_2560) ? _2561 : min(_2560, _2561));
            float _2701 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : min(_2691, 0.0));
            float _2702 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : min(_2692, 0.0));
            _2730 = ((abs(_2567 / _2556) * cbSceneParam._m0[80u].y) * ((((_2701 - _2702) * 2.0) - ((exp2(_2575 * (isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0)))) - exp2(_2575 * (isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0))))) * _2690)) - ((exp2(_2577 * _2701) - exp2(_2577 * _2702)) * _2690))) + (_2570 * cbSceneParam._m0[80u].z);
        }
        vec4 _2732 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2467, _2468, 1.0), 0.0);
        float _2741 = exp2((_2730 * (-1.44269502162933349609375)) * (1.0 - _2732.w));
        float _2742 = log2(_2741);
        float _2758 = log2(_2487);
        _2579 = (exp2(_2758 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2742 * cbSceneParam._m0[78u].x)) * _2732.x) / cbSceneParam._m0[78u].x)) + _2484;
        _2581 = (exp2(_2758 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2742 * cbSceneParam._m0[78u].y)) * _2732.y) / cbSceneParam._m0[78u].y)) + _2485;
        _2583 = (exp2(_2758 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2742 * cbSceneParam._m0[78u].z)) * _2732.z) / cbSceneParam._m0[78u].z)) + _2486;
        _2585 = _2741 * _2487;
    }
    else
    {
        _2579 = _2484;
        _2581 = _2485;
        _2583 = _2486;
        _2585 = _2487;
    }
    float _2597 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2598 = _2597 == 3.0;
    float _2599 = log2(_2585);
    float _2606 = exp2(_2599 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0)));
    float _2607 = exp2(_2599 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0)));
    float _2608 = exp2(_2599 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0)));
    float _2617 = (_2597 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2617 * (_2598 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2579)));
    SV_Target.y = _2617 * (_2598 ? _2607 : (_2607 + (cbSceneParam._m0[72u].w * _2581)));
    SV_Target.z = _2617 * (_2598 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.w = cbInstanceData._m0[_2459].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2459].w;
}


