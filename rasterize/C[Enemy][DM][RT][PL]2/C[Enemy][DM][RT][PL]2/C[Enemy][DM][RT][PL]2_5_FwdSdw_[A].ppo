#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1098;
float _3790;
float _3791;
float _3792;
float _3793;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _259 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _264 = log2(0.0);
    bool _267 = exp2(_264 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _268;
    float _270;
    float _272;
    if (_267)
    {
        _268 = cbMtdParam._m0[19u].x;
        _270 = cbMtdParam._m0[19u].y;
        _272 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _268 = cbMtdParam._m0[18u].x;
        _270 = cbMtdParam._m0[18u].y;
        _272 = cbMtdParam._m0[18u].z;
    }
    float _278;
    if (_267)
    {
        _278 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _278 = cbMtdParam._m0[20u].z;
    }
    float _284;
    float _286;
    if (_267)
    {
        _284 = cbMtdParam._m0[28u].z;
        _286 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _284 = cbMtdParam._m0[24u].x;
        _286 = cbMtdParam._m0[24u].y;
    }
    float _288 = _284 * TEXCOORD.x;
    float _289 = _286 * TEXCOORD.y;
    float _301 = floor(_278);
    vec4 _304 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _288) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _289) + cbTextureTilingScale._m0[8u].w, _301));
    vec4 _327 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _259) + cbTextureTilingScale._m0[0u].w));
    float _336 = (((_268 * cbMtdParam._m0[20u].w) * _304.x) * cbMtdParam._m0[9u].x) * _327.x;
    float _340 = (((_270 * cbMtdParam._m0[20u].w) * _304.y) * cbMtdParam._m0[9u].y) * _327.y;
    float _344 = (((_272 * cbMtdParam._m0[20u].w) * _304.z) * cbMtdParam._m0[9u].z) * _327.z;
    vec4 _356 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _360 = _356.z;
    vec4 _374 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w, _301));
    float _187[2];
    float _188[2];
    _187[0u] = cbMtdParam._m0[27u].z;
    _188[0u] = cbMtdParam._m0[27u].w;
    _187[1u] = cbMtdParam._m0[28u].x;
    _188[1u] = cbMtdParam._m0[28u].y;
    float _391 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _394 = uint(int(isnan(1.0) ? _391 : (isnan(_391) ? 1.0 : min(_391, 1.0))));
    float _400 = (_374.x + _356.w) + _188[_394];
    vec4 _418 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w, _301));
    float _425 = (_418.x * 2.0) + (-1.0);
    float _426 = (_418.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_425, _426), vec2(_425, _426));
    float _3812 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))));
    float _441 = (cbMtdParam._m0[21u].x * (((_360 * 2.0) * (_418.z + _187[_394])) - _360)) + _360;
    float _445 = (cbMtdParam._m0[21u].y * ((_356.x * 2.0) + (-1.0))) + _425;
    float _446 = (cbMtdParam._m0[21u].y * ((_356.y * 2.0) + (-1.0))) + _426;
    float _449 = fma(_432, _238, fma(_446, _230 * TANGENT.x, (_216 * _208) * _445));
    float _452 = fma(_432, _239, fma(_446, _230 * TANGENT.y, (_216 * _209) * _445));
    float _455 = fma(_432, _240, fma(_446, _230 * TANGENT.z, (_216 * _210) * _445));
    float _459 = inversesqrt(dot(vec3(_449, _452, _455), vec3(_449, _452, _455)));
    float _460 = _459 * _449;
    float _461 = _459 * _452;
    float _462 = _459 * _455;
    float _3823 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _463 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3845 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3856 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3867 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _467 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _483 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _534 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _524);
    float _535 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _524);
    float _536 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _524);
    float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
    float _541 = _534 * _540;
    float _542 = _535 * _540;
    float _543 = _536 * _540;
    vec4 _548 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _550 = _548.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _778 = sqrt(((_534 * _534) + (_535 * _535)) + (_536 * _536));
        float _784 = (cbMatDynParam._m0[5u].x * _778) + cbMatDynParam._m0[5u].y;
        float _3878 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _789 = (cbMatDynParam._m0[5u].z * _778) + cbMatDynParam._m0[5u].w;
        float _3889 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) - _785)) + _785) < ((_550 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _568 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _570 = _568.w;
    float _590 = fma(_462, cbSceneParam._m0[5u].z, fma(_461, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _460));
    float _593 = fma(_462, cbSceneParam._m0[6u].z, fma(_461, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _460));
    float _596 = fma(_462, cbSceneParam._m0[7u].z, fma(_461, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _460));
    vec4 _598 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _609 = (((_598.y - _463) + (_598.w * _463)) * cbMtdParam._m0[3u].x) + _463;
    uint _622 = uint(roundEven(NORMAL.w)) * 13u;
    uint _624 = _622 + 9u;
    uint _625 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3900 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    vec4 _637 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _642 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _653 = (((_642.x - _467) + (_642.w * _467)) * cbMtdParam._m0[3u].x) + _467;
    float _666 = (cbMtdParam._m0[3u].x * (((_634 * _570) - _634) + _637.x)) + _634;
    float _667 = (cbMtdParam._m0[3u].x * (((_635 * _570) - _635) + _637.y)) + _635;
    float _668 = (cbMtdParam._m0[3u].x * (((_636 * _570) - _636) + _637.z)) + _636;
    float _669 = 1.0 - _653;
    float _670 = _669 * _666;
    float _671 = _669 * _667;
    float _672 = _669 * _668;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _653;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _653;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _653;
    float _680 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _695 = _692.x * TEXCOORD_4;
    float _696 = dot(vec3(_460, _461, _462), vec3(_541, _542, _543));
    float _699 = _696 * 2.0;
    float _703 = (_699 * _460) - _541;
    float _704 = (_699 * _461) - _542;
    float _705 = (_699 * _462) - _543;
    float _709 = abs(dot(vec3(_541, _542, _543), vec3(_460, _461, _462)));
    float _3933 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _711 = sqrt(_609);
    float _724 = exp2((_711 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_711 * 3.0));
    float _730 = (1.0 - _724) * ((_711 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _731 = _724 * _711;
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = fma(_767, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759));
        float _826 = fma(_767, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759));
        float _830 = fma(_767, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759));
        float _855 = _759 + _460;
        float _856 = _763 + _461;
        float _857 = _767 + _462;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _822;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _826;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _830;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_822 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_826 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_830 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_460, _461, _462), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3981 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_460, _461, _462), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _4014 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_460, _461, _462), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _4047 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1141 = fma(_767, cbModelParam._m0[30u].z, fma(_763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _759));
        float _1145 = fma(_767, cbModelParam._m0[31u].z, fma(_763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _759));
        float _1149 = fma(_767, cbModelParam._m0[32u].z, fma(_763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _759));
        float _1172 = _759 + _460;
        float _1173 = _763 + _461;
        float _1174 = _767 + _462;
        float _1184 = fma(_1174, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172)) - _1141;
        float _1185 = fma(_1174, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172)) - _1145;
        float _1186 = fma(_1174, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172)) - _1149;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1141 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1145 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[35u].z) + ((((((_1149 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1240 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1207.x + (-0.5));
        float _1242 = _1240 * (_1207.y + (-0.5));
        float _1243 = _1240 * (_1207.z + (-0.5));
        float _1250 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1214.x + (-0.5));
        float _1252 = _1250 * (_1214.y + (-0.5));
        float _1253 = _1250 * (_1214.z + (-0.5));
        float _1260 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1221.x + (-0.5));
        float _1262 = _1260 * (_1221.y + (-0.5));
        float _1263 = _1260 * (_1221.z + (-0.5));
        float _1270 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1228.x + (-0.5));
        float _1272 = _1270 * (_1228.y + (-0.5));
        float _1273 = _1270 * (_1228.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_460, _461, _462), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4110 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1304 + 1.0))) + _1309) * _1274;
        float _1319 = _1242 * 0.5;
        float _1320 = _1252 * 0.5;
        float _1321 = _1262 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_460, _461, _462), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4143 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1346 + 1.0))) + _1351) * _1275;
        float _1361 = _1243 * 0.5;
        float _1362 = _1253 * 0.5;
        float _1363 = _1263 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_460, _461, _462), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4176 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1388 + 1.0))) + _1393) * _1276;
        _1410 = _1243;
        _1411 = _1242;
        _1412 = _1241;
        _1413 = _1253;
        _1414 = _1252;
        _1415 = _1251;
        _1416 = _1263;
        _1417 = _1262;
        _1418 = _1261;
        _1419 = _1276;
        _1420 = _1275;
        _1421 = _1274;
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = _1098;
        _1418 = _1098;
        _1419 = _1098;
        _1420 = _1098;
        _1421 = _1098;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1111)) + _1111;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1457 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1460 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1463 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1434));
    float _1478 = _703 * 0.5;
    float _1479 = _704 * 0.5;
    float _1480 = _705 * 0.5;
    float _1481 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1484 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1487 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1521;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1494 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1498 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1502 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1509 = dot(vec4(cbModelParam._m0[39u]), vec4(_1478, _1479, _1480, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1532;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1523 = dot(vec4(cbModelParam._m0[40u]), vec4(_1478, _1479, _1480, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1536 = (_1532 * cbModelParam._m0[1u].x) + (_1521 * (1.0 - cbModelParam._m0[1u].x));
    float _1546 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _609);
    float _1547 = isnan(_1546) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1546 : min(cbModelParam._m0[25u].z, _1546));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1596 = fma(_767, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759)) + cbModelParam._m0[13u].w;
        float _1600 = fma(_767, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759)) + cbModelParam._m0[14u].w;
        float _1604 = fma(_767, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759)) + cbModelParam._m0[15u].w;
        float _1607 = fma(_705, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703));
        float _1610 = fma(_705, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703));
        float _1613 = fma(_705, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703));
        float _1641;
        if (_1607 > 0.0)
        {
            _1641 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1641 = frontier_phi_25_23_ladder;
        }
        float _1813;
        if (_1610 > 0.0)
        {
            _1813 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1813 = frontier_phi_34_30_ladder;
        }
        float _2109;
        if (_1613 > 0.0)
        {
            _2109 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2109 = frontier_phi_46_41_ladder;
        }
        float _2111 = isnan(_1813) ? _1641 : (isnan(_1641) ? _1813 : min(_1641, _1813));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1607) + _1596;
        float _2117 = (_2112 * _1610) + _1600;
        float _2118 = (_2112 * _1613) + _1604;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2119;
        float _2123 = _2119 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 > _2123) || ((_2117 < _2121) || ((_2116 < _2121) || (_2116 > _2123))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2263 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2118, cbModelParam._m0[9u].z, fma(_2117, cbModelParam._m0[9u].y, _2116 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2118, cbModelParam._m0[10u].z, fma(_2117, cbModelParam._m0[10u].y, _2116 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2118, cbModelParam._m0[11u].z, fma(_2117, cbModelParam._m0[11u].y, _2116 * cbModelParam._m0[11u].x))), _1547);
            frontier_phi_24_46_ladder = _2263.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2263.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2263.x * cbModelParam._m0[1u].y;
        }
        _1629 = frontier_phi_24_46_ladder_2;
        _1631 = frontier_phi_24_46_ladder_1;
        _1633 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_703, _704, _705), _1547);
        _1629 = _1617.x * cbModelParam._m0[1u].y;
        _1631 = _1617.y * cbModelParam._m0[1u].y;
        _1633 = _1617.z * cbModelParam._m0[1u].y;
    }
    float _1637 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _609);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1637 : min(cbModelParam._m0[25u].w, _1637));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1691 = fma(_767, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759)) + cbModelParam._m0[21u].w;
        float _1695 = fma(_767, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759)) + cbModelParam._m0[22u].w;
        float _1699 = fma(_767, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759)) + cbModelParam._m0[23u].w;
        float _1702 = fma(_705, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703));
        float _1705 = fma(_705, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703));
        float _1708 = fma(_705, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703));
        float _1818;
        if (_1702 > 0.0)
        {
            _1818 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1818 = frontier_phi_36_32_ladder;
        }
        float _2136;
        if (_1705 > 0.0)
        {
            _2136 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2136 = frontier_phi_48_43_ladder;
        }
        float _2474;
        if (_1708 > 0.0)
        {
            _2474 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2474 = frontier_phi_58_55_ladder;
        }
        float _2476 = isnan(_2136) ? _1818 : (isnan(_1818) ? _2136 : min(_1818, _2136));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1702) + _1691;
        float _2482 = (_2477 * _1705) + _1695;
        float _2483 = (_2477 * _1708) + _1699;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2484;
        float _2487 = _2484 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2483 > _2487) || ((_2483 < _2485) || ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 < _2485) || (_2481 > _2487))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2483, cbModelParam._m0[17u].z, fma(_2482, cbModelParam._m0[17u].y, _2481 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2483, cbModelParam._m0[18u].z, fma(_2482, cbModelParam._m0[18u].y, _2481 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2483, cbModelParam._m0[19u].z, fma(_2482, cbModelParam._m0[19u].y, _2481 * cbModelParam._m0[19u].x))), _1638);
            frontier_phi_33_58_ladder = _2605.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2605.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2605.x * cbModelParam._m0[1u].z;
        }
        _1727 = frontier_phi_33_58_ladder_2;
        _1729 = frontier_phi_33_58_ladder_1;
        _1731 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_703, _704, _705), _1638);
        _1727 = _1711.x * cbModelParam._m0[1u].z;
        _1729 = _1711.y * cbModelParam._m0[1u].z;
        _1731 = _1711.z * cbModelParam._m0[1u].z;
    }
    float _1744 = (((_730 * _680) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1727 - _1629)) + _1629);
    float _1746 = (((_730 * _682) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1729 - _1631)) + _1631);
    float _1748 = (((_730 * _683) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1731 - _1633)) + _1633);
    float _1751 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, _1744 * cbSceneParam._m0[91u].x));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1805 = _1792 / _1804;
    float _1806 = _1796 / _1804;
    float _1807 = _1800 / _1804;
    float _1954;
    float _1955;
    float _1956;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1834 = ((uint(_1807 > cbSceneParam._m0[59u].y) + uint(_1807 > cbSceneParam._m0[59u].x)) + uint(_1807 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1835 = _1834 + 43u;
        uint _1843 = _1834 + 44u;
        uint _1851 = _1834 + 45u;
        uint _1859 = _1834 + 46u;
        float _1870 = fma(_1804, cbSceneParam._m0[_1835].w, fma(_1800, cbSceneParam._m0[_1835].z, fma(_1796, cbSceneParam._m0[_1835].y, _1792 * cbSceneParam._m0[_1835].x)));
        float _1874 = fma(_1804, cbSceneParam._m0[_1843].w, fma(_1800, cbSceneParam._m0[_1843].z, fma(_1796, cbSceneParam._m0[_1843].y, _1792 * cbSceneParam._m0[_1843].x)));
        float _1882 = fma(_1804, cbSceneParam._m0[_1859].w, fma(_1800, cbSceneParam._m0[_1859].z, fma(_1796, cbSceneParam._m0[_1859].y, _1792 * cbSceneParam._m0[_1859].x)));
        float _1887 = cbSceneParam._m0[33u].z * _1882;
        float _1889 = cbSceneParam._m0[33u].w * _1882;
        float _1892 = fma(_1804, cbSceneParam._m0[_1851].w, fma(_1800, cbSceneParam._m0[_1851].z, fma(_1796, cbSceneParam._m0[_1851].y, _1792 * cbSceneParam._m0[_1851].x))) / _1882;
        float _1940 = (cbSceneParam._m0[33u].x - sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807))) * cbSceneParam._m0[33u].y;
        float _4302 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1947 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1887 + _1870) / _1882, (_1889 + _1874) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1889 + _1870) / _1882, (_1874 - _1887) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 - _1887) / _1882, (_1874 - _1889) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 - _1889) / _1882, (_1887 + _1874) / _1882), _1892), 0.0)).x), vec4(0.25)));
        _1954 = 1.0 - (_1947 * cbSceneParam._m0[34u].x);
        _1955 = 1.0 - (_1947 * cbSceneParam._m0[34u].y);
        _1956 = 1.0 - (_1947 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1954 = 1.0;
        _1955 = 1.0;
        _1956 = 1.0;
    }
    float _2020;
    float _2022;
    float _2024;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2008 = fma(_1804, cbSceneParam._m0[63u].w, fma(_1800, cbSceneParam._m0[63u].z, fma(_1796, cbSceneParam._m0[63u].y, _1792 * cbSceneParam._m0[63u].x)));
        float _2009 = fma(_1804, cbSceneParam._m0[60u].w, fma(_1800, cbSceneParam._m0[60u].z, fma(_1796, cbSceneParam._m0[60u].y, _1792 * cbSceneParam._m0[60u].x))) / _2008;
        float _2010 = fma(_1804, cbSceneParam._m0[61u].w, fma(_1800, cbSceneParam._m0[61u].z, fma(_1796, cbSceneParam._m0[61u].y, _1792 * cbSceneParam._m0[61u].x))) / _2008;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_2009 >= cbSceneParam._m0[64u].x) && (_2010 >= cbSceneParam._m0[64u].y)) && (_2009 <= cbSceneParam._m0[64u].z)) && (_2010 <= cbSceneParam._m0[64u].w))
        {
            float _2149 = fma(_1804, cbSceneParam._m0[62u].w, fma(_1800, cbSceneParam._m0[62u].z, fma(_1796, cbSceneParam._m0[62u].y, _1792 * cbSceneParam._m0[62u].x))) / _2008;
            float _2153 = isnan(cbSceneParam._m0[41u].w) ? _2149 : (isnan(_2149) ? cbSceneParam._m0[41u].w : max(_2149, cbSceneParam._m0[41u].w));
            float _2196 = (cbSceneParam._m0[33u].x - sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807))) * cbSceneParam._m0[33u].y;
            float _4318 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
            float _2203 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2009, cbSceneParam._m0[33u].w + _2010), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2009, _2010 - cbSceneParam._m0[33u].z), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2009 - cbSceneParam._m0[33u].z, _2010 - cbSceneParam._m0[33u].w), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2009 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2010), _2153), 0.0)).x), vec4(0.25)));
            float _2207 = 1.0 - (_2203 * cbSceneParam._m0[34u].x);
            float _2208 = 1.0 - (_2203 * cbSceneParam._m0[34u].y);
            float _2209 = 1.0 - (_2203 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2209) ? _1956 : (isnan(_1956) ? _2209 : min(_1956, _2209));
            frontier_phi_45_44_ladder_1 = isnan(_2208) ? _1955 : (isnan(_1955) ? _2208 : min(_1955, _2208));
            frontier_phi_45_44_ladder_2 = isnan(_2207) ? _1954 : (isnan(_1954) ? _2207 : min(_1954, _2207));
        }
        else
        {
            frontier_phi_45_44_ladder = _1956;
            frontier_phi_45_44_ladder_1 = _1955;
            frontier_phi_45_44_ladder_2 = _1954;
        }
        _2020 = frontier_phi_45_44_ladder_2;
        _2022 = frontier_phi_45_44_ladder_1;
        _2024 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2020 = _1954;
        _2022 = _1955;
        _2024 = _1956;
    }
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_622 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _695 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2068 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2072 = _2031 | 1u;
    float _2083 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_460, _461, _462));
    float _2086 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_460, _461, _462));
    float _4354 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _4365 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2091 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2093 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2100 = ((cbLight._m0[_2048].x * _2054) * _2093) + (((cbLight._m0[_2058].x * _2020) * _2068) * _2091);
    float _2101 = ((_2054 * cbLight._m0[_2048].y) * _2093) + (((cbLight._m0[_2058].y * _2022) * _2068) * _2091);
    float _2102 = ((_2054 * cbLight._m0[_2048].z) * _2093) + (((cbLight._m0[_2058].z * _2024) * _2068) * _2091);
    uvec4 _2106 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2108 = _2106.x == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2108)
    {
        _2210 = _2100;
        _2212 = _2101;
        _2214 = _2102;
    }
    else
    {
        uint _2218 = _2031 + 6u;
        float _2234 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_460, _461, _462)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4376 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2237 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2210 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2100;
        _2212 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2101;
        _2214 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2102;
    }
    bool _2217 = _2106.y == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2217)
    {
        _2272 = _2210;
        _2274 = _2212;
        _2276 = _2214;
    }
    else
    {
        uint _2445 = _2031 + 7u;
        float _2461 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_460, _461, _462)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4392 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2464 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2272 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2210;
        _2274 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2212;
        _2276 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2214;
    }
    uint _2279 = _2031 + 8u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _609) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2031].x + _541;
    float _2295 = cbLight._m0[_2031].y + _542;
    float _2296 = cbLight._m0[_2031].z + _543;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2031].xyz));
    float _4408 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _4419 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _2308 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2309 = dot(vec3(_460, _461, _462), vec3(_2301, _2302, _2303));
    float _4430 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2301, _2302, _2303));
    float _4441 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2293 * _2293;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
    float _2330 = 0.959999978542327880859375 - _677;
    float _2332 = 0.959999978542327880859375 - _678;
    float _2333 = 0.959999978542327880859375 - _679;
    float _2340 = 1.0 - _2293;
    float _2351 = (0.5 / (((_2308 * ((_2307 * _2340) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2340) + _2293) * _2307))) * _2307;
    float _4452 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    uint _2367 = _2031 + 9u;
    float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _609) * 0.949999988079071044921875);
    float _2379 = _2378 * _2378;
    float _2380 = cbLight._m0[_2072].x + _541;
    float _2381 = cbLight._m0[_2072].y + _542;
    float _2382 = cbLight._m0[_2072].z + _543;
    float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
    float _2387 = _2386 * _2380;
    float _2388 = _2386 * _2381;
    float _2389 = _2386 * _2382;
    float _2390 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2072].xyz));
    float _4463 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2394 = dot(vec3(_460, _461, _462), vec3(_2387, _2388, _2389));
    float _4474 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2398 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2387, _2388, _2389));
    float _4485 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2402 = _2379 * _2379;
    float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
    float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
    float _2420 = 1.0 - _2379;
    float _2430 = (0.5 / (((_2308 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2420) + _2379) * _2393))) * _2393;
    float _4496 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
    float _2442 = (((((_2413 * _2330) + _680) * cbLight._m0[_2367].x) * _2432) * _2054) + ((((cbLight._m0[_2279].x * _2020) * ((_2329 * _2330) + _680)) * _2353) * _2068);
    float _2443 = (((((_2413 * _2332) + _682) * cbLight._m0[_2367].y) * _2432) * _2054) + ((((cbLight._m0[_2279].y * _2022) * ((_2329 * _2332) + _682)) * _2353) * _2068);
    float _2444 = (((((_2413 * _2333) + _683) * cbLight._m0[_2367].z) * _2432) * _2054) + ((((cbLight._m0[_2279].z * _2024) * ((_2329 * _2333) + _683)) * _2353) * _2068);
    float _2500;
    float _2502;
    float _2504;
    if (_2108)
    {
        _2500 = _2442;
        _2502 = _2443;
        _2504 = _2444;
    }
    else
    {
        uint _2506 = _2031 + 2u;
        uint _2510 = _2031 + 10u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _609) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _541;
        float _2527 = cbLight._m0[_2506].y + _542;
        float _2528 = cbLight._m0[_2506].z + _543;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2506].xyz));
        float _4507 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2540 = dot(vec3(_460, _461, _462), vec3(_2533, _2534, _2535));
        float _4518 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4529 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
        float _2566 = 1.0 - _2525;
        float _2576 = (0.5 / (((_2308 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2566) + _2525) * _2539))) * _2539;
        float _4540 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2500 = (((((_2559 * _2330) + _680) * cbLight._m0[_2510].x) * _2578) * _2579) + _2442;
        _2502 = (((((_2559 * _2332) + _682) * cbLight._m0[_2510].y) * _2578) * _2579) + _2443;
        _2504 = (((((_2559 * _2333) + _683) * cbLight._m0[_2510].z) * _2578) * _2579) + _2444;
    }
    float _2610;
    float _2612;
    float _2614;
    if (_2217)
    {
        _2610 = _2500;
        _2612 = _2502;
        _2614 = _2504;
    }
    else
    {
        uint _2621 = _2031 + 3u;
        uint _2625 = _2031 + 11u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _609) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _541;
        float _2642 = cbLight._m0[_2621].y + _542;
        float _2643 = cbLight._m0[_2621].z + _543;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2621].xyz));
        float _4556 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2655 = dot(vec3(_460, _461, _462), vec3(_2648, _2649, _2650));
        float _4567 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4578 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0);
        float _2681 = 1.0 - _2640;
        float _2691 = (0.5 / (((_2308 * ((_2654 * _2681) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2681) + _2640) * _2654))) * _2654;
        float _4589 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2610 = (((((_2674 * _2330) + _680) * cbLight._m0[_2625].x) * _2693) * _2694) + _2500;
        _2612 = (((((_2674 * _2332) + _682) * cbLight._m0[_2625].y) * _2693) * _2694) + _2502;
        _2614 = (((((_2674 * _2333) + _683) * cbLight._m0[_2625].z) * _2693) * _2694) + _2504;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2029.y == 0u)
    {
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.x;
        uint _2727 = uint((float(_2715.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2716))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2716)));
        float _2737 = (log2(_1807 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2738 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        uint _2741 = uint(isnan(14.0) ? _2738 : (isnan(_2738) ? 14.0 : min(_2738, 14.0)));
        uvec4 _2746 = texelFetch(g_lightClusterGridBuffer, int(((_2741 << 2u) + (_2727 << 6u)) >> 2u));
        uint _2747 = _2746.x;
        uint _2748 = _2715.z;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        if (((((1u << ((_2748 >> 4u) & 15u)) + 4294967295u) & _2747) == 0u) || ((_2748 & 240u) == 0u))
        {
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
        }
        else
        {
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            uint _3002 = 0u;
            uint _3011;
            bool _3012;
            for (;;)
            {
                _3011 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                _3012 = _3011 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3012)
                {
                    frontier_phi_79_pred = _2999;
                    frontier_phi_79_pred_1 = _3001;
                    frontier_phi_79_pred_2 = _3000;
                    frontier_phi_79_pred_3 = _2998;
                    frontier_phi_79_pred_4 = _2997;
                    frontier_phi_79_pred_5 = _2996;
                }
                else
                {
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    uint _3147;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3011;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    for (;;)
                    {
                        uint _3151 = uint(findLSB(_3147)) + (_3002 << 5u);
                        uint _3148 = (_3147 + 4294967295u) & _3147;
                        uint _3153 = _3151 * 48u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 3u)).x));
                        uint _3173 = (_3151 * 48u) + 4u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3192 = (_3151 * 48u) + 8u;
                        vec3 _3203 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x));
                        float _3207 = _3167.x - _1805;
                        float _3208 = _3167.y - _1806;
                        float _3209 = _3167.z - _1807;
                        float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                        float _3213 = inversesqrt(_3210);
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3217 = dot(vec3(_590, _593, _596), vec3(_3214, _3215, _3216));
                        float _3222 = 1.0 - (_3210 * _3167.w);
                        float _4615 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3224 = sqrt(_3210) * _3186.w;
                        float _3227 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3217) + _3228;
                        float _3234 = _3224 * _3224;
                        float _3238 = ((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3223) / ((_3234 * 0.699999988079071044921875) + 1.0);
                        float _3242 = (-0.0) - _1805;
                        float _3243 = (-0.0) - _1806;
                        float _3244 = (-0.0) - _1807;
                        float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3258 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                        float _3259 = 1.0 - _711;
                        float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                        float _3267 = _3266 * _3266;
                        float _3268 = _3267 * _3267;
                        float _3269 = _3249 + _3214;
                        float _3270 = _3250 + _3215;
                        float _3271 = _3251 + _3216;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3279 = dot(vec3(_590, _593, _596), vec3(_3249, _3250, _3251));
                        float _4631 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3283 = dot(vec3(_590, _593, _596), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                        float _4642 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                        float _3291 = _3227 * _3267;
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3217) + _3292;
                        float _4653 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3297 = 1.0 - _3267;
                        float _3307 = (0.5 / (((_3296 * ((_3282 * _3297) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3267) * _3282))) * _3296;
                        float _4664 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3318 = (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3290 * _3290) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125))) * _3223;
                        _3071 = (_3238 * _3186.x) + _3144;
                        _3072 = (_3238 * _3186.y) + _3145;
                        _3073 = (_3238 * _3186.z) + _3146;
                        _3068 = (_3318 * _3203.x) + _3141;
                        _3069 = (_3318 * _3203.y) + _3142;
                        _3070 = (_3318 * _3203.z) + _3143;
                        if (_3148 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3148;
                        }
                    }
                    frontier_phi_79_pred = _3071;
                    frontier_phi_79_pred_1 = _3073;
                    frontier_phi_79_pred_2 = _3072;
                    frontier_phi_79_pred_3 = _3070;
                    frontier_phi_79_pred_4 = _3069;
                    frontier_phi_79_pred_5 = _3068;
                }
                _2851 = frontier_phi_79_pred;
                _2855 = frontier_phi_79_pred_1;
                _2853 = frontier_phi_79_pred_2;
                _2849 = frontier_phi_79_pred_3;
                _2847 = frontier_phi_79_pred_4;
                _2845 = frontier_phi_79_pred_5;
                uint _3003 = _3002 + 1u;
                if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2996 = _2845;
                    _2997 = _2847;
                    _2998 = _2849;
                    _2999 = _2851;
                    _3000 = _2853;
                    _3001 = _2855;
                    _3002 = _3003;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
        }
        uvec4 _2858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2859 = _2858.z;
        uint _2861 = (_2859 >> 8u) & 15u;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((4294967295u << _2861) & _2747) == 0u)
        {
            _2964 = _2844;
            _2966 = _2846;
            _2968 = _2848;
            _2970 = _2850;
            _2972 = _2852;
            _2974 = _2854;
        }
        else
        {
            float _2989 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
            float _2990 = _2989 * _1805;
            float _2991 = _2989 * _1806;
            float _2992 = _2989 * _1807;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2861 < ((_2859 >> 12u) & 15u))
            {
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _3124 = _2844;
                float _3125 = _2846;
                float _3126 = _2848;
                float _3127 = _2850;
                float _3128 = _2852;
                float _3129 = _2854;
                uint _3130 = _2861;
                uint _3139;
                bool _3140;
                for (;;)
                {
                    _3139 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                    _3140 = _3139 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3140)
                    {
                        frontier_phi_90_pred = _3126;
                        frontier_phi_90_pred_1 = _3127;
                        frontier_phi_90_pred_2 = _3129;
                        frontier_phi_90_pred_3 = _3128;
                        frontier_phi_90_pred_4 = _3125;
                        frontier_phi_90_pred_5 = _3124;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        float _3347 = _3126;
                        float _3348 = _3127;
                        float _3349 = _3128;
                        float _3350 = _3129;
                        uint _3351 = _3139;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3421;
                        vec4 _3436;
                        float _3482;
                        bool _3483;
                        for (;;)
                        {
                            uint _3362 = ((_3130 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3408 = (_3362 * 40u) + 16u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3362 * 40u) + 20u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3362 * 40u) + 24u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3457 = (_3362 * 40u) + 28u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            _3482 = fma(_1807, _3470.z, fma(_1806, _3470.y, _3470.x * _1805)) + _3470.w;
                            _3483 = !((fma(_1807, _3451.z, fma(_1806, _3451.y, _3451.x * _1805)) + _3451.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3483)
                            {
                                float _3510 = _3377.x - _1805;
                                float _3511 = _3377.y - _1806;
                                float _3512 = _3377.z - _1807;
                                float _3513 = dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512));
                                float _3516 = inversesqrt(_3513);
                                float _3517 = _3516 * _3510;
                                float _3518 = _3516 * _3511;
                                float _3519 = _3516 * _3512;
                                float _3523 = 1.0 - (_3513 / (_3378 * _3378));
                                float _4675 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3528 = sqrt(_3513) * _3393.w;
                                float _3530 = 1.39999997615814208984375 / (_3528 + 1.39999997615814208984375);
                                float _3531 = _3530 * _3530;
                                float _3534 = ((1.0 - _3531) * dot(vec3(_3517, _3518, _3519), vec3(_590, _593, _596))) + _3531;
                                float _3537 = _3528 * _3528;
                                float _3541 = (fma(_1807, _3421.z, fma(_1806, _3421.y, _3421.x * _1805)) + _3421.w) / _3482;
                                float _3542 = (fma(_1807, _3436.z, fma(_1806, _3436.y, _3436.x * _1805)) + _3436.w) / _3482;
                                float _3546 = 1.0 - dot(vec2(_3541, _3542), vec2(_3541, _3542));
                                float _4691 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3548 = _3547 * (((isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0))) * _3524) / ((_3537 * 0.699999988079071044921875) + 1.0));
                                float _3560 = exp2(log2(1.0 / ((_3537 * 3.5) + 5.0)) * 0.25);
                                float _3561 = 1.0 - _711;
                                float _3568 = sqrt(1.0 - ((1.0 - (_3561 * _3561)) * (1.0 - (_3560 * _3560))));
                                float _3569 = _3568 * _3568;
                                float _3570 = _3569 * _3569;
                                float _3571 = _3517 - _2990;
                                float _3572 = _3518 - _2991;
                                float _3573 = _3519 - _2992;
                                float _3577 = inversesqrt(dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573)));
                                float _3581 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2990, (-0.0) - _2991, (-0.0) - _2992));
                                float _4702 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3585 = dot(vec3(_590, _593, _596), vec3(_3577 * _3571, _3577 * _3572, _3577 * _3573));
                                float _4713 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3592 = ((_3588 * _3588) * (_3570 + (-1.0))) + 1.0;
                                float _3593 = _3530 * _3569;
                                float _3594 = _3593 * _3593;
                                float _3600 = ((1.0 - _3594) * dot(vec3(_590, _593, _596), vec3(_3517, _3518, _3519))) + _3594;
                                float _4724 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3602 = 1.0 - _3569;
                                float _3612 = (0.5 / (((_3601 * ((_3584 * _3602) + _3569)) + 9.9999999392252902907785028219223e-09) + (((_3601 * _3602) + _3569) * _3584))) * _3601;
                                float _4735 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3622 = (_3547 * _3524) * (((_3570 * 3.1415927410125732421875) * (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) / ((_3592 * _3592) * ((_3537 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3548 * _3393.z;
                                frontier_phi_96_pred_1 = _3548 * _3393.y;
                                frontier_phi_96_pred_2 = _3548 * _3393.x;
                                frontier_phi_96_pred_3 = _3622 * _3405.z;
                                frontier_phi_96_pred_4 = _3622 * _3405.y;
                                frontier_phi_96_pred_5 = _3622 * _3405.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3631 = frontier_phi_96_pred;
                            _3630 = frontier_phi_96_pred_1;
                            _3629 = frontier_phi_96_pred_2;
                            _3628 = frontier_phi_96_pred_3;
                            _3627 = frontier_phi_96_pred_4;
                            _3626 = frontier_phi_96_pred_5;
                            _3335 = _3629 + _3348;
                            _3336 = _3630 + _3349;
                            _3337 = _3631 + _3350;
                            _3332 = _3626 + _3345;
                            _3333 = _3627 + _3346;
                            _3334 = _3628 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3334;
                        frontier_phi_90_pred_1 = _3335;
                        frontier_phi_90_pred_2 = _3337;
                        frontier_phi_90_pred_3 = _3336;
                        frontier_phi_90_pred_4 = _3333;
                        frontier_phi_90_pred_5 = _3332;
                    }
                    _2969 = frontier_phi_90_pred;
                    _2971 = frontier_phi_90_pred_1;
                    _2975 = frontier_phi_90_pred_2;
                    _2973 = frontier_phi_90_pred_3;
                    _2967 = frontier_phi_90_pred_4;
                    _2965 = frontier_phi_90_pred_5;
                    uint _3131 = _3130 + 1u;
                    if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3124 = _2965;
                        _3125 = _2967;
                        _3126 = _2969;
                        _3127 = _2971;
                        _3128 = _2973;
                        _3129 = _2975;
                        _3130 = _3131;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2973;
                frontier_phi_71_72_ladder_1 = _2975;
                frontier_phi_71_72_ladder_2 = _2971;
                frontier_phi_71_72_ladder_3 = _2969;
                frontier_phi_71_72_ladder_4 = _2967;
                frontier_phi_71_72_ladder_5 = _2965;
            }
            else
            {
                frontier_phi_71_72_ladder = _2852;
                frontier_phi_71_72_ladder_1 = _2854;
                frontier_phi_71_72_ladder_2 = _2850;
                frontier_phi_71_72_ladder_3 = _2848;
                frontier_phi_71_72_ladder_4 = _2846;
                frontier_phi_71_72_ladder_5 = _2844;
            }
            _2964 = frontier_phi_71_72_ladder_5;
            _2966 = frontier_phi_71_72_ladder_4;
            _2968 = frontier_phi_71_72_ladder_3;
            _2970 = frontier_phi_71_72_ladder_2;
            _2972 = frontier_phi_71_72_ladder;
            _2974 = frontier_phi_71_72_ladder_1;
        }
        float _2979 = isnan(1.0) ? _695 : (isnan(_695) ? 1.0 : min(_695, 1.0));
        _2759 = (_2979 * _2970) + _2272;
        _2761 = (_2979 * _2972) + _2274;
        _2763 = (_2979 * _2974) + _2276;
        _2765 = ((_2964 * _680) * _2979) + _2610;
        _2767 = ((_2966 * _682) * _2979) + _2612;
        _2769 = ((_2968 * _683) * _2979) + _2614;
    }
    else
    {
        _2759 = _2272;
        _2761 = _2274;
        _2763 = _2276;
        _2765 = _2610;
        _2767 = _2612;
        _2769 = _2614;
    }
    vec4 _2775 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4751 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4762 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4773 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _2799 = (((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2759 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _695))) + ((_2765 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1536)) * cbPerFrame._m0[3u].x)) + (_2775.x * cbMtdParam._m0[3u].x);
    float _2801 = ((_2775.y * cbMtdParam._m0[3u].x) + ((_2767 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1536)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2761 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _695)));
    float _2803 = ((_2775.z * cbMtdParam._m0[3u].x) + ((_2769 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1536)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2763 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _695)));
    float _2804 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2805 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2806 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    uint _2807 = _622 + 6u;
    float _2815 = _565 / cbSceneParam._m0[86u].x;
    float _2816 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2830 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2815, _2816, (log2((isnan(cbSceneParam._m0[77u].w) ? _483 : (isnan(_483) ? cbSceneParam._m0[77u].w : min(_483, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2832 = _2830.x;
    float _2833 = _2830.y;
    float _2834 = _2830.z;
    float _2835 = _2830.w;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    if (_483 > cbSceneParam._m0[78u].w)
    {
        float _2869 = isnan(_483) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _483 : min(cbSceneParam._m0[80u].w, _483));
        float _2870 = _2869 / _483;
        float _2881 = _2870 * _534;
        float _2882 = _535 * _2870;
        float _2883 = (-0.0) - _2882;
        float _2884 = _2870 * _536;
        float _2886 = (cbSceneParam._m0[77u].w * _2883) / _2869;
        float _2887 = _2886 + cbSceneParam._m0[79u].w;
        float _2888 = cbSceneParam._m0[79u].w - _2882;
        float _2894 = sqrt(((_2881 * _2881) + (_2882 * _2882)) + (_2884 * _2884));
        float _2897 = (1.0 - (cbSceneParam._m0[77u].w / _2869)) * _2894;
        float _2902 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2904 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3081;
        if (abs((_2883 - _2886) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3081 = ((((_2887 > 0.0) ? exp2(_2902 * _2887) : (2.0 - exp2(_2904 * _2887))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2897;
        }
        else
        {
            float _3025 = 1.0 / cbSceneParam._m0[80u].x;
            float _3026 = isnan(_2888) ? _2887 : (isnan(_2887) ? _2888 : max(_2887, _2888));
            float _3027 = isnan(_2888) ? _2887 : (isnan(_2887) ? _2888 : min(_2887, _2888));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            _3081 = ((abs(_2894 / _2883) * cbSceneParam._m0[80u].y) * ((((_3036 - _3037) * 2.0) - ((exp2(_2902 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0)))) - exp2(_2902 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))))) * _3025)) - ((exp2(_2904 * _3036) - exp2(_2904 * _3037)) * _3025))) + (_2897 * cbSceneParam._m0[80u].z);
        }
        vec4 _3083 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2815, _2816, 1.0), 0.0);
        float _3092 = exp2((_3081 * (-1.44269502162933349609375)) * (1.0 - _3083.w));
        float _3093 = log2(_3092);
        float _3109 = log2(_2835);
        _2906 = (exp2(_3109 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].x)) * _3083.x) / cbSceneParam._m0[78u].x)) + _2832;
        _2908 = (exp2(_3109 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].y)) * _3083.y) / cbSceneParam._m0[78u].y)) + _2833;
        _2910 = (exp2(_3109 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].z)) * _3083.z) / cbSceneParam._m0[78u].z)) + _2834;
        _2912 = _3092 * _2835;
    }
    else
    {
        _2906 = _2832;
        _2908 = _2833;
        _2910 = _2834;
        _2912 = _2835;
    }
    bool _3119;
    vec4 _2922;
    vec4 _2944;
    float _2946;
    float _2950;
    float _2951;
    float _2952;
    float _2953;
    bool _2963;
    for (;;)
    {
        _2922 = cbMatDynParam._m0[0u];
        float _2924 = roundEven(_2922.y);
        bool _2925 = _2924 == 3.0;
        float _2926 = log2(_2912);
        float _2933 = exp2(_2926 * cbSceneParam._m0[78u].x) * _2804;
        float _2934 = exp2(_2926 * cbSceneParam._m0[78u].y) * _2805;
        float _2935 = exp2(_2926 * cbSceneParam._m0[78u].z) * _2806;
        float _2942 = _550 + (-0.5);
        _2944 = cbMtdParam._m0[1u];
        _2946 = _2944.y * _2942;
        float _2949 = (_2924 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2950 = _2949 * (_2925 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2906)));
        _2951 = _2949 * (_2925 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2908)));
        _2952 = _2949 * (_2925 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2910)));
        _2953 = _2942 * 0.999000012874603271484375;
        _2963 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2963)
        {
            if ((cbInstanceData._m0[_622 + 7u].x + _2953) < 0.5)
            {
                _3119 = true;
                break;
            }
        }
        uint _3060 = _624 + uint(_2922.w);
        if ((cbInstanceData._m0[_3060].w < 1.0) && ((cbInstanceData._m0[_3060].w + _2953) < 0.5))
        {
            _3119 = true;
            break;
        }
        if ((_2946 + 1.0) < _2944.x)
        {
            _3119 = true;
            break;
        }
        _3119 = false;
        break;
    }
    float _3323;
    if (_3119)
    {
        discard_state = true;
        _3323 = 0.0;
    }
    else
    {
        _3323 = cbInstanceData._m0[_2807].w;
    }
    SV_Target.x = _2950;
    SV_Target.y = _2951;
    SV_Target.z = _2952;
    SV_Target.w = _3323;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2807].w;
    discard_exit();
}


