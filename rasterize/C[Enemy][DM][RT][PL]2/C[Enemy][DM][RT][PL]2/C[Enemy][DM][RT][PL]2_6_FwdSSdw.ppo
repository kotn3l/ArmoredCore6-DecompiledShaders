#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1063;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _263 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _274 = exp2(log2(_263.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _275;
    float _277;
    float _279;
    if (_274)
    {
        _275 = cbMtdParam._m0[19u].x;
        _277 = cbMtdParam._m0[19u].y;
        _279 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _275 = cbMtdParam._m0[18u].x;
        _277 = cbMtdParam._m0[18u].y;
        _279 = cbMtdParam._m0[18u].z;
    }
    float _285;
    if (_274)
    {
        _285 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _285 = cbMtdParam._m0[20u].z;
    }
    float _291;
    float _293;
    if (_274)
    {
        _291 = cbMtdParam._m0[28u].z;
        _293 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _291 = cbMtdParam._m0[24u].x;
        _293 = cbMtdParam._m0[24u].y;
    }
    float _295 = _291 * TEXCOORD.x;
    float _296 = _293 * TEXCOORD.y;
    float _308 = floor(_285);
    vec4 _311 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _295) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _296) + cbTextureTilingScale._m0[8u].w, _308));
    vec4 _333 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = (((_275 * cbMtdParam._m0[20u].w) * _311.x) * cbMtdParam._m0[9u].x) * _333.x;
    float _345 = (((_277 * cbMtdParam._m0[20u].w) * _311.y) * cbMtdParam._m0[9u].y) * _333.y;
    float _349 = (((_279 * cbMtdParam._m0[20u].w) * _311.z) * cbMtdParam._m0[9u].z) * _333.z;
    vec4 _361 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _365 = _361.z;
    vec4 _379 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _295) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _296) + cbTextureTilingScale._m0[10u].w, _308));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[27u].z;
    _184[0u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _184[1u] = cbMtdParam._m0[28u].y;
    float _396 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _399 = uint(int(isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0))));
    float _405 = (_379.x + _361.w) + _184[_399];
    vec4 _423 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w, _308));
    float _430 = (_423.x * 2.0) + (-1.0);
    float _431 = (_423.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _3452 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))));
    float _447 = (cbMtdParam._m0[21u].x * (((_365 * 2.0) * (_423.z + _183[_399])) - _365)) + _365;
    float _451 = (cbMtdParam._m0[21u].y * ((_361.x * 2.0) + (-1.0))) + _430;
    float _452 = (cbMtdParam._m0[21u].y * ((_361.y * 2.0) + (-1.0))) + _431;
    float _455 = fma(_437, _234, fma(_452, _226 * TANGENT.x, (_212 * _204) * _451));
    float _458 = fma(_437, _235, fma(_452, _226 * TANGENT.y, (_212 * _205) * _451));
    float _461 = fma(_437, _236, fma(_452, _226 * TANGENT.z, (_212 * _206) * _451));
    float _465 = inversesqrt(dot(vec3(_455, _458, _461), vec3(_455, _458, _461)));
    float _466 = _465 * _455;
    float _467 = _465 * _458;
    float _468 = _465 * _461;
    float _3463 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _469 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3485 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3496 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3507 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _473 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _489 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _540 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _530);
    float _541 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _530);
    float _542 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _530);
    float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
    float _547 = _540 * _546;
    float _548 = _541 * _546;
    float _549 = _542 * _546;
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _558 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _560 = _558.w;
    float _581 = fma(_468, cbSceneParam._m0[5u].z, fma(_467, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _466));
    float _584 = fma(_468, cbSceneParam._m0[6u].z, fma(_467, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _466));
    float _587 = fma(_468, cbSceneParam._m0[7u].z, fma(_467, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _466));
    vec4 _589 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _600 = (((_589.y - _469) + (_589.w * _469)) * cbMtdParam._m0[3u].x) + _469;
    uint _613 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = (_613 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3518 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    vec4 _628 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _633 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _644 = (((_633.x - _473) + (_633.w * _473)) * cbMtdParam._m0[3u].x) + _473;
    float _657 = (cbMtdParam._m0[3u].x * (((_625 * _560) - _625) + _628.x)) + _625;
    float _658 = (cbMtdParam._m0[3u].x * (((_626 * _560) - _626) + _628.y)) + _626;
    float _659 = (cbMtdParam._m0[3u].x * (((_627 * _560) - _627) + _628.z)) + _627;
    float _660 = 1.0 - _644;
    float _661 = _660 * _657;
    float _662 = _660 * _658;
    float _663 = _660 * _659;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _644;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _644;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _644;
    float _671 = _668 + 0.039999999105930328369140625;
    float _673 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _555, cbSceneParam._m0[86u].y * _556));
    float _686 = _683.x * TEXCOORD_4;
    float _687 = dot(vec3(_466, _467, _468), vec3(_547, _548, _549));
    float _690 = _687 * 2.0;
    float _694 = (_690 * _466) - _547;
    float _695 = (_690 * _467) - _548;
    float _696 = (_690 * _468) - _549;
    float _700 = abs(dot(vec3(_547, _548, _549), vec3(_466, _467, _468)));
    float _3551 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _702 = sqrt(_600);
    float _715 = exp2((_702 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_702 * 3.0));
    float _721 = (1.0 - _715) * ((_702 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _722 = _715 * _702;
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1062;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _787 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _791 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _795 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _820 = _750 + _466;
        float _821 = _754 + _467;
        float _822 = _758 + _468;
        float _832 = fma(_822, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820)) - _787;
        float _833 = fma(_822, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820)) - _791;
        float _834 = fma(_822, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820)) - _795;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_787 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_791 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[34u].z) + ((((((_795 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _890 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_856.x + (-0.5));
        float _892 = _890 * (_856.y + (-0.5));
        float _893 = _890 * (_856.z + (-0.5));
        float _900 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_863.x + (-0.5));
        float _902 = _900 * (_863.y + (-0.5));
        float _903 = _900 * (_863.z + (-0.5));
        float _910 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_870.x + (-0.5));
        float _912 = _910 * (_870.y + (-0.5));
        float _913 = _910 * (_870.z + (-0.5));
        float _920 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_877.x + (-0.5));
        float _922 = _920 * (_877.y + (-0.5));
        float _923 = _920 * (_877.z + (-0.5));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = _891 * 0.5;
        float _928 = _901 * 0.5;
        float _929 = _911 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _944 = (dot(vec3(_466, _467, _468), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _954 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3599 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_956 + 1.0))) + _961) * _924;
        float _971 = _892 * 0.5;
        float _972 = _902 * 0.5;
        float _973 = _912 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_466, _467, _468), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3632 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_998 + 1.0))) + _1003) * _925;
        float _1013 = _893 * 0.5;
        float _1014 = _903 * 0.5;
        float _1015 = _913 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_466, _467, _468), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3665 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1040 + 1.0))) + _1045) * _926;
        _1062 = _893;
        _1064 = _892;
        _1065 = _891;
        _1066 = _903;
        _1067 = _902;
        _1068 = _901;
        _1069 = _913;
        _1070 = _912;
        _1071 = _911;
        _1072 = _926;
        _1073 = _925;
        _1074 = _924;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
    }
    else
    {
        _1062 = _1063;
        _1064 = _1063;
        _1065 = _1063;
        _1066 = _1063;
        _1067 = _1063;
        _1068 = _1063;
        _1069 = _1063;
        _1070 = _1063;
        _1071 = _1063;
        _1072 = _1063;
        _1073 = _1063;
        _1074 = _1063;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1107 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1111 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1134 = _750 + _466;
        float _1135 = _754 + _467;
        float _1136 = _758 + _468;
        float _1146 = fma(_1136, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134)) - _1103;
        float _1147 = fma(_1136, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134)) - _1107;
        float _1148 = fma(_1136, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134)) - _1111;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1103 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1107 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[35u].z) + ((((((_1111 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_466, _467, _468), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3728 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_466, _467, _468), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3761 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_466, _467, _468), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3794 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1063;
        _1373 = _1063;
        _1374 = _1063;
        _1375 = _1063;
        _1376 = _1063;
        _1377 = _1063;
        _1378 = _1063;
        _1379 = _1063;
        _1380 = _1063;
        _1381 = _1063;
        _1382 = _1063;
        _1383 = _1063;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _694 * 0.5;
    float _1441 = _695 * 0.5;
    float _1442 = _696 * 0.5;
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1062, _1066, _1069, _1072));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1508 : min(cbModelParam._m0[25u].z, _1508));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_696, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694));
        float _1572 = fma(_696, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694));
        float _1575 = fma(_696, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694));
        float _1603;
        if (_1569 > 0.0)
        {
            _1603 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1603 = frontier_phi_22_20_ladder;
        }
        float _1828;
        if (_1572 > 0.0)
        {
            _1828 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1828 = frontier_phi_31_27_ladder;
        }
        float _2085;
        if (_1575 > 0.0)
        {
            _2085 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2085 = frontier_phi_43_38_ladder;
        }
        float _2087 = isnan(_1828) ? _1603 : (isnan(_1603) ? _1828 : min(_1603, _1828));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1569) + _1558;
        float _2093 = (_2088 * _1572) + _1562;
        float _2094 = (_2088 * _1575) + _1566;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2095;
        float _2099 = _2095 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 > _2099) || ((_2093 < _2097) || ((_2092 < _2097) || (_2092 > _2099))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2094, cbModelParam._m0[9u].z, fma(_2093, cbModelParam._m0[9u].y, _2092 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2094, cbModelParam._m0[10u].z, fma(_2093, cbModelParam._m0[10u].y, _2092 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2094, cbModelParam._m0[11u].z, fma(_2093, cbModelParam._m0[11u].y, _2092 * cbModelParam._m0[11u].x))), _1509);
            frontier_phi_21_43_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_21_43_ladder_2;
        _1593 = frontier_phi_21_43_ladder_1;
        _1595 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_694, _695, _696), _1509);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1599 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1599 : min(cbModelParam._m0[25u].w, _1599));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1653 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1657 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1661 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1664 = fma(_696, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694));
        float _1667 = fma(_696, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694));
        float _1670 = fma(_696, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694));
        float _1833;
        if (_1664 > 0.0)
        {
            _1833 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1833 = frontier_phi_33_29_ladder;
        }
        float _2112;
        if (_1667 > 0.0)
        {
            _2112 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2112 = frontier_phi_45_40_ladder;
        }
        float _2325;
        if (_1670 > 0.0)
        {
            _2325 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2325 = frontier_phi_54_51_ladder;
        }
        float _2327 = isnan(_2112) ? _1833 : (isnan(_1833) ? _2112 : min(_1833, _2112));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1664) + _1653;
        float _2333 = (_2328 * _1667) + _1657;
        float _2334 = (_2328 * _1670) + _1661;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2335;
        float _2338 = _2335 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2334 > _2338) || ((_2334 < _2336) || ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 < _2336) || (_2332 > _2338))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2334, cbModelParam._m0[17u].z, fma(_2333, cbModelParam._m0[17u].y, _2332 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2334, cbModelParam._m0[18u].z, fma(_2333, cbModelParam._m0[18u].y, _2332 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2334, cbModelParam._m0[19u].z, fma(_2333, cbModelParam._m0[19u].y, _2332 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_30_54_ladder = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1689 = frontier_phi_30_54_ladder_2;
        _1691 = frontier_phi_30_54_ladder;
        _1693 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_694, _695, _696), _1600);
        _1689 = _1673.x * cbModelParam._m0[1u].z;
        _1691 = _1673.y * cbModelParam._m0[1u].z;
        _1693 = _1673.z * cbModelParam._m0[1u].z;
    }
    float _1706 = (((_721 * _671) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1689 - _1591)) + _1591);
    float _1708 = (((_721 * _673) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1691 - _1593)) + _1593);
    float _1710 = (((_721 * _674) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1693 - _1595)) + _1595);
    float _1713 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, _1706 * cbSceneParam._m0[91u].x));
    vec4 _1727 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_555, _556));
    float _1729 = _1727.w;
    float _1741 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1729);
    float _1742 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1729);
    float _1743 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1729);
    uvec4 _1747 = floatBitsToUint(cbInstanceData._m0[_613 + 5u]);
    uint _1749 = _1747.x * 14u;
    uint _1750 = _1749 + 13u;
    float _1757 = _686 + (-1.0);
    float _1762 = (cbLight._m0[_1750].x * _1757) + 1.0;
    float _1763 = (cbLight._m0[_1750].y * _1757) + 1.0;
    float _1764 = (cbLight._m0[_1750].z * _1757) + 1.0;
    float _1765 = (cbLight._m0[_1750].w * _1757) + 1.0;
    uint _1766 = _1749 + 5u;
    float _1772 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
    uint _1776 = _1749 + 4u;
    float _1786 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    uint _1790 = _1749 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_466, _467, _468));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_466, _467, _468));
    float _3930 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _3941 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1766].x * _1772) * _1811) + (((cbLight._m0[_1776].x * _1741) * _1786) * _1809);
    float _1819 = ((_1772 * cbLight._m0[_1766].y) * _1811) + (((cbLight._m0[_1776].y * _1742) * _1786) * _1809);
    float _1820 = ((_1772 * cbLight._m0[_1766].z) * _1811) + (((cbLight._m0[_1776].z * _1743) * _1786) * _1809);
    uvec4 _1825 = floatBitsToUint(cbLight._m0[_1749 + 12u]);
    bool _1827 = _1825.x == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1827)
    {
        _1838 = _1818;
        _1840 = _1819;
        _1842 = _1820;
    }
    else
    {
        uint _1846 = _1749 + 6u;
        float _1862 = (dot(vec3(cbLight._m0[_1749 + 2u].xyz), vec3(_466, _467, _468)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3952 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1865 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _1838 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1818;
        _1840 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1819;
        _1842 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1820;
    }
    bool _1845 = _1825.y == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1845)
    {
        _1883 = _1838;
        _1885 = _1840;
        _1887 = _1842;
    }
    else
    {
        uint _2056 = _1749 + 7u;
        float _2072 = (dot(vec3(cbLight._m0[_1749 + 3u].xyz), vec3(_466, _467, _468)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _3968 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2075 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1883 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _1838;
        _1885 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _1840;
        _1887 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _1842;
    }
    uint _1890 = _1749 + 8u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _600) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1749].x + _547;
    float _1906 = cbLight._m0[_1749].y + _548;
    float _1907 = cbLight._m0[_1749].z + _549;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_1749].xyz));
    float _3984 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _1919 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1920 = dot(vec3(_466, _467, _468), vec3(_1912, _1913, _1914));
    float _4006 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1912, _1913, _1914));
    float _4017 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1904 * _1904;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0);
    float _1941 = 0.959999978542327880859375 - _668;
    float _1943 = 0.959999978542327880859375 - _669;
    float _1944 = 0.959999978542327880859375 - _670;
    float _1951 = 1.0 - _1904;
    float _1962 = (0.5 / (((_1919 * ((_1918 * _1951) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _1951) + _1904) * _1918))) * _1918;
    float _4028 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    uint _1978 = _1749 + 9u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _600) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1790].x + _547;
    float _1992 = cbLight._m0[_1790].y + _548;
    float _1993 = cbLight._m0[_1790].z + _549;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_1790].xyz));
    float _4039 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _2005 = dot(vec3(_466, _467, _468), vec3(_1998, _1999, _2000));
    float _4050 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1998, _1999, _2000));
    float _4061 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1990 * _1990;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2024 = exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0);
    float _2031 = 1.0 - _1990;
    float _2041 = (0.5 / (((_1919 * ((_2004 * _2031) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2031) + _1990) * _2004))) * _2004;
    float _4072 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2043 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    float _2053 = (((((_2024 * _1941) + _671) * cbLight._m0[_1978].x) * _2043) * _1772) + ((((cbLight._m0[_1890].x * _1741) * ((_1940 * _1941) + _671)) * _1964) * _1786);
    float _2054 = (((((_2024 * _1943) + _673) * cbLight._m0[_1978].y) * _2043) * _1772) + ((((cbLight._m0[_1890].y * _1742) * ((_1940 * _1943) + _673)) * _1964) * _1786);
    float _2055 = (((((_2024 * _1944) + _674) * cbLight._m0[_1978].z) * _2043) * _1772) + ((((cbLight._m0[_1890].z * _1743) * ((_1940 * _1944) + _674)) * _1964) * _1786);
    float _2117;
    float _2119;
    float _2121;
    if (_1827)
    {
        _2117 = _2053;
        _2119 = _2054;
        _2121 = _2055;
    }
    else
    {
        uint _2123 = _1749 + 2u;
        uint _2127 = _1749 + 10u;
        float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _600) * 0.949999988079071044921875);
        float _2142 = _2141 * _2141;
        float _2143 = cbLight._m0[_2123].x + _547;
        float _2144 = cbLight._m0[_2123].y + _548;
        float _2145 = cbLight._m0[_2123].z + _549;
        float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
        float _2150 = _2149 * _2143;
        float _2151 = _2149 * _2144;
        float _2152 = _2149 * _2145;
        float _2153 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_2123].xyz));
        float _4083 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2157 = dot(vec3(_466, _467, _468), vec3(_2150, _2151, _2152));
        float _4094 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2161 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2150, _2151, _2152));
        float _4105 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2165 = _2142 * _2142;
        float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
        float _2176 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
        float _2183 = 1.0 - _2142;
        float _2193 = (0.5 / (((_1919 * ((_2156 * _2183) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2183) + _2142) * _2156))) * _2156;
        float _4116 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _2117 = (((((_2176 * _1941) + _671) * cbLight._m0[_2127].x) * _2195) * _2196) + _2053;
        _2119 = (((((_2176 * _1943) + _673) * cbLight._m0[_2127].y) * _2195) * _2196) + _2054;
        _2121 = (((((_2176 * _1944) + _674) * cbLight._m0[_2127].z) * _2195) * _2196) + _2055;
    }
    float _2231;
    float _2233;
    float _2235;
    if (_1845)
    {
        _2231 = _2117;
        _2233 = _2119;
        _2235 = _2121;
    }
    else
    {
        uint _2242 = _1749 + 3u;
        uint _2246 = _1749 + 11u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _600) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _547;
        float _2263 = cbLight._m0[_2242].y + _548;
        float _2264 = cbLight._m0[_2242].z + _549;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_2242].xyz));
        float _4132 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2276 = dot(vec3(_466, _467, _468), vec3(_2269, _2270, _2271));
        float _4143 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4154 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
        float _2302 = 1.0 - _2261;
        float _2312 = (0.5 / (((_1919 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2302) + _2261) * _2275))) * _2275;
        float _4165 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _2231 = (((((_2295 * _1941) + _671) * cbLight._m0[_2246].x) * _2314) * _2315) + _2117;
        _2233 = (((((_2295 * _1943) + _673) * cbLight._m0[_2246].y) * _2314) * _2315) + _2119;
        _2235 = (((((_2295 * _1944) + _674) * cbLight._m0[_2246].z) * _2314) * _2315) + _2121;
    }
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_1747.y == 0u)
    {
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2390;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2390;
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2390;
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.x;
        uint _2417 = uint((float(_2405.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _2406))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _2406)));
        float _2427 = (log2(_2393 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2428 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        uint _2431 = uint(isnan(14.0) ? _2428 : (isnan(_2428) ? 14.0 : min(_2428, 14.0)));
        uvec4 _2436 = texelFetch(g_lightClusterGridBuffer, int(((_2431 << 2u) + (_2417 << 6u)) >> 2u));
        uint _2437 = _2436.x;
        uint _2438 = _2405.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2438 >> 4u) & 15u)) + 4294967295u) & _2437) == 0u) || ((_2438 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            uint _2705 = 0u;
            uint _2714;
            bool _2715;
            for (;;)
            {
                _2714 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                _2715 = _2714 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2715)
                {
                    frontier_phi_69_pred = _2704;
                    frontier_phi_69_pred_1 = _2703;
                    frontier_phi_69_pred_2 = _2702;
                    frontier_phi_69_pred_3 = _2700;
                    frontier_phi_69_pred_4 = _2699;
                    frontier_phi_69_pred_5 = _2701;
                }
                else
                {
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    uint _2829;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2714;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    for (;;)
                    {
                        uint _2833 = uint(findLSB(_2829)) + (_2705 << 5u);
                        uint _2830 = (_2829 + 4294967295u) & _2829;
                        uint _2835 = _2833 * 48u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2855 = (_2833 * 48u) + 4u;
                        vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2874 = (_2833 * 48u) + 8u;
                        vec3 _2885 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x));
                        float _2889 = _2849.x - _2391;
                        float _2890 = _2849.y - _2392;
                        float _2891 = _2849.z - _2393;
                        float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                        float _2895 = inversesqrt(_2892);
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2899 = dot(vec3(_581, _584, _587), vec3(_2896, _2897, _2898));
                        float _2904 = 1.0 - (_2892 * _2849.w);
                        float _4191 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2906 = sqrt(_2892) * _2868.w;
                        float _2909 = 1.39999997615814208984375 / (_2906 + 1.39999997615814208984375);
                        float _2910 = _2909 * _2909;
                        float _2913 = ((1.0 - _2910) * _2899) + _2910;
                        float _2916 = _2906 * _2906;
                        float _2920 = ((isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * _2905) / ((_2916 * 0.699999988079071044921875) + 1.0);
                        float _2924 = (-0.0) - _2391;
                        float _2925 = (-0.0) - _2392;
                        float _2926 = (-0.0) - _2393;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2941 = exp2(log2(1.0 / ((_2916 * 3.5) + 5.0)) * 0.25);
                        float _2942 = 1.0 - _702;
                        float _2949 = sqrt(1.0 - ((1.0 - (_2942 * _2942)) * (1.0 - (_2941 * _2941))));
                        float _2950 = _2949 * _2949;
                        float _2951 = _2950 * _2950;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2954 = _2933 + _2898;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2962 = dot(vec3(_581, _584, _587), vec3(_2931, _2932, _2933));
                        float _4207 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2966 = dot(vec3(_581, _584, _587), vec3(_2958 * _2952, _2958 * _2953, _2958 * _2954));
                        float _4218 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2969 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2973 = ((_2969 * _2969) * (_2951 + (-1.0))) + 1.0;
                        float _2974 = _2909 * _2950;
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2899) + _2975;
                        float _4229 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2979 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2980 = 1.0 - _2950;
                        float _2990 = (0.5 / (((_2979 * ((_2965 * _2980) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _2980) + _2950) * _2965))) * _2979;
                        float _4240 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _3001 = (((_2951 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_2973 * _2973) * ((_2916 * 2.1991131305694580078125) + 3.141590118408203125))) * _2905;
                        _2758 = (_2920 * _2868.x) + _2826;
                        _2759 = (_2920 * _2868.y) + _2827;
                        _2760 = (_2920 * _2868.z) + _2828;
                        _2755 = (_3001 * _2885.x) + _2823;
                        _2756 = (_3001 * _2885.y) + _2824;
                        _2757 = (_3001 * _2885.z) + _2825;
                        if (_2830 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2830;
                        }
                    }
                    frontier_phi_69_pred = _2760;
                    frontier_phi_69_pred_1 = _2759;
                    frontier_phi_69_pred_2 = _2758;
                    frontier_phi_69_pred_3 = _2756;
                    frontier_phi_69_pred_4 = _2755;
                    frontier_phi_69_pred_5 = _2757;
                }
                _2566 = frontier_phi_69_pred;
                _2564 = frontier_phi_69_pred_1;
                _2562 = frontier_phi_69_pred_2;
                _2558 = frontier_phi_69_pred_3;
                _2556 = frontier_phi_69_pred_4;
                _2560 = frontier_phi_69_pred_5;
                uint _2706 = _2705 + 1u;
                if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2699 = _2556;
                    _2700 = _2558;
                    _2701 = _2560;
                    _2702 = _2562;
                    _2703 = _2564;
                    _2704 = _2566;
                    _2705 = _2706;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((4294967295u << _2572) & _2437) == 0u)
        {
            _2667 = _2555;
            _2669 = _2557;
            _2671 = _2559;
            _2673 = _2561;
            _2675 = _2563;
            _2677 = _2565;
        }
        else
        {
            float _2692 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
            float _2693 = _2692 * _2391;
            float _2694 = _2692 * _2392;
            float _2695 = _2692 * _2393;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2806 = _2555;
                float _2807 = _2557;
                float _2808 = _2559;
                float _2809 = _2561;
                float _2810 = _2563;
                float _2811 = _2565;
                uint _2812 = _2572;
                uint _2821;
                bool _2822;
                for (;;)
                {
                    _2821 = texelFetch(g_lightClassification, int((((_2431 << 5u) + (_2417 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                    _2822 = _2821 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2822)
                    {
                        frontier_phi_75_pred = _2808;
                        frontier_phi_75_pred_1 = _2807;
                        frontier_phi_75_pred_2 = _2806;
                        frontier_phi_75_pred_3 = _2811;
                        frontier_phi_75_pred_4 = _2810;
                        frontier_phi_75_pred_5 = _2809;
                    }
                    else
                    {
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        uint _3025 = _2821;
                        uint _3026;
                        vec4 _3051;
                        float _3052;
                        vec4 _3067;
                        vec3 _3079;
                        vec4 _3095;
                        vec4 _3110;
                        float _3156;
                        bool _3157;
                        for (;;)
                        {
                            uint _3036 = ((_2812 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3025));
                            _3026 = (_3025 + 4294967295u) & _3025;
                            uint _3038 = _3036 * 40u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3052 = _3051.w;
                            uint _3054 = (_3036 * 40u) + 4u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3069 = (_3036 * 40u) + 8u;
                            _3079 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x));
                            uint _3082 = (_3036 * 40u) + 16u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3036 * 40u) + 20u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3036 * 40u) + 24u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3131 = (_3036 * 40u) + 28u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3156 = fma(_2393, _3144.z, fma(_2392, _3144.y, _3144.x * _2391)) + _3144.w;
                            _3157 = !((fma(_2393, _3125.z, fma(_2392, _3125.y, _3125.x * _2391)) + _3125.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3157)
                            {
                                float _3184 = _3051.x - _2391;
                                float _3185 = _3051.y - _2392;
                                float _3186 = _3051.z - _2393;
                                float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                                float _3190 = inversesqrt(_3187);
                                float _3191 = _3190 * _3184;
                                float _3192 = _3190 * _3185;
                                float _3193 = _3190 * _3186;
                                float _3197 = 1.0 - (_3187 / (_3052 * _3052));
                                float _4251 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3202 = sqrt(_3187) * _3067.w;
                                float _3204 = 1.39999997615814208984375 / (_3202 + 1.39999997615814208984375);
                                float _3205 = _3204 * _3204;
                                float _3208 = ((1.0 - _3205) * dot(vec3(_3191, _3192, _3193), vec3(_581, _584, _587))) + _3205;
                                float _3211 = _3202 * _3202;
                                float _3215 = (fma(_2393, _3095.z, fma(_2392, _3095.y, _3095.x * _2391)) + _3095.w) / _3156;
                                float _3216 = (fma(_2393, _3110.z, fma(_2392, _3110.y, _3110.x * _2391)) + _3110.w) / _3156;
                                float _3220 = 1.0 - dot(vec2(_3215, _3216), vec2(_3215, _3216));
                                float _4267 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3222 = _3221 * (((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3198) / ((_3211 * 0.699999988079071044921875) + 1.0));
                                float _3234 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                                float _3235 = 1.0 - _702;
                                float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                                float _3243 = _3242 * _3242;
                                float _3244 = _3243 * _3243;
                                float _3245 = _3191 - _2693;
                                float _3246 = _3192 - _2694;
                                float _3247 = _3193 - _2695;
                                float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                                float _3255 = dot(vec3(_581, _584, _587), vec3((-0.0) - _2693, (-0.0) - _2694, (-0.0) - _2695));
                                float _4278 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3258 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3259 = dot(vec3(_581, _584, _587), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                                float _4289 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                                float _3267 = _3204 * _3243;
                                float _3268 = _3267 * _3267;
                                float _3274 = ((1.0 - _3268) * dot(vec3(_581, _584, _587), vec3(_3191, _3192, _3193))) + _3268;
                                float _4300 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3276 = 1.0 - _3243;
                                float _3286 = (0.5 / (((_3275 * ((_3258 * _3276) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3275 * _3276) + _3243) * _3258))) * _3275;
                                float _4311 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3296 = (_3221 * _3198) * (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3266 * _3266) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3296 * _3079.z;
                                frontier_phi_81_pred_1 = _3296 * _3079.y;
                                frontier_phi_81_pred_2 = _3296 * _3079.x;
                                frontier_phi_81_pred_3 = _3222 * _3067.z;
                                frontier_phi_81_pred_4 = _3222 * _3067.y;
                                frontier_phi_81_pred_5 = _3222 * _3067.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3302 = frontier_phi_81_pred;
                            _3301 = frontier_phi_81_pred_1;
                            _3300 = frontier_phi_81_pred_2;
                            _3305 = frontier_phi_81_pred_3;
                            _3304 = frontier_phi_81_pred_4;
                            _3303 = frontier_phi_81_pred_5;
                            _3009 = _3303 + _3022;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            _3006 = _3300 + _3019;
                            _3007 = _3301 + _3020;
                            _3008 = _3302 + _3021;
                            if (_3026 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3026;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3008;
                        frontier_phi_75_pred_1 = _3007;
                        frontier_phi_75_pred_2 = _3006;
                        frontier_phi_75_pred_3 = _3011;
                        frontier_phi_75_pred_4 = _3010;
                        frontier_phi_75_pred_5 = _3009;
                    }
                    _2672 = frontier_phi_75_pred;
                    _2670 = frontier_phi_75_pred_1;
                    _2668 = frontier_phi_75_pred_2;
                    _2678 = frontier_phi_75_pred_3;
                    _2676 = frontier_phi_75_pred_4;
                    _2674 = frontier_phi_75_pred_5;
                    uint _2813 = _2812 + 1u;
                    if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2806 = _2668;
                        _2807 = _2670;
                        _2808 = _2672;
                        _2809 = _2674;
                        _2810 = _2676;
                        _2811 = _2678;
                        _2812 = _2813;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2676;
                frontier_phi_63_64_ladder_1 = _2674;
                frontier_phi_63_64_ladder_2 = _2672;
                frontier_phi_63_64_ladder_3 = _2678;
                frontier_phi_63_64_ladder_4 = _2670;
                frontier_phi_63_64_ladder_5 = _2668;
            }
            else
            {
                frontier_phi_63_64_ladder = _2563;
                frontier_phi_63_64_ladder_1 = _2561;
                frontier_phi_63_64_ladder_2 = _2559;
                frontier_phi_63_64_ladder_3 = _2565;
                frontier_phi_63_64_ladder_4 = _2557;
                frontier_phi_63_64_ladder_5 = _2555;
            }
            _2667 = frontier_phi_63_64_ladder_5;
            _2669 = frontier_phi_63_64_ladder_4;
            _2671 = frontier_phi_63_64_ladder_2;
            _2673 = frontier_phi_63_64_ladder_1;
            _2675 = frontier_phi_63_64_ladder;
            _2677 = frontier_phi_63_64_ladder_3;
        }
        float _2682 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _2449 = (_2682 * _2673) + _1883;
        _2451 = (_2682 * _2675) + _1885;
        _2453 = (_2682 * _2677) + _1887;
        _2455 = ((_2667 * _671) * _2682) + _2231;
        _2457 = ((_2669 * _673) * _2682) + _2233;
        _2459 = ((_2671 * _674) * _2682) + _2235;
    }
    else
    {
        _2449 = _1883;
        _2451 = _1885;
        _2453 = _1887;
        _2455 = _2231;
        _2457 = _2233;
        _2459 = _2235;
    }
    vec4 _2465 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4327 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4338 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4349 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _2489 = (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2449 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _686))) + ((_2455 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + (_2465.x * cbMtdParam._m0[3u].x);
    float _2491 = ((_2465.y * cbMtdParam._m0[3u].x) + ((_2457 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2451 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _686)));
    float _2493 = ((_2465.z * cbMtdParam._m0[3u].x) + ((_2459 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2453 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _686)));
    uint _2497 = _613 + 6u;
    float _2505 = _555 / cbSceneParam._m0[86u].x;
    float _2506 = _556 / cbSceneParam._m0[86u].y;
    vec4 _2520 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, (log2((isnan(cbSceneParam._m0[77u].w) ? _489 : (isnan(_489) ? cbSceneParam._m0[77u].w : min(_489, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2522 = _2520.x;
    float _2523 = _2520.y;
    float _2524 = _2520.z;
    float _2525 = _2520.w;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_489 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_489) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _489 : min(cbSceneParam._m0[80u].w, _489));
        float _2581 = _2580 / _489;
        float _2592 = _2581 * _540;
        float _2593 = _541 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2595 = _2581 * _542;
        float _2597 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2598 = _2597 + cbSceneParam._m0[79u].w;
        float _2599 = cbSceneParam._m0[79u].w - _2593;
        float _2605 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2595 * _2595));
        float _2608 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2605;
        float _2613 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2615 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2768;
        if (abs((_2594 - _2597) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2768 = ((((_2598 > 0.0) ? exp2(_2613 * _2598) : (2.0 - exp2(_2615 * _2598))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2608;
        }
        else
        {
            float _2728 = 1.0 / cbSceneParam._m0[80u].x;
            float _2729 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : max(_2598, _2599));
            float _2730 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : min(_2598, _2599));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            _2768 = ((abs(_2605 / _2594) * cbSceneParam._m0[80u].y) * ((((_2739 - _2740) * 2.0) - ((exp2(_2613 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0)))) - exp2(_2613 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))))) * _2728)) - ((exp2(_2615 * _2739) - exp2(_2615 * _2740)) * _2728))) + (_2608 * cbSceneParam._m0[80u].z);
        }
        vec4 _2770 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, 1.0), 0.0);
        float _2779 = exp2((_2768 * (-1.44269502162933349609375)) * (1.0 - _2770.w));
        float _2780 = log2(_2779);
        float _2796 = log2(_2525);
        _2617 = (exp2(_2796 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].x)) * _2770.x) / cbSceneParam._m0[78u].x)) + _2522;
        _2619 = (exp2(_2796 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].y)) * _2770.y) / cbSceneParam._m0[78u].y)) + _2523;
        _2621 = (exp2(_2796 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].z)) * _2770.z) / cbSceneParam._m0[78u].z)) + _2524;
        _2623 = _2779 * _2525;
    }
    else
    {
        _2617 = _2522;
        _2619 = _2523;
        _2621 = _2524;
        _2623 = _2525;
    }
    float _2635 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2636 = _2635 == 3.0;
    float _2637 = log2(_2623);
    float _2644 = exp2(_2637 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)));
    float _2645 = exp2(_2637 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0)));
    float _2646 = exp2(_2637 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0)));
    float _2655 = (_2635 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2655 * (_2636 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2617)));
    SV_Target.y = _2655 * (_2636 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2619)));
    SV_Target.z = _2655 * (_2636 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2621)));
    SV_Target.w = cbInstanceData._m0[_2497].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2497].w;
}


