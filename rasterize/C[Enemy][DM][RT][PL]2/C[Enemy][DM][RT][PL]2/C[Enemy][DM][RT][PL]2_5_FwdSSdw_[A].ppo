#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1096;
float _3529;
float _3530;
float _3531;
float _3532;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _257 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _262 = log2(0.0);
    bool _265 = exp2(_262 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _266;
    float _268;
    float _270;
    if (_265)
    {
        _266 = cbMtdParam._m0[19u].x;
        _268 = cbMtdParam._m0[19u].y;
        _270 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _266 = cbMtdParam._m0[18u].x;
        _268 = cbMtdParam._m0[18u].y;
        _270 = cbMtdParam._m0[18u].z;
    }
    float _276;
    if (_265)
    {
        _276 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _276 = cbMtdParam._m0[20u].z;
    }
    float _282;
    float _284;
    if (_265)
    {
        _282 = cbMtdParam._m0[28u].z;
        _284 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _282 = cbMtdParam._m0[24u].x;
        _284 = cbMtdParam._m0[24u].y;
    }
    float _286 = _282 * TEXCOORD.x;
    float _287 = _284 * TEXCOORD.y;
    float _299 = floor(_276);
    vec4 _302 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _286) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _287) + cbTextureTilingScale._m0[8u].w, _299));
    vec4 _325 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _257) + cbTextureTilingScale._m0[0u].w));
    float _334 = (((_266 * cbMtdParam._m0[20u].w) * _302.x) * cbMtdParam._m0[9u].x) * _325.x;
    float _338 = (((_268 * cbMtdParam._m0[20u].w) * _302.y) * cbMtdParam._m0[9u].y) * _325.y;
    float _342 = (((_270 * cbMtdParam._m0[20u].w) * _302.z) * cbMtdParam._m0[9u].z) * _325.z;
    vec4 _354 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _257) + cbTextureTilingScale._m0[1u].w));
    float _358 = _354.z;
    vec4 _372 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w, _299));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[27u].z;
    _186[0u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _186[1u] = cbMtdParam._m0[28u].y;
    float _389 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _392 = uint(int(isnan(1.0) ? _389 : (isnan(_389) ? 1.0 : min(_389, 1.0))));
    float _398 = (_372.x + _354.w) + _186[_392];
    vec4 _416 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w, _299));
    float _423 = (_416.x * 2.0) + (-1.0);
    float _424 = (_416.y * 2.0) + (-1.0);
    float _425 = dot(vec2(_423, _424), vec2(_423, _424));
    float _3551 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _439 = (cbMtdParam._m0[21u].x * (((_358 * 2.0) * (_416.z + _185[_392])) - _358)) + _358;
    float _443 = (cbMtdParam._m0[21u].y * ((_354.x * 2.0) + (-1.0))) + _423;
    float _444 = (cbMtdParam._m0[21u].y * ((_354.y * 2.0) + (-1.0))) + _424;
    float _447 = fma(_430, _236, fma(_444, _228 * TANGENT.x, (_214 * _206) * _443));
    float _450 = fma(_430, _237, fma(_444, _228 * TANGENT.y, (_214 * _207) * _443));
    float _453 = fma(_430, _238, fma(_444, _228 * TANGENT.z, (_214 * _208) * _443));
    float _457 = inversesqrt(dot(vec3(_447, _450, _453), vec3(_447, _450, _453)));
    float _458 = _457 * _447;
    float _459 = _457 * _450;
    float _460 = _457 * _453;
    float _3562 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _461 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3584 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3595 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3606 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _465 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _481 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _522);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _522);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _522);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    vec4 _546 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _548 = _546.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _776 = sqrt(((_532 * _532) + (_533 * _533)) + (_534 * _534));
        float _782 = (cbMatDynParam._m0[5u].x * _776) + cbMatDynParam._m0[5u].y;
        float _3617 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _787 = (cbMatDynParam._m0[5u].z * _776) + cbMatDynParam._m0[5u].w;
        float _3628 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) - _783)) + _783) < ((_548 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _566 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _568 = _566.w;
    float _588 = fma(_460, cbSceneParam._m0[5u].z, fma(_459, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _458));
    float _591 = fma(_460, cbSceneParam._m0[6u].z, fma(_459, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _458));
    float _594 = fma(_460, cbSceneParam._m0[7u].z, fma(_459, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _458));
    vec4 _596 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _607 = (((_596.y - _461) + (_596.w * _461)) * cbMtdParam._m0[3u].x) + _461;
    uint _620 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = _620 + 9u;
    uint _623 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3639 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    vec4 _635 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _640 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _651 = (((_640.x - _465) + (_640.w * _465)) * cbMtdParam._m0[3u].x) + _465;
    float _664 = (cbMtdParam._m0[3u].x * (((_632 * _568) - _632) + _635.x)) + _632;
    float _665 = (cbMtdParam._m0[3u].x * (((_633 * _568) - _633) + _635.y)) + _633;
    float _666 = (cbMtdParam._m0[3u].x * (((_634 * _568) - _634) + _635.z)) + _634;
    float _667 = 1.0 - _651;
    float _668 = _667 * _664;
    float _669 = _667 * _665;
    float _670 = _667 * _666;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _651;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _651;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _651;
    float _678 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    vec4 _690 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _693 = _690.x * TEXCOORD_4;
    float _694 = dot(vec3(_458, _459, _460), vec3(_539, _540, _541));
    float _697 = _694 * 2.0;
    float _701 = (_697 * _458) - _539;
    float _702 = (_697 * _459) - _540;
    float _703 = (_697 * _460) - _541;
    float _707 = abs(dot(vec3(_539, _540, _541), vec3(_458, _459, _460)));
    float _3672 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _709 = sqrt(_607);
    float _722 = exp2((_709 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _728 = (1.0 - _722) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _729 = _722 * _709;
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_765, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757));
        float _824 = fma(_765, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757));
        float _828 = fma(_765, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757));
        float _853 = _757 + _458;
        float _854 = _761 + _459;
        float _855 = _765 + _460;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_458, _459, _460), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3720 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_458, _459, _460), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3753 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_458, _459, _460), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3786 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1139 = fma(_765, cbModelParam._m0[30u].z, fma(_761, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _757));
        float _1143 = fma(_765, cbModelParam._m0[31u].z, fma(_761, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _757));
        float _1147 = fma(_765, cbModelParam._m0[32u].z, fma(_761, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _757));
        float _1170 = _757 + _458;
        float _1171 = _761 + _459;
        float _1172 = _765 + _460;
        float _1182 = fma(_1172, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170)) - _1139;
        float _1183 = fma(_1172, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170)) - _1143;
        float _1184 = fma(_1172, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170)) - _1147;
        float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
        float _1201 = ((_1188 * _1182) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1139 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1188 * _1183) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1143 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1188 * _1184) / cbModelParam._m0[35u].z) + ((((((_1147 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        float _1238 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1205.x + (-0.5));
        float _1240 = _1238 * (_1205.y + (-0.5));
        float _1241 = _1238 * (_1205.z + (-0.5));
        float _1248 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1212.x + (-0.5));
        float _1250 = _1248 * (_1212.y + (-0.5));
        float _1251 = _1248 * (_1212.z + (-0.5));
        float _1258 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1219.x + (-0.5));
        float _1260 = _1258 * (_1219.y + (-0.5));
        float _1261 = _1258 * (_1219.z + (-0.5));
        float _1268 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1226.x + (-0.5));
        float _1270 = _1268 * (_1226.y + (-0.5));
        float _1271 = _1268 * (_1226.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_458, _459, _460), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3849 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1302 + 1.0))) + _1307) * _1272;
        float _1317 = _1240 * 0.5;
        float _1318 = _1250 * 0.5;
        float _1319 = _1260 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_458, _459, _460), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3882 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1344 + 1.0))) + _1349) * _1273;
        float _1359 = _1241 * 0.5;
        float _1360 = _1251 * 0.5;
        float _1361 = _1261 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_458, _459, _460), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3915 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1386 + 1.0))) + _1391) * _1274;
        _1408 = _1241;
        _1409 = _1240;
        _1410 = _1239;
        _1411 = _1251;
        _1412 = _1250;
        _1413 = _1249;
        _1414 = _1261;
        _1415 = _1260;
        _1416 = _1259;
        _1417 = _1274;
        _1418 = _1273;
        _1419 = _1272;
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
    }
    else
    {
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = _1096;
        _1416 = _1096;
        _1417 = _1096;
        _1418 = _1096;
        _1419 = _1096;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1455 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1458 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1461 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1432));
    float _1476 = _701 * 0.5;
    float _1477 = _702 * 0.5;
    float _1478 = _703 * 0.5;
    float _1479 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1482 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1485 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1519;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1492 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1496 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1500 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1507 = dot(vec4(cbModelParam._m0[39u]), vec4(_1476, _1477, _1478, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1530;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1521 = dot(vec4(cbModelParam._m0[40u]), vec4(_1476, _1477, _1478, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1534 = (_1530 * cbModelParam._m0[1u].x) + (_1519 * (1.0 - cbModelParam._m0[1u].x));
    float _1544 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _607);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1544 : min(cbModelParam._m0[25u].z, _1544));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1594 = fma(_765, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757)) + cbModelParam._m0[13u].w;
        float _1598 = fma(_765, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757)) + cbModelParam._m0[14u].w;
        float _1602 = fma(_765, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757)) + cbModelParam._m0[15u].w;
        float _1605 = fma(_703, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701));
        float _1608 = fma(_703, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701));
        float _1611 = fma(_703, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701));
        float _1639;
        if (_1605 > 0.0)
        {
            _1639 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1639 = frontier_phi_25_23_ladder;
        }
        float _1864;
        if (_1608 > 0.0)
        {
            _1864 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1864 = frontier_phi_34_30_ladder;
        }
        float _2121;
        if (_1611 > 0.0)
        {
            _2121 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2121 = frontier_phi_46_41_ladder;
        }
        float _2123 = isnan(_1864) ? _1639 : (isnan(_1639) ? _1864 : min(_1639, _1864));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1605) + _1594;
        float _2129 = (_2124 * _1608) + _1598;
        float _2130 = (_2124 * _1611) + _1602;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2131;
        float _2135 = _2131 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 > _2135) || ((_2129 < _2133) || ((_2128 < _2133) || (_2128 > _2135))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2130, cbModelParam._m0[9u].z, fma(_2129, cbModelParam._m0[9u].y, _2128 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2130, cbModelParam._m0[10u].z, fma(_2129, cbModelParam._m0[10u].y, _2128 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2130, cbModelParam._m0[11u].z, fma(_2129, cbModelParam._m0[11u].y, _2128 * cbModelParam._m0[11u].x))), _1545);
            frontier_phi_24_46_ladder = _2258.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2258.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2258.x * cbModelParam._m0[1u].y;
        }
        _1627 = frontier_phi_24_46_ladder_2;
        _1629 = frontier_phi_24_46_ladder_1;
        _1631 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_701, _702, _703), _1545);
        _1627 = _1615.x * cbModelParam._m0[1u].y;
        _1629 = _1615.y * cbModelParam._m0[1u].y;
        _1631 = _1615.z * cbModelParam._m0[1u].y;
    }
    float _1635 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _607);
    float _1636 = isnan(_1635) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1635 : min(cbModelParam._m0[25u].w, _1635));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1689 = fma(_765, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757)) + cbModelParam._m0[21u].w;
        float _1693 = fma(_765, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757)) + cbModelParam._m0[22u].w;
        float _1697 = fma(_765, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757)) + cbModelParam._m0[23u].w;
        float _1700 = fma(_703, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701));
        float _1703 = fma(_703, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701));
        float _1706 = fma(_703, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701));
        float _1869;
        if (_1700 > 0.0)
        {
            _1869 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1869 = frontier_phi_36_32_ladder;
        }
        float _2148;
        if (_1703 > 0.0)
        {
            _2148 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2148 = frontier_phi_48_43_ladder;
        }
        float _2361;
        if (_1706 > 0.0)
        {
            _2361 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2361 = frontier_phi_57_54_ladder;
        }
        float _2363 = isnan(_2148) ? _1869 : (isnan(_1869) ? _2148 : min(_1869, _2148));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1700) + _1689;
        float _2369 = (_2364 * _1703) + _1693;
        float _2370 = (_2364 * _1706) + _1697;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1636);
            frontier_phi_33_57_ladder = _2586.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2586.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2586.z * cbModelParam._m0[1u].z;
        }
        _1725 = frontier_phi_33_57_ladder_1;
        _1727 = frontier_phi_33_57_ladder;
        _1729 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_701, _702, _703), _1636);
        _1725 = _1709.x * cbModelParam._m0[1u].z;
        _1727 = _1709.y * cbModelParam._m0[1u].z;
        _1729 = _1709.z * cbModelParam._m0[1u].z;
    }
    float _1742 = (((_728 * _678) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1725 - _1627)) + _1627);
    float _1744 = (((_728 * _680) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1727 - _1629)) + _1629);
    float _1746 = (((_728 * _681) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1729 - _1631)) + _1631);
    float _1749 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, _1742 * cbSceneParam._m0[91u].x));
    vec4 _1763 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_563, _564));
    float _1765 = _1763.w;
    float _1777 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1765);
    float _1778 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1765);
    float _1779 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1765);
    uvec4 _1783 = floatBitsToUint(cbInstanceData._m0[_620 + 5u]);
    uint _1785 = _1783.x * 14u;
    uint _1786 = _1785 + 13u;
    float _1793 = _693 + (-1.0);
    float _1798 = (cbLight._m0[_1786].x * _1793) + 1.0;
    float _1799 = (cbLight._m0[_1786].y * _1793) + 1.0;
    float _1800 = (cbLight._m0[_1786].z * _1793) + 1.0;
    float _1801 = (cbLight._m0[_1786].w * _1793) + 1.0;
    uint _1802 = _1785 + 5u;
    float _1808 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1812 = _1785 + 4u;
    float _1822 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1826 = _1785 | 1u;
    float _1837 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_458, _459, _460));
    float _1840 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_458, _459, _460));
    float _4051 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _4062 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1845 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _1847 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1854 = ((cbLight._m0[_1802].x * _1808) * _1847) + (((cbLight._m0[_1812].x * _1777) * _1822) * _1845);
    float _1855 = ((_1808 * cbLight._m0[_1802].y) * _1847) + (((cbLight._m0[_1812].y * _1778) * _1822) * _1845);
    float _1856 = ((_1808 * cbLight._m0[_1802].z) * _1847) + (((cbLight._m0[_1812].z * _1779) * _1822) * _1845);
    uvec4 _1861 = floatBitsToUint(cbLight._m0[_1785 + 12u]);
    bool _1863 = _1861.x == 0u;
    float _1874;
    float _1876;
    float _1878;
    if (_1863)
    {
        _1874 = _1854;
        _1876 = _1855;
        _1878 = _1856;
    }
    else
    {
        uint _1882 = _1785 + 6u;
        float _1898 = (dot(vec3(cbLight._m0[_1785 + 2u].xyz), vec3(_458, _459, _460)) * 0.5) + 0.5;
        float _1899 = _1898 * _1898;
        float _4073 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1901 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1874 = (((cbLight._m0[_1882].x * 0.3183098733425140380859375) * _1900) * _1901) + _1854;
        _1876 = (((cbLight._m0[_1882].y * 0.3183098733425140380859375) * _1900) * _1901) + _1855;
        _1878 = (((cbLight._m0[_1882].z * 0.3183098733425140380859375) * _1900) * _1901) + _1856;
    }
    bool _1881 = _1861.y == 0u;
    float _1919;
    float _1921;
    float _1923;
    if (_1881)
    {
        _1919 = _1874;
        _1921 = _1876;
        _1923 = _1878;
    }
    else
    {
        uint _2092 = _1785 + 7u;
        float _2108 = (dot(vec3(cbLight._m0[_1785 + 3u].xyz), vec3(_458, _459, _460)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _4089 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2111 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1919 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _1874;
        _1921 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _1876;
        _1923 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _1878;
    }
    uint _1926 = _1785 + 8u;
    float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _607) * 0.949999988079071044921875);
    float _1940 = _1939 * _1939;
    float _1941 = cbLight._m0[_1785].x + _539;
    float _1942 = cbLight._m0[_1785].y + _540;
    float _1943 = cbLight._m0[_1785].z + _541;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1948 = _1947 * _1941;
    float _1949 = _1947 * _1942;
    float _1950 = _1947 * _1943;
    float _1951 = dot(vec3(_458, _459, _460), vec3(cbLight._m0[_1785].xyz));
    float _4105 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _1955 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1956 = dot(vec3(_458, _459, _460), vec3(_1948, _1949, _1950));
    float _4127 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _1960 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1948, _1949, _1950));
    float _4138 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1964 = _1940 * _1940;
    float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
    float _1976 = exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0);
    float _1977 = 0.959999978542327880859375 - _675;
    float _1979 = 0.959999978542327880859375 - _676;
    float _1980 = 0.959999978542327880859375 - _677;
    float _1987 = 1.0 - _1940;
    float _1998 = (0.5 / (((_1955 * ((_1954 * _1987) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1955 * _1987) + _1940) * _1954))) * _1954;
    float _4149 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
    uint _2014 = _1785 + 9u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _607) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1826].x + _539;
    float _2028 = cbLight._m0[_1826].y + _540;
    float _2029 = cbLight._m0[_1826].z + _541;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_458, _459, _460), vec3(cbLight._m0[_1826].xyz));
    float _4160 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2041 = dot(vec3(_458, _459, _460), vec3(_2034, _2035, _2036));
    float _4171 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_2034, _2035, _2036));
    float _4182 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2026 * _2026;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * 5.0);
    float _2067 = 1.0 - _2026;
    float _2077 = (0.5 / (((_1955 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1955 * _2067) + _2026) * _2040))) * _2040;
    float _4193 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    float _2089 = (((((_2060 * _1977) + _678) * cbLight._m0[_2014].x) * _2079) * _1808) + ((((cbLight._m0[_1926].x * _1777) * ((_1976 * _1977) + _678)) * _2000) * _1822);
    float _2090 = (((((_2060 * _1979) + _680) * cbLight._m0[_2014].y) * _2079) * _1808) + ((((cbLight._m0[_1926].y * _1778) * ((_1976 * _1979) + _680)) * _2000) * _1822);
    float _2091 = (((((_2060 * _1980) + _681) * cbLight._m0[_2014].z) * _2079) * _1808) + ((((cbLight._m0[_1926].z * _1779) * ((_1976 * _1980) + _681)) * _2000) * _1822);
    float _2153;
    float _2155;
    float _2157;
    if (_1863)
    {
        _2153 = _2089;
        _2155 = _2090;
        _2157 = _2091;
    }
    else
    {
        uint _2159 = _1785 + 2u;
        uint _2163 = _1785 + 10u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _607) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _539;
        float _2180 = cbLight._m0[_2159].y + _540;
        float _2181 = cbLight._m0[_2159].z + _541;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_458, _459, _460), vec3(cbLight._m0[_2159].xyz));
        float _4204 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2193 = dot(vec3(_458, _459, _460), vec3(_2186, _2187, _2188));
        float _4215 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4226 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0);
        float _2219 = 1.0 - _2178;
        float _2229 = (0.5 / (((_1955 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1955 * _2219) + _2178) * _2192))) * _2192;
        float _4237 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2232 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2153 = (((((_2212 * _1977) + _678) * cbLight._m0[_2163].x) * _2231) * _2232) + _2089;
        _2155 = (((((_2212 * _1979) + _680) * cbLight._m0[_2163].y) * _2231) * _2232) + _2090;
        _2157 = (((((_2212 * _1980) + _681) * cbLight._m0[_2163].z) * _2231) * _2232) + _2091;
    }
    float _2267;
    float _2269;
    float _2271;
    if (_1881)
    {
        _2267 = _2153;
        _2269 = _2155;
        _2271 = _2157;
    }
    else
    {
        uint _2278 = _1785 + 3u;
        uint _2282 = _1785 + 11u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _607) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _539;
        float _2299 = cbLight._m0[_2278].y + _540;
        float _2300 = cbLight._m0[_2278].z + _541;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_458, _459, _460), vec3(cbLight._m0[_2278].xyz));
        float _4253 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2312 = dot(vec3(_458, _459, _460), vec3(_2305, _2306, _2307));
        float _4264 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4275 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
        float _2338 = 1.0 - _2297;
        float _2348 = (0.5 / (((_1955 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_1955 * _2338) + _2297) * _2311))) * _2311;
        float _4286 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2267 = (((((_2331 * _1977) + _678) * cbLight._m0[_2282].x) * _2350) * _2351) + _2153;
        _2269 = (((((_2331 * _1979) + _680) * cbLight._m0[_2282].y) * _2350) * _2351) + _2155;
        _2271 = (((((_2331 * _1980) + _681) * cbLight._m0[_2282].z) * _2350) * _2351) + _2157;
    }
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_1783.y == 0u)
    {
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2426;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2426;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2426;
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.x;
        uint _2453 = uint((float(_2441.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2442))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2442)));
        float _2463 = (log2(_2429 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2464 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        uint _2467 = uint(isnan(14.0) ? _2464 : (isnan(_2464) ? 14.0 : min(_2464, 14.0)));
        uvec4 _2472 = texelFetch(g_lightClusterGridBuffer, int(((_2467 << 2u) + (_2453 << 6u)) >> 2u));
        uint _2473 = _2472.x;
        uint _2474 = _2441.z;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        if (((((1u << ((_2474 >> 4u) & 15u)) + 4294967295u) & _2473) == 0u) || ((_2474 & 240u) == 0u))
        {
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
        }
        else
        {
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2602;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2759)
                {
                    frontier_phi_74_pred = _2748;
                    frontier_phi_74_pred_1 = _2747;
                    frontier_phi_74_pred_2 = _2746;
                    frontier_phi_74_pred_3 = _2745;
                    frontier_phi_74_pred_4 = _2744;
                    frontier_phi_74_pred_5 = _2743;
                }
                else
                {
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    uint _2894;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2758;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    for (;;)
                    {
                        uint _2898 = uint(findLSB(_2894)) + (_2749 << 5u);
                        uint _2895 = (_2894 + 4294967295u) & _2894;
                        uint _2900 = _2898 * 48u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2920 = (_2898 * 48u) + 4u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2939 = (_2898 * 48u) + 8u;
                        vec3 _2950 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x));
                        float _2954 = _2914.x - _2427;
                        float _2955 = _2914.y - _2428;
                        float _2956 = _2914.z - _2429;
                        float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                        float _2960 = inversesqrt(_2957);
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2964 = dot(vec3(_588, _591, _594), vec3(_2961, _2962, _2963));
                        float _2969 = 1.0 - (_2957 * _2914.w);
                        float _4312 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _2971 = sqrt(_2957) * _2933.w;
                        float _2974 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2964) + _2975;
                        float _2981 = _2971 * _2971;
                        float _2985 = ((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2970) / ((_2981 * 0.699999988079071044921875) + 1.0);
                        float _2989 = (-0.0) - _2427;
                        float _2990 = (-0.0) - _2428;
                        float _2991 = (-0.0) - _2429;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _3006 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                        float _3007 = 1.0 - _709;
                        float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                        float _3015 = _3014 * _3014;
                        float _3016 = _3015 * _3015;
                        float _3017 = _2996 + _2961;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3027 = dot(vec3(_588, _591, _594), vec3(_2996, _2997, _2998));
                        float _4328 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3031 = dot(vec3(_588, _591, _594), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                        float _4339 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                        float _3039 = _2974 * _3015;
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _2964) + _3040;
                        float _4350 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3045 = 1.0 - _3015;
                        float _3055 = (0.5 / (((_3044 * ((_3030 * _3045) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3015) * _3030))) * _3044;
                        float _4361 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3066 = (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) / ((_3038 * _3038) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125))) * _2970;
                        _2818 = (_2985 * _2933.x) + _2891;
                        _2819 = (_2985 * _2933.y) + _2892;
                        _2820 = (_2985 * _2933.z) + _2893;
                        _2815 = (_3066 * _2950.x) + _2888;
                        _2816 = (_3066 * _2950.y) + _2889;
                        _2817 = (_3066 * _2950.z) + _2890;
                        if (_2895 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2895;
                        }
                    }
                    frontier_phi_74_pred = _2820;
                    frontier_phi_74_pred_1 = _2819;
                    frontier_phi_74_pred_2 = _2818;
                    frontier_phi_74_pred_3 = _2817;
                    frontier_phi_74_pred_4 = _2816;
                    frontier_phi_74_pred_5 = _2815;
                }
                _2602 = frontier_phi_74_pred;
                _2600 = frontier_phi_74_pred_1;
                _2598 = frontier_phi_74_pred_2;
                _2596 = frontier_phi_74_pred_3;
                _2594 = frontier_phi_74_pred_4;
                _2592 = frontier_phi_74_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2592;
                    _2744 = _2594;
                    _2745 = _2596;
                    _2746 = _2598;
                    _2747 = _2600;
                    _2748 = _2602;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
        }
        uvec4 _2605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2606 = _2605.z;
        uint _2608 = (_2606 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2608) & _2473) == 0u)
        {
            _2711 = _2591;
            _2713 = _2593;
            _2715 = _2595;
            _2717 = _2597;
            _2719 = _2599;
            _2721 = _2601;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
            float _2737 = _2736 * _2427;
            float _2738 = _2736 * _2428;
            float _2739 = _2736 * _2429;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2608 < ((_2606 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2871 = _2591;
                float _2872 = _2593;
                float _2873 = _2595;
                float _2874 = _2597;
                float _2875 = _2599;
                float _2876 = _2601;
                uint _2877 = _2608;
                uint _2886;
                bool _2887;
                for (;;)
                {
                    _2886 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                    _2887 = _2886 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2887)
                    {
                        frontier_phi_85_pred = _2875;
                        frontier_phi_85_pred_1 = _2874;
                        frontier_phi_85_pred_2 = _2873;
                        frontier_phi_85_pred_3 = _2872;
                        frontier_phi_85_pred_4 = _2871;
                        frontier_phi_85_pred_5 = _2876;
                    }
                    else
                    {
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        uint _3099 = _2886;
                        uint _3100;
                        vec4 _3125;
                        float _3126;
                        vec4 _3141;
                        vec3 _3153;
                        vec4 _3169;
                        vec4 _3184;
                        float _3230;
                        bool _3231;
                        for (;;)
                        {
                            uint _3110 = ((_2877 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3099));
                            _3100 = (_3099 + 4294967295u) & _3099;
                            uint _3112 = _3110 * 40u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.w;
                            uint _3128 = (_3110 * 40u) + 4u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3110 * 40u) + 8u;
                            _3153 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x));
                            uint _3156 = (_3110 * 40u) + 16u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3110 * 40u) + 20u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3186 = (_3110 * 40u) + 24u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3205 = (_3110 * 40u) + 28u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3230 = fma(_2429, _3218.z, fma(_2428, _3218.y, _3218.x * _2427)) + _3218.w;
                            _3231 = !((fma(_2429, _3199.z, fma(_2428, _3199.y, _3199.x * _2427)) + _3199.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3231)
                            {
                                float _3258 = _3125.x - _2427;
                                float _3259 = _3125.y - _2428;
                                float _3260 = _3125.z - _2429;
                                float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                                float _3264 = inversesqrt(_3261);
                                float _3265 = _3264 * _3258;
                                float _3266 = _3264 * _3259;
                                float _3267 = _3264 * _3260;
                                float _3271 = 1.0 - (_3261 / (_3126 * _3126));
                                float _4372 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3276 = sqrt(_3261) * _3141.w;
                                float _3278 = 1.39999997615814208984375 / (_3276 + 1.39999997615814208984375);
                                float _3279 = _3278 * _3278;
                                float _3282 = ((1.0 - _3279) * dot(vec3(_3265, _3266, _3267), vec3(_588, _591, _594))) + _3279;
                                float _3285 = _3276 * _3276;
                                float _3289 = (fma(_2429, _3169.z, fma(_2428, _3169.y, _3169.x * _2427)) + _3169.w) / _3230;
                                float _3290 = (fma(_2429, _3184.z, fma(_2428, _3184.y, _3184.x * _2427)) + _3184.w) / _3230;
                                float _3294 = 1.0 - dot(vec2(_3289, _3290), vec2(_3289, _3290));
                                float _4388 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3296 = _3295 * (((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3272) / ((_3285 * 0.699999988079071044921875) + 1.0));
                                float _3308 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                                float _3309 = 1.0 - _709;
                                float _3316 = sqrt(1.0 - ((1.0 - (_3309 * _3309)) * (1.0 - (_3308 * _3308))));
                                float _3317 = _3316 * _3316;
                                float _3318 = _3317 * _3317;
                                float _3319 = _3265 - _2737;
                                float _3320 = _3266 - _2738;
                                float _3321 = _3267 - _2739;
                                float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                                float _3329 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4399 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3332 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3333 = dot(vec3(_588, _591, _594), vec3(_3325 * _3319, _3325 * _3320, _3325 * _3321));
                                float _4410 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3340 = ((_3336 * _3336) * (_3318 + (-1.0))) + 1.0;
                                float _3341 = _3278 * _3317;
                                float _3342 = _3341 * _3341;
                                float _3348 = ((1.0 - _3342) * dot(vec3(_588, _591, _594), vec3(_3265, _3266, _3267))) + _3342;
                                float _4421 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3350 = 1.0 - _3317;
                                float _3360 = (0.5 / (((_3349 * ((_3332 * _3350) + _3317)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3317) * _3332))) * _3349;
                                float _4432 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3370 = (_3295 * _3272) * (((_3318 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3340 * _3340) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3296 * _3141.y;
                                frontier_phi_91_pred_1 = _3296 * _3141.x;
                                frontier_phi_91_pred_2 = _3370 * _3153.z;
                                frontier_phi_91_pred_3 = _3370 * _3153.y;
                                frontier_phi_91_pred_4 = _3370 * _3153.x;
                                frontier_phi_91_pred_5 = _3296 * _3141.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3378 = frontier_phi_91_pred;
                            _3377 = frontier_phi_91_pred_1;
                            _3376 = frontier_phi_91_pred_2;
                            _3375 = frontier_phi_91_pred_3;
                            _3374 = frontier_phi_91_pred_4;
                            _3379 = frontier_phi_91_pred_5;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            _3085 = _3379 + _3098;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            _3082 = _3376 + _3095;
                            if (_3100 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3100;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3084;
                        frontier_phi_85_pred_1 = _3083;
                        frontier_phi_85_pred_2 = _3082;
                        frontier_phi_85_pred_3 = _3081;
                        frontier_phi_85_pred_4 = _3080;
                        frontier_phi_85_pred_5 = _3085;
                    }
                    _2720 = frontier_phi_85_pred;
                    _2718 = frontier_phi_85_pred_1;
                    _2716 = frontier_phi_85_pred_2;
                    _2714 = frontier_phi_85_pred_3;
                    _2712 = frontier_phi_85_pred_4;
                    _2722 = frontier_phi_85_pred_5;
                    uint _2878 = _2877 + 1u;
                    if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2871 = _2712;
                        _2872 = _2714;
                        _2873 = _2716;
                        _2874 = _2718;
                        _2875 = _2720;
                        _2876 = _2722;
                        _2877 = _2878;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2722;
                frontier_phi_66_67_ladder_1 = _2718;
                frontier_phi_66_67_ladder_2 = _2720;
                frontier_phi_66_67_ladder_3 = _2714;
                frontier_phi_66_67_ladder_4 = _2712;
                frontier_phi_66_67_ladder_5 = _2716;
            }
            else
            {
                frontier_phi_66_67_ladder = _2601;
                frontier_phi_66_67_ladder_1 = _2597;
                frontier_phi_66_67_ladder_2 = _2599;
                frontier_phi_66_67_ladder_3 = _2593;
                frontier_phi_66_67_ladder_4 = _2591;
                frontier_phi_66_67_ladder_5 = _2595;
            }
            _2711 = frontier_phi_66_67_ladder_4;
            _2713 = frontier_phi_66_67_ladder_3;
            _2715 = frontier_phi_66_67_ladder_5;
            _2717 = frontier_phi_66_67_ladder_1;
            _2719 = frontier_phi_66_67_ladder_2;
            _2721 = frontier_phi_66_67_ladder;
        }
        float _2726 = isnan(1.0) ? _693 : (isnan(_693) ? 1.0 : min(_693, 1.0));
        _2485 = (_2726 * _2717) + _1919;
        _2487 = (_2726 * _2719) + _1921;
        _2489 = (_2726 * _2721) + _1923;
        _2491 = ((_2711 * _678) * _2726) + _2267;
        _2493 = ((_2713 * _680) * _2726) + _2269;
        _2495 = ((_2715 * _681) * _2726) + _2271;
    }
    else
    {
        _2485 = _1919;
        _2487 = _1921;
        _2489 = _1923;
        _2491 = _2267;
        _2493 = _2269;
        _2495 = _2271;
    }
    vec4 _2501 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4448 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4459 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4470 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2525 = (((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2485 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _693))) + ((_2491 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + (_2501.x * cbMtdParam._m0[3u].x);
    float _2527 = ((_2501.y * cbMtdParam._m0[3u].x) + ((_2493 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2487 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _693)));
    float _2529 = ((_2501.z * cbMtdParam._m0[3u].x) + ((_2495 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2489 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _693)));
    float _2530 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2531 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2532 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    uint _2533 = _620 + 6u;
    float _2541 = _563 / cbSceneParam._m0[86u].x;
    float _2542 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2556 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2541, _2542, (log2((isnan(cbSceneParam._m0[77u].w) ? _481 : (isnan(_481) ? cbSceneParam._m0[77u].w : min(_481, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2558 = _2556.x;
    float _2559 = _2556.y;
    float _2560 = _2556.z;
    float _2561 = _2556.w;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_481 > cbSceneParam._m0[78u].w)
    {
        float _2616 = isnan(_481) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _481 : min(cbSceneParam._m0[80u].w, _481));
        float _2617 = _2616 / _481;
        float _2628 = _2617 * _532;
        float _2629 = _533 * _2617;
        float _2630 = (-0.0) - _2629;
        float _2631 = _2617 * _534;
        float _2633 = (cbSceneParam._m0[77u].w * _2630) / _2616;
        float _2634 = _2633 + cbSceneParam._m0[79u].w;
        float _2635 = cbSceneParam._m0[79u].w - _2629;
        float _2641 = sqrt(((_2628 * _2628) + (_2629 * _2629)) + (_2631 * _2631));
        float _2644 = (1.0 - (cbSceneParam._m0[77u].w / _2616)) * _2641;
        float _2649 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2651 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2828;
        if (abs((_2630 - _2633) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2828 = ((((_2634 > 0.0) ? exp2(_2649 * _2634) : (2.0 - exp2(_2651 * _2634))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2644;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2635) ? _2634 : (isnan(_2634) ? _2635 : max(_2634, _2635));
            float _2774 = isnan(_2635) ? _2634 : (isnan(_2634) ? _2635 : min(_2634, _2635));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2828 = ((abs(_2641 / _2630) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2649 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2649 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2651 * _2783) - exp2(_2651 * _2784)) * _2772))) + (_2644 * cbSceneParam._m0[80u].z);
        }
        vec4 _2830 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2541, _2542, 1.0), 0.0);
        float _2839 = exp2((_2828 * (-1.44269502162933349609375)) * (1.0 - _2830.w));
        float _2840 = log2(_2839);
        float _2856 = log2(_2561);
        _2653 = (exp2(_2856 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].x)) * _2830.x) / cbSceneParam._m0[78u].x)) + _2558;
        _2655 = (exp2(_2856 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].y)) * _2830.y) / cbSceneParam._m0[78u].y)) + _2559;
        _2657 = (exp2(_2856 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].z)) * _2830.z) / cbSceneParam._m0[78u].z)) + _2560;
        _2659 = _2839 * _2561;
    }
    else
    {
        _2653 = _2558;
        _2655 = _2559;
        _2657 = _2560;
        _2659 = _2561;
    }
    bool _2866;
    vec4 _2669;
    vec4 _2691;
    float _2693;
    float _2697;
    float _2698;
    float _2699;
    float _2700;
    bool _2710;
    for (;;)
    {
        _2669 = cbMatDynParam._m0[0u];
        float _2671 = roundEven(_2669.y);
        bool _2672 = _2671 == 3.0;
        float _2673 = log2(_2659);
        float _2680 = exp2(_2673 * cbSceneParam._m0[78u].x) * _2530;
        float _2681 = exp2(_2673 * cbSceneParam._m0[78u].y) * _2531;
        float _2682 = exp2(_2673 * cbSceneParam._m0[78u].z) * _2532;
        float _2689 = _548 + (-0.5);
        _2691 = cbMtdParam._m0[1u];
        _2693 = _2691.y * _2689;
        float _2696 = (_2671 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2697 = _2696 * (_2672 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2653)));
        _2698 = _2696 * (_2672 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2655)));
        _2699 = _2696 * (_2672 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2657)));
        _2700 = _2689 * 0.999000012874603271484375;
        _2710 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2710)
        {
            if ((cbInstanceData._m0[_620 + 7u].x + _2700) < 0.5)
            {
                _2866 = true;
                break;
            }
        }
        uint _2807 = _622 + uint(_2669.w);
        if ((cbInstanceData._m0[_2807].w < 1.0) && ((cbInstanceData._m0[_2807].w + _2700) < 0.5))
        {
            _2866 = true;
            break;
        }
        if ((_2693 + 1.0) < _2691.x)
        {
            _2866 = true;
            break;
        }
        _2866 = false;
        break;
    }
    float _3071;
    if (_2866)
    {
        discard_state = true;
        _3071 = 0.0;
    }
    else
    {
        _3071 = cbInstanceData._m0[_2533].w;
    }
    SV_Target.x = _2697;
    SV_Target.y = _2698;
    SV_Target.z = _2699;
    SV_Target.w = _3071;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2533].w;
    discard_exit();
}


