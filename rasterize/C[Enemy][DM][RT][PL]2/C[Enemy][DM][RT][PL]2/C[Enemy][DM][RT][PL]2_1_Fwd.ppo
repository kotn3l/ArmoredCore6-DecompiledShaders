#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1156;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _260 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _265 = log2(0.0);
    bool _268 = exp2(_265 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[15u].x;
    _188[0u] = cbMtdParam._m0[15u].y;
    _189[0u] = cbMtdParam._m0[15u].z;
    _187[1u] = cbMtdParam._m0[16u].x;
    _188[1u] = cbMtdParam._m0[16u].y;
    _189[1u] = cbMtdParam._m0[16u].z;
    _187[2u] = cbMtdParam._m0[17u].x;
    _188[2u] = cbMtdParam._m0[17u].y;
    _189[2u] = cbMtdParam._m0[17u].z;
    _187[3u] = cbMtdParam._m0[12u].x;
    _188[3u] = cbMtdParam._m0[12u].y;
    _189[3u] = cbMtdParam._m0[12u].z;
    _187[4u] = cbMtdParam._m0[13u].x;
    _188[4u] = cbMtdParam._m0[13u].y;
    _189[4u] = cbMtdParam._m0[13u].z;
    _187[5u] = cbMtdParam._m0[14u].x;
    _188[5u] = cbMtdParam._m0[14u].y;
    _189[5u] = cbMtdParam._m0[14u].z;
    vec4 _336 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _340 = _336.y;
    float _343 = (_336.x + (-0.02500000037252902984619140625)) * 8.0;
    float _345 = roundEven(_343);
    float _346 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    uint _349 = uint(int(isnan(5.0) ? _346 : (isnan(_346) ? 5.0 : min(_346, 5.0))));
    float _366;
    if (_268)
    {
        _366 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _366 = cbMtdParam._m0[20u].z;
    }
    float _372;
    float _374;
    if (_268)
    {
        _372 = cbMtdParam._m0[28u].z;
        _374 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _372 = cbMtdParam._m0[24u].x;
        _374 = cbMtdParam._m0[24u].y;
    }
    float _376 = _372 * TEXCOORD.x;
    float _377 = _374 * TEXCOORD.y;
    float _389 = floor(_366);
    vec4 _392 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _376) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _377) + cbTextureTilingScale._m0[8u].w, _389));
    vec4 _414 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _260) + cbTextureTilingScale._m0[0u].w));
    float _422 = ((((((_187[_349] - cbMtdParam._m0[19u].x) * _340) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _392.x) * cbMtdParam._m0[9u].x) * _414.x;
    float _426 = ((((((_188[_349] - cbMtdParam._m0[19u].y) * _340) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _392.y) * cbMtdParam._m0[9u].y) * _414.y;
    float _430 = ((((((_189[_349] - cbMtdParam._m0[19u].z) * _340) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _392.z) * cbMtdParam._m0[9u].z) * _414.z;
    vec4 _442 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _260) + cbTextureTilingScale._m0[1u].w));
    float _446 = _442.z;
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].x;
    _183[0u] = cbMtdParam._m0[25u].y;
    _182[1u] = cbMtdParam._m0[26u].x;
    _183[1u] = cbMtdParam._m0[26u].y;
    _182[2u] = cbMtdParam._m0[26u].z;
    _183[2u] = cbMtdParam._m0[26u].w;
    _182[3u] = cbMtdParam._m0[27u].x;
    _183[3u] = cbMtdParam._m0[27u].y;
    _182[4u] = cbMtdParam._m0[25u].z;
    _183[4u] = cbMtdParam._m0[25u].w;
    float _491 = roundEven(5.0 - _343);
    float _492 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = isnan(4.0) ? _492 : (isnan(_492) ? 4.0 : min(_492, 4.0));
    float _495 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    uint _497 = uint(int(isnan(4.0) ? _495 : (isnan(_495) ? 4.0 : min(_495, 4.0))));
    float _503 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _376) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _377) + cbTextureTilingScale._m0[10u].w, _389)).x + _442.w) + _183[_497];
    vec4 _521 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _376) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _377) + cbTextureTilingScale._m0[9u].w, _389));
    float _528 = (_521.x * 2.0) + (-1.0);
    float _529 = (_521.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3535 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    float _545 = (cbMtdParam._m0[21u].x * (((_446 * 2.0) * (_521.z + _182[_497])) - _446)) + _446;
    float _549 = (cbMtdParam._m0[21u].y * ((_442.x * 2.0) + (-1.0))) + _528;
    float _550 = (cbMtdParam._m0[21u].y * ((_442.y * 2.0) + (-1.0))) + _529;
    float _553 = fma(_536, _239, fma(_550, _231 * TANGENT.x, (_217 * _209) * _549));
    float _556 = fma(_536, _240, fma(_550, _231 * TANGENT.y, (_217 * _210) * _549));
    float _559 = fma(_536, _241, fma(_550, _231 * TANGENT.z, (_217 * _211) * _549));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3546 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _567 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3568 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3579 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3590 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _571 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _638 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _628);
    float _639 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _628);
    float _640 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _628);
    float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
    float _645 = _638 * _644;
    float _646 = _639 * _644;
    float _647 = _640 * _644;
    float _653 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _654 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _656 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _658 = _656.w;
    float _677 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _680 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _683 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    vec4 _685 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _696 = (((_685.y - _567) + (_685.w * _567)) * cbMtdParam._m0[3u].x) + _567;
    uint _709 = uint(roundEven(NORMAL.w)) * 13u;
    uint _711 = (_709 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _717 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_711].x;
    float _718 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_711].y;
    float _719 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * cbInstanceData._m0[_711].z;
    float _3601 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    vec4 _723 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _728 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _739 = (((_728.x - _571) + (_728.w * _571)) * cbMtdParam._m0[3u].x) + _571;
    float _752 = (cbMtdParam._m0[3u].x * (((_720 * _658) - _720) + _723.x)) + _720;
    float _753 = (cbMtdParam._m0[3u].x * (((_721 * _658) - _721) + _723.y)) + _721;
    float _754 = (cbMtdParam._m0[3u].x * (((_722 * _658) - _722) + _723.z)) + _722;
    float _755 = 1.0 - _739;
    float _756 = _755 * _752;
    float _757 = _755 * _753;
    float _758 = _755 * _754;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _739;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _739;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _739;
    float _766 = _763 + 0.039999999105930328369140625;
    float _768 = _764 + 0.039999999105930328369140625;
    float _769 = _765 + 0.039999999105930328369140625;
    vec4 _778 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _653, cbSceneParam._m0[86u].y * _654));
    float _781 = _778.x * TEXCOORD_4;
    float _782 = dot(vec3(_564, _565, _566), vec3(_645, _646, _647));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _564) - _645;
    float _790 = (_785 * _565) - _646;
    float _791 = (_785 * _566) - _647;
    float _795 = abs(dot(vec3(_645, _646, _647), vec3(_564, _565, _566)));
    float _3634 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_696);
    float _808 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _814 = (1.0 - _808) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _815 = _808 * _797;
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1155;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_851, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843));
        float _884 = fma(_851, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843));
        float _888 = fma(_851, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843));
        float _913 = _843 + _564;
        float _914 = _847 + _565;
        float _915 = _851 + _566;
        float _925 = fma(_915, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913)) - _880;
        float _926 = fma(_915, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913)) - _884;
        float _927 = fma(_915, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913)) - _888;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _983 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_949.x + (-0.5));
        float _985 = _983 * (_949.y + (-0.5));
        float _986 = _983 * (_949.z + (-0.5));
        float _993 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_956.x + (-0.5));
        float _995 = _993 * (_956.y + (-0.5));
        float _996 = _993 * (_956.z + (-0.5));
        float _1003 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_963.x + (-0.5));
        float _1005 = _1003 * (_963.y + (-0.5));
        float _1006 = _1003 * (_963.z + (-0.5));
        float _1013 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_970.x + (-0.5));
        float _1015 = _1013 * (_970.y + (-0.5));
        float _1016 = _1013 * (_970.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1037 = (dot(vec3(_564, _565, _566), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1047 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3682 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1049 + 1.0))) + _1054) * _1017;
        float _1064 = _985 * 0.5;
        float _1065 = _995 * 0.5;
        float _1066 = _1005 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_564, _565, _566), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3715 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1091 + 1.0))) + _1096) * _1018;
        float _1106 = _986 * 0.5;
        float _1107 = _996 * 0.5;
        float _1108 = _1006 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_564, _565, _566), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3748 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1133 + 1.0))) + _1138) * _1019;
        _1155 = _986;
        _1157 = _985;
        _1158 = _984;
        _1159 = _996;
        _1160 = _995;
        _1161 = _994;
        _1162 = _1006;
        _1163 = _1005;
        _1164 = _1004;
        _1165 = _1019;
        _1166 = _1018;
        _1167 = _1017;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _1156;
        _1157 = _1156;
        _1158 = _1156;
        _1159 = _1156;
        _1160 = _1156;
        _1161 = _1156;
        _1162 = _1156;
        _1163 = _1156;
        _1164 = _1156;
        _1165 = _1156;
        _1166 = _1156;
        _1167 = _1156;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1196 = fma(_851, cbModelParam._m0[30u].z, fma(_847, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843));
        float _1200 = fma(_851, cbModelParam._m0[31u].z, fma(_847, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843));
        float _1204 = fma(_851, cbModelParam._m0[32u].z, fma(_847, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843));
        float _1227 = _843 + _564;
        float _1228 = _847 + _565;
        float _1229 = _851 + _566;
        float _1239 = fma(_1229, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227)) - _1196;
        float _1240 = fma(_1229, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227)) - _1200;
        float _1241 = fma(_1229, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227)) - _1204;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1196 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1200 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[35u].z) + ((((((_1204 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1295 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1262.x + (-0.5));
        float _1297 = _1295 * (_1262.y + (-0.5));
        float _1298 = _1295 * (_1262.z + (-0.5));
        float _1305 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1269.x + (-0.5));
        float _1307 = _1305 * (_1269.y + (-0.5));
        float _1308 = _1305 * (_1269.z + (-0.5));
        float _1315 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1276.x + (-0.5));
        float _1317 = _1315 * (_1276.y + (-0.5));
        float _1318 = _1315 * (_1276.z + (-0.5));
        float _1325 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1283.x + (-0.5));
        float _1327 = _1325 * (_1283.y + (-0.5));
        float _1328 = _1325 * (_1283.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_564, _565, _566), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3811 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1359 + 1.0))) + _1364) * _1329;
        float _1374 = _1297 * 0.5;
        float _1375 = _1307 * 0.5;
        float _1376 = _1317 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_564, _565, _566), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3844 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1401 + 1.0))) + _1406) * _1330;
        float _1416 = _1298 * 0.5;
        float _1417 = _1308 * 0.5;
        float _1418 = _1318 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_564, _565, _566), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3877 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1443 + 1.0))) + _1448) * _1331;
        _1465 = _1298;
        _1466 = _1297;
        _1467 = _1296;
        _1468 = _1308;
        _1469 = _1307;
        _1470 = _1306;
        _1471 = _1318;
        _1472 = _1317;
        _1473 = _1316;
        _1474 = _1331;
        _1475 = _1330;
        _1476 = _1329;
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1156;
        _1466 = _1156;
        _1467 = _1156;
        _1468 = _1156;
        _1469 = _1156;
        _1470 = _1156;
        _1471 = _1156;
        _1472 = _1156;
        _1473 = _1156;
        _1474 = _1156;
        _1475 = _1156;
        _1476 = _1156;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1170)) + _1170;
    float _1512 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1489));
    float _1533 = _789 * 0.5;
    float _1534 = _790 * 0.5;
    float _1535 = _791 * 0.5;
    float _1536 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1539 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1542 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1576;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1549 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1155, _1159, _1162, _1165));
        float _1553 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1557 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1564 = dot(vec4(cbModelParam._m0[39u]), vec4(_1533, _1534, _1535, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1587;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1578 = dot(vec4(cbModelParam._m0[40u]), vec4(_1533, _1534, _1535, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1591 = (_1587 * cbModelParam._m0[1u].x) + (_1576 * (1.0 - cbModelParam._m0[1u].x));
    float _1601 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _696);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1601 : min(cbModelParam._m0[25u].z, _1601));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1649 = fma(_851, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843)) + cbModelParam._m0[13u].w;
        float _1653 = fma(_851, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843)) + cbModelParam._m0[14u].w;
        float _1657 = fma(_851, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843)) + cbModelParam._m0[15u].w;
        float _1660 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1663 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1666 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1694;
        if (_1660 > 0.0)
        {
            _1694 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1694 = frontier_phi_20_18_ladder;
        }
        float _1897;
        if (_1663 > 0.0)
        {
            _1897 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1897 = frontier_phi_29_25_ladder;
        }
        float _2151;
        if (_1666 > 0.0)
        {
            _2151 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2151 = frontier_phi_41_36_ladder;
        }
        float _2153 = isnan(_1897) ? _1694 : (isnan(_1694) ? _1897 : min(_1694, _1897));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1660) + _1649;
        float _2159 = (_2154 * _1663) + _1653;
        float _2160 = (_2154 * _1666) + _1657;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1602);
            frontier_phi_19_41_ladder = _2288.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2288.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2288.x * cbModelParam._m0[1u].y;
        }
        _1682 = frontier_phi_19_41_ladder_2;
        _1684 = frontier_phi_19_41_ladder_1;
        _1686 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1602);
        _1682 = _1670.x * cbModelParam._m0[1u].y;
        _1684 = _1670.y * cbModelParam._m0[1u].y;
        _1686 = _1670.z * cbModelParam._m0[1u].y;
    }
    float _1690 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _696);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1690 : min(cbModelParam._m0[25u].w, _1690));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_851, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_851, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_851, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1759 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1762 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1902;
        if (_1756 > 0.0)
        {
            _1902 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1902 = frontier_phi_31_27_ladder;
        }
        float _2178;
        if (_1759 > 0.0)
        {
            _2178 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2178 = frontier_phi_43_38_ladder;
        }
        float _2391;
        if (_1762 > 0.0)
        {
            _2391 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2391 = frontier_phi_52_49_ladder;
        }
        float _2393 = isnan(_2178) ? _1902 : (isnan(_1902) ? _2178 : min(_1902, _2178));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1756) + _1745;
        float _2399 = (_2394 * _1759) + _1749;
        float _2400 = (_2394 * _1762) + _1753;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2400, cbModelParam._m0[17u].z, fma(_2399, cbModelParam._m0[17u].y, _2398 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2400, cbModelParam._m0[18u].z, fma(_2399, cbModelParam._m0[18u].y, _2398 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2400, cbModelParam._m0[19u].z, fma(_2399, cbModelParam._m0[19u].y, _2398 * cbModelParam._m0[19u].x))), _1691);
            frontier_phi_28_52_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_28_52_ladder_2;
        _1783 = frontier_phi_28_52_ladder_1;
        _1785 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1691);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1798 = (((_814 * _766) + _815) * _781) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1800 = (((_814 * _768) + _815) * _781) * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1802 = (((_814 * _769) + _815) * _781) * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_709 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1831 = _781 + (-1.0);
    float _1836 = (cbLight._m0[_1824].x * _1831) + 1.0;
    float _1837 = (cbLight._m0[_1824].y * _1831) + 1.0;
    float _1838 = (cbLight._m0[_1824].z * _1831) + 1.0;
    float _1839 = (cbLight._m0[_1824].w * _1831) + 1.0;
    uint _1840 = _1823 + 5u;
    float _1846 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1850 = _1823 + 4u;
    float _1856 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1860 = _1823 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_564, _565, _566));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_564, _565, _566));
    float _4013 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4024 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1840].x * _1846) * _1881) + ((cbLight._m0[_1850].x * _1856) * _1879);
    float _1889 = ((_1846 * cbLight._m0[_1840].y) * _1881) + ((_1856 * cbLight._m0[_1850].y) * _1879);
    float _1890 = ((_1846 * cbLight._m0[_1840].z) * _1881) + ((_1856 * cbLight._m0[_1850].z) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1823 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1888;
        _1909 = _1889;
        _1911 = _1890;
    }
    else
    {
        uint _1915 = _1823 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1823 + 2u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4035 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1934 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1890;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2122 = _1823 + 7u;
        float _2138 = (dot(vec3(cbLight._m0[_1823 + 3u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4051 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2141 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1952 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _1907;
        _1954 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _1909;
        _1956 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _1911;
    }
    uint _1959 = _1823 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _696) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1823].x + _645;
    float _1975 = cbLight._m0[_1823].y + _646;
    float _1976 = cbLight._m0[_1823].z + _647;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1823].xyz));
    float _4067 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1988 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _1989 = dot(vec3(_564, _565, _566), vec3(_1981, _1982, _1983));
    float _4089 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1981, _1982, _1983));
    float _4100 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2009 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
    float _2010 = 0.959999978542327880859375 - _763;
    float _2012 = 0.959999978542327880859375 - _764;
    float _2013 = 0.959999978542327880859375 - _765;
    float _2020 = 1.0 - _1973;
    float _2031 = (0.5 / (((_1988 * ((_1987 * _2020) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2020) + _1973) * _1987))) * _1987;
    float _4111 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2044 = _1823 + 9u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _696) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1860].x + _645;
    float _2058 = cbLight._m0[_1860].y + _646;
    float _2059 = cbLight._m0[_1860].z + _647;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1860].xyz));
    float _4122 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2071 = dot(vec3(_564, _565, _566), vec3(_2064, _2065, _2066));
    float _4133 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2064, _2065, _2066));
    float _4144 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2056 * _2056;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
    float _2097 = 1.0 - _2056;
    float _2107 = (0.5 / (((_1988 * ((_2070 * _2097) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2097) + _2056) * _2070))) * _2070;
    float _4155 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    float _2119 = (((((_2090 * _2010) + _766) * cbLight._m0[_2044].x) * _2109) * _1846) + (((((_2009 * _2010) + _766) * cbLight._m0[_1959].x) * _2033) * _1856);
    float _2120 = (((((_2090 * _2012) + _768) * cbLight._m0[_2044].y) * _2109) * _1846) + (((((_2009 * _2012) + _768) * cbLight._m0[_1959].y) * _2033) * _1856);
    float _2121 = (((((_2090 * _2013) + _769) * cbLight._m0[_2044].z) * _2109) * _1846) + (((((_2009 * _2013) + _769) * cbLight._m0[_1959].z) * _2033) * _1856);
    float _2183;
    float _2185;
    float _2187;
    if (_1896)
    {
        _2183 = _2119;
        _2185 = _2120;
        _2187 = _2121;
    }
    else
    {
        uint _2189 = _1823 + 2u;
        uint _2193 = _1823 + 10u;
        float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _696) * 0.949999988079071044921875);
        float _2208 = _2207 * _2207;
        float _2209 = cbLight._m0[_2189].x + _645;
        float _2210 = cbLight._m0[_2189].y + _646;
        float _2211 = cbLight._m0[_2189].z + _647;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2216 = _2215 * _2209;
        float _2217 = _2215 * _2210;
        float _2218 = _2215 * _2211;
        float _2219 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2189].xyz));
        float _4166 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2223 = dot(vec3(_564, _565, _566), vec3(_2216, _2217, _2218));
        float _4177 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2227 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2216, _2217, _2218));
        float _4188 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2231 = _2208 * _2208;
        float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
        float _2242 = exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0);
        float _2249 = 1.0 - _2208;
        float _2259 = (0.5 / (((_1988 * ((_2222 * _2249) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2249) + _2208) * _2222))) * _2222;
        float _4199 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
        float _2262 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2183 = (((((_2242 * _2010) + _766) * cbLight._m0[_2193].x) * _2261) * _2262) + _2119;
        _2185 = (((((_2242 * _2012) + _768) * cbLight._m0[_2193].y) * _2261) * _2262) + _2120;
        _2187 = (((((_2242 * _2013) + _769) * cbLight._m0[_2193].z) * _2261) * _2262) + _2121;
    }
    float _2297;
    float _2299;
    float _2301;
    if (_1914)
    {
        _2297 = _2183;
        _2299 = _2185;
        _2301 = _2187;
    }
    else
    {
        uint _2308 = _1823 + 3u;
        uint _2312 = _1823 + 11u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _696) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _645;
        float _2329 = cbLight._m0[_2308].y + _646;
        float _2330 = cbLight._m0[_2308].z + _647;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2308].xyz));
        float _4215 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2342 = dot(vec3(_564, _565, _566), vec3(_2335, _2336, _2337));
        float _4226 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4237 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_1988 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2368) + _2327) * _2341))) * _2341;
        float _4248 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2297 = (((((_2361 * _2010) + _766) * cbLight._m0[_2312].x) * _2380) * _2381) + _2183;
        _2299 = (((((_2361 * _2012) + _768) * cbLight._m0[_2312].y) * _2380) * _2381) + _2185;
        _2301 = (((((_2361 * _2013) + _769) * cbLight._m0[_2312].z) * _2380) * _2381) + _2187;
    }
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_1821.y == 0u)
    {
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2456;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2456;
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2456;
        uvec4 _2471 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2472 = _2471.x;
        uint _2483 = uint((float(_2471.y) * floor(float(uint(cbSceneParam._m0[85u].y * _654) / _2472))) + floor(float(uint(cbSceneParam._m0[85u].x * _653) / _2472)));
        float _2493 = (log2(_2459 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2494 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        uint _2497 = uint(isnan(14.0) ? _2494 : (isnan(_2494) ? 14.0 : min(_2494, 14.0)));
        uvec4 _2502 = texelFetch(g_lightClusterGridBuffer, int(((_2497 << 2u) + (_2483 << 6u)) >> 2u));
        uint _2503 = _2502.x;
        uint _2504 = _2471.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2504 >> 4u) & 15u)) + 4294967295u) & _2503) == 0u) || ((_2504 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            uint _2771 = 0u;
            uint _2780;
            bool _2781;
            for (;;)
            {
                _2780 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                _2781 = _2780 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2781)
                {
                    frontier_phi_67_pred = _2770;
                    frontier_phi_67_pred_1 = _2769;
                    frontier_phi_67_pred_2 = _2768;
                    frontier_phi_67_pred_3 = _2767;
                    frontier_phi_67_pred_4 = _2766;
                    frontier_phi_67_pred_5 = _2765;
                }
                else
                {
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    uint _2895;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2780;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2899 = uint(findLSB(_2895)) + (_2771 << 5u);
                        uint _2896 = (_2895 + 4294967295u) & _2895;
                        uint _2901 = _2899 * 48u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2921 = (_2899 * 48u) + 4u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2940 = (_2899 * 48u) + 8u;
                        vec3 _2951 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x));
                        float _2955 = _2915.x - _2457;
                        float _2956 = _2915.y - _2458;
                        float _2957 = _2915.z - _2459;
                        float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                        float _2961 = inversesqrt(_2958);
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2965 = dot(vec3(_677, _680, _683), vec3(_2962, _2963, _2964));
                        float _2970 = 1.0 - (_2958 * _2915.w);
                        float _4274 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2972 = sqrt(_2958) * _2934.w;
                        float _2975 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2965) + _2976;
                        float _2982 = _2972 * _2972;
                        float _2986 = ((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2971) / ((_2982 * 0.699999988079071044921875) + 1.0);
                        float _2990 = (-0.0) - _2457;
                        float _2991 = (-0.0) - _2458;
                        float _2992 = (-0.0) - _2459;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3007 = exp2(log2(1.0 / ((_2982 * 3.5) + 5.0)) * 0.25);
                        float _3008 = 1.0 - _797;
                        float _3015 = sqrt(1.0 - ((1.0 - (_3008 * _3008)) * (1.0 - (_3007 * _3007))));
                        float _3016 = _3015 * _3015;
                        float _3017 = _3016 * _3016;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3028 = dot(vec3(_677, _680, _683), vec3(_2997, _2998, _2999));
                        float _4290 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _3032 = dot(vec3(_677, _680, _683), vec3(_3024 * _3018, _3024 * _3019, _3024 * _3020));
                        float _4301 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _3039 = ((_3035 * _3035) * (_3017 + (-1.0))) + 1.0;
                        float _3040 = _2975 * _3016;
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _2965) + _3041;
                        float _4312 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3046 = 1.0 - _3016;
                        float _3056 = (0.5 / (((_3045 * ((_3031 * _3046) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_3045 * _3046) + _3016) * _3031))) * _3045;
                        float _4323 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3067 = (((_3017 * 3.1415927410125732421875) * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) / ((_3039 * _3039) * ((_2982 * 2.1991131305694580078125) + 3.141590118408203125))) * _2971;
                        _2824 = (_2986 * _2934.x) + _2892;
                        _2825 = (_2986 * _2934.y) + _2893;
                        _2826 = (_2986 * _2934.z) + _2894;
                        _2821 = (_3067 * _2951.x) + _2889;
                        _2822 = (_3067 * _2951.y) + _2890;
                        _2823 = (_3067 * _2951.z) + _2891;
                        if (_2896 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2896;
                        }
                    }
                    frontier_phi_67_pred = _2826;
                    frontier_phi_67_pred_1 = _2825;
                    frontier_phi_67_pred_2 = _2824;
                    frontier_phi_67_pred_3 = _2823;
                    frontier_phi_67_pred_4 = _2822;
                    frontier_phi_67_pred_5 = _2821;
                }
                _2632 = frontier_phi_67_pred;
                _2630 = frontier_phi_67_pred_1;
                _2628 = frontier_phi_67_pred_2;
                _2626 = frontier_phi_67_pred_3;
                _2624 = frontier_phi_67_pred_4;
                _2622 = frontier_phi_67_pred_5;
                uint _2772 = _2771 + 1u;
                if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2765 = _2622;
                    _2766 = _2624;
                    _2767 = _2626;
                    _2768 = _2628;
                    _2769 = _2630;
                    _2770 = _2632;
                    _2771 = _2772;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((4294967295u << _2638) & _2503) == 0u)
        {
            _2733 = _2621;
            _2735 = _2623;
            _2737 = _2625;
            _2739 = _2627;
            _2741 = _2629;
            _2743 = _2631;
        }
        else
        {
            float _2758 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
            float _2759 = _2758 * _2457;
            float _2760 = _2758 * _2458;
            float _2761 = _2758 * _2459;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2872 = _2621;
                float _2873 = _2623;
                float _2874 = _2625;
                float _2875 = _2627;
                float _2876 = _2629;
                float _2877 = _2631;
                uint _2878 = _2638;
                uint _2887;
                bool _2888;
                for (;;)
                {
                    _2887 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                    _2888 = _2887 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2888)
                    {
                        frontier_phi_73_pred = _2877;
                        frontier_phi_73_pred_1 = _2876;
                        frontier_phi_73_pred_2 = _2875;
                        frontier_phi_73_pred_3 = _2874;
                        frontier_phi_73_pred_4 = _2873;
                        frontier_phi_73_pred_5 = _2872;
                    }
                    else
                    {
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        uint _3091 = _2887;
                        uint _3092;
                        vec4 _3117;
                        float _3118;
                        vec4 _3133;
                        vec3 _3145;
                        vec4 _3160;
                        vec4 _3175;
                        float _3221;
                        bool _3222;
                        for (;;)
                        {
                            uint _3102 = ((_2878 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3091));
                            _3092 = (_3091 + 4294967295u) & _3091;
                            uint _3104 = _3102 * 40u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3118 = _3117.w;
                            uint _3120 = (_3102 * 40u) + 4u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3135 = (_3102 * 40u) + 8u;
                            _3145 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x));
                            uint _3147 = (_3102 * 40u) + 16u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3102 * 40u) + 20u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3177 = (_3102 * 40u) + 24u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3196 = (_3102 * 40u) + 28u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3221 = fma(_2459, _3209.z, fma(_2458, _3209.y, _3209.x * _2457)) + _3209.w;
                            _3222 = !((fma(_2459, _3190.z, fma(_2458, _3190.y, _3190.x * _2457)) + _3190.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3222)
                            {
                                float _3249 = _3117.x - _2457;
                                float _3250 = _3117.y - _2458;
                                float _3251 = _3117.z - _2459;
                                float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                                float _3255 = inversesqrt(_3252);
                                float _3256 = _3255 * _3249;
                                float _3257 = _3255 * _3250;
                                float _3258 = _3255 * _3251;
                                float _3262 = 1.0 - (_3252 / (_3118 * _3118));
                                float _4334 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3267 = sqrt(_3252) * _3133.w;
                                float _3269 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                                float _3270 = _3269 * _3269;
                                float _3273 = ((1.0 - _3270) * dot(vec3(_3256, _3257, _3258), vec3(_677, _680, _683))) + _3270;
                                float _3276 = _3267 * _3267;
                                float _3280 = (fma(_2459, _3160.z, fma(_2458, _3160.y, _3160.x * _2457)) + _3160.w) / _3221;
                                float _3281 = (fma(_2459, _3175.z, fma(_2458, _3175.y, _3175.x * _2457)) + _3175.w) / _3221;
                                float _3285 = 1.0 - dot(vec2(_3280, _3281), vec2(_3280, _3281));
                                float _4350 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3287 = _3286 * (((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3263) / ((_3276 * 0.699999988079071044921875) + 1.0));
                                float _3299 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                                float _3300 = 1.0 - _797;
                                float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                                float _3308 = _3307 * _3307;
                                float _3309 = _3308 * _3308;
                                float _3310 = _3256 - _2759;
                                float _3311 = _3257 - _2760;
                                float _3312 = _3258 - _2761;
                                float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                                float _3320 = dot(vec3(_677, _680, _683), vec3((-0.0) - _2759, (-0.0) - _2760, (-0.0) - _2761));
                                float _4361 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3324 = dot(vec3(_677, _680, _683), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                                float _4372 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                                float _3332 = _3269 * _3308;
                                float _3333 = _3332 * _3332;
                                float _3339 = ((1.0 - _3333) * dot(vec3(_677, _680, _683), vec3(_3256, _3257, _3258))) + _3333;
                                float _4383 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3341 = 1.0 - _3308;
                                float _3351 = (0.5 / (((_3340 * ((_3323 * _3341) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3308) * _3323))) * _3340;
                                float _4394 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3361 = (_3286 * _3263) * (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) / ((_3331 * _3331) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3287 * _3133.y;
                                frontier_phi_79_pred_1 = _3287 * _3133.x;
                                frontier_phi_79_pred_2 = _3361 * _3145.z;
                                frontier_phi_79_pred_3 = _3361 * _3145.y;
                                frontier_phi_79_pred_4 = _3361 * _3145.x;
                                frontier_phi_79_pred_5 = _3287 * _3133.z;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3369 = frontier_phi_79_pred;
                            _3368 = frontier_phi_79_pred_1;
                            _3367 = frontier_phi_79_pred_2;
                            _3366 = frontier_phi_79_pred_3;
                            _3365 = frontier_phi_79_pred_4;
                            _3370 = frontier_phi_79_pred_5;
                            _3075 = _3368 + _3088;
                            _3076 = _3369 + _3089;
                            _3077 = _3370 + _3090;
                            _3072 = _3365 + _3085;
                            _3073 = _3366 + _3086;
                            _3074 = _3367 + _3087;
                            if (_3092 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3092;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3077;
                        frontier_phi_73_pred_1 = _3076;
                        frontier_phi_73_pred_2 = _3075;
                        frontier_phi_73_pred_3 = _3074;
                        frontier_phi_73_pred_4 = _3073;
                        frontier_phi_73_pred_5 = _3072;
                    }
                    _2744 = frontier_phi_73_pred;
                    _2742 = frontier_phi_73_pred_1;
                    _2740 = frontier_phi_73_pred_2;
                    _2738 = frontier_phi_73_pred_3;
                    _2736 = frontier_phi_73_pred_4;
                    _2734 = frontier_phi_73_pred_5;
                    uint _2879 = _2878 + 1u;
                    if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2872 = _2734;
                        _2873 = _2736;
                        _2874 = _2738;
                        _2875 = _2740;
                        _2876 = _2742;
                        _2877 = _2744;
                        _2878 = _2879;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2744;
                frontier_phi_61_62_ladder_1 = _2742;
                frontier_phi_61_62_ladder_2 = _2738;
                frontier_phi_61_62_ladder_3 = _2736;
                frontier_phi_61_62_ladder_4 = _2734;
                frontier_phi_61_62_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_61_62_ladder = _2631;
                frontier_phi_61_62_ladder_1 = _2629;
                frontier_phi_61_62_ladder_2 = _2625;
                frontier_phi_61_62_ladder_3 = _2623;
                frontier_phi_61_62_ladder_4 = _2621;
                frontier_phi_61_62_ladder_5 = _2627;
            }
            _2733 = frontier_phi_61_62_ladder_4;
            _2735 = frontier_phi_61_62_ladder_3;
            _2737 = frontier_phi_61_62_ladder_2;
            _2739 = frontier_phi_61_62_ladder_5;
            _2741 = frontier_phi_61_62_ladder_1;
            _2743 = frontier_phi_61_62_ladder;
        }
        float _2748 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2515 = (_2748 * _2739) + _1952;
        _2517 = (_2748 * _2741) + _1954;
        _2519 = (_2748 * _2743) + _1956;
        _2521 = ((_2733 * _766) * _2748) + _2297;
        _2523 = ((_2735 * _768) * _2748) + _2299;
        _2525 = ((_2737 * _769) * _2748) + _2301;
    }
    else
    {
        _2515 = _1952;
        _2517 = _1954;
        _2519 = _1956;
        _2521 = _2297;
        _2523 = _2299;
        _2525 = _2301;
    }
    vec4 _2531 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4410 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4421 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4432 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2555 = (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2515 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _781))) + ((_2521 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + (_2531.x * cbMtdParam._m0[3u].x);
    float _2557 = ((_2531.y * cbMtdParam._m0[3u].x) + ((_2523 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2517 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _781)));
    float _2559 = ((_2531.z * cbMtdParam._m0[3u].x) + ((_2525 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2519 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _781)));
    uint _2563 = _709 + 6u;
    float _2571 = _653 / cbSceneParam._m0[86u].x;
    float _2572 = _654 / cbSceneParam._m0[86u].y;
    vec4 _2586 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2588 = _2586.x;
    float _2589 = _2586.y;
    float _2590 = _2586.z;
    float _2591 = _2586.w;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2647 = _2646 / _587;
        float _2658 = _2647 * _638;
        float _2659 = _639 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2661 = _2647 * _640;
        float _2663 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2664 = _2663 + cbSceneParam._m0[79u].w;
        float _2665 = cbSceneParam._m0[79u].w - _2659;
        float _2671 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2661 * _2661));
        float _2674 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2671;
        float _2679 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2681 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2834;
        if (abs((_2660 - _2663) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2834 = ((((_2664 > 0.0) ? exp2(_2679 * _2664) : (2.0 - exp2(_2681 * _2664))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2674;
        }
        else
        {
            float _2794 = 1.0 / cbSceneParam._m0[80u].x;
            float _2795 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : max(_2664, _2665));
            float _2796 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : min(_2664, _2665));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            _2834 = ((abs(_2671 / _2660) * cbSceneParam._m0[80u].y) * ((((_2805 - _2806) * 2.0) - ((exp2(_2679 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0)))) - exp2(_2679 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))))) * _2794)) - ((exp2(_2681 * _2805) - exp2(_2681 * _2806)) * _2794))) + (_2674 * cbSceneParam._m0[80u].z);
        }
        vec4 _2836 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, 1.0), 0.0);
        float _2845 = exp2((_2834 * (-1.44269502162933349609375)) * (1.0 - _2836.w));
        float _2846 = log2(_2845);
        float _2862 = log2(_2591);
        _2683 = (exp2(_2862 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].x)) * _2836.x) / cbSceneParam._m0[78u].x)) + _2588;
        _2685 = (exp2(_2862 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].y)) * _2836.y) / cbSceneParam._m0[78u].y)) + _2589;
        _2687 = (exp2(_2862 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].z)) * _2836.z) / cbSceneParam._m0[78u].z)) + _2590;
        _2689 = _2845 * _2591;
    }
    else
    {
        _2683 = _2588;
        _2685 = _2589;
        _2687 = _2590;
        _2689 = _2591;
    }
    float _2701 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2702 = _2701 == 3.0;
    float _2703 = log2(_2689);
    float _2710 = exp2(_2703 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)));
    float _2711 = exp2(_2703 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)));
    float _2712 = exp2(_2703 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)));
    float _2721 = (_2701 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2721 * (_2702 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.y = _2721 * (_2702 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.z = _2721 * (_2702 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.w = cbInstanceData._m0[_2563].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2563].w;
}


