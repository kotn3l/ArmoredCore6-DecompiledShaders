#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1203;
float _3630;
float _3631;
float _3632;
float _3633;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _266 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _271 = log2(0.0);
    bool _274 = exp2(_271 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[15u].x;
    _194[0u] = cbMtdParam._m0[15u].y;
    _195[0u] = cbMtdParam._m0[15u].z;
    _193[1u] = cbMtdParam._m0[16u].x;
    _194[1u] = cbMtdParam._m0[16u].y;
    _195[1u] = cbMtdParam._m0[16u].z;
    _193[2u] = cbMtdParam._m0[17u].x;
    _194[2u] = cbMtdParam._m0[17u].y;
    _195[2u] = cbMtdParam._m0[17u].z;
    _193[3u] = cbMtdParam._m0[12u].x;
    _194[3u] = cbMtdParam._m0[12u].y;
    _195[3u] = cbMtdParam._m0[12u].z;
    _193[4u] = cbMtdParam._m0[13u].x;
    _194[4u] = cbMtdParam._m0[13u].y;
    _195[4u] = cbMtdParam._m0[13u].z;
    _193[5u] = cbMtdParam._m0[14u].x;
    _194[5u] = cbMtdParam._m0[14u].y;
    _195[5u] = cbMtdParam._m0[14u].z;
    vec4 _342 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _346 = _342.y;
    float _349 = (_342.x + (-0.02500000037252902984619140625)) * 8.0;
    float _351 = roundEven(_349);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    uint _355 = uint(int(isnan(5.0) ? _352 : (isnan(_352) ? 5.0 : min(_352, 5.0))));
    float _372;
    if (_274)
    {
        _372 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _372 = cbMtdParam._m0[20u].z;
    }
    float _378;
    float _380;
    if (_274)
    {
        _378 = cbMtdParam._m0[28u].z;
        _380 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _378 = cbMtdParam._m0[24u].x;
        _380 = cbMtdParam._m0[24u].y;
    }
    float _382 = _378 * TEXCOORD.x;
    float _383 = _380 * TEXCOORD.y;
    float _395 = floor(_372);
    vec4 _398 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _382) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _383) + cbTextureTilingScale._m0[8u].w, _395));
    vec4 _420 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _266) + cbTextureTilingScale._m0[0u].w));
    float _428 = ((((((_193[_355] - cbMtdParam._m0[19u].x) * _346) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _398.x) * cbMtdParam._m0[9u].x) * _420.x;
    float _432 = ((((((_194[_355] - cbMtdParam._m0[19u].y) * _346) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _398.y) * cbMtdParam._m0[9u].y) * _420.y;
    float _436 = ((((((_195[_355] - cbMtdParam._m0[19u].z) * _346) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _398.z) * cbMtdParam._m0[9u].z) * _420.z;
    vec4 _448 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _266) + cbTextureTilingScale._m0[1u].w));
    float _452 = _448.z;
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[25u].x;
    _189[0u] = cbMtdParam._m0[25u].y;
    _188[1u] = cbMtdParam._m0[26u].x;
    _189[1u] = cbMtdParam._m0[26u].y;
    _188[2u] = cbMtdParam._m0[26u].z;
    _189[2u] = cbMtdParam._m0[26u].w;
    _188[3u] = cbMtdParam._m0[27u].x;
    _189[3u] = cbMtdParam._m0[27u].y;
    _188[4u] = cbMtdParam._m0[25u].z;
    _189[4u] = cbMtdParam._m0[25u].w;
    float _497 = roundEven(5.0 - _349);
    float _498 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = isnan(4.0) ? _498 : (isnan(_498) ? 4.0 : min(_498, 4.0));
    float _501 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    uint _503 = uint(int(isnan(4.0) ? _501 : (isnan(_501) ? 4.0 : min(_501, 4.0))));
    float _509 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _382) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _383) + cbTextureTilingScale._m0[10u].w, _395)).x + _448.w) + _189[_503];
    vec4 _527 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _382) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _383) + cbTextureTilingScale._m0[9u].w, _395));
    float _534 = (_527.x * 2.0) + (-1.0);
    float _535 = (_527.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3672 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _542 = sqrt(1.0 - (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))));
    float _551 = (cbMtdParam._m0[21u].x * (((_452 * 2.0) * (_527.z + _188[_503])) - _452)) + _452;
    float _555 = (cbMtdParam._m0[21u].y * ((_448.x * 2.0) + (-1.0))) + _534;
    float _556 = (cbMtdParam._m0[21u].y * ((_448.y * 2.0) + (-1.0))) + _535;
    float _559 = fma(_542, _245, fma(_556, _237 * TANGENT.x, (_223 * _215) * _555));
    float _562 = fma(_542, _246, fma(_556, _237 * TANGENT.y, (_223 * _216) * _555));
    float _565 = fma(_542, _247, fma(_556, _237 * TANGENT.z, (_223 * _217) * _555));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3683 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _573 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3705 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3716 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3727 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _577 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _644 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _634);
    float _645 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _634);
    float _646 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _634);
    float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
    float _651 = _644 * _650;
    float _652 = _645 * _650;
    float _653 = _646 * _650;
    vec4 _658 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _660 = _658.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _883 = sqrt(((_644 * _644) + (_645 * _645)) + (_646 * _646));
        float _889 = (cbMatDynParam._m0[5u].x * _883) + cbMatDynParam._m0[5u].y;
        float _3738 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _894 = (cbMatDynParam._m0[5u].z * _883) + cbMatDynParam._m0[5u].w;
        float _3749 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) - _890)) + _890) < ((_660 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _674 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _675 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _677 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _679 = _677.w;
    float _698 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _701 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _704 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    vec4 _706 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _717 = (((_706.y - _573) + (_706.w * _573)) * cbMtdParam._m0[3u].x) + _573;
    uint _730 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = _730 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3760 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    vec4 _744 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _749 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _760 = (((_749.x - _577) + (_749.w * _577)) * cbMtdParam._m0[3u].x) + _577;
    float _773 = (cbMtdParam._m0[3u].x * (((_741 * _679) - _741) + _744.x)) + _741;
    float _774 = (cbMtdParam._m0[3u].x * (((_742 * _679) - _742) + _744.y)) + _742;
    float _775 = (cbMtdParam._m0[3u].x * (((_743 * _679) - _743) + _744.z)) + _743;
    float _776 = 1.0 - _760;
    float _777 = _776 * _773;
    float _778 = _776 * _774;
    float _779 = _776 * _775;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _760;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _760;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _760;
    float _787 = _784 + 0.039999999105930328369140625;
    float _789 = _785 + 0.039999999105930328369140625;
    float _790 = _786 + 0.039999999105930328369140625;
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _674, cbSceneParam._m0[86u].y * _675));
    float _802 = _799.x * TEXCOORD_4;
    float _803 = dot(vec3(_570, _571, _572), vec3(_651, _652, _653));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _570) - _651;
    float _811 = (_806 * _571) - _652;
    float _812 = (_806 * _572) - _653;
    float _816 = abs(dot(vec3(_651, _652, _653), vec3(_570, _571, _572)));
    float _3793 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_717);
    float _829 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _835 = (1.0 - _829) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _836 = _829 * _818;
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1202;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _927 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _931 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _935 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _960 = _864 + _570;
        float _961 = _868 + _571;
        float _962 = _872 + _572;
        float _972 = fma(_962, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960)) - _927;
        float _973 = fma(_962, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960)) - _931;
        float _974 = fma(_962, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960)) - _935;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_927 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_931 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[34u].z) + ((((((_935 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1030 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_996.x + (-0.5));
        float _1032 = _1030 * (_996.y + (-0.5));
        float _1033 = _1030 * (_996.z + (-0.5));
        float _1040 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1003.x + (-0.5));
        float _1042 = _1040 * (_1003.y + (-0.5));
        float _1043 = _1040 * (_1003.z + (-0.5));
        float _1050 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1010.x + (-0.5));
        float _1052 = _1050 * (_1010.y + (-0.5));
        float _1053 = _1050 * (_1010.z + (-0.5));
        float _1060 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1017.x + (-0.5));
        float _1062 = _1060 * (_1017.y + (-0.5));
        float _1063 = _1060 * (_1017.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1084 = (dot(vec3(_570, _571, _572), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1094 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3841 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1096 + 1.0))) + _1101) * _1064;
        float _1111 = _1032 * 0.5;
        float _1112 = _1042 * 0.5;
        float _1113 = _1052 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_570, _571, _572), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3874 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1138 + 1.0))) + _1143) * _1065;
        float _1153 = _1033 * 0.5;
        float _1154 = _1043 * 0.5;
        float _1155 = _1053 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_570, _571, _572), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3907 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1180 + 1.0))) + _1185) * _1066;
        _1202 = _1033;
        _1204 = _1032;
        _1205 = _1031;
        _1206 = _1043;
        _1207 = _1042;
        _1208 = _1041;
        _1209 = _1053;
        _1210 = _1052;
        _1211 = _1051;
        _1212 = _1066;
        _1213 = _1065;
        _1214 = _1064;
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _1203;
        _1204 = _1203;
        _1205 = _1203;
        _1206 = _1203;
        _1207 = _1203;
        _1208 = _1203;
        _1209 = _1203;
        _1210 = _1203;
        _1211 = _1203;
        _1212 = _1203;
        _1213 = _1203;
        _1214 = _1203;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1250 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1254 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1277 = _864 + _570;
        float _1278 = _868 + _571;
        float _1279 = _872 + _572;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_570, _571, _572), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3970 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_570, _571, _572), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4003 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_570, _571, _572), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4036 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1203;
        _1516 = _1203;
        _1517 = _1203;
        _1518 = _1203;
        _1519 = _1203;
        _1520 = _1203;
        _1521 = _1203;
        _1522 = _1203;
        _1523 = _1203;
        _1524 = _1203;
        _1525 = _1203;
        _1526 = _1203;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1215)) + _1215;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1216)) + _1216;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1217)) + _1217;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _810 * 0.5;
    float _1584 = _811 * 0.5;
    float _1585 = _812 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1202, _1206, _1209, _1212));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _717);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1713 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1716 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_23_21_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_23_21_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_23_21_ladder = 5000.0;
            }
            _1744 = frontier_phi_23_21_ladder;
        }
        float _1968;
        if (_1713 > 0.0)
        {
            _1968 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1968 = frontier_phi_32_28_ladder;
        }
        float _2225;
        if (_1716 > 0.0)
        {
            _2225 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2225 = frontier_phi_44_39_ladder;
        }
        float _2227 = isnan(_1968) ? _1744 : (isnan(_1744) ? _1968 : min(_1744, _1968));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1710) + _1699;
        float _2233 = (_2228 * _1713) + _1703;
        float _2234 = (_2228 * _1716) + _1707;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_22_44_ladder;
        float frontier_phi_22_44_ladder_1;
        float frontier_phi_22_44_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_22_44_ladder = 0.0;
            frontier_phi_22_44_ladder_1 = 0.0;
            frontier_phi_22_44_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_22_44_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_22_44_ladder_2;
        _1734 = frontier_phi_22_44_ladder_1;
        _1736 = frontier_phi_22_44_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1652);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _717);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1809 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1812 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _1973;
        if (_1806 > 0.0)
        {
            _1973 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1973 = frontier_phi_34_30_ladder;
        }
        float _2252;
        if (_1809 > 0.0)
        {
            _2252 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2252 = frontier_phi_46_41_ladder;
        }
        float _2465;
        if (_1812 > 0.0)
        {
            _2465 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2465 = frontier_phi_55_52_ladder;
        }
        float _2467 = isnan(_2252) ? _1973 : (isnan(_1973) ? _2252 : min(_1973, _2252));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1806) + _1795;
        float _2473 = (_2468 * _1809) + _1799;
        float _2474 = (_2468 * _1812) + _1803;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2475;
        float _2478 = _2475 + 1.0;
        float frontier_phi_31_55_ladder;
        float frontier_phi_31_55_ladder_1;
        float frontier_phi_31_55_ladder_2;
        if ((_2474 > _2478) || ((_2474 < _2476) || ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 < _2476) || (_2472 > _2478))))))
        {
            frontier_phi_31_55_ladder = 0.0;
            frontier_phi_31_55_ladder_1 = 0.0;
            frontier_phi_31_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2474, cbModelParam._m0[17u].z, fma(_2473, cbModelParam._m0[17u].y, _2472 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2474, cbModelParam._m0[18u].z, fma(_2473, cbModelParam._m0[18u].y, _2472 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2474, cbModelParam._m0[19u].z, fma(_2473, cbModelParam._m0[19u].y, _2472 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_31_55_ladder = _2690.z * cbModelParam._m0[1u].z;
            frontier_phi_31_55_ladder_1 = _2690.y * cbModelParam._m0[1u].z;
            frontier_phi_31_55_ladder_2 = _2690.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_31_55_ladder_2;
        _1833 = frontier_phi_31_55_ladder_1;
        _1835 = frontier_phi_31_55_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1741);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1848 = (((_835 * _787) + _836) * _802) * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1850 = (((_835 * _789) + _836) * _802) * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1852 = (((_835 * _790) + _836) * _802) * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    vec4 _1869 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_674, _675));
    float _1871 = _1869.w;
    float _1883 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1871);
    float _1884 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1871);
    float _1885 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1871);
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_730 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1899 = _802 + (-1.0);
    float _1904 = (cbLight._m0[_1892].x * _1899) + 1.0;
    float _1905 = (cbLight._m0[_1892].y * _1899) + 1.0;
    float _1906 = (cbLight._m0[_1892].z * _1899) + 1.0;
    float _1907 = (cbLight._m0[_1892].w * _1899) + 1.0;
    uint _1908 = _1891 + 5u;
    float _1914 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1918 = _1891 + 4u;
    float _1927 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1931 = _1891 | 1u;
    float _1942 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_570, _571, _572));
    float _1945 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_570, _571, _572));
    float _4172 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _4183 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1950 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.3183098733425140380859375;
    float _1952 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.3183098733425140380859375;
    float _1959 = ((cbLight._m0[_1908].x * _1914) * _1952) + (((cbLight._m0[_1918].x * _1883) * _1927) * _1950);
    float _1960 = ((_1914 * cbLight._m0[_1908].y) * _1952) + (((cbLight._m0[_1918].y * _1884) * _1927) * _1950);
    float _1961 = ((_1914 * cbLight._m0[_1908].z) * _1952) + (((cbLight._m0[_1918].z * _1885) * _1927) * _1950);
    uvec4 _1965 = floatBitsToUint(cbLight._m0[_1891 + 12u]);
    bool _1967 = _1965.x == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1967)
    {
        _1978 = _1959;
        _1980 = _1960;
        _1982 = _1961;
    }
    else
    {
        uint _1986 = _1891 + 6u;
        float _2002 = (dot(vec3(cbLight._m0[_1891 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _4194 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2005 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _1978 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1959;
        _1980 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1960;
        _1982 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1961;
    }
    bool _1985 = _1965.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1985)
    {
        _2023 = _1978;
        _2025 = _1980;
        _2027 = _1982;
    }
    else
    {
        uint _2196 = _1891 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1891 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4210 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2215 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2023 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1978;
        _2025 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1980;
        _2027 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1982;
    }
    uint _2030 = _1891 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _717) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1891].x + _651;
    float _2046 = cbLight._m0[_1891].y + _652;
    float _2047 = cbLight._m0[_1891].z + _653;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1891].xyz));
    float _4226 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2059 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2060 = dot(vec3(_570, _571, _572), vec3(_2052, _2053, _2054));
    float _4248 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2052, _2053, _2054));
    float _4259 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0);
    float _2081 = 0.959999978542327880859375 - _784;
    float _2083 = 0.959999978542327880859375 - _785;
    float _2084 = 0.959999978542327880859375 - _786;
    float _2091 = 1.0 - _2044;
    float _2102 = (0.5 / (((_2059 * ((_2058 * _2091) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2091) + _2044) * _2058))) * _2058;
    float _4270 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2104 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2118 = _1891 + 9u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _717) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1931].x + _651;
    float _2132 = cbLight._m0[_1931].y + _652;
    float _2133 = cbLight._m0[_1931].z + _653;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1931].xyz));
    float _4281 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2145 = dot(vec3(_570, _571, _572), vec3(_2138, _2139, _2140));
    float _4292 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2138, _2139, _2140));
    float _4303 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2130 * _2130;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
    float _2171 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2059 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2171) + _2130) * _2144))) * _2144;
    float _4314 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    float _2193 = (((((_2164 * _2081) + _787) * cbLight._m0[_2118].x) * _2183) * _1914) + ((((cbLight._m0[_2030].x * _1883) * ((_2080 * _2081) + _787)) * _2104) * _1927);
    float _2194 = (((((_2164 * _2083) + _789) * cbLight._m0[_2118].y) * _2183) * _1914) + ((((cbLight._m0[_2030].y * _1884) * ((_2080 * _2083) + _789)) * _2104) * _1927);
    float _2195 = (((((_2164 * _2084) + _790) * cbLight._m0[_2118].z) * _2183) * _1914) + ((((cbLight._m0[_2030].z * _1885) * ((_2080 * _2084) + _790)) * _2104) * _1927);
    float _2257;
    float _2259;
    float _2261;
    if (_1967)
    {
        _2257 = _2193;
        _2259 = _2194;
        _2261 = _2195;
    }
    else
    {
        uint _2263 = _1891 + 2u;
        uint _2267 = _1891 + 10u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _717) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _651;
        float _2284 = cbLight._m0[_2263].y + _652;
        float _2285 = cbLight._m0[_2263].z + _653;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2263].xyz));
        float _4325 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2297 = dot(vec3(_570, _571, _572), vec3(_2290, _2291, _2292));
        float _4336 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4347 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_2059 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2323) + _2282) * _2296))) * _2296;
        float _4358 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2257 = (((((_2316 * _2081) + _787) * cbLight._m0[_2267].x) * _2335) * _2336) + _2193;
        _2259 = (((((_2316 * _2083) + _789) * cbLight._m0[_2267].y) * _2335) * _2336) + _2194;
        _2261 = (((((_2316 * _2084) + _790) * cbLight._m0[_2267].z) * _2335) * _2336) + _2195;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_1985)
    {
        _2371 = _2257;
        _2373 = _2259;
        _2375 = _2261;
    }
    else
    {
        uint _2382 = _1891 + 3u;
        uint _2386 = _1891 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _717) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _651;
        float _2403 = cbLight._m0[_2382].y + _652;
        float _2404 = cbLight._m0[_2382].z + _653;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2382].xyz));
        float _4374 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2416 = dot(vec3(_570, _571, _572), vec3(_2409, _2410, _2411));
        float _4385 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4396 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0);
        float _2442 = 1.0 - _2401;
        float _2452 = (0.5 / (((_2059 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2442) + _2401) * _2415))) * _2415;
        float _4407 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2371 = (((((_2435 * _2081) + _787) * cbLight._m0[_2386].x) * _2454) * _2455) + _2257;
        _2373 = (((((_2435 * _2083) + _789) * cbLight._m0[_2386].y) * _2454) * _2455) + _2259;
        _2375 = (((((_2435 * _2084) + _790) * cbLight._m0[_2386].z) * _2454) * _2455) + _2261;
    }
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_1889.y == 0u)
    {
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2530;
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2530;
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2530;
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.x;
        uint _2557 = uint((float(_2545.y) * floor(float(uint(cbSceneParam._m0[85u].y * _675) / _2546))) + floor(float(uint(cbSceneParam._m0[85u].x * _674) / _2546)));
        float _2567 = (log2(_2533 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2568 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        uint _2571 = uint(isnan(14.0) ? _2568 : (isnan(_2568) ? 14.0 : min(_2568, 14.0)));
        uvec4 _2576 = texelFetch(g_lightClusterGridBuffer, int(((_2571 << 2u) + (_2557 << 6u)) >> 2u));
        uint _2577 = _2576.x;
        uint _2578 = _2545.z;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((((1u << ((_2578 >> 4u) & 15u)) + 4294967295u) & _2577) == 0u) || ((_2578 & 240u) == 0u))
        {
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
        }
        else
        {
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2706;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            uint _2853 = 0u;
            uint _2862;
            bool _2863;
            for (;;)
            {
                _2862 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2853 << 2u)) >> 2u)).x;
                _2863 = _2862 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2863)
                {
                    frontier_phi_72_pred = _2852;
                    frontier_phi_72_pred_1 = _2851;
                    frontier_phi_72_pred_2 = _2850;
                    frontier_phi_72_pred_3 = _2849;
                    frontier_phi_72_pred_4 = _2848;
                    frontier_phi_72_pred_5 = _2847;
                }
                else
                {
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    uint _2998;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2862;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    for (;;)
                    {
                        uint _3002 = uint(findLSB(_2998)) + (_2853 << 5u);
                        uint _2999 = (_2998 + 4294967295u) & _2998;
                        uint _3004 = _3002 * 48u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3024 = (_3002 * 48u) + 4u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3043 = (_3002 * 48u) + 8u;
                        vec3 _3054 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x));
                        float _3058 = _3018.x - _2531;
                        float _3059 = _3018.y - _2532;
                        float _3060 = _3018.z - _2533;
                        float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                        float _3064 = inversesqrt(_3061);
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3068 = dot(vec3(_698, _701, _704), vec3(_3065, _3066, _3067));
                        float _3073 = 1.0 - (_3061 * _3018.w);
                        float _4433 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3075 = sqrt(_3061) * _3037.w;
                        float _3078 = 1.39999997615814208984375 / (_3075 + 1.39999997615814208984375);
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3068) + _3079;
                        float _3085 = _3075 * _3075;
                        float _3089 = ((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3074) / ((_3085 * 0.699999988079071044921875) + 1.0);
                        float _3093 = (-0.0) - _2531;
                        float _3094 = (-0.0) - _2532;
                        float _3095 = (-0.0) - _2533;
                        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3110 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                        float _3111 = 1.0 - _818;
                        float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                        float _3119 = _3118 * _3118;
                        float _3120 = _3119 * _3119;
                        float _3121 = _3100 + _3065;
                        float _3122 = _3101 + _3066;
                        float _3123 = _3102 + _3067;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3131 = dot(vec3(_698, _701, _704), vec3(_3100, _3101, _3102));
                        float _4449 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3135 = dot(vec3(_698, _701, _704), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                        float _4460 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                        float _3143 = _3078 * _3119;
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3068) + _3144;
                        float _4471 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3149 = 1.0 - _3119;
                        float _3159 = (0.5 / (((_3148 * ((_3134 * _3149) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3119) * _3134))) * _3148;
                        float _4482 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3170 = (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) / ((_3142 * _3142) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125))) * _3074;
                        _2922 = (_3089 * _3037.x) + _2995;
                        _2923 = (_3089 * _3037.y) + _2996;
                        _2924 = (_3089 * _3037.z) + _2997;
                        _2919 = (_3170 * _3054.x) + _2992;
                        _2920 = (_3170 * _3054.y) + _2993;
                        _2921 = (_3170 * _3054.z) + _2994;
                        if (_2999 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2999;
                        }
                    }
                    frontier_phi_72_pred = _2924;
                    frontier_phi_72_pred_1 = _2923;
                    frontier_phi_72_pred_2 = _2922;
                    frontier_phi_72_pred_3 = _2921;
                    frontier_phi_72_pred_4 = _2920;
                    frontier_phi_72_pred_5 = _2919;
                }
                _2706 = frontier_phi_72_pred;
                _2704 = frontier_phi_72_pred_1;
                _2702 = frontier_phi_72_pred_2;
                _2700 = frontier_phi_72_pred_3;
                _2698 = frontier_phi_72_pred_4;
                _2696 = frontier_phi_72_pred_5;
                uint _2854 = _2853 + 1u;
                if (_2854 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2847 = _2696;
                    _2848 = _2698;
                    _2849 = _2700;
                    _2850 = _2702;
                    _2851 = _2704;
                    _2852 = _2706;
                    _2853 = _2854;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
        }
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.z;
        uint _2712 = (_2710 >> 8u) & 15u;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        if (((4294967295u << _2712) & _2577) == 0u)
        {
            _2815 = _2695;
            _2817 = _2697;
            _2819 = _2699;
            _2821 = _2701;
            _2823 = _2703;
            _2825 = _2705;
        }
        else
        {
            float _2840 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
            float _2841 = _2840 * _2531;
            float _2842 = _2840 * _2532;
            float _2843 = _2840 * _2533;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2712 < ((_2710 >> 12u) & 15u))
            {
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2975 = _2695;
                float _2976 = _2697;
                float _2977 = _2699;
                float _2978 = _2701;
                float _2979 = _2703;
                float _2980 = _2705;
                uint _2981 = _2712;
                uint _2990;
                bool _2991;
                for (;;)
                {
                    _2990 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2981 << 2u)) >> 2u)).x;
                    _2991 = _2990 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2991)
                    {
                        frontier_phi_83_pred = _2980;
                        frontier_phi_83_pred_1 = _2979;
                        frontier_phi_83_pred_2 = _2978;
                        frontier_phi_83_pred_3 = _2977;
                        frontier_phi_83_pred_4 = _2976;
                        frontier_phi_83_pred_5 = _2975;
                    }
                    else
                    {
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3197 = _2975;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        float _3200 = _2978;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        uint _3203 = _2990;
                        uint _3204;
                        vec4 _3229;
                        float _3230;
                        vec4 _3245;
                        vec3 _3257;
                        vec4 _3272;
                        vec4 _3287;
                        float _3333;
                        bool _3334;
                        for (;;)
                        {
                            uint _3214 = ((_2981 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3203));
                            _3204 = (_3203 + 4294967295u) & _3203;
                            uint _3216 = _3214 * 40u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3230 = _3229.w;
                            uint _3232 = (_3214 * 40u) + 4u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3214 * 40u) + 8u;
                            _3257 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x));
                            uint _3259 = (_3214 * 40u) + 16u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3214 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3214 * 40u) + 24u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3308 = (_3214 * 40u) + 28u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3333 = fma(_2533, _3321.z, fma(_2532, _3321.y, _3321.x * _2531)) + _3321.w;
                            _3334 = !((fma(_2533, _3302.z, fma(_2532, _3302.y, _3302.x * _2531)) + _3302.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3334)
                            {
                                float _3361 = _3229.x - _2531;
                                float _3362 = _3229.y - _2532;
                                float _3363 = _3229.z - _2533;
                                float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                                float _3367 = inversesqrt(_3364);
                                float _3368 = _3367 * _3361;
                                float _3369 = _3367 * _3362;
                                float _3370 = _3367 * _3363;
                                float _3374 = 1.0 - (_3364 / (_3230 * _3230));
                                float _4493 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3379 = sqrt(_3364) * _3245.w;
                                float _3381 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                                float _3382 = _3381 * _3381;
                                float _3385 = ((1.0 - _3382) * dot(vec3(_3368, _3369, _3370), vec3(_698, _701, _704))) + _3382;
                                float _3388 = _3379 * _3379;
                                float _3392 = (fma(_2533, _3272.z, fma(_2532, _3272.y, _3272.x * _2531)) + _3272.w) / _3333;
                                float _3393 = (fma(_2533, _3287.z, fma(_2532, _3287.y, _3287.x * _2531)) + _3287.w) / _3333;
                                float _3397 = 1.0 - dot(vec2(_3392, _3393), vec2(_3392, _3393));
                                float _4509 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3399 = _3398 * (((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3375) / ((_3388 * 0.699999988079071044921875) + 1.0));
                                float _3411 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                                float _3412 = 1.0 - _818;
                                float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                                float _3420 = _3419 * _3419;
                                float _3421 = _3420 * _3420;
                                float _3422 = _3368 - _2841;
                                float _3423 = _3369 - _2842;
                                float _3424 = _3370 - _2843;
                                float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                                float _3432 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2841, (-0.0) - _2842, (-0.0) - _2843));
                                float _4520 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3436 = dot(vec3(_698, _701, _704), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                                float _4531 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                                float _3444 = _3381 * _3420;
                                float _3445 = _3444 * _3444;
                                float _3451 = ((1.0 - _3445) * dot(vec3(_698, _701, _704), vec3(_3368, _3369, _3370))) + _3445;
                                float _4542 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3453 = 1.0 - _3420;
                                float _3463 = (0.5 / (((_3452 * ((_3435 * _3453) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3420) * _3435))) * _3452;
                                float _4553 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3473 = (_3398 * _3375) * (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3443 * _3443) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3399 * _3245.z;
                                frontier_phi_89_pred_1 = _3399 * _3245.y;
                                frontier_phi_89_pred_2 = _3399 * _3245.x;
                                frontier_phi_89_pred_3 = _3473 * _3257.z;
                                frontier_phi_89_pred_4 = _3473 * _3257.y;
                                frontier_phi_89_pred_5 = _3473 * _3257.x;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3482 = frontier_phi_89_pred;
                            _3481 = frontier_phi_89_pred_1;
                            _3480 = frontier_phi_89_pred_2;
                            _3479 = frontier_phi_89_pred_3;
                            _3478 = frontier_phi_89_pred_4;
                            _3477 = frontier_phi_89_pred_5;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            _3189 = _3482 + _3202;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3186 = _3479 + _3199;
                            if (_3204 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3204;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3189;
                        frontier_phi_83_pred_1 = _3188;
                        frontier_phi_83_pred_2 = _3187;
                        frontier_phi_83_pred_3 = _3186;
                        frontier_phi_83_pred_4 = _3185;
                        frontier_phi_83_pred_5 = _3184;
                    }
                    _2826 = frontier_phi_83_pred;
                    _2824 = frontier_phi_83_pred_1;
                    _2822 = frontier_phi_83_pred_2;
                    _2820 = frontier_phi_83_pred_3;
                    _2818 = frontier_phi_83_pred_4;
                    _2816 = frontier_phi_83_pred_5;
                    uint _2982 = _2981 + 1u;
                    if (_2982 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2975 = _2816;
                        _2976 = _2818;
                        _2977 = _2820;
                        _2978 = _2822;
                        _2979 = _2824;
                        _2980 = _2826;
                        _2981 = _2982;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2822;
                frontier_phi_64_65_ladder_1 = _2826;
                frontier_phi_64_65_ladder_2 = _2824;
                frontier_phi_64_65_ladder_3 = _2820;
                frontier_phi_64_65_ladder_4 = _2818;
                frontier_phi_64_65_ladder_5 = _2816;
            }
            else
            {
                frontier_phi_64_65_ladder = _2701;
                frontier_phi_64_65_ladder_1 = _2705;
                frontier_phi_64_65_ladder_2 = _2703;
                frontier_phi_64_65_ladder_3 = _2699;
                frontier_phi_64_65_ladder_4 = _2697;
                frontier_phi_64_65_ladder_5 = _2695;
            }
            _2815 = frontier_phi_64_65_ladder_5;
            _2817 = frontier_phi_64_65_ladder_4;
            _2819 = frontier_phi_64_65_ladder_3;
            _2821 = frontier_phi_64_65_ladder;
            _2823 = frontier_phi_64_65_ladder_2;
            _2825 = frontier_phi_64_65_ladder_1;
        }
        float _2830 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2589 = (_2830 * _2821) + _2023;
        _2591 = (_2830 * _2823) + _2025;
        _2593 = (_2830 * _2825) + _2027;
        _2595 = ((_2815 * _787) * _2830) + _2371;
        _2597 = ((_2817 * _789) * _2830) + _2373;
        _2599 = ((_2819 * _790) * _2830) + _2375;
    }
    else
    {
        _2589 = _2023;
        _2591 = _2025;
        _2593 = _2027;
        _2595 = _2371;
        _2597 = _2373;
        _2599 = _2375;
    }
    vec4 _2605 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4569 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4580 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4591 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _2629 = (((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2589 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _802))) + ((_2595 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1641)) * cbPerFrame._m0[3u].x)) + (_2605.x * cbMtdParam._m0[3u].x);
    float _2631 = ((_2605.y * cbMtdParam._m0[3u].x) + ((_2597 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1641)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2591 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _802)));
    float _2633 = ((_2605.z * cbMtdParam._m0[3u].x) + ((_2599 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1641)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2593 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _802)));
    float _2634 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2635 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2636 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    uint _2637 = _730 + 6u;
    float _2645 = _674 / cbSceneParam._m0[86u].x;
    float _2646 = _675 / cbSceneParam._m0[86u].y;
    vec4 _2660 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2645, _2646, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2662 = _2660.x;
    float _2663 = _2660.y;
    float _2664 = _2660.z;
    float _2665 = _2660.w;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2720 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2721 = _2720 / _593;
        float _2732 = _2721 * _644;
        float _2733 = _645 * _2721;
        float _2734 = (-0.0) - _2733;
        float _2735 = _2721 * _646;
        float _2737 = (cbSceneParam._m0[77u].w * _2734) / _2720;
        float _2738 = _2737 + cbSceneParam._m0[79u].w;
        float _2739 = cbSceneParam._m0[79u].w - _2733;
        float _2745 = sqrt(((_2732 * _2732) + (_2733 * _2733)) + (_2735 * _2735));
        float _2748 = (1.0 - (cbSceneParam._m0[77u].w / _2720)) * _2745;
        float _2753 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2755 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2932;
        if (abs((_2734 - _2737) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2932 = ((((_2738 > 0.0) ? exp2(_2753 * _2738) : (2.0 - exp2(_2755 * _2738))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2748;
        }
        else
        {
            float _2876 = 1.0 / cbSceneParam._m0[80u].x;
            float _2877 = isnan(_2739) ? _2738 : (isnan(_2738) ? _2739 : max(_2738, _2739));
            float _2878 = isnan(_2739) ? _2738 : (isnan(_2738) ? _2739 : min(_2738, _2739));
            float _2887 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : min(_2877, 0.0));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            _2932 = ((abs(_2745 / _2734) * cbSceneParam._m0[80u].y) * ((((_2887 - _2888) * 2.0) - ((exp2(_2753 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0)))) - exp2(_2753 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))))) * _2876)) - ((exp2(_2755 * _2887) - exp2(_2755 * _2888)) * _2876))) + (_2748 * cbSceneParam._m0[80u].z);
        }
        vec4 _2934 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2645, _2646, 1.0), 0.0);
        float _2943 = exp2((_2932 * (-1.44269502162933349609375)) * (1.0 - _2934.w));
        float _2944 = log2(_2943);
        float _2960 = log2(_2665);
        _2757 = (exp2(_2960 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].x)) * _2934.x) / cbSceneParam._m0[78u].x)) + _2662;
        _2759 = (exp2(_2960 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].y)) * _2934.y) / cbSceneParam._m0[78u].y)) + _2663;
        _2761 = (exp2(_2960 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].z)) * _2934.z) / cbSceneParam._m0[78u].z)) + _2664;
        _2763 = _2943 * _2665;
    }
    else
    {
        _2757 = _2662;
        _2759 = _2663;
        _2761 = _2664;
        _2763 = _2665;
    }
    bool _2970;
    vec4 _2773;
    vec4 _2795;
    float _2797;
    float _2801;
    float _2802;
    float _2803;
    float _2804;
    bool _2814;
    for (;;)
    {
        _2773 = cbMatDynParam._m0[0u];
        float _2775 = roundEven(_2773.y);
        bool _2776 = _2775 == 3.0;
        float _2777 = log2(_2763);
        float _2784 = exp2(_2777 * cbSceneParam._m0[78u].x) * _2634;
        float _2785 = exp2(_2777 * cbSceneParam._m0[78u].y) * _2635;
        float _2786 = exp2(_2777 * cbSceneParam._m0[78u].z) * _2636;
        float _2793 = _660 + (-0.5);
        _2795 = cbMtdParam._m0[1u];
        _2797 = _2795.y * _2793;
        float _2800 = (_2775 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2801 = _2800 * (_2776 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2757)));
        _2802 = _2800 * (_2776 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2759)));
        _2803 = _2800 * (_2776 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2761)));
        _2804 = _2793 * 0.999000012874603271484375;
        _2814 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2814)
        {
            if ((cbInstanceData._m0[_730 + 7u].x + _2804) < 0.5)
            {
                _2970 = true;
                break;
            }
        }
        uint _2911 = _731 + uint(_2773.w);
        if ((cbInstanceData._m0[_2911].w < 1.0) && ((cbInstanceData._m0[_2911].w + _2804) < 0.5))
        {
            _2970 = true;
            break;
        }
        if ((_2797 + 1.0) < _2795.x)
        {
            _2970 = true;
            break;
        }
        _2970 = false;
        break;
    }
    float _3175;
    if (_2970)
    {
        discard_state = true;
        _3175 = 0.0;
    }
    else
    {
        _3175 = cbInstanceData._m0[_2637].w;
    }
    SV_Target.x = _2801;
    SV_Target.y = _2802;
    SV_Target.z = _2803;
    SV_Target.w = _3175;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2637].w;
    discard_exit();
}


