#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1201;
float _3887;
float _3888;
float _3889;
float _3890;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _268 = log2(0.0);
    bool _271 = exp2(_268 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[15u].x;
    _196[0u] = cbMtdParam._m0[15u].y;
    _197[0u] = cbMtdParam._m0[15u].z;
    _195[1u] = cbMtdParam._m0[16u].x;
    _196[1u] = cbMtdParam._m0[16u].y;
    _197[1u] = cbMtdParam._m0[16u].z;
    _195[2u] = cbMtdParam._m0[17u].x;
    _196[2u] = cbMtdParam._m0[17u].y;
    _197[2u] = cbMtdParam._m0[17u].z;
    _195[3u] = cbMtdParam._m0[12u].x;
    _196[3u] = cbMtdParam._m0[12u].y;
    _197[3u] = cbMtdParam._m0[12u].z;
    _195[4u] = cbMtdParam._m0[13u].x;
    _196[4u] = cbMtdParam._m0[13u].y;
    _197[4u] = cbMtdParam._m0[13u].z;
    _195[5u] = cbMtdParam._m0[14u].x;
    _196[5u] = cbMtdParam._m0[14u].y;
    _197[5u] = cbMtdParam._m0[14u].z;
    vec4 _339 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _343 = _339.y;
    float _346 = (_339.x + (-0.02500000037252902984619140625)) * 8.0;
    float _348 = roundEven(_346);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    uint _352 = uint(int(isnan(5.0) ? _349 : (isnan(_349) ? 5.0 : min(_349, 5.0))));
    float _369;
    if (_271)
    {
        _369 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _369 = cbMtdParam._m0[20u].z;
    }
    float _375;
    float _377;
    if (_271)
    {
        _375 = cbMtdParam._m0[28u].z;
        _377 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _375 = cbMtdParam._m0[24u].x;
        _377 = cbMtdParam._m0[24u].y;
    }
    float _379 = _375 * TEXCOORD.x;
    float _380 = _377 * TEXCOORD.y;
    float _392 = floor(_369);
    vec4 _395 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _379) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _380) + cbTextureTilingScale._m0[8u].w, _392));
    vec4 _417 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _425 = ((((((_195[_352] - cbMtdParam._m0[19u].x) * _343) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _395.x) * cbMtdParam._m0[9u].x) * _417.x;
    float _429 = ((((((_196[_352] - cbMtdParam._m0[19u].y) * _343) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _395.y) * cbMtdParam._m0[9u].y) * _417.y;
    float _433 = ((((((_197[_352] - cbMtdParam._m0[19u].z) * _343) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _395.z) * cbMtdParam._m0[9u].z) * _417.z;
    vec4 _445 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _449 = _445.z;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[25u].x;
    _191[0u] = cbMtdParam._m0[25u].y;
    _190[1u] = cbMtdParam._m0[26u].x;
    _191[1u] = cbMtdParam._m0[26u].y;
    _190[2u] = cbMtdParam._m0[26u].z;
    _191[2u] = cbMtdParam._m0[26u].w;
    _190[3u] = cbMtdParam._m0[27u].x;
    _191[3u] = cbMtdParam._m0[27u].y;
    _190[4u] = cbMtdParam._m0[25u].z;
    _191[4u] = cbMtdParam._m0[25u].w;
    float _494 = roundEven(5.0 - _346);
    float _495 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _496 = isnan(4.0) ? _495 : (isnan(_495) ? 4.0 : min(_495, 4.0));
    float _498 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    uint _500 = uint(int(isnan(4.0) ? _498 : (isnan(_498) ? 4.0 : min(_498, 4.0))));
    float _506 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _379) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _380) + cbTextureTilingScale._m0[10u].w, _392)).x + _445.w) + _191[_500];
    vec4 _524 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _379) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _380) + cbTextureTilingScale._m0[9u].w, _392));
    float _531 = (_524.x * 2.0) + (-1.0);
    float _532 = (_524.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3929 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))));
    float _549 = (cbMtdParam._m0[21u].x * (((_449 * 2.0) * (_524.z + _190[_500])) - _449)) + _449;
    float _553 = (cbMtdParam._m0[21u].y * ((_445.x * 2.0) + (-1.0))) + _531;
    float _554 = (cbMtdParam._m0[21u].y * ((_445.y * 2.0) + (-1.0))) + _532;
    float _557 = fma(_539, _247, fma(_554, _239 * TANGENT.x, (_225 * _217) * _553));
    float _560 = fma(_539, _248, fma(_554, _239 * TANGENT.y, (_225 * _218) * _553));
    float _563 = fma(_539, _249, fma(_554, _239 * TANGENT.z, (_225 * _219) * _553));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3940 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _571 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3962 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3973 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3984 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _575 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _642 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _632);
    float _643 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _632);
    float _644 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _632);
    float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
    float _649 = _642 * _648;
    float _650 = _643 * _648;
    float _651 = _644 * _648;
    vec4 _656 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _658 = _656.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _881 = sqrt(((_642 * _642) + (_643 * _643)) + (_644 * _644));
        float _887 = (cbMatDynParam._m0[5u].x * _881) + cbMatDynParam._m0[5u].y;
        float _3995 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _892 = (cbMatDynParam._m0[5u].z * _881) + cbMatDynParam._m0[5u].w;
        float _4006 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) - _888)) + _888) < ((_658 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _675 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _677 = _675.w;
    float _696 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _699 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _702 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    vec4 _704 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _715 = (((_704.y - _571) + (_704.w * _571)) * cbMtdParam._m0[3u].x) + _571;
    uint _728 = uint(roundEven(NORMAL.w)) * 13u;
    uint _729 = _728 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_730].z;
    float _4017 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    vec4 _742 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _747 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _758 = (((_747.x - _575) + (_747.w * _575)) * cbMtdParam._m0[3u].x) + _575;
    float _771 = (cbMtdParam._m0[3u].x * (((_739 * _677) - _739) + _742.x)) + _739;
    float _772 = (cbMtdParam._m0[3u].x * (((_740 * _677) - _740) + _742.y)) + _740;
    float _773 = (cbMtdParam._m0[3u].x * (((_741 * _677) - _741) + _742.z)) + _741;
    float _774 = 1.0 - _758;
    float _775 = _774 * _771;
    float _776 = _774 * _772;
    float _777 = _774 * _773;
    float _782 = (_771 + (-0.039999999105930328369140625)) * _758;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _758;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _758;
    float _785 = _782 + 0.039999999105930328369140625;
    float _787 = _783 + 0.039999999105930328369140625;
    float _788 = _784 + 0.039999999105930328369140625;
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _800 = _797.x * TEXCOORD_4;
    float _801 = dot(vec3(_568, _569, _570), vec3(_649, _650, _651));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _568) - _649;
    float _809 = (_804 * _569) - _650;
    float _810 = (_804 * _570) - _651;
    float _814 = abs(dot(vec3(_649, _650, _651), vec3(_568, _569, _570)));
    float _4050 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_715);
    float _827 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _833 = (1.0 - _827) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _834 = _827 * _816;
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1200;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _925 = fma(_870, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862));
        float _929 = fma(_870, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862));
        float _933 = fma(_870, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862));
        float _958 = _862 + _568;
        float _959 = _866 + _569;
        float _960 = _870 + _570;
        float _970 = fma(_960, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958)) - _925;
        float _971 = fma(_960, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958)) - _929;
        float _972 = fma(_960, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958)) - _933;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_925 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_929 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[34u].z) + ((((((_933 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1028 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_994.x + (-0.5));
        float _1030 = _1028 * (_994.y + (-0.5));
        float _1031 = _1028 * (_994.z + (-0.5));
        float _1038 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1001.x + (-0.5));
        float _1040 = _1038 * (_1001.y + (-0.5));
        float _1041 = _1038 * (_1001.z + (-0.5));
        float _1048 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1008.x + (-0.5));
        float _1050 = _1048 * (_1008.y + (-0.5));
        float _1051 = _1048 * (_1008.z + (-0.5));
        float _1058 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1015.x + (-0.5));
        float _1060 = _1058 * (_1015.y + (-0.5));
        float _1061 = _1058 * (_1015.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1082 = (dot(vec3(_568, _569, _570), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1092 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _4098 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1094 + 1.0))) + _1099) * _1062;
        float _1109 = _1030 * 0.5;
        float _1110 = _1040 * 0.5;
        float _1111 = _1050 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_568, _569, _570), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4131 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1136 + 1.0))) + _1141) * _1063;
        float _1151 = _1031 * 0.5;
        float _1152 = _1041 * 0.5;
        float _1153 = _1051 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_568, _569, _570), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4164 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1178 + 1.0))) + _1183) * _1064;
        _1200 = _1031;
        _1202 = _1030;
        _1203 = _1029;
        _1204 = _1041;
        _1205 = _1040;
        _1206 = _1039;
        _1207 = _1051;
        _1208 = _1050;
        _1209 = _1049;
        _1210 = _1064;
        _1211 = _1063;
        _1212 = _1062;
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _1201;
        _1202 = _1201;
        _1203 = _1201;
        _1204 = _1201;
        _1205 = _1201;
        _1206 = _1201;
        _1207 = _1201;
        _1208 = _1201;
        _1209 = _1201;
        _1210 = _1201;
        _1211 = _1201;
        _1212 = _1201;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1244 = fma(_870, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862));
        float _1248 = fma(_870, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862));
        float _1252 = fma(_870, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862));
        float _1275 = _862 + _568;
        float _1276 = _866 + _569;
        float _1277 = _870 + _570;
        float _1287 = fma(_1277, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275)) - _1244;
        float _1288 = fma(_1277, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275)) - _1248;
        float _1289 = fma(_1277, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275)) - _1252;
        float _1293 = inversesqrt(dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289)));
        float _1306 = ((_1293 * _1287) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1244 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1293 * _1288) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1248 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1293 * _1289) / cbModelParam._m0[35u].z) + ((((((_1252 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1343 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1310.x + (-0.5));
        float _1345 = _1343 * (_1310.y + (-0.5));
        float _1346 = _1343 * (_1310.z + (-0.5));
        float _1353 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1317.x + (-0.5));
        float _1355 = _1353 * (_1317.y + (-0.5));
        float _1356 = _1353 * (_1317.z + (-0.5));
        float _1363 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1324.x + (-0.5));
        float _1365 = _1363 * (_1324.y + (-0.5));
        float _1366 = _1363 * (_1324.z + (-0.5));
        float _1373 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1331.x + (-0.5));
        float _1375 = _1373 * (_1331.y + (-0.5));
        float _1376 = _1373 * (_1331.z + (-0.5));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = _1344 * 0.5;
        float _1381 = _1354 * 0.5;
        float _1382 = _1364 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_568, _569, _570), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4227 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1407 + 1.0))) + _1412) * _1377;
        float _1422 = _1345 * 0.5;
        float _1423 = _1355 * 0.5;
        float _1424 = _1365 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_568, _569, _570), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4260 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1449 + 1.0))) + _1454) * _1378;
        float _1464 = _1346 * 0.5;
        float _1465 = _1356 * 0.5;
        float _1466 = _1366 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_568, _569, _570), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4293 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1491 + 1.0))) + _1496) * _1379;
        _1513 = _1346;
        _1514 = _1345;
        _1515 = _1344;
        _1516 = _1356;
        _1517 = _1355;
        _1518 = _1354;
        _1519 = _1366;
        _1520 = _1365;
        _1521 = _1364;
        _1522 = _1379;
        _1523 = _1378;
        _1524 = _1377;
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1201;
        _1514 = _1201;
        _1515 = _1201;
        _1516 = _1201;
        _1517 = _1201;
        _1518 = _1201;
        _1519 = _1201;
        _1520 = _1201;
        _1521 = _1201;
        _1522 = _1201;
        _1523 = _1201;
        _1524 = _1201;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1213)) + _1213;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1214)) + _1214;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1215)) + _1215;
    float _1560 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1537));
    float _1581 = _808 * 0.5;
    float _1582 = _809 * 0.5;
    float _1583 = _810 * 0.5;
    float _1584 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1587 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1590 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1597 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1200, _1204, _1207, _1210));
        float _1601 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1605 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1612 = dot(vec4(cbModelParam._m0[39u]), vec4(_1581, _1582, _1583, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1581, _1582, _1583, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _715);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_870, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_870, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_870, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1711 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1714 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_23_21_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_23_21_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_23_21_ladder = 5000.0;
            }
            _1742 = frontier_phi_23_21_ladder;
        }
        float _1914;
        if (_1711 > 0.0)
        {
            _1914 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1914 = frontier_phi_32_28_ladder;
        }
        float _2209;
        if (_1714 > 0.0)
        {
            _2209 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2209 = frontier_phi_44_39_ladder;
        }
        float _2211 = isnan(_1914) ? _1742 : (isnan(_1742) ? _1914 : min(_1742, _1914));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1708) + _1697;
        float _2217 = (_2212 * _1711) + _1701;
        float _2218 = (_2212 * _1714) + _1705;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2219;
        float _2223 = _2219 + 1.0;
        float frontier_phi_22_44_ladder;
        float frontier_phi_22_44_ladder_1;
        float frontier_phi_22_44_ladder_2;
        if ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 > _2223) || ((_2217 < _2221) || ((_2216 < _2221) || (_2216 > _2223))))))
        {
            frontier_phi_22_44_ladder = 0.0;
            frontier_phi_22_44_ladder_1 = 0.0;
            frontier_phi_22_44_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2218, cbModelParam._m0[9u].z, fma(_2217, cbModelParam._m0[9u].y, _2216 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2218, cbModelParam._m0[10u].z, fma(_2217, cbModelParam._m0[10u].y, _2216 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2218, cbModelParam._m0[11u].z, fma(_2217, cbModelParam._m0[11u].y, _2216 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_22_44_ladder = _2363.x * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_1 = _2363.z * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_2 = _2363.y * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_22_44_ladder;
        _1732 = frontier_phi_22_44_ladder_2;
        _1734 = frontier_phi_22_44_ladder_1;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1650);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _715);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1793 = fma(_870, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862)) + cbModelParam._m0[21u].w;
        float _1797 = fma(_870, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862)) + cbModelParam._m0[22u].w;
        float _1801 = fma(_870, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862)) + cbModelParam._m0[23u].w;
        float _1804 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1807 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1810 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1919;
        if (_1804 > 0.0)
        {
            _1919 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1919 = frontier_phi_34_30_ladder;
        }
        float _2236;
        if (_1807 > 0.0)
        {
            _2236 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2236 = frontier_phi_46_41_ladder;
        }
        float _2574;
        if (_1810 > 0.0)
        {
            _2574 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_56_53_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_56_53_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_56_53_ladder = 5000.0;
            }
            _2574 = frontier_phi_56_53_ladder;
        }
        float _2576 = isnan(_2236) ? _1919 : (isnan(_1919) ? _2236 : min(_1919, _2236));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _1804) + _1793;
        float _2582 = (_2577 * _1807) + _1797;
        float _2583 = (_2577 * _1810) + _1801;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2584;
        float _2587 = _2584 + 1.0;
        float frontier_phi_31_56_ladder;
        float frontier_phi_31_56_ladder_1;
        float frontier_phi_31_56_ladder_2;
        if ((_2583 > _2587) || ((_2583 < _2585) || ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 < _2585) || (_2581 > _2587))))))
        {
            frontier_phi_31_56_ladder = 0.0;
            frontier_phi_31_56_ladder_1 = 0.0;
            frontier_phi_31_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2583, cbModelParam._m0[17u].z, fma(_2582, cbModelParam._m0[17u].y, _2581 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2583, cbModelParam._m0[18u].z, fma(_2582, cbModelParam._m0[18u].y, _2581 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2583, cbModelParam._m0[19u].z, fma(_2582, cbModelParam._m0[19u].y, _2581 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_31_56_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1829 = frontier_phi_31_56_ladder_2;
        _1831 = frontier_phi_31_56_ladder_1;
        _1833 = frontier_phi_31_56_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1739);
        _1829 = _1813.x * cbModelParam._m0[1u].z;
        _1831 = _1813.y * cbModelParam._m0[1u].z;
        _1833 = _1813.z * cbModelParam._m0[1u].z;
    }
    float _1846 = (((_833 * _785) + _834) * _800) * ((cbModelParam._m0[1u].w * (_1829 - _1730)) + _1730);
    float _1848 = (((_833 * _787) + _834) * _800) * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1850 = (((_833 * _788) + _834) * _800) * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1853 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1848, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1856 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1848, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1859 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1848, cbSceneParam._m0[91u].y, _1846 * cbSceneParam._m0[91u].x));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1906 = _1893 / _1905;
    float _1907 = _1897 / _1905;
    float _1908 = _1901 / _1905;
    float _2055;
    float _2056;
    float _2057;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1935 = ((uint(_1908 > cbSceneParam._m0[59u].y) + uint(_1908 > cbSceneParam._m0[59u].x)) + uint(_1908 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1936 = _1935 + 43u;
        uint _1944 = _1935 + 44u;
        uint _1952 = _1935 + 45u;
        uint _1960 = _1935 + 46u;
        float _1971 = fma(_1905, cbSceneParam._m0[_1936].w, fma(_1901, cbSceneParam._m0[_1936].z, fma(_1897, cbSceneParam._m0[_1936].y, _1893 * cbSceneParam._m0[_1936].x)));
        float _1975 = fma(_1905, cbSceneParam._m0[_1944].w, fma(_1901, cbSceneParam._m0[_1944].z, fma(_1897, cbSceneParam._m0[_1944].y, _1893 * cbSceneParam._m0[_1944].x)));
        float _1983 = fma(_1905, cbSceneParam._m0[_1960].w, fma(_1901, cbSceneParam._m0[_1960].z, fma(_1897, cbSceneParam._m0[_1960].y, _1893 * cbSceneParam._m0[_1960].x)));
        float _1988 = cbSceneParam._m0[33u].z * _1983;
        float _1990 = cbSceneParam._m0[33u].w * _1983;
        float _1993 = fma(_1905, cbSceneParam._m0[_1952].w, fma(_1901, cbSceneParam._m0[_1952].z, fma(_1897, cbSceneParam._m0[_1952].y, _1893 * cbSceneParam._m0[_1952].x))) / _1983;
        float _2041 = (cbSceneParam._m0[33u].x - sqrt(((_1907 * _1907) + (_1906 * _1906)) + (_1908 * _1908))) * cbSceneParam._m0[33u].y;
        float _4419 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2048 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 + _1971) / _1983, (_1990 + _1975) / _1983), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 + _1971) / _1983, (_1975 - _1988) / _1983), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 - _1988) / _1983, (_1975 - _1990) / _1983), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 - _1990) / _1983, (_1988 + _1975) / _1983), _1993), 0.0)).x), vec4(0.25)));
        _2055 = 1.0 - (_2048 * cbSceneParam._m0[34u].x);
        _2056 = 1.0 - (_2048 * cbSceneParam._m0[34u].y);
        _2057 = 1.0 - (_2048 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2055 = 1.0;
        _2056 = 1.0;
        _2057 = 1.0;
    }
    float _2121;
    float _2123;
    float _2125;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2109 = fma(_1905, cbSceneParam._m0[63u].w, fma(_1901, cbSceneParam._m0[63u].z, fma(_1897, cbSceneParam._m0[63u].y, _1893 * cbSceneParam._m0[63u].x)));
        float _2110 = fma(_1905, cbSceneParam._m0[60u].w, fma(_1901, cbSceneParam._m0[60u].z, fma(_1897, cbSceneParam._m0[60u].y, _1893 * cbSceneParam._m0[60u].x))) / _2109;
        float _2111 = fma(_1905, cbSceneParam._m0[61u].w, fma(_1901, cbSceneParam._m0[61u].z, fma(_1897, cbSceneParam._m0[61u].y, _1893 * cbSceneParam._m0[61u].x))) / _2109;
        float frontier_phi_43_42_ladder;
        float frontier_phi_43_42_ladder_1;
        float frontier_phi_43_42_ladder_2;
        if ((((_2110 >= cbSceneParam._m0[64u].x) && (_2111 >= cbSceneParam._m0[64u].y)) && (_2110 <= cbSceneParam._m0[64u].z)) && (_2111 <= cbSceneParam._m0[64u].w))
        {
            float _2249 = fma(_1905, cbSceneParam._m0[62u].w, fma(_1901, cbSceneParam._m0[62u].z, fma(_1897, cbSceneParam._m0[62u].y, _1893 * cbSceneParam._m0[62u].x))) / _2109;
            float _2253 = isnan(cbSceneParam._m0[41u].w) ? _2249 : (isnan(_2249) ? cbSceneParam._m0[41u].w : max(_2249, cbSceneParam._m0[41u].w));
            float _2296 = (cbSceneParam._m0[33u].x - sqrt(((_1907 * _1907) + (_1906 * _1906)) + (_1908 * _1908))) * cbSceneParam._m0[33u].y;
            float _4435 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
            float _2303 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2110, cbSceneParam._m0[33u].w + _2111), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2110, _2111 - cbSceneParam._m0[33u].z), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2110 - cbSceneParam._m0[33u].z, _2111 - cbSceneParam._m0[33u].w), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2110 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2111), _2253), 0.0)).x), vec4(0.25)));
            float _2307 = 1.0 - (_2303 * cbSceneParam._m0[34u].x);
            float _2308 = 1.0 - (_2303 * cbSceneParam._m0[34u].y);
            float _2309 = 1.0 - (_2303 * cbSceneParam._m0[34u].z);
            frontier_phi_43_42_ladder = isnan(_2309) ? _2057 : (isnan(_2057) ? _2309 : min(_2057, _2309));
            frontier_phi_43_42_ladder_1 = isnan(_2308) ? _2056 : (isnan(_2056) ? _2308 : min(_2056, _2308));
            frontier_phi_43_42_ladder_2 = isnan(_2307) ? _2055 : (isnan(_2055) ? _2307 : min(_2055, _2307));
        }
        else
        {
            frontier_phi_43_42_ladder = _2057;
            frontier_phi_43_42_ladder_1 = _2056;
            frontier_phi_43_42_ladder_2 = _2055;
        }
        _2121 = frontier_phi_43_42_ladder_2;
        _2123 = frontier_phi_43_42_ladder_1;
        _2125 = frontier_phi_43_42_ladder;
    }
    else
    {
        _2121 = _2055;
        _2123 = _2056;
        _2125 = _2057;
    }
    uvec4 _2130 = floatBitsToUint(cbInstanceData._m0[_728 + 5u]);
    uint _2132 = _2130.x * 14u;
    uint _2133 = _2132 + 13u;
    float _2140 = _800 + (-1.0);
    float _2145 = (cbLight._m0[_2133].x * _2140) + 1.0;
    float _2146 = (cbLight._m0[_2133].y * _2140) + 1.0;
    float _2147 = (cbLight._m0[_2133].z * _2140) + 1.0;
    float _2148 = (cbLight._m0[_2133].w * _2140) + 1.0;
    uint _2149 = _2132 + 5u;
    float _2155 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2159 = _2132 + 4u;
    float _2168 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2172 = _2132 | 1u;
    float _2183 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_568, _569, _570));
    float _2186 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_568, _569, _570));
    float _4471 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _4482 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2191 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2193 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2200 = ((cbLight._m0[_2149].x * _2155) * _2193) + (((cbLight._m0[_2159].x * _2121) * _2168) * _2191);
    float _2201 = ((_2155 * cbLight._m0[_2149].y) * _2193) + (((cbLight._m0[_2159].y * _2123) * _2168) * _2191);
    float _2202 = ((_2155 * cbLight._m0[_2149].z) * _2193) + (((cbLight._m0[_2159].z * _2125) * _2168) * _2191);
    uvec4 _2206 = floatBitsToUint(cbLight._m0[_2132 + 12u]);
    bool _2208 = _2206.x == 0u;
    float _2310;
    float _2312;
    float _2314;
    if (_2208)
    {
        _2310 = _2200;
        _2312 = _2201;
        _2314 = _2202;
    }
    else
    {
        uint _2318 = _2132 + 6u;
        float _2334 = (dot(vec3(cbLight._m0[_2132 + 2u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4493 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2337 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2310 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2200;
        _2312 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2201;
        _2314 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2202;
    }
    bool _2317 = _2206.y == 0u;
    float _2372;
    float _2374;
    float _2376;
    if (_2317)
    {
        _2372 = _2310;
        _2374 = _2312;
        _2376 = _2314;
    }
    else
    {
        uint _2545 = _2132 + 7u;
        float _2561 = (dot(vec3(cbLight._m0[_2132 + 3u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4509 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2564 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2372 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2310;
        _2374 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2312;
        _2376 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2314;
    }
    uint _2379 = _2132 + 8u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _715) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2132].x + _649;
    float _2395 = cbLight._m0[_2132].y + _650;
    float _2396 = cbLight._m0[_2132].z + _651;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2132].xyz));
    float _4525 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _4536 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2408 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2409 = dot(vec3(_568, _569, _570), vec3(_2401, _2402, _2403));
    float _4547 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2413 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2401, _2402, _2403));
    float _4558 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2417 = _2393 * _2393;
    float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
    float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2430 = 0.959999978542327880859375 - _782;
    float _2432 = 0.959999978542327880859375 - _783;
    float _2433 = 0.959999978542327880859375 - _784;
    float _2440 = 1.0 - _2393;
    float _2451 = (0.5 / (((_2408 * ((_2407 * _2440) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2440) + _2393) * _2407))) * _2407;
    float _4569 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
    uint _2467 = _2132 + 9u;
    float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _715) * 0.949999988079071044921875);
    float _2479 = _2478 * _2478;
    float _2480 = cbLight._m0[_2172].x + _649;
    float _2481 = cbLight._m0[_2172].y + _650;
    float _2482 = cbLight._m0[_2172].z + _651;
    float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
    float _2487 = _2486 * _2480;
    float _2488 = _2486 * _2481;
    float _2489 = _2486 * _2482;
    float _2490 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2172].xyz));
    float _4580 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2494 = dot(vec3(_568, _569, _570), vec3(_2487, _2488, _2489));
    float _4591 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2487, _2488, _2489));
    float _4602 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2479 * _2479;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2520 = 1.0 - _2479;
    float _2530 = (0.5 / (((_2408 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2520) + _2479) * _2493))) * _2493;
    float _4613 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2532 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    float _2542 = (((((_2513 * _2430) + _785) * cbLight._m0[_2467].x) * _2532) * _2155) + ((((cbLight._m0[_2379].x * _2121) * ((_2429 * _2430) + _785)) * _2453) * _2168);
    float _2543 = (((((_2513 * _2432) + _787) * cbLight._m0[_2467].y) * _2532) * _2155) + ((((cbLight._m0[_2379].y * _2123) * ((_2429 * _2432) + _787)) * _2453) * _2168);
    float _2544 = (((((_2513 * _2433) + _788) * cbLight._m0[_2467].z) * _2532) * _2155) + ((((cbLight._m0[_2379].z * _2125) * ((_2429 * _2433) + _788)) * _2453) * _2168);
    float _2600;
    float _2602;
    float _2604;
    if (_2208)
    {
        _2600 = _2542;
        _2602 = _2543;
        _2604 = _2544;
    }
    else
    {
        uint _2606 = _2132 + 2u;
        uint _2610 = _2132 + 10u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _715) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _649;
        float _2627 = cbLight._m0[_2606].y + _650;
        float _2628 = cbLight._m0[_2606].z + _651;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2606].xyz));
        float _4624 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2640 = dot(vec3(_568, _569, _570), vec3(_2633, _2634, _2635));
        float _4635 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4646 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
        float _2666 = 1.0 - _2625;
        float _2676 = (0.5 / (((_2408 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2666) + _2625) * _2639))) * _2639;
        float _4657 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2600 = (((((_2659 * _2430) + _785) * cbLight._m0[_2610].x) * _2678) * _2679) + _2542;
        _2602 = (((((_2659 * _2432) + _787) * cbLight._m0[_2610].y) * _2678) * _2679) + _2543;
        _2604 = (((((_2659 * _2433) + _788) * cbLight._m0[_2610].z) * _2678) * _2679) + _2544;
    }
    float _2710;
    float _2712;
    float _2714;
    if (_2317)
    {
        _2710 = _2600;
        _2712 = _2602;
        _2714 = _2604;
    }
    else
    {
        uint _2721 = _2132 + 3u;
        uint _2725 = _2132 + 11u;
        float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2721].w)) * _715) * 0.949999988079071044921875);
        float _2740 = _2739 * _2739;
        float _2741 = cbLight._m0[_2721].x + _649;
        float _2742 = cbLight._m0[_2721].y + _650;
        float _2743 = cbLight._m0[_2721].z + _651;
        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
        float _2748 = _2747 * _2741;
        float _2749 = _2747 * _2742;
        float _2750 = _2747 * _2743;
        float _2751 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2721].xyz));
        float _4673 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2755 = dot(vec3(_568, _569, _570), vec3(_2748, _2749, _2750));
        float _4684 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2759 = dot(vec3(cbLight._m0[_2721].xyz), vec3(_2748, _2749, _2750));
        float _4695 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2763 = _2740 * _2740;
        float _2767 = ((_2758 * _2758) * (_2763 + (-1.0))) + 1.0;
        float _2774 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2781 = 1.0 - _2740;
        float _2791 = (0.5 / (((_2408 * ((_2754 * _2781) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2781) + _2740) * _2754))) * _2754;
        float _4706 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2793 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2763 / ((_2767 * _2767) * 3.141590118408203125));
        float _2794 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2710 = (((((_2774 * _2430) + _785) * cbLight._m0[_2725].x) * _2793) * _2794) + _2600;
        _2712 = (((((_2774 * _2432) + _787) * cbLight._m0[_2725].y) * _2793) * _2794) + _2602;
        _2714 = (((((_2774 * _2433) + _788) * cbLight._m0[_2725].z) * _2793) * _2794) + _2604;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2130.y == 0u)
    {
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.x;
        uint _2827 = uint((float(_2815.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _2816))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _2816)));
        float _2837 = (log2(_1908 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2838 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        uint _2841 = uint(isnan(14.0) ? _2838 : (isnan(_2838) ? 14.0 : min(_2838, 14.0)));
        uvec4 _2846 = texelFetch(g_lightClusterGridBuffer, int(((_2841 << 2u) + (_2827 << 6u)) >> 2u));
        uint _2847 = _2846.x;
        uint _2848 = _2815.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2848 >> 4u) & 15u)) + 4294967295u) & _2847) == 0u) || ((_2848 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            uint _3102 = 0u;
            uint _3111;
            bool _3112;
            for (;;)
            {
                _3111 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                _3112 = _3111 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_3112)
                {
                    frontier_phi_77_pred = _3101;
                    frontier_phi_77_pred_1 = _3100;
                    frontier_phi_77_pred_2 = _3099;
                    frontier_phi_77_pred_3 = _3098;
                    frontier_phi_77_pred_4 = _3096;
                    frontier_phi_77_pred_5 = _3097;
                }
                else
                {
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    uint _3247;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3111;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    for (;;)
                    {
                        uint _3251 = uint(findLSB(_3247)) + (_3102 << 5u);
                        uint _3248 = (_3247 + 4294967295u) & _3247;
                        uint _3253 = _3251 * 48u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3273 = (_3251 * 48u) + 4u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3292 = (_3251 * 48u) + 8u;
                        vec3 _3303 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x));
                        float _3307 = _3267.x - _1906;
                        float _3308 = _3267.y - _1907;
                        float _3309 = _3267.z - _1908;
                        float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                        float _3313 = inversesqrt(_3310);
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3317 = dot(vec3(_696, _699, _702), vec3(_3314, _3315, _3316));
                        float _3322 = 1.0 - (_3310 * _3267.w);
                        float _4732 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3324 = sqrt(_3310) * _3286.w;
                        float _3327 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3317) + _3328;
                        float _3334 = _3324 * _3324;
                        float _3338 = ((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3323) / ((_3334 * 0.699999988079071044921875) + 1.0);
                        float _3342 = (-0.0) - _1906;
                        float _3343 = (-0.0) - _1907;
                        float _3344 = (-0.0) - _1908;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3358 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                        float _3359 = 1.0 - _816;
                        float _3366 = sqrt(1.0 - ((1.0 - (_3359 * _3359)) * (1.0 - (_3358 * _3358))));
                        float _3367 = _3366 * _3366;
                        float _3368 = _3367 * _3367;
                        float _3369 = _3349 + _3314;
                        float _3370 = _3350 + _3315;
                        float _3371 = _3351 + _3316;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3379 = dot(vec3(_696, _699, _702), vec3(_3349, _3350, _3351));
                        float _4748 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3383 = dot(vec3(_696, _699, _702), vec3(_3375 * _3369, _3375 * _3370, _3375 * _3371));
                        float _4759 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3390 = ((_3386 * _3386) * (_3368 + (-1.0))) + 1.0;
                        float _3391 = _3327 * _3367;
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3317) + _3392;
                        float _4770 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3397 = 1.0 - _3367;
                        float _3407 = (0.5 / (((_3396 * ((_3382 * _3397) + _3367)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3367) * _3382))) * _3396;
                        float _4781 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3418 = (((_3368 * 3.1415927410125732421875) * (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) / ((_3390 * _3390) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125))) * _3323;
                        _3171 = (_3338 * _3286.x) + _3244;
                        _3172 = (_3338 * _3286.y) + _3245;
                        _3173 = (_3338 * _3286.z) + _3246;
                        _3168 = (_3418 * _3303.x) + _3241;
                        _3169 = (_3418 * _3303.y) + _3242;
                        _3170 = (_3418 * _3303.z) + _3243;
                        if (_3248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3248;
                        }
                    }
                    frontier_phi_77_pred = _3173;
                    frontier_phi_77_pred_1 = _3172;
                    frontier_phi_77_pred_2 = _3171;
                    frontier_phi_77_pred_3 = _3170;
                    frontier_phi_77_pred_4 = _3168;
                    frontier_phi_77_pred_5 = _3169;
                }
                _2955 = frontier_phi_77_pred;
                _2953 = frontier_phi_77_pred_1;
                _2951 = frontier_phi_77_pred_2;
                _2949 = frontier_phi_77_pred_3;
                _2945 = frontier_phi_77_pred_4;
                _2947 = frontier_phi_77_pred_5;
                uint _3103 = _3102 + 1u;
                if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3096 = _2945;
                    _3097 = _2947;
                    _3098 = _2949;
                    _3099 = _2951;
                    _3100 = _2953;
                    _3101 = _2955;
                    _3102 = _3103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((4294967295u << _2961) & _2847) == 0u)
        {
            _3064 = _2944;
            _3066 = _2946;
            _3068 = _2948;
            _3070 = _2950;
            _3072 = _2952;
            _3074 = _2954;
        }
        else
        {
            float _3089 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
            float _3090 = _3089 * _1906;
            float _3091 = _3089 * _1907;
            float _3092 = _3089 * _1908;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3224 = _2944;
                float _3225 = _2946;
                float _3226 = _2948;
                float _3227 = _2950;
                float _3228 = _2952;
                float _3229 = _2954;
                uint _3230 = _2961;
                uint _3239;
                bool _3240;
                for (;;)
                {
                    _3239 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3230 << 2u)) >> 2u)).x;
                    _3240 = _3239 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_3240)
                    {
                        frontier_phi_88_pred = _3225;
                        frontier_phi_88_pred_1 = _3224;
                        frontier_phi_88_pred_2 = _3229;
                        frontier_phi_88_pred_3 = _3228;
                        frontier_phi_88_pred_4 = _3227;
                        frontier_phi_88_pred_5 = _3226;
                    }
                    else
                    {
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3445 = _3224;
                        float _3446 = _3225;
                        float _3447 = _3226;
                        float _3448 = _3227;
                        float _3449 = _3228;
                        float _3450 = _3229;
                        uint _3451 = _3239;
                        uint _3452;
                        vec4 _3477;
                        float _3478;
                        vec4 _3493;
                        vec3 _3505;
                        vec4 _3520;
                        vec4 _3535;
                        float _3581;
                        bool _3582;
                        for (;;)
                        {
                            uint _3462 = ((_3230 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3451));
                            _3452 = (_3451 + 4294967295u) & _3451;
                            uint _3464 = _3462 * 40u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3478 = _3477.w;
                            uint _3480 = (_3462 * 40u) + 4u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3462 * 40u) + 8u;
                            _3505 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x));
                            uint _3507 = (_3462 * 40u) + 16u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3462 * 40u) + 20u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3462 * 40u) + 24u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3556 = (_3462 * 40u) + 28u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3581 = fma(_1908, _3569.z, fma(_1907, _3569.y, _3569.x * _1906)) + _3569.w;
                            _3582 = !((fma(_1908, _3550.z, fma(_1907, _3550.y, _3550.x * _1906)) + _3550.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3582)
                            {
                                float _3609 = _3477.x - _1906;
                                float _3610 = _3477.y - _1907;
                                float _3611 = _3477.z - _1908;
                                float _3612 = dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611));
                                float _3615 = inversesqrt(_3612);
                                float _3616 = _3615 * _3609;
                                float _3617 = _3615 * _3610;
                                float _3618 = _3615 * _3611;
                                float _3622 = 1.0 - (_3612 / (_3478 * _3478));
                                float _4792 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3627 = sqrt(_3612) * _3493.w;
                                float _3629 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                                float _3630 = _3629 * _3629;
                                float _3633 = ((1.0 - _3630) * dot(vec3(_3616, _3617, _3618), vec3(_696, _699, _702))) + _3630;
                                float _3636 = _3627 * _3627;
                                float _3640 = (fma(_1908, _3520.z, fma(_1907, _3520.y, _3520.x * _1906)) + _3520.w) / _3581;
                                float _3641 = (fma(_1908, _3535.z, fma(_1907, _3535.y, _3535.x * _1906)) + _3535.w) / _3581;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4808 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3647 = _3646 * (((isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0))) * _3623) / ((_3636 * 0.699999988079071044921875) + 1.0));
                                float _3659 = exp2(log2(1.0 / ((_3636 * 3.5) + 5.0)) * 0.25);
                                float _3660 = 1.0 - _816;
                                float _3667 = sqrt(1.0 - ((1.0 - (_3660 * _3660)) * (1.0 - (_3659 * _3659))));
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3616 - _3090;
                                float _3671 = _3617 - _3091;
                                float _3672 = _3618 - _3092;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_696, _699, _702), vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092));
                                float _4819 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3684 = dot(vec3(_696, _699, _702), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4830 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3629 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_696, _699, _702), vec3(_3616, _3617, _3618))) + _3693;
                                float _4841 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4852 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3646 * _3623) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3691 * _3691) * ((_3636 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3721 * _3505.y;
                                frontier_phi_94_pred_1 = _3721 * _3505.x;
                                frontier_phi_94_pred_2 = _3647 * _3493.z;
                                frontier_phi_94_pred_3 = _3647 * _3493.y;
                                frontier_phi_94_pred_4 = _3647 * _3493.x;
                                frontier_phi_94_pred_5 = _3721 * _3505.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3726 = frontier_phi_94_pred;
                            _3725 = frontier_phi_94_pred_1;
                            _3730 = frontier_phi_94_pred_2;
                            _3729 = frontier_phi_94_pred_3;
                            _3728 = frontier_phi_94_pred_4;
                            _3727 = frontier_phi_94_pred_5;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            if (_3452 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3452;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3433;
                        frontier_phi_88_pred_1 = _3432;
                        frontier_phi_88_pred_2 = _3437;
                        frontier_phi_88_pred_3 = _3436;
                        frontier_phi_88_pred_4 = _3435;
                        frontier_phi_88_pred_5 = _3434;
                    }
                    _3067 = frontier_phi_88_pred;
                    _3065 = frontier_phi_88_pred_1;
                    _3075 = frontier_phi_88_pred_2;
                    _3073 = frontier_phi_88_pred_3;
                    _3071 = frontier_phi_88_pred_4;
                    _3069 = frontier_phi_88_pred_5;
                    uint _3231 = _3230 + 1u;
                    if (_3231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3224 = _3065;
                        _3225 = _3067;
                        _3226 = _3069;
                        _3227 = _3071;
                        _3228 = _3073;
                        _3229 = _3075;
                        _3230 = _3231;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _3075;
                frontier_phi_69_70_ladder_1 = _3071;
                frontier_phi_69_70_ladder_2 = _3069;
                frontier_phi_69_70_ladder_3 = _3067;
                frontier_phi_69_70_ladder_4 = _3065;
                frontier_phi_69_70_ladder_5 = _3073;
            }
            else
            {
                frontier_phi_69_70_ladder = _2954;
                frontier_phi_69_70_ladder_1 = _2950;
                frontier_phi_69_70_ladder_2 = _2948;
                frontier_phi_69_70_ladder_3 = _2946;
                frontier_phi_69_70_ladder_4 = _2944;
                frontier_phi_69_70_ladder_5 = _2952;
            }
            _3064 = frontier_phi_69_70_ladder_4;
            _3066 = frontier_phi_69_70_ladder_3;
            _3068 = frontier_phi_69_70_ladder_2;
            _3070 = frontier_phi_69_70_ladder_1;
            _3072 = frontier_phi_69_70_ladder_5;
            _3074 = frontier_phi_69_70_ladder;
        }
        float _3079 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2859 = (_3079 * _3070) + _2372;
        _2861 = (_3079 * _3072) + _2374;
        _2863 = (_3079 * _3074) + _2376;
        _2865 = ((_3064 * _785) * _3079) + _2710;
        _2867 = ((_3066 * _787) * _3079) + _2712;
        _2869 = ((_3068 * _788) * _3079) + _2714;
    }
    else
    {
        _2859 = _2372;
        _2861 = _2374;
        _2863 = _2376;
        _2865 = _2710;
        _2867 = _2712;
        _2869 = _2714;
    }
    vec4 _2875 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4868 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4879 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4890 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _2899 = (((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2859 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _800))) + ((_2865 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1639)) * cbPerFrame._m0[3u].x)) + (_2875.x * cbMtdParam._m0[3u].x);
    float _2901 = ((_2875.y * cbMtdParam._m0[3u].x) + ((_2867 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2861 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _800)));
    float _2903 = ((_2875.z * cbMtdParam._m0[3u].x) + ((_2869 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1639)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2863 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _800)));
    float _2904 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    float _2905 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
    float _2906 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
    uint _2907 = _728 + 6u;
    float _2915 = _672 / cbSceneParam._m0[86u].x;
    float _2916 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2930 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2932 = _2930.x;
    float _2933 = _2930.y;
    float _2934 = _2930.z;
    float _2935 = _2930.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2970 = _2969 / _591;
        float _2981 = _2970 * _642;
        float _2982 = _643 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2984 = _2970 * _644;
        float _2986 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2982;
        float _2994 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3181;
        if (abs((_2983 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3181 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3125 = 1.0 / cbSceneParam._m0[80u].x;
            float _3126 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3127 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            _3181 = ((abs(_2994 / _2983) * cbSceneParam._m0[80u].y) * ((((_3136 - _3137) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))))) * _3125)) - ((exp2(_3004 * _3136) - exp2(_3004 * _3137)) * _3125))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3183 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2915, _2916, 1.0), 0.0);
        float _3192 = exp2((_3181 * (-1.44269502162933349609375)) * (1.0 - _3183.w));
        float _3193 = log2(_3192);
        float _3209 = log2(_2935);
        _3006 = (exp2(_3209 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].x)) * _3183.x) / cbSceneParam._m0[78u].x)) + _2932;
        _3008 = (exp2(_3209 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].y)) * _3183.y) / cbSceneParam._m0[78u].y)) + _2933;
        _3010 = (exp2(_3209 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].z)) * _3183.z) / cbSceneParam._m0[78u].z)) + _2934;
        _3012 = _3192 * _2935;
    }
    else
    {
        _3006 = _2932;
        _3008 = _2933;
        _3010 = _2934;
        _3012 = _2935;
    }
    bool _3219;
    vec4 _3022;
    vec4 _3044;
    float _3046;
    float _3050;
    float _3051;
    float _3052;
    float _3053;
    bool _3063;
    for (;;)
    {
        _3022 = cbMatDynParam._m0[0u];
        float _3024 = roundEven(_3022.y);
        bool _3025 = _3024 == 3.0;
        float _3026 = log2(_3012);
        float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * _2904;
        float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * _2905;
        float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * _2906;
        float _3042 = _658 + (-0.5);
        _3044 = cbMtdParam._m0[1u];
        _3046 = _3044.y * _3042;
        float _3049 = (_3024 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3050 = _3049 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3006)));
        _3051 = _3049 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3008)));
        _3052 = _3049 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3010)));
        _3053 = _3042 * 0.999000012874603271484375;
        _3063 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3063)
        {
            if ((cbInstanceData._m0[_728 + 7u].x + _3053) < 0.5)
            {
                _3219 = true;
                break;
            }
        }
        uint _3160 = _729 + uint(_3022.w);
        if ((cbInstanceData._m0[_3160].w < 1.0) && ((cbInstanceData._m0[_3160].w + _3053) < 0.5))
        {
            _3219 = true;
            break;
        }
        if ((_3046 + 1.0) < _3044.x)
        {
            _3219 = true;
            break;
        }
        _3219 = false;
        break;
    }
    float _3423;
    if (_3219)
    {
        discard_state = true;
        _3423 = 0.0;
    }
    else
    {
        _3423 = cbInstanceData._m0[_2907].w;
    }
    SV_Target.x = _3050;
    SV_Target.y = _3051;
    SV_Target.z = _3052;
    SV_Target.w = _3423;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2907].w;
    discard_exit();
}


