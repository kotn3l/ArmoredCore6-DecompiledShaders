#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1053;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _255 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _260 = log2(0.0);
    bool _263 = exp2(_260 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _264;
    float _266;
    float _268;
    if (_263)
    {
        _264 = cbMtdParam._m0[19u].x;
        _266 = cbMtdParam._m0[19u].y;
        _268 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _264 = cbMtdParam._m0[18u].x;
        _266 = cbMtdParam._m0[18u].y;
        _268 = cbMtdParam._m0[18u].z;
    }
    float _274;
    if (_263)
    {
        _274 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _274 = cbMtdParam._m0[20u].z;
    }
    float _280;
    float _282;
    if (_263)
    {
        _280 = cbMtdParam._m0[28u].z;
        _282 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _280 = cbMtdParam._m0[24u].x;
        _282 = cbMtdParam._m0[24u].y;
    }
    float _284 = _280 * TEXCOORD.x;
    float _285 = _282 * TEXCOORD.y;
    float _297 = floor(_274);
    vec4 _300 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _284) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _285) + cbTextureTilingScale._m0[8u].w, _297));
    vec4 _323 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    float _332 = (((_264 * cbMtdParam._m0[20u].w) * _300.x) * cbMtdParam._m0[9u].x) * _323.x;
    float _336 = (((_266 * cbMtdParam._m0[20u].w) * _300.y) * cbMtdParam._m0[9u].y) * _323.y;
    float _340 = (((_268 * cbMtdParam._m0[20u].w) * _300.z) * cbMtdParam._m0[9u].z) * _323.z;
    vec4 _352 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _356 = _352.z;
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[27u].z;
    _184[0u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _184[1u] = cbMtdParam._m0[28u].y;
    float _387 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _390 = uint(int(isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0))));
    float _396 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _284) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _285) + cbTextureTilingScale._m0[10u].w, _297)).x + _352.w) + _184[_390];
    vec4 _414 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w, _297));
    float _421 = (_414.x * 2.0) + (-1.0);
    float _422 = (_414.y * 2.0) + (-1.0);
    float _423 = dot(vec2(_421, _422), vec2(_421, _422));
    float _3701 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = sqrt(1.0 - (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))));
    float _437 = (cbMtdParam._m0[21u].x * (((_356 * 2.0) * (_414.z + _183[_390])) - _356)) + _356;
    float _441 = (cbMtdParam._m0[21u].y * ((_352.x * 2.0) + (-1.0))) + _421;
    float _442 = (cbMtdParam._m0[21u].y * ((_352.y * 2.0) + (-1.0))) + _422;
    float _445 = fma(_428, _234, fma(_442, _226 * TANGENT.x, (_212 * _204) * _441));
    float _448 = fma(_428, _235, fma(_442, _226 * TANGENT.y, (_212 * _205) * _441));
    float _451 = fma(_428, _236, fma(_442, _226 * TANGENT.z, (_212 * _206) * _441));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    float _456 = _455 * _445;
    float _457 = _455 * _448;
    float _458 = _455 * _451;
    float _3712 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _459 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3734 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3745 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3756 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _463 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _548 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _550 = _548.w;
    float _571 = fma(_458, cbSceneParam._m0[5u].z, fma(_457, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _456));
    float _574 = fma(_458, cbSceneParam._m0[6u].z, fma(_457, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _456));
    float _577 = fma(_458, cbSceneParam._m0[7u].z, fma(_457, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _456));
    vec4 _579 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _590 = (((_579.y - _459) + (_579.w * _459)) * cbMtdParam._m0[3u].x) + _459;
    uint _603 = uint(roundEven(NORMAL.w)) * 13u;
    uint _606 = (_603 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _612 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_606].x;
    float _613 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_606].y;
    float _614 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_606].z;
    float _3767 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    vec4 _618 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _623 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _634 = (((_623.x - _463) + (_623.w * _463)) * cbMtdParam._m0[3u].x) + _463;
    float _647 = (cbMtdParam._m0[3u].x * (((_615 * _550) - _615) + _618.x)) + _615;
    float _648 = (cbMtdParam._m0[3u].x * (((_616 * _550) - _616) + _618.y)) + _616;
    float _649 = (cbMtdParam._m0[3u].x * (((_617 * _550) - _617) + _618.z)) + _617;
    float _650 = 1.0 - _634;
    float _651 = _650 * _647;
    float _652 = _650 * _648;
    float _653 = _650 * _649;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _634;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _634;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _634;
    float _661 = _658 + 0.039999999105930328369140625;
    float _663 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    vec4 _673 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _676 = _673.x * TEXCOORD_4;
    float _677 = dot(vec3(_456, _457, _458), vec3(_537, _538, _539));
    float _680 = _677 * 2.0;
    float _684 = (_680 * _456) - _537;
    float _685 = (_680 * _457) - _538;
    float _686 = (_680 * _458) - _539;
    float _690 = abs(dot(vec3(_537, _538, _539), vec3(_456, _457, _458)));
    float _3800 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _692 = sqrt(_590);
    float _705 = exp2((_692 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_692 * 3.0));
    float _711 = (1.0 - _705) * ((_692 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _712 = _705 * _692;
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1052;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _777 = fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740));
        float _781 = fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740));
        float _785 = fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740));
        float _810 = _740 + _456;
        float _811 = _744 + _457;
        float _812 = _748 + _458;
        float _822 = fma(_812, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810)) - _777;
        float _823 = fma(_812, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810)) - _781;
        float _824 = fma(_812, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810)) - _785;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_777 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_781 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[34u].z) + ((((((_785 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _880 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_846.x + (-0.5));
        float _882 = _880 * (_846.y + (-0.5));
        float _883 = _880 * (_846.z + (-0.5));
        float _890 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_853.x + (-0.5));
        float _892 = _890 * (_853.y + (-0.5));
        float _893 = _890 * (_853.z + (-0.5));
        float _900 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_860.x + (-0.5));
        float _902 = _900 * (_860.y + (-0.5));
        float _903 = _900 * (_860.z + (-0.5));
        float _910 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_867.x + (-0.5));
        float _912 = _910 * (_867.y + (-0.5));
        float _913 = _910 * (_867.z + (-0.5));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = _881 * 0.5;
        float _918 = _891 * 0.5;
        float _919 = _901 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _934 = (dot(vec3(_456, _457, _458), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _944 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3848 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_946 + 1.0))) + _951) * _914;
        float _961 = _882 * 0.5;
        float _962 = _892 * 0.5;
        float _963 = _902 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_456, _457, _458), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3881 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_988 + 1.0))) + _993) * _915;
        float _1003 = _883 * 0.5;
        float _1004 = _893 * 0.5;
        float _1005 = _903 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_456, _457, _458), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3914 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1030 + 1.0))) + _1035) * _916;
        _1052 = _883;
        _1054 = _882;
        _1055 = _881;
        _1056 = _893;
        _1057 = _892;
        _1058 = _891;
        _1059 = _903;
        _1060 = _902;
        _1061 = _901;
        _1062 = _916;
        _1063 = _915;
        _1064 = _914;
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = _1053;
        _1054 = _1053;
        _1055 = _1053;
        _1056 = _1053;
        _1057 = _1053;
        _1058 = _1053;
        _1059 = _1053;
        _1060 = _1053;
        _1061 = _1053;
        _1062 = _1053;
        _1063 = _1053;
        _1064 = _1053;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1093 = fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740));
        float _1097 = fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740));
        float _1101 = fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740));
        float _1124 = _740 + _456;
        float _1125 = _744 + _457;
        float _1126 = _748 + _458;
        float _1136 = fma(_1126, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124)) - _1093;
        float _1137 = fma(_1126, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124)) - _1097;
        float _1138 = fma(_1126, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124)) - _1101;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1093 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1097 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[35u].z) + ((((((_1101 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1192 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1159.x + (-0.5));
        float _1194 = _1192 * (_1159.y + (-0.5));
        float _1195 = _1192 * (_1159.z + (-0.5));
        float _1202 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1166.x + (-0.5));
        float _1204 = _1202 * (_1166.y + (-0.5));
        float _1205 = _1202 * (_1166.z + (-0.5));
        float _1212 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1173.x + (-0.5));
        float _1214 = _1212 * (_1173.y + (-0.5));
        float _1215 = _1212 * (_1173.z + (-0.5));
        float _1222 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1180.x + (-0.5));
        float _1224 = _1222 * (_1180.y + (-0.5));
        float _1225 = _1222 * (_1180.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_456, _457, _458), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3977 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1256 + 1.0))) + _1261) * _1226;
        float _1271 = _1194 * 0.5;
        float _1272 = _1204 * 0.5;
        float _1273 = _1214 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_456, _457, _458), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4010 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1298 + 1.0))) + _1303) * _1227;
        float _1313 = _1195 * 0.5;
        float _1314 = _1205 * 0.5;
        float _1315 = _1215 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_456, _457, _458), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4043 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1340 + 1.0))) + _1345) * _1228;
        _1362 = _1195;
        _1363 = _1194;
        _1364 = _1193;
        _1365 = _1205;
        _1366 = _1204;
        _1367 = _1203;
        _1368 = _1215;
        _1369 = _1214;
        _1370 = _1213;
        _1371 = _1228;
        _1372 = _1227;
        _1373 = _1226;
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1053;
        _1363 = _1053;
        _1364 = _1053;
        _1365 = _1053;
        _1366 = _1053;
        _1367 = _1053;
        _1368 = _1053;
        _1369 = _1053;
        _1370 = _1053;
        _1371 = _1053;
        _1372 = _1053;
        _1373 = _1053;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1065)) + _1065;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1066)) + _1066;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1409 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1412 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1415 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1386));
    float _1430 = _684 * 0.5;
    float _1431 = _685 * 0.5;
    float _1432 = _686 * 0.5;
    float _1433 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1436 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1439 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1473;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1446 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1052, _1056, _1059, _1062));
        float _1450 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1454 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1461 = dot(vec4(cbModelParam._m0[39u]), vec4(_1430, _1431, _1432, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1484;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1475 = dot(vec4(cbModelParam._m0[40u]), vec4(_1430, _1431, _1432, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1475) ? 0.0 : (isnan(0.0) ? _1475 : max(0.0, _1475))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1488 = (_1484 * cbModelParam._m0[1u].x) + (_1473 * (1.0 - cbModelParam._m0[1u].x));
    float _1498 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _590);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1498 : min(cbModelParam._m0[25u].z, _1498));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1548 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1552 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1556 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1559 = fma(_686, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684));
        float _1562 = fma(_686, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684));
        float _1565 = fma(_686, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684));
        float _1593;
        if (_1559 > 0.0)
        {
            _1593 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1593 = frontier_phi_22_20_ladder;
        }
        float _1765;
        if (_1562 > 0.0)
        {
            _1765 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1765 = frontier_phi_31_27_ladder;
        }
        float _2061;
        if (_1565 > 0.0)
        {
            _2061 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2061 = frontier_phi_43_38_ladder;
        }
        float _2063 = isnan(_1765) ? _1593 : (isnan(_1593) ? _1765 : min(_1593, _1765));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1559) + _1548;
        float _2069 = (_2064 * _1562) + _1552;
        float _2070 = (_2064 * _1565) + _1556;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2073 = (-1.0) - _2071;
        float _2075 = _2071 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2070 > _2075) || ((_2070 < _2073) || ((_2069 > _2075) || ((_2069 < _2073) || ((_2068 < _2073) || (_2068 > _2075))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2215 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2070, cbModelParam._m0[9u].z, fma(_2069, cbModelParam._m0[9u].y, _2068 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2070, cbModelParam._m0[10u].z, fma(_2069, cbModelParam._m0[10u].y, _2068 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2070, cbModelParam._m0[11u].z, fma(_2069, cbModelParam._m0[11u].y, _2068 * cbModelParam._m0[11u].x))), _1499);
            frontier_phi_21_43_ladder = _2215.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2215.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2215.x * cbModelParam._m0[1u].y;
        }
        _1581 = frontier_phi_21_43_ladder_2;
        _1583 = frontier_phi_21_43_ladder_1;
        _1585 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_684, _685, _686), _1499);
        _1581 = _1569.x * cbModelParam._m0[1u].y;
        _1583 = _1569.y * cbModelParam._m0[1u].y;
        _1585 = _1569.z * cbModelParam._m0[1u].y;
    }
    float _1589 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _590);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1589 : min(cbModelParam._m0[25u].w, _1589));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1643 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1647 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1651 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1654 = fma(_686, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684));
        float _1657 = fma(_686, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684));
        float _1660 = fma(_686, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684));
        float _1770;
        if (_1654 > 0.0)
        {
            _1770 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1770 = frontier_phi_33_29_ladder;
        }
        float _2088;
        if (_1657 > 0.0)
        {
            _2088 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2088 = frontier_phi_45_40_ladder;
        }
        float _2426;
        if (_1660 > 0.0)
        {
            _2426 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2426 = frontier_phi_55_52_ladder;
        }
        float _2428 = isnan(_2088) ? _1770 : (isnan(_1770) ? _2088 : min(_1770, _2088));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1654) + _1643;
        float _2434 = (_2429 * _1657) + _1647;
        float _2435 = (_2429 * _1660) + _1651;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2436;
        float _2439 = _2436 + 1.0;
        float frontier_phi_30_55_ladder;
        float frontier_phi_30_55_ladder_1;
        float frontier_phi_30_55_ladder_2;
        if ((_2435 > _2439) || ((_2435 < _2437) || ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 < _2437) || (_2433 > _2439))))))
        {
            frontier_phi_30_55_ladder = 0.0;
            frontier_phi_30_55_ladder_1 = 0.0;
            frontier_phi_30_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2435, cbModelParam._m0[17u].z, fma(_2434, cbModelParam._m0[17u].y, _2433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2435, cbModelParam._m0[18u].z, fma(_2434, cbModelParam._m0[18u].y, _2433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2435, cbModelParam._m0[19u].z, fma(_2434, cbModelParam._m0[19u].y, _2433 * cbModelParam._m0[19u].x))), _1590);
            frontier_phi_30_55_ladder = _2557.z * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_1 = _2557.y * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_2 = _2557.x * cbModelParam._m0[1u].z;
        }
        _1679 = frontier_phi_30_55_ladder_2;
        _1681 = frontier_phi_30_55_ladder_1;
        _1683 = frontier_phi_30_55_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_684, _685, _686), _1590);
        _1679 = _1663.x * cbModelParam._m0[1u].z;
        _1681 = _1663.y * cbModelParam._m0[1u].z;
        _1683 = _1663.z * cbModelParam._m0[1u].z;
    }
    float _1696 = (((_711 * _661) + _712) * _676) * ((cbModelParam._m0[1u].w * (_1679 - _1581)) + _1581);
    float _1698 = (((_711 * _663) + _712) * _676) * ((cbModelParam._m0[1u].w * (_1681 - _1583)) + _1583);
    float _1700 = (((_711 * _664) + _712) * _676) * ((cbModelParam._m0[1u].w * (_1683 - _1585)) + _1585);
    float _1703 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, _1696 * cbSceneParam._m0[91u].x));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1757 = _1744 / _1756;
    float _1758 = _1748 / _1756;
    float _1759 = _1752 / _1756;
    float _1906;
    float _1907;
    float _1908;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1786 = ((uint(_1759 > cbSceneParam._m0[59u].y) + uint(_1759 > cbSceneParam._m0[59u].x)) + uint(_1759 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1787 = _1786 + 43u;
        uint _1795 = _1786 + 44u;
        uint _1803 = _1786 + 45u;
        uint _1811 = _1786 + 46u;
        float _1822 = fma(_1756, cbSceneParam._m0[_1787].w, fma(_1752, cbSceneParam._m0[_1787].z, fma(_1748, cbSceneParam._m0[_1787].y, _1744 * cbSceneParam._m0[_1787].x)));
        float _1826 = fma(_1756, cbSceneParam._m0[_1795].w, fma(_1752, cbSceneParam._m0[_1795].z, fma(_1748, cbSceneParam._m0[_1795].y, _1744 * cbSceneParam._m0[_1795].x)));
        float _1834 = fma(_1756, cbSceneParam._m0[_1811].w, fma(_1752, cbSceneParam._m0[_1811].z, fma(_1748, cbSceneParam._m0[_1811].y, _1744 * cbSceneParam._m0[_1811].x)));
        float _1839 = cbSceneParam._m0[33u].z * _1834;
        float _1841 = cbSceneParam._m0[33u].w * _1834;
        float _1844 = fma(_1756, cbSceneParam._m0[_1803].w, fma(_1752, cbSceneParam._m0[_1803].z, fma(_1748, cbSceneParam._m0[_1803].y, _1744 * cbSceneParam._m0[_1803].x))) / _1834;
        float _1892 = (cbSceneParam._m0[33u].x - sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759))) * cbSceneParam._m0[33u].y;
        float _4169 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1899 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1839 + _1822) / _1834, (_1841 + _1826) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1841 + _1822) / _1834, (_1826 - _1839) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 - _1839) / _1834, (_1826 - _1841) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 - _1841) / _1834, (_1839 + _1826) / _1834), _1844), 0.0)).x), vec4(0.25)));
        _1906 = 1.0 - (_1899 * cbSceneParam._m0[34u].x);
        _1907 = 1.0 - (_1899 * cbSceneParam._m0[34u].y);
        _1908 = 1.0 - (_1899 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1906 = 1.0;
        _1907 = 1.0;
        _1908 = 1.0;
    }
    float _1972;
    float _1974;
    float _1976;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1960 = fma(_1756, cbSceneParam._m0[63u].w, fma(_1752, cbSceneParam._m0[63u].z, fma(_1748, cbSceneParam._m0[63u].y, _1744 * cbSceneParam._m0[63u].x)));
        float _1961 = fma(_1756, cbSceneParam._m0[60u].w, fma(_1752, cbSceneParam._m0[60u].z, fma(_1748, cbSceneParam._m0[60u].y, _1744 * cbSceneParam._m0[60u].x))) / _1960;
        float _1962 = fma(_1756, cbSceneParam._m0[61u].w, fma(_1752, cbSceneParam._m0[61u].z, fma(_1748, cbSceneParam._m0[61u].y, _1744 * cbSceneParam._m0[61u].x))) / _1960;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1961 >= cbSceneParam._m0[64u].x) && (_1962 >= cbSceneParam._m0[64u].y)) && (_1961 <= cbSceneParam._m0[64u].z)) && (_1962 <= cbSceneParam._m0[64u].w))
        {
            float _2101 = fma(_1756, cbSceneParam._m0[62u].w, fma(_1752, cbSceneParam._m0[62u].z, fma(_1748, cbSceneParam._m0[62u].y, _1744 * cbSceneParam._m0[62u].x))) / _1960;
            float _2105 = isnan(cbSceneParam._m0[41u].w) ? _2101 : (isnan(_2101) ? cbSceneParam._m0[41u].w : max(_2101, cbSceneParam._m0[41u].w));
            float _2148 = (cbSceneParam._m0[33u].x - sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759))) * cbSceneParam._m0[33u].y;
            float _4185 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
            float _2155 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1961, cbSceneParam._m0[33u].w + _1962), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1961, _1962 - cbSceneParam._m0[33u].z), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1961 - cbSceneParam._m0[33u].z, _1962 - cbSceneParam._m0[33u].w), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1961 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1962), _2105), 0.0)).x), vec4(0.25)));
            float _2159 = 1.0 - (_2155 * cbSceneParam._m0[34u].x);
            float _2160 = 1.0 - (_2155 * cbSceneParam._m0[34u].y);
            float _2161 = 1.0 - (_2155 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2161) ? _1908 : (isnan(_1908) ? _2161 : min(_1908, _2161));
            frontier_phi_42_41_ladder_1 = isnan(_2160) ? _1907 : (isnan(_1907) ? _2160 : min(_1907, _2160));
            frontier_phi_42_41_ladder_2 = isnan(_2159) ? _1906 : (isnan(_1906) ? _2159 : min(_1906, _2159));
        }
        else
        {
            frontier_phi_42_41_ladder = _1908;
            frontier_phi_42_41_ladder_1 = _1907;
            frontier_phi_42_41_ladder_2 = _1906;
        }
        _1972 = frontier_phi_42_41_ladder_2;
        _1974 = frontier_phi_42_41_ladder_1;
        _1976 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1972 = _1906;
        _1974 = _1907;
        _1976 = _1908;
    }
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_603 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _676 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2020 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2024 = _1983 | 1u;
    float _2035 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_456, _457, _458));
    float _2038 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_456, _457, _458));
    float _4221 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _4232 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2043 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2045 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2052 = ((cbLight._m0[_2000].x * _2006) * _2045) + (((cbLight._m0[_2010].x * _1972) * _2020) * _2043);
    float _2053 = ((_2006 * cbLight._m0[_2000].y) * _2045) + (((cbLight._m0[_2010].y * _1974) * _2020) * _2043);
    float _2054 = ((_2006 * cbLight._m0[_2000].z) * _2045) + (((cbLight._m0[_2010].z * _1976) * _2020) * _2043);
    uvec4 _2058 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2060 = _2058.x == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2060)
    {
        _2162 = _2052;
        _2164 = _2053;
        _2166 = _2054;
    }
    else
    {
        uint _2170 = _1983 + 6u;
        float _2186 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _2187 = _2186 * _2186;
        float _4243 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2189 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2162 = (((cbLight._m0[_2170].x * 0.3183098733425140380859375) * _2188) * _2189) + _2052;
        _2164 = (((cbLight._m0[_2170].y * 0.3183098733425140380859375) * _2188) * _2189) + _2053;
        _2166 = (((cbLight._m0[_2170].z * 0.3183098733425140380859375) * _2188) * _2189) + _2054;
    }
    bool _2169 = _2058.y == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2169)
    {
        _2224 = _2162;
        _2226 = _2164;
        _2228 = _2166;
    }
    else
    {
        uint _2397 = _1983 + 7u;
        float _2413 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _2414 = _2413 * _2413;
        float _4259 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2415 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2416 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2224 = (((cbLight._m0[_2397].x * 0.3183098733425140380859375) * _2415) * _2416) + _2162;
        _2226 = (((cbLight._m0[_2397].y * 0.3183098733425140380859375) * _2415) * _2416) + _2164;
        _2228 = (((cbLight._m0[_2397].z * 0.3183098733425140380859375) * _2415) * _2416) + _2166;
    }
    uint _2231 = _1983 + 8u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _590) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_1983].x + _537;
    float _2247 = cbLight._m0[_1983].y + _538;
    float _2248 = cbLight._m0[_1983].z + _539;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1983].xyz));
    float _4275 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _2260 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2261 = dot(vec3(_456, _457, _458), vec3(_2253, _2254, _2255));
    float _4297 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2265 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2253, _2254, _2255));
    float _4308 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2269 = _2245 * _2245;
    float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
    float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0);
    float _2282 = 0.959999978542327880859375 - _658;
    float _2284 = 0.959999978542327880859375 - _659;
    float _2285 = 0.959999978542327880859375 - _660;
    float _2292 = 1.0 - _2245;
    float _2303 = (0.5 / (((_2260 * ((_2259 * _2292) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2292) + _2245) * _2259))) * _2259;
    float _4319 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
    uint _2319 = _1983 + 9u;
    float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _590) * 0.949999988079071044921875);
    float _2331 = _2330 * _2330;
    float _2332 = cbLight._m0[_2024].x + _537;
    float _2333 = cbLight._m0[_2024].y + _538;
    float _2334 = cbLight._m0[_2024].z + _539;
    float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
    float _2339 = _2338 * _2332;
    float _2340 = _2338 * _2333;
    float _2341 = _2338 * _2334;
    float _2342 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2024].xyz));
    float _4330 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2346 = dot(vec3(_456, _457, _458), vec3(_2339, _2340, _2341));
    float _4341 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2350 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2339, _2340, _2341));
    float _4352 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2354 = _2331 * _2331;
    float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
    float _2365 = exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0);
    float _2372 = 1.0 - _2331;
    float _2382 = (0.5 / (((_2260 * ((_2345 * _2372) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2372) + _2331) * _2345))) * _2345;
    float _4363 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2384 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
    float _2394 = (((((_2365 * _2282) + _661) * cbLight._m0[_2319].x) * _2384) * _2006) + ((((cbLight._m0[_2231].x * _1972) * ((_2281 * _2282) + _661)) * _2305) * _2020);
    float _2395 = (((((_2365 * _2284) + _663) * cbLight._m0[_2319].y) * _2384) * _2006) + ((((cbLight._m0[_2231].y * _1974) * ((_2281 * _2284) + _663)) * _2305) * _2020);
    float _2396 = (((((_2365 * _2285) + _664) * cbLight._m0[_2319].z) * _2384) * _2006) + ((((cbLight._m0[_2231].z * _1976) * ((_2281 * _2285) + _664)) * _2305) * _2020);
    float _2452;
    float _2454;
    float _2456;
    if (_2060)
    {
        _2452 = _2394;
        _2454 = _2395;
        _2456 = _2396;
    }
    else
    {
        uint _2458 = _1983 + 2u;
        uint _2462 = _1983 + 10u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _590) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _537;
        float _2479 = cbLight._m0[_2458].y + _538;
        float _2480 = cbLight._m0[_2458].z + _539;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2458].xyz));
        float _4374 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2492 = dot(vec3(_456, _457, _458), vec3(_2485, _2486, _2487));
        float _4385 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4396 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0);
        float _2518 = 1.0 - _2477;
        float _2528 = (0.5 / (((_2260 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2518) + _2477) * _2491))) * _2491;
        float _4407 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2531 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2452 = (((((_2511 * _2282) + _661) * cbLight._m0[_2462].x) * _2530) * _2531) + _2394;
        _2454 = (((((_2511 * _2284) + _663) * cbLight._m0[_2462].y) * _2530) * _2531) + _2395;
        _2456 = (((((_2511 * _2285) + _664) * cbLight._m0[_2462].z) * _2530) * _2531) + _2396;
    }
    float _2562;
    float _2564;
    float _2566;
    if (_2169)
    {
        _2562 = _2452;
        _2564 = _2454;
        _2566 = _2456;
    }
    else
    {
        uint _2573 = _1983 + 3u;
        uint _2577 = _1983 + 11u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _590) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _537;
        float _2594 = cbLight._m0[_2573].y + _538;
        float _2595 = cbLight._m0[_2573].z + _539;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2573].xyz));
        float _4423 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2607 = dot(vec3(_456, _457, _458), vec3(_2600, _2601, _2602));
        float _4434 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4445 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
        float _2633 = 1.0 - _2592;
        float _2643 = (0.5 / (((_2260 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2633) + _2592) * _2606))) * _2606;
        float _4456 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2562 = (((((_2626 * _2282) + _661) * cbLight._m0[_2577].x) * _2645) * _2646) + _2452;
        _2564 = (((((_2626 * _2284) + _663) * cbLight._m0[_2577].y) * _2645) * _2646) + _2454;
        _2566 = (((((_2626 * _2285) + _664) * cbLight._m0[_2577].z) * _2645) * _2646) + _2456;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_1981.y == 0u)
    {
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.x;
        uint _2679 = uint((float(_2667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2668))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2668)));
        float _2689 = (log2(_1759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2690 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        uint _2693 = uint(isnan(14.0) ? _2690 : (isnan(_2690) ? 14.0 : min(_2690, 14.0)));
        uvec4 _2698 = texelFetch(g_lightClusterGridBuffer, int(((_2693 << 2u) + (_2679 << 6u)) >> 2u));
        uint _2699 = _2698.x;
        uint _2700 = _2667.z;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((((1u << ((_2700 >> 4u) & 15u)) + 4294967295u) & _2699) == 0u) || ((_2700 & 240u) == 0u))
        {
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
        }
        else
        {
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            uint _2946 = 0u;
            uint _2955;
            bool _2956;
            for (;;)
            {
                _2955 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                _2956 = _2955 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2956)
                {
                    frontier_phi_74_pred = _2944;
                    frontier_phi_74_pred_1 = _2945;
                    frontier_phi_74_pred_2 = _2943;
                    frontier_phi_74_pred_3 = _2942;
                    frontier_phi_74_pred_4 = _2941;
                    frontier_phi_74_pred_5 = _2940;
                }
                else
                {
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    uint _3070;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2955;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3074 = uint(findLSB(_3070)) + (_2946 << 5u);
                        uint _3071 = (_3070 + 4294967295u) & _3070;
                        uint _3076 = _3074 * 48u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3096 = (_3074 * 48u) + 4u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3115 = (_3074 * 48u) + 8u;
                        vec3 _3126 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x));
                        float _3130 = _3090.x - _1757;
                        float _3131 = _3090.y - _1758;
                        float _3132 = _3090.z - _1759;
                        float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                        float _3136 = inversesqrt(_3133);
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3140 = dot(vec3(_571, _574, _577), vec3(_3137, _3138, _3139));
                        float _3145 = 1.0 - (_3133 * _3090.w);
                        float _4482 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3147 = sqrt(_3133) * _3109.w;
                        float _3150 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3140) + _3151;
                        float _3157 = _3147 * _3147;
                        float _3161 = ((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3146) / ((_3157 * 0.699999988079071044921875) + 1.0);
                        float _3165 = (-0.0) - _1757;
                        float _3166 = (-0.0) - _1758;
                        float _3167 = (-0.0) - _1759;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3172 = _3171 * _3165;
                        float _3173 = _3171 * _3166;
                        float _3174 = _3171 * _3167;
                        float _3181 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                        float _3182 = 1.0 - _692;
                        float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                        float _3190 = _3189 * _3189;
                        float _3191 = _3190 * _3190;
                        float _3192 = _3172 + _3137;
                        float _3193 = _3173 + _3138;
                        float _3194 = _3174 + _3139;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3202 = dot(vec3(_571, _574, _577), vec3(_3172, _3173, _3174));
                        float _4498 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3206 = dot(vec3(_571, _574, _577), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                        float _4509 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                        float _3214 = _3150 * _3190;
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3140) + _3215;
                        float _4520 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3220 = 1.0 - _3190;
                        float _3230 = (0.5 / (((_3219 * ((_3205 * _3220) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3219 * _3220) + _3190) * _3205))) * _3219;
                        float _4531 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3241 = (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3213 * _3213) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125))) * _3146;
                        _2999 = (_3161 * _3109.x) + _3067;
                        _3000 = (_3161 * _3109.y) + _3068;
                        _3001 = (_3161 * _3109.z) + _3069;
                        _2996 = (_3241 * _3126.x) + _3064;
                        _2997 = (_3241 * _3126.y) + _3065;
                        _2998 = (_3241 * _3126.z) + _3066;
                        if (_3071 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3071;
                        }
                    }
                    frontier_phi_74_pred = _3000;
                    frontier_phi_74_pred_1 = _3001;
                    frontier_phi_74_pred_2 = _2999;
                    frontier_phi_74_pred_3 = _2998;
                    frontier_phi_74_pred_4 = _2997;
                    frontier_phi_74_pred_5 = _2996;
                }
                _2805 = frontier_phi_74_pred;
                _2807 = frontier_phi_74_pred_1;
                _2803 = frontier_phi_74_pred_2;
                _2801 = frontier_phi_74_pred_3;
                _2799 = frontier_phi_74_pred_4;
                _2797 = frontier_phi_74_pred_5;
                uint _2947 = _2946 + 1u;
                if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2940 = _2797;
                    _2941 = _2799;
                    _2942 = _2801;
                    _2943 = _2803;
                    _2944 = _2805;
                    _2945 = _2807;
                    _2946 = _2947;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
        }
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.z;
        uint _2813 = (_2811 >> 8u) & 15u;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((4294967295u << _2813) & _2699) == 0u)
        {
            _2908 = _2796;
            _2910 = _2798;
            _2912 = _2800;
            _2914 = _2802;
            _2916 = _2804;
            _2918 = _2806;
        }
        else
        {
            float _2933 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
            float _2934 = _2933 * _1757;
            float _2935 = _2933 * _1758;
            float _2936 = _2933 * _1759;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2813 < ((_2811 >> 12u) & 15u))
            {
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _3047 = _2796;
                float _3048 = _2798;
                float _3049 = _2800;
                float _3050 = _2802;
                float _3051 = _2804;
                float _3052 = _2806;
                uint _3053 = _2813;
                uint _3062;
                bool _3063;
                for (;;)
                {
                    _3062 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                    _3063 = _3062 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_3063)
                    {
                        frontier_phi_80_pred = _3052;
                        frontier_phi_80_pred_1 = _3051;
                        frontier_phi_80_pred_2 = _3050;
                        frontier_phi_80_pred_3 = _3049;
                        frontier_phi_80_pred_4 = _3047;
                        frontier_phi_80_pred_5 = _3048;
                    }
                    else
                    {
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3259 = _3047;
                        float _3260 = _3048;
                        float _3261 = _3049;
                        float _3262 = _3050;
                        float _3263 = _3051;
                        float _3264 = _3052;
                        uint _3265 = _3062;
                        uint _3266;
                        vec4 _3291;
                        float _3292;
                        vec4 _3307;
                        vec3 _3319;
                        vec4 _3335;
                        vec4 _3350;
                        float _3396;
                        bool _3397;
                        for (;;)
                        {
                            uint _3276 = ((_3053 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3265));
                            _3266 = (_3265 + 4294967295u) & _3265;
                            uint _3278 = _3276 * 40u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3292 = _3291.w;
                            uint _3294 = (_3276 * 40u) + 4u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3276 * 40u) + 8u;
                            _3319 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x));
                            uint _3322 = (_3276 * 40u) + 16u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3276 * 40u) + 20u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3276 * 40u) + 24u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3371 = (_3276 * 40u) + 28u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3396 = fma(_1759, _3384.z, fma(_1758, _3384.y, _3384.x * _1757)) + _3384.w;
                            _3397 = !((fma(_1759, _3365.z, fma(_1758, _3365.y, _3365.x * _1757)) + _3365.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_3397)
                            {
                                float _3424 = _3291.x - _1757;
                                float _3425 = _3291.y - _1758;
                                float _3426 = _3291.z - _1759;
                                float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                                float _3430 = inversesqrt(_3427);
                                float _3431 = _3430 * _3424;
                                float _3432 = _3430 * _3425;
                                float _3433 = _3430 * _3426;
                                float _3437 = 1.0 - (_3427 / (_3292 * _3292));
                                float _4542 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3442 = sqrt(_3427) * _3307.w;
                                float _3444 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                                float _3445 = _3444 * _3444;
                                float _3448 = ((1.0 - _3445) * dot(vec3(_3431, _3432, _3433), vec3(_571, _574, _577))) + _3445;
                                float _3451 = _3442 * _3442;
                                float _3455 = (fma(_1759, _3335.z, fma(_1758, _3335.y, _3335.x * _1757)) + _3335.w) / _3396;
                                float _3456 = (fma(_1759, _3350.z, fma(_1758, _3350.y, _3350.x * _1757)) + _3350.w) / _3396;
                                float _3460 = 1.0 - dot(vec2(_3455, _3456), vec2(_3455, _3456));
                                float _4558 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3462 = _3461 * (((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3438) / ((_3451 * 0.699999988079071044921875) + 1.0));
                                float _3474 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                                float _3475 = 1.0 - _692;
                                float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                                float _3483 = _3482 * _3482;
                                float _3484 = _3483 * _3483;
                                float _3485 = _3431 - _2934;
                                float _3486 = _3432 - _2935;
                                float _3487 = _3433 - _2936;
                                float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                                float _3495 = dot(vec3(_571, _574, _577), vec3((-0.0) - _2934, (-0.0) - _2935, (-0.0) - _2936));
                                float _4569 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3499 = dot(vec3(_571, _574, _577), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                                float _4580 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                                float _3507 = _3444 * _3483;
                                float _3508 = _3507 * _3507;
                                float _3514 = ((1.0 - _3508) * dot(vec3(_571, _574, _577), vec3(_3431, _3432, _3433))) + _3508;
                                float _4591 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3516 = 1.0 - _3483;
                                float _3526 = (0.5 / (((_3515 * ((_3498 * _3516) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3483) * _3498))) * _3515;
                                float _4602 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3536 = (_3461 * _3438) * (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3506 * _3506) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _3462 * _3307.z;
                                frontier_phi_86_pred_1 = _3462 * _3307.y;
                                frontier_phi_86_pred_2 = _3462 * _3307.x;
                                frontier_phi_86_pred_3 = _3536 * _3319.z;
                                frontier_phi_86_pred_4 = _3536 * _3319.y;
                                frontier_phi_86_pred_5 = _3536 * _3319.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _3545 = frontier_phi_86_pred;
                            _3544 = frontier_phi_86_pred_1;
                            _3543 = frontier_phi_86_pred_2;
                            _3542 = frontier_phi_86_pred_3;
                            _3541 = frontier_phi_86_pred_4;
                            _3540 = frontier_phi_86_pred_5;
                            _3249 = _3543 + _3262;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            _3246 = _3540 + _3259;
                            _3247 = _3541 + _3260;
                            _3248 = _3542 + _3261;
                            if (_3266 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3266;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _3251;
                        frontier_phi_80_pred_1 = _3250;
                        frontier_phi_80_pred_2 = _3249;
                        frontier_phi_80_pred_3 = _3248;
                        frontier_phi_80_pred_4 = _3246;
                        frontier_phi_80_pred_5 = _3247;
                    }
                    _2919 = frontier_phi_80_pred;
                    _2917 = frontier_phi_80_pred_1;
                    _2915 = frontier_phi_80_pred_2;
                    _2913 = frontier_phi_80_pred_3;
                    _2909 = frontier_phi_80_pred_4;
                    _2911 = frontier_phi_80_pred_5;
                    uint _3054 = _3053 + 1u;
                    if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3047 = _2909;
                        _3048 = _2911;
                        _3049 = _2913;
                        _3050 = _2915;
                        _3051 = _2917;
                        _3052 = _2919;
                        _3053 = _3054;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2919;
                frontier_phi_68_69_ladder_1 = _2917;
                frontier_phi_68_69_ladder_2 = _2915;
                frontier_phi_68_69_ladder_3 = _2913;
                frontier_phi_68_69_ladder_4 = _2911;
                frontier_phi_68_69_ladder_5 = _2909;
            }
            else
            {
                frontier_phi_68_69_ladder = _2806;
                frontier_phi_68_69_ladder_1 = _2804;
                frontier_phi_68_69_ladder_2 = _2802;
                frontier_phi_68_69_ladder_3 = _2800;
                frontier_phi_68_69_ladder_4 = _2798;
                frontier_phi_68_69_ladder_5 = _2796;
            }
            _2908 = frontier_phi_68_69_ladder_5;
            _2910 = frontier_phi_68_69_ladder_4;
            _2912 = frontier_phi_68_69_ladder_3;
            _2914 = frontier_phi_68_69_ladder_2;
            _2916 = frontier_phi_68_69_ladder_1;
            _2918 = frontier_phi_68_69_ladder;
        }
        float _2923 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
        _2711 = (_2923 * _2914) + _2224;
        _2713 = (_2923 * _2916) + _2226;
        _2715 = (_2923 * _2918) + _2228;
        _2717 = ((_2908 * _661) * _2923) + _2562;
        _2719 = ((_2910 * _663) * _2923) + _2564;
        _2721 = ((_2912 * _664) * _2923) + _2566;
    }
    else
    {
        _2711 = _2224;
        _2713 = _2226;
        _2715 = _2228;
        _2717 = _2562;
        _2719 = _2564;
        _2721 = _2566;
    }
    vec4 _2727 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4618 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4629 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4640 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _2751 = (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2711 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _676))) + ((_2717 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1488)) * cbPerFrame._m0[3u].x)) + (_2727.x * cbMtdParam._m0[3u].x);
    float _2753 = ((_2727.y * cbMtdParam._m0[3u].x) + ((_2719 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1488)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2713 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _676)));
    float _2755 = ((_2727.z * cbMtdParam._m0[3u].x) + ((_2721 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1488)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2715 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _676)));
    uint _2759 = _603 + 6u;
    float _2767 = _545 / cbSceneParam._m0[86u].x;
    float _2768 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2782 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2784 = _2782.x;
    float _2785 = _2782.y;
    float _2786 = _2782.z;
    float _2787 = _2782.w;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2821 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2822 = _2821 / _479;
        float _2833 = _2822 * _530;
        float _2834 = _531 * _2822;
        float _2835 = (-0.0) - _2834;
        float _2836 = _2822 * _532;
        float _2838 = (cbSceneParam._m0[77u].w * _2835) / _2821;
        float _2839 = _2838 + cbSceneParam._m0[79u].w;
        float _2840 = cbSceneParam._m0[79u].w - _2834;
        float _2846 = sqrt(((_2833 * _2833) + (_2834 * _2834)) + (_2836 * _2836));
        float _2849 = (1.0 - (cbSceneParam._m0[77u].w / _2821)) * _2846;
        float _2854 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2856 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2835 - _2838) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2839 > 0.0) ? exp2(_2854 * _2839) : (2.0 - exp2(_2856 * _2839))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2849;
        }
        else
        {
            float _2969 = 1.0 / cbSceneParam._m0[80u].x;
            float _2970 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : max(_2839, _2840));
            float _2971 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : min(_2839, _2840));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            _3009 = ((abs(_2846 / _2835) * cbSceneParam._m0[80u].y) * ((((_2980 - _2981) * 2.0) - ((exp2(_2854 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0)))) - exp2(_2854 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))))) * _2969)) - ((exp2(_2856 * _2980) - exp2(_2856 * _2981)) * _2969))) + (_2849 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2787);
        _2858 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2784;
        _2860 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2785;
        _2862 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2786;
        _2864 = _3020 * _2787;
    }
    else
    {
        _2858 = _2784;
        _2860 = _2785;
        _2862 = _2786;
        _2864 = _2787;
    }
    float _2876 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2877 = _2876 == 3.0;
    float _2878 = log2(_2864);
    float _2885 = exp2(_2878 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)));
    float _2886 = exp2(_2878 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)));
    float _2887 = exp2(_2878 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)));
    float _2896 = (_2876 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2896 * (_2877 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.y = _2896 * (_2877 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.z = _2896 * (_2877 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.w = cbInstanceData._m0[_2759].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2759].w;
}


