#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1258;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    vec4 _271 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _282 = exp2(log2(_271.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _283;
    float _285;
    float _287;
    if (_282)
    {
        _283 = cbMtdParam._m0[19u].x;
        _285 = cbMtdParam._m0[19u].y;
        _287 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _283 = cbMtdParam._m0[18u].x;
        _285 = cbMtdParam._m0[18u].y;
        _287 = cbMtdParam._m0[18u].z;
    }
    float _293;
    if (_282)
    {
        _293 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _293 = cbMtdParam._m0[20u].z;
    }
    float _299;
    float _301;
    if (_282)
    {
        _299 = cbMtdParam._m0[28u].z;
        _301 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _299 = cbMtdParam._m0[24u].x;
        _301 = cbMtdParam._m0[24u].y;
    }
    float _303 = _299 * TEXCOORD.x;
    float _304 = _301 * TEXCOORD.y;
    float _316 = floor(_293);
    vec4 _319 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _303) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _304) + cbTextureTilingScale._m0[8u].w, _316));
    vec4 _341 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _350 = (((_283 * cbMtdParam._m0[20u].w) * _319.x) * cbMtdParam._m0[9u].x) * _341.x;
    float _354 = (((_285 * cbMtdParam._m0[20u].w) * _319.y) * cbMtdParam._m0[9u].y) * _341.y;
    float _358 = (((_287 * cbMtdParam._m0[20u].w) * _319.z) * cbMtdParam._m0[9u].z) * _341.z;
    float _370 = cbMtdParam._m0[24u].z * TEXCOORD.x;
    float _371 = cbMtdParam._m0[24u].w * TEXCOORD.y;
    vec4 _383 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _370) + cbTextureTilingScale._m0[3u].z, (_371 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _405 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _409 = _405.z;
    float _410 = _405.w;
    float _415 = exp2(log2(_410 * cbMtdParam._m0[22u].z) * cbMtdParam._m0[22u].y);
    float _422 = (_415 * ((_383.x * cbMtdParam._m0[10u].x) - _350)) + _350;
    float _423 = (_415 * ((_383.y * cbMtdParam._m0[10u].y) - _354)) + _354;
    float _424 = (_415 * ((_383.z * cbMtdParam._m0[10u].z) - _358)) + _358;
    vec4 _437 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _461 = exp2(log2(cbMtdParam._m0[20u].x * _341.w) * cbMtdParam._m0[21u].w);
    float _462 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
    float _471 = (_463 * ((cbMtdParam._m0[11u].x * _437.x) - _422)) + _422;
    float _472 = (_463 * ((cbMtdParam._m0[11u].y * _437.y) - _423)) + _423;
    float _473 = (_463 * ((cbMtdParam._m0[11u].z * _437.z) - _424)) + _424;
    float _191[2];
    float _192[2];
    _191[0u] = cbMtdParam._m0[27u].z;
    _192[0u] = cbMtdParam._m0[27u].w;
    _191[1u] = cbMtdParam._m0[28u].x;
    _192[1u] = cbMtdParam._m0[28u].y;
    float _505 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _507 = uint(int(isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0))));
    float _512 = _192[_507] + texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _303) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _304) + cbTextureTilingScale._m0[10u].w, _316)).x;
    float _515 = ((cbMtdParam._m0[23u].y - _512) * _415) + _512;
    float _522 = (_515 + _410) + ((cbMtdParam._m0[22u].x - _515) * _463);
    vec4 _540 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w, _316));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3657 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))));
    float _563 = (cbMtdParam._m0[21u].x * (((_409 * 2.0) * (_540.z + _191[_507])) - _409)) + _409;
    vec4 _576 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _370) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _371) + cbTextureTilingScale._m0[6u].w));
    float _583 = (_576.x * 2.0) + (-1.0);
    float _584 = (_576.y * 2.0) + (-1.0);
    float _585 = dot(vec2(_583, _584), vec2(_583, _584));
    float _3668 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _597 = (((_576.z - _563) + cbMtdParam._m0[23u].z) * _415) + _563;
    vec4 _610 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _617 = (_610.x * 2.0) + (-1.0);
    float _618 = (_610.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3679 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _629 = (((_610.z - _597) + cbMtdParam._m0[23u].w) * _463) + _597;
    float _633 = (cbMtdParam._m0[21u].y * ((_405.x * 2.0) + (-1.0))) + _547;
    float _634 = (cbMtdParam._m0[21u].y * ((_405.y * 2.0) + (-1.0))) + _548;
    float _641 = ((_583 - _633) * _415) + _633;
    float _642 = ((_584 - _634) * _415) + _634;
    float _643 = ((sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) - _554) * _415) + _554;
    float _650 = ((_617 - _641) * _463) + _641;
    float _651 = ((_618 - _642) * _463) + _642;
    float _652 = ((sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) - _643) * _463) + _643;
    float _655 = fma(_652, _242, fma(_651, _234 * TANGENT.x, (_220 * _212) * _650));
    float _658 = fma(_652, _243, fma(_651, _234 * TANGENT.y, (_220 * _213) * _650));
    float _661 = fma(_652, _244, fma(_651, _234 * TANGENT.z, (_220 * _214) * _650));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3690 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _669 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3712 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3723 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3734 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _673 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _689 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _757 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _759 = _757.w;
    float _777 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _780 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _783 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    vec4 _785 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _796 = (((_785.y - _669) + (_785.w * _669)) * cbMtdParam._m0[3u].x) + _669;
    uint _809 = uint(roundEven(NORMAL.w)) * 13u;
    uint _812 = (_809 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_812].z;
    float _3745 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    vec4 _824 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _829 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _840 = (((_829.x - _673) + (_829.w * _673)) * cbMtdParam._m0[3u].x) + _673;
    float _853 = (cbMtdParam._m0[3u].x * (((_821 * _759) - _821) + _824.x)) + _821;
    float _854 = (cbMtdParam._m0[3u].x * (((_822 * _759) - _822) + _824.y)) + _822;
    float _855 = (cbMtdParam._m0[3u].x * (((_823 * _759) - _823) + _824.z)) + _823;
    float _856 = 1.0 - _840;
    float _857 = _856 * _853;
    float _858 = _856 * _854;
    float _859 = _856 * _855;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _840;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _840;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _840;
    float _867 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    float _870 = _866 + 0.039999999105930328369140625;
    vec4 _879 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _882 = _879.x * TEXCOORD_4;
    float _883 = dot(vec3(_666, _667, _668), vec3(_746, _747, _748));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _666) - _746;
    float _891 = (_886 * _667) - _747;
    float _892 = (_886 * _668) - _748;
    float _896 = abs(dot(vec3(_746, _747, _748), vec3(_666, _667, _668)));
    float _3778 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_796);
    float _911 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _917 = (1.0 - _911) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _918 = _911 * _898;
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_954, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946));
        float _986 = fma(_954, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946));
        float _990 = fma(_954, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946));
        float _1015 = _946 + _666;
        float _1016 = _950 + _667;
        float _1017 = _954 + _668;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_666, _667, _668), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3826 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_666, _667, _668), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3859 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_666, _667, _668), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3892 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1298 = fma(_954, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946));
        float _1302 = fma(_954, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946));
        float _1306 = fma(_954, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946));
        float _1329 = _946 + _666;
        float _1330 = _950 + _667;
        float _1331 = _954 + _668;
        float _1341 = fma(_1331, cbModelParam._m0[30u].z, fma(_1330, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1329)) - _1298;
        float _1342 = fma(_1331, cbModelParam._m0[31u].z, fma(_1330, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1329)) - _1302;
        float _1343 = fma(_1331, cbModelParam._m0[32u].z, fma(_1330, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1329)) - _1306;
        float _1347 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
        float _1360 = ((_1347 * _1341) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1298 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1347 * _1342) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1302 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1347 * _1343) / cbModelParam._m0[35u].z) + ((((((_1306 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        float _1397 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1364.x + (-0.5));
        float _1399 = _1397 * (_1364.y + (-0.5));
        float _1400 = _1397 * (_1364.z + (-0.5));
        float _1407 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1371.x + (-0.5));
        float _1409 = _1407 * (_1371.y + (-0.5));
        float _1410 = _1407 * (_1371.z + (-0.5));
        float _1417 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1378.x + (-0.5));
        float _1419 = _1417 * (_1378.y + (-0.5));
        float _1420 = _1417 * (_1378.z + (-0.5));
        float _1427 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1385.x + (-0.5));
        float _1429 = _1427 * (_1385.y + (-0.5));
        float _1430 = _1427 * (_1385.z + (-0.5));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = _1398 * 0.5;
        float _1435 = _1408 * 0.5;
        float _1436 = _1418 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_666, _667, _668), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3955 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1461 + 1.0))) + _1466) * _1431;
        float _1476 = _1399 * 0.5;
        float _1477 = _1409 * 0.5;
        float _1478 = _1419 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_666, _667, _668), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _3988 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1503 + 1.0))) + _1508) * _1432;
        float _1518 = _1400 * 0.5;
        float _1519 = _1410 * 0.5;
        float _1520 = _1420 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_666, _667, _668), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4021 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1545 + 1.0))) + _1550) * _1433;
        _1567 = _1400;
        _1568 = _1399;
        _1569 = _1398;
        _1570 = _1410;
        _1571 = _1409;
        _1572 = _1408;
        _1573 = _1420;
        _1574 = _1419;
        _1575 = _1418;
        _1576 = _1433;
        _1577 = _1432;
        _1578 = _1431;
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
    }
    else
    {
        _1567 = _1258;
        _1568 = _1258;
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = _1258;
        _1579 = 0.0;
        _1580 = 0.0;
        _1581 = 0.0;
    }
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1271)) + _1271;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1272)) + _1272;
    float _1614 = fma(_1593, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1591 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1593, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1591 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1593, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1591));
    float _1635 = _890 * 0.5;
    float _1636 = _891 * 0.5;
    float _1637 = _892 * 0.5;
    float _1638 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1641 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1644 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1678;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1651 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1655 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1659 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1666 = dot(vec4(cbModelParam._m0[39u]), vec4(_1635, _1636, _1637, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1689;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1680 = dot(vec4(cbModelParam._m0[40u]), vec4(_1635, _1636, _1637, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1693 = (_1689 * cbModelParam._m0[1u].x) + (_1678 * (1.0 - cbModelParam._m0[1u].x));
    float _1703 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1703 : min(cbModelParam._m0[25u].z, _1703));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_954, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_954, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_954, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1767 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1770 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1798 = frontier_phi_22_20_ladder;
        }
        float _2023;
        if (_1767 > 0.0)
        {
            _2023 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _2023 = frontier_phi_31_27_ladder;
        }
        float _2280;
        if (_1770 > 0.0)
        {
            _2280 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2280 = frontier_phi_43_38_ladder;
        }
        float _2282 = isnan(_2023) ? _1798 : (isnan(_1798) ? _2023 : min(_1798, _2023));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1764) + _1753;
        float _2288 = (_2283 * _1767) + _1757;
        float _2289 = (_2283 * _1770) + _1761;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2290;
        float _2294 = _2290 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 > _2294) || ((_2288 < _2292) || ((_2287 < _2292) || (_2287 > _2294))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2289, cbModelParam._m0[9u].z, fma(_2288, cbModelParam._m0[9u].y, _2287 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2289, cbModelParam._m0[10u].z, fma(_2288, cbModelParam._m0[10u].y, _2287 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2289, cbModelParam._m0[11u].z, fma(_2288, cbModelParam._m0[11u].y, _2287 * cbModelParam._m0[11u].x))), _1704);
            frontier_phi_21_43_ladder = _2417.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2417.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2417.x * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_21_43_ladder_2;
        _1788 = frontier_phi_21_43_ladder_1;
        _1790 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1704);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_954, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_954, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_954, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1862 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1865 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2028;
        if (_1859 > 0.0)
        {
            _2028 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _2028 = frontier_phi_33_29_ladder;
        }
        float _2307;
        if (_1862 > 0.0)
        {
            _2307 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2307 = frontier_phi_45_40_ladder;
        }
        float _2520;
        if (_1865 > 0.0)
        {
            _2520 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2520 = frontier_phi_54_51_ladder;
        }
        float _2522 = isnan(_2307) ? _2028 : (isnan(_2028) ? _2307 : min(_2028, _2307));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _1859) + _1848;
        float _2528 = (_2523 * _1862) + _1852;
        float _2529 = (_2523 * _1865) + _1856;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2530;
        float _2533 = _2530 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2529 > _2533) || ((_2529 < _2531) || ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 < _2531) || (_2527 > _2533))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2529, cbModelParam._m0[17u].z, fma(_2528, cbModelParam._m0[17u].y, _2527 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2529, cbModelParam._m0[18u].z, fma(_2528, cbModelParam._m0[18u].y, _2527 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2529, cbModelParam._m0[19u].z, fma(_2528, cbModelParam._m0[19u].y, _2527 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_30_54_ladder = _2745.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2745.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2745.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_30_54_ladder_2;
        _1886 = frontier_phi_30_54_ladder;
        _1888 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1795);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1901 = (((_917 * _867) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1903 = (((_917 * _869) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1905 = (((_917 * _870) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1903, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1903, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1903, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    vec4 _1922 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_754, _755));
    float _1924 = _1922.w;
    float _1936 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1924);
    float _1937 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1924);
    float _1938 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1924);
    uvec4 _1942 = floatBitsToUint(cbInstanceData._m0[_809 + 5u]);
    uint _1944 = _1942.x * 14u;
    uint _1945 = _1944 + 13u;
    float _1952 = _882 + (-1.0);
    float _1957 = (cbLight._m0[_1945].x * _1952) + 1.0;
    float _1958 = (cbLight._m0[_1945].y * _1952) + 1.0;
    float _1959 = (cbLight._m0[_1945].z * _1952) + 1.0;
    float _1960 = (cbLight._m0[_1945].w * _1952) + 1.0;
    uint _1961 = _1944 + 5u;
    float _1967 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1971 = _1944 + 4u;
    float _1981 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    uint _1985 = _1944 | 1u;
    float _1996 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_666, _667, _668));
    float _1999 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_666, _667, _668));
    float _4157 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _4168 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2004 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _2006 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _2013 = ((cbLight._m0[_1961].x * _1967) * _2006) + (((cbLight._m0[_1971].x * _1936) * _1981) * _2004);
    float _2014 = ((_1967 * cbLight._m0[_1961].y) * _2006) + (((cbLight._m0[_1971].y * _1937) * _1981) * _2004);
    float _2015 = ((_1967 * cbLight._m0[_1961].z) * _2006) + (((cbLight._m0[_1971].z * _1938) * _1981) * _2004);
    uvec4 _2020 = floatBitsToUint(cbLight._m0[_1944 + 12u]);
    bool _2022 = _2020.x == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_2022)
    {
        _2033 = _2013;
        _2035 = _2014;
        _2037 = _2015;
    }
    else
    {
        uint _2041 = _1944 + 6u;
        float _2057 = (dot(vec3(cbLight._m0[_1944 + 2u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4179 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2060 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2033 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _2013;
        _2035 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _2014;
        _2037 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _2015;
    }
    bool _2040 = _2020.y == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2040)
    {
        _2078 = _2033;
        _2080 = _2035;
        _2082 = _2037;
    }
    else
    {
        uint _2251 = _1944 + 7u;
        float _2267 = (dot(vec3(cbLight._m0[_1944 + 3u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4195 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2270 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2078 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2033;
        _2080 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2035;
        _2082 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2037;
    }
    uint _2085 = _1944 + 8u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _796) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1944].x + _746;
    float _2101 = cbLight._m0[_1944].y + _747;
    float _2102 = cbLight._m0[_1944].z + _748;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1944].xyz));
    float _4211 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2114 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2115 = dot(vec3(_666, _667, _668), vec3(_2107, _2108, _2109));
    float _4233 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2107, _2108, _2109));
    float _4244 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2099 * _2099;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2135 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
    float _2136 = 0.959999978542327880859375 - _864;
    float _2138 = 0.959999978542327880859375 - _865;
    float _2139 = 0.959999978542327880859375 - _866;
    float _2146 = 1.0 - _2099;
    float _2157 = (0.5 / (((_2114 * ((_2113 * _2146) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2146) + _2099) * _2113))) * _2113;
    float _4255 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    uint _2173 = _1944 + 9u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _796) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_1985].x + _746;
    float _2187 = cbLight._m0[_1985].y + _747;
    float _2188 = cbLight._m0[_1985].z + _748;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1985].xyz));
    float _4266 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2200 = dot(vec3(_666, _667, _668), vec3(_2193, _2194, _2195));
    float _4277 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2193, _2194, _2195));
    float _4288 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2185 * _2185;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
    float _2226 = 1.0 - _2185;
    float _2236 = (0.5 / (((_2114 * ((_2199 * _2226) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2226) + _2185) * _2199))) * _2199;
    float _4299 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    float _2248 = (((((_2219 * _2136) + _867) * cbLight._m0[_2173].x) * _2238) * _1967) + ((((cbLight._m0[_2085].x * _1936) * ((_2135 * _2136) + _867)) * _2159) * _1981);
    float _2249 = (((((_2219 * _2138) + _869) * cbLight._m0[_2173].y) * _2238) * _1967) + ((((cbLight._m0[_2085].y * _1937) * ((_2135 * _2138) + _869)) * _2159) * _1981);
    float _2250 = (((((_2219 * _2139) + _870) * cbLight._m0[_2173].z) * _2238) * _1967) + ((((cbLight._m0[_2085].z * _1938) * ((_2135 * _2139) + _870)) * _2159) * _1981);
    float _2312;
    float _2314;
    float _2316;
    if (_2022)
    {
        _2312 = _2248;
        _2314 = _2249;
        _2316 = _2250;
    }
    else
    {
        uint _2318 = _1944 + 2u;
        uint _2322 = _1944 + 10u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _796) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _746;
        float _2339 = cbLight._m0[_2318].y + _747;
        float _2340 = cbLight._m0[_2318].z + _748;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2318].xyz));
        float _4310 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2352 = dot(vec3(_666, _667, _668), vec3(_2345, _2346, _2347));
        float _4321 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4332 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
        float _2378 = 1.0 - _2337;
        float _2388 = (0.5 / (((_2114 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2378) + _2337) * _2351))) * _2351;
        float _4343 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2312 = (((((_2371 * _2136) + _867) * cbLight._m0[_2322].x) * _2390) * _2391) + _2248;
        _2314 = (((((_2371 * _2138) + _869) * cbLight._m0[_2322].y) * _2390) * _2391) + _2249;
        _2316 = (((((_2371 * _2139) + _870) * cbLight._m0[_2322].z) * _2390) * _2391) + _2250;
    }
    float _2426;
    float _2428;
    float _2430;
    if (_2040)
    {
        _2426 = _2312;
        _2428 = _2314;
        _2430 = _2316;
    }
    else
    {
        uint _2437 = _1944 + 3u;
        uint _2441 = _1944 + 11u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _796) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _746;
        float _2458 = cbLight._m0[_2437].y + _747;
        float _2459 = cbLight._m0[_2437].z + _748;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2437].xyz));
        float _4359 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2471 = dot(vec3(_666, _667, _668), vec3(_2464, _2465, _2466));
        float _4370 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4381 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2497 = 1.0 - _2456;
        float _2507 = (0.5 / (((_2114 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2497) + _2456) * _2470))) * _2470;
        float _4392 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2509 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2510 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2426 = (((((_2490 * _2136) + _867) * cbLight._m0[_2441].x) * _2509) * _2510) + _2312;
        _2428 = (((((_2490 * _2138) + _869) * cbLight._m0[_2441].y) * _2509) * _2510) + _2314;
        _2430 = (((((_2490 * _2139) + _870) * cbLight._m0[_2441].z) * _2509) * _2510) + _2316;
    }
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_1942.y == 0u)
    {
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2585;
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2585;
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2585;
        uvec4 _2600 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2601 = _2600.x;
        uint _2612 = uint((float(_2600.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2601))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2601)));
        float _2622 = (log2(_2588 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2623 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        uint _2626 = uint(isnan(14.0) ? _2623 : (isnan(_2623) ? 14.0 : min(_2623, 14.0)));
        uvec4 _2631 = texelFetch(g_lightClusterGridBuffer, int(((_2626 << 2u) + (_2612 << 6u)) >> 2u));
        uint _2632 = _2631.x;
        uint _2633 = _2600.z;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((((1u << ((_2633 >> 4u) & 15u)) + 4294967295u) & _2632) == 0u) || ((_2633 & 240u) == 0u))
        {
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
        }
        else
        {
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            uint _2900 = 0u;
            uint _2909;
            bool _2910;
            for (;;)
            {
                _2909 = texelFetch(g_lightClassification, int((((_2626 << 5u) + (_2612 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                _2910 = _2909 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2910)
                {
                    frontier_phi_69_pred = _2899;
                    frontier_phi_69_pred_1 = _2898;
                    frontier_phi_69_pred_2 = _2897;
                    frontier_phi_69_pred_3 = _2895;
                    frontier_phi_69_pred_4 = _2894;
                    frontier_phi_69_pred_5 = _2896;
                }
                else
                {
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    uint _3024;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2909;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    for (;;)
                    {
                        uint _3028 = uint(findLSB(_3024)) + (_2900 << 5u);
                        uint _3025 = (_3024 + 4294967295u) & _3024;
                        uint _3030 = _3028 * 48u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3050 = (_3028 * 48u) + 4u;
                        vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3069 = (_3028 * 48u) + 8u;
                        vec3 _3080 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x));
                        float _3084 = _3044.x - _2586;
                        float _3085 = _3044.y - _2587;
                        float _3086 = _3044.z - _2588;
                        float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                        float _3090 = inversesqrt(_3087);
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3094 = dot(vec3(_777, _780, _783), vec3(_3091, _3092, _3093));
                        float _3099 = 1.0 - (_3087 * _3044.w);
                        float _4418 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3101 = sqrt(_3087) * _3063.w;
                        float _3104 = 1.39999997615814208984375 / (_3101 + 1.39999997615814208984375);
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3094) + _3105;
                        float _3111 = _3101 * _3101;
                        float _3115 = ((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3100) / ((_3111 * 0.699999988079071044921875) + 1.0);
                        float _3119 = (-0.0) - _2586;
                        float _3120 = (-0.0) - _2587;
                        float _3121 = (-0.0) - _2588;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3136 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                        float _3137 = 1.0 - _898;
                        float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                        float _3145 = _3144 * _3144;
                        float _3146 = _3145 * _3145;
                        float _3147 = _3126 + _3091;
                        float _3148 = _3127 + _3092;
                        float _3149 = _3128 + _3093;
                        float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                        float _3157 = dot(vec3(_777, _780, _783), vec3(_3126, _3127, _3128));
                        float _4434 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3160 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3161 = dot(vec3(_777, _780, _783), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                        float _4445 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3164 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                        float _3169 = _3104 * _3145;
                        float _3170 = _3169 * _3169;
                        float _3173 = ((1.0 - _3170) * _3094) + _3170;
                        float _4456 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3175 = 1.0 - _3145;
                        float _3185 = (0.5 / (((_3174 * ((_3160 * _3175) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3174 * _3175) + _3145) * _3160))) * _3174;
                        float _4467 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3196 = (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3168 * _3168) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125))) * _3100;
                        _2953 = (_3115 * _3063.x) + _3021;
                        _2954 = (_3115 * _3063.y) + _3022;
                        _2955 = (_3115 * _3063.z) + _3023;
                        _2950 = (_3196 * _3080.x) + _3018;
                        _2951 = (_3196 * _3080.y) + _3019;
                        _2952 = (_3196 * _3080.z) + _3020;
                        if (_3025 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _3025;
                        }
                    }
                    frontier_phi_69_pred = _2955;
                    frontier_phi_69_pred_1 = _2954;
                    frontier_phi_69_pred_2 = _2953;
                    frontier_phi_69_pred_3 = _2951;
                    frontier_phi_69_pred_4 = _2950;
                    frontier_phi_69_pred_5 = _2952;
                }
                _2761 = frontier_phi_69_pred;
                _2759 = frontier_phi_69_pred_1;
                _2757 = frontier_phi_69_pred_2;
                _2753 = frontier_phi_69_pred_3;
                _2751 = frontier_phi_69_pred_4;
                _2755 = frontier_phi_69_pred_5;
                uint _2901 = _2900 + 1u;
                if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2894 = _2751;
                    _2895 = _2753;
                    _2896 = _2755;
                    _2897 = _2757;
                    _2898 = _2759;
                    _2899 = _2761;
                    _2900 = _2901;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
        }
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.z;
        uint _2767 = (_2765 >> 8u) & 15u;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((4294967295u << _2767) & _2632) == 0u)
        {
            _2862 = _2750;
            _2864 = _2752;
            _2866 = _2754;
            _2868 = _2756;
            _2870 = _2758;
            _2872 = _2760;
        }
        else
        {
            float _2887 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
            float _2888 = _2887 * _2586;
            float _2889 = _2887 * _2587;
            float _2890 = _2887 * _2588;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2767 < ((_2765 >> 12u) & 15u))
            {
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _3001 = _2750;
                float _3002 = _2752;
                float _3003 = _2754;
                float _3004 = _2756;
                float _3005 = _2758;
                float _3006 = _2760;
                uint _3007 = _2767;
                uint _3016;
                bool _3017;
                for (;;)
                {
                    _3016 = texelFetch(g_lightClassification, int((((_2626 << 5u) + (_2612 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                    _3017 = _3016 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_3017)
                    {
                        frontier_phi_75_pred = _3003;
                        frontier_phi_75_pred_1 = _3002;
                        frontier_phi_75_pred_2 = _3001;
                        frontier_phi_75_pred_3 = _3006;
                        frontier_phi_75_pred_4 = _3005;
                        frontier_phi_75_pred_5 = _3004;
                    }
                    else
                    {
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        float _3216 = _3003;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        uint _3220 = _3016;
                        uint _3221;
                        vec4 _3246;
                        float _3247;
                        vec4 _3262;
                        vec3 _3274;
                        vec4 _3290;
                        vec4 _3305;
                        float _3351;
                        bool _3352;
                        for (;;)
                        {
                            uint _3231 = ((_3007 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3220));
                            _3221 = (_3220 + 4294967295u) & _3220;
                            uint _3233 = _3231 * 40u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.w;
                            uint _3249 = (_3231 * 40u) + 4u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3231 * 40u) + 8u;
                            _3274 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x));
                            uint _3277 = (_3231 * 40u) + 16u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3231 * 40u) + 20u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3231 * 40u) + 24u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3326 = (_3231 * 40u) + 28u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3351 = fma(_2588, _3339.z, fma(_2587, _3339.y, _3339.x * _2586)) + _3339.w;
                            _3352 = !((fma(_2588, _3320.z, fma(_2587, _3320.y, _3320.x * _2586)) + _3320.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3352)
                            {
                                float _3379 = _3246.x - _2586;
                                float _3380 = _3246.y - _2587;
                                float _3381 = _3246.z - _2588;
                                float _3382 = dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381));
                                float _3385 = inversesqrt(_3382);
                                float _3386 = _3385 * _3379;
                                float _3387 = _3385 * _3380;
                                float _3388 = _3385 * _3381;
                                float _3392 = 1.0 - (_3382 / (_3247 * _3247));
                                float _4478 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3397 = sqrt(_3382) * _3262.w;
                                float _3399 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                                float _3400 = _3399 * _3399;
                                float _3403 = ((1.0 - _3400) * dot(vec3(_3386, _3387, _3388), vec3(_777, _780, _783))) + _3400;
                                float _3406 = _3397 * _3397;
                                float _3410 = (fma(_2588, _3290.z, fma(_2587, _3290.y, _3290.x * _2586)) + _3290.w) / _3351;
                                float _3411 = (fma(_2588, _3305.z, fma(_2587, _3305.y, _3305.x * _2586)) + _3305.w) / _3351;
                                float _3415 = 1.0 - dot(vec2(_3410, _3411), vec2(_3410, _3411));
                                float _4494 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3417 = _3416 * (((isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))) * _3393) / ((_3406 * 0.699999988079071044921875) + 1.0));
                                float _3429 = exp2(log2(1.0 / ((_3406 * 3.5) + 5.0)) * 0.25);
                                float _3430 = 1.0 - _898;
                                float _3437 = sqrt(1.0 - ((1.0 - (_3430 * _3430)) * (1.0 - (_3429 * _3429))));
                                float _3438 = _3437 * _3437;
                                float _3439 = _3438 * _3438;
                                float _3440 = _3386 - _2888;
                                float _3441 = _3387 - _2889;
                                float _3442 = _3388 - _2890;
                                float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                                float _3450 = dot(vec3(_777, _780, _783), vec3((-0.0) - _2888, (-0.0) - _2889, (-0.0) - _2890));
                                float _4505 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3454 = dot(vec3(_777, _780, _783), vec3(_3446 * _3440, _3446 * _3441, _3446 * _3442));
                                float _4516 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3461 = ((_3457 * _3457) * (_3439 + (-1.0))) + 1.0;
                                float _3462 = _3399 * _3438;
                                float _3463 = _3462 * _3462;
                                float _3469 = ((1.0 - _3463) * dot(vec3(_777, _780, _783), vec3(_3386, _3387, _3388))) + _3463;
                                float _4527 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3471 = 1.0 - _3438;
                                float _3481 = (0.5 / (((_3470 * ((_3453 * _3471) + _3438)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3438) * _3453))) * _3470;
                                float _4538 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3491 = (_3416 * _3393) * (((_3439 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3461 * _3461) * ((_3406 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3491 * _3274.z;
                                frontier_phi_81_pred_1 = _3491 * _3274.y;
                                frontier_phi_81_pred_2 = _3491 * _3274.x;
                                frontier_phi_81_pred_3 = _3417 * _3262.z;
                                frontier_phi_81_pred_4 = _3417 * _3262.y;
                                frontier_phi_81_pred_5 = _3417 * _3262.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_81_pred;
                            _3496 = frontier_phi_81_pred_1;
                            _3495 = frontier_phi_81_pred_2;
                            _3500 = frontier_phi_81_pred_3;
                            _3499 = frontier_phi_81_pred_4;
                            _3498 = frontier_phi_81_pred_5;
                            _3204 = _3498 + _3217;
                            _3205 = _3499 + _3218;
                            _3206 = _3500 + _3219;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            _3203 = _3497 + _3216;
                            if (_3221 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3221;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3203;
                        frontier_phi_75_pred_1 = _3202;
                        frontier_phi_75_pred_2 = _3201;
                        frontier_phi_75_pred_3 = _3206;
                        frontier_phi_75_pred_4 = _3205;
                        frontier_phi_75_pred_5 = _3204;
                    }
                    _2867 = frontier_phi_75_pred;
                    _2865 = frontier_phi_75_pred_1;
                    _2863 = frontier_phi_75_pred_2;
                    _2873 = frontier_phi_75_pred_3;
                    _2871 = frontier_phi_75_pred_4;
                    _2869 = frontier_phi_75_pred_5;
                    uint _3008 = _3007 + 1u;
                    if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3001 = _2863;
                        _3002 = _2865;
                        _3003 = _2867;
                        _3004 = _2869;
                        _3005 = _2871;
                        _3006 = _2873;
                        _3007 = _3008;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2871;
                frontier_phi_63_64_ladder_1 = _2869;
                frontier_phi_63_64_ladder_2 = _2867;
                frontier_phi_63_64_ladder_3 = _2873;
                frontier_phi_63_64_ladder_4 = _2865;
                frontier_phi_63_64_ladder_5 = _2863;
            }
            else
            {
                frontier_phi_63_64_ladder = _2758;
                frontier_phi_63_64_ladder_1 = _2756;
                frontier_phi_63_64_ladder_2 = _2754;
                frontier_phi_63_64_ladder_3 = _2760;
                frontier_phi_63_64_ladder_4 = _2752;
                frontier_phi_63_64_ladder_5 = _2750;
            }
            _2862 = frontier_phi_63_64_ladder_5;
            _2864 = frontier_phi_63_64_ladder_4;
            _2866 = frontier_phi_63_64_ladder_2;
            _2868 = frontier_phi_63_64_ladder_1;
            _2870 = frontier_phi_63_64_ladder;
            _2872 = frontier_phi_63_64_ladder_3;
        }
        float _2877 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2644 = (_2877 * _2868) + _2078;
        _2646 = (_2877 * _2870) + _2080;
        _2648 = (_2877 * _2872) + _2082;
        _2650 = ((_2862 * _867) * _2877) + _2426;
        _2652 = ((_2864 * _869) * _2877) + _2428;
        _2654 = ((_2866 * _870) * _2877) + _2430;
    }
    else
    {
        _2644 = _2078;
        _2646 = _2080;
        _2648 = _2082;
        _2650 = _2426;
        _2652 = _2428;
        _2654 = _2430;
    }
    vec4 _2660 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4554 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4565 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4576 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2684 = (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2644 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _882))) + ((_2650 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1693)) * cbPerFrame._m0[3u].x)) + (_2660.x * cbMtdParam._m0[3u].x);
    float _2686 = ((_2660.y * cbMtdParam._m0[3u].x) + ((_2652 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1693)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2646 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _882)));
    float _2688 = ((_2660.z * cbMtdParam._m0[3u].x) + ((_2654 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1693)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2648 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _882)));
    uint _2692 = _809 + 6u;
    float _2700 = _754 / cbSceneParam._m0[86u].x;
    float _2701 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2715 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, (log2((isnan(cbSceneParam._m0[77u].w) ? _689 : (isnan(_689) ? cbSceneParam._m0[77u].w : min(_689, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2717 = _2715.x;
    float _2718 = _2715.y;
    float _2719 = _2715.z;
    float _2720 = _2715.w;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_689 > cbSceneParam._m0[78u].w)
    {
        float _2775 = isnan(_689) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _689 : min(cbSceneParam._m0[80u].w, _689));
        float _2776 = _2775 / _689;
        float _2787 = _2776 * _739;
        float _2788 = _740 * _2776;
        float _2789 = (-0.0) - _2788;
        float _2790 = _2776 * _741;
        float _2792 = (cbSceneParam._m0[77u].w * _2789) / _2775;
        float _2793 = _2792 + cbSceneParam._m0[79u].w;
        float _2794 = cbSceneParam._m0[79u].w - _2788;
        float _2800 = sqrt(((_2787 * _2787) + (_2788 * _2788)) + (_2790 * _2790));
        float _2803 = (1.0 - (cbSceneParam._m0[77u].w / _2775)) * _2800;
        float _2808 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2810 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2963;
        if (abs((_2789 - _2792) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2963 = ((((_2793 > 0.0) ? exp2(_2808 * _2793) : (2.0 - exp2(_2810 * _2793))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2803;
        }
        else
        {
            float _2923 = 1.0 / cbSceneParam._m0[80u].x;
            float _2924 = isnan(_2794) ? _2793 : (isnan(_2793) ? _2794 : max(_2793, _2794));
            float _2925 = isnan(_2794) ? _2793 : (isnan(_2793) ? _2794 : min(_2793, _2794));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            _2963 = ((abs(_2800 / _2789) * cbSceneParam._m0[80u].y) * ((((_2934 - _2935) * 2.0) - ((exp2(_2808 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)))) - exp2(_2808 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))))) * _2923)) - ((exp2(_2810 * _2934) - exp2(_2810 * _2935)) * _2923))) + (_2803 * cbSceneParam._m0[80u].z);
        }
        vec4 _2965 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, 1.0), 0.0);
        float _2974 = exp2((_2963 * (-1.44269502162933349609375)) * (1.0 - _2965.w));
        float _2975 = log2(_2974);
        float _2991 = log2(_2720);
        _2812 = (exp2(_2991 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].x)) * _2965.x) / cbSceneParam._m0[78u].x)) + _2717;
        _2814 = (exp2(_2991 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].y)) * _2965.y) / cbSceneParam._m0[78u].y)) + _2718;
        _2816 = (exp2(_2991 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].z)) * _2965.z) / cbSceneParam._m0[78u].z)) + _2719;
        _2818 = _2974 * _2720;
    }
    else
    {
        _2812 = _2717;
        _2814 = _2718;
        _2816 = _2719;
        _2818 = _2720;
    }
    float _2830 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2831 = _2830 == 3.0;
    float _2832 = log2(_2818);
    float _2839 = exp2(_2832 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)));
    float _2840 = exp2(_2832 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0)));
    float _2841 = exp2(_2832 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)));
    float _2850 = (_2830 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2850 * (_2831 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.y = _2850 * (_2831 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.z = _2850 * (_2831 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2816)));
    SV_Target.w = cbInstanceData._m0[_2692].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2692].w;
}


