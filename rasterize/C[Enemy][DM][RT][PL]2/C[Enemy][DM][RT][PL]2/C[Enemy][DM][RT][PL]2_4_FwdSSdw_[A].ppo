#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1112;
float _3545;
float _3546;
float _3547;
float _3548;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _259 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _272 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_259 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _283 = exp2(log2(_272.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _284;
    float _286;
    float _288;
    if (_283)
    {
        _284 = cbMtdParam._m0[19u].x;
        _286 = cbMtdParam._m0[19u].y;
        _288 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _284 = cbMtdParam._m0[18u].x;
        _286 = cbMtdParam._m0[18u].y;
        _288 = cbMtdParam._m0[18u].z;
    }
    float _294;
    if (_283)
    {
        _294 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _294 = cbMtdParam._m0[20u].z;
    }
    float _300;
    float _302;
    if (_283)
    {
        _300 = cbMtdParam._m0[28u].z;
        _302 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _300 = cbMtdParam._m0[24u].x;
        _302 = cbMtdParam._m0[24u].y;
    }
    float _304 = _300 * TEXCOORD.x;
    float _305 = _302 * TEXCOORD.y;
    float _317 = floor(_294);
    vec4 _320 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _304) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _305) + cbTextureTilingScale._m0[8u].w, _317));
    vec4 _342 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _259) + cbTextureTilingScale._m0[0u].w));
    float _350 = (((_284 * cbMtdParam._m0[20u].w) * _320.x) * cbMtdParam._m0[9u].x) * _342.x;
    float _354 = (((_286 * cbMtdParam._m0[20u].w) * _320.y) * cbMtdParam._m0[9u].y) * _342.y;
    float _358 = (((_288 * cbMtdParam._m0[20u].w) * _320.z) * cbMtdParam._m0[9u].z) * _342.z;
    vec4 _370 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _374 = _370.z;
    vec4 _388 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _304) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _305) + cbTextureTilingScale._m0[10u].w, _317));
    float _187[2];
    float _188[2];
    _187[0u] = cbMtdParam._m0[27u].z;
    _188[0u] = cbMtdParam._m0[27u].w;
    _187[1u] = cbMtdParam._m0[28u].x;
    _188[1u] = cbMtdParam._m0[28u].y;
    float _405 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    uint _408 = uint(int(isnan(1.0) ? _405 : (isnan(_405) ? 1.0 : min(_405, 1.0))));
    float _414 = (_388.x + _370.w) + _188[_408];
    vec4 _432 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w, _317));
    float _439 = (_432.x * 2.0) + (-1.0);
    float _440 = (_432.y * 2.0) + (-1.0);
    float _441 = dot(vec2(_439, _440), vec2(_439, _440));
    float _3567 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))));
    float _455 = (cbMtdParam._m0[21u].x * (((_374 * 2.0) * (_432.z + _187[_408])) - _374)) + _374;
    float _459 = (cbMtdParam._m0[21u].y * ((_370.x * 2.0) + (-1.0))) + _439;
    float _460 = (cbMtdParam._m0[21u].y * ((_370.y * 2.0) + (-1.0))) + _440;
    float _463 = fma(_446, _238, fma(_460, _230 * TANGENT.x, (_216 * _208) * _459));
    float _466 = fma(_446, _239, fma(_460, _230 * TANGENT.y, (_216 * _209) * _459));
    float _469 = fma(_446, _240, fma(_460, _230 * TANGENT.z, (_216 * _210) * _459));
    float _473 = inversesqrt(dot(vec3(_463, _466, _469), vec3(_463, _466, _469)));
    float _474 = _473 * _463;
    float _475 = _473 * _466;
    float _476 = _473 * _469;
    float _3578 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _477 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3600 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3611 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3622 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _481 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    vec4 _562 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _564 = _562.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _792 = sqrt(((_548 * _548) + (_549 * _549)) + (_550 * _550));
        float _798 = (cbMatDynParam._m0[5u].x * _792) + cbMatDynParam._m0[5u].y;
        float _3633 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _803 = (cbMatDynParam._m0[5u].z * _792) + cbMatDynParam._m0[5u].w;
        float _3644 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) - _799)) + _799) < ((_564 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _579 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _580 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _582 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _584 = _582.w;
    float _604 = fma(_476, cbSceneParam._m0[5u].z, fma(_475, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _474));
    float _607 = fma(_476, cbSceneParam._m0[6u].z, fma(_475, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _474));
    float _610 = fma(_476, cbSceneParam._m0[7u].z, fma(_475, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _474));
    vec4 _612 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _623 = (((_612.y - _477) + (_612.w * _477)) * cbMtdParam._m0[3u].x) + _477;
    uint _636 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = _636 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3655 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    vec4 _651 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _656 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _667 = (((_656.x - _481) + (_656.w * _481)) * cbMtdParam._m0[3u].x) + _481;
    float _680 = (cbMtdParam._m0[3u].x * (((_648 * _584) - _648) + _651.x)) + _648;
    float _681 = (cbMtdParam._m0[3u].x * (((_649 * _584) - _649) + _651.y)) + _649;
    float _682 = (cbMtdParam._m0[3u].x * (((_650 * _584) - _650) + _651.z)) + _650;
    float _683 = 1.0 - _667;
    float _684 = _683 * _680;
    float _685 = _683 * _681;
    float _686 = _683 * _682;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _667;
    float _692 = (_681 + (-0.039999999105930328369140625)) * _667;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _667;
    float _694 = _691 + 0.039999999105930328369140625;
    float _696 = _692 + 0.039999999105930328369140625;
    float _697 = _693 + 0.039999999105930328369140625;
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _579, cbSceneParam._m0[86u].y * _580));
    float _709 = _706.x * TEXCOORD_4;
    float _710 = dot(vec3(_474, _475, _476), vec3(_555, _556, _557));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _474) - _555;
    float _718 = (_713 * _475) - _556;
    float _719 = (_713 * _476) - _557;
    float _723 = abs(dot(vec3(_555, _556, _557), vec3(_474, _475, _476)));
    float _3688 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _725 = sqrt(_623);
    float _738 = exp2((_725 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_725 * 3.0));
    float _744 = (1.0 - _738) * ((_725 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _745 = _738 * _725;
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1111;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _836 = fma(_781, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773));
        float _840 = fma(_781, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773));
        float _844 = fma(_781, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773));
        float _869 = _773 + _474;
        float _870 = _777 + _475;
        float _871 = _781 + _476;
        float _881 = fma(_871, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869)) - _836;
        float _882 = fma(_871, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869)) - _840;
        float _883 = fma(_871, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869)) - _844;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_836 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_840 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[34u].z) + ((((((_844 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _939 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_905.x + (-0.5));
        float _941 = _939 * (_905.y + (-0.5));
        float _942 = _939 * (_905.z + (-0.5));
        float _949 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_912.x + (-0.5));
        float _951 = _949 * (_912.y + (-0.5));
        float _952 = _949 * (_912.z + (-0.5));
        float _959 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_919.x + (-0.5));
        float _961 = _959 * (_919.y + (-0.5));
        float _962 = _959 * (_919.z + (-0.5));
        float _969 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_926.x + (-0.5));
        float _971 = _969 * (_926.y + (-0.5));
        float _972 = _969 * (_926.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _993 = (dot(vec3(_474, _475, _476), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1003 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3736 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1005 + 1.0))) + _1010) * _973;
        float _1020 = _941 * 0.5;
        float _1021 = _951 * 0.5;
        float _1022 = _961 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_474, _475, _476), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3769 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1047 + 1.0))) + _1052) * _974;
        float _1062 = _942 * 0.5;
        float _1063 = _952 * 0.5;
        float _1064 = _962 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_474, _475, _476), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3802 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1089 + 1.0))) + _1094) * _975;
        _1111 = _942;
        _1113 = _941;
        _1114 = _940;
        _1115 = _952;
        _1116 = _951;
        _1117 = _950;
        _1118 = _962;
        _1119 = _961;
        _1120 = _960;
        _1121 = _975;
        _1122 = _974;
        _1123 = _973;
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _1112;
        _1113 = _1112;
        _1114 = _1112;
        _1115 = _1112;
        _1116 = _1112;
        _1117 = _1112;
        _1118 = _1112;
        _1119 = _1112;
        _1120 = _1112;
        _1121 = _1112;
        _1122 = _1112;
        _1123 = _1112;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1155 = fma(_781, cbModelParam._m0[30u].z, fma(_777, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _773));
        float _1159 = fma(_781, cbModelParam._m0[31u].z, fma(_777, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _773));
        float _1163 = fma(_781, cbModelParam._m0[32u].z, fma(_777, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _773));
        float _1186 = _773 + _474;
        float _1187 = _777 + _475;
        float _1188 = _781 + _476;
        float _1198 = fma(_1188, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186)) - _1155;
        float _1199 = fma(_1188, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186)) - _1159;
        float _1200 = fma(_1188, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186)) - _1163;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1155 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1159 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[35u].z) + ((((((_1163 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1254 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1221.x + (-0.5));
        float _1256 = _1254 * (_1221.y + (-0.5));
        float _1257 = _1254 * (_1221.z + (-0.5));
        float _1264 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1228.x + (-0.5));
        float _1266 = _1264 * (_1228.y + (-0.5));
        float _1267 = _1264 * (_1228.z + (-0.5));
        float _1274 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1235.x + (-0.5));
        float _1276 = _1274 * (_1235.y + (-0.5));
        float _1277 = _1274 * (_1235.z + (-0.5));
        float _1284 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1242.x + (-0.5));
        float _1286 = _1284 * (_1242.y + (-0.5));
        float _1287 = _1284 * (_1242.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_474, _475, _476), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3865 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1318 + 1.0))) + _1323) * _1288;
        float _1333 = _1256 * 0.5;
        float _1334 = _1266 * 0.5;
        float _1335 = _1276 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_474, _475, _476), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3898 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1360 + 1.0))) + _1365) * _1289;
        float _1375 = _1257 * 0.5;
        float _1376 = _1267 * 0.5;
        float _1377 = _1277 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_474, _475, _476), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3931 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1402 + 1.0))) + _1407) * _1290;
        _1424 = _1257;
        _1425 = _1256;
        _1426 = _1255;
        _1427 = _1267;
        _1428 = _1266;
        _1429 = _1265;
        _1430 = _1277;
        _1431 = _1276;
        _1432 = _1275;
        _1433 = _1290;
        _1434 = _1289;
        _1435 = _1288;
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1112;
        _1425 = _1112;
        _1426 = _1112;
        _1427 = _1112;
        _1428 = _1112;
        _1429 = _1112;
        _1430 = _1112;
        _1431 = _1112;
        _1432 = _1112;
        _1433 = _1112;
        _1434 = _1112;
        _1435 = _1112;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1124)) + _1124;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1125)) + _1125;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1126)) + _1126;
    float _1471 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1448));
    float _1492 = _717 * 0.5;
    float _1493 = _718 * 0.5;
    float _1494 = _719 * 0.5;
    float _1495 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1498 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1501 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1535;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1508 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1111, _1115, _1118, _1121));
        float _1512 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1516 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1523 = dot(vec4(cbModelParam._m0[39u]), vec4(_1492, _1493, _1494, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1546;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1537 = dot(vec4(cbModelParam._m0[40u]), vec4(_1492, _1493, _1494, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1550 = (_1546 * cbModelParam._m0[1u].x) + (_1535 * (1.0 - cbModelParam._m0[1u].x));
    float _1560 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1560 : min(cbModelParam._m0[25u].z, _1560));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1610 = fma(_781, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773)) + cbModelParam._m0[13u].w;
        float _1614 = fma(_781, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773)) + cbModelParam._m0[14u].w;
        float _1618 = fma(_781, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773)) + cbModelParam._m0[15u].w;
        float _1621 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1624 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1627 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1655;
        if (_1621 > 0.0)
        {
            _1655 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1655 = frontier_phi_25_23_ladder;
        }
        float _1880;
        if (_1624 > 0.0)
        {
            _1880 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1880 = frontier_phi_34_30_ladder;
        }
        float _2137;
        if (_1627 > 0.0)
        {
            _2137 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2137 = frontier_phi_46_41_ladder;
        }
        float _2139 = isnan(_1880) ? _1655 : (isnan(_1655) ? _1880 : min(_1655, _1880));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1621) + _1610;
        float _2145 = (_2140 * _1624) + _1614;
        float _2146 = (_2140 * _1627) + _1618;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1561);
            frontier_phi_24_46_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1643 = frontier_phi_24_46_ladder_2;
        _1645 = frontier_phi_24_46_ladder_1;
        _1647 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1561);
        _1643 = _1631.x * cbModelParam._m0[1u].y;
        _1645 = _1631.y * cbModelParam._m0[1u].y;
        _1647 = _1631.z * cbModelParam._m0[1u].y;
    }
    float _1651 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1651 : min(cbModelParam._m0[25u].w, _1651));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_781, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_781, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_781, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1719 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1722 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1885;
        if (_1716 > 0.0)
        {
            _1885 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1885 = frontier_phi_36_32_ladder;
        }
        float _2164;
        if (_1719 > 0.0)
        {
            _2164 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2164 = frontier_phi_48_43_ladder;
        }
        float _2377;
        if (_1722 > 0.0)
        {
            _2377 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2377 = frontier_phi_57_54_ladder;
        }
        float _2379 = isnan(_2164) ? _1885 : (isnan(_1885) ? _2164 : min(_1885, _2164));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1716) + _1705;
        float _2385 = (_2380 * _1719) + _1709;
        float _2386 = (_2380 * _1722) + _1713;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1652);
            frontier_phi_33_57_ladder = _2602.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2602.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2602.z * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_33_57_ladder_1;
        _1743 = frontier_phi_33_57_ladder;
        _1745 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1652);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1758 = (((_744 * _694) + _745) * _709) * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1760 = (((_744 * _696) + _745) * _709) * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1762 = (((_744 * _697) + _745) * _709) * ((cbModelParam._m0[1u].w * (_1745 - _1647)) + _1647);
    float _1765 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    vec4 _1779 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_579, _580));
    float _1781 = _1779.w;
    float _1793 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1781);
    float _1794 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1781);
    float _1795 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1781);
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_636 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _709 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1838 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1842 = _1801 | 1u;
    float _1853 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_474, _475, _476));
    float _1856 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_474, _475, _476));
    float _4067 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _4078 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1861 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1863 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1870 = ((cbLight._m0[_1818].x * _1824) * _1863) + (((cbLight._m0[_1828].x * _1793) * _1838) * _1861);
    float _1871 = ((_1824 * cbLight._m0[_1818].y) * _1863) + (((cbLight._m0[_1828].y * _1794) * _1838) * _1861);
    float _1872 = ((_1824 * cbLight._m0[_1818].z) * _1863) + (((cbLight._m0[_1828].z * _1795) * _1838) * _1861);
    uvec4 _1877 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1879 = _1877.x == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1879)
    {
        _1890 = _1870;
        _1892 = _1871;
        _1894 = _1872;
    }
    else
    {
        uint _1898 = _1801 + 6u;
        float _1914 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _1915 = _1914 * _1914;
        float _4089 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1917 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1890 = (((cbLight._m0[_1898].x * 0.3183098733425140380859375) * _1916) * _1917) + _1870;
        _1892 = (((cbLight._m0[_1898].y * 0.3183098733425140380859375) * _1916) * _1917) + _1871;
        _1894 = (((cbLight._m0[_1898].z * 0.3183098733425140380859375) * _1916) * _1917) + _1872;
    }
    bool _1897 = _1877.y == 0u;
    float _1935;
    float _1937;
    float _1939;
    if (_1897)
    {
        _1935 = _1890;
        _1937 = _1892;
        _1939 = _1894;
    }
    else
    {
        uint _2108 = _1801 + 7u;
        float _2124 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4105 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2127 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1935 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _1890;
        _1937 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _1892;
        _1939 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _1894;
    }
    uint _1942 = _1801 + 8u;
    float _1955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _623) * 0.949999988079071044921875);
    float _1956 = _1955 * _1955;
    float _1957 = cbLight._m0[_1801].x + _555;
    float _1958 = cbLight._m0[_1801].y + _556;
    float _1959 = cbLight._m0[_1801].z + _557;
    float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
    float _1964 = _1963 * _1957;
    float _1965 = _1963 * _1958;
    float _1966 = _1963 * _1959;
    float _1967 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1801].xyz));
    float _4121 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _1971 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1972 = dot(vec3(_474, _475, _476), vec3(_1964, _1965, _1966));
    float _4143 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1964, _1965, _1966));
    float _4154 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1980 = _1956 * _1956;
    float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
    float _1992 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
    float _1993 = 0.959999978542327880859375 - _691;
    float _1995 = 0.959999978542327880859375 - _692;
    float _1996 = 0.959999978542327880859375 - _693;
    float _2003 = 1.0 - _1956;
    float _2014 = (0.5 / (((_1971 * ((_1970 * _2003) + _1956)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2003) + _1956) * _1970))) * _1970;
    float _4165 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
    uint _2030 = _1801 + 9u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _623) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1842].x + _555;
    float _2044 = cbLight._m0[_1842].y + _556;
    float _2045 = cbLight._m0[_1842].z + _557;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1842].xyz));
    float _4176 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2057 = dot(vec3(_474, _475, _476), vec3(_2050, _2051, _2052));
    float _4187 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2061 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2050, _2051, _2052));
    float _4198 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = _2042 * _2042;
    float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
    float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
    float _2083 = 1.0 - _2042;
    float _2093 = (0.5 / (((_1971 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2083) + _2042) * _2056))) * _2056;
    float _4209 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
    float _2105 = (((((_2076 * _1993) + _694) * cbLight._m0[_2030].x) * _2095) * _1824) + ((((cbLight._m0[_1942].x * _1793) * ((_1992 * _1993) + _694)) * _2016) * _1838);
    float _2106 = (((((_2076 * _1995) + _696) * cbLight._m0[_2030].y) * _2095) * _1824) + ((((cbLight._m0[_1942].y * _1794) * ((_1992 * _1995) + _696)) * _2016) * _1838);
    float _2107 = (((((_2076 * _1996) + _697) * cbLight._m0[_2030].z) * _2095) * _1824) + ((((cbLight._m0[_1942].z * _1795) * ((_1992 * _1996) + _697)) * _2016) * _1838);
    float _2169;
    float _2171;
    float _2173;
    if (_1879)
    {
        _2169 = _2105;
        _2171 = _2106;
        _2173 = _2107;
    }
    else
    {
        uint _2175 = _1801 + 2u;
        uint _2179 = _1801 + 10u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _623) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _555;
        float _2196 = cbLight._m0[_2175].y + _556;
        float _2197 = cbLight._m0[_2175].z + _557;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2175].xyz));
        float _4220 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2209 = dot(vec3(_474, _475, _476), vec3(_2202, _2203, _2204));
        float _4231 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4242 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0);
        float _2235 = 1.0 - _2194;
        float _2245 = (0.5 / (((_1971 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2235) + _2194) * _2208))) * _2208;
        float _4253 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2169 = (((((_2228 * _1993) + _694) * cbLight._m0[_2179].x) * _2247) * _2248) + _2105;
        _2171 = (((((_2228 * _1995) + _696) * cbLight._m0[_2179].y) * _2247) * _2248) + _2106;
        _2173 = (((((_2228 * _1996) + _697) * cbLight._m0[_2179].z) * _2247) * _2248) + _2107;
    }
    float _2283;
    float _2285;
    float _2287;
    if (_1897)
    {
        _2283 = _2169;
        _2285 = _2171;
        _2287 = _2173;
    }
    else
    {
        uint _2294 = _1801 + 3u;
        uint _2298 = _1801 + 11u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _623) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _555;
        float _2315 = cbLight._m0[_2294].y + _556;
        float _2316 = cbLight._m0[_2294].z + _557;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2294].xyz));
        float _4269 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2328 = dot(vec3(_474, _475, _476), vec3(_2321, _2322, _2323));
        float _4280 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4291 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0);
        float _2354 = 1.0 - _2313;
        float _2364 = (0.5 / (((_1971 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_1971 * _2354) + _2313) * _2327))) * _2327;
        float _4302 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2283 = (((((_2347 * _1993) + _694) * cbLight._m0[_2298].x) * _2366) * _2367) + _2169;
        _2285 = (((((_2347 * _1995) + _696) * cbLight._m0[_2298].y) * _2366) * _2367) + _2171;
        _2287 = (((((_2347 * _1996) + _697) * cbLight._m0[_2298].z) * _2366) * _2367) + _2173;
    }
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_1799.y == 0u)
    {
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2442;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2442;
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2442;
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.x;
        uint _2469 = uint((float(_2457.y) * floor(float(uint(cbSceneParam._m0[85u].y * _580) / _2458))) + floor(float(uint(cbSceneParam._m0[85u].x * _579) / _2458)));
        float _2479 = (log2(_2445 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2480 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        uint _2483 = uint(isnan(14.0) ? _2480 : (isnan(_2480) ? 14.0 : min(_2480, 14.0)));
        uvec4 _2488 = texelFetch(g_lightClusterGridBuffer, int(((_2483 << 2u) + (_2469 << 6u)) >> 2u));
        uint _2489 = _2488.x;
        uint _2490 = _2457.z;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((((1u << ((_2490 >> 4u) & 15u)) + 4294967295u) & _2489) == 0u) || ((_2490 & 240u) == 0u))
        {
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
        }
        else
        {
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            uint _2765 = 0u;
            uint _2774;
            bool _2775;
            for (;;)
            {
                _2774 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2765 << 2u)) >> 2u)).x;
                _2775 = _2774 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2775)
                {
                    frontier_phi_74_pred = _2764;
                    frontier_phi_74_pred_1 = _2763;
                    frontier_phi_74_pred_2 = _2762;
                    frontier_phi_74_pred_3 = _2761;
                    frontier_phi_74_pred_4 = _2760;
                    frontier_phi_74_pred_5 = _2759;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2774;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2765 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _2443;
                        float _2971 = _2930.y - _2444;
                        float _2972 = _2930.z - _2445;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_604, _607, _610), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4328 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _2443;
                        float _3006 = (-0.0) - _2444;
                        float _3007 = (-0.0) - _2445;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3022 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3023 = 1.0 - _725;
                        float _3030 = sqrt(1.0 - ((1.0 - (_3023 * _3023)) * (1.0 - (_3022 * _3022))));
                        float _3031 = _3030 * _3030;
                        float _3032 = _3031 * _3031;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3043 = dot(vec3(_604, _607, _610), vec3(_3012, _3013, _3014));
                        float _4344 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3047 = dot(vec3(_604, _607, _610), vec3(_3039 * _3033, _3039 * _3034, _3039 * _3035));
                        float _4355 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3054 = ((_3050 * _3050) * (_3032 + (-1.0))) + 1.0;
                        float _3055 = _2990 * _3031;
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _2980) + _3056;
                        float _4366 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3061 = 1.0 - _3031;
                        float _3071 = (0.5 / (((_3060 * ((_3046 * _3061) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3031) * _3046))) * _3060;
                        float _4377 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3082 = (((_3032 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3054 * _3054) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2834 = (_3001 * _2949.x) + _2907;
                        _2835 = (_3001 * _2949.y) + _2908;
                        _2836 = (_3001 * _2949.z) + _2909;
                        _2831 = (_3082 * _2966.x) + _2904;
                        _2832 = (_3082 * _2966.y) + _2905;
                        _2833 = (_3082 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_74_pred = _2836;
                    frontier_phi_74_pred_1 = _2835;
                    frontier_phi_74_pred_2 = _2834;
                    frontier_phi_74_pred_3 = _2833;
                    frontier_phi_74_pred_4 = _2832;
                    frontier_phi_74_pred_5 = _2831;
                }
                _2618 = frontier_phi_74_pred;
                _2616 = frontier_phi_74_pred_1;
                _2614 = frontier_phi_74_pred_2;
                _2612 = frontier_phi_74_pred_3;
                _2610 = frontier_phi_74_pred_4;
                _2608 = frontier_phi_74_pred_5;
                uint _2766 = _2765 + 1u;
                if (_2766 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2759 = _2608;
                    _2760 = _2610;
                    _2761 = _2612;
                    _2762 = _2614;
                    _2763 = _2616;
                    _2764 = _2618;
                    _2765 = _2766;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
        }
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.z;
        uint _2624 = (_2622 >> 8u) & 15u;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((4294967295u << _2624) & _2489) == 0u)
        {
            _2727 = _2607;
            _2729 = _2609;
            _2731 = _2611;
            _2733 = _2613;
            _2735 = _2615;
            _2737 = _2617;
        }
        else
        {
            float _2752 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
            float _2753 = _2752 * _2443;
            float _2754 = _2752 * _2444;
            float _2755 = _2752 * _2445;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2624 < ((_2622 >> 12u) & 15u))
            {
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2887 = _2607;
                float _2888 = _2609;
                float _2889 = _2611;
                float _2890 = _2613;
                float _2891 = _2615;
                float _2892 = _2617;
                uint _2893 = _2624;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2903)
                    {
                        frontier_phi_85_pred = _2891;
                        frontier_phi_85_pred_1 = _2890;
                        frontier_phi_85_pred_2 = _2889;
                        frontier_phi_85_pred_3 = _2888;
                        frontier_phi_85_pred_4 = _2887;
                        frontier_phi_85_pred_5 = _2892;
                    }
                    else
                    {
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        float _3111 = _2889;
                        float _3112 = _2890;
                        float _3113 = _2891;
                        float _3114 = _2892;
                        uint _3115 = _2902;
                        uint _3116;
                        vec4 _3141;
                        float _3142;
                        vec4 _3157;
                        vec3 _3169;
                        vec4 _3185;
                        vec4 _3200;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3126 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3115));
                            _3116 = (_3115 + 4294967295u) & _3115;
                            uint _3128 = _3126 * 40u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3142 = _3141.w;
                            uint _3144 = (_3126 * 40u) + 4u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3126 * 40u) + 8u;
                            _3169 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x));
                            uint _3172 = (_3126 * 40u) + 16u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3126 * 40u) + 20u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3126 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3126 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2445, _3234.z, fma(_2444, _3234.y, _3234.x * _2443)) + _3234.w;
                            _3247 = !((fma(_2445, _3215.z, fma(_2444, _3215.y, _3215.x * _2443)) + _3215.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3141.x - _2443;
                                float _3275 = _3141.y - _2444;
                                float _3276 = _3141.z - _2445;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3142 * _3142));
                                float _4388 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3292 = sqrt(_3277) * _3157.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_604, _607, _610))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2445, _3185.z, fma(_2444, _3185.y, _3185.x * _2443)) + _3185.w) / _3246;
                                float _3306 = (fma(_2445, _3200.z, fma(_2444, _3200.y, _3200.x * _2443)) + _3200.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4404 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _725;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2753;
                                float _3336 = _3282 - _2754;
                                float _3337 = _3283 - _2755;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2753, (-0.0) - _2754, (-0.0) - _2755));
                                float _4415 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3349 = dot(vec3(_604, _607, _610), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4426 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_604, _607, _610), vec3(_3281, _3282, _3283))) + _3358;
                                float _4437 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4448 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3312 * _3157.y;
                                frontier_phi_91_pred_1 = _3312 * _3157.x;
                                frontier_phi_91_pred_2 = _3386 * _3169.z;
                                frontier_phi_91_pred_3 = _3386 * _3169.y;
                                frontier_phi_91_pred_4 = _3386 * _3169.x;
                                frontier_phi_91_pred_5 = _3312 * _3157.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3394 = frontier_phi_91_pred;
                            _3393 = frontier_phi_91_pred_1;
                            _3392 = frontier_phi_91_pred_2;
                            _3391 = frontier_phi_91_pred_3;
                            _3390 = frontier_phi_91_pred_4;
                            _3395 = frontier_phi_91_pred_5;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            if (_3116 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3116;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3100;
                        frontier_phi_85_pred_1 = _3099;
                        frontier_phi_85_pred_2 = _3098;
                        frontier_phi_85_pred_3 = _3097;
                        frontier_phi_85_pred_4 = _3096;
                        frontier_phi_85_pred_5 = _3101;
                    }
                    _2736 = frontier_phi_85_pred;
                    _2734 = frontier_phi_85_pred_1;
                    _2732 = frontier_phi_85_pred_2;
                    _2730 = frontier_phi_85_pred_3;
                    _2728 = frontier_phi_85_pred_4;
                    _2738 = frontier_phi_85_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2728;
                        _2888 = _2730;
                        _2889 = _2732;
                        _2890 = _2734;
                        _2891 = _2736;
                        _2892 = _2738;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2738;
                frontier_phi_66_67_ladder_1 = _2734;
                frontier_phi_66_67_ladder_2 = _2736;
                frontier_phi_66_67_ladder_3 = _2730;
                frontier_phi_66_67_ladder_4 = _2728;
                frontier_phi_66_67_ladder_5 = _2732;
            }
            else
            {
                frontier_phi_66_67_ladder = _2617;
                frontier_phi_66_67_ladder_1 = _2613;
                frontier_phi_66_67_ladder_2 = _2615;
                frontier_phi_66_67_ladder_3 = _2609;
                frontier_phi_66_67_ladder_4 = _2607;
                frontier_phi_66_67_ladder_5 = _2611;
            }
            _2727 = frontier_phi_66_67_ladder_4;
            _2729 = frontier_phi_66_67_ladder_3;
            _2731 = frontier_phi_66_67_ladder_5;
            _2733 = frontier_phi_66_67_ladder_1;
            _2735 = frontier_phi_66_67_ladder_2;
            _2737 = frontier_phi_66_67_ladder;
        }
        float _2742 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2501 = (_2742 * _2733) + _1935;
        _2503 = (_2742 * _2735) + _1937;
        _2505 = (_2742 * _2737) + _1939;
        _2507 = ((_2727 * _694) * _2742) + _2283;
        _2509 = ((_2729 * _696) * _2742) + _2285;
        _2511 = ((_2731 * _697) * _2742) + _2287;
    }
    else
    {
        _2501 = _1935;
        _2503 = _1937;
        _2505 = _1939;
        _2507 = _2283;
        _2509 = _2285;
        _2511 = _2287;
    }
    vec4 _2517 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4464 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4475 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4486 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2541 = (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2501 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _709))) + ((_2507 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + (_2517.x * cbMtdParam._m0[3u].x);
    float _2543 = ((_2517.y * cbMtdParam._m0[3u].x) + ((_2509 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2503 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _709)));
    float _2545 = ((_2517.z * cbMtdParam._m0[3u].x) + ((_2511 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1550)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2505 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _709)));
    float _2546 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2547 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2548 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    uint _2549 = _636 + 6u;
    float _2557 = _579 / cbSceneParam._m0[86u].x;
    float _2558 = _580 / cbSceneParam._m0[86u].y;
    vec4 _2572 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2574 = _2572.x;
    float _2575 = _2572.y;
    float _2576 = _2572.z;
    float _2577 = _2572.w;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2632 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2633 = _2632 / _497;
        float _2644 = _2633 * _548;
        float _2645 = _549 * _2633;
        float _2646 = (-0.0) - _2645;
        float _2647 = _2633 * _550;
        float _2649 = (cbSceneParam._m0[77u].w * _2646) / _2632;
        float _2650 = _2649 + cbSceneParam._m0[79u].w;
        float _2651 = cbSceneParam._m0[79u].w - _2645;
        float _2657 = sqrt(((_2644 * _2644) + (_2645 * _2645)) + (_2647 * _2647));
        float _2660 = (1.0 - (cbSceneParam._m0[77u].w / _2632)) * _2657;
        float _2665 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2667 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2844;
        if (abs((_2646 - _2649) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2844 = ((((_2650 > 0.0) ? exp2(_2665 * _2650) : (2.0 - exp2(_2667 * _2650))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2660;
        }
        else
        {
            float _2788 = 1.0 / cbSceneParam._m0[80u].x;
            float _2789 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : max(_2650, _2651));
            float _2790 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : min(_2650, _2651));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            _2844 = ((abs(_2657 / _2646) * cbSceneParam._m0[80u].y) * ((((_2799 - _2800) * 2.0) - ((exp2(_2665 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0)))) - exp2(_2665 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))))) * _2788)) - ((exp2(_2667 * _2799) - exp2(_2667 * _2800)) * _2788))) + (_2660 * cbSceneParam._m0[80u].z);
        }
        vec4 _2846 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, 1.0), 0.0);
        float _2855 = exp2((_2844 * (-1.44269502162933349609375)) * (1.0 - _2846.w));
        float _2856 = log2(_2855);
        float _2872 = log2(_2577);
        _2669 = (exp2(_2872 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].x)) * _2846.x) / cbSceneParam._m0[78u].x)) + _2574;
        _2671 = (exp2(_2872 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].y)) * _2846.y) / cbSceneParam._m0[78u].y)) + _2575;
        _2673 = (exp2(_2872 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].z)) * _2846.z) / cbSceneParam._m0[78u].z)) + _2576;
        _2675 = _2855 * _2577;
    }
    else
    {
        _2669 = _2574;
        _2671 = _2575;
        _2673 = _2576;
        _2675 = _2577;
    }
    bool _2882;
    vec4 _2685;
    vec4 _2707;
    float _2709;
    float _2713;
    float _2714;
    float _2715;
    float _2716;
    bool _2726;
    for (;;)
    {
        _2685 = cbMatDynParam._m0[0u];
        float _2687 = roundEven(_2685.y);
        bool _2688 = _2687 == 3.0;
        float _2689 = log2(_2675);
        float _2696 = exp2(_2689 * cbSceneParam._m0[78u].x) * _2546;
        float _2697 = exp2(_2689 * cbSceneParam._m0[78u].y) * _2547;
        float _2698 = exp2(_2689 * cbSceneParam._m0[78u].z) * _2548;
        float _2705 = _564 + (-0.5);
        _2707 = cbMtdParam._m0[1u];
        _2709 = _2707.y * _2705;
        float _2712 = (_2687 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2713 = _2712 * (_2688 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2669)));
        _2714 = _2712 * (_2688 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2671)));
        _2715 = _2712 * (_2688 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2673)));
        _2716 = _2705 * 0.999000012874603271484375;
        _2726 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2726)
        {
            if ((cbInstanceData._m0[_636 + 7u].x + _2716) < 0.5)
            {
                _2882 = true;
                break;
            }
        }
        uint _2823 = _638 + uint(_2685.w);
        if ((cbInstanceData._m0[_2823].w < 1.0) && ((cbInstanceData._m0[_2823].w + _2716) < 0.5))
        {
            _2882 = true;
            break;
        }
        if ((_2709 + 1.0) < _2707.x)
        {
            _2882 = true;
            break;
        }
        _2882 = false;
        break;
    }
    float _3087;
    if (_2882)
    {
        discard_state = true;
        _3087 = 0.0;
    }
    else
    {
        _3087 = cbInstanceData._m0[_2549].w;
    }
    SV_Target.x = _2713;
    SV_Target.y = _2714;
    SV_Target.z = _2715;
    SV_Target.w = _3087;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2549].w;
    discard_exit();
}


