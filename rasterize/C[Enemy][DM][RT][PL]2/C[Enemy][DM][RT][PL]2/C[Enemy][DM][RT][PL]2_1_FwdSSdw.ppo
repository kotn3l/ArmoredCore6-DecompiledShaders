#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1158;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _262 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _267 = log2(0.0);
    bool _270 = exp2(_267 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[15u].x;
    _190[0u] = cbMtdParam._m0[15u].y;
    _191[0u] = cbMtdParam._m0[15u].z;
    _189[1u] = cbMtdParam._m0[16u].x;
    _190[1u] = cbMtdParam._m0[16u].y;
    _191[1u] = cbMtdParam._m0[16u].z;
    _189[2u] = cbMtdParam._m0[17u].x;
    _190[2u] = cbMtdParam._m0[17u].y;
    _191[2u] = cbMtdParam._m0[17u].z;
    _189[3u] = cbMtdParam._m0[12u].x;
    _190[3u] = cbMtdParam._m0[12u].y;
    _191[3u] = cbMtdParam._m0[12u].z;
    _189[4u] = cbMtdParam._m0[13u].x;
    _190[4u] = cbMtdParam._m0[13u].y;
    _191[4u] = cbMtdParam._m0[13u].z;
    _189[5u] = cbMtdParam._m0[14u].x;
    _190[5u] = cbMtdParam._m0[14u].y;
    _191[5u] = cbMtdParam._m0[14u].z;
    vec4 _338 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _342 = _338.y;
    float _345 = (_338.x + (-0.02500000037252902984619140625)) * 8.0;
    float _347 = roundEven(_345);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    uint _351 = uint(int(isnan(5.0) ? _348 : (isnan(_348) ? 5.0 : min(_348, 5.0))));
    float _368;
    if (_270)
    {
        _368 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _368 = cbMtdParam._m0[20u].z;
    }
    float _374;
    float _376;
    if (_270)
    {
        _374 = cbMtdParam._m0[28u].z;
        _376 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _374 = cbMtdParam._m0[24u].x;
        _376 = cbMtdParam._m0[24u].y;
    }
    float _378 = _374 * TEXCOORD.x;
    float _379 = _376 * TEXCOORD.y;
    float _391 = floor(_368);
    vec4 _394 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _378) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _379) + cbTextureTilingScale._m0[8u].w, _391));
    vec4 _416 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _262) + cbTextureTilingScale._m0[0u].w));
    float _424 = ((((((_189[_351] - cbMtdParam._m0[19u].x) * _342) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _394.x) * cbMtdParam._m0[9u].x) * _416.x;
    float _428 = ((((((_190[_351] - cbMtdParam._m0[19u].y) * _342) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _394.y) * cbMtdParam._m0[9u].y) * _416.y;
    float _432 = ((((((_191[_351] - cbMtdParam._m0[19u].z) * _342) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _394.z) * cbMtdParam._m0[9u].z) * _416.z;
    vec4 _444 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _262) + cbTextureTilingScale._m0[1u].w));
    float _448 = _444.z;
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].x;
    _185[0u] = cbMtdParam._m0[25u].y;
    _184[1u] = cbMtdParam._m0[26u].x;
    _185[1u] = cbMtdParam._m0[26u].y;
    _184[2u] = cbMtdParam._m0[26u].z;
    _185[2u] = cbMtdParam._m0[26u].w;
    _184[3u] = cbMtdParam._m0[27u].x;
    _185[3u] = cbMtdParam._m0[27u].y;
    _184[4u] = cbMtdParam._m0[25u].z;
    _185[4u] = cbMtdParam._m0[25u].w;
    float _493 = roundEven(5.0 - _345);
    float _494 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = isnan(4.0) ? _494 : (isnan(_494) ? 4.0 : min(_494, 4.0));
    float _497 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    uint _499 = uint(int(isnan(4.0) ? _497 : (isnan(_497) ? 4.0 : min(_497, 4.0))));
    float _505 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _378) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _379) + cbTextureTilingScale._m0[10u].w, _391)).x + _444.w) + _185[_499];
    vec4 _523 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _378) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _379) + cbTextureTilingScale._m0[9u].w, _391));
    float _530 = (_523.x * 2.0) + (-1.0);
    float _531 = (_523.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3561 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _538 = sqrt(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))));
    float _547 = (cbMtdParam._m0[21u].x * (((_448 * 2.0) * (_523.z + _184[_499])) - _448)) + _448;
    float _551 = (cbMtdParam._m0[21u].y * ((_444.x * 2.0) + (-1.0))) + _530;
    float _552 = (cbMtdParam._m0[21u].y * ((_444.y * 2.0) + (-1.0))) + _531;
    float _555 = fma(_538, _241, fma(_552, _233 * TANGENT.x, (_219 * _211) * _551));
    float _558 = fma(_538, _242, fma(_552, _233 * TANGENT.y, (_219 * _212) * _551));
    float _561 = fma(_538, _243, fma(_552, _233 * TANGENT.z, (_219 * _213) * _551));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3572 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _569 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3594 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3605 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3616 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _573 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _640 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _630);
    float _641 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _630);
    float _642 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _630);
    float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
    float _647 = _640 * _646;
    float _648 = _641 * _646;
    float _649 = _642 * _646;
    float _655 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _656 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _658 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _660 = _658.w;
    float _679 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _682 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _685 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    vec4 _687 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _698 = (((_687.y - _569) + (_687.w * _569)) * cbMtdParam._m0[3u].x) + _569;
    uint _711 = uint(roundEven(NORMAL.w)) * 13u;
    uint _713 = (_711 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _719 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_713].x;
    float _720 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_713].y;
    float _721 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_713].z;
    float _3627 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    vec4 _725 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _730 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _741 = (((_730.x - _573) + (_730.w * _573)) * cbMtdParam._m0[3u].x) + _573;
    float _754 = (cbMtdParam._m0[3u].x * (((_722 * _660) - _722) + _725.x)) + _722;
    float _755 = (cbMtdParam._m0[3u].x * (((_723 * _660) - _723) + _725.y)) + _723;
    float _756 = (cbMtdParam._m0[3u].x * (((_724 * _660) - _724) + _725.z)) + _724;
    float _757 = 1.0 - _741;
    float _758 = _757 * _754;
    float _759 = _757 * _755;
    float _760 = _757 * _756;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _741;
    float _766 = (_755 + (-0.039999999105930328369140625)) * _741;
    float _767 = (_756 + (-0.039999999105930328369140625)) * _741;
    float _768 = _765 + 0.039999999105930328369140625;
    float _770 = _766 + 0.039999999105930328369140625;
    float _771 = _767 + 0.039999999105930328369140625;
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _655, cbSceneParam._m0[86u].y * _656));
    float _783 = _780.x * TEXCOORD_4;
    float _784 = dot(vec3(_566, _567, _568), vec3(_647, _648, _649));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _566) - _647;
    float _792 = (_787 * _567) - _648;
    float _793 = (_787 * _568) - _649;
    float _797 = abs(dot(vec3(_647, _648, _649), vec3(_566, _567, _568)));
    float _3660 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_698);
    float _810 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _816 = (1.0 - _810) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _817 = _810 * _799;
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1157;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _882 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _886 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _890 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _915 = _845 + _566;
        float _916 = _849 + _567;
        float _917 = _853 + _568;
        float _927 = fma(_917, cbModelParam._m0[26u].z, fma(_916, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915)) - _882;
        float _928 = fma(_917, cbModelParam._m0[27u].z, fma(_916, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915)) - _886;
        float _929 = fma(_917, cbModelParam._m0[28u].z, fma(_916, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915)) - _890;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_882 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_886 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[34u].z) + ((((((_890 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _985 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_951.x + (-0.5));
        float _987 = _985 * (_951.y + (-0.5));
        float _988 = _985 * (_951.z + (-0.5));
        float _995 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_958.x + (-0.5));
        float _997 = _995 * (_958.y + (-0.5));
        float _998 = _995 * (_958.z + (-0.5));
        float _1005 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_965.x + (-0.5));
        float _1007 = _1005 * (_965.y + (-0.5));
        float _1008 = _1005 * (_965.z + (-0.5));
        float _1015 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_972.x + (-0.5));
        float _1017 = _1015 * (_972.y + (-0.5));
        float _1018 = _1015 * (_972.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1039 = (dot(vec3(_566, _567, _568), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1049 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3708 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1051 + 1.0))) + _1056) * _1019;
        float _1066 = _987 * 0.5;
        float _1067 = _997 * 0.5;
        float _1068 = _1007 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_566, _567, _568), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3741 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1093 + 1.0))) + _1098) * _1020;
        float _1108 = _988 * 0.5;
        float _1109 = _998 * 0.5;
        float _1110 = _1008 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_566, _567, _568), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3774 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1135 + 1.0))) + _1140) * _1021;
        _1157 = _988;
        _1159 = _987;
        _1160 = _986;
        _1161 = _998;
        _1162 = _997;
        _1163 = _996;
        _1164 = _1008;
        _1165 = _1007;
        _1166 = _1006;
        _1167 = _1021;
        _1168 = _1020;
        _1169 = _1019;
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _1158;
        _1159 = _1158;
        _1160 = _1158;
        _1161 = _1158;
        _1162 = _1158;
        _1163 = _1158;
        _1164 = _1158;
        _1165 = _1158;
        _1166 = _1158;
        _1167 = _1158;
        _1168 = _1158;
        _1169 = _1158;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1198 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1202 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1206 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1229 = _845 + _566;
        float _1230 = _849 + _567;
        float _1231 = _853 + _568;
        float _1241 = fma(_1231, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229)) - _1198;
        float _1242 = fma(_1231, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229)) - _1202;
        float _1243 = fma(_1231, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229)) - _1206;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1198 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1202 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[35u].z) + ((((((_1206 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1297 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1264.x + (-0.5));
        float _1299 = _1297 * (_1264.y + (-0.5));
        float _1300 = _1297 * (_1264.z + (-0.5));
        float _1307 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1271.x + (-0.5));
        float _1309 = _1307 * (_1271.y + (-0.5));
        float _1310 = _1307 * (_1271.z + (-0.5));
        float _1317 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1278.x + (-0.5));
        float _1319 = _1317 * (_1278.y + (-0.5));
        float _1320 = _1317 * (_1278.z + (-0.5));
        float _1327 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1285.x + (-0.5));
        float _1329 = _1327 * (_1285.y + (-0.5));
        float _1330 = _1327 * (_1285.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_566, _567, _568), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3837 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1361 + 1.0))) + _1366) * _1331;
        float _1376 = _1299 * 0.5;
        float _1377 = _1309 * 0.5;
        float _1378 = _1319 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_566, _567, _568), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3870 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1403 + 1.0))) + _1408) * _1332;
        float _1418 = _1300 * 0.5;
        float _1419 = _1310 * 0.5;
        float _1420 = _1320 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_566, _567, _568), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3903 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1445 + 1.0))) + _1450) * _1333;
        _1467 = _1300;
        _1468 = _1299;
        _1469 = _1298;
        _1470 = _1310;
        _1471 = _1309;
        _1472 = _1308;
        _1473 = _1320;
        _1474 = _1319;
        _1475 = _1318;
        _1476 = _1333;
        _1477 = _1332;
        _1478 = _1331;
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1158;
        _1468 = _1158;
        _1469 = _1158;
        _1470 = _1158;
        _1471 = _1158;
        _1472 = _1158;
        _1473 = _1158;
        _1474 = _1158;
        _1475 = _1158;
        _1476 = _1158;
        _1477 = _1158;
        _1478 = _1158;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1170)) + _1170;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1171)) + _1171;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1172)) + _1172;
    float _1514 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1491));
    float _1535 = _791 * 0.5;
    float _1536 = _792 * 0.5;
    float _1537 = _793 * 0.5;
    float _1538 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1541 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1544 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1578;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1551 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1157, _1161, _1164, _1167));
        float _1555 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1559 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1566 = dot(vec4(cbModelParam._m0[39u]), vec4(_1535, _1536, _1537, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1589;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1580 = dot(vec4(cbModelParam._m0[40u]), vec4(_1535, _1536, _1537, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1593 = (_1589 * cbModelParam._m0[1u].x) + (_1578 * (1.0 - cbModelParam._m0[1u].x));
    float _1603 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _698);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1603 : min(cbModelParam._m0[25u].z, _1603));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1651 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1655 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1659 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1662 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1665 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1668 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1696;
        if (_1662 > 0.0)
        {
            _1696 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1696 = frontier_phi_20_18_ladder;
        }
        float _1920;
        if (_1665 > 0.0)
        {
            _1920 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1920 = frontier_phi_29_25_ladder;
        }
        float _2177;
        if (_1668 > 0.0)
        {
            _2177 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2177 = frontier_phi_41_36_ladder;
        }
        float _2179 = isnan(_1920) ? _1696 : (isnan(_1696) ? _1920 : min(_1696, _1920));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1662) + _1651;
        float _2185 = (_2180 * _1665) + _1655;
        float _2186 = (_2180 * _1668) + _1659;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2187;
        float _2191 = _2187 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 > _2191) || ((_2185 < _2189) || ((_2184 < _2189) || (_2184 > _2191))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1604);
            frontier_phi_19_41_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1684 = frontier_phi_19_41_ladder_2;
        _1686 = frontier_phi_19_41_ladder_1;
        _1688 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1604);
        _1684 = _1672.x * cbModelParam._m0[1u].y;
        _1686 = _1672.y * cbModelParam._m0[1u].y;
        _1688 = _1672.z * cbModelParam._m0[1u].y;
    }
    float _1692 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _698);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1692 : min(cbModelParam._m0[25u].w, _1692));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1761 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1764 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1925;
        if (_1758 > 0.0)
        {
            _1925 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1925 = frontier_phi_31_27_ladder;
        }
        float _2204;
        if (_1761 > 0.0)
        {
            _2204 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2204 = frontier_phi_43_38_ladder;
        }
        float _2417;
        if (_1764 > 0.0)
        {
            _2417 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2417 = frontier_phi_52_49_ladder;
        }
        float _2419 = isnan(_2204) ? _1925 : (isnan(_1925) ? _2204 : min(_1925, _2204));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1758) + _1747;
        float _2425 = (_2420 * _1761) + _1751;
        float _2426 = (_2420 * _1764) + _1755;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2427;
        float _2430 = _2427 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2426 > _2430) || ((_2426 < _2428) || ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 < _2428) || (_2424 > _2430))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2426, cbModelParam._m0[17u].z, fma(_2425, cbModelParam._m0[17u].y, _2424 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2426, cbModelParam._m0[18u].z, fma(_2425, cbModelParam._m0[18u].y, _2424 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2426, cbModelParam._m0[19u].z, fma(_2425, cbModelParam._m0[19u].y, _2424 * cbModelParam._m0[19u].x))), _1693);
            frontier_phi_28_52_ladder = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_1 = _2642.y * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_2 = _2642.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_28_52_ladder_2;
        _1785 = frontier_phi_28_52_ladder_1;
        _1787 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1693);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1800 = (((_816 * _768) + _817) * _783) * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1802 = (((_816 * _770) + _817) * _783) * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1804 = (((_816 * _771) + _817) * _783) * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    vec4 _1821 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_655, _656));
    float _1823 = _1821.w;
    float _1835 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1823);
    float _1836 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1823);
    float _1837 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1823);
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_711 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1851 = _783 + (-1.0);
    float _1856 = (cbLight._m0[_1844].x * _1851) + 1.0;
    float _1857 = (cbLight._m0[_1844].y * _1851) + 1.0;
    float _1858 = (cbLight._m0[_1844].z * _1851) + 1.0;
    float _1859 = (cbLight._m0[_1844].w * _1851) + 1.0;
    uint _1860 = _1843 + 5u;
    float _1866 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1870 = _1843 + 4u;
    float _1879 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1883 = _1843 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_566, _567, _568));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_566, _567, _568));
    float _4039 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _4050 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1860].x * _1866) * _1904) + (((cbLight._m0[_1870].x * _1835) * _1879) * _1902);
    float _1912 = ((_1866 * cbLight._m0[_1860].y) * _1904) + (((cbLight._m0[_1870].y * _1836) * _1879) * _1902);
    float _1913 = ((_1866 * cbLight._m0[_1860].z) * _1904) + (((cbLight._m0[_1870].z * _1837) * _1879) * _1902);
    uvec4 _1917 = floatBitsToUint(cbLight._m0[_1843 + 12u]);
    bool _1919 = _1917.x == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1919)
    {
        _1930 = _1911;
        _1932 = _1912;
        _1934 = _1913;
    }
    else
    {
        uint _1938 = _1843 + 6u;
        float _1954 = (dot(vec3(cbLight._m0[_1843 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _4061 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1957 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1930 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1911;
        _1932 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1912;
        _1934 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1913;
    }
    bool _1937 = _1917.y == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1937)
    {
        _1975 = _1930;
        _1977 = _1932;
        _1979 = _1934;
    }
    else
    {
        uint _2148 = _1843 + 7u;
        float _2164 = (dot(vec3(cbLight._m0[_1843 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2165 = _2164 * _2164;
        float _4077 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2167 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1975 = (((cbLight._m0[_2148].x * 0.3183098733425140380859375) * _2166) * _2167) + _1930;
        _1977 = (((cbLight._m0[_2148].y * 0.3183098733425140380859375) * _2166) * _2167) + _1932;
        _1979 = (((cbLight._m0[_2148].z * 0.3183098733425140380859375) * _2166) * _2167) + _1934;
    }
    uint _1982 = _1843 + 8u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _698) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1843].x + _647;
    float _1998 = cbLight._m0[_1843].y + _648;
    float _1999 = cbLight._m0[_1843].z + _649;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1843].xyz));
    float _4093 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2011 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2012 = dot(vec3(_566, _567, _568), vec3(_2004, _2005, _2006));
    float _4115 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2004, _2005, _2006));
    float _4126 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1996 * _1996;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2032 = exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0);
    float _2033 = 0.959999978542327880859375 - _765;
    float _2035 = 0.959999978542327880859375 - _766;
    float _2036 = 0.959999978542327880859375 - _767;
    float _2043 = 1.0 - _1996;
    float _2054 = (0.5 / (((_2011 * ((_2010 * _2043) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2043) + _1996) * _2010))) * _2010;
    float _4137 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2056 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    uint _2070 = _1843 + 9u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _698) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1883].x + _647;
    float _2084 = cbLight._m0[_1883].y + _648;
    float _2085 = cbLight._m0[_1883].z + _649;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1883].xyz));
    float _4148 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2097 = dot(vec3(_566, _567, _568), vec3(_2090, _2091, _2092));
    float _4159 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2090, _2091, _2092));
    float _4170 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2082 * _2082;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
    float _2123 = 1.0 - _2082;
    float _2133 = (0.5 / (((_2011 * ((_2096 * _2123) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2123) + _2082) * _2096))) * _2096;
    float _4181 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    float _2145 = (((((_2116 * _2033) + _768) * cbLight._m0[_2070].x) * _2135) * _1866) + ((((cbLight._m0[_1982].x * _1835) * ((_2032 * _2033) + _768)) * _2056) * _1879);
    float _2146 = (((((_2116 * _2035) + _770) * cbLight._m0[_2070].y) * _2135) * _1866) + ((((cbLight._m0[_1982].y * _1836) * ((_2032 * _2035) + _770)) * _2056) * _1879);
    float _2147 = (((((_2116 * _2036) + _771) * cbLight._m0[_2070].z) * _2135) * _1866) + ((((cbLight._m0[_1982].z * _1837) * ((_2032 * _2036) + _771)) * _2056) * _1879);
    float _2209;
    float _2211;
    float _2213;
    if (_1919)
    {
        _2209 = _2145;
        _2211 = _2146;
        _2213 = _2147;
    }
    else
    {
        uint _2215 = _1843 + 2u;
        uint _2219 = _1843 + 10u;
        float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _698) * 0.949999988079071044921875);
        float _2234 = _2233 * _2233;
        float _2235 = cbLight._m0[_2215].x + _647;
        float _2236 = cbLight._m0[_2215].y + _648;
        float _2237 = cbLight._m0[_2215].z + _649;
        float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
        float _2242 = _2241 * _2235;
        float _2243 = _2241 * _2236;
        float _2244 = _2241 * _2237;
        float _2245 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2215].xyz));
        float _4192 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2249 = dot(vec3(_566, _567, _568), vec3(_2242, _2243, _2244));
        float _4203 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2242, _2243, _2244));
        float _4214 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2257 = _2234 * _2234;
        float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
        float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
        float _2275 = 1.0 - _2234;
        float _2285 = (0.5 / (((_2011 * ((_2248 * _2275) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2275) + _2234) * _2248))) * _2248;
        float _4225 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2287 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
        float _2288 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2209 = (((((_2268 * _2033) + _768) * cbLight._m0[_2219].x) * _2287) * _2288) + _2145;
        _2211 = (((((_2268 * _2035) + _770) * cbLight._m0[_2219].y) * _2287) * _2288) + _2146;
        _2213 = (((((_2268 * _2036) + _771) * cbLight._m0[_2219].z) * _2287) * _2288) + _2147;
    }
    float _2323;
    float _2325;
    float _2327;
    if (_1937)
    {
        _2323 = _2209;
        _2325 = _2211;
        _2327 = _2213;
    }
    else
    {
        uint _2334 = _1843 + 3u;
        uint _2338 = _1843 + 11u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _698) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _647;
        float _2355 = cbLight._m0[_2334].y + _648;
        float _2356 = cbLight._m0[_2334].z + _649;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2334].xyz));
        float _4241 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2368 = dot(vec3(_566, _567, _568), vec3(_2361, _2362, _2363));
        float _4252 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4263 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
        float _2394 = 1.0 - _2353;
        float _2404 = (0.5 / (((_2011 * ((_2367 * _2394) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2394) + _2353) * _2367))) * _2367;
        float _4274 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2406 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2407 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2323 = (((((_2387 * _2033) + _768) * cbLight._m0[_2338].x) * _2406) * _2407) + _2209;
        _2325 = (((((_2387 * _2035) + _770) * cbLight._m0[_2338].y) * _2406) * _2407) + _2211;
        _2327 = (((((_2387 * _2036) + _771) * cbLight._m0[_2338].z) * _2406) * _2407) + _2213;
    }
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_1841.y == 0u)
    {
        float _2482 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2482;
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2482;
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2482;
        uvec4 _2497 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2498 = _2497.x;
        uint _2509 = uint((float(_2497.y) * floor(float(uint(cbSceneParam._m0[85u].y * _656) / _2498))) + floor(float(uint(cbSceneParam._m0[85u].x * _655) / _2498)));
        float _2519 = (log2(_2485 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2520 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        uint _2523 = uint(isnan(14.0) ? _2520 : (isnan(_2520) ? 14.0 : min(_2520, 14.0)));
        uvec4 _2528 = texelFetch(g_lightClusterGridBuffer, int(((_2523 << 2u) + (_2509 << 6u)) >> 2u));
        uint _2529 = _2528.x;
        uint _2530 = _2497.z;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((((1u << ((_2530 >> 4u) & 15u)) + 4294967295u) & _2529) == 0u) || ((_2530 & 240u) == 0u))
        {
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
        }
        else
        {
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            uint _2797 = 0u;
            uint _2806;
            bool _2807;
            for (;;)
            {
                _2806 = texelFetch(g_lightClassification, int((((_2523 << 5u) + (_2509 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                _2807 = _2806 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2807)
                {
                    frontier_phi_67_pred = _2796;
                    frontier_phi_67_pred_1 = _2795;
                    frontier_phi_67_pred_2 = _2794;
                    frontier_phi_67_pred_3 = _2793;
                    frontier_phi_67_pred_4 = _2792;
                    frontier_phi_67_pred_5 = _2791;
                }
                else
                {
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    uint _2921;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2806;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    for (;;)
                    {
                        uint _2925 = uint(findLSB(_2921)) + (_2797 << 5u);
                        uint _2922 = (_2921 + 4294967295u) & _2921;
                        uint _2927 = _2925 * 48u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2947 = (_2925 * 48u) + 4u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2966 = (_2925 * 48u) + 8u;
                        vec3 _2977 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x));
                        float _2981 = _2941.x - _2483;
                        float _2982 = _2941.y - _2484;
                        float _2983 = _2941.z - _2485;
                        float _2984 = dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983));
                        float _2987 = inversesqrt(_2984);
                        float _2988 = _2987 * _2981;
                        float _2989 = _2987 * _2982;
                        float _2990 = _2987 * _2983;
                        float _2991 = dot(vec3(_679, _682, _685), vec3(_2988, _2989, _2990));
                        float _2996 = 1.0 - (_2984 * _2941.w);
                        float _4300 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2997 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _2998 = sqrt(_2984) * _2960.w;
                        float _3001 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2991) + _3002;
                        float _3008 = _2998 * _2998;
                        float _3012 = ((isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0))) * _2997) / ((_3008 * 0.699999988079071044921875) + 1.0);
                        float _3016 = (-0.0) - _2483;
                        float _3017 = (-0.0) - _2484;
                        float _3018 = (-0.0) - _2485;
                        float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3033 = exp2(log2(1.0 / ((_3008 * 3.5) + 5.0)) * 0.25);
                        float _3034 = 1.0 - _799;
                        float _3041 = sqrt(1.0 - ((1.0 - (_3034 * _3034)) * (1.0 - (_3033 * _3033))));
                        float _3042 = _3041 * _3041;
                        float _3043 = _3042 * _3042;
                        float _3044 = _3023 + _2988;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3054 = dot(vec3(_679, _682, _685), vec3(_3023, _3024, _3025));
                        float _4316 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3058 = dot(vec3(_679, _682, _685), vec3(_3050 * _3044, _3050 * _3045, _3050 * _3046));
                        float _4327 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3061 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3065 = ((_3061 * _3061) * (_3043 + (-1.0))) + 1.0;
                        float _3066 = _3001 * _3042;
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _2991) + _3067;
                        float _4338 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3072 = 1.0 - _3042;
                        float _3082 = (0.5 / (((_3071 * ((_3057 * _3072) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_3071 * _3072) + _3042) * _3057))) * _3071;
                        float _4349 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3093 = (((_3043 * 3.1415927410125732421875) * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) / ((_3065 * _3065) * ((_3008 * 2.1991131305694580078125) + 3.141590118408203125))) * _2997;
                        _2850 = (_3012 * _2960.x) + _2918;
                        _2851 = (_3012 * _2960.y) + _2919;
                        _2852 = (_3012 * _2960.z) + _2920;
                        _2847 = (_3093 * _2977.x) + _2915;
                        _2848 = (_3093 * _2977.y) + _2916;
                        _2849 = (_3093 * _2977.z) + _2917;
                        if (_2922 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2922;
                        }
                    }
                    frontier_phi_67_pred = _2852;
                    frontier_phi_67_pred_1 = _2851;
                    frontier_phi_67_pred_2 = _2850;
                    frontier_phi_67_pred_3 = _2849;
                    frontier_phi_67_pred_4 = _2848;
                    frontier_phi_67_pred_5 = _2847;
                }
                _2658 = frontier_phi_67_pred;
                _2656 = frontier_phi_67_pred_1;
                _2654 = frontier_phi_67_pred_2;
                _2652 = frontier_phi_67_pred_3;
                _2650 = frontier_phi_67_pred_4;
                _2648 = frontier_phi_67_pred_5;
                uint _2798 = _2797 + 1u;
                if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2791 = _2648;
                    _2792 = _2650;
                    _2793 = _2652;
                    _2794 = _2654;
                    _2795 = _2656;
                    _2796 = _2658;
                    _2797 = _2798;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
        }
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.z;
        uint _2664 = (_2662 >> 8u) & 15u;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((4294967295u << _2664) & _2529) == 0u)
        {
            _2759 = _2647;
            _2761 = _2649;
            _2763 = _2651;
            _2765 = _2653;
            _2767 = _2655;
            _2769 = _2657;
        }
        else
        {
            float _2784 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
            float _2785 = _2784 * _2483;
            float _2786 = _2784 * _2484;
            float _2787 = _2784 * _2485;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2664 < ((_2662 >> 12u) & 15u))
            {
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2898 = _2647;
                float _2899 = _2649;
                float _2900 = _2651;
                float _2901 = _2653;
                float _2902 = _2655;
                float _2903 = _2657;
                uint _2904 = _2664;
                uint _2913;
                bool _2914;
                for (;;)
                {
                    _2913 = texelFetch(g_lightClassification, int((((_2523 << 5u) + (_2509 << 9u)) + (_2904 << 2u)) >> 2u)).x;
                    _2914 = _2913 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2914)
                    {
                        frontier_phi_73_pred = _2903;
                        frontier_phi_73_pred_1 = _2902;
                        frontier_phi_73_pred_2 = _2901;
                        frontier_phi_73_pred_3 = _2900;
                        frontier_phi_73_pred_4 = _2899;
                        frontier_phi_73_pred_5 = _2898;
                    }
                    else
                    {
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        float _3115 = _2902;
                        float _3116 = _2903;
                        uint _3117 = _2913;
                        uint _3118;
                        vec4 _3143;
                        float _3144;
                        vec4 _3159;
                        vec3 _3171;
                        vec4 _3186;
                        vec4 _3201;
                        float _3247;
                        bool _3248;
                        for (;;)
                        {
                            uint _3128 = ((_2904 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3117));
                            _3118 = (_3117 + 4294967295u) & _3117;
                            uint _3130 = _3128 * 40u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3144 = _3143.w;
                            uint _3146 = (_3128 * 40u) + 4u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3161 = (_3128 * 40u) + 8u;
                            _3171 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x));
                            uint _3173 = (_3128 * 40u) + 16u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3128 * 40u) + 20u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3128 * 40u) + 24u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3222 = (_3128 * 40u) + 28u;
                            vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3247 = fma(_2485, _3235.z, fma(_2484, _3235.y, _3235.x * _2483)) + _3235.w;
                            _3248 = !((fma(_2485, _3216.z, fma(_2484, _3216.y, _3216.x * _2483)) + _3216.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3248)
                            {
                                float _3275 = _3143.x - _2483;
                                float _3276 = _3143.y - _2484;
                                float _3277 = _3143.z - _2485;
                                float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                                float _3281 = inversesqrt(_3278);
                                float _3282 = _3281 * _3275;
                                float _3283 = _3281 * _3276;
                                float _3284 = _3281 * _3277;
                                float _3288 = 1.0 - (_3278 / (_3144 * _3144));
                                float _4360 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3293 = sqrt(_3278) * _3159.w;
                                float _3295 = 1.39999997615814208984375 / (_3293 + 1.39999997615814208984375);
                                float _3296 = _3295 * _3295;
                                float _3299 = ((1.0 - _3296) * dot(vec3(_3282, _3283, _3284), vec3(_679, _682, _685))) + _3296;
                                float _3302 = _3293 * _3293;
                                float _3306 = (fma(_2485, _3186.z, fma(_2484, _3186.y, _3186.x * _2483)) + _3186.w) / _3247;
                                float _3307 = (fma(_2485, _3201.z, fma(_2484, _3201.y, _3201.x * _2483)) + _3201.w) / _3247;
                                float _3311 = 1.0 - dot(vec2(_3306, _3307), vec2(_3306, _3307));
                                float _4376 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3313 = _3312 * (((isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))) * _3289) / ((_3302 * 0.699999988079071044921875) + 1.0));
                                float _3325 = exp2(log2(1.0 / ((_3302 * 3.5) + 5.0)) * 0.25);
                                float _3326 = 1.0 - _799;
                                float _3333 = sqrt(1.0 - ((1.0 - (_3326 * _3326)) * (1.0 - (_3325 * _3325))));
                                float _3334 = _3333 * _3333;
                                float _3335 = _3334 * _3334;
                                float _3336 = _3282 - _2785;
                                float _3337 = _3283 - _2786;
                                float _3338 = _3284 - _2787;
                                float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                                float _3346 = dot(vec3(_679, _682, _685), vec3((-0.0) - _2785, (-0.0) - _2786, (-0.0) - _2787));
                                float _4387 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3350 = dot(vec3(_679, _682, _685), vec3(_3342 * _3336, _3342 * _3337, _3342 * _3338));
                                float _4398 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3353 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3357 = ((_3353 * _3353) * (_3335 + (-1.0))) + 1.0;
                                float _3358 = _3295 * _3334;
                                float _3359 = _3358 * _3358;
                                float _3365 = ((1.0 - _3359) * dot(vec3(_679, _682, _685), vec3(_3282, _3283, _3284))) + _3359;
                                float _4409 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3367 = 1.0 - _3334;
                                float _3377 = (0.5 / (((_3366 * ((_3349 * _3367) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3334) * _3349))) * _3366;
                                float _4420 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3387 = (_3312 * _3289) * (((_3335 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3357 * _3357) * ((_3302 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3313 * _3159.y;
                                frontier_phi_79_pred_1 = _3313 * _3159.x;
                                frontier_phi_79_pred_2 = _3387 * _3171.z;
                                frontier_phi_79_pred_3 = _3387 * _3171.y;
                                frontier_phi_79_pred_4 = _3387 * _3171.x;
                                frontier_phi_79_pred_5 = _3313 * _3159.z;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3395 = frontier_phi_79_pred;
                            _3394 = frontier_phi_79_pred_1;
                            _3393 = frontier_phi_79_pred_2;
                            _3392 = frontier_phi_79_pred_3;
                            _3391 = frontier_phi_79_pred_4;
                            _3396 = frontier_phi_79_pred_5;
                            _3101 = _3394 + _3114;
                            _3102 = _3395 + _3115;
                            _3103 = _3396 + _3116;
                            _3098 = _3391 + _3111;
                            _3099 = _3392 + _3112;
                            _3100 = _3393 + _3113;
                            if (_3118 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3118;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3103;
                        frontier_phi_73_pred_1 = _3102;
                        frontier_phi_73_pred_2 = _3101;
                        frontier_phi_73_pred_3 = _3100;
                        frontier_phi_73_pred_4 = _3099;
                        frontier_phi_73_pred_5 = _3098;
                    }
                    _2770 = frontier_phi_73_pred;
                    _2768 = frontier_phi_73_pred_1;
                    _2766 = frontier_phi_73_pred_2;
                    _2764 = frontier_phi_73_pred_3;
                    _2762 = frontier_phi_73_pred_4;
                    _2760 = frontier_phi_73_pred_5;
                    uint _2905 = _2904 + 1u;
                    if (_2905 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2898 = _2760;
                        _2899 = _2762;
                        _2900 = _2764;
                        _2901 = _2766;
                        _2902 = _2768;
                        _2903 = _2770;
                        _2904 = _2905;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2770;
                frontier_phi_61_62_ladder_1 = _2768;
                frontier_phi_61_62_ladder_2 = _2764;
                frontier_phi_61_62_ladder_3 = _2762;
                frontier_phi_61_62_ladder_4 = _2760;
                frontier_phi_61_62_ladder_5 = _2766;
            }
            else
            {
                frontier_phi_61_62_ladder = _2657;
                frontier_phi_61_62_ladder_1 = _2655;
                frontier_phi_61_62_ladder_2 = _2651;
                frontier_phi_61_62_ladder_3 = _2649;
                frontier_phi_61_62_ladder_4 = _2647;
                frontier_phi_61_62_ladder_5 = _2653;
            }
            _2759 = frontier_phi_61_62_ladder_4;
            _2761 = frontier_phi_61_62_ladder_3;
            _2763 = frontier_phi_61_62_ladder_2;
            _2765 = frontier_phi_61_62_ladder_5;
            _2767 = frontier_phi_61_62_ladder_1;
            _2769 = frontier_phi_61_62_ladder;
        }
        float _2774 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2541 = (_2774 * _2765) + _1975;
        _2543 = (_2774 * _2767) + _1977;
        _2545 = (_2774 * _2769) + _1979;
        _2547 = ((_2759 * _768) * _2774) + _2323;
        _2549 = ((_2761 * _770) * _2774) + _2325;
        _2551 = ((_2763 * _771) * _2774) + _2327;
    }
    else
    {
        _2541 = _1975;
        _2543 = _1977;
        _2545 = _1979;
        _2547 = _2323;
        _2549 = _2325;
        _2551 = _2327;
    }
    vec4 _2557 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4436 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4447 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4458 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2581 = (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2541 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _783))) + ((_2547 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1593)) * cbPerFrame._m0[3u].x)) + (_2557.x * cbMtdParam._m0[3u].x);
    float _2583 = ((_2557.y * cbMtdParam._m0[3u].x) + ((_2549 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1593)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2543 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _783)));
    float _2585 = ((_2557.z * cbMtdParam._m0[3u].x) + ((_2551 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1593)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2545 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _783)));
    uint _2589 = _711 + 6u;
    float _2597 = _655 / cbSceneParam._m0[86u].x;
    float _2598 = _656 / cbSceneParam._m0[86u].y;
    vec4 _2612 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2614 = _2612.x;
    float _2615 = _2612.y;
    float _2616 = _2612.z;
    float _2617 = _2612.w;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2672 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2673 = _2672 / _589;
        float _2684 = _2673 * _640;
        float _2685 = _641 * _2673;
        float _2686 = (-0.0) - _2685;
        float _2687 = _2673 * _642;
        float _2689 = (cbSceneParam._m0[77u].w * _2686) / _2672;
        float _2690 = _2689 + cbSceneParam._m0[79u].w;
        float _2691 = cbSceneParam._m0[79u].w - _2685;
        float _2697 = sqrt(((_2684 * _2684) + (_2685 * _2685)) + (_2687 * _2687));
        float _2700 = (1.0 - (cbSceneParam._m0[77u].w / _2672)) * _2697;
        float _2705 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2707 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2860;
        if (abs((_2686 - _2689) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2860 = ((((_2690 > 0.0) ? exp2(_2705 * _2690) : (2.0 - exp2(_2707 * _2690))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2700;
        }
        else
        {
            float _2820 = 1.0 / cbSceneParam._m0[80u].x;
            float _2821 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : max(_2690, _2691));
            float _2822 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : min(_2690, _2691));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            _2860 = ((abs(_2697 / _2686) * cbSceneParam._m0[80u].y) * ((((_2831 - _2832) * 2.0) - ((exp2(_2705 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0)))) - exp2(_2705 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))))) * _2820)) - ((exp2(_2707 * _2831) - exp2(_2707 * _2832)) * _2820))) + (_2700 * cbSceneParam._m0[80u].z);
        }
        vec4 _2862 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, 1.0), 0.0);
        float _2871 = exp2((_2860 * (-1.44269502162933349609375)) * (1.0 - _2862.w));
        float _2872 = log2(_2871);
        float _2888 = log2(_2617);
        _2709 = (exp2(_2888 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].x)) * _2862.x) / cbSceneParam._m0[78u].x)) + _2614;
        _2711 = (exp2(_2888 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].y)) * _2862.y) / cbSceneParam._m0[78u].y)) + _2615;
        _2713 = (exp2(_2888 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].z)) * _2862.z) / cbSceneParam._m0[78u].z)) + _2616;
        _2715 = _2871 * _2617;
    }
    else
    {
        _2709 = _2614;
        _2711 = _2615;
        _2713 = _2616;
        _2715 = _2617;
    }
    float _2727 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2728 = _2727 == 3.0;
    float _2729 = log2(_2715);
    float _2736 = exp2(_2729 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)));
    float _2737 = exp2(_2729 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)));
    float _2738 = exp2(_2729 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0)));
    float _2747 = (_2727 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2747 * (_2728 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.y = _2747 * (_2728 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.z = _2747 * (_2728 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2713)));
    SV_Target.w = cbInstanceData._m0[_2589].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2589].w;
}


