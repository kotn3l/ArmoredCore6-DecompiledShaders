#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3499;
float _3500;
float _3501;
float _3502;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _255 = log2(0.0);
    bool _258 = exp2(_255 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _259;
    float _261;
    float _263;
    if (_258)
    {
        _259 = cbMtdParam._m0[19u].x;
        _261 = cbMtdParam._m0[19u].y;
        _263 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _259 = cbMtdParam._m0[18u].x;
        _261 = cbMtdParam._m0[18u].y;
        _263 = cbMtdParam._m0[18u].z;
    }
    float _269;
    if (_258)
    {
        _269 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _269 = cbMtdParam._m0[20u].z;
    }
    float _275;
    float _277;
    if (_258)
    {
        _275 = cbMtdParam._m0[28u].z;
        _277 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _275 = cbMtdParam._m0[24u].x;
        _277 = cbMtdParam._m0[24u].y;
    }
    float _279 = _275 * TEXCOORD.x;
    float _280 = _277 * TEXCOORD.y;
    float _292 = floor(_269);
    vec4 _295 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _279) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _280) + cbTextureTilingScale._m0[8u].w, _292));
    vec4 _318 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = (((_259 * cbMtdParam._m0[20u].w) * _295.x) * cbMtdParam._m0[9u].x) * _318.x;
    float _331 = (((_261 * cbMtdParam._m0[20u].w) * _295.y) * cbMtdParam._m0[9u].y) * _318.y;
    float _335 = (((_263 * cbMtdParam._m0[20u].w) * _295.z) * cbMtdParam._m0[9u].z) * _318.z;
    vec4 _347 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _351 = _347.z;
    vec4 _365 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _279) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _280) + cbTextureTilingScale._m0[10u].w, _292));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[27u].z;
    _184[0u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _184[1u] = cbMtdParam._m0[28u].y;
    float _382 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _385 = uint(int(isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0))));
    float _391 = (_365.x + _347.w) + _184[_385];
    vec4 _409 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _279) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _280) + cbTextureTilingScale._m0[9u].w, _292));
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3521 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = sqrt(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))));
    float _433 = (cbMtdParam._m0[21u].x * (((_351 * 2.0) * (_409.z + _183[_385])) - _351)) + _351;
    float _437 = (cbMtdParam._m0[21u].y * ((_347.x * 2.0) + (-1.0))) + _416;
    float _438 = (cbMtdParam._m0[21u].y * ((_347.y * 2.0) + (-1.0))) + _417;
    float _441 = fma(_423, _234, fma(_438, _226 * TANGENT.x, (_212 * _204) * _437));
    float _444 = fma(_423, _235, fma(_438, _226 * TANGENT.y, (_212 * _205) * _437));
    float _447 = fma(_423, _236, fma(_438, _226 * TANGENT.z, (_212 * _206) * _437));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3532 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _455 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3554 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3565 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3576 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _459 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _770 = sqrt(((_526 * _526) + (_527 * _527)) + (_528 * _528));
        float _776 = (cbMatDynParam._m0[5u].x * _770) + cbMatDynParam._m0[5u].y;
        float _3587 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _781 = (cbMatDynParam._m0[5u].z * _770) + cbMatDynParam._m0[5u].w;
        float _3598 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) - _777)) + _777) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _560 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _562 = _560.w;
    float _582 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _585 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _588 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    vec4 _590 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _601 = (((_590.y - _455) + (_590.w * _455)) * cbMtdParam._m0[3u].x) + _455;
    uint _614 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = _614 + 9u;
    uint _617 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _623 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_617].x;
    float _624 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_617].y;
    float _625 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_617].z;
    float _3609 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    vec4 _629 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _634 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _645 = (((_634.x - _459) + (_634.w * _459)) * cbMtdParam._m0[3u].x) + _459;
    float _658 = (cbMtdParam._m0[3u].x * (((_626 * _562) - _626) + _629.x)) + _626;
    float _659 = (cbMtdParam._m0[3u].x * (((_627 * _562) - _627) + _629.y)) + _627;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _562) - _628) + _629.z)) + _628;
    float _661 = 1.0 - _645;
    float _662 = _661 * _658;
    float _663 = _661 * _659;
    float _664 = _661 * _660;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _645;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _645;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _645;
    float _672 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _687 = _684.x * TEXCOORD_4;
    float _688 = dot(vec3(_452, _453, _454), vec3(_533, _534, _535));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _452) - _533;
    float _696 = (_691 * _453) - _534;
    float _697 = (_691 * _454) - _535;
    float _701 = abs(dot(vec3(_533, _534, _535), vec3(_452, _453, _454)));
    float _3642 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _703 = sqrt(_601);
    float _716 = exp2((_703 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_703 * 3.0));
    float _722 = (1.0 - _716) * ((_703 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _723 = _716 * _703;
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _814 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _818 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _822 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _847 = _751 + _452;
        float _848 = _755 + _453;
        float _849 = _759 + _454;
        float _859 = fma(_849, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847)) - _814;
        float _860 = fma(_849, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847)) - _818;
        float _861 = fma(_849, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847)) - _822;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_814 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_818 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[34u].z) + ((((((_822 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(_452, _453, _454), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3690 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_452, _453, _454), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3723 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_452, _453, _454), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3756 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1137 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1141 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1164 = _751 + _452;
        float _1165 = _755 + _453;
        float _1166 = _759 + _454;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_452, _453, _454), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3819 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_452, _453, _454), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3852 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_452, _453, _454), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3885 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1090;
        _1403 = _1090;
        _1404 = _1090;
        _1405 = _1090;
        _1406 = _1090;
        _1407 = _1090;
        _1408 = _1090;
        _1409 = _1090;
        _1410 = _1090;
        _1411 = _1090;
        _1412 = _1090;
        _1413 = _1090;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _695 * 0.5;
    float _1471 = _696 * 0.5;
    float _1472 = _697 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _601);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1602 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1605 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1633 = frontier_phi_25_23_ladder;
        }
        float _1837;
        if (_1602 > 0.0)
        {
            _1837 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1837 = frontier_phi_34_30_ladder;
        }
        float _2091;
        if (_1605 > 0.0)
        {
            _2091 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2091 = frontier_phi_46_41_ladder;
        }
        float _2093 = isnan(_1837) ? _1633 : (isnan(_1633) ? _1837 : min(_1633, _1837));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1599) + _1588;
        float _2099 = (_2094 * _1602) + _1592;
        float _2100 = (_2094 * _1605) + _1596;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_24_46_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_24_46_ladder_2;
        _1623 = frontier_phi_24_46_ladder_1;
        _1625 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1539);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _601);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1697 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1700 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1842;
        if (_1694 > 0.0)
        {
            _1842 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1842 = frontier_phi_36_32_ladder;
        }
        float _2118;
        if (_1697 > 0.0)
        {
            _2118 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2118 = frontier_phi_48_43_ladder;
        }
        float _2331;
        if (_1700 > 0.0)
        {
            _2331 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2331 = frontier_phi_57_54_ladder;
        }
        float _2333 = isnan(_2118) ? _1842 : (isnan(_1842) ? _2118 : min(_1842, _2118));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1694) + _1683;
        float _2339 = (_2334 * _1697) + _1687;
        float _2340 = (_2334 * _1700) + _1691;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_33_57_ladder = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2556.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2556.z * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_33_57_ladder_1;
        _1721 = frontier_phi_33_57_ladder;
        _1723 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1630);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1736 = (((_722 * _672) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1738 = (((_722 * _674) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1721 - _1623)) + _1623);
    float _1740 = (((_722 * _675) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1723 - _1625)) + _1625);
    float _1743 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    uvec4 _1759 = floatBitsToUint(cbInstanceData._m0[_614 + 5u]);
    uint _1761 = _1759.x * 14u;
    uint _1762 = _1761 + 13u;
    float _1769 = _687 + (-1.0);
    float _1774 = (cbLight._m0[_1762].x * _1769) + 1.0;
    float _1775 = (cbLight._m0[_1762].y * _1769) + 1.0;
    float _1776 = (cbLight._m0[_1762].z * _1769) + 1.0;
    float _1777 = (cbLight._m0[_1762].w * _1769) + 1.0;
    uint _1778 = _1761 + 5u;
    float _1784 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
    uint _1788 = _1761 + 4u;
    float _1795 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1799 = _1761 | 1u;
    float _1810 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_452, _453, _454));
    float _1813 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_452, _453, _454));
    float _4021 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _4032 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1818 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _1820 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1827 = ((cbLight._m0[_1778].x * _1784) * _1820) + ((cbLight._m0[_1788].x * _1795) * _1818);
    float _1828 = ((_1784 * cbLight._m0[_1778].y) * _1820) + ((_1795 * cbLight._m0[_1788].y) * _1818);
    float _1829 = ((_1784 * cbLight._m0[_1778].z) * _1820) + ((_1795 * cbLight._m0[_1788].z) * _1818);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1761 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1827;
        _1849 = _1828;
        _1851 = _1829;
    }
    else
    {
        uint _1855 = _1761 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1761 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _4043 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1874 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1827;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2062 = _1761 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1761 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4059 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2081 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _1892 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1847;
        _1894 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1849;
        _1896 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1851;
    }
    uint _1899 = _1761 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _601) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1761].x + _533;
    float _1915 = cbLight._m0[_1761].y + _534;
    float _1916 = cbLight._m0[_1761].z + _535;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1761].xyz));
    float _4075 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _1928 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1929 = dot(vec3(_452, _453, _454), vec3(_1921, _1922, _1923));
    float _4097 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1921, _1922, _1923));
    float _4108 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
    float _1950 = 0.959999978542327880859375 - _669;
    float _1952 = 0.959999978542327880859375 - _670;
    float _1953 = 0.959999978542327880859375 - _671;
    float _1960 = 1.0 - _1913;
    float _1971 = (0.5 / (((_1928 * ((_1927 * _1960) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1960) + _1913) * _1927))) * _1927;
    float _4119 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1984 = _1761 + 9u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _601) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1799].x + _533;
    float _1998 = cbLight._m0[_1799].y + _534;
    float _1999 = cbLight._m0[_1799].z + _535;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1799].xyz));
    float _4130 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2011 = dot(vec3(_452, _453, _454), vec3(_2004, _2005, _2006));
    float _4141 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_2004, _2005, _2006));
    float _4152 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1996 * _1996;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0);
    float _2037 = 1.0 - _1996;
    float _2047 = (0.5 / (((_1928 * ((_2010 * _2037) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2037) + _1996) * _2010))) * _2010;
    float _4163 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    float _2059 = (((((_2030 * _1950) + _672) * cbLight._m0[_1984].x) * _2049) * _1784) + (((((_1949 * _1950) + _672) * cbLight._m0[_1899].x) * _1973) * _1795);
    float _2060 = (((((_2030 * _1952) + _674) * cbLight._m0[_1984].y) * _2049) * _1784) + (((((_1949 * _1952) + _674) * cbLight._m0[_1899].y) * _1973) * _1795);
    float _2061 = (((((_2030 * _1953) + _675) * cbLight._m0[_1984].z) * _2049) * _1784) + (((((_1949 * _1953) + _675) * cbLight._m0[_1899].z) * _1973) * _1795);
    float _2123;
    float _2125;
    float _2127;
    if (_1836)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1761 + 2u;
        uint _2133 = _1761 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _601) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _533;
        float _2150 = cbLight._m0[_2129].y + _534;
        float _2151 = cbLight._m0[_2129].z + _535;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2129].xyz));
        float _4174 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2163 = dot(vec3(_452, _453, _454), vec3(_2156, _2157, _2158));
        float _4185 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4196 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
        float _2189 = 1.0 - _2148;
        float _2199 = (0.5 / (((_1928 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2189) + _2148) * _2162))) * _2162;
        float _4207 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2123 = (((((_2182 * _1950) + _672) * cbLight._m0[_2133].x) * _2201) * _2202) + _2059;
        _2125 = (((((_2182 * _1952) + _674) * cbLight._m0[_2133].y) * _2201) * _2202) + _2060;
        _2127 = (((((_2182 * _1953) + _675) * cbLight._m0[_2133].z) * _2201) * _2202) + _2061;
    }
    float _2237;
    float _2239;
    float _2241;
    if (_1854)
    {
        _2237 = _2123;
        _2239 = _2125;
        _2241 = _2127;
    }
    else
    {
        uint _2248 = _1761 + 3u;
        uint _2252 = _1761 + 11u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _601) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _533;
        float _2269 = cbLight._m0[_2248].y + _534;
        float _2270 = cbLight._m0[_2248].z + _535;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2248].xyz));
        float _4223 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2282 = dot(vec3(_452, _453, _454), vec3(_2275, _2276, _2277));
        float _4234 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4245 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
        float _2308 = 1.0 - _2267;
        float _2318 = (0.5 / (((_1928 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2308) + _2267) * _2281))) * _2281;
        float _4256 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _2237 = (((((_2301 * _1950) + _672) * cbLight._m0[_2252].x) * _2320) * _2321) + _2123;
        _2239 = (((((_2301 * _1952) + _674) * cbLight._m0[_2252].y) * _2320) * _2321) + _2125;
        _2241 = (((((_2301 * _1953) + _675) * cbLight._m0[_2252].z) * _2320) * _2321) + _2127;
    }
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_1759.y == 0u)
    {
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2396;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2396;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2396;
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.x;
        uint _2423 = uint((float(_2411.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2412))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2412)));
        float _2433 = (log2(_2399 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2434 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        uint _2437 = uint(isnan(14.0) ? _2434 : (isnan(_2434) ? 14.0 : min(_2434, 14.0)));
        uvec4 _2442 = texelFetch(g_lightClusterGridBuffer, int(((_2437 << 2u) + (_2423 << 6u)) >> 2u));
        uint _2443 = _2442.x;
        uint _2444 = _2411.z;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((((1u << ((_2444 >> 4u) & 15u)) + 4294967295u) & _2443) == 0u) || ((_2444 & 240u) == 0u))
        {
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
        }
        else
        {
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2729)
                {
                    frontier_phi_74_pred = _2718;
                    frontier_phi_74_pred_1 = _2717;
                    frontier_phi_74_pred_2 = _2716;
                    frontier_phi_74_pred_3 = _2715;
                    frontier_phi_74_pred_4 = _2714;
                    frontier_phi_74_pred_5 = _2713;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2728;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2719 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _2397;
                        float _2925 = _2884.y - _2398;
                        float _2926 = _2884.z - _2399;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_582, _585, _588), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4282 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _2397;
                        float _2960 = (-0.0) - _2398;
                        float _2961 = (-0.0) - _2399;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2976 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2977 = 1.0 - _703;
                        float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                        float _2985 = _2984 * _2984;
                        float _2986 = _2985 * _2985;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2997 = dot(vec3(_582, _585, _588), vec3(_2966, _2967, _2968));
                        float _4298 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _3001 = dot(vec3(_582, _585, _588), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                        float _4309 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                        float _3009 = _2944 * _2985;
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2934) + _3010;
                        float _4320 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3015 = 1.0 - _2985;
                        float _3025 = (0.5 / (((_3014 * ((_3000 * _3015) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2985) * _3000))) * _3014;
                        float _4331 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3036 = (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_3008 * _3008) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2788 = (_2955 * _2903.x) + _2861;
                        _2789 = (_2955 * _2903.y) + _2862;
                        _2790 = (_2955 * _2903.z) + _2863;
                        _2785 = (_3036 * _2920.x) + _2858;
                        _2786 = (_3036 * _2920.y) + _2859;
                        _2787 = (_3036 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_74_pred = _2790;
                    frontier_phi_74_pred_1 = _2789;
                    frontier_phi_74_pred_2 = _2788;
                    frontier_phi_74_pred_3 = _2787;
                    frontier_phi_74_pred_4 = _2786;
                    frontier_phi_74_pred_5 = _2785;
                }
                _2572 = frontier_phi_74_pred;
                _2570 = frontier_phi_74_pred_1;
                _2568 = frontier_phi_74_pred_2;
                _2566 = frontier_phi_74_pred_3;
                _2564 = frontier_phi_74_pred_4;
                _2562 = frontier_phi_74_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2562;
                    _2714 = _2564;
                    _2715 = _2566;
                    _2716 = _2568;
                    _2717 = _2570;
                    _2718 = _2572;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
        }
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.z;
        uint _2578 = (_2576 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2578) & _2443) == 0u)
        {
            _2681 = _2561;
            _2683 = _2563;
            _2685 = _2565;
            _2687 = _2567;
            _2689 = _2569;
            _2691 = _2571;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
            float _2707 = _2706 * _2397;
            float _2708 = _2706 * _2398;
            float _2709 = _2706 * _2399;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2578 < ((_2576 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2841 = _2561;
                float _2842 = _2563;
                float _2843 = _2565;
                float _2844 = _2567;
                float _2845 = _2569;
                float _2846 = _2571;
                uint _2847 = _2578;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2857)
                    {
                        frontier_phi_85_pred = _2845;
                        frontier_phi_85_pred_1 = _2844;
                        frontier_phi_85_pred_2 = _2843;
                        frontier_phi_85_pred_3 = _2842;
                        frontier_phi_85_pred_4 = _2841;
                        frontier_phi_85_pred_5 = _2846;
                    }
                    else
                    {
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        uint _3069 = _2856;
                        uint _3070;
                        vec4 _3095;
                        float _3096;
                        vec4 _3111;
                        vec3 _3123;
                        vec4 _3139;
                        vec4 _3154;
                        float _3200;
                        bool _3201;
                        for (;;)
                        {
                            uint _3080 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3069));
                            _3070 = (_3069 + 4294967295u) & _3069;
                            uint _3082 = _3080 * 40u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            _3096 = _3095.w;
                            uint _3098 = (_3080 * 40u) + 4u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3080 * 40u) + 8u;
                            _3123 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x));
                            uint _3126 = (_3080 * 40u) + 16u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3080 * 40u) + 20u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3080 * 40u) + 24u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3175 = (_3080 * 40u) + 28u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            _3200 = fma(_2399, _3188.z, fma(_2398, _3188.y, _3188.x * _2397)) + _3188.w;
                            _3201 = !((fma(_2399, _3169.z, fma(_2398, _3169.y, _3169.x * _2397)) + _3169.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3201)
                            {
                                float _3228 = _3095.x - _2397;
                                float _3229 = _3095.y - _2398;
                                float _3230 = _3095.z - _2399;
                                float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                                float _3234 = inversesqrt(_3231);
                                float _3235 = _3234 * _3228;
                                float _3236 = _3234 * _3229;
                                float _3237 = _3234 * _3230;
                                float _3241 = 1.0 - (_3231 / (_3096 * _3096));
                                float _4342 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3246 = sqrt(_3231) * _3111.w;
                                float _3248 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                                float _3249 = _3248 * _3248;
                                float _3252 = ((1.0 - _3249) * dot(vec3(_3235, _3236, _3237), vec3(_582, _585, _588))) + _3249;
                                float _3255 = _3246 * _3246;
                                float _3259 = (fma(_2399, _3139.z, fma(_2398, _3139.y, _3139.x * _2397)) + _3139.w) / _3200;
                                float _3260 = (fma(_2399, _3154.z, fma(_2398, _3154.y, _3154.x * _2397)) + _3154.w) / _3200;
                                float _3264 = 1.0 - dot(vec2(_3259, _3260), vec2(_3259, _3260));
                                float _4358 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3266 = _3265 * (((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3242) / ((_3255 * 0.699999988079071044921875) + 1.0));
                                float _3278 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                                float _3279 = 1.0 - _703;
                                float _3286 = sqrt(1.0 - ((1.0 - (_3279 * _3279)) * (1.0 - (_3278 * _3278))));
                                float _3287 = _3286 * _3286;
                                float _3288 = _3287 * _3287;
                                float _3289 = _3235 - _2707;
                                float _3290 = _3236 - _2708;
                                float _3291 = _3237 - _2709;
                                float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                                float _3299 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4369 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3303 = dot(vec3(_582, _585, _588), vec3(_3295 * _3289, _3295 * _3290, _3295 * _3291));
                                float _4380 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3310 = ((_3306 * _3306) * (_3288 + (-1.0))) + 1.0;
                                float _3311 = _3248 * _3287;
                                float _3312 = _3311 * _3311;
                                float _3318 = ((1.0 - _3312) * dot(vec3(_582, _585, _588), vec3(_3235, _3236, _3237))) + _3312;
                                float _4391 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3320 = 1.0 - _3287;
                                float _3330 = (0.5 / (((_3319 * ((_3302 * _3320) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3287) * _3302))) * _3319;
                                float _4402 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3340 = (_3265 * _3242) * (((_3288 * 3.1415927410125732421875) * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) / ((_3310 * _3310) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3266 * _3111.y;
                                frontier_phi_91_pred_1 = _3266 * _3111.x;
                                frontier_phi_91_pred_2 = _3340 * _3123.z;
                                frontier_phi_91_pred_3 = _3340 * _3123.y;
                                frontier_phi_91_pred_4 = _3340 * _3123.x;
                                frontier_phi_91_pred_5 = _3266 * _3111.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3348 = frontier_phi_91_pred;
                            _3347 = frontier_phi_91_pred_1;
                            _3346 = frontier_phi_91_pred_2;
                            _3345 = frontier_phi_91_pred_3;
                            _3344 = frontier_phi_91_pred_4;
                            _3349 = frontier_phi_91_pred_5;
                            _3053 = _3347 + _3066;
                            _3054 = _3348 + _3067;
                            _3055 = _3349 + _3068;
                            _3050 = _3344 + _3063;
                            _3051 = _3345 + _3064;
                            _3052 = _3346 + _3065;
                            if (_3070 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3070;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3054;
                        frontier_phi_85_pred_1 = _3053;
                        frontier_phi_85_pred_2 = _3052;
                        frontier_phi_85_pred_3 = _3051;
                        frontier_phi_85_pred_4 = _3050;
                        frontier_phi_85_pred_5 = _3055;
                    }
                    _2690 = frontier_phi_85_pred;
                    _2688 = frontier_phi_85_pred_1;
                    _2686 = frontier_phi_85_pred_2;
                    _2684 = frontier_phi_85_pred_3;
                    _2682 = frontier_phi_85_pred_4;
                    _2692 = frontier_phi_85_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2682;
                        _2842 = _2684;
                        _2843 = _2686;
                        _2844 = _2688;
                        _2845 = _2690;
                        _2846 = _2692;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2692;
                frontier_phi_66_67_ladder_1 = _2688;
                frontier_phi_66_67_ladder_2 = _2690;
                frontier_phi_66_67_ladder_3 = _2684;
                frontier_phi_66_67_ladder_4 = _2682;
                frontier_phi_66_67_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_66_67_ladder = _2571;
                frontier_phi_66_67_ladder_1 = _2567;
                frontier_phi_66_67_ladder_2 = _2569;
                frontier_phi_66_67_ladder_3 = _2563;
                frontier_phi_66_67_ladder_4 = _2561;
                frontier_phi_66_67_ladder_5 = _2565;
            }
            _2681 = frontier_phi_66_67_ladder_4;
            _2683 = frontier_phi_66_67_ladder_3;
            _2685 = frontier_phi_66_67_ladder_5;
            _2687 = frontier_phi_66_67_ladder_1;
            _2689 = frontier_phi_66_67_ladder_2;
            _2691 = frontier_phi_66_67_ladder;
        }
        float _2696 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2455 = (_2696 * _2687) + _1892;
        _2457 = (_2696 * _2689) + _1894;
        _2459 = (_2696 * _2691) + _1896;
        _2461 = ((_2681 * _672) * _2696) + _2237;
        _2463 = ((_2683 * _674) * _2696) + _2239;
        _2465 = ((_2685 * _675) * _2696) + _2241;
    }
    else
    {
        _2455 = _1892;
        _2457 = _1894;
        _2459 = _1896;
        _2461 = _2237;
        _2463 = _2239;
        _2465 = _2241;
    }
    vec4 _2471 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4418 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4429 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4440 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2495 = (((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2455 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _687))) + ((_2461 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + (_2471.x * cbMtdParam._m0[3u].x);
    float _2497 = ((_2471.y * cbMtdParam._m0[3u].x) + ((_2463 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2457 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _687)));
    float _2499 = ((_2471.z * cbMtdParam._m0[3u].x) + ((_2465 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2459 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _687)));
    float _2500 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2501 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2502 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    uint _2503 = _614 + 6u;
    float _2511 = _557 / cbSceneParam._m0[86u].x;
    float _2512 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2526 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2528 = _2526.x;
    float _2529 = _2526.y;
    float _2530 = _2526.z;
    float _2531 = _2526.w;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2586 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2587 = _2586 / _475;
        float _2598 = _2587 * _526;
        float _2599 = _527 * _2587;
        float _2600 = (-0.0) - _2599;
        float _2601 = _2587 * _528;
        float _2603 = (cbSceneParam._m0[77u].w * _2600) / _2586;
        float _2604 = _2603 + cbSceneParam._m0[79u].w;
        float _2605 = cbSceneParam._m0[79u].w - _2599;
        float _2611 = sqrt(((_2598 * _2598) + (_2599 * _2599)) + (_2601 * _2601));
        float _2614 = (1.0 - (cbSceneParam._m0[77u].w / _2586)) * _2611;
        float _2619 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2621 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2798;
        if (abs((_2600 - _2603) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2798 = ((((_2604 > 0.0) ? exp2(_2619 * _2604) : (2.0 - exp2(_2621 * _2604))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2614;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : max(_2604, _2605));
            float _2744 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : min(_2604, _2605));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2798 = ((abs(_2611 / _2600) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2619 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2619 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2621 * _2753) - exp2(_2621 * _2754)) * _2742))) + (_2614 * cbSceneParam._m0[80u].z);
        }
        vec4 _2800 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, 1.0), 0.0);
        float _2809 = exp2((_2798 * (-1.44269502162933349609375)) * (1.0 - _2800.w));
        float _2810 = log2(_2809);
        float _2826 = log2(_2531);
        _2623 = (exp2(_2826 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].x)) * _2800.x) / cbSceneParam._m0[78u].x)) + _2528;
        _2625 = (exp2(_2826 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].y)) * _2800.y) / cbSceneParam._m0[78u].y)) + _2529;
        _2627 = (exp2(_2826 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].z)) * _2800.z) / cbSceneParam._m0[78u].z)) + _2530;
        _2629 = _2809 * _2531;
    }
    else
    {
        _2623 = _2528;
        _2625 = _2529;
        _2627 = _2530;
        _2629 = _2531;
    }
    bool _2836;
    vec4 _2639;
    vec4 _2661;
    float _2663;
    float _2667;
    float _2668;
    float _2669;
    float _2670;
    bool _2680;
    for (;;)
    {
        _2639 = cbMatDynParam._m0[0u];
        float _2641 = roundEven(_2639.y);
        bool _2642 = _2641 == 3.0;
        float _2643 = log2(_2629);
        float _2650 = exp2(_2643 * cbSceneParam._m0[78u].x) * _2500;
        float _2651 = exp2(_2643 * cbSceneParam._m0[78u].y) * _2501;
        float _2652 = exp2(_2643 * cbSceneParam._m0[78u].z) * _2502;
        float _2659 = _542 + (-0.5);
        _2661 = cbMtdParam._m0[1u];
        _2663 = _2661.y * _2659;
        float _2666 = (_2641 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2667 = _2666 * (_2642 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2623)));
        _2668 = _2666 * (_2642 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2625)));
        _2669 = _2666 * (_2642 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2627)));
        _2670 = _2659 * 0.999000012874603271484375;
        _2680 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2680)
        {
            if ((cbInstanceData._m0[_614 + 7u].x + _2670) < 0.5)
            {
                _2836 = true;
                break;
            }
        }
        uint _2777 = _616 + uint(_2639.w);
        if ((cbInstanceData._m0[_2777].w < 1.0) && ((cbInstanceData._m0[_2777].w + _2670) < 0.5))
        {
            _2836 = true;
            break;
        }
        if ((_2663 + 1.0) < _2661.x)
        {
            _2836 = true;
            break;
        }
        _2836 = false;
        break;
    }
    float _3041;
    if (_2836)
    {
        discard_state = true;
        _3041 = 0.0;
    }
    else
    {
        _3041 = cbInstanceData._m0[_2503].w;
    }
    SV_Target.x = _2667;
    SV_Target.y = _2668;
    SV_Target.z = _2669;
    SV_Target.w = _3041;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2503].w;
    discard_exit();
}


