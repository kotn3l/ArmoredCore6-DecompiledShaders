#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1065;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    float _253 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _266 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_253 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _277 = exp2(log2(_266.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _278;
    float _280;
    float _282;
    if (_277)
    {
        _278 = cbMtdParam._m0[19u].x;
        _280 = cbMtdParam._m0[19u].y;
        _282 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _278 = cbMtdParam._m0[18u].x;
        _280 = cbMtdParam._m0[18u].y;
        _282 = cbMtdParam._m0[18u].z;
    }
    float _288;
    if (_277)
    {
        _288 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _288 = cbMtdParam._m0[20u].z;
    }
    float _294;
    float _296;
    if (_277)
    {
        _294 = cbMtdParam._m0[28u].z;
        _296 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _294 = cbMtdParam._m0[24u].x;
        _296 = cbMtdParam._m0[24u].y;
    }
    float _298 = _294 * TEXCOORD.x;
    float _299 = _296 * TEXCOORD.y;
    float _311 = floor(_288);
    vec4 _314 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _298) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _299) + cbTextureTilingScale._m0[8u].w, _311));
    vec4 _336 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _253) + cbTextureTilingScale._m0[0u].w));
    float _344 = (((_278 * cbMtdParam._m0[20u].w) * _314.x) * cbMtdParam._m0[9u].x) * _336.x;
    float _348 = (((_280 * cbMtdParam._m0[20u].w) * _314.y) * cbMtdParam._m0[9u].y) * _336.y;
    float _352 = (((_282 * cbMtdParam._m0[20u].w) * _314.z) * cbMtdParam._m0[9u].z) * _336.z;
    vec4 _364 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _253) + cbTextureTilingScale._m0[1u].w));
    float _368 = _364.z;
    float _181[2];
    float _182[2];
    _181[0u] = cbMtdParam._m0[27u].z;
    _182[0u] = cbMtdParam._m0[27u].w;
    _181[1u] = cbMtdParam._m0[28u].x;
    _182[1u] = cbMtdParam._m0[28u].y;
    float _399 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    uint _402 = uint(int(isnan(1.0) ? _399 : (isnan(_399) ? 1.0 : min(_399, 1.0))));
    float _408 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _298) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _299) + cbTextureTilingScale._m0[10u].w, _311)).x + _364.w) + _182[_402];
    vec4 _426 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w, _311));
    float _433 = (_426.x * 2.0) + (-1.0);
    float _434 = (_426.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3430 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))));
    float _449 = (cbMtdParam._m0[21u].x * (((_368 * 2.0) * (_426.z + _181[_402])) - _368)) + _368;
    float _453 = (cbMtdParam._m0[21u].y * ((_364.x * 2.0) + (-1.0))) + _433;
    float _454 = (cbMtdParam._m0[21u].y * ((_364.y * 2.0) + (-1.0))) + _434;
    float _457 = fma(_440, _232, fma(_454, _224 * TANGENT.x, (_210 * _202) * _453));
    float _460 = fma(_440, _233, fma(_454, _224 * TANGENT.y, (_210 * _203) * _453));
    float _463 = fma(_440, _234, fma(_454, _224 * TANGENT.z, (_210 * _204) * _453));
    float _467 = inversesqrt(dot(vec3(_457, _460, _463), vec3(_457, _460, _463)));
    float _468 = _467 * _457;
    float _469 = _467 * _460;
    float _470 = _467 * _463;
    float _3441 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _471 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3463 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3474 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3485 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _475 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _491 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _542 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _532);
    float _543 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _532);
    float _544 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _532);
    float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
    float _549 = _542 * _548;
    float _550 = _543 * _548;
    float _551 = _544 * _548;
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _560 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _562 = _560.w;
    float _583 = fma(_470, cbSceneParam._m0[5u].z, fma(_469, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _468));
    float _586 = fma(_470, cbSceneParam._m0[6u].z, fma(_469, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _468));
    float _589 = fma(_470, cbSceneParam._m0[7u].z, fma(_469, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _468));
    vec4 _591 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _602 = (((_591.y - _471) + (_591.w * _471)) * cbMtdParam._m0[3u].x) + _471;
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = (_615 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _624 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_618].x;
    float _625 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_618].y;
    float _626 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_618].z;
    float _3496 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    vec4 _630 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _635 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _646 = (((_635.x - _475) + (_635.w * _475)) * cbMtdParam._m0[3u].x) + _475;
    float _659 = (cbMtdParam._m0[3u].x * (((_627 * _562) - _627) + _630.x)) + _627;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _562) - _628) + _630.y)) + _628;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _562) - _629) + _630.z)) + _629;
    float _662 = 1.0 - _646;
    float _663 = _662 * _659;
    float _664 = _662 * _660;
    float _665 = _662 * _661;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _646;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _646;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _646;
    float _673 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _688 = _685.x * TEXCOORD_4;
    float _689 = dot(vec3(_468, _469, _470), vec3(_549, _550, _551));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _468) - _549;
    float _697 = (_692 * _469) - _550;
    float _698 = (_692 * _470) - _551;
    float _702 = abs(dot(vec3(_549, _550, _551), vec3(_468, _469, _470)));
    float _3529 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _704 = sqrt(_602);
    float _717 = exp2((_704 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_704 * 3.0));
    float _723 = (1.0 - _717) * ((_704 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _724 = _717 * _704;
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _793 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _797 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _822 = _752 + _468;
        float _823 = _756 + _469;
        float _824 = _760 + _470;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_468, _469, _470), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3577 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_468, _469, _470), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3610 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_468, _469, _470), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3643 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1105 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1109 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1113 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1136 = _752 + _468;
        float _1137 = _756 + _469;
        float _1138 = _760 + _470;
        float _1148 = fma(_1138, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136)) - _1105;
        float _1149 = fma(_1138, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136)) - _1109;
        float _1150 = fma(_1138, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136)) - _1113;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1105 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1109 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[35u].z) + ((((((_1113 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1204 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1171.x + (-0.5));
        float _1206 = _1204 * (_1171.y + (-0.5));
        float _1207 = _1204 * (_1171.z + (-0.5));
        float _1214 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1178.x + (-0.5));
        float _1216 = _1214 * (_1178.y + (-0.5));
        float _1217 = _1214 * (_1178.z + (-0.5));
        float _1224 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1185.x + (-0.5));
        float _1226 = _1224 * (_1185.y + (-0.5));
        float _1227 = _1224 * (_1185.z + (-0.5));
        float _1234 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1192.x + (-0.5));
        float _1236 = _1234 * (_1192.y + (-0.5));
        float _1237 = _1234 * (_1192.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_468, _469, _470), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3706 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1268 + 1.0))) + _1273) * _1238;
        float _1283 = _1206 * 0.5;
        float _1284 = _1216 * 0.5;
        float _1285 = _1226 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_468, _469, _470), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3739 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1310 + 1.0))) + _1315) * _1239;
        float _1325 = _1207 * 0.5;
        float _1326 = _1217 * 0.5;
        float _1327 = _1227 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_468, _469, _470), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3772 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1352 + 1.0))) + _1357) * _1240;
        _1374 = _1207;
        _1375 = _1206;
        _1376 = _1205;
        _1377 = _1217;
        _1378 = _1216;
        _1379 = _1215;
        _1380 = _1227;
        _1381 = _1226;
        _1382 = _1225;
        _1383 = _1240;
        _1384 = _1239;
        _1385 = _1238;
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1065;
        _1375 = _1065;
        _1376 = _1065;
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1421 = fma(_1400, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1398 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1400, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1398 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1400, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1398));
    float _1442 = _696 * 0.5;
    float _1443 = _697 * 0.5;
    float _1444 = _698 * 0.5;
    float _1445 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1448 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1451 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1485;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1458 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1462 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1466 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1473 = dot(vec4(cbModelParam._m0[39u]), vec4(_1442, _1443, _1444, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1496;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1487 = dot(vec4(cbModelParam._m0[40u]), vec4(_1442, _1443, _1444, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1500 = (_1496 * cbModelParam._m0[1u].x) + (_1485 * (1.0 - cbModelParam._m0[1u].x));
    float _1510 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1510 : min(cbModelParam._m0[25u].z, _1510));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1560 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1564 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1568 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1571 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1574 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1577 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1605;
        if (_1571 > 0.0)
        {
            _1605 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1605 = frontier_phi_22_20_ladder;
        }
        float _1809;
        if (_1574 > 0.0)
        {
            _1809 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1809 = frontier_phi_31_27_ladder;
        }
        float _2063;
        if (_1577 > 0.0)
        {
            _2063 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2063 = frontier_phi_43_38_ladder;
        }
        float _2065 = isnan(_1809) ? _1605 : (isnan(_1605) ? _1809 : min(_1605, _1809));
        float _2066 = isnan(_2063) ? _2065 : (isnan(_2065) ? _2063 : min(_2065, _2063));
        float _2070 = (_2066 * _1571) + _1560;
        float _2071 = (_2066 * _1574) + _1564;
        float _2072 = (_2066 * _1577) + _1568;
        float _2073 = _2066 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2073;
        float _2077 = _2073 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 > _2077) || ((_2071 < _2075) || ((_2070 < _2075) || (_2070 > _2077))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2200 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2072, cbModelParam._m0[9u].z, fma(_2071, cbModelParam._m0[9u].y, _2070 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2072, cbModelParam._m0[10u].z, fma(_2071, cbModelParam._m0[10u].y, _2070 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2072, cbModelParam._m0[11u].z, fma(_2071, cbModelParam._m0[11u].y, _2070 * cbModelParam._m0[11u].x))), _1511);
            frontier_phi_21_43_ladder = _2200.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2200.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2200.x * cbModelParam._m0[1u].y;
        }
        _1593 = frontier_phi_21_43_ladder_2;
        _1595 = frontier_phi_21_43_ladder_1;
        _1597 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1511);
        _1593 = _1581.x * cbModelParam._m0[1u].y;
        _1595 = _1581.y * cbModelParam._m0[1u].y;
        _1597 = _1581.z * cbModelParam._m0[1u].y;
    }
    float _1601 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1601 : min(cbModelParam._m0[25u].w, _1601));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1655 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1659 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1663 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1666 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1669 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1672 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1814;
        if (_1666 > 0.0)
        {
            _1814 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1814 = frontier_phi_33_29_ladder;
        }
        float _2090;
        if (_1669 > 0.0)
        {
            _2090 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2090 = frontier_phi_45_40_ladder;
        }
        float _2303;
        if (_1672 > 0.0)
        {
            _2303 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2303 = frontier_phi_54_51_ladder;
        }
        float _2305 = isnan(_2090) ? _1814 : (isnan(_1814) ? _2090 : min(_1814, _2090));
        float _2306 = isnan(_2303) ? _2305 : (isnan(_2305) ? _2303 : min(_2305, _2303));
        float _2310 = (_2306 * _1666) + _1655;
        float _2311 = (_2306 * _1669) + _1659;
        float _2312 = (_2306 * _1672) + _1663;
        float _2313 = _2306 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2313;
        float _2316 = _2313 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2312 > _2316) || ((_2312 < _2314) || ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 < _2314) || (_2310 > _2316))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2312, cbModelParam._m0[17u].z, fma(_2311, cbModelParam._m0[17u].y, _2310 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2312, cbModelParam._m0[18u].z, fma(_2311, cbModelParam._m0[18u].y, _2310 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2312, cbModelParam._m0[19u].z, fma(_2311, cbModelParam._m0[19u].y, _2310 * cbModelParam._m0[19u].x))), _1602);
            frontier_phi_30_54_ladder = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1691 = frontier_phi_30_54_ladder_2;
        _1693 = frontier_phi_30_54_ladder;
        _1695 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1602);
        _1691 = _1675.x * cbModelParam._m0[1u].z;
        _1693 = _1675.y * cbModelParam._m0[1u].z;
        _1695 = _1675.z * cbModelParam._m0[1u].z;
    }
    float _1708 = (((_723 * _673) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1691 - _1593)) + _1593);
    float _1710 = (((_723 * _675) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1693 - _1595)) + _1595);
    float _1712 = (((_723 * _676) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1695 - _1597)) + _1597);
    float _1715 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, _1708 * cbSceneParam._m0[91u].x));
    uvec4 _1731 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1733 = _1731.x * 14u;
    uint _1734 = _1733 + 13u;
    float _1741 = _688 + (-1.0);
    float _1746 = (cbLight._m0[_1734].x * _1741) + 1.0;
    float _1747 = (cbLight._m0[_1734].y * _1741) + 1.0;
    float _1748 = (cbLight._m0[_1734].z * _1741) + 1.0;
    float _1749 = (cbLight._m0[_1734].w * _1741) + 1.0;
    uint _1750 = _1733 + 5u;
    float _1756 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1760 = _1733 + 4u;
    float _1767 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1771 = _1733 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_468, _469, _470));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_468, _469, _470));
    float _3908 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3919 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1750].x * _1756) * _1792) + ((cbLight._m0[_1760].x * _1767) * _1790);
    float _1800 = ((_1756 * cbLight._m0[_1750].y) * _1792) + ((_1767 * cbLight._m0[_1760].y) * _1790);
    float _1801 = ((_1756 * cbLight._m0[_1750].z) * _1792) + ((_1767 * cbLight._m0[_1760].z) * _1790);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1733 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1799;
        _1821 = _1800;
        _1823 = _1801;
    }
    else
    {
        uint _1827 = _1733 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1733 + 2u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3930 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1846 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1799;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2034 = _1733 + 7u;
        float _2050 = (dot(vec3(cbLight._m0[_1733 + 3u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _3946 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2053 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1864 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _1819;
        _1866 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _1821;
        _1868 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _1823;
    }
    uint _1871 = _1733 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1733].w)) * _602) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1733].x + _549;
    float _1887 = cbLight._m0[_1733].y + _550;
    float _1888 = cbLight._m0[_1733].z + _551;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_1733].xyz));
    float _3962 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _1900 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1901 = dot(vec3(_468, _469, _470), vec3(_1893, _1894, _1895));
    float _3984 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1893, _1894, _1895));
    float _3995 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1921 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
    float _1922 = 0.959999978542327880859375 - _670;
    float _1924 = 0.959999978542327880859375 - _671;
    float _1925 = 0.959999978542327880859375 - _672;
    float _1932 = 1.0 - _1885;
    float _1943 = (0.5 / (((_1900 * ((_1899 * _1932) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1932) + _1885) * _1899))) * _1899;
    float _4006 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1956 = _1733 + 9u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _602) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1771].x + _549;
    float _1970 = cbLight._m0[_1771].y + _550;
    float _1971 = cbLight._m0[_1771].z + _551;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_1771].xyz));
    float _4017 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1983 = dot(vec3(_468, _469, _470), vec3(_1976, _1977, _1978));
    float _4028 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1976, _1977, _1978));
    float _4039 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1968 * _1968;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2002 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _2009 = 1.0 - _1968;
    float _2019 = (0.5 / (((_1900 * ((_1982 * _2009) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2009) + _1968) * _1982))) * _1982;
    float _4050 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    float _2031 = (((((_2002 * _1922) + _673) * cbLight._m0[_1956].x) * _2021) * _1756) + (((((_1921 * _1922) + _673) * cbLight._m0[_1871].x) * _1945) * _1767);
    float _2032 = (((((_2002 * _1924) + _675) * cbLight._m0[_1956].y) * _2021) * _1756) + (((((_1921 * _1924) + _675) * cbLight._m0[_1871].y) * _1945) * _1767);
    float _2033 = (((((_2002 * _1925) + _676) * cbLight._m0[_1956].z) * _2021) * _1756) + (((((_1921 * _1925) + _676) * cbLight._m0[_1871].z) * _1945) * _1767);
    float _2095;
    float _2097;
    float _2099;
    if (_1808)
    {
        _2095 = _2031;
        _2097 = _2032;
        _2099 = _2033;
    }
    else
    {
        uint _2101 = _1733 + 2u;
        uint _2105 = _1733 + 10u;
        float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _602) * 0.949999988079071044921875);
        float _2120 = _2119 * _2119;
        float _2121 = cbLight._m0[_2101].x + _549;
        float _2122 = cbLight._m0[_2101].y + _550;
        float _2123 = cbLight._m0[_2101].z + _551;
        float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
        float _2128 = _2127 * _2121;
        float _2129 = _2127 * _2122;
        float _2130 = _2127 * _2123;
        float _2131 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2101].xyz));
        float _4061 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2135 = dot(vec3(_468, _469, _470), vec3(_2128, _2129, _2130));
        float _4072 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2139 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2128, _2129, _2130));
        float _4083 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2143 = _2120 * _2120;
        float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
        float _2154 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
        float _2161 = 1.0 - _2120;
        float _2171 = (0.5 / (((_1900 * ((_2134 * _2161) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2161) + _2120) * _2134))) * _2134;
        float _4094 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2173 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
        float _2174 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2095 = (((((_2154 * _1922) + _673) * cbLight._m0[_2105].x) * _2173) * _2174) + _2031;
        _2097 = (((((_2154 * _1924) + _675) * cbLight._m0[_2105].y) * _2173) * _2174) + _2032;
        _2099 = (((((_2154 * _1925) + _676) * cbLight._m0[_2105].z) * _2173) * _2174) + _2033;
    }
    float _2209;
    float _2211;
    float _2213;
    if (_1826)
    {
        _2209 = _2095;
        _2211 = _2097;
        _2213 = _2099;
    }
    else
    {
        uint _2220 = _1733 + 3u;
        uint _2224 = _1733 + 11u;
        float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _602) * 0.949999988079071044921875);
        float _2239 = _2238 * _2238;
        float _2240 = cbLight._m0[_2220].x + _549;
        float _2241 = cbLight._m0[_2220].y + _550;
        float _2242 = cbLight._m0[_2220].z + _551;
        float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
        float _2247 = _2246 * _2240;
        float _2248 = _2246 * _2241;
        float _2249 = _2246 * _2242;
        float _2250 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2220].xyz));
        float _4110 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2254 = dot(vec3(_468, _469, _470), vec3(_2247, _2248, _2249));
        float _4121 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2258 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2247, _2248, _2249));
        float _4132 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2262 = _2239 * _2239;
        float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
        float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
        float _2280 = 1.0 - _2239;
        float _2290 = (0.5 / (((_1900 * ((_2253 * _2280) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2280) + _2239) * _2253))) * _2253;
        float _4143 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2292 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
        float _2293 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2209 = (((((_2273 * _1922) + _673) * cbLight._m0[_2224].x) * _2292) * _2293) + _2095;
        _2211 = (((((_2273 * _1924) + _675) * cbLight._m0[_2224].y) * _2292) * _2293) + _2097;
        _2213 = (((((_2273 * _1925) + _676) * cbLight._m0[_2224].z) * _2292) * _2293) + _2099;
    }
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    if (_1731.y == 0u)
    {
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2368;
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2368;
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2368;
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.x;
        uint _2395 = uint((float(_2383.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2384))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2384)));
        float _2405 = (log2(_2371 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2406 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        uint _2409 = uint(isnan(14.0) ? _2406 : (isnan(_2406) ? 14.0 : min(_2406, 14.0)));
        uvec4 _2414 = texelFetch(g_lightClusterGridBuffer, int(((_2409 << 2u) + (_2395 << 6u)) >> 2u));
        uint _2415 = _2414.x;
        uint _2416 = _2383.z;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((((1u << ((_2416 >> 4u) & 15u)) + 4294967295u) & _2415) == 0u) || ((_2416 & 240u) == 0u))
        {
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
        }
        else
        {
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2409 << 5u) + (_2395 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2693)
                {
                    frontier_phi_69_pred = _2682;
                    frontier_phi_69_pred_1 = _2681;
                    frontier_phi_69_pred_2 = _2680;
                    frontier_phi_69_pred_3 = _2678;
                    frontier_phi_69_pred_4 = _2677;
                    frontier_phi_69_pred_5 = _2679;
                }
                else
                {
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    uint _2807;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2692;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    for (;;)
                    {
                        uint _2811 = uint(findLSB(_2807)) + (_2683 << 5u);
                        uint _2808 = (_2807 + 4294967295u) & _2807;
                        uint _2813 = _2811 * 48u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2833 = (_2811 * 48u) + 4u;
                        vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 3u)).x));
                        uint _2852 = (_2811 * 48u) + 8u;
                        vec3 _2863 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x));
                        float _2867 = _2827.x - _2369;
                        float _2868 = _2827.y - _2370;
                        float _2869 = _2827.z - _2371;
                        float _2870 = dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869));
                        float _2873 = inversesqrt(_2870);
                        float _2874 = _2873 * _2867;
                        float _2875 = _2873 * _2868;
                        float _2876 = _2873 * _2869;
                        float _2877 = dot(vec3(_583, _586, _589), vec3(_2874, _2875, _2876));
                        float _2882 = 1.0 - (_2870 * _2827.w);
                        float _4169 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2883 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2884 = sqrt(_2870) * _2846.w;
                        float _2887 = 1.39999997615814208984375 / (_2884 + 1.39999997615814208984375);
                        float _2888 = _2887 * _2887;
                        float _2891 = ((1.0 - _2888) * _2877) + _2888;
                        float _2894 = _2884 * _2884;
                        float _2898 = ((isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))) * _2883) / ((_2894 * 0.699999988079071044921875) + 1.0);
                        float _2902 = (-0.0) - _2369;
                        float _2903 = (-0.0) - _2370;
                        float _2904 = (-0.0) - _2371;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2919 = exp2(log2(1.0 / ((_2894 * 3.5) + 5.0)) * 0.25);
                        float _2920 = 1.0 - _704;
                        float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                        float _2928 = _2927 * _2927;
                        float _2929 = _2928 * _2928;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2932 = _2911 + _2876;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2940 = dot(vec3(_583, _586, _589), vec3(_2909, _2910, _2911));
                        float _4185 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2944 = dot(vec3(_583, _586, _589), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                        float _4196 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                        float _2952 = _2887 * _2928;
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2877) + _2953;
                        float _4207 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2958 = 1.0 - _2928;
                        float _2968 = (0.5 / (((_2957 * ((_2943 * _2958) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2928) * _2943))) * _2957;
                        float _4218 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2979 = (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2951 * _2951) * ((_2894 * 2.1991131305694580078125) + 3.141590118408203125))) * _2883;
                        _2736 = (_2898 * _2846.x) + _2804;
                        _2737 = (_2898 * _2846.y) + _2805;
                        _2738 = (_2898 * _2846.z) + _2806;
                        _2733 = (_2979 * _2863.x) + _2801;
                        _2734 = (_2979 * _2863.y) + _2802;
                        _2735 = (_2979 * _2863.z) + _2803;
                        if (_2808 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2808;
                        }
                    }
                    frontier_phi_69_pred = _2738;
                    frontier_phi_69_pred_1 = _2737;
                    frontier_phi_69_pred_2 = _2736;
                    frontier_phi_69_pred_3 = _2734;
                    frontier_phi_69_pred_4 = _2733;
                    frontier_phi_69_pred_5 = _2735;
                }
                _2544 = frontier_phi_69_pred;
                _2542 = frontier_phi_69_pred_1;
                _2540 = frontier_phi_69_pred_2;
                _2536 = frontier_phi_69_pred_3;
                _2534 = frontier_phi_69_pred_4;
                _2538 = frontier_phi_69_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2534;
                    _2678 = _2536;
                    _2679 = _2538;
                    _2680 = _2540;
                    _2681 = _2542;
                    _2682 = _2544;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
        }
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.z;
        uint _2550 = (_2548 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2550) & _2415) == 0u)
        {
            _2645 = _2533;
            _2647 = _2535;
            _2649 = _2537;
            _2651 = _2539;
            _2653 = _2541;
            _2655 = _2543;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
            float _2671 = _2670 * _2369;
            float _2672 = _2670 * _2370;
            float _2673 = _2670 * _2371;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2550 < ((_2548 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2784 = _2533;
                float _2785 = _2535;
                float _2786 = _2537;
                float _2787 = _2539;
                float _2788 = _2541;
                float _2789 = _2543;
                uint _2790 = _2550;
                uint _2799;
                bool _2800;
                for (;;)
                {
                    _2799 = texelFetch(g_lightClassification, int((((_2409 << 5u) + (_2395 << 9u)) + (_2790 << 2u)) >> 2u)).x;
                    _2800 = _2799 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2800)
                    {
                        frontier_phi_75_pred = _2786;
                        frontier_phi_75_pred_1 = _2785;
                        frontier_phi_75_pred_2 = _2784;
                        frontier_phi_75_pred_3 = _2789;
                        frontier_phi_75_pred_4 = _2788;
                        frontier_phi_75_pred_5 = _2787;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        uint _3003 = _2799;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3073;
                        vec4 _3088;
                        float _3134;
                        bool _3135;
                        for (;;)
                        {
                            uint _3014 = ((_2790 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3060 = (_3014 * 40u) + 16u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3075 = (_3014 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3014 * 40u) + 24u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3109 = (_3014 * 40u) + 28u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3134 = fma(_2371, _3122.z, fma(_2370, _3122.y, _3122.x * _2369)) + _3122.w;
                            _3135 = !((fma(_2371, _3103.z, fma(_2370, _3103.y, _3103.x * _2369)) + _3103.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3135)
                            {
                                float _3162 = _3029.x - _2369;
                                float _3163 = _3029.y - _2370;
                                float _3164 = _3029.z - _2371;
                                float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                                float _3168 = inversesqrt(_3165);
                                float _3169 = _3168 * _3162;
                                float _3170 = _3168 * _3163;
                                float _3171 = _3168 * _3164;
                                float _3175 = 1.0 - (_3165 / (_3030 * _3030));
                                float _4229 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3180 = sqrt(_3165) * _3045.w;
                                float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                                float _3183 = _3182 * _3182;
                                float _3186 = ((1.0 - _3183) * dot(vec3(_3169, _3170, _3171), vec3(_583, _586, _589))) + _3183;
                                float _3189 = _3180 * _3180;
                                float _3193 = (fma(_2371, _3073.z, fma(_2370, _3073.y, _3073.x * _2369)) + _3073.w) / _3134;
                                float _3194 = (fma(_2371, _3088.z, fma(_2370, _3088.y, _3088.x * _2369)) + _3088.w) / _3134;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4245 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3176) / ((_3189 * 0.699999988079071044921875) + 1.0));
                                float _3212 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3213 = 1.0 - _704;
                                float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                                float _3221 = _3220 * _3220;
                                float _3222 = _3221 * _3221;
                                float _3223 = _3169 - _2671;
                                float _3224 = _3170 - _2672;
                                float _3225 = _3171 - _2673;
                                float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                                float _3233 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4256 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3237 = dot(vec3(_583, _586, _589), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                                float _4267 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                                float _3245 = _3182 * _3221;
                                float _3246 = _3245 * _3245;
                                float _3252 = ((1.0 - _3246) * dot(vec3(_583, _586, _589), vec3(_3169, _3170, _3171))) + _3246;
                                float _4278 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3254 = 1.0 - _3221;
                                float _3264 = (0.5 / (((_3253 * ((_3236 * _3254) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3221) * _3236))) * _3253;
                                float _4289 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3274 = (_3199 * _3176) * (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3244 * _3244) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3274 * _3057.z;
                                frontier_phi_81_pred_1 = _3274 * _3057.y;
                                frontier_phi_81_pred_2 = _3274 * _3057.x;
                                frontier_phi_81_pred_3 = _3200 * _3045.z;
                                frontier_phi_81_pred_4 = _3200 * _3045.y;
                                frontier_phi_81_pred_5 = _3200 * _3045.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3280 = frontier_phi_81_pred;
                            _3279 = frontier_phi_81_pred_1;
                            _3278 = frontier_phi_81_pred_2;
                            _3283 = frontier_phi_81_pred_3;
                            _3282 = frontier_phi_81_pred_4;
                            _3281 = frontier_phi_81_pred_5;
                            _2987 = _3281 + _3000;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2986 = _3280 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2986;
                        frontier_phi_75_pred_1 = _2985;
                        frontier_phi_75_pred_2 = _2984;
                        frontier_phi_75_pred_3 = _2989;
                        frontier_phi_75_pred_4 = _2988;
                        frontier_phi_75_pred_5 = _2987;
                    }
                    _2650 = frontier_phi_75_pred;
                    _2648 = frontier_phi_75_pred_1;
                    _2646 = frontier_phi_75_pred_2;
                    _2656 = frontier_phi_75_pred_3;
                    _2654 = frontier_phi_75_pred_4;
                    _2652 = frontier_phi_75_pred_5;
                    uint _2791 = _2790 + 1u;
                    if (_2791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2784 = _2646;
                        _2785 = _2648;
                        _2786 = _2650;
                        _2787 = _2652;
                        _2788 = _2654;
                        _2789 = _2656;
                        _2790 = _2791;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2654;
                frontier_phi_63_64_ladder_1 = _2652;
                frontier_phi_63_64_ladder_2 = _2650;
                frontier_phi_63_64_ladder_3 = _2656;
                frontier_phi_63_64_ladder_4 = _2648;
                frontier_phi_63_64_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_63_64_ladder = _2541;
                frontier_phi_63_64_ladder_1 = _2539;
                frontier_phi_63_64_ladder_2 = _2537;
                frontier_phi_63_64_ladder_3 = _2543;
                frontier_phi_63_64_ladder_4 = _2535;
                frontier_phi_63_64_ladder_5 = _2533;
            }
            _2645 = frontier_phi_63_64_ladder_5;
            _2647 = frontier_phi_63_64_ladder_4;
            _2649 = frontier_phi_63_64_ladder_2;
            _2651 = frontier_phi_63_64_ladder_1;
            _2653 = frontier_phi_63_64_ladder;
            _2655 = frontier_phi_63_64_ladder_3;
        }
        float _2660 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2427 = (_2660 * _2651) + _1864;
        _2429 = (_2660 * _2653) + _1866;
        _2431 = (_2660 * _2655) + _1868;
        _2433 = ((_2645 * _673) * _2660) + _2209;
        _2435 = ((_2647 * _675) * _2660) + _2211;
        _2437 = ((_2649 * _676) * _2660) + _2213;
    }
    else
    {
        _2427 = _1864;
        _2429 = _1866;
        _2431 = _1868;
        _2433 = _2209;
        _2435 = _2211;
        _2437 = _2213;
    }
    vec4 _2443 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4305 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4316 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4327 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _2467 = (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2427 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _688))) + ((_2433 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + (_2443.x * cbMtdParam._m0[3u].x);
    float _2469 = ((_2443.y * cbMtdParam._m0[3u].x) + ((_2435 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2429 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _688)));
    float _2471 = ((_2443.z * cbMtdParam._m0[3u].x) + ((_2437 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2431 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _688)));
    uint _2475 = _615 + 6u;
    float _2483 = _557 / cbSceneParam._m0[86u].x;
    float _2484 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2498 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, (log2((isnan(cbSceneParam._m0[77u].w) ? _491 : (isnan(_491) ? cbSceneParam._m0[77u].w : min(_491, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2500 = _2498.x;
    float _2501 = _2498.y;
    float _2502 = _2498.z;
    float _2503 = _2498.w;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_491 > cbSceneParam._m0[78u].w)
    {
        float _2558 = isnan(_491) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _491 : min(cbSceneParam._m0[80u].w, _491));
        float _2559 = _2558 / _491;
        float _2570 = _2559 * _542;
        float _2571 = _543 * _2559;
        float _2572 = (-0.0) - _2571;
        float _2573 = _2559 * _544;
        float _2575 = (cbSceneParam._m0[77u].w * _2572) / _2558;
        float _2576 = _2575 + cbSceneParam._m0[79u].w;
        float _2577 = cbSceneParam._m0[79u].w - _2571;
        float _2583 = sqrt(((_2570 * _2570) + (_2571 * _2571)) + (_2573 * _2573));
        float _2586 = (1.0 - (cbSceneParam._m0[77u].w / _2558)) * _2583;
        float _2591 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2593 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2746;
        if (abs((_2572 - _2575) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2746 = ((((_2576 > 0.0) ? exp2(_2591 * _2576) : (2.0 - exp2(_2593 * _2576))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2586;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2577) ? _2576 : (isnan(_2576) ? _2577 : max(_2576, _2577));
            float _2708 = isnan(_2577) ? _2576 : (isnan(_2576) ? _2577 : min(_2576, _2577));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2746 = ((abs(_2583 / _2572) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2591 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2591 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2593 * _2717) - exp2(_2593 * _2718)) * _2706))) + (_2586 * cbSceneParam._m0[80u].z);
        }
        vec4 _2748 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, 1.0), 0.0);
        float _2757 = exp2((_2746 * (-1.44269502162933349609375)) * (1.0 - _2748.w));
        float _2758 = log2(_2757);
        float _2774 = log2(_2503);
        _2595 = (exp2(_2774 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].x)) * _2748.x) / cbSceneParam._m0[78u].x)) + _2500;
        _2597 = (exp2(_2774 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].y)) * _2748.y) / cbSceneParam._m0[78u].y)) + _2501;
        _2599 = (exp2(_2774 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].z)) * _2748.z) / cbSceneParam._m0[78u].z)) + _2502;
        _2601 = _2757 * _2503;
    }
    else
    {
        _2595 = _2500;
        _2597 = _2501;
        _2599 = _2502;
        _2601 = _2503;
    }
    float _2613 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2614 = _2613 == 3.0;
    float _2615 = log2(_2601);
    float _2622 = exp2(_2615 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0)));
    float _2623 = exp2(_2615 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0)));
    float _2624 = exp2(_2615 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0)));
    float _2633 = (_2613 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2633 * (_2614 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.y = _2633 * (_2614 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2597)));
    SV_Target.z = _2633 * (_2614 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.w = cbInstanceData._m0[_2475].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2475].w;
}


