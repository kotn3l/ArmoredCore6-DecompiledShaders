#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1205;
float _3891;
float _3892;
float _3893;
float _3894;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _268 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _273 = log2(0.0);
    bool _276 = exp2(_273 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[15u].x;
    _196[0u] = cbMtdParam._m0[15u].y;
    _197[0u] = cbMtdParam._m0[15u].z;
    _195[1u] = cbMtdParam._m0[16u].x;
    _196[1u] = cbMtdParam._m0[16u].y;
    _197[1u] = cbMtdParam._m0[16u].z;
    _195[2u] = cbMtdParam._m0[17u].x;
    _196[2u] = cbMtdParam._m0[17u].y;
    _197[2u] = cbMtdParam._m0[17u].z;
    _195[3u] = cbMtdParam._m0[12u].x;
    _196[3u] = cbMtdParam._m0[12u].y;
    _197[3u] = cbMtdParam._m0[12u].z;
    _195[4u] = cbMtdParam._m0[13u].x;
    _196[4u] = cbMtdParam._m0[13u].y;
    _197[4u] = cbMtdParam._m0[13u].z;
    _195[5u] = cbMtdParam._m0[14u].x;
    _196[5u] = cbMtdParam._m0[14u].y;
    _197[5u] = cbMtdParam._m0[14u].z;
    vec4 _344 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _348 = _344.y;
    float _351 = (_344.x + (-0.02500000037252902984619140625)) * 8.0;
    float _353 = roundEven(_351);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    uint _357 = uint(int(isnan(5.0) ? _354 : (isnan(_354) ? 5.0 : min(_354, 5.0))));
    float _374;
    if (_276)
    {
        _374 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _374 = cbMtdParam._m0[20u].z;
    }
    float _380;
    float _382;
    if (_276)
    {
        _380 = cbMtdParam._m0[28u].z;
        _382 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _380 = cbMtdParam._m0[24u].x;
        _382 = cbMtdParam._m0[24u].y;
    }
    float _384 = _380 * TEXCOORD.x;
    float _385 = _382 * TEXCOORD.y;
    float _397 = floor(_374);
    vec4 _400 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _384) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _385) + cbTextureTilingScale._m0[8u].w, _397));
    vec4 _422 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _268) + cbTextureTilingScale._m0[0u].w));
    float _430 = ((((((_195[_357] - cbMtdParam._m0[19u].x) * _348) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _400.x) * cbMtdParam._m0[9u].x) * _422.x;
    float _434 = ((((((_196[_357] - cbMtdParam._m0[19u].y) * _348) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _400.y) * cbMtdParam._m0[9u].y) * _422.y;
    float _438 = ((((((_197[_357] - cbMtdParam._m0[19u].z) * _348) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _400.z) * cbMtdParam._m0[9u].z) * _422.z;
    vec4 _450 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _268) + cbTextureTilingScale._m0[1u].w));
    float _454 = _450.z;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[25u].x;
    _191[0u] = cbMtdParam._m0[25u].y;
    _190[1u] = cbMtdParam._m0[26u].x;
    _191[1u] = cbMtdParam._m0[26u].y;
    _190[2u] = cbMtdParam._m0[26u].z;
    _191[2u] = cbMtdParam._m0[26u].w;
    _190[3u] = cbMtdParam._m0[27u].x;
    _191[3u] = cbMtdParam._m0[27u].y;
    _190[4u] = cbMtdParam._m0[25u].z;
    _191[4u] = cbMtdParam._m0[25u].w;
    float _499 = roundEven(5.0 - _351);
    float _500 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = isnan(4.0) ? _500 : (isnan(_500) ? 4.0 : min(_500, 4.0));
    float _503 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    uint _505 = uint(int(isnan(4.0) ? _503 : (isnan(_503) ? 4.0 : min(_503, 4.0))));
    float _511 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _384) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _385) + cbTextureTilingScale._m0[10u].w, _397)).x + _450.w) + _191[_505];
    vec4 _529 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _384) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _385) + cbTextureTilingScale._m0[9u].w, _397));
    float _536 = (_529.x * 2.0) + (-1.0);
    float _537 = (_529.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3933 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _544 = sqrt(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))));
    float _553 = (cbMtdParam._m0[21u].x * (((_454 * 2.0) * (_529.z + _190[_505])) - _454)) + _454;
    float _557 = (cbMtdParam._m0[21u].y * ((_450.x * 2.0) + (-1.0))) + _536;
    float _558 = (cbMtdParam._m0[21u].y * ((_450.y * 2.0) + (-1.0))) + _537;
    float _561 = fma(_544, _247, fma(_558, _239 * TANGENT.x, (_225 * _217) * _557));
    float _564 = fma(_544, _248, fma(_558, _239 * TANGENT.y, (_225 * _218) * _557));
    float _567 = fma(_544, _249, fma(_558, _239 * TANGENT.z, (_225 * _219) * _557));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3944 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _575 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3966 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3977 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3988 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _579 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _646 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _636);
    float _647 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _636);
    float _648 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _636);
    float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
    float _653 = _646 * _652;
    float _654 = _647 * _652;
    float _655 = _648 * _652;
    vec4 _660 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _662 = _660.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _885 = sqrt(((_646 * _646) + (_647 * _647)) + (_648 * _648));
        float _891 = (cbMatDynParam._m0[5u].x * _885) + cbMatDynParam._m0[5u].y;
        float _3999 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _896 = (cbMatDynParam._m0[5u].z * _885) + cbMatDynParam._m0[5u].w;
        float _4010 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) - _892)) + _892) < ((_662 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _679 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _681 = _679.w;
    float _700 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _703 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _706 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    vec4 _708 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _719 = (((_708.y - _575) + (_708.w * _575)) * cbMtdParam._m0[3u].x) + _575;
    uint _732 = uint(roundEven(NORMAL.w)) * 13u;
    uint _733 = _732 + 9u;
    uint _734 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_734].z;
    float _4021 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    vec4 _746 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _751 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _762 = (((_751.x - _579) + (_751.w * _579)) * cbMtdParam._m0[3u].x) + _579;
    float _775 = (cbMtdParam._m0[3u].x * (((_743 * _681) - _743) + _746.x)) + _743;
    float _776 = (cbMtdParam._m0[3u].x * (((_744 * _681) - _744) + _746.y)) + _744;
    float _777 = (cbMtdParam._m0[3u].x * (((_745 * _681) - _745) + _746.z)) + _745;
    float _778 = 1.0 - _762;
    float _779 = _778 * _775;
    float _780 = _778 * _776;
    float _781 = _778 * _777;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _762;
    float _787 = (_776 + (-0.039999999105930328369140625)) * _762;
    float _788 = (_777 + (-0.039999999105930328369140625)) * _762;
    float _789 = _786 + 0.039999999105930328369140625;
    float _791 = _787 + 0.039999999105930328369140625;
    float _792 = _788 + 0.039999999105930328369140625;
    vec4 _801 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _804 = _801.x * TEXCOORD_4;
    float _805 = dot(vec3(_572, _573, _574), vec3(_653, _654, _655));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _572) - _653;
    float _813 = (_808 * _573) - _654;
    float _814 = (_808 * _574) - _655;
    float _818 = abs(dot(vec3(_653, _654, _655), vec3(_572, _573, _574)));
    float _4054 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_719);
    float _831 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _837 = (1.0 - _831) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _838 = _831 * _820;
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1204;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _929 = fma(_874, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866));
        float _933 = fma(_874, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866));
        float _937 = fma(_874, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866));
        float _962 = _866 + _572;
        float _963 = _870 + _573;
        float _964 = _874 + _574;
        float _974 = fma(_964, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962)) - _929;
        float _975 = fma(_964, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962)) - _933;
        float _976 = fma(_964, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962)) - _937;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_929 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_933 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[34u].z) + ((((((_937 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1032 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_998.x + (-0.5));
        float _1034 = _1032 * (_998.y + (-0.5));
        float _1035 = _1032 * (_998.z + (-0.5));
        float _1042 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1005.x + (-0.5));
        float _1044 = _1042 * (_1005.y + (-0.5));
        float _1045 = _1042 * (_1005.z + (-0.5));
        float _1052 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1012.x + (-0.5));
        float _1054 = _1052 * (_1012.y + (-0.5));
        float _1055 = _1052 * (_1012.z + (-0.5));
        float _1062 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1019.x + (-0.5));
        float _1064 = _1062 * (_1019.y + (-0.5));
        float _1065 = _1062 * (_1019.z + (-0.5));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = _1033 * 0.5;
        float _1070 = _1043 * 0.5;
        float _1071 = _1053 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1086 = (dot(vec3(_572, _573, _574), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1096 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _4102 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1098 + 1.0))) + _1103) * _1066;
        float _1113 = _1034 * 0.5;
        float _1114 = _1044 * 0.5;
        float _1115 = _1054 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_572, _573, _574), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _4135 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1140 + 1.0))) + _1145) * _1067;
        float _1155 = _1035 * 0.5;
        float _1156 = _1045 * 0.5;
        float _1157 = _1055 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_572, _573, _574), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _4168 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1182 + 1.0))) + _1187) * _1068;
        _1204 = _1035;
        _1206 = _1034;
        _1207 = _1033;
        _1208 = _1045;
        _1209 = _1044;
        _1210 = _1043;
        _1211 = _1055;
        _1212 = _1054;
        _1213 = _1053;
        _1214 = _1068;
        _1215 = _1067;
        _1216 = _1066;
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
    }
    else
    {
        _1204 = _1205;
        _1206 = _1205;
        _1207 = _1205;
        _1208 = _1205;
        _1209 = _1205;
        _1210 = _1205;
        _1211 = _1205;
        _1212 = _1205;
        _1213 = _1205;
        _1214 = _1205;
        _1215 = _1205;
        _1216 = _1205;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_874, cbModelParam._m0[30u].z, fma(_870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _866));
        float _1252 = fma(_874, cbModelParam._m0[31u].z, fma(_870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _866));
        float _1256 = fma(_874, cbModelParam._m0[32u].z, fma(_870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _866));
        float _1279 = _866 + _572;
        float _1280 = _870 + _573;
        float _1281 = _874 + _574;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_572, _573, _574), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4231 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_572, _573, _574), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4264 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_572, _573, _574), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4297 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1205;
        _1518 = _1205;
        _1519 = _1205;
        _1520 = _1205;
        _1521 = _1205;
        _1522 = _1205;
        _1523 = _1205;
        _1524 = _1205;
        _1525 = _1205;
        _1526 = _1205;
        _1527 = _1205;
        _1528 = _1205;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1217)) + _1217;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1218)) + _1218;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1219)) + _1219;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _812 * 0.5;
    float _1586 = _813 * 0.5;
    float _1587 = _814 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1204, _1208, _1211, _1214));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _719);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_874, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_874, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_874, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1715 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1718 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_23_21_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_23_21_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_23_21_ladder = 5000.0;
            }
            _1746 = frontier_phi_23_21_ladder;
        }
        float _1918;
        if (_1715 > 0.0)
        {
            _1918 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1918 = frontier_phi_32_28_ladder;
        }
        float _2213;
        if (_1718 > 0.0)
        {
            _2213 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2213 = frontier_phi_44_39_ladder;
        }
        float _2215 = isnan(_1918) ? _1746 : (isnan(_1746) ? _1918 : min(_1746, _1918));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1712) + _1701;
        float _2221 = (_2216 * _1715) + _1705;
        float _2222 = (_2216 * _1718) + _1709;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2223;
        float _2227 = _2223 + 1.0;
        float frontier_phi_22_44_ladder;
        float frontier_phi_22_44_ladder_1;
        float frontier_phi_22_44_ladder_2;
        if ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 > _2227) || ((_2221 < _2225) || ((_2220 < _2225) || (_2220 > _2227))))))
        {
            frontier_phi_22_44_ladder = 0.0;
            frontier_phi_22_44_ladder_1 = 0.0;
            frontier_phi_22_44_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2222, cbModelParam._m0[9u].z, fma(_2221, cbModelParam._m0[9u].y, _2220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2222, cbModelParam._m0[10u].z, fma(_2221, cbModelParam._m0[10u].y, _2220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2222, cbModelParam._m0[11u].z, fma(_2221, cbModelParam._m0[11u].y, _2220 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_22_44_ladder = _2367.x * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_1 = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_2 = _2367.y * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_22_44_ladder;
        _1736 = frontier_phi_22_44_ladder_2;
        _1738 = frontier_phi_22_44_ladder_1;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1654);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _719);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_874, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_874, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_874, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1811 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1814 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1923;
        if (_1808 > 0.0)
        {
            _1923 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1923 = frontier_phi_34_30_ladder;
        }
        float _2240;
        if (_1811 > 0.0)
        {
            _2240 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2240 = frontier_phi_46_41_ladder;
        }
        float _2578;
        if (_1814 > 0.0)
        {
            _2578 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_56_53_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_56_53_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_56_53_ladder = 5000.0;
            }
            _2578 = frontier_phi_56_53_ladder;
        }
        float _2580 = isnan(_2240) ? _1923 : (isnan(_1923) ? _2240 : min(_1923, _2240));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1808) + _1797;
        float _2586 = (_2581 * _1811) + _1801;
        float _2587 = (_2581 * _1814) + _1805;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_31_56_ladder;
        float frontier_phi_31_56_ladder_1;
        float frontier_phi_31_56_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_31_56_ladder = 0.0;
            frontier_phi_31_56_ladder_1 = 0.0;
            frontier_phi_31_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_31_56_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_31_56_ladder_2;
        _1835 = frontier_phi_31_56_ladder_1;
        _1837 = frontier_phi_31_56_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1743);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1850 = (((_837 * _789) + _838) * _804) * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1852 = (((_837 * _791) + _838) * _804) * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1854 = (((_837 * _792) + _838) * _804) * ((cbModelParam._m0[1u].w * (_1837 - _1738)) + _1738);
    float _1857 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1852, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1852, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1852, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1910 = _1897 / _1909;
    float _1911 = _1901 / _1909;
    float _1912 = _1905 / _1909;
    float _2059;
    float _2060;
    float _2061;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1939 = ((uint(_1912 > cbSceneParam._m0[59u].y) + uint(_1912 > cbSceneParam._m0[59u].x)) + uint(_1912 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1940 = _1939 + 43u;
        uint _1948 = _1939 + 44u;
        uint _1956 = _1939 + 45u;
        uint _1964 = _1939 + 46u;
        float _1975 = fma(_1909, cbSceneParam._m0[_1940].w, fma(_1905, cbSceneParam._m0[_1940].z, fma(_1901, cbSceneParam._m0[_1940].y, _1897 * cbSceneParam._m0[_1940].x)));
        float _1979 = fma(_1909, cbSceneParam._m0[_1948].w, fma(_1905, cbSceneParam._m0[_1948].z, fma(_1901, cbSceneParam._m0[_1948].y, _1897 * cbSceneParam._m0[_1948].x)));
        float _1987 = fma(_1909, cbSceneParam._m0[_1964].w, fma(_1905, cbSceneParam._m0[_1964].z, fma(_1901, cbSceneParam._m0[_1964].y, _1897 * cbSceneParam._m0[_1964].x)));
        float _1992 = cbSceneParam._m0[33u].z * _1987;
        float _1994 = cbSceneParam._m0[33u].w * _1987;
        float _1997 = fma(_1909, cbSceneParam._m0[_1956].w, fma(_1905, cbSceneParam._m0[_1956].z, fma(_1901, cbSceneParam._m0[_1956].y, _1897 * cbSceneParam._m0[_1956].x))) / _1987;
        float _2045 = (cbSceneParam._m0[33u].x - sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912))) * cbSceneParam._m0[33u].y;
        float _4423 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2052 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 + _1975) / _1987, (_1994 + _1979) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 + _1975) / _1987, (_1979 - _1992) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 - _1992) / _1987, (_1979 - _1994) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 - _1994) / _1987, (_1992 + _1979) / _1987), _1997), 0.0)).x), vec4(0.25)));
        _2059 = 1.0 - (_2052 * cbSceneParam._m0[34u].x);
        _2060 = 1.0 - (_2052 * cbSceneParam._m0[34u].y);
        _2061 = 1.0 - (_2052 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2059 = 1.0;
        _2060 = 1.0;
        _2061 = 1.0;
    }
    float _2125;
    float _2127;
    float _2129;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2113 = fma(_1909, cbSceneParam._m0[63u].w, fma(_1905, cbSceneParam._m0[63u].z, fma(_1901, cbSceneParam._m0[63u].y, _1897 * cbSceneParam._m0[63u].x)));
        float _2114 = fma(_1909, cbSceneParam._m0[60u].w, fma(_1905, cbSceneParam._m0[60u].z, fma(_1901, cbSceneParam._m0[60u].y, _1897 * cbSceneParam._m0[60u].x))) / _2113;
        float _2115 = fma(_1909, cbSceneParam._m0[61u].w, fma(_1905, cbSceneParam._m0[61u].z, fma(_1901, cbSceneParam._m0[61u].y, _1897 * cbSceneParam._m0[61u].x))) / _2113;
        float frontier_phi_43_42_ladder;
        float frontier_phi_43_42_ladder_1;
        float frontier_phi_43_42_ladder_2;
        if ((((_2114 >= cbSceneParam._m0[64u].x) && (_2115 >= cbSceneParam._m0[64u].y)) && (_2114 <= cbSceneParam._m0[64u].z)) && (_2115 <= cbSceneParam._m0[64u].w))
        {
            float _2253 = fma(_1909, cbSceneParam._m0[62u].w, fma(_1905, cbSceneParam._m0[62u].z, fma(_1901, cbSceneParam._m0[62u].y, _1897 * cbSceneParam._m0[62u].x))) / _2113;
            float _2257 = isnan(cbSceneParam._m0[41u].w) ? _2253 : (isnan(_2253) ? cbSceneParam._m0[41u].w : max(_2253, cbSceneParam._m0[41u].w));
            float _2300 = (cbSceneParam._m0[33u].x - sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912))) * cbSceneParam._m0[33u].y;
            float _4439 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
            float _2307 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2114, cbSceneParam._m0[33u].w + _2115), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2114, _2115 - cbSceneParam._m0[33u].z), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2114 - cbSceneParam._m0[33u].z, _2115 - cbSceneParam._m0[33u].w), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2114 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2115), _2257), 0.0)).x), vec4(0.25)));
            float _2311 = 1.0 - (_2307 * cbSceneParam._m0[34u].x);
            float _2312 = 1.0 - (_2307 * cbSceneParam._m0[34u].y);
            float _2313 = 1.0 - (_2307 * cbSceneParam._m0[34u].z);
            frontier_phi_43_42_ladder = isnan(_2313) ? _2061 : (isnan(_2061) ? _2313 : min(_2061, _2313));
            frontier_phi_43_42_ladder_1 = isnan(_2312) ? _2060 : (isnan(_2060) ? _2312 : min(_2060, _2312));
            frontier_phi_43_42_ladder_2 = isnan(_2311) ? _2059 : (isnan(_2059) ? _2311 : min(_2059, _2311));
        }
        else
        {
            frontier_phi_43_42_ladder = _2061;
            frontier_phi_43_42_ladder_1 = _2060;
            frontier_phi_43_42_ladder_2 = _2059;
        }
        _2125 = frontier_phi_43_42_ladder_2;
        _2127 = frontier_phi_43_42_ladder_1;
        _2129 = frontier_phi_43_42_ladder;
    }
    else
    {
        _2125 = _2059;
        _2127 = _2060;
        _2129 = _2061;
    }
    uvec4 _2134 = floatBitsToUint(cbInstanceData._m0[_732 + 5u]);
    uint _2136 = _2134.x * 14u;
    uint _2137 = _2136 + 13u;
    float _2144 = _804 + (-1.0);
    float _2149 = (cbLight._m0[_2137].x * _2144) + 1.0;
    float _2150 = (cbLight._m0[_2137].y * _2144) + 1.0;
    float _2151 = (cbLight._m0[_2137].z * _2144) + 1.0;
    float _2152 = (cbLight._m0[_2137].w * _2144) + 1.0;
    uint _2153 = _2136 + 5u;
    float _2159 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2163 = _2136 + 4u;
    float _2172 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2176 = _2136 | 1u;
    float _2187 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_572, _573, _574));
    float _2190 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_572, _573, _574));
    float _4475 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _4486 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2195 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2197 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2204 = ((cbLight._m0[_2153].x * _2159) * _2197) + (((cbLight._m0[_2163].x * _2125) * _2172) * _2195);
    float _2205 = ((_2159 * cbLight._m0[_2153].y) * _2197) + (((cbLight._m0[_2163].y * _2127) * _2172) * _2195);
    float _2206 = ((_2159 * cbLight._m0[_2153].z) * _2197) + (((cbLight._m0[_2163].z * _2129) * _2172) * _2195);
    uvec4 _2210 = floatBitsToUint(cbLight._m0[_2136 + 12u]);
    bool _2212 = _2210.x == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2212)
    {
        _2314 = _2204;
        _2316 = _2205;
        _2318 = _2206;
    }
    else
    {
        uint _2322 = _2136 + 6u;
        float _2338 = (dot(vec3(cbLight._m0[_2136 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4497 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2341 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2314 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2204;
        _2316 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2205;
        _2318 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2206;
    }
    bool _2321 = _2210.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2321)
    {
        _2376 = _2314;
        _2378 = _2316;
        _2380 = _2318;
    }
    else
    {
        uint _2549 = _2136 + 7u;
        float _2565 = (dot(vec3(cbLight._m0[_2136 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4513 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2568 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2376 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2314;
        _2378 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2316;
        _2380 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2318;
    }
    uint _2383 = _2136 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _719) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2136].x + _653;
    float _2399 = cbLight._m0[_2136].y + _654;
    float _2400 = cbLight._m0[_2136].z + _655;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2136].xyz));
    float _4529 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _4540 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2412 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2413 = dot(vec3(_572, _573, _574), vec3(_2405, _2406, _2407));
    float _4551 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2405, _2406, _2407));
    float _4562 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
    float _2434 = 0.959999978542327880859375 - _786;
    float _2436 = 0.959999978542327880859375 - _787;
    float _2437 = 0.959999978542327880859375 - _788;
    float _2444 = 1.0 - _2397;
    float _2455 = (0.5 / (((_2412 * ((_2411 * _2444) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2444) + _2397) * _2411))) * _2411;
    float _4573 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2471 = _2136 + 9u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _719) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2176].x + _653;
    float _2485 = cbLight._m0[_2176].y + _654;
    float _2486 = cbLight._m0[_2176].z + _655;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2176].xyz));
    float _4584 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2498 = dot(vec3(_572, _573, _574), vec3(_2491, _2492, _2493));
    float _4595 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2491, _2492, _2493));
    float _4606 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2483 * _2483;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
    float _2524 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2412 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2524) + _2483) * _2497))) * _2497;
    float _4617 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    float _2546 = (((((_2517 * _2434) + _789) * cbLight._m0[_2471].x) * _2536) * _2159) + ((((cbLight._m0[_2383].x * _2125) * ((_2433 * _2434) + _789)) * _2457) * _2172);
    float _2547 = (((((_2517 * _2436) + _791) * cbLight._m0[_2471].y) * _2536) * _2159) + ((((cbLight._m0[_2383].y * _2127) * ((_2433 * _2436) + _791)) * _2457) * _2172);
    float _2548 = (((((_2517 * _2437) + _792) * cbLight._m0[_2471].z) * _2536) * _2159) + ((((cbLight._m0[_2383].z * _2129) * ((_2433 * _2437) + _792)) * _2457) * _2172);
    float _2604;
    float _2606;
    float _2608;
    if (_2212)
    {
        _2604 = _2546;
        _2606 = _2547;
        _2608 = _2548;
    }
    else
    {
        uint _2610 = _2136 + 2u;
        uint _2614 = _2136 + 10u;
        float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2610].w)) * _719) * 0.949999988079071044921875);
        float _2629 = _2628 * _2628;
        float _2630 = cbLight._m0[_2610].x + _653;
        float _2631 = cbLight._m0[_2610].y + _654;
        float _2632 = cbLight._m0[_2610].z + _655;
        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
        float _2637 = _2636 * _2630;
        float _2638 = _2636 * _2631;
        float _2639 = _2636 * _2632;
        float _2640 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2610].xyz));
        float _4628 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2644 = dot(vec3(_572, _573, _574), vec3(_2637, _2638, _2639));
        float _4639 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2648 = dot(vec3(cbLight._m0[_2610].xyz), vec3(_2637, _2638, _2639));
        float _4650 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2652 = _2629 * _2629;
        float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
        float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0);
        float _2670 = 1.0 - _2629;
        float _2680 = (0.5 / (((_2412 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2670) + _2629) * _2643))) * _2643;
        float _4661 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2604 = (((((_2663 * _2434) + _789) * cbLight._m0[_2614].x) * _2682) * _2683) + _2546;
        _2606 = (((((_2663 * _2436) + _791) * cbLight._m0[_2614].y) * _2682) * _2683) + _2547;
        _2608 = (((((_2663 * _2437) + _792) * cbLight._m0[_2614].z) * _2682) * _2683) + _2548;
    }
    float _2714;
    float _2716;
    float _2718;
    if (_2321)
    {
        _2714 = _2604;
        _2716 = _2606;
        _2718 = _2608;
    }
    else
    {
        uint _2725 = _2136 + 3u;
        uint _2729 = _2136 + 11u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _719) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _653;
        float _2746 = cbLight._m0[_2725].y + _654;
        float _2747 = cbLight._m0[_2725].z + _655;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2725].xyz));
        float _4677 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2759 = dot(vec3(_572, _573, _574), vec3(_2752, _2753, _2754));
        float _4688 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4699 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
        float _2785 = 1.0 - _2744;
        float _2795 = (0.5 / (((_2412 * ((_2758 * _2785) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2785) + _2744) * _2758))) * _2758;
        float _4710 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2714 = (((((_2778 * _2434) + _789) * cbLight._m0[_2729].x) * _2797) * _2798) + _2604;
        _2716 = (((((_2778 * _2436) + _791) * cbLight._m0[_2729].y) * _2797) * _2798) + _2606;
        _2718 = (((((_2778 * _2437) + _792) * cbLight._m0[_2729].z) * _2797) * _2798) + _2608;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2134.y == 0u)
    {
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _2820)));
        float _2841 = (log2(_1912 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
        }
        else
        {
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            uint _3106 = 0u;
            uint _3115;
            bool _3116;
            for (;;)
            {
                _3115 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                _3116 = _3115 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_3116)
                {
                    frontier_phi_77_pred = _3105;
                    frontier_phi_77_pred_1 = _3104;
                    frontier_phi_77_pred_2 = _3103;
                    frontier_phi_77_pred_3 = _3102;
                    frontier_phi_77_pred_4 = _3100;
                    frontier_phi_77_pred_5 = _3101;
                }
                else
                {
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    uint _3251;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3115;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    for (;;)
                    {
                        uint _3255 = uint(findLSB(_3251)) + (_3106 << 5u);
                        uint _3252 = (_3251 + 4294967295u) & _3251;
                        uint _3257 = _3255 * 48u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3277 = (_3255 * 48u) + 4u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3296 = (_3255 * 48u) + 8u;
                        vec3 _3307 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x));
                        float _3311 = _3271.x - _1910;
                        float _3312 = _3271.y - _1911;
                        float _3313 = _3271.z - _1912;
                        float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                        float _3317 = inversesqrt(_3314);
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3321 = dot(vec3(_700, _703, _706), vec3(_3318, _3319, _3320));
                        float _3326 = 1.0 - (_3314 * _3271.w);
                        float _4736 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3328 = sqrt(_3314) * _3290.w;
                        float _3331 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3321) + _3332;
                        float _3338 = _3328 * _3328;
                        float _3342 = ((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3327) / ((_3338 * 0.699999988079071044921875) + 1.0);
                        float _3346 = (-0.0) - _1910;
                        float _3347 = (-0.0) - _1911;
                        float _3348 = (-0.0) - _1912;
                        float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3362 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                        float _3363 = 1.0 - _820;
                        float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                        float _3371 = _3370 * _3370;
                        float _3372 = _3371 * _3371;
                        float _3373 = _3353 + _3318;
                        float _3374 = _3354 + _3319;
                        float _3375 = _3355 + _3320;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3383 = dot(vec3(_700, _703, _706), vec3(_3353, _3354, _3355));
                        float _4752 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3387 = dot(vec3(_700, _703, _706), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                        float _4763 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                        float _3395 = _3331 * _3371;
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3321) + _3396;
                        float _4774 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3401 = 1.0 - _3371;
                        float _3411 = (0.5 / (((_3400 * ((_3386 * _3401) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3371) * _3386))) * _3400;
                        float _4785 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3422 = (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3394 * _3394) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125))) * _3327;
                        _3175 = (_3342 * _3290.x) + _3248;
                        _3176 = (_3342 * _3290.y) + _3249;
                        _3177 = (_3342 * _3290.z) + _3250;
                        _3172 = (_3422 * _3307.x) + _3245;
                        _3173 = (_3422 * _3307.y) + _3246;
                        _3174 = (_3422 * _3307.z) + _3247;
                        if (_3252 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3252;
                        }
                    }
                    frontier_phi_77_pred = _3177;
                    frontier_phi_77_pred_1 = _3176;
                    frontier_phi_77_pred_2 = _3175;
                    frontier_phi_77_pred_3 = _3174;
                    frontier_phi_77_pred_4 = _3172;
                    frontier_phi_77_pred_5 = _3173;
                }
                _2959 = frontier_phi_77_pred;
                _2957 = frontier_phi_77_pred_1;
                _2955 = frontier_phi_77_pred_2;
                _2953 = frontier_phi_77_pred_3;
                _2949 = frontier_phi_77_pred_4;
                _2951 = frontier_phi_77_pred_5;
                uint _3107 = _3106 + 1u;
                if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3100 = _2949;
                    _3101 = _2951;
                    _3102 = _2953;
                    _3103 = _2955;
                    _3104 = _2957;
                    _3105 = _2959;
                    _3106 = _3107;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
        }
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.z;
        uint _2965 = (_2963 >> 8u) & 15u;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((4294967295u << _2965) & _2851) == 0u)
        {
            _3068 = _2948;
            _3070 = _2950;
            _3072 = _2952;
            _3074 = _2954;
            _3076 = _2956;
            _3078 = _2958;
        }
        else
        {
            float _3093 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
            float _3094 = _3093 * _1910;
            float _3095 = _3093 * _1911;
            float _3096 = _3093 * _1912;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2965 < ((_2963 >> 12u) & 15u))
            {
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3228 = _2948;
                float _3229 = _2950;
                float _3230 = _2952;
                float _3231 = _2954;
                float _3232 = _2956;
                float _3233 = _2958;
                uint _3234 = _2965;
                uint _3243;
                bool _3244;
                for (;;)
                {
                    _3243 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                    _3244 = _3243 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_3244)
                    {
                        frontier_phi_88_pred = _3229;
                        frontier_phi_88_pred_1 = _3228;
                        frontier_phi_88_pred_2 = _3233;
                        frontier_phi_88_pred_3 = _3232;
                        frontier_phi_88_pred_4 = _3231;
                        frontier_phi_88_pred_5 = _3230;
                    }
                    else
                    {
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3449 = _3228;
                        float _3450 = _3229;
                        float _3451 = _3230;
                        float _3452 = _3231;
                        float _3453 = _3232;
                        float _3454 = _3233;
                        uint _3455 = _3243;
                        uint _3456;
                        vec4 _3481;
                        float _3482;
                        vec4 _3497;
                        vec3 _3509;
                        vec4 _3524;
                        vec4 _3539;
                        float _3585;
                        bool _3586;
                        for (;;)
                        {
                            uint _3466 = ((_3234 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3455));
                            _3456 = (_3455 + 4294967295u) & _3455;
                            uint _3468 = _3466 * 40u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3482 = _3481.w;
                            uint _3484 = (_3466 * 40u) + 4u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3466 * 40u) + 8u;
                            _3509 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x));
                            uint _3511 = (_3466 * 40u) + 16u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3466 * 40u) + 20u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3466 * 40u) + 24u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3560 = (_3466 * 40u) + 28u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3585 = fma(_1912, _3573.z, fma(_1911, _3573.y, _3573.x * _1910)) + _3573.w;
                            _3586 = !((fma(_1912, _3554.z, fma(_1911, _3554.y, _3554.x * _1910)) + _3554.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3586)
                            {
                                float _3613 = _3481.x - _1910;
                                float _3614 = _3481.y - _1911;
                                float _3615 = _3481.z - _1912;
                                float _3616 = dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615));
                                float _3619 = inversesqrt(_3616);
                                float _3620 = _3619 * _3613;
                                float _3621 = _3619 * _3614;
                                float _3622 = _3619 * _3615;
                                float _3626 = 1.0 - (_3616 / (_3482 * _3482));
                                float _4796 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3631 = sqrt(_3616) * _3497.w;
                                float _3633 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                                float _3634 = _3633 * _3633;
                                float _3637 = ((1.0 - _3634) * dot(vec3(_3620, _3621, _3622), vec3(_700, _703, _706))) + _3634;
                                float _3640 = _3631 * _3631;
                                float _3644 = (fma(_1912, _3524.z, fma(_1911, _3524.y, _3524.x * _1910)) + _3524.w) / _3585;
                                float _3645 = (fma(_1912, _3539.z, fma(_1911, _3539.y, _3539.x * _1910)) + _3539.w) / _3585;
                                float _3649 = 1.0 - dot(vec2(_3644, _3645), vec2(_3644, _3645));
                                float _4812 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3651 = _3650 * (((isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0))) * _3627) / ((_3640 * 0.699999988079071044921875) + 1.0));
                                float _3663 = exp2(log2(1.0 / ((_3640 * 3.5) + 5.0)) * 0.25);
                                float _3664 = 1.0 - _820;
                                float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                                float _3672 = _3671 * _3671;
                                float _3673 = _3672 * _3672;
                                float _3674 = _3620 - _3094;
                                float _3675 = _3621 - _3095;
                                float _3676 = _3622 - _3096;
                                float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                                float _3684 = dot(vec3(_700, _703, _706), vec3((-0.0) - _3094, (-0.0) - _3095, (-0.0) - _3096));
                                float _4823 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3688 = dot(vec3(_700, _703, _706), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                                float _4834 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                                float _3696 = _3633 * _3672;
                                float _3697 = _3696 * _3696;
                                float _3703 = ((1.0 - _3697) * dot(vec3(_700, _703, _706), vec3(_3620, _3621, _3622))) + _3697;
                                float _4845 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3705 = 1.0 - _3672;
                                float _3715 = (0.5 / (((_3704 * ((_3687 * _3705) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3704 * _3705) + _3672) * _3687))) * _3704;
                                float _4856 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3725 = (_3650 * _3627) * (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3695 * _3695) * ((_3640 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3725 * _3509.y;
                                frontier_phi_94_pred_1 = _3725 * _3509.x;
                                frontier_phi_94_pred_2 = _3651 * _3497.z;
                                frontier_phi_94_pred_3 = _3651 * _3497.y;
                                frontier_phi_94_pred_4 = _3651 * _3497.x;
                                frontier_phi_94_pred_5 = _3725 * _3509.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3730 = frontier_phi_94_pred;
                            _3729 = frontier_phi_94_pred_1;
                            _3734 = frontier_phi_94_pred_2;
                            _3733 = frontier_phi_94_pred_3;
                            _3732 = frontier_phi_94_pred_4;
                            _3731 = frontier_phi_94_pred_5;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            if (_3456 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3456;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3437;
                        frontier_phi_88_pred_1 = _3436;
                        frontier_phi_88_pred_2 = _3441;
                        frontier_phi_88_pred_3 = _3440;
                        frontier_phi_88_pred_4 = _3439;
                        frontier_phi_88_pred_5 = _3438;
                    }
                    _3071 = frontier_phi_88_pred;
                    _3069 = frontier_phi_88_pred_1;
                    _3079 = frontier_phi_88_pred_2;
                    _3077 = frontier_phi_88_pred_3;
                    _3075 = frontier_phi_88_pred_4;
                    _3073 = frontier_phi_88_pred_5;
                    uint _3235 = _3234 + 1u;
                    if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3228 = _3069;
                        _3229 = _3071;
                        _3230 = _3073;
                        _3231 = _3075;
                        _3232 = _3077;
                        _3233 = _3079;
                        _3234 = _3235;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _3079;
                frontier_phi_69_70_ladder_1 = _3075;
                frontier_phi_69_70_ladder_2 = _3073;
                frontier_phi_69_70_ladder_3 = _3071;
                frontier_phi_69_70_ladder_4 = _3069;
                frontier_phi_69_70_ladder_5 = _3077;
            }
            else
            {
                frontier_phi_69_70_ladder = _2958;
                frontier_phi_69_70_ladder_1 = _2954;
                frontier_phi_69_70_ladder_2 = _2952;
                frontier_phi_69_70_ladder_3 = _2950;
                frontier_phi_69_70_ladder_4 = _2948;
                frontier_phi_69_70_ladder_5 = _2956;
            }
            _3068 = frontier_phi_69_70_ladder_4;
            _3070 = frontier_phi_69_70_ladder_3;
            _3072 = frontier_phi_69_70_ladder_2;
            _3074 = frontier_phi_69_70_ladder_1;
            _3076 = frontier_phi_69_70_ladder_5;
            _3078 = frontier_phi_69_70_ladder;
        }
        float _3083 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2863 = (_3083 * _3074) + _2376;
        _2865 = (_3083 * _3076) + _2378;
        _2867 = (_3083 * _3078) + _2380;
        _2869 = ((_3068 * _789) * _3083) + _2714;
        _2871 = ((_3070 * _791) * _3083) + _2716;
        _2873 = ((_3072 * _792) * _3083) + _2718;
    }
    else
    {
        _2863 = _2376;
        _2865 = _2378;
        _2867 = _2380;
        _2869 = _2714;
        _2871 = _2716;
        _2873 = _2718;
    }
    vec4 _2879 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4872 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4883 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4894 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2903 = (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2863 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _804))) + ((_2869 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + (_2879.x * cbMtdParam._m0[3u].x);
    float _2905 = ((_2879.y * cbMtdParam._m0[3u].x) + ((_2871 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2865 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _804)));
    float _2907 = ((_2879.z * cbMtdParam._m0[3u].x) + ((_2873 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2867 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _804)));
    float _2908 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
    float _2909 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
    float _2910 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    uint _2911 = _732 + 6u;
    float _2919 = _676 / cbSceneParam._m0[86u].x;
    float _2920 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2934 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2936 = _2934.x;
    float _2937 = _2934.y;
    float _2938 = _2934.z;
    float _2939 = _2934.w;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2973 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2974 = _2973 / _595;
        float _2985 = _2974 * _646;
        float _2986 = _647 * _2974;
        float _2987 = (-0.0) - _2986;
        float _2988 = _2974 * _648;
        float _2990 = (cbSceneParam._m0[77u].w * _2987) / _2973;
        float _2991 = _2990 + cbSceneParam._m0[79u].w;
        float _2992 = cbSceneParam._m0[79u].w - _2986;
        float _2998 = sqrt(((_2985 * _2985) + (_2986 * _2986)) + (_2988 * _2988));
        float _3001 = (1.0 - (cbSceneParam._m0[77u].w / _2973)) * _2998;
        float _3006 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3008 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3185;
        if (abs((_2987 - _2990) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3185 = ((((_2991 > 0.0) ? exp2(_3006 * _2991) : (2.0 - exp2(_3008 * _2991))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3001;
        }
        else
        {
            float _3129 = 1.0 / cbSceneParam._m0[80u].x;
            float _3130 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : max(_2991, _2992));
            float _3131 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : min(_2991, _2992));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            _3185 = ((abs(_2998 / _2987) * cbSceneParam._m0[80u].y) * ((((_3140 - _3141) * 2.0) - ((exp2(_3006 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0)))) - exp2(_3006 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))))) * _3129)) - ((exp2(_3008 * _3140) - exp2(_3008 * _3141)) * _3129))) + (_3001 * cbSceneParam._m0[80u].z);
        }
        vec4 _3187 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, 1.0), 0.0);
        float _3196 = exp2((_3185 * (-1.44269502162933349609375)) * (1.0 - _3187.w));
        float _3197 = log2(_3196);
        float _3213 = log2(_2939);
        _3010 = (exp2(_3213 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3197 * cbSceneParam._m0[78u].x)) * _3187.x) / cbSceneParam._m0[78u].x)) + _2936;
        _3012 = (exp2(_3213 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3197 * cbSceneParam._m0[78u].y)) * _3187.y) / cbSceneParam._m0[78u].y)) + _2937;
        _3014 = (exp2(_3213 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3197 * cbSceneParam._m0[78u].z)) * _3187.z) / cbSceneParam._m0[78u].z)) + _2938;
        _3016 = _3196 * _2939;
    }
    else
    {
        _3010 = _2936;
        _3012 = _2937;
        _3014 = _2938;
        _3016 = _2939;
    }
    bool _3223;
    vec4 _3026;
    vec4 _3048;
    float _3050;
    float _3054;
    float _3055;
    float _3056;
    float _3057;
    bool _3067;
    for (;;)
    {
        _3026 = cbMatDynParam._m0[0u];
        float _3028 = roundEven(_3026.y);
        bool _3029 = _3028 == 3.0;
        float _3030 = log2(_3016);
        float _3037 = exp2(_3030 * cbSceneParam._m0[78u].x) * _2908;
        float _3038 = exp2(_3030 * cbSceneParam._m0[78u].y) * _2909;
        float _3039 = exp2(_3030 * cbSceneParam._m0[78u].z) * _2910;
        float _3046 = _662 + (-0.5);
        _3048 = cbMtdParam._m0[1u];
        _3050 = _3048.y * _3046;
        float _3053 = (_3028 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3054 = _3053 * (_3029 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3010)));
        _3055 = _3053 * (_3029 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3012)));
        _3056 = _3053 * (_3029 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3014)));
        _3057 = _3046 * 0.999000012874603271484375;
        _3067 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3067)
        {
            if ((cbInstanceData._m0[_732 + 7u].x + _3057) < 0.5)
            {
                _3223 = true;
                break;
            }
        }
        uint _3164 = _733 + uint(_3026.w);
        if ((cbInstanceData._m0[_3164].w < 1.0) && ((cbInstanceData._m0[_3164].w + _3057) < 0.5))
        {
            _3223 = true;
            break;
        }
        if ((_3050 + 1.0) < _3048.x)
        {
            _3223 = true;
            break;
        }
        _3223 = false;
        break;
    }
    float _3427;
    if (_3223)
    {
        discard_state = true;
        _3427 = 0.0;
    }
    else
    {
        _3427 = cbInstanceData._m0[_2911].w;
    }
    SV_Target.x = _3054;
    SV_Target.y = _3055;
    SV_Target.z = _3056;
    SV_Target.w = _3427;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2911].w;
    discard_exit();
}


