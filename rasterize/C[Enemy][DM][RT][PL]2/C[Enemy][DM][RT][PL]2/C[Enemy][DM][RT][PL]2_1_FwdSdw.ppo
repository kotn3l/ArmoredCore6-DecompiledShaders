#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1160;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _264 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _269 = log2(0.0);
    bool _272 = exp2(_269 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[15u].x;
    _192[0u] = cbMtdParam._m0[15u].y;
    _193[0u] = cbMtdParam._m0[15u].z;
    _191[1u] = cbMtdParam._m0[16u].x;
    _192[1u] = cbMtdParam._m0[16u].y;
    _193[1u] = cbMtdParam._m0[16u].z;
    _191[2u] = cbMtdParam._m0[17u].x;
    _192[2u] = cbMtdParam._m0[17u].y;
    _193[2u] = cbMtdParam._m0[17u].z;
    _191[3u] = cbMtdParam._m0[12u].x;
    _192[3u] = cbMtdParam._m0[12u].y;
    _193[3u] = cbMtdParam._m0[12u].z;
    _191[4u] = cbMtdParam._m0[13u].x;
    _192[4u] = cbMtdParam._m0[13u].y;
    _193[4u] = cbMtdParam._m0[13u].z;
    _191[5u] = cbMtdParam._m0[14u].x;
    _192[5u] = cbMtdParam._m0[14u].y;
    _193[5u] = cbMtdParam._m0[14u].z;
    vec4 _340 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _344 = _340.y;
    float _347 = (_340.x + (-0.02500000037252902984619140625)) * 8.0;
    float _349 = roundEven(_347);
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    uint _353 = uint(int(isnan(5.0) ? _350 : (isnan(_350) ? 5.0 : min(_350, 5.0))));
    float _370;
    if (_272)
    {
        _370 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _370 = cbMtdParam._m0[20u].z;
    }
    float _376;
    float _378;
    if (_272)
    {
        _376 = cbMtdParam._m0[28u].z;
        _378 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _376 = cbMtdParam._m0[24u].x;
        _378 = cbMtdParam._m0[24u].y;
    }
    float _380 = _376 * TEXCOORD.x;
    float _381 = _378 * TEXCOORD.y;
    float _393 = floor(_370);
    vec4 _396 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _380) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _381) + cbTextureTilingScale._m0[8u].w, _393));
    vec4 _418 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _264) + cbTextureTilingScale._m0[0u].w));
    float _426 = ((((((_191[_353] - cbMtdParam._m0[19u].x) * _344) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _396.x) * cbMtdParam._m0[9u].x) * _418.x;
    float _430 = ((((((_192[_353] - cbMtdParam._m0[19u].y) * _344) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _396.y) * cbMtdParam._m0[9u].y) * _418.y;
    float _434 = ((((((_193[_353] - cbMtdParam._m0[19u].z) * _344) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _396.z) * cbMtdParam._m0[9u].z) * _418.z;
    vec4 _446 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _264) + cbTextureTilingScale._m0[1u].w));
    float _450 = _446.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[25u].x;
    _187[0u] = cbMtdParam._m0[25u].y;
    _186[1u] = cbMtdParam._m0[26u].x;
    _187[1u] = cbMtdParam._m0[26u].y;
    _186[2u] = cbMtdParam._m0[26u].z;
    _187[2u] = cbMtdParam._m0[26u].w;
    _186[3u] = cbMtdParam._m0[27u].x;
    _187[3u] = cbMtdParam._m0[27u].y;
    _186[4u] = cbMtdParam._m0[25u].z;
    _187[4u] = cbMtdParam._m0[25u].w;
    float _495 = roundEven(5.0 - _347);
    float _496 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _497 = isnan(4.0) ? _496 : (isnan(_496) ? 4.0 : min(_496, 4.0));
    float _499 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    uint _501 = uint(int(isnan(4.0) ? _499 : (isnan(_499) ? 4.0 : min(_499, 4.0))));
    float _507 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _380) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _381) + cbTextureTilingScale._m0[10u].w, _393)).x + _446.w) + _187[_501];
    vec4 _525 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _380) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _381) + cbTextureTilingScale._m0[9u].w, _393));
    float _532 = (_525.x * 2.0) + (-1.0);
    float _533 = (_525.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3822 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _540 = sqrt(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))));
    float _549 = (cbMtdParam._m0[21u].x * (((_450 * 2.0) * (_525.z + _186[_501])) - _450)) + _450;
    float _553 = (cbMtdParam._m0[21u].y * ((_446.x * 2.0) + (-1.0))) + _532;
    float _554 = (cbMtdParam._m0[21u].y * ((_446.y * 2.0) + (-1.0))) + _533;
    float _557 = fma(_540, _243, fma(_554, _235 * TANGENT.x, (_221 * _213) * _553));
    float _560 = fma(_540, _244, fma(_554, _235 * TANGENT.y, (_221 * _214) * _553));
    float _563 = fma(_540, _245, fma(_554, _235 * TANGENT.z, (_221 * _215) * _553));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3833 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _571 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3855 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3866 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3877 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _575 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _642 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _632);
    float _643 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _632);
    float _644 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _632);
    float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
    float _649 = _642 * _648;
    float _650 = _643 * _648;
    float _651 = _644 * _648;
    float _657 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _658 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _660 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _662 = _660.w;
    float _681 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _684 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _687 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    vec4 _689 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _700 = (((_689.y - _571) + (_689.w * _571)) * cbMtdParam._m0[3u].x) + _571;
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _715 = (_713 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3888 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    vec4 _727 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _732 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _743 = (((_732.x - _575) + (_732.w * _575)) * cbMtdParam._m0[3u].x) + _575;
    float _756 = (cbMtdParam._m0[3u].x * (((_724 * _662) - _724) + _727.x)) + _724;
    float _757 = (cbMtdParam._m0[3u].x * (((_725 * _662) - _725) + _727.y)) + _725;
    float _758 = (cbMtdParam._m0[3u].x * (((_726 * _662) - _726) + _727.z)) + _726;
    float _759 = 1.0 - _743;
    float _760 = _759 * _756;
    float _761 = _759 * _757;
    float _762 = _759 * _758;
    float _767 = (_756 + (-0.039999999105930328369140625)) * _743;
    float _768 = (_757 + (-0.039999999105930328369140625)) * _743;
    float _769 = (_758 + (-0.039999999105930328369140625)) * _743;
    float _770 = _767 + 0.039999999105930328369140625;
    float _772 = _768 + 0.039999999105930328369140625;
    float _773 = _769 + 0.039999999105930328369140625;
    vec4 _782 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _657, cbSceneParam._m0[86u].y * _658));
    float _785 = _782.x * TEXCOORD_4;
    float _786 = dot(vec3(_568, _569, _570), vec3(_649, _650, _651));
    float _789 = _786 * 2.0;
    float _793 = (_789 * _568) - _649;
    float _794 = (_789 * _569) - _650;
    float _795 = (_789 * _570) - _651;
    float _799 = abs(dot(vec3(_649, _650, _651), vec3(_568, _569, _570)));
    float _3921 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _801 = sqrt(_700);
    float _812 = exp2((_801 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_801 * 3.0));
    float _818 = (1.0 - _812) * ((_801 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _819 = _812 * _801;
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1159;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _884 = fma(_855, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847));
        float _888 = fma(_855, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847));
        float _892 = fma(_855, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847));
        float _917 = _847 + _568;
        float _918 = _851 + _569;
        float _919 = _855 + _570;
        float _929 = fma(_919, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917)) - _884;
        float _930 = fma(_919, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917)) - _888;
        float _931 = fma(_919, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917)) - _892;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_884 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_888 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[34u].z) + ((((((_892 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _987 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_953.x + (-0.5));
        float _989 = _987 * (_953.y + (-0.5));
        float _990 = _987 * (_953.z + (-0.5));
        float _997 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_960.x + (-0.5));
        float _999 = _997 * (_960.y + (-0.5));
        float _1000 = _997 * (_960.z + (-0.5));
        float _1007 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_967.x + (-0.5));
        float _1009 = _1007 * (_967.y + (-0.5));
        float _1010 = _1007 * (_967.z + (-0.5));
        float _1017 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_974.x + (-0.5));
        float _1019 = _1017 * (_974.y + (-0.5));
        float _1020 = _1017 * (_974.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1041 = (dot(vec3(_568, _569, _570), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1051 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3969 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1053 + 1.0))) + _1058) * _1021;
        float _1068 = _989 * 0.5;
        float _1069 = _999 * 0.5;
        float _1070 = _1009 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_568, _569, _570), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _4002 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1095 + 1.0))) + _1100) * _1022;
        float _1110 = _990 * 0.5;
        float _1111 = _1000 * 0.5;
        float _1112 = _1010 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_568, _569, _570), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _4035 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1137 + 1.0))) + _1142) * _1023;
        _1159 = _990;
        _1161 = _989;
        _1162 = _988;
        _1163 = _1000;
        _1164 = _999;
        _1165 = _998;
        _1166 = _1010;
        _1167 = _1009;
        _1168 = _1008;
        _1169 = _1023;
        _1170 = _1022;
        _1171 = _1021;
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _1160;
        _1161 = _1160;
        _1162 = _1160;
        _1163 = _1160;
        _1164 = _1160;
        _1165 = _1160;
        _1166 = _1160;
        _1167 = _1160;
        _1168 = _1160;
        _1169 = _1160;
        _1170 = _1160;
        _1171 = _1160;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1200 = fma(_855, cbModelParam._m0[30u].z, fma(_851, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847));
        float _1204 = fma(_855, cbModelParam._m0[31u].z, fma(_851, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847));
        float _1208 = fma(_855, cbModelParam._m0[32u].z, fma(_851, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847));
        float _1231 = _847 + _568;
        float _1232 = _851 + _569;
        float _1233 = _855 + _570;
        float _1243 = fma(_1233, cbModelParam._m0[30u].z, fma(_1232, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231)) - _1200;
        float _1244 = fma(_1233, cbModelParam._m0[31u].z, fma(_1232, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231)) - _1204;
        float _1245 = fma(_1233, cbModelParam._m0[32u].z, fma(_1232, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231)) - _1208;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1200 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1204 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[35u].z) + ((((((_1208 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1299 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1266.x + (-0.5));
        float _1301 = _1299 * (_1266.y + (-0.5));
        float _1302 = _1299 * (_1266.z + (-0.5));
        float _1309 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1273.x + (-0.5));
        float _1311 = _1309 * (_1273.y + (-0.5));
        float _1312 = _1309 * (_1273.z + (-0.5));
        float _1319 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1280.x + (-0.5));
        float _1321 = _1319 * (_1280.y + (-0.5));
        float _1322 = _1319 * (_1280.z + (-0.5));
        float _1329 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1287.x + (-0.5));
        float _1331 = _1329 * (_1287.y + (-0.5));
        float _1332 = _1329 * (_1287.z + (-0.5));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = _1300 * 0.5;
        float _1337 = _1310 * 0.5;
        float _1338 = _1320 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_568, _569, _570), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4098 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1363 + 1.0))) + _1368) * _1333;
        float _1378 = _1301 * 0.5;
        float _1379 = _1311 * 0.5;
        float _1380 = _1321 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_568, _569, _570), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4131 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1405 + 1.0))) + _1410) * _1334;
        float _1420 = _1302 * 0.5;
        float _1421 = _1312 * 0.5;
        float _1422 = _1322 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_568, _569, _570), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4164 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1447 + 1.0))) + _1452) * _1335;
        _1469 = _1302;
        _1470 = _1301;
        _1471 = _1300;
        _1472 = _1312;
        _1473 = _1311;
        _1474 = _1310;
        _1475 = _1322;
        _1476 = _1321;
        _1477 = _1320;
        _1478 = _1335;
        _1479 = _1334;
        _1480 = _1333;
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1160;
        _1470 = _1160;
        _1471 = _1160;
        _1472 = _1160;
        _1473 = _1160;
        _1474 = _1160;
        _1475 = _1160;
        _1476 = _1160;
        _1477 = _1160;
        _1478 = _1160;
        _1479 = _1160;
        _1480 = _1160;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1172)) + _1172;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1173)) + _1173;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1174)) + _1174;
    float _1516 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1493));
    float _1537 = _793 * 0.5;
    float _1538 = _794 * 0.5;
    float _1539 = _795 * 0.5;
    float _1540 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1543 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1546 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1580;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1553 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1159, _1163, _1166, _1169));
        float _1557 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1561 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1568 = dot(vec4(cbModelParam._m0[39u]), vec4(_1537, _1538, _1539, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1591;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1582 = dot(vec4(cbModelParam._m0[40u]), vec4(_1537, _1538, _1539, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1595 = (_1591 * cbModelParam._m0[1u].x) + (_1580 * (1.0 - cbModelParam._m0[1u].x));
    float _1605 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1605 : min(cbModelParam._m0[25u].z, _1605));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_855, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_855, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_855, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_795, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793));
        float _1667 = fma(_795, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793));
        float _1670 = fma(_795, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1698 = frontier_phi_20_18_ladder;
        }
        float _1870;
        if (_1667 > 0.0)
        {
            _1870 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1870 = frontier_phi_29_25_ladder;
        }
        float _2165;
        if (_1670 > 0.0)
        {
            _2165 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2165 = frontier_phi_41_36_ladder;
        }
        float _2167 = isnan(_1870) ? _1698 : (isnan(_1698) ? _1870 : min(_1698, _1870));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1664) + _1653;
        float _2173 = (_2168 * _1667) + _1657;
        float _2174 = (_2168 * _1670) + _1661;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1606);
            frontier_phi_19_41_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_19_41_ladder_2;
        _1688 = frontier_phi_19_41_ladder_1;
        _1690 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_793, _794, _795), _1606);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_855, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_855, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_855, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_795, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793));
        float _1763 = fma(_795, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793));
        float _1766 = fma(_795, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793));
        float _1875;
        if (_1760 > 0.0)
        {
            _1875 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1875 = frontier_phi_31_27_ladder;
        }
        float _2192;
        if (_1763 > 0.0)
        {
            _2192 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2192 = frontier_phi_43_38_ladder;
        }
        float _2530;
        if (_1766 > 0.0)
        {
            _2530 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2530 = frontier_phi_53_50_ladder;
        }
        float _2532 = isnan(_2192) ? _1875 : (isnan(_1875) ? _2192 : min(_1875, _2192));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1760) + _1749;
        float _2538 = (_2533 * _1763) + _1753;
        float _2539 = (_2533 * _1766) + _1757;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_28_53_ladder;
        float frontier_phi_28_53_ladder_1;
        float frontier_phi_28_53_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_28_53_ladder = 0.0;
            frontier_phi_28_53_ladder_1 = 0.0;
            frontier_phi_28_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_28_53_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_28_53_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_28_53_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_28_53_ladder_2;
        _1787 = frontier_phi_28_53_ladder_1;
        _1789 = frontier_phi_28_53_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_793, _794, _795), _1695);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1802 = (((_818 * _770) + _819) * _785) * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1804 = (((_818 * _772) + _819) * _785) * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1806 = (((_818 * _773) + _819) * _785) * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1809 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1862 = _1849 / _1861;
    float _1863 = _1853 / _1861;
    float _1864 = _1857 / _1861;
    float _2011;
    float _2012;
    float _2013;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1891 = ((uint(_1864 > cbSceneParam._m0[59u].y) + uint(_1864 > cbSceneParam._m0[59u].x)) + uint(_1864 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1892 = _1891 + 43u;
        uint _1900 = _1891 + 44u;
        uint _1908 = _1891 + 45u;
        uint _1916 = _1891 + 46u;
        float _1927 = fma(_1861, cbSceneParam._m0[_1892].w, fma(_1857, cbSceneParam._m0[_1892].z, fma(_1853, cbSceneParam._m0[_1892].y, _1849 * cbSceneParam._m0[_1892].x)));
        float _1931 = fma(_1861, cbSceneParam._m0[_1900].w, fma(_1857, cbSceneParam._m0[_1900].z, fma(_1853, cbSceneParam._m0[_1900].y, _1849 * cbSceneParam._m0[_1900].x)));
        float _1939 = fma(_1861, cbSceneParam._m0[_1916].w, fma(_1857, cbSceneParam._m0[_1916].z, fma(_1853, cbSceneParam._m0[_1916].y, _1849 * cbSceneParam._m0[_1916].x)));
        float _1944 = cbSceneParam._m0[33u].z * _1939;
        float _1946 = cbSceneParam._m0[33u].w * _1939;
        float _1949 = fma(_1861, cbSceneParam._m0[_1908].w, fma(_1857, cbSceneParam._m0[_1908].z, fma(_1853, cbSceneParam._m0[_1908].y, _1849 * cbSceneParam._m0[_1908].x))) / _1939;
        float _1997 = (cbSceneParam._m0[33u].x - sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864))) * cbSceneParam._m0[33u].y;
        float _4290 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2004 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 + _1927) / _1939, (_1946 + _1931) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1946 + _1927) / _1939, (_1931 - _1944) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 - _1944) / _1939, (_1931 - _1946) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 - _1946) / _1939, (_1944 + _1931) / _1939), _1949), 0.0)).x), vec4(0.25)));
        _2011 = 1.0 - (_2004 * cbSceneParam._m0[34u].x);
        _2012 = 1.0 - (_2004 * cbSceneParam._m0[34u].y);
        _2013 = 1.0 - (_2004 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2011 = 1.0;
        _2012 = 1.0;
        _2013 = 1.0;
    }
    float _2077;
    float _2079;
    float _2081;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2065 = fma(_1861, cbSceneParam._m0[63u].w, fma(_1857, cbSceneParam._m0[63u].z, fma(_1853, cbSceneParam._m0[63u].y, _1849 * cbSceneParam._m0[63u].x)));
        float _2066 = fma(_1861, cbSceneParam._m0[60u].w, fma(_1857, cbSceneParam._m0[60u].z, fma(_1853, cbSceneParam._m0[60u].y, _1849 * cbSceneParam._m0[60u].x))) / _2065;
        float _2067 = fma(_1861, cbSceneParam._m0[61u].w, fma(_1857, cbSceneParam._m0[61u].z, fma(_1853, cbSceneParam._m0[61u].y, _1849 * cbSceneParam._m0[61u].x))) / _2065;
        float frontier_phi_40_39_ladder;
        float frontier_phi_40_39_ladder_1;
        float frontier_phi_40_39_ladder_2;
        if ((((_2066 >= cbSceneParam._m0[64u].x) && (_2067 >= cbSceneParam._m0[64u].y)) && (_2066 <= cbSceneParam._m0[64u].z)) && (_2067 <= cbSceneParam._m0[64u].w))
        {
            float _2205 = fma(_1861, cbSceneParam._m0[62u].w, fma(_1857, cbSceneParam._m0[62u].z, fma(_1853, cbSceneParam._m0[62u].y, _1849 * cbSceneParam._m0[62u].x))) / _2065;
            float _2209 = isnan(cbSceneParam._m0[41u].w) ? _2205 : (isnan(_2205) ? cbSceneParam._m0[41u].w : max(_2205, cbSceneParam._m0[41u].w));
            float _2252 = (cbSceneParam._m0[33u].x - sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864))) * cbSceneParam._m0[33u].y;
            float _4306 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
            float _2259 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2066, cbSceneParam._m0[33u].w + _2067), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2066, _2067 - cbSceneParam._m0[33u].z), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2066 - cbSceneParam._m0[33u].z, _2067 - cbSceneParam._m0[33u].w), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2066 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2067), _2209), 0.0)).x), vec4(0.25)));
            float _2263 = 1.0 - (_2259 * cbSceneParam._m0[34u].x);
            float _2264 = 1.0 - (_2259 * cbSceneParam._m0[34u].y);
            float _2265 = 1.0 - (_2259 * cbSceneParam._m0[34u].z);
            frontier_phi_40_39_ladder = isnan(_2265) ? _2013 : (isnan(_2013) ? _2265 : min(_2013, _2265));
            frontier_phi_40_39_ladder_1 = isnan(_2264) ? _2012 : (isnan(_2012) ? _2264 : min(_2012, _2264));
            frontier_phi_40_39_ladder_2 = isnan(_2263) ? _2011 : (isnan(_2011) ? _2263 : min(_2011, _2263));
        }
        else
        {
            frontier_phi_40_39_ladder = _2013;
            frontier_phi_40_39_ladder_1 = _2012;
            frontier_phi_40_39_ladder_2 = _2011;
        }
        _2077 = frontier_phi_40_39_ladder_2;
        _2079 = frontier_phi_40_39_ladder_1;
        _2081 = frontier_phi_40_39_ladder;
    }
    else
    {
        _2077 = _2011;
        _2079 = _2012;
        _2081 = _2013;
    }
    uvec4 _2086 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _2088 = _2086.x * 14u;
    uint _2089 = _2088 + 13u;
    float _2096 = _785 + (-1.0);
    float _2101 = (cbLight._m0[_2089].x * _2096) + 1.0;
    float _2102 = (cbLight._m0[_2089].y * _2096) + 1.0;
    float _2103 = (cbLight._m0[_2089].z * _2096) + 1.0;
    float _2104 = (cbLight._m0[_2089].w * _2096) + 1.0;
    uint _2105 = _2088 + 5u;
    float _2111 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2115 = _2088 + 4u;
    float _2124 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2128 = _2088 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_568, _569, _570));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_568, _569, _570));
    float _4342 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4353 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2105].x * _2111) * _2149) + (((cbLight._m0[_2115].x * _2077) * _2124) * _2147);
    float _2157 = ((_2111 * cbLight._m0[_2105].y) * _2149) + (((cbLight._m0[_2115].y * _2079) * _2124) * _2147);
    float _2158 = ((_2111 * cbLight._m0[_2105].z) * _2149) + (((cbLight._m0[_2115].z * _2081) * _2124) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2088 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2164)
    {
        _2266 = _2156;
        _2268 = _2157;
        _2270 = _2158;
    }
    else
    {
        uint _2274 = _2088 + 6u;
        float _2290 = (dot(vec3(cbLight._m0[_2088 + 2u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4364 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2293 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2266 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2156;
        _2268 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2157;
        _2270 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2158;
    }
    bool _2273 = _2162.y == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2273)
    {
        _2328 = _2266;
        _2330 = _2268;
        _2332 = _2270;
    }
    else
    {
        uint _2501 = _2088 + 7u;
        float _2517 = (dot(vec3(cbLight._m0[_2088 + 3u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4380 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2520 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2328 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2266;
        _2330 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2268;
        _2332 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2270;
    }
    uint _2335 = _2088 + 8u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _700) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2088].x + _649;
    float _2351 = cbLight._m0[_2088].y + _650;
    float _2352 = cbLight._m0[_2088].z + _651;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2088].xyz));
    float _4396 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2364 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2365 = dot(vec3(_568, _569, _570), vec3(_2357, _2358, _2359));
    float _4418 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2357, _2358, _2359));
    float _4429 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2349 * _2349;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2386 = 0.959999978542327880859375 - _767;
    float _2388 = 0.959999978542327880859375 - _768;
    float _2389 = 0.959999978542327880859375 - _769;
    float _2396 = 1.0 - _2349;
    float _2407 = (0.5 / (((_2364 * ((_2363 * _2396) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2396) + _2349) * _2363))) * _2363;
    float _4440 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    uint _2423 = _2088 + 9u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _700) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2128].x + _649;
    float _2437 = cbLight._m0[_2128].y + _650;
    float _2438 = cbLight._m0[_2128].z + _651;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2128].xyz));
    float _4451 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2450 = dot(vec3(_568, _569, _570), vec3(_2443, _2444, _2445));
    float _4462 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2443, _2444, _2445));
    float _4473 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2435 * _2435;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
    float _2476 = 1.0 - _2435;
    float _2486 = (0.5 / (((_2364 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2476) + _2435) * _2449))) * _2449;
    float _4484 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    float _2498 = (((((_2469 * _2386) + _770) * cbLight._m0[_2423].x) * _2488) * _2111) + ((((cbLight._m0[_2335].x * _2077) * ((_2385 * _2386) + _770)) * _2409) * _2124);
    float _2499 = (((((_2469 * _2388) + _772) * cbLight._m0[_2423].y) * _2488) * _2111) + ((((cbLight._m0[_2335].y * _2079) * ((_2385 * _2388) + _772)) * _2409) * _2124);
    float _2500 = (((((_2469 * _2389) + _773) * cbLight._m0[_2423].z) * _2488) * _2111) + ((((cbLight._m0[_2335].z * _2081) * ((_2385 * _2389) + _773)) * _2409) * _2124);
    float _2556;
    float _2558;
    float _2560;
    if (_2164)
    {
        _2556 = _2498;
        _2558 = _2499;
        _2560 = _2500;
    }
    else
    {
        uint _2562 = _2088 + 2u;
        uint _2566 = _2088 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _700) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _649;
        float _2583 = cbLight._m0[_2562].y + _650;
        float _2584 = cbLight._m0[_2562].z + _651;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2562].xyz));
        float _4495 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2596 = dot(vec3(_568, _569, _570), vec3(_2589, _2590, _2591));
        float _4506 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4517 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2364 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2622) + _2581) * _2595))) * _2595;
        float _4528 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2556 = (((((_2615 * _2386) + _770) * cbLight._m0[_2566].x) * _2634) * _2635) + _2498;
        _2558 = (((((_2615 * _2388) + _772) * cbLight._m0[_2566].y) * _2634) * _2635) + _2499;
        _2560 = (((((_2615 * _2389) + _773) * cbLight._m0[_2566].z) * _2634) * _2635) + _2500;
    }
    float _2666;
    float _2668;
    float _2670;
    if (_2273)
    {
        _2666 = _2556;
        _2668 = _2558;
        _2670 = _2560;
    }
    else
    {
        uint _2677 = _2088 + 3u;
        uint _2681 = _2088 + 11u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _700) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _649;
        float _2698 = cbLight._m0[_2677].y + _650;
        float _2699 = cbLight._m0[_2677].z + _651;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2677].xyz));
        float _4544 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2711 = dot(vec3(_568, _569, _570), vec3(_2704, _2705, _2706));
        float _4555 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4566 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
        float _2737 = 1.0 - _2696;
        float _2747 = (0.5 / (((_2364 * ((_2710 * _2737) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2737) + _2696) * _2710))) * _2710;
        float _4577 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2749 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2750 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2666 = (((((_2730 * _2386) + _770) * cbLight._m0[_2681].x) * _2749) * _2750) + _2556;
        _2668 = (((((_2730 * _2388) + _772) * cbLight._m0[_2681].y) * _2749) * _2750) + _2558;
        _2670 = (((((_2730 * _2389) + _773) * cbLight._m0[_2681].z) * _2749) * _2750) + _2560;
    }
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_2086.y == 0u)
    {
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.x;
        uint _2783 = uint((float(_2771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _658) / _2772))) + floor(float(uint(cbSceneParam._m0[85u].x * _657) / _2772)));
        float _2793 = (log2(_1864 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2794 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        uint _2797 = uint(isnan(14.0) ? _2794 : (isnan(_2794) ? 14.0 : min(_2794, 14.0)));
        uvec4 _2802 = texelFetch(g_lightClusterGridBuffer, int(((_2797 << 2u) + (_2783 << 6u)) >> 2u));
        uint _2803 = _2802.x;
        uint _2804 = _2771.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2804 >> 4u) & 15u)) + 4294967295u) & _2803) == 0u) || ((_2804 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            uint _3050 = 0u;
            uint _3059;
            bool _3060;
            for (;;)
            {
                _3059 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                _3060 = _3059 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_3060)
                {
                    frontier_phi_72_pred = _3049;
                    frontier_phi_72_pred_1 = _3048;
                    frontier_phi_72_pred_2 = _3047;
                    frontier_phi_72_pred_3 = _3045;
                    frontier_phi_72_pred_4 = _3044;
                    frontier_phi_72_pred_5 = _3046;
                }
                else
                {
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    uint _3174;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3059;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    for (;;)
                    {
                        uint _3178 = uint(findLSB(_3174)) + (_3050 << 5u);
                        uint _3175 = (_3174 + 4294967295u) & _3174;
                        uint _3180 = _3178 * 48u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3200 = (_3178 * 48u) + 4u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3219 = (_3178 * 48u) + 8u;
                        vec3 _3230 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x));
                        float _3234 = _3194.x - _1862;
                        float _3235 = _3194.y - _1863;
                        float _3236 = _3194.z - _1864;
                        float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                        float _3240 = inversesqrt(_3237);
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3244 = dot(vec3(_681, _684, _687), vec3(_3241, _3242, _3243));
                        float _3249 = 1.0 - (_3237 * _3194.w);
                        float _4603 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3251 = sqrt(_3237) * _3213.w;
                        float _3254 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3244) + _3255;
                        float _3261 = _3251 * _3251;
                        float _3265 = ((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3250) / ((_3261 * 0.699999988079071044921875) + 1.0);
                        float _3269 = (-0.0) - _1862;
                        float _3270 = (-0.0) - _1863;
                        float _3271 = (-0.0) - _1864;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3285 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                        float _3286 = 1.0 - _801;
                        float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                        float _3294 = _3293 * _3293;
                        float _3295 = _3294 * _3294;
                        float _3296 = _3276 + _3241;
                        float _3297 = _3277 + _3242;
                        float _3298 = _3278 + _3243;
                        float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                        float _3306 = dot(vec3(_681, _684, _687), vec3(_3276, _3277, _3278));
                        float _4619 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3310 = dot(vec3(_681, _684, _687), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                        float _4630 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3313 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                        float _3318 = _3254 * _3294;
                        float _3319 = _3318 * _3318;
                        float _3322 = ((1.0 - _3319) * _3244) + _3319;
                        float _4641 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3324 = 1.0 - _3294;
                        float _3334 = (0.5 / (((_3323 * ((_3309 * _3324) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3294) * _3309))) * _3323;
                        float _4652 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3345 = (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3317 * _3317) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125))) * _3250;
                        _3103 = (_3265 * _3213.x) + _3171;
                        _3104 = (_3265 * _3213.y) + _3172;
                        _3105 = (_3265 * _3213.z) + _3173;
                        _3100 = (_3345 * _3230.x) + _3168;
                        _3101 = (_3345 * _3230.y) + _3169;
                        _3102 = (_3345 * _3230.z) + _3170;
                        if (_3175 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3175;
                        }
                    }
                    frontier_phi_72_pred = _3105;
                    frontier_phi_72_pred_1 = _3104;
                    frontier_phi_72_pred_2 = _3103;
                    frontier_phi_72_pred_3 = _3101;
                    frontier_phi_72_pred_4 = _3100;
                    frontier_phi_72_pred_5 = _3102;
                }
                _2911 = frontier_phi_72_pred;
                _2909 = frontier_phi_72_pred_1;
                _2907 = frontier_phi_72_pred_2;
                _2903 = frontier_phi_72_pred_3;
                _2901 = frontier_phi_72_pred_4;
                _2905 = frontier_phi_72_pred_5;
                uint _3051 = _3050 + 1u;
                if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3044 = _2901;
                    _3045 = _2903;
                    _3046 = _2905;
                    _3047 = _2907;
                    _3048 = _2909;
                    _3049 = _2911;
                    _3050 = _3051;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((4294967295u << _2917) & _2803) == 0u)
        {
            _3012 = _2900;
            _3014 = _2902;
            _3016 = _2904;
            _3018 = _2906;
            _3020 = _2908;
            _3022 = _2910;
        }
        else
        {
            float _3037 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
            float _3038 = _3037 * _1862;
            float _3039 = _3037 * _1863;
            float _3040 = _3037 * _1864;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3151 = _2900;
                float _3152 = _2902;
                float _3153 = _2904;
                float _3154 = _2906;
                float _3155 = _2908;
                float _3156 = _2910;
                uint _3157 = _2917;
                uint _3166;
                bool _3167;
                for (;;)
                {
                    _3166 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3157 << 2u)) >> 2u)).x;
                    _3167 = _3166 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_3167)
                    {
                        frontier_phi_78_pred = _3151;
                        frontier_phi_78_pred_1 = _3156;
                        frontier_phi_78_pred_2 = _3155;
                        frontier_phi_78_pred_3 = _3154;
                        frontier_phi_78_pred_4 = _3153;
                        frontier_phi_78_pred_5 = _3152;
                    }
                    else
                    {
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        float _3366 = _3154;
                        float _3367 = _3155;
                        float _3368 = _3156;
                        uint _3369 = _3166;
                        uint _3370;
                        vec4 _3395;
                        float _3396;
                        vec4 _3411;
                        vec3 _3423;
                        vec4 _3438;
                        vec4 _3453;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3380 = ((_3157 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3369));
                            _3370 = (_3369 + 4294967295u) & _3369;
                            uint _3382 = _3380 * 40u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.w;
                            uint _3398 = (_3380 * 40u) + 4u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3380 * 40u) + 8u;
                            _3423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x));
                            uint _3425 = (_3380 * 40u) + 16u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3380 * 40u) + 20u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3380 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3380 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_1864, _3487.z, fma(_1863, _3487.y, _3487.x * _1862)) + _3487.w;
                            _3500 = !((fma(_1864, _3468.z, fma(_1863, _3468.y, _3468.x * _1862)) + _3468.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3395.x - _1862;
                                float _3528 = _3395.y - _1863;
                                float _3529 = _3395.z - _1864;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3396 * _3396));
                                float _4663 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3545 = sqrt(_3530) * _3411.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_681, _684, _687))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_1864, _3438.z, fma(_1863, _3438.y, _3438.x * _1862)) + _3438.w) / _3499;
                                float _3559 = (fma(_1864, _3453.z, fma(_1863, _3453.y, _3453.x * _1862)) + _3453.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4679 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _801;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3038;
                                float _3589 = _3535 - _3039;
                                float _3590 = _3536 - _3040;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_681, _684, _687), vec3((-0.0) - _3038, (-0.0) - _3039, (-0.0) - _3040));
                                float _4690 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3602 = dot(vec3(_681, _684, _687), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4701 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_681, _684, _687), vec3(_3534, _3535, _3536))) + _3611;
                                float _4712 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4723 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3565 * _3411.z;
                                frontier_phi_84_pred_1 = _3565 * _3411.y;
                                frontier_phi_84_pred_2 = _3565 * _3411.x;
                                frontier_phi_84_pred_3 = _3639 * _3423.z;
                                frontier_phi_84_pred_4 = _3639 * _3423.y;
                                frontier_phi_84_pred_5 = _3639 * _3423.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_84_pred;
                            _3647 = frontier_phi_84_pred_1;
                            _3646 = frontier_phi_84_pred_2;
                            _3645 = frontier_phi_84_pred_3;
                            _3644 = frontier_phi_84_pred_4;
                            _3643 = frontier_phi_84_pred_5;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            if (_3370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3370;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _3350;
                        frontier_phi_78_pred_1 = _3355;
                        frontier_phi_78_pred_2 = _3354;
                        frontier_phi_78_pred_3 = _3353;
                        frontier_phi_78_pred_4 = _3352;
                        frontier_phi_78_pred_5 = _3351;
                    }
                    _3013 = frontier_phi_78_pred;
                    _3023 = frontier_phi_78_pred_1;
                    _3021 = frontier_phi_78_pred_2;
                    _3019 = frontier_phi_78_pred_3;
                    _3017 = frontier_phi_78_pred_4;
                    _3015 = frontier_phi_78_pred_5;
                    uint _3158 = _3157 + 1u;
                    if (_3158 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3151 = _3013;
                        _3152 = _3015;
                        _3153 = _3017;
                        _3154 = _3019;
                        _3155 = _3021;
                        _3156 = _3023;
                        _3157 = _3158;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _3021;
                frontier_phi_66_67_ladder_1 = _3019;
                frontier_phi_66_67_ladder_2 = _3017;
                frontier_phi_66_67_ladder_3 = _3015;
                frontier_phi_66_67_ladder_4 = _3013;
                frontier_phi_66_67_ladder_5 = _3023;
            }
            else
            {
                frontier_phi_66_67_ladder = _2908;
                frontier_phi_66_67_ladder_1 = _2906;
                frontier_phi_66_67_ladder_2 = _2904;
                frontier_phi_66_67_ladder_3 = _2902;
                frontier_phi_66_67_ladder_4 = _2900;
                frontier_phi_66_67_ladder_5 = _2910;
            }
            _3012 = frontier_phi_66_67_ladder_4;
            _3014 = frontier_phi_66_67_ladder_3;
            _3016 = frontier_phi_66_67_ladder_2;
            _3018 = frontier_phi_66_67_ladder_1;
            _3020 = frontier_phi_66_67_ladder;
            _3022 = frontier_phi_66_67_ladder_5;
        }
        float _3027 = isnan(1.0) ? _785 : (isnan(_785) ? 1.0 : min(_785, 1.0));
        _2815 = (_3027 * _3018) + _2328;
        _2817 = (_3027 * _3020) + _2330;
        _2819 = (_3027 * _3022) + _2332;
        _2821 = ((_3012 * _770) * _3027) + _2666;
        _2823 = ((_3014 * _772) * _3027) + _2668;
        _2825 = ((_3016 * _773) * _3027) + _2670;
    }
    else
    {
        _2815 = _2328;
        _2817 = _2330;
        _2819 = _2332;
        _2821 = _2666;
        _2823 = _2668;
        _2825 = _2670;
    }
    vec4 _2831 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4739 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4750 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4761 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _2855 = (((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2815 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _785))) + ((_2821 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + (_2831.x * cbMtdParam._m0[3u].x);
    float _2857 = ((_2831.y * cbMtdParam._m0[3u].x) + ((_2823 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2817 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _785)));
    float _2859 = ((_2831.z * cbMtdParam._m0[3u].x) + ((_2825 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2819 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _785)));
    uint _2863 = _713 + 6u;
    float _2871 = _657 / cbSceneParam._m0[86u].x;
    float _2872 = _658 / cbSceneParam._m0[86u].y;
    vec4 _2886 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2888 = _2886.x;
    float _2889 = _2886.y;
    float _2890 = _2886.z;
    float _2891 = _2886.w;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2926 = _2925 / _591;
        float _2937 = _2926 * _642;
        float _2938 = _643 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2940 = _2926 * _644;
        float _2942 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2943 = _2942 + cbSceneParam._m0[79u].w;
        float _2944 = cbSceneParam._m0[79u].w - _2938;
        float _2950 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2940 * _2940));
        float _2953 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2950;
        float _2958 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2960 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3113;
        if (abs((_2939 - _2942) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3113 = ((((_2943 > 0.0) ? exp2(_2958 * _2943) : (2.0 - exp2(_2960 * _2943))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2953;
        }
        else
        {
            float _3073 = 1.0 / cbSceneParam._m0[80u].x;
            float _3074 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : max(_2943, _2944));
            float _3075 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : min(_2943, _2944));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            _3113 = ((abs(_2950 / _2939) * cbSceneParam._m0[80u].y) * ((((_3084 - _3085) * 2.0) - ((exp2(_2958 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0)))) - exp2(_2958 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))))) * _3073)) - ((exp2(_2960 * _3084) - exp2(_2960 * _3085)) * _3073))) + (_2953 * cbSceneParam._m0[80u].z);
        }
        vec4 _3115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, 1.0), 0.0);
        float _3124 = exp2((_3113 * (-1.44269502162933349609375)) * (1.0 - _3115.w));
        float _3125 = log2(_3124);
        float _3141 = log2(_2891);
        _2962 = (exp2(_3141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].x)) * _3115.x) / cbSceneParam._m0[78u].x)) + _2888;
        _2964 = (exp2(_3141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].y)) * _3115.y) / cbSceneParam._m0[78u].y)) + _2889;
        _2966 = (exp2(_3141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].z)) * _3115.z) / cbSceneParam._m0[78u].z)) + _2890;
        _2968 = _3124 * _2891;
    }
    else
    {
        _2962 = _2888;
        _2964 = _2889;
        _2966 = _2890;
        _2968 = _2891;
    }
    float _2980 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2981 = _2980 == 3.0;
    float _2982 = log2(_2968);
    float _2989 = exp2(_2982 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)));
    float _2990 = exp2(_2982 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0)));
    float _2991 = exp2(_2982 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0)));
    float _3000 = (_2980 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3000 * (_2981 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.y = _3000 * (_2981 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.z = _3000 * (_2981 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.w = cbInstanceData._m0[_2863].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2863].w;
}


