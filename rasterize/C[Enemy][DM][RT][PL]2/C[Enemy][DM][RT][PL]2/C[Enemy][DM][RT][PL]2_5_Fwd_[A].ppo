#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1094;
float _3503;
float _3504;
float _3505;
float _3506;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _255 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    float _260 = log2(0.0);
    bool _263 = exp2(_260 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _264;
    float _266;
    float _268;
    if (_263)
    {
        _264 = cbMtdParam._m0[19u].x;
        _266 = cbMtdParam._m0[19u].y;
        _268 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _264 = cbMtdParam._m0[18u].x;
        _266 = cbMtdParam._m0[18u].y;
        _268 = cbMtdParam._m0[18u].z;
    }
    float _274;
    if (_263)
    {
        _274 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _274 = cbMtdParam._m0[20u].z;
    }
    float _280;
    float _282;
    if (_263)
    {
        _280 = cbMtdParam._m0[28u].z;
        _282 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _280 = cbMtdParam._m0[24u].x;
        _282 = cbMtdParam._m0[24u].y;
    }
    float _284 = _280 * TEXCOORD.x;
    float _285 = _282 * TEXCOORD.y;
    float _297 = floor(_274);
    vec4 _300 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _284) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _285) + cbTextureTilingScale._m0[8u].w, _297));
    vec4 _323 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    float _332 = (((_264 * cbMtdParam._m0[20u].w) * _300.x) * cbMtdParam._m0[9u].x) * _323.x;
    float _336 = (((_266 * cbMtdParam._m0[20u].w) * _300.y) * cbMtdParam._m0[9u].y) * _323.y;
    float _340 = (((_268 * cbMtdParam._m0[20u].w) * _300.z) * cbMtdParam._m0[9u].z) * _323.z;
    vec4 _352 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _356 = _352.z;
    vec4 _370 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _284) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _285) + cbTextureTilingScale._m0[10u].w, _297));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[27u].z;
    _184[0u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _184[1u] = cbMtdParam._m0[28u].y;
    float _387 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _390 = uint(int(isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0))));
    float _396 = (_370.x + _352.w) + _184[_390];
    vec4 _414 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w, _297));
    float _421 = (_414.x * 2.0) + (-1.0);
    float _422 = (_414.y * 2.0) + (-1.0);
    float _423 = dot(vec2(_421, _422), vec2(_421, _422));
    float _3525 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))));
    float _437 = (cbMtdParam._m0[21u].x * (((_356 * 2.0) * (_414.z + _183[_390])) - _356)) + _356;
    float _441 = (cbMtdParam._m0[21u].y * ((_352.x * 2.0) + (-1.0))) + _421;
    float _442 = (cbMtdParam._m0[21u].y * ((_352.y * 2.0) + (-1.0))) + _422;
    float _445 = fma(_428, _234, fma(_442, _226 * TANGENT.x, (_212 * _204) * _441));
    float _448 = fma(_428, _235, fma(_442, _226 * TANGENT.y, (_212 * _205) * _441));
    float _451 = fma(_428, _236, fma(_442, _226 * TANGENT.z, (_212 * _206) * _441));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    float _456 = _455 * _445;
    float _457 = _455 * _448;
    float _458 = _455 * _451;
    float _3536 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _459 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3558 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3569 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3580 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _463 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    vec4 _544 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _546 = _544.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _774 = sqrt(((_530 * _530) + (_531 * _531)) + (_532 * _532));
        float _780 = (cbMatDynParam._m0[5u].x * _774) + cbMatDynParam._m0[5u].y;
        float _3591 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _785 = (cbMatDynParam._m0[5u].z * _774) + cbMatDynParam._m0[5u].w;
        float _3602 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) - _781)) + _781) < ((_546 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _564 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _566 = _564.w;
    float _586 = fma(_458, cbSceneParam._m0[5u].z, fma(_457, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _456));
    float _589 = fma(_458, cbSceneParam._m0[6u].z, fma(_457, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _456));
    float _592 = fma(_458, cbSceneParam._m0[7u].z, fma(_457, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _456));
    vec4 _594 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _605 = (((_594.y - _459) + (_594.w * _459)) * cbMtdParam._m0[3u].x) + _459;
    uint _618 = uint(roundEven(NORMAL.w)) * 13u;
    uint _620 = _618 + 9u;
    uint _621 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3613 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    vec4 _633 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _638 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _649 = (((_638.x - _463) + (_638.w * _463)) * cbMtdParam._m0[3u].x) + _463;
    float _662 = (cbMtdParam._m0[3u].x * (((_630 * _566) - _630) + _633.x)) + _630;
    float _663 = (cbMtdParam._m0[3u].x * (((_631 * _566) - _631) + _633.y)) + _631;
    float _664 = (cbMtdParam._m0[3u].x * (((_632 * _566) - _632) + _633.z)) + _632;
    float _665 = 1.0 - _649;
    float _666 = _665 * _662;
    float _667 = _665 * _663;
    float _668 = _665 * _664;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _649;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _649;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _649;
    float _676 = _673 + 0.039999999105930328369140625;
    float _678 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    vec4 _688 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _691 = _688.x * TEXCOORD_4;
    float _692 = dot(vec3(_456, _457, _458), vec3(_537, _538, _539));
    float _695 = _692 * 2.0;
    float _699 = (_695 * _456) - _537;
    float _700 = (_695 * _457) - _538;
    float _701 = (_695 * _458) - _539;
    float _705 = abs(dot(vec3(_537, _538, _539), vec3(_456, _457, _458)));
    float _3646 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _707 = sqrt(_605);
    float _720 = exp2((_707 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _726 = (1.0 - _720) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _727 = _720 * _707;
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_763, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755));
        float _822 = fma(_763, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755));
        float _826 = fma(_763, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755));
        float _851 = _755 + _456;
        float _852 = _759 + _457;
        float _853 = _763 + _458;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_456, _457, _458), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3694 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_456, _457, _458), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3727 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_456, _457, _458), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3760 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1137 = fma(_763, cbModelParam._m0[30u].z, fma(_759, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _755));
        float _1141 = fma(_763, cbModelParam._m0[31u].z, fma(_759, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _755));
        float _1145 = fma(_763, cbModelParam._m0[32u].z, fma(_759, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _755));
        float _1168 = _755 + _456;
        float _1169 = _759 + _457;
        float _1170 = _763 + _458;
        float _1180 = fma(_1170, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168)) - _1137;
        float _1181 = fma(_1170, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168)) - _1141;
        float _1182 = fma(_1170, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168)) - _1145;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1137 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1141 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[35u].z) + ((((((_1145 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1236 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1203.x + (-0.5));
        float _1238 = _1236 * (_1203.y + (-0.5));
        float _1239 = _1236 * (_1203.z + (-0.5));
        float _1246 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1210.x + (-0.5));
        float _1248 = _1246 * (_1210.y + (-0.5));
        float _1249 = _1246 * (_1210.z + (-0.5));
        float _1256 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1217.x + (-0.5));
        float _1258 = _1256 * (_1217.y + (-0.5));
        float _1259 = _1256 * (_1217.z + (-0.5));
        float _1266 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1224.x + (-0.5));
        float _1268 = _1266 * (_1224.y + (-0.5));
        float _1269 = _1266 * (_1224.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_456, _457, _458), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3823 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1300 + 1.0))) + _1305) * _1270;
        float _1315 = _1238 * 0.5;
        float _1316 = _1248 * 0.5;
        float _1317 = _1258 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_456, _457, _458), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3856 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1342 + 1.0))) + _1347) * _1271;
        float _1357 = _1239 * 0.5;
        float _1358 = _1249 * 0.5;
        float _1359 = _1259 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_456, _457, _458), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3889 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1384 + 1.0))) + _1389) * _1272;
        _1406 = _1239;
        _1407 = _1238;
        _1408 = _1237;
        _1409 = _1249;
        _1410 = _1248;
        _1411 = _1247;
        _1412 = _1259;
        _1413 = _1258;
        _1414 = _1257;
        _1415 = _1272;
        _1416 = _1271;
        _1417 = _1270;
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = _1094;
        _1415 = _1094;
        _1416 = _1094;
        _1417 = _1094;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1453 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1430));
    float _1474 = _699 * 0.5;
    float _1475 = _700 * 0.5;
    float _1476 = _701 * 0.5;
    float _1477 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1480 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1483 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1490 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1494 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1498 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1505 = dot(vec4(cbModelParam._m0[39u]), vec4(_1474, _1475, _1476, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1474, _1475, _1476, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _605);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1592 = fma(_763, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755)) + cbModelParam._m0[13u].w;
        float _1596 = fma(_763, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755)) + cbModelParam._m0[14u].w;
        float _1600 = fma(_763, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755)) + cbModelParam._m0[15u].w;
        float _1603 = fma(_701, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699));
        float _1606 = fma(_701, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699));
        float _1609 = fma(_701, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699));
        float _1637;
        if (_1603 > 0.0)
        {
            _1637 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1637 = frontier_phi_25_23_ladder;
        }
        float _1841;
        if (_1606 > 0.0)
        {
            _1841 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1841 = frontier_phi_34_30_ladder;
        }
        float _2095;
        if (_1609 > 0.0)
        {
            _2095 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2095 = frontier_phi_46_41_ladder;
        }
        float _2097 = isnan(_1841) ? _1637 : (isnan(_1637) ? _1841 : min(_1637, _1841));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1603) + _1592;
        float _2103 = (_2098 * _1606) + _1596;
        float _2104 = (_2098 * _1609) + _1600;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2105;
        float _2109 = _2105 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 > _2109) || ((_2103 < _2107) || ((_2102 < _2107) || (_2102 > _2109))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2232 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2104, cbModelParam._m0[9u].z, fma(_2103, cbModelParam._m0[9u].y, _2102 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2104, cbModelParam._m0[10u].z, fma(_2103, cbModelParam._m0[10u].y, _2102 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2104, cbModelParam._m0[11u].z, fma(_2103, cbModelParam._m0[11u].y, _2102 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_24_46_ladder = _2232.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2232.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2232.x * cbModelParam._m0[1u].y;
        }
        _1625 = frontier_phi_24_46_ladder_2;
        _1627 = frontier_phi_24_46_ladder_1;
        _1629 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_699, _700, _701), _1543);
        _1625 = _1613.x * cbModelParam._m0[1u].y;
        _1627 = _1613.y * cbModelParam._m0[1u].y;
        _1629 = _1613.z * cbModelParam._m0[1u].y;
    }
    float _1633 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _605);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1633 : min(cbModelParam._m0[25u].w, _1633));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_763, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_763, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_763, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_701, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699));
        float _1701 = fma(_701, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699));
        float _1704 = fma(_701, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699));
        float _1846;
        if (_1698 > 0.0)
        {
            _1846 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1846 = frontier_phi_36_32_ladder;
        }
        float _2122;
        if (_1701 > 0.0)
        {
            _2122 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2122 = frontier_phi_48_43_ladder;
        }
        float _2335;
        if (_1704 > 0.0)
        {
            _2335 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2335 = frontier_phi_57_54_ladder;
        }
        float _2337 = isnan(_2122) ? _1846 : (isnan(_1846) ? _2122 : min(_1846, _2122));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1698) + _1687;
        float _2343 = (_2338 * _1701) + _1691;
        float _2344 = (_2338 * _1704) + _1695;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1634);
            frontier_phi_33_57_ladder = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2560.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2560.z * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_33_57_ladder_1;
        _1725 = frontier_phi_33_57_ladder;
        _1727 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_699, _700, _701), _1634);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1740 = (((_726 * _676) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1723 - _1625)) + _1625);
    float _1742 = (((_726 * _678) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1725 - _1627)) + _1627);
    float _1744 = (((_726 * _679) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1727 - _1629)) + _1629);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    uvec4 _1763 = floatBitsToUint(cbInstanceData._m0[_618 + 5u]);
    uint _1765 = _1763.x * 14u;
    uint _1766 = _1765 + 13u;
    float _1773 = _691 + (-1.0);
    float _1778 = (cbLight._m0[_1766].x * _1773) + 1.0;
    float _1779 = (cbLight._m0[_1766].y * _1773) + 1.0;
    float _1780 = (cbLight._m0[_1766].z * _1773) + 1.0;
    float _1781 = (cbLight._m0[_1766].w * _1773) + 1.0;
    uint _1782 = _1765 + 5u;
    float _1788 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1792 = _1765 + 4u;
    float _1799 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1803 = _1765 | 1u;
    float _1814 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_456, _457, _458));
    float _1817 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_456, _457, _458));
    float _4025 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _4036 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1822 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.3183098733425140380859375;
    float _1824 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.3183098733425140380859375;
    float _1831 = ((cbLight._m0[_1782].x * _1788) * _1824) + ((cbLight._m0[_1792].x * _1799) * _1822);
    float _1832 = ((_1788 * cbLight._m0[_1782].y) * _1824) + ((_1799 * cbLight._m0[_1792].y) * _1822);
    float _1833 = ((_1788 * cbLight._m0[_1782].z) * _1824) + ((_1799 * cbLight._m0[_1792].z) * _1822);
    uvec4 _1838 = floatBitsToUint(cbLight._m0[_1765 + 12u]);
    bool _1840 = _1838.x == 0u;
    float _1851;
    float _1853;
    float _1855;
    if (_1840)
    {
        _1851 = _1831;
        _1853 = _1832;
        _1855 = _1833;
    }
    else
    {
        uint _1859 = _1765 + 6u;
        float _1875 = (dot(vec3(cbLight._m0[_1765 + 2u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _1876 = _1875 * _1875;
        float _4047 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1878 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1851 = (((cbLight._m0[_1859].x * 0.3183098733425140380859375) * _1877) * _1878) + _1831;
        _1853 = (((cbLight._m0[_1859].y * 0.3183098733425140380859375) * _1877) * _1878) + _1832;
        _1855 = (((cbLight._m0[_1859].z * 0.3183098733425140380859375) * _1877) * _1878) + _1833;
    }
    bool _1858 = _1838.y == 0u;
    float _1896;
    float _1898;
    float _1900;
    if (_1858)
    {
        _1896 = _1851;
        _1898 = _1853;
        _1900 = _1855;
    }
    else
    {
        uint _2066 = _1765 + 7u;
        float _2082 = (dot(vec3(cbLight._m0[_1765 + 3u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _4063 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2085 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1896 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _1851;
        _1898 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _1853;
        _1900 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _1855;
    }
    uint _1903 = _1765 + 8u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _605) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1765].x + _537;
    float _1919 = cbLight._m0[_1765].y + _538;
    float _1920 = cbLight._m0[_1765].z + _539;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1765].xyz));
    float _4079 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _1932 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1933 = dot(vec3(_456, _457, _458), vec3(_1925, _1926, _1927));
    float _4101 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _1937 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1925, _1926, _1927));
    float _4112 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = _1917 * _1917;
    float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
    float _1953 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
    float _1954 = 0.959999978542327880859375 - _673;
    float _1956 = 0.959999978542327880859375 - _674;
    float _1957 = 0.959999978542327880859375 - _675;
    float _1964 = 1.0 - _1917;
    float _1975 = (0.5 / (((_1932 * ((_1931 * _1964) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _1964) + _1917) * _1931))) * _1931;
    float _4123 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
    uint _1988 = _1765 + 9u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _605) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1803].x + _537;
    float _2002 = cbLight._m0[_1803].y + _538;
    float _2003 = cbLight._m0[_1803].z + _539;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1803].xyz));
    float _4134 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2015 = dot(vec3(_456, _457, _458), vec3(_2008, _2009, _2010));
    float _4145 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2008, _2009, _2010));
    float _4156 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _2000 * _2000;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2034 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2041 = 1.0 - _2000;
    float _2051 = (0.5 / (((_1932 * ((_2014 * _2041) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _2041) + _2000) * _2014))) * _2014;
    float _4167 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    float _2063 = (((((_2034 * _1954) + _676) * cbLight._m0[_1988].x) * _2053) * _1788) + (((((_1953 * _1954) + _676) * cbLight._m0[_1903].x) * _1977) * _1799);
    float _2064 = (((((_2034 * _1956) + _678) * cbLight._m0[_1988].y) * _2053) * _1788) + (((((_1953 * _1956) + _678) * cbLight._m0[_1903].y) * _1977) * _1799);
    float _2065 = (((((_2034 * _1957) + _679) * cbLight._m0[_1988].z) * _2053) * _1788) + (((((_1953 * _1957) + _679) * cbLight._m0[_1903].z) * _1977) * _1799);
    float _2127;
    float _2129;
    float _2131;
    if (_1840)
    {
        _2127 = _2063;
        _2129 = _2064;
        _2131 = _2065;
    }
    else
    {
        uint _2133 = _1765 + 2u;
        uint _2137 = _1765 + 10u;
        float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _605) * 0.949999988079071044921875);
        float _2152 = _2151 * _2151;
        float _2153 = cbLight._m0[_2133].x + _537;
        float _2154 = cbLight._m0[_2133].y + _538;
        float _2155 = cbLight._m0[_2133].z + _539;
        float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
        float _2160 = _2159 * _2153;
        float _2161 = _2159 * _2154;
        float _2162 = _2159 * _2155;
        float _2163 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2133].xyz));
        float _4178 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2167 = dot(vec3(_456, _457, _458), vec3(_2160, _2161, _2162));
        float _4189 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2171 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2160, _2161, _2162));
        float _4200 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2175 = _2152 * _2152;
        float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
        float _2186 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
        float _2193 = 1.0 - _2152;
        float _2203 = (0.5 / (((_1932 * ((_2166 * _2193) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _2193) + _2152) * _2166))) * _2166;
        float _4211 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2205 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
        float _2206 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2127 = (((((_2186 * _1954) + _676) * cbLight._m0[_2137].x) * _2205) * _2206) + _2063;
        _2129 = (((((_2186 * _1956) + _678) * cbLight._m0[_2137].y) * _2205) * _2206) + _2064;
        _2131 = (((((_2186 * _1957) + _679) * cbLight._m0[_2137].z) * _2205) * _2206) + _2065;
    }
    float _2241;
    float _2243;
    float _2245;
    if (_1858)
    {
        _2241 = _2127;
        _2243 = _2129;
        _2245 = _2131;
    }
    else
    {
        uint _2252 = _1765 + 3u;
        uint _2256 = _1765 + 11u;
        float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _605) * 0.949999988079071044921875);
        float _2271 = _2270 * _2270;
        float _2272 = cbLight._m0[_2252].x + _537;
        float _2273 = cbLight._m0[_2252].y + _538;
        float _2274 = cbLight._m0[_2252].z + _539;
        float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
        float _2279 = _2278 * _2272;
        float _2280 = _2278 * _2273;
        float _2281 = _2278 * _2274;
        float _2282 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2252].xyz));
        float _4227 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2286 = dot(vec3(_456, _457, _458), vec3(_2279, _2280, _2281));
        float _4238 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2290 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2279, _2280, _2281));
        float _4249 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2294 = _2271 * _2271;
        float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
        float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0);
        float _2312 = 1.0 - _2271;
        float _2322 = (0.5 / (((_1932 * ((_2285 * _2312) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _2312) + _2271) * _2285))) * _2285;
        float _4260 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2241 = (((((_2305 * _1954) + _676) * cbLight._m0[_2256].x) * _2324) * _2325) + _2127;
        _2243 = (((((_2305 * _1956) + _678) * cbLight._m0[_2256].y) * _2324) * _2325) + _2129;
        _2245 = (((((_2305 * _1957) + _679) * cbLight._m0[_2256].z) * _2324) * _2325) + _2131;
    }
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_1763.y == 0u)
    {
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2400;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2400;
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2400;
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.x;
        uint _2427 = uint((float(_2415.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2416))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2416)));
        float _2437 = (log2(_2403 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2438 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        uint _2441 = uint(isnan(14.0) ? _2438 : (isnan(_2438) ? 14.0 : min(_2438, 14.0)));
        uvec4 _2446 = texelFetch(g_lightClusterGridBuffer, int(((_2441 << 2u) + (_2427 << 6u)) >> 2u));
        uint _2447 = _2446.x;
        uint _2448 = _2415.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2448 >> 4u) & 15u)) + 4294967295u) & _2447) == 0u) || ((_2448 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2733)
                {
                    frontier_phi_74_pred = _2722;
                    frontier_phi_74_pred_1 = _2721;
                    frontier_phi_74_pred_2 = _2720;
                    frontier_phi_74_pred_3 = _2719;
                    frontier_phi_74_pred_4 = _2718;
                    frontier_phi_74_pred_5 = _2717;
                }
                else
                {
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    uint _2868;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2732;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2872 = uint(findLSB(_2868)) + (_2723 << 5u);
                        uint _2869 = (_2868 + 4294967295u) & _2868;
                        uint _2874 = _2872 * 48u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2894 = (_2872 * 48u) + 4u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2913 = (_2872 * 48u) + 8u;
                        vec3 _2924 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x));
                        float _2928 = _2888.x - _2401;
                        float _2929 = _2888.y - _2402;
                        float _2930 = _2888.z - _2403;
                        float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                        float _2934 = inversesqrt(_2931);
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2938 = dot(vec3(_586, _589, _592), vec3(_2935, _2936, _2937));
                        float _2943 = 1.0 - (_2931 * _2888.w);
                        float _4286 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _2945 = sqrt(_2931) * _2907.w;
                        float _2948 = 1.39999997615814208984375 / (_2945 + 1.39999997615814208984375);
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2938) + _2949;
                        float _2955 = _2945 * _2945;
                        float _2959 = ((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2944) / ((_2955 * 0.699999988079071044921875) + 1.0);
                        float _2963 = (-0.0) - _2401;
                        float _2964 = (-0.0) - _2402;
                        float _2965 = (-0.0) - _2403;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2980 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                        float _2981 = 1.0 - _707;
                        float _2988 = sqrt(1.0 - ((1.0 - (_2981 * _2981)) * (1.0 - (_2980 * _2980))));
                        float _2989 = _2988 * _2988;
                        float _2990 = _2989 * _2989;
                        float _2991 = _2970 + _2935;
                        float _2992 = _2971 + _2936;
                        float _2993 = _2972 + _2937;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _3001 = dot(vec3(_586, _589, _592), vec3(_2970, _2971, _2972));
                        float _4302 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3005 = dot(vec3(_586, _589, _592), vec3(_2997 * _2991, _2997 * _2992, _2997 * _2993));
                        float _4313 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _3012 = ((_3008 * _3008) * (_2990 + (-1.0))) + 1.0;
                        float _3013 = _2948 * _2989;
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _2938) + _3014;
                        float _4324 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3018 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3019 = 1.0 - _2989;
                        float _3029 = (0.5 / (((_3018 * ((_3004 * _3019) + _2989)) + 9.9999999392252902907785028219223e-09) + (((_3018 * _3019) + _2989) * _3004))) * _3018;
                        float _4335 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3040 = (((_2990 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_3012 * _3012) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125))) * _2944;
                        _2792 = (_2959 * _2907.x) + _2865;
                        _2793 = (_2959 * _2907.y) + _2866;
                        _2794 = (_2959 * _2907.z) + _2867;
                        _2789 = (_3040 * _2924.x) + _2862;
                        _2790 = (_3040 * _2924.y) + _2863;
                        _2791 = (_3040 * _2924.z) + _2864;
                        if (_2869 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2869;
                        }
                    }
                    frontier_phi_74_pred = _2794;
                    frontier_phi_74_pred_1 = _2793;
                    frontier_phi_74_pred_2 = _2792;
                    frontier_phi_74_pred_3 = _2791;
                    frontier_phi_74_pred_4 = _2790;
                    frontier_phi_74_pred_5 = _2789;
                }
                _2576 = frontier_phi_74_pred;
                _2574 = frontier_phi_74_pred_1;
                _2572 = frontier_phi_74_pred_2;
                _2570 = frontier_phi_74_pred_3;
                _2568 = frontier_phi_74_pred_4;
                _2566 = frontier_phi_74_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2566;
                    _2718 = _2568;
                    _2719 = _2570;
                    _2720 = _2572;
                    _2721 = _2574;
                    _2722 = _2576;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2582) & _2447) == 0u)
        {
            _2685 = _2565;
            _2687 = _2567;
            _2689 = _2569;
            _2691 = _2571;
            _2693 = _2573;
            _2695 = _2575;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
            float _2711 = _2710 * _2401;
            float _2712 = _2710 * _2402;
            float _2713 = _2710 * _2403;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2845 = _2565;
                float _2846 = _2567;
                float _2847 = _2569;
                float _2848 = _2571;
                float _2849 = _2573;
                float _2850 = _2575;
                uint _2851 = _2582;
                uint _2860;
                bool _2861;
                for (;;)
                {
                    _2860 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                    _2861 = _2860 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2861)
                    {
                        frontier_phi_85_pred = _2849;
                        frontier_phi_85_pred_1 = _2848;
                        frontier_phi_85_pred_2 = _2847;
                        frontier_phi_85_pred_3 = _2846;
                        frontier_phi_85_pred_4 = _2845;
                        frontier_phi_85_pred_5 = _2850;
                    }
                    else
                    {
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        float _3069 = _2847;
                        float _3070 = _2848;
                        float _3071 = _2849;
                        float _3072 = _2850;
                        uint _3073 = _2860;
                        uint _3074;
                        vec4 _3099;
                        float _3100;
                        vec4 _3115;
                        vec3 _3127;
                        vec4 _3143;
                        vec4 _3158;
                        float _3204;
                        bool _3205;
                        for (;;)
                        {
                            uint _3084 = ((_2851 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3073));
                            _3074 = (_3073 + 4294967295u) & _3073;
                            uint _3086 = _3084 * 40u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3100 = _3099.w;
                            uint _3102 = (_3084 * 40u) + 4u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3084 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3130 = (_3084 * 40u) + 16u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3084 * 40u) + 20u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3084 * 40u) + 24u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3179 = (_3084 * 40u) + 28u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            _3204 = fma(_2403, _3192.z, fma(_2402, _3192.y, _3192.x * _2401)) + _3192.w;
                            _3205 = !((fma(_2403, _3173.z, fma(_2402, _3173.y, _3173.x * _2401)) + _3173.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3205)
                            {
                                float _3232 = _3099.x - _2401;
                                float _3233 = _3099.y - _2402;
                                float _3234 = _3099.z - _2403;
                                float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                                float _3238 = inversesqrt(_3235);
                                float _3239 = _3238 * _3232;
                                float _3240 = _3238 * _3233;
                                float _3241 = _3238 * _3234;
                                float _3245 = 1.0 - (_3235 / (_3100 * _3100));
                                float _4346 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3250 = sqrt(_3235) * _3115.w;
                                float _3252 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                                float _3253 = _3252 * _3252;
                                float _3256 = ((1.0 - _3253) * dot(vec3(_3239, _3240, _3241), vec3(_586, _589, _592))) + _3253;
                                float _3259 = _3250 * _3250;
                                float _3263 = (fma(_2403, _3143.z, fma(_2402, _3143.y, _3143.x * _2401)) + _3143.w) / _3204;
                                float _3264 = (fma(_2403, _3158.z, fma(_2402, _3158.y, _3158.x * _2401)) + _3158.w) / _3204;
                                float _3268 = 1.0 - dot(vec2(_3263, _3264), vec2(_3263, _3264));
                                float _4362 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3270 = _3269 * (((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3246) / ((_3259 * 0.699999988079071044921875) + 1.0));
                                float _3282 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                                float _3283 = 1.0 - _707;
                                float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                                float _3291 = _3290 * _3290;
                                float _3292 = _3291 * _3291;
                                float _3293 = _3239 - _2711;
                                float _3294 = _3240 - _2712;
                                float _3295 = _3241 - _2713;
                                float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                                float _3303 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4373 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3307 = dot(vec3(_586, _589, _592), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                                float _4384 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                                float _3315 = _3252 * _3291;
                                float _3316 = _3315 * _3315;
                                float _3322 = ((1.0 - _3316) * dot(vec3(_586, _589, _592), vec3(_3239, _3240, _3241))) + _3316;
                                float _4395 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3324 = 1.0 - _3291;
                                float _3334 = (0.5 / (((_3323 * ((_3306 * _3324) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3291) * _3306))) * _3323;
                                float _4406 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3344 = (_3269 * _3246) * (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3314 * _3314) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3270 * _3115.y;
                                frontier_phi_91_pred_1 = _3270 * _3115.x;
                                frontier_phi_91_pred_2 = _3344 * _3127.z;
                                frontier_phi_91_pred_3 = _3344 * _3127.y;
                                frontier_phi_91_pred_4 = _3344 * _3127.x;
                                frontier_phi_91_pred_5 = _3270 * _3115.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3352 = frontier_phi_91_pred;
                            _3351 = frontier_phi_91_pred_1;
                            _3350 = frontier_phi_91_pred_2;
                            _3349 = frontier_phi_91_pred_3;
                            _3348 = frontier_phi_91_pred_4;
                            _3353 = frontier_phi_91_pred_5;
                            _3057 = _3351 + _3070;
                            _3058 = _3352 + _3071;
                            _3059 = _3353 + _3072;
                            _3054 = _3348 + _3067;
                            _3055 = _3349 + _3068;
                            _3056 = _3350 + _3069;
                            if (_3074 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3074;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3058;
                        frontier_phi_85_pred_1 = _3057;
                        frontier_phi_85_pred_2 = _3056;
                        frontier_phi_85_pred_3 = _3055;
                        frontier_phi_85_pred_4 = _3054;
                        frontier_phi_85_pred_5 = _3059;
                    }
                    _2694 = frontier_phi_85_pred;
                    _2692 = frontier_phi_85_pred_1;
                    _2690 = frontier_phi_85_pred_2;
                    _2688 = frontier_phi_85_pred_3;
                    _2686 = frontier_phi_85_pred_4;
                    _2696 = frontier_phi_85_pred_5;
                    uint _2852 = _2851 + 1u;
                    if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2845 = _2686;
                        _2846 = _2688;
                        _2847 = _2690;
                        _2848 = _2692;
                        _2849 = _2694;
                        _2850 = _2696;
                        _2851 = _2852;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2696;
                frontier_phi_66_67_ladder_1 = _2692;
                frontier_phi_66_67_ladder_2 = _2694;
                frontier_phi_66_67_ladder_3 = _2688;
                frontier_phi_66_67_ladder_4 = _2686;
                frontier_phi_66_67_ladder_5 = _2690;
            }
            else
            {
                frontier_phi_66_67_ladder = _2575;
                frontier_phi_66_67_ladder_1 = _2571;
                frontier_phi_66_67_ladder_2 = _2573;
                frontier_phi_66_67_ladder_3 = _2567;
                frontier_phi_66_67_ladder_4 = _2565;
                frontier_phi_66_67_ladder_5 = _2569;
            }
            _2685 = frontier_phi_66_67_ladder_4;
            _2687 = frontier_phi_66_67_ladder_3;
            _2689 = frontier_phi_66_67_ladder_5;
            _2691 = frontier_phi_66_67_ladder_1;
            _2693 = frontier_phi_66_67_ladder_2;
            _2695 = frontier_phi_66_67_ladder;
        }
        float _2700 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
        _2459 = (_2700 * _2691) + _1896;
        _2461 = (_2700 * _2693) + _1898;
        _2463 = (_2700 * _2695) + _1900;
        _2465 = ((_2685 * _676) * _2700) + _2241;
        _2467 = ((_2687 * _678) * _2700) + _2243;
        _2469 = ((_2689 * _679) * _2700) + _2245;
    }
    else
    {
        _2459 = _1896;
        _2461 = _1898;
        _2463 = _1900;
        _2465 = _2241;
        _2467 = _2243;
        _2469 = _2245;
    }
    vec4 _2475 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4422 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4433 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4444 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2499 = (((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2459 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _691))) + ((_2465 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + (_2475.x * cbMtdParam._m0[3u].x);
    float _2501 = ((_2475.y * cbMtdParam._m0[3u].x) + ((_2467 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2461 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _691)));
    float _2503 = ((_2475.z * cbMtdParam._m0[3u].x) + ((_2469 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2463 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _691)));
    float _2504 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2505 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2506 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    uint _2507 = _618 + 6u;
    float _2515 = _561 / cbSceneParam._m0[86u].x;
    float _2516 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2530 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2532 = _2530.x;
    float _2533 = _2530.y;
    float _2534 = _2530.z;
    float _2535 = _2530.w;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2591 = _2590 / _479;
        float _2602 = _2591 * _530;
        float _2603 = _531 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2605 = _2591 * _532;
        float _2607 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2608 = _2607 + cbSceneParam._m0[79u].w;
        float _2609 = cbSceneParam._m0[79u].w - _2603;
        float _2615 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2605 * _2605));
        float _2618 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2615;
        float _2623 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2625 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2604 - _2607) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2608 > 0.0) ? exp2(_2623 * _2608) : (2.0 - exp2(_2625 * _2608))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2618;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : max(_2608, _2609));
            float _2748 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : min(_2608, _2609));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2802 = ((abs(_2615 / _2604) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2623 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2623 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2625 * _2757) - exp2(_2625 * _2758)) * _2746))) + (_2618 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2535);
        _2627 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2532;
        _2629 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2533;
        _2631 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2534;
        _2633 = _2813 * _2535;
    }
    else
    {
        _2627 = _2532;
        _2629 = _2533;
        _2631 = _2534;
        _2633 = _2535;
    }
    bool _2840;
    vec4 _2643;
    vec4 _2665;
    float _2667;
    float _2671;
    float _2672;
    float _2673;
    float _2674;
    bool _2684;
    for (;;)
    {
        _2643 = cbMatDynParam._m0[0u];
        float _2645 = roundEven(_2643.y);
        bool _2646 = _2645 == 3.0;
        float _2647 = log2(_2633);
        float _2654 = exp2(_2647 * cbSceneParam._m0[78u].x) * _2504;
        float _2655 = exp2(_2647 * cbSceneParam._m0[78u].y) * _2505;
        float _2656 = exp2(_2647 * cbSceneParam._m0[78u].z) * _2506;
        float _2663 = _546 + (-0.5);
        _2665 = cbMtdParam._m0[1u];
        _2667 = _2665.y * _2663;
        float _2670 = (_2645 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2671 = _2670 * (_2646 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2627)));
        _2672 = _2670 * (_2646 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2629)));
        _2673 = _2670 * (_2646 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2631)));
        _2674 = _2663 * 0.999000012874603271484375;
        _2684 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2684)
        {
            if ((cbInstanceData._m0[_618 + 7u].x + _2674) < 0.5)
            {
                _2840 = true;
                break;
            }
        }
        uint _2781 = _620 + uint(_2643.w);
        if ((cbInstanceData._m0[_2781].w < 1.0) && ((cbInstanceData._m0[_2781].w + _2674) < 0.5))
        {
            _2840 = true;
            break;
        }
        if ((_2667 + 1.0) < _2665.x)
        {
            _2840 = true;
            break;
        }
        _2840 = false;
        break;
    }
    float _3045;
    if (_2840)
    {
        discard_state = true;
        _3045 = 0.0;
    }
    else
    {
        _3045 = cbInstanceData._m0[_2507].w;
    }
    SV_Target.x = _2671;
    SV_Target.y = _2672;
    SV_Target.z = _2673;
    SV_Target.w = _3045;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2507].w;
    discard_exit();
}


