#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1049;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _255 = log2(0.0);
    bool _258 = exp2(_255 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _259;
    float _261;
    float _263;
    if (_258)
    {
        _259 = cbMtdParam._m0[19u].x;
        _261 = cbMtdParam._m0[19u].y;
        _263 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _259 = cbMtdParam._m0[18u].x;
        _261 = cbMtdParam._m0[18u].y;
        _263 = cbMtdParam._m0[18u].z;
    }
    float _269;
    if (_258)
    {
        _269 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _269 = cbMtdParam._m0[20u].z;
    }
    float _275;
    float _277;
    if (_258)
    {
        _275 = cbMtdParam._m0[28u].z;
        _277 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _275 = cbMtdParam._m0[24u].x;
        _277 = cbMtdParam._m0[24u].y;
    }
    float _279 = _275 * TEXCOORD.x;
    float _280 = _277 * TEXCOORD.y;
    float _292 = floor(_269);
    vec4 _295 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _279) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _280) + cbTextureTilingScale._m0[8u].w, _292));
    vec4 _318 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = (((_259 * cbMtdParam._m0[20u].w) * _295.x) * cbMtdParam._m0[9u].x) * _318.x;
    float _331 = (((_261 * cbMtdParam._m0[20u].w) * _295.y) * cbMtdParam._m0[9u].y) * _318.y;
    float _335 = (((_263 * cbMtdParam._m0[20u].w) * _295.z) * cbMtdParam._m0[9u].z) * _318.z;
    vec4 _347 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _351 = _347.z;
    vec4 _365 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _279) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _280) + cbTextureTilingScale._m0[10u].w, _292));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[27u].z;
    _184[0u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _184[1u] = cbMtdParam._m0[28u].y;
    float _382 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _385 = uint(int(isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0))));
    float _391 = (_365.x + _347.w) + _184[_385];
    vec4 _409 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _279) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _280) + cbTextureTilingScale._m0[9u].w, _292));
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3697 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    float _433 = (cbMtdParam._m0[21u].x * (((_351 * 2.0) * (_409.z + _183[_385])) - _351)) + _351;
    float _437 = (cbMtdParam._m0[21u].y * ((_347.x * 2.0) + (-1.0))) + _416;
    float _438 = (cbMtdParam._m0[21u].y * ((_347.y * 2.0) + (-1.0))) + _417;
    float _441 = fma(_423, _234, fma(_438, _226 * TANGENT.x, (_212 * _204) * _437));
    float _444 = fma(_423, _235, fma(_438, _226 * TANGENT.y, (_212 * _205) * _437));
    float _447 = fma(_423, _236, fma(_438, _226 * TANGENT.z, (_212 * _206) * _437));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3708 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _455 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3730 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3741 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3752 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _459 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    float _541 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _542 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _544 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _546 = _544.w;
    float _567 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _570 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _573 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    vec4 _575 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _586 = (((_575.y - _455) + (_575.w * _455)) * cbMtdParam._m0[3u].x) + _455;
    uint _599 = uint(roundEven(NORMAL.w)) * 13u;
    uint _602 = (_599 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _608 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_602].x;
    float _609 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_602].y;
    float _610 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_602].z;
    float _3763 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    vec4 _614 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _619 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _630 = (((_619.x - _459) + (_619.w * _459)) * cbMtdParam._m0[3u].x) + _459;
    float _643 = (cbMtdParam._m0[3u].x * (((_611 * _546) - _611) + _614.x)) + _611;
    float _644 = (cbMtdParam._m0[3u].x * (((_612 * _546) - _612) + _614.y)) + _612;
    float _645 = (cbMtdParam._m0[3u].x * (((_613 * _546) - _613) + _614.z)) + _613;
    float _646 = 1.0 - _630;
    float _647 = _646 * _643;
    float _648 = _646 * _644;
    float _649 = _646 * _645;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _630;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _630;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _630;
    float _657 = _654 + 0.039999999105930328369140625;
    float _659 = _655 + 0.039999999105930328369140625;
    float _660 = _656 + 0.039999999105930328369140625;
    vec4 _669 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _541, cbSceneParam._m0[86u].y * _542));
    float _672 = _669.x * TEXCOORD_4;
    float _673 = dot(vec3(_452, _453, _454), vec3(_533, _534, _535));
    float _676 = _673 * 2.0;
    float _680 = (_676 * _452) - _533;
    float _681 = (_676 * _453) - _534;
    float _682 = (_676 * _454) - _535;
    float _686 = abs(dot(vec3(_533, _534, _535), vec3(_452, _453, _454)));
    float _3796 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _688 = sqrt(_586);
    float _701 = exp2((_688 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_688 * 3.0));
    float _707 = (1.0 - _701) * ((_688 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _708 = _701 * _688;
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_744, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736));
        float _777 = fma(_744, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736));
        float _781 = fma(_744, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736));
        float _806 = _736 + _452;
        float _807 = _740 + _453;
        float _808 = _744 + _454;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_452, _453, _454), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3844 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_452, _453, _454), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3877 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_452, _453, _454), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3910 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1089 = fma(_744, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736));
        float _1093 = fma(_744, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736));
        float _1097 = fma(_744, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736));
        float _1120 = _736 + _452;
        float _1121 = _740 + _453;
        float _1122 = _744 + _454;
        float _1132 = fma(_1122, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120)) - _1089;
        float _1133 = fma(_1122, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120)) - _1093;
        float _1134 = fma(_1122, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120)) - _1097;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1089 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1093 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[35u].z) + ((((((_1097 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1188 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1155.x + (-0.5));
        float _1190 = _1188 * (_1155.y + (-0.5));
        float _1191 = _1188 * (_1155.z + (-0.5));
        float _1198 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1162.x + (-0.5));
        float _1200 = _1198 * (_1162.y + (-0.5));
        float _1201 = _1198 * (_1162.z + (-0.5));
        float _1208 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1169.x + (-0.5));
        float _1210 = _1208 * (_1169.y + (-0.5));
        float _1211 = _1208 * (_1169.z + (-0.5));
        float _1218 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1176.x + (-0.5));
        float _1220 = _1218 * (_1176.y + (-0.5));
        float _1221 = _1218 * (_1176.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_452, _453, _454), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3973 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1252 + 1.0))) + _1257) * _1222;
        float _1267 = _1190 * 0.5;
        float _1268 = _1200 * 0.5;
        float _1269 = _1210 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_452, _453, _454), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4006 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1294 + 1.0))) + _1299) * _1223;
        float _1309 = _1191 * 0.5;
        float _1310 = _1201 * 0.5;
        float _1311 = _1211 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_452, _453, _454), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4039 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1336 + 1.0))) + _1341) * _1224;
        _1358 = _1191;
        _1359 = _1190;
        _1360 = _1189;
        _1361 = _1201;
        _1362 = _1200;
        _1363 = _1199;
        _1364 = _1211;
        _1365 = _1210;
        _1366 = _1209;
        _1367 = _1224;
        _1368 = _1223;
        _1369 = _1222;
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1049;
        _1359 = _1049;
        _1360 = _1049;
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1405 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1382));
    float _1426 = _680 * 0.5;
    float _1427 = _681 * 0.5;
    float _1428 = _682 * 0.5;
    float _1429 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1432 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1435 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1469;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1442 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1446 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1450 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1457 = dot(vec4(cbModelParam._m0[39u]), vec4(_1426, _1427, _1428, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1480;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1471 = dot(vec4(cbModelParam._m0[40u]), vec4(_1426, _1427, _1428, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1484 = (_1480 * cbModelParam._m0[1u].x) + (_1469 * (1.0 - cbModelParam._m0[1u].x));
    float _1494 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _586);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1494 : min(cbModelParam._m0[25u].z, _1494));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1544 = fma(_744, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736)) + cbModelParam._m0[13u].w;
        float _1548 = fma(_744, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736)) + cbModelParam._m0[14u].w;
        float _1552 = fma(_744, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736)) + cbModelParam._m0[15u].w;
        float _1555 = fma(_682, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680));
        float _1558 = fma(_682, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680));
        float _1561 = fma(_682, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680));
        float _1589;
        if (_1555 > 0.0)
        {
            _1589 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1589 = frontier_phi_22_20_ladder;
        }
        float _1761;
        if (_1558 > 0.0)
        {
            _1761 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1761 = frontier_phi_31_27_ladder;
        }
        float _2057;
        if (_1561 > 0.0)
        {
            _2057 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2057 = frontier_phi_43_38_ladder;
        }
        float _2059 = isnan(_1761) ? _1589 : (isnan(_1589) ? _1761 : min(_1589, _1761));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1555) + _1544;
        float _2065 = (_2060 * _1558) + _1548;
        float _2066 = (_2060 * _1561) + _1552;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1495);
            frontier_phi_21_43_ladder = _2211.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2211.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2211.x * cbModelParam._m0[1u].y;
        }
        _1577 = frontier_phi_21_43_ladder_2;
        _1579 = frontier_phi_21_43_ladder_1;
        _1581 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_680, _681, _682), _1495);
        _1577 = _1565.x * cbModelParam._m0[1u].y;
        _1579 = _1565.y * cbModelParam._m0[1u].y;
        _1581 = _1565.z * cbModelParam._m0[1u].y;
    }
    float _1585 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _586);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1585 : min(cbModelParam._m0[25u].w, _1585));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_744, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_744, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_744, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_682, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680));
        float _1653 = fma(_682, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680));
        float _1656 = fma(_682, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680));
        float _1766;
        if (_1650 > 0.0)
        {
            _1766 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1766 = frontier_phi_33_29_ladder;
        }
        float _2084;
        if (_1653 > 0.0)
        {
            _2084 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2084 = frontier_phi_45_40_ladder;
        }
        float _2422;
        if (_1656 > 0.0)
        {
            _2422 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2422 = frontier_phi_55_52_ladder;
        }
        float _2424 = isnan(_2084) ? _1766 : (isnan(_1766) ? _2084 : min(_1766, _2084));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1650) + _1639;
        float _2430 = (_2425 * _1653) + _1643;
        float _2431 = (_2425 * _1656) + _1647;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2432;
        float _2435 = _2432 + 1.0;
        float frontier_phi_30_55_ladder;
        float frontier_phi_30_55_ladder_1;
        float frontier_phi_30_55_ladder_2;
        if ((_2431 > _2435) || ((_2431 < _2433) || ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 < _2433) || (_2429 > _2435))))))
        {
            frontier_phi_30_55_ladder = 0.0;
            frontier_phi_30_55_ladder_1 = 0.0;
            frontier_phi_30_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2431, cbModelParam._m0[17u].z, fma(_2430, cbModelParam._m0[17u].y, _2429 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2431, cbModelParam._m0[18u].z, fma(_2430, cbModelParam._m0[18u].y, _2429 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2431, cbModelParam._m0[19u].z, fma(_2430, cbModelParam._m0[19u].y, _2429 * cbModelParam._m0[19u].x))), _1586);
            frontier_phi_30_55_ladder = _2553.z * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_1 = _2553.y * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_2 = _2553.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_30_55_ladder_2;
        _1677 = frontier_phi_30_55_ladder_1;
        _1679 = frontier_phi_30_55_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_680, _681, _682), _1586);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_707 * _657) + _708) * _672) * ((cbModelParam._m0[1u].w * (_1675 - _1577)) + _1577);
    float _1694 = (((_707 * _659) + _708) * _672) * ((cbModelParam._m0[1u].w * (_1677 - _1579)) + _1579);
    float _1696 = (((_707 * _660) + _708) * _672) * ((cbModelParam._m0[1u].w * (_1679 - _1581)) + _1581);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1753 = _1740 / _1752;
    float _1754 = _1744 / _1752;
    float _1755 = _1748 / _1752;
    float _1902;
    float _1903;
    float _1904;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1782 = ((uint(_1755 > cbSceneParam._m0[59u].y) + uint(_1755 > cbSceneParam._m0[59u].x)) + uint(_1755 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1783 = _1782 + 43u;
        uint _1791 = _1782 + 44u;
        uint _1799 = _1782 + 45u;
        uint _1807 = _1782 + 46u;
        float _1818 = fma(_1752, cbSceneParam._m0[_1783].w, fma(_1748, cbSceneParam._m0[_1783].z, fma(_1744, cbSceneParam._m0[_1783].y, _1740 * cbSceneParam._m0[_1783].x)));
        float _1822 = fma(_1752, cbSceneParam._m0[_1791].w, fma(_1748, cbSceneParam._m0[_1791].z, fma(_1744, cbSceneParam._m0[_1791].y, _1740 * cbSceneParam._m0[_1791].x)));
        float _1830 = fma(_1752, cbSceneParam._m0[_1807].w, fma(_1748, cbSceneParam._m0[_1807].z, fma(_1744, cbSceneParam._m0[_1807].y, _1740 * cbSceneParam._m0[_1807].x)));
        float _1835 = cbSceneParam._m0[33u].z * _1830;
        float _1837 = cbSceneParam._m0[33u].w * _1830;
        float _1840 = fma(_1752, cbSceneParam._m0[_1799].w, fma(_1748, cbSceneParam._m0[_1799].z, fma(_1744, cbSceneParam._m0[_1799].y, _1740 * cbSceneParam._m0[_1799].x))) / _1830;
        float _1888 = (cbSceneParam._m0[33u].x - sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755))) * cbSceneParam._m0[33u].y;
        float _4165 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1895 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 + _1818) / _1830, (_1837 + _1822) / _1830), _1840), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1837 + _1818) / _1830, (_1822 - _1835) / _1830), _1840), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1818 - _1835) / _1830, (_1822 - _1837) / _1830), _1840), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1818 - _1837) / _1830, (_1835 + _1822) / _1830), _1840), 0.0)).x), vec4(0.25)));
        _1902 = 1.0 - (_1895 * cbSceneParam._m0[34u].x);
        _1903 = 1.0 - (_1895 * cbSceneParam._m0[34u].y);
        _1904 = 1.0 - (_1895 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1902 = 1.0;
        _1903 = 1.0;
        _1904 = 1.0;
    }
    float _1968;
    float _1970;
    float _1972;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1956 = fma(_1752, cbSceneParam._m0[63u].w, fma(_1748, cbSceneParam._m0[63u].z, fma(_1744, cbSceneParam._m0[63u].y, _1740 * cbSceneParam._m0[63u].x)));
        float _1957 = fma(_1752, cbSceneParam._m0[60u].w, fma(_1748, cbSceneParam._m0[60u].z, fma(_1744, cbSceneParam._m0[60u].y, _1740 * cbSceneParam._m0[60u].x))) / _1956;
        float _1958 = fma(_1752, cbSceneParam._m0[61u].w, fma(_1748, cbSceneParam._m0[61u].z, fma(_1744, cbSceneParam._m0[61u].y, _1740 * cbSceneParam._m0[61u].x))) / _1956;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1957 >= cbSceneParam._m0[64u].x) && (_1958 >= cbSceneParam._m0[64u].y)) && (_1957 <= cbSceneParam._m0[64u].z)) && (_1958 <= cbSceneParam._m0[64u].w))
        {
            float _2097 = fma(_1752, cbSceneParam._m0[62u].w, fma(_1748, cbSceneParam._m0[62u].z, fma(_1744, cbSceneParam._m0[62u].y, _1740 * cbSceneParam._m0[62u].x))) / _1956;
            float _2101 = isnan(cbSceneParam._m0[41u].w) ? _2097 : (isnan(_2097) ? cbSceneParam._m0[41u].w : max(_2097, cbSceneParam._m0[41u].w));
            float _2144 = (cbSceneParam._m0[33u].x - sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755))) * cbSceneParam._m0[33u].y;
            float _4181 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
            float _2151 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1957, cbSceneParam._m0[33u].w + _1958), _2101), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1957, _1958 - cbSceneParam._m0[33u].z), _2101), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1957 - cbSceneParam._m0[33u].z, _1958 - cbSceneParam._m0[33u].w), _2101), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1957 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1958), _2101), 0.0)).x), vec4(0.25)));
            float _2155 = 1.0 - (_2151 * cbSceneParam._m0[34u].x);
            float _2156 = 1.0 - (_2151 * cbSceneParam._m0[34u].y);
            float _2157 = 1.0 - (_2151 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2157) ? _1904 : (isnan(_1904) ? _2157 : min(_1904, _2157));
            frontier_phi_42_41_ladder_1 = isnan(_2156) ? _1903 : (isnan(_1903) ? _2156 : min(_1903, _2156));
            frontier_phi_42_41_ladder_2 = isnan(_2155) ? _1902 : (isnan(_1902) ? _2155 : min(_1902, _2155));
        }
        else
        {
            frontier_phi_42_41_ladder = _1904;
            frontier_phi_42_41_ladder_1 = _1903;
            frontier_phi_42_41_ladder_2 = _1902;
        }
        _1968 = frontier_phi_42_41_ladder_2;
        _1970 = frontier_phi_42_41_ladder_1;
        _1972 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1968 = _1902;
        _1970 = _1903;
        _1972 = _1904;
    }
    uvec4 _1977 = floatBitsToUint(cbInstanceData._m0[_599 + 5u]);
    uint _1979 = _1977.x * 14u;
    uint _1980 = _1979 + 13u;
    float _1987 = _672 + (-1.0);
    float _1992 = (cbLight._m0[_1980].x * _1987) + 1.0;
    float _1993 = (cbLight._m0[_1980].y * _1987) + 1.0;
    float _1994 = (cbLight._m0[_1980].z * _1987) + 1.0;
    float _1995 = (cbLight._m0[_1980].w * _1987) + 1.0;
    uint _1996 = _1979 + 5u;
    float _2002 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2006 = _1979 + 4u;
    float _2016 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2020 = _1979 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_452, _453, _454));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_452, _453, _454));
    float _4217 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4228 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_1996].x * _2002) * _2041) + (((cbLight._m0[_2006].x * _1968) * _2016) * _2039);
    float _2049 = ((_2002 * cbLight._m0[_1996].y) * _2041) + (((cbLight._m0[_2006].y * _1970) * _2016) * _2039);
    float _2050 = ((_2002 * cbLight._m0[_1996].z) * _2041) + (((cbLight._m0[_2006].z * _1972) * _2016) * _2039);
    uvec4 _2054 = floatBitsToUint(cbLight._m0[_1979 + 12u]);
    bool _2056 = _2054.x == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2056)
    {
        _2158 = _2048;
        _2160 = _2049;
        _2162 = _2050;
    }
    else
    {
        uint _2166 = _1979 + 6u;
        float _2182 = (dot(vec3(cbLight._m0[_1979 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2183 = _2182 * _2182;
        float _4239 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2184 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2185 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2158 = (((cbLight._m0[_2166].x * 0.3183098733425140380859375) * _2184) * _2185) + _2048;
        _2160 = (((cbLight._m0[_2166].y * 0.3183098733425140380859375) * _2184) * _2185) + _2049;
        _2162 = (((cbLight._m0[_2166].z * 0.3183098733425140380859375) * _2184) * _2185) + _2050;
    }
    bool _2165 = _2054.y == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2165)
    {
        _2220 = _2158;
        _2222 = _2160;
        _2224 = _2162;
    }
    else
    {
        uint _2393 = _1979 + 7u;
        float _2409 = (dot(vec3(cbLight._m0[_1979 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4255 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2412 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2220 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2158;
        _2222 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2160;
        _2224 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2162;
    }
    uint _2227 = _1979 + 8u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _586) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_1979].x + _533;
    float _2243 = cbLight._m0[_1979].y + _534;
    float _2244 = cbLight._m0[_1979].z + _535;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1979].xyz));
    float _4271 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _2256 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2257 = dot(vec3(_452, _453, _454), vec3(_2249, _2250, _2251));
    float _4293 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2249, _2250, _2251));
    float _4304 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2241 * _2241;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
    float _2278 = 0.959999978542327880859375 - _654;
    float _2280 = 0.959999978542327880859375 - _655;
    float _2281 = 0.959999978542327880859375 - _656;
    float _2288 = 1.0 - _2241;
    float _2299 = (0.5 / (((_2256 * ((_2255 * _2288) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2288) + _2241) * _2255))) * _2255;
    float _4315 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    uint _2315 = _1979 + 9u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _586) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2020].x + _533;
    float _2329 = cbLight._m0[_2020].y + _534;
    float _2330 = cbLight._m0[_2020].z + _535;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2020].xyz));
    float _4326 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2342 = dot(vec3(_452, _453, _454), vec3(_2335, _2336, _2337));
    float _4337 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2335, _2336, _2337));
    float _4348 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2327 * _2327;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
    float _2368 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2256 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2368) + _2327) * _2341))) * _2341;
    float _4359 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    float _2390 = (((((_2361 * _2278) + _657) * cbLight._m0[_2315].x) * _2380) * _2002) + ((((cbLight._m0[_2227].x * _1968) * ((_2277 * _2278) + _657)) * _2301) * _2016);
    float _2391 = (((((_2361 * _2280) + _659) * cbLight._m0[_2315].y) * _2380) * _2002) + ((((cbLight._m0[_2227].y * _1970) * ((_2277 * _2280) + _659)) * _2301) * _2016);
    float _2392 = (((((_2361 * _2281) + _660) * cbLight._m0[_2315].z) * _2380) * _2002) + ((((cbLight._m0[_2227].z * _1972) * ((_2277 * _2281) + _660)) * _2301) * _2016);
    float _2448;
    float _2450;
    float _2452;
    if (_2056)
    {
        _2448 = _2390;
        _2450 = _2391;
        _2452 = _2392;
    }
    else
    {
        uint _2454 = _1979 + 2u;
        uint _2458 = _1979 + 10u;
        float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _586) * 0.949999988079071044921875);
        float _2473 = _2472 * _2472;
        float _2474 = cbLight._m0[_2454].x + _533;
        float _2475 = cbLight._m0[_2454].y + _534;
        float _2476 = cbLight._m0[_2454].z + _535;
        float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
        float _2481 = _2480 * _2474;
        float _2482 = _2480 * _2475;
        float _2483 = _2480 * _2476;
        float _2484 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2454].xyz));
        float _4370 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2488 = dot(vec3(_452, _453, _454), vec3(_2481, _2482, _2483));
        float _4381 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2492 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2481, _2482, _2483));
        float _4392 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2496 = _2473 * _2473;
        float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
        float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
        float _2514 = 1.0 - _2473;
        float _2524 = (0.5 / (((_2256 * ((_2487 * _2514) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2514) + _2473) * _2487))) * _2487;
        float _4403 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2448 = (((((_2507 * _2278) + _657) * cbLight._m0[_2458].x) * _2526) * _2527) + _2390;
        _2450 = (((((_2507 * _2280) + _659) * cbLight._m0[_2458].y) * _2526) * _2527) + _2391;
        _2452 = (((((_2507 * _2281) + _660) * cbLight._m0[_2458].z) * _2526) * _2527) + _2392;
    }
    float _2558;
    float _2560;
    float _2562;
    if (_2165)
    {
        _2558 = _2448;
        _2560 = _2450;
        _2562 = _2452;
    }
    else
    {
        uint _2569 = _1979 + 3u;
        uint _2573 = _1979 + 11u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _586) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _533;
        float _2590 = cbLight._m0[_2569].y + _534;
        float _2591 = cbLight._m0[_2569].z + _535;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2569].xyz));
        float _4419 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2603 = dot(vec3(_452, _453, _454), vec3(_2596, _2597, _2598));
        float _4430 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4441 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2256 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2629) + _2588) * _2602))) * _2602;
        float _4452 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2558 = (((((_2622 * _2278) + _657) * cbLight._m0[_2573].x) * _2641) * _2642) + _2448;
        _2560 = (((((_2622 * _2280) + _659) * cbLight._m0[_2573].y) * _2641) * _2642) + _2450;
        _2562 = (((((_2622 * _2281) + _660) * cbLight._m0[_2573].z) * _2641) * _2642) + _2452;
    }
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_1977.y == 0u)
    {
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.x;
        uint _2675 = uint((float(_2663.y) * floor(float(uint(cbSceneParam._m0[85u].y * _542) / _2664))) + floor(float(uint(cbSceneParam._m0[85u].x * _541) / _2664)));
        float _2685 = (log2(_1755 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2686 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        uint _2689 = uint(isnan(14.0) ? _2686 : (isnan(_2686) ? 14.0 : min(_2686, 14.0)));
        uvec4 _2694 = texelFetch(g_lightClusterGridBuffer, int(((_2689 << 2u) + (_2675 << 6u)) >> 2u));
        uint _2695 = _2694.x;
        uint _2696 = _2663.z;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((((1u << ((_2696 >> 4u) & 15u)) + 4294967295u) & _2695) == 0u) || ((_2696 & 240u) == 0u))
        {
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
        }
        else
        {
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            uint _2942 = 0u;
            uint _2951;
            bool _2952;
            for (;;)
            {
                _2951 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_2942 << 2u)) >> 2u)).x;
                _2952 = _2951 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2952)
                {
                    frontier_phi_74_pred = _2940;
                    frontier_phi_74_pred_1 = _2941;
                    frontier_phi_74_pred_2 = _2939;
                    frontier_phi_74_pred_3 = _2938;
                    frontier_phi_74_pred_4 = _2937;
                    frontier_phi_74_pred_5 = _2936;
                }
                else
                {
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    uint _3066;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2951;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    for (;;)
                    {
                        uint _3070 = uint(findLSB(_3066)) + (_2942 << 5u);
                        uint _3067 = (_3066 + 4294967295u) & _3066;
                        uint _3072 = _3070 * 48u;
                        vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3092 = (_3070 * 48u) + 4u;
                        vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 3u)).x));
                        uint _3111 = (_3070 * 48u) + 8u;
                        vec3 _3122 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x));
                        float _3126 = _3086.x - _1753;
                        float _3127 = _3086.y - _1754;
                        float _3128 = _3086.z - _1755;
                        float _3129 = dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128));
                        float _3132 = inversesqrt(_3129);
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3136 = dot(vec3(_567, _570, _573), vec3(_3133, _3134, _3135));
                        float _3141 = 1.0 - (_3129 * _3086.w);
                        float _4478 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3143 = sqrt(_3129) * _3105.w;
                        float _3146 = 1.39999997615814208984375 / (_3143 + 1.39999997615814208984375);
                        float _3147 = _3146 * _3146;
                        float _3150 = ((1.0 - _3147) * _3136) + _3147;
                        float _3153 = _3143 * _3143;
                        float _3157 = ((isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))) * _3142) / ((_3153 * 0.699999988079071044921875) + 1.0);
                        float _3161 = (-0.0) - _1753;
                        float _3162 = (-0.0) - _1754;
                        float _3163 = (-0.0) - _1755;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3177 = exp2(log2(1.0 / ((_3153 * 3.5) + 5.0)) * 0.25);
                        float _3178 = 1.0 - _688;
                        float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                        float _3186 = _3185 * _3185;
                        float _3187 = _3186 * _3186;
                        float _3188 = _3168 + _3133;
                        float _3189 = _3169 + _3134;
                        float _3190 = _3170 + _3135;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3198 = dot(vec3(_567, _570, _573), vec3(_3168, _3169, _3170));
                        float _4494 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3202 = dot(vec3(_567, _570, _573), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                        float _4505 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                        float _3210 = _3146 * _3186;
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3136) + _3211;
                        float _4516 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3216 = 1.0 - _3186;
                        float _3226 = (0.5 / (((_3215 * ((_3201 * _3216) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3186) * _3201))) * _3215;
                        float _4527 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3237 = (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3209 * _3209) * ((_3153 * 2.1991131305694580078125) + 3.141590118408203125))) * _3142;
                        _2995 = (_3157 * _3105.x) + _3063;
                        _2996 = (_3157 * _3105.y) + _3064;
                        _2997 = (_3157 * _3105.z) + _3065;
                        _2992 = (_3237 * _3122.x) + _3060;
                        _2993 = (_3237 * _3122.y) + _3061;
                        _2994 = (_3237 * _3122.z) + _3062;
                        if (_3067 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _3067;
                        }
                    }
                    frontier_phi_74_pred = _2996;
                    frontier_phi_74_pred_1 = _2997;
                    frontier_phi_74_pred_2 = _2995;
                    frontier_phi_74_pred_3 = _2994;
                    frontier_phi_74_pred_4 = _2993;
                    frontier_phi_74_pred_5 = _2992;
                }
                _2801 = frontier_phi_74_pred;
                _2803 = frontier_phi_74_pred_1;
                _2799 = frontier_phi_74_pred_2;
                _2797 = frontier_phi_74_pred_3;
                _2795 = frontier_phi_74_pred_4;
                _2793 = frontier_phi_74_pred_5;
                uint _2943 = _2942 + 1u;
                if (_2943 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2936 = _2793;
                    _2937 = _2795;
                    _2938 = _2797;
                    _2939 = _2799;
                    _2940 = _2801;
                    _2941 = _2803;
                    _2942 = _2943;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
        }
        uvec4 _2806 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2807 = _2806.z;
        uint _2809 = (_2807 >> 8u) & 15u;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((4294967295u << _2809) & _2695) == 0u)
        {
            _2904 = _2792;
            _2906 = _2794;
            _2908 = _2796;
            _2910 = _2798;
            _2912 = _2800;
            _2914 = _2802;
        }
        else
        {
            float _2929 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
            float _2930 = _2929 * _1753;
            float _2931 = _2929 * _1754;
            float _2932 = _2929 * _1755;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2809 < ((_2807 >> 12u) & 15u))
            {
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _3043 = _2792;
                float _3044 = _2794;
                float _3045 = _2796;
                float _3046 = _2798;
                float _3047 = _2800;
                float _3048 = _2802;
                uint _3049 = _2809;
                uint _3058;
                bool _3059;
                for (;;)
                {
                    _3058 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_3049 << 2u)) >> 2u)).x;
                    _3059 = _3058 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_3059)
                    {
                        frontier_phi_80_pred = _3048;
                        frontier_phi_80_pred_1 = _3047;
                        frontier_phi_80_pred_2 = _3046;
                        frontier_phi_80_pred_3 = _3045;
                        frontier_phi_80_pred_4 = _3043;
                        frontier_phi_80_pred_5 = _3044;
                    }
                    else
                    {
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        float _3259 = _3047;
                        float _3260 = _3048;
                        uint _3261 = _3058;
                        uint _3262;
                        vec4 _3287;
                        float _3288;
                        vec4 _3303;
                        vec3 _3315;
                        vec4 _3331;
                        vec4 _3346;
                        float _3392;
                        bool _3393;
                        for (;;)
                        {
                            uint _3272 = ((_3049 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3261));
                            _3262 = (_3261 + 4294967295u) & _3261;
                            uint _3274 = _3272 * 40u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3288 = _3287.w;
                            uint _3290 = (_3272 * 40u) + 4u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3272 * 40u) + 8u;
                            _3315 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x));
                            uint _3318 = (_3272 * 40u) + 16u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3272 * 40u) + 20u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3272 * 40u) + 24u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3367 = (_3272 * 40u) + 28u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3392 = fma(_1755, _3380.z, fma(_1754, _3380.y, _3380.x * _1753)) + _3380.w;
                            _3393 = !((fma(_1755, _3361.z, fma(_1754, _3361.y, _3361.x * _1753)) + _3361.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_3393)
                            {
                                float _3420 = _3287.x - _1753;
                                float _3421 = _3287.y - _1754;
                                float _3422 = _3287.z - _1755;
                                float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                                float _3426 = inversesqrt(_3423);
                                float _3427 = _3426 * _3420;
                                float _3428 = _3426 * _3421;
                                float _3429 = _3426 * _3422;
                                float _3433 = 1.0 - (_3423 / (_3288 * _3288));
                                float _4538 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3438 = sqrt(_3423) * _3303.w;
                                float _3440 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                                float _3441 = _3440 * _3440;
                                float _3444 = ((1.0 - _3441) * dot(vec3(_3427, _3428, _3429), vec3(_567, _570, _573))) + _3441;
                                float _3447 = _3438 * _3438;
                                float _3451 = (fma(_1755, _3331.z, fma(_1754, _3331.y, _3331.x * _1753)) + _3331.w) / _3392;
                                float _3452 = (fma(_1755, _3346.z, fma(_1754, _3346.y, _3346.x * _1753)) + _3346.w) / _3392;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4554 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3434) / ((_3447 * 0.699999988079071044921875) + 1.0));
                                float _3470 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                                float _3471 = 1.0 - _688;
                                float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                                float _3479 = _3478 * _3478;
                                float _3480 = _3479 * _3479;
                                float _3481 = _3427 - _2930;
                                float _3482 = _3428 - _2931;
                                float _3483 = _3429 - _2932;
                                float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                                float _3491 = dot(vec3(_567, _570, _573), vec3((-0.0) - _2930, (-0.0) - _2931, (-0.0) - _2932));
                                float _4565 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3495 = dot(vec3(_567, _570, _573), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                                float _4576 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                                float _3503 = _3440 * _3479;
                                float _3504 = _3503 * _3503;
                                float _3510 = ((1.0 - _3504) * dot(vec3(_567, _570, _573), vec3(_3427, _3428, _3429))) + _3504;
                                float _4587 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3512 = 1.0 - _3479;
                                float _3522 = (0.5 / (((_3511 * ((_3494 * _3512) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3479) * _3494))) * _3511;
                                float _4598 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3532 = (_3457 * _3434) * (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3502 * _3502) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _3458 * _3303.z;
                                frontier_phi_86_pred_1 = _3458 * _3303.y;
                                frontier_phi_86_pred_2 = _3458 * _3303.x;
                                frontier_phi_86_pred_3 = _3532 * _3315.z;
                                frontier_phi_86_pred_4 = _3532 * _3315.y;
                                frontier_phi_86_pred_5 = _3532 * _3315.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_86_pred;
                            _3540 = frontier_phi_86_pred_1;
                            _3539 = frontier_phi_86_pred_2;
                            _3538 = frontier_phi_86_pred_3;
                            _3537 = frontier_phi_86_pred_4;
                            _3536 = frontier_phi_86_pred_5;
                            _3245 = _3539 + _3258;
                            _3246 = _3540 + _3259;
                            _3247 = _3541 + _3260;
                            _3242 = _3536 + _3255;
                            _3243 = _3537 + _3256;
                            _3244 = _3538 + _3257;
                            if (_3262 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3262;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _3247;
                        frontier_phi_80_pred_1 = _3246;
                        frontier_phi_80_pred_2 = _3245;
                        frontier_phi_80_pred_3 = _3244;
                        frontier_phi_80_pred_4 = _3242;
                        frontier_phi_80_pred_5 = _3243;
                    }
                    _2915 = frontier_phi_80_pred;
                    _2913 = frontier_phi_80_pred_1;
                    _2911 = frontier_phi_80_pred_2;
                    _2909 = frontier_phi_80_pred_3;
                    _2905 = frontier_phi_80_pred_4;
                    _2907 = frontier_phi_80_pred_5;
                    uint _3050 = _3049 + 1u;
                    if (_3050 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3043 = _2905;
                        _3044 = _2907;
                        _3045 = _2909;
                        _3046 = _2911;
                        _3047 = _2913;
                        _3048 = _2915;
                        _3049 = _3050;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2915;
                frontier_phi_68_69_ladder_1 = _2913;
                frontier_phi_68_69_ladder_2 = _2911;
                frontier_phi_68_69_ladder_3 = _2909;
                frontier_phi_68_69_ladder_4 = _2907;
                frontier_phi_68_69_ladder_5 = _2905;
            }
            else
            {
                frontier_phi_68_69_ladder = _2802;
                frontier_phi_68_69_ladder_1 = _2800;
                frontier_phi_68_69_ladder_2 = _2798;
                frontier_phi_68_69_ladder_3 = _2796;
                frontier_phi_68_69_ladder_4 = _2794;
                frontier_phi_68_69_ladder_5 = _2792;
            }
            _2904 = frontier_phi_68_69_ladder_5;
            _2906 = frontier_phi_68_69_ladder_4;
            _2908 = frontier_phi_68_69_ladder_3;
            _2910 = frontier_phi_68_69_ladder_2;
            _2912 = frontier_phi_68_69_ladder_1;
            _2914 = frontier_phi_68_69_ladder;
        }
        float _2919 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _2707 = (_2919 * _2910) + _2220;
        _2709 = (_2919 * _2912) + _2222;
        _2711 = (_2919 * _2914) + _2224;
        _2713 = ((_2904 * _657) * _2919) + _2558;
        _2715 = ((_2906 * _659) * _2919) + _2560;
        _2717 = ((_2908 * _660) * _2919) + _2562;
    }
    else
    {
        _2707 = _2220;
        _2709 = _2222;
        _2711 = _2224;
        _2713 = _2558;
        _2715 = _2560;
        _2717 = _2562;
    }
    vec4 _2723 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4614 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4625 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4636 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _2747 = (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2707 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _672))) + ((_2713 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + (_2723.x * cbMtdParam._m0[3u].x);
    float _2749 = ((_2723.y * cbMtdParam._m0[3u].x) + ((_2715 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2709 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _672)));
    float _2751 = ((_2723.z * cbMtdParam._m0[3u].x) + ((_2717 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2711 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _672)));
    uint _2755 = _599 + 6u;
    float _2763 = _541 / cbSceneParam._m0[86u].x;
    float _2764 = _542 / cbSceneParam._m0[86u].y;
    vec4 _2778 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2780 = _2778.x;
    float _2781 = _2778.y;
    float _2782 = _2778.z;
    float _2783 = _2778.w;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2817 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2818 = _2817 / _475;
        float _2829 = _2818 * _526;
        float _2830 = _527 * _2818;
        float _2831 = (-0.0) - _2830;
        float _2832 = _2818 * _528;
        float _2834 = (cbSceneParam._m0[77u].w * _2831) / _2817;
        float _2835 = _2834 + cbSceneParam._m0[79u].w;
        float _2836 = cbSceneParam._m0[79u].w - _2830;
        float _2842 = sqrt(((_2829 * _2829) + (_2830 * _2830)) + (_2832 * _2832));
        float _2845 = (1.0 - (cbSceneParam._m0[77u].w / _2817)) * _2842;
        float _2850 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2852 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3005;
        if (abs((_2831 - _2834) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3005 = ((((_2835 > 0.0) ? exp2(_2850 * _2835) : (2.0 - exp2(_2852 * _2835))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2845;
        }
        else
        {
            float _2965 = 1.0 / cbSceneParam._m0[80u].x;
            float _2966 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : max(_2835, _2836));
            float _2967 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : min(_2835, _2836));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            _3005 = ((abs(_2842 / _2831) * cbSceneParam._m0[80u].y) * ((((_2976 - _2977) * 2.0) - ((exp2(_2850 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0)))) - exp2(_2850 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))))) * _2965)) - ((exp2(_2852 * _2976) - exp2(_2852 * _2977)) * _2965))) + (_2845 * cbSceneParam._m0[80u].z);
        }
        vec4 _3007 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, 1.0), 0.0);
        float _3016 = exp2((_3005 * (-1.44269502162933349609375)) * (1.0 - _3007.w));
        float _3017 = log2(_3016);
        float _3033 = log2(_2783);
        _2854 = (exp2(_3033 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].x)) * _3007.x) / cbSceneParam._m0[78u].x)) + _2780;
        _2856 = (exp2(_3033 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].y)) * _3007.y) / cbSceneParam._m0[78u].y)) + _2781;
        _2858 = (exp2(_3033 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].z)) * _3007.z) / cbSceneParam._m0[78u].z)) + _2782;
        _2860 = _3016 * _2783;
    }
    else
    {
        _2854 = _2780;
        _2856 = _2781;
        _2858 = _2782;
        _2860 = _2783;
    }
    float _2872 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2873 = _2872 == 3.0;
    float _2874 = log2(_2860);
    float _2881 = exp2(_2874 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)));
    float _2882 = exp2(_2874 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)));
    float _2883 = exp2(_2874 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)));
    float _2892 = (_2872 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2892 * (_2873 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.y = _2892 * (_2873 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.z = _2892 * (_2873 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.w = cbInstanceData._m0[_2755].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2755].w;
}


