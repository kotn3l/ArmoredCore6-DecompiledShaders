#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3525;
float _3526;
float _3527;
float _3528;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _257 = log2(0.0);
    bool _260 = exp2(_257 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _261;
    float _263;
    float _265;
    if (_260)
    {
        _261 = cbMtdParam._m0[19u].x;
        _263 = cbMtdParam._m0[19u].y;
        _265 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _261 = cbMtdParam._m0[18u].x;
        _263 = cbMtdParam._m0[18u].y;
        _265 = cbMtdParam._m0[18u].z;
    }
    float _271;
    if (_260)
    {
        _271 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _271 = cbMtdParam._m0[20u].z;
    }
    float _277;
    float _279;
    if (_260)
    {
        _277 = cbMtdParam._m0[28u].z;
        _279 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _277 = cbMtdParam._m0[24u].x;
        _279 = cbMtdParam._m0[24u].y;
    }
    float _281 = _277 * TEXCOORD.x;
    float _282 = _279 * TEXCOORD.y;
    float _294 = floor(_271);
    vec4 _297 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _281) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _282) + cbTextureTilingScale._m0[8u].w, _294));
    vec4 _320 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = (((_261 * cbMtdParam._m0[20u].w) * _297.x) * cbMtdParam._m0[9u].x) * _320.x;
    float _333 = (((_263 * cbMtdParam._m0[20u].w) * _297.y) * cbMtdParam._m0[9u].y) * _320.y;
    float _337 = (((_265 * cbMtdParam._m0[20u].w) * _297.z) * cbMtdParam._m0[9u].z) * _320.z;
    vec4 _349 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _353 = _349.z;
    vec4 _367 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _281) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _282) + cbTextureTilingScale._m0[10u].w, _294));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[27u].z;
    _186[0u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _186[1u] = cbMtdParam._m0[28u].y;
    float _384 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _387 = uint(int(isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0))));
    float _393 = (_367.x + _349.w) + _186[_387];
    vec4 _411 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _281) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _282) + cbTextureTilingScale._m0[9u].w, _294));
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3547 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))));
    float _435 = (cbMtdParam._m0[21u].x * (((_353 * 2.0) * (_411.z + _185[_387])) - _353)) + _353;
    float _439 = (cbMtdParam._m0[21u].y * ((_349.x * 2.0) + (-1.0))) + _418;
    float _440 = (cbMtdParam._m0[21u].y * ((_349.y * 2.0) + (-1.0))) + _419;
    float _443 = fma(_425, _236, fma(_440, _228 * TANGENT.x, (_214 * _206) * _439));
    float _446 = fma(_425, _237, fma(_440, _228 * TANGENT.y, (_214 * _207) * _439));
    float _449 = fma(_425, _238, fma(_440, _228 * TANGENT.z, (_214 * _208) * _439));
    float _453 = inversesqrt(dot(vec3(_443, _446, _449), vec3(_443, _446, _449)));
    float _454 = _453 * _443;
    float _455 = _453 * _446;
    float _456 = _453 * _449;
    float _3558 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _457 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3580 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3591 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3602 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _461 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    vec4 _542 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _544 = _542.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _772 = sqrt(((_528 * _528) + (_529 * _529)) + (_530 * _530));
        float _778 = (cbMatDynParam._m0[5u].x * _772) + cbMatDynParam._m0[5u].y;
        float _3613 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _783 = (cbMatDynParam._m0[5u].z * _772) + cbMatDynParam._m0[5u].w;
        float _3624 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) - _779)) + _779) < ((_544 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _559 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _560 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _562 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _564 = _562.w;
    float _584 = fma(_456, cbSceneParam._m0[5u].z, fma(_455, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _454));
    float _587 = fma(_456, cbSceneParam._m0[6u].z, fma(_455, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _454));
    float _590 = fma(_456, cbSceneParam._m0[7u].z, fma(_455, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _454));
    vec4 _592 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _603 = (((_592.y - _457) + (_592.w * _457)) * cbMtdParam._m0[3u].x) + _457;
    uint _616 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _616 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3635 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    vec4 _631 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _636 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _647 = (((_636.x - _461) + (_636.w * _461)) * cbMtdParam._m0[3u].x) + _461;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _564) - _628) + _631.x)) + _628;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _564) - _629) + _631.y)) + _629;
    float _662 = (cbMtdParam._m0[3u].x * (((_630 * _564) - _630) + _631.z)) + _630;
    float _663 = 1.0 - _647;
    float _664 = _663 * _660;
    float _665 = _663 * _661;
    float _666 = _663 * _662;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _647;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _647;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _647;
    float _674 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _559, cbSceneParam._m0[86u].y * _560));
    float _689 = _686.x * TEXCOORD_4;
    float _690 = dot(vec3(_454, _455, _456), vec3(_535, _536, _537));
    float _693 = _690 * 2.0;
    float _697 = (_693 * _454) - _535;
    float _698 = (_693 * _455) - _536;
    float _699 = (_693 * _456) - _537;
    float _703 = abs(dot(vec3(_535, _536, _537), vec3(_454, _455, _456)));
    float _3668 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _705 = sqrt(_603);
    float _718 = exp2((_705 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _724 = (1.0 - _718) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _725 = _718 * _705;
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = fma(_761, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753));
        float _820 = fma(_761, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753));
        float _824 = fma(_761, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753));
        float _849 = _753 + _454;
        float _850 = _757 + _455;
        float _851 = _761 + _456;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _816;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _820;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _824;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_816 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_820 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_824 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_454, _455, _456), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3716 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_454, _455, _456), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3749 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_454, _455, _456), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3782 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1135 = fma(_761, cbModelParam._m0[30u].z, fma(_757, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _753));
        float _1139 = fma(_761, cbModelParam._m0[31u].z, fma(_757, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _753));
        float _1143 = fma(_761, cbModelParam._m0[32u].z, fma(_757, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _753));
        float _1166 = _753 + _454;
        float _1167 = _757 + _455;
        float _1168 = _761 + _456;
        float _1178 = fma(_1168, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166)) - _1135;
        float _1179 = fma(_1168, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166)) - _1139;
        float _1180 = fma(_1168, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166)) - _1143;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1135 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1139 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[35u].z) + ((((((_1143 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1234 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1201.x + (-0.5));
        float _1236 = _1234 * (_1201.y + (-0.5));
        float _1237 = _1234 * (_1201.z + (-0.5));
        float _1244 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1208.x + (-0.5));
        float _1246 = _1244 * (_1208.y + (-0.5));
        float _1247 = _1244 * (_1208.z + (-0.5));
        float _1254 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1215.x + (-0.5));
        float _1256 = _1254 * (_1215.y + (-0.5));
        float _1257 = _1254 * (_1215.z + (-0.5));
        float _1264 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1222.x + (-0.5));
        float _1266 = _1264 * (_1222.y + (-0.5));
        float _1267 = _1264 * (_1222.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_454, _455, _456), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3845 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1298 + 1.0))) + _1303) * _1268;
        float _1313 = _1236 * 0.5;
        float _1314 = _1246 * 0.5;
        float _1315 = _1256 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_454, _455, _456), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3878 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1340 + 1.0))) + _1345) * _1269;
        float _1355 = _1237 * 0.5;
        float _1356 = _1247 * 0.5;
        float _1357 = _1257 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_454, _455, _456), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3911 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1382 + 1.0))) + _1387) * _1270;
        _1404 = _1237;
        _1405 = _1236;
        _1406 = _1235;
        _1407 = _1247;
        _1408 = _1246;
        _1409 = _1245;
        _1410 = _1257;
        _1411 = _1256;
        _1412 = _1255;
        _1413 = _1270;
        _1414 = _1269;
        _1415 = _1268;
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = _1092;
        _1413 = _1092;
        _1414 = _1092;
        _1415 = _1092;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1451 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1428));
    float _1472 = _697 * 0.5;
    float _1473 = _698 * 0.5;
    float _1474 = _699 * 0.5;
    float _1475 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1478 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1481 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1488 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1492 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1496 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1503 = dot(vec4(cbModelParam._m0[39u]), vec4(_1472, _1473, _1474, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1472, _1473, _1474, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _603);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1590 = fma(_761, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753)) + cbModelParam._m0[13u].w;
        float _1594 = fma(_761, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753)) + cbModelParam._m0[14u].w;
        float _1598 = fma(_761, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753)) + cbModelParam._m0[15u].w;
        float _1601 = fma(_699, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697));
        float _1604 = fma(_699, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697));
        float _1607 = fma(_699, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697));
        float _1635;
        if (_1601 > 0.0)
        {
            _1635 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1635 = frontier_phi_25_23_ladder;
        }
        float _1860;
        if (_1604 > 0.0)
        {
            _1860 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1860 = frontier_phi_34_30_ladder;
        }
        float _2117;
        if (_1607 > 0.0)
        {
            _2117 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2117 = frontier_phi_46_41_ladder;
        }
        float _2119 = isnan(_1860) ? _1635 : (isnan(_1635) ? _1860 : min(_1635, _1860));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1601) + _1590;
        float _2125 = (_2120 * _1604) + _1594;
        float _2126 = (_2120 * _1607) + _1598;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_24_46_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1623 = frontier_phi_24_46_ladder_2;
        _1625 = frontier_phi_24_46_ladder_1;
        _1627 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_697, _698, _699), _1541);
        _1623 = _1611.x * cbModelParam._m0[1u].y;
        _1625 = _1611.y * cbModelParam._m0[1u].y;
        _1627 = _1611.z * cbModelParam._m0[1u].y;
    }
    float _1631 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _603);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1631 : min(cbModelParam._m0[25u].w, _1631));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1685 = fma(_761, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753)) + cbModelParam._m0[21u].w;
        float _1689 = fma(_761, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753)) + cbModelParam._m0[22u].w;
        float _1693 = fma(_761, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753)) + cbModelParam._m0[23u].w;
        float _1696 = fma(_699, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697));
        float _1699 = fma(_699, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697));
        float _1702 = fma(_699, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697));
        float _1865;
        if (_1696 > 0.0)
        {
            _1865 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1865 = frontier_phi_36_32_ladder;
        }
        float _2144;
        if (_1699 > 0.0)
        {
            _2144 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2144 = frontier_phi_48_43_ladder;
        }
        float _2357;
        if (_1702 > 0.0)
        {
            _2357 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2357 = frontier_phi_57_54_ladder;
        }
        float _2359 = isnan(_2144) ? _1865 : (isnan(_1865) ? _2144 : min(_1865, _2144));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1696) + _1685;
        float _2365 = (_2360 * _1699) + _1689;
        float _2366 = (_2360 * _1702) + _1693;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2366, cbModelParam._m0[17u].z, fma(_2365, cbModelParam._m0[17u].y, _2364 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2366, cbModelParam._m0[18u].z, fma(_2365, cbModelParam._m0[18u].y, _2364 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2366, cbModelParam._m0[19u].z, fma(_2365, cbModelParam._m0[19u].y, _2364 * cbModelParam._m0[19u].x))), _1632);
            frontier_phi_33_57_ladder = _2582.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2582.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2582.z * cbModelParam._m0[1u].z;
        }
        _1721 = frontier_phi_33_57_ladder_1;
        _1723 = frontier_phi_33_57_ladder;
        _1725 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_697, _698, _699), _1632);
        _1721 = _1705.x * cbModelParam._m0[1u].z;
        _1723 = _1705.y * cbModelParam._m0[1u].z;
        _1725 = _1705.z * cbModelParam._m0[1u].z;
    }
    float _1738 = (((_724 * _674) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1721 - _1623)) + _1623);
    float _1740 = (((_724 * _676) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1723 - _1625)) + _1625);
    float _1742 = (((_724 * _677) + _725) * _689) * ((cbModelParam._m0[1u].w * (_1725 - _1627)) + _1627);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1738 * cbSceneParam._m0[91u].x));
    vec4 _1759 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_559, _560));
    float _1761 = _1759.w;
    float _1773 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1761);
    float _1774 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1761);
    float _1775 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1761);
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_616 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _689 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1818 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1822 = _1781 | 1u;
    float _1833 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_454, _455, _456));
    float _1836 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_454, _455, _456));
    float _4047 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _4058 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1841 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
    float _1843 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1850 = ((cbLight._m0[_1798].x * _1804) * _1843) + (((cbLight._m0[_1808].x * _1773) * _1818) * _1841);
    float _1851 = ((_1804 * cbLight._m0[_1798].y) * _1843) + (((cbLight._m0[_1808].y * _1774) * _1818) * _1841);
    float _1852 = ((_1804 * cbLight._m0[_1798].z) * _1843) + (((cbLight._m0[_1808].z * _1775) * _1818) * _1841);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1859)
    {
        _1870 = _1850;
        _1872 = _1851;
        _1874 = _1852;
    }
    else
    {
        uint _1878 = _1781 + 6u;
        float _1894 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _4069 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1897 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1870 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1850;
        _1872 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1851;
        _1874 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1852;
    }
    bool _1877 = _1857.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1877)
    {
        _1915 = _1870;
        _1917 = _1872;
        _1919 = _1874;
    }
    else
    {
        uint _2088 = _1781 + 7u;
        float _2104 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4085 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2107 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1915 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1870;
        _1917 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1872;
        _1919 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1874;
    }
    uint _1922 = _1781 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _603) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1781].x + _535;
    float _1938 = cbLight._m0[_1781].y + _536;
    float _1939 = cbLight._m0[_1781].z + _537;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1781].xyz));
    float _4101 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1951 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _1952 = dot(vec3(_454, _455, _456), vec3(_1944, _1945, _1946));
    float _4123 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1944, _1945, _1946));
    float _4134 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _1973 = 0.959999978542327880859375 - _671;
    float _1975 = 0.959999978542327880859375 - _672;
    float _1976 = 0.959999978542327880859375 - _673;
    float _1983 = 1.0 - _1936;
    float _1994 = (0.5 / (((_1951 * ((_1950 * _1983) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1983) + _1936) * _1950))) * _1950;
    float _4145 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2010 = _1781 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _603) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1822].x + _535;
    float _2024 = cbLight._m0[_1822].y + _536;
    float _2025 = cbLight._m0[_1822].z + _537;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1822].xyz));
    float _4156 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2037 = dot(vec3(_454, _455, _456), vec3(_2030, _2031, _2032));
    float _4167 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2030, _2031, _2032));
    float _4178 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
    float _2063 = 1.0 - _2022;
    float _2073 = (0.5 / (((_1951 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2063) + _2022) * _2036))) * _2036;
    float _4189 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2085 = (((((_2056 * _1973) + _674) * cbLight._m0[_2010].x) * _2075) * _1804) + ((((cbLight._m0[_1922].x * _1773) * ((_1972 * _1973) + _674)) * _1996) * _1818);
    float _2086 = (((((_2056 * _1975) + _676) * cbLight._m0[_2010].y) * _2075) * _1804) + ((((cbLight._m0[_1922].y * _1774) * ((_1972 * _1975) + _676)) * _1996) * _1818);
    float _2087 = (((((_2056 * _1976) + _677) * cbLight._m0[_2010].z) * _2075) * _1804) + ((((cbLight._m0[_1922].z * _1775) * ((_1972 * _1976) + _677)) * _1996) * _1818);
    float _2149;
    float _2151;
    float _2153;
    if (_1859)
    {
        _2149 = _2085;
        _2151 = _2086;
        _2153 = _2087;
    }
    else
    {
        uint _2155 = _1781 + 2u;
        uint _2159 = _1781 + 10u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _603) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _535;
        float _2176 = cbLight._m0[_2155].y + _536;
        float _2177 = cbLight._m0[_2155].z + _537;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2155].xyz));
        float _4200 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2189 = dot(vec3(_454, _455, _456), vec3(_2182, _2183, _2184));
        float _4211 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4222 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2208 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
        float _2215 = 1.0 - _2174;
        float _2225 = (0.5 / (((_1951 * ((_2188 * _2215) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2215) + _2174) * _2188))) * _2188;
        float _4233 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2149 = (((((_2208 * _1973) + _674) * cbLight._m0[_2159].x) * _2227) * _2228) + _2085;
        _2151 = (((((_2208 * _1975) + _676) * cbLight._m0[_2159].y) * _2227) * _2228) + _2086;
        _2153 = (((((_2208 * _1976) + _677) * cbLight._m0[_2159].z) * _2227) * _2228) + _2087;
    }
    float _2263;
    float _2265;
    float _2267;
    if (_1877)
    {
        _2263 = _2149;
        _2265 = _2151;
        _2267 = _2153;
    }
    else
    {
        uint _2274 = _1781 + 3u;
        uint _2278 = _1781 + 11u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _603) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _535;
        float _2295 = cbLight._m0[_2274].y + _536;
        float _2296 = cbLight._m0[_2274].z + _537;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2274].xyz));
        float _4249 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2308 = dot(vec3(_454, _455, _456), vec3(_2301, _2302, _2303));
        float _4260 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4271 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
        float _2334 = 1.0 - _2293;
        float _2344 = (0.5 / (((_1951 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2334) + _2293) * _2307))) * _2307;
        float _4282 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2263 = (((((_2327 * _1973) + _674) * cbLight._m0[_2278].x) * _2346) * _2347) + _2149;
        _2265 = (((((_2327 * _1975) + _676) * cbLight._m0[_2278].y) * _2346) * _2347) + _2151;
        _2267 = (((((_2327 * _1976) + _677) * cbLight._m0[_2278].z) * _2346) * _2347) + _2153;
    }
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_1779.y == 0u)
    {
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2422;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2422;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2422;
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.x;
        uint _2449 = uint((float(_2437.y) * floor(float(uint(cbSceneParam._m0[85u].y * _560) / _2438))) + floor(float(uint(cbSceneParam._m0[85u].x * _559) / _2438)));
        float _2459 = (log2(_2425 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2460 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        uint _2463 = uint(isnan(14.0) ? _2460 : (isnan(_2460) ? 14.0 : min(_2460, 14.0)));
        uvec4 _2468 = texelFetch(g_lightClusterGridBuffer, int(((_2463 << 2u) + (_2449 << 6u)) >> 2u));
        uint _2469 = _2468.x;
        uint _2470 = _2437.z;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        if (((((1u << ((_2470 >> 4u) & 15u)) + 4294967295u) & _2469) == 0u) || ((_2470 & 240u) == 0u))
        {
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
        }
        else
        {
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            uint _2745 = 0u;
            uint _2754;
            bool _2755;
            for (;;)
            {
                _2754 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                _2755 = _2754 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2755)
                {
                    frontier_phi_74_pred = _2744;
                    frontier_phi_74_pred_1 = _2743;
                    frontier_phi_74_pred_2 = _2742;
                    frontier_phi_74_pred_3 = _2741;
                    frontier_phi_74_pred_4 = _2740;
                    frontier_phi_74_pred_5 = _2739;
                }
                else
                {
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    uint _2890;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2754;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    for (;;)
                    {
                        uint _2894 = uint(findLSB(_2890)) + (_2745 << 5u);
                        uint _2891 = (_2890 + 4294967295u) & _2890;
                        uint _2896 = _2894 * 48u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2916 = (_2894 * 48u) + 4u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2935 = (_2894 * 48u) + 8u;
                        vec3 _2946 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x));
                        float _2950 = _2910.x - _2423;
                        float _2951 = _2910.y - _2424;
                        float _2952 = _2910.z - _2425;
                        float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                        float _2956 = inversesqrt(_2953);
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2960 = dot(vec3(_584, _587, _590), vec3(_2957, _2958, _2959));
                        float _2965 = 1.0 - (_2953 * _2910.w);
                        float _4308 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _2967 = sqrt(_2953) * _2929.w;
                        float _2970 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2960) + _2971;
                        float _2977 = _2967 * _2967;
                        float _2981 = ((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2966) / ((_2977 * 0.699999988079071044921875) + 1.0);
                        float _2985 = (-0.0) - _2423;
                        float _2986 = (-0.0) - _2424;
                        float _2987 = (-0.0) - _2425;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _3002 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _705;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_584, _587, _590), vec3(_2992, _2993, _2994));
                        float _4324 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3027 = dot(vec3(_584, _587, _590), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4335 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2970 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2960) + _3036;
                        float _4346 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4357 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3062 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3034 * _3034) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125))) * _2966;
                        _2814 = (_2981 * _2929.x) + _2887;
                        _2815 = (_2981 * _2929.y) + _2888;
                        _2816 = (_2981 * _2929.z) + _2889;
                        _2811 = (_3062 * _2946.x) + _2884;
                        _2812 = (_3062 * _2946.y) + _2885;
                        _2813 = (_3062 * _2946.z) + _2886;
                        if (_2891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2891;
                        }
                    }
                    frontier_phi_74_pred = _2816;
                    frontier_phi_74_pred_1 = _2815;
                    frontier_phi_74_pred_2 = _2814;
                    frontier_phi_74_pred_3 = _2813;
                    frontier_phi_74_pred_4 = _2812;
                    frontier_phi_74_pred_5 = _2811;
                }
                _2598 = frontier_phi_74_pred;
                _2596 = frontier_phi_74_pred_1;
                _2594 = frontier_phi_74_pred_2;
                _2592 = frontier_phi_74_pred_3;
                _2590 = frontier_phi_74_pred_4;
                _2588 = frontier_phi_74_pred_5;
                uint _2746 = _2745 + 1u;
                if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2739 = _2588;
                    _2740 = _2590;
                    _2741 = _2592;
                    _2742 = _2594;
                    _2743 = _2596;
                    _2744 = _2598;
                    _2745 = _2746;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
        }
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.z;
        uint _2604 = (_2602 >> 8u) & 15u;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((4294967295u << _2604) & _2469) == 0u)
        {
            _2707 = _2587;
            _2709 = _2589;
            _2711 = _2591;
            _2713 = _2593;
            _2715 = _2595;
            _2717 = _2597;
        }
        else
        {
            float _2732 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
            float _2733 = _2732 * _2423;
            float _2734 = _2732 * _2424;
            float _2735 = _2732 * _2425;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2604 < ((_2602 >> 12u) & 15u))
            {
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2867 = _2587;
                float _2868 = _2589;
                float _2869 = _2591;
                float _2870 = _2593;
                float _2871 = _2595;
                float _2872 = _2597;
                uint _2873 = _2604;
                uint _2882;
                bool _2883;
                for (;;)
                {
                    _2882 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                    _2883 = _2882 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2883)
                    {
                        frontier_phi_85_pred = _2871;
                        frontier_phi_85_pred_1 = _2870;
                        frontier_phi_85_pred_2 = _2869;
                        frontier_phi_85_pred_3 = _2868;
                        frontier_phi_85_pred_4 = _2867;
                        frontier_phi_85_pred_5 = _2872;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        uint _3095 = _2882;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3180;
                        float _3226;
                        bool _3227;
                        for (;;)
                        {
                            uint _3106 = ((_2873 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3106 * 40u) + 20u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3106 * 40u) + 24u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3201 = (_3106 * 40u) + 28u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3226 = fma(_2425, _3214.z, fma(_2424, _3214.y, _3214.x * _2423)) + _3214.w;
                            _3227 = !((fma(_2425, _3195.z, fma(_2424, _3195.y, _3195.x * _2423)) + _3195.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3227)
                            {
                                float _3254 = _3121.x - _2423;
                                float _3255 = _3121.y - _2424;
                                float _3256 = _3121.z - _2425;
                                float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                                float _3260 = inversesqrt(_3257);
                                float _3261 = _3260 * _3254;
                                float _3262 = _3260 * _3255;
                                float _3263 = _3260 * _3256;
                                float _3267 = 1.0 - (_3257 / (_3122 * _3122));
                                float _4368 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3272 = sqrt(_3257) * _3137.w;
                                float _3274 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                                float _3275 = _3274 * _3274;
                                float _3278 = ((1.0 - _3275) * dot(vec3(_3261, _3262, _3263), vec3(_584, _587, _590))) + _3275;
                                float _3281 = _3272 * _3272;
                                float _3285 = (fma(_2425, _3165.z, fma(_2424, _3165.y, _3165.x * _2423)) + _3165.w) / _3226;
                                float _3286 = (fma(_2425, _3180.z, fma(_2424, _3180.y, _3180.x * _2423)) + _3180.w) / _3226;
                                float _3290 = 1.0 - dot(vec2(_3285, _3286), vec2(_3285, _3286));
                                float _4384 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3292 = _3291 * (((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3268) / ((_3281 * 0.699999988079071044921875) + 1.0));
                                float _3304 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                                float _3305 = 1.0 - _705;
                                float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                                float _3313 = _3312 * _3312;
                                float _3314 = _3313 * _3313;
                                float _3315 = _3261 - _2733;
                                float _3316 = _3262 - _2734;
                                float _3317 = _3263 - _2735;
                                float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                                float _3325 = dot(vec3(_584, _587, _590), vec3((-0.0) - _2733, (-0.0) - _2734, (-0.0) - _2735));
                                float _4395 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3329 = dot(vec3(_584, _587, _590), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                                float _4406 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3332 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                                float _3337 = _3274 * _3313;
                                float _3338 = _3337 * _3337;
                                float _3344 = ((1.0 - _3338) * dot(vec3(_584, _587, _590), vec3(_3261, _3262, _3263))) + _3338;
                                float _4417 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3346 = 1.0 - _3313;
                                float _3356 = (0.5 / (((_3345 * ((_3328 * _3346) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3313) * _3328))) * _3345;
                                float _4428 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3366 = (_3291 * _3268) * (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3336 * _3336) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3292 * _3137.y;
                                frontier_phi_91_pred_1 = _3292 * _3137.x;
                                frontier_phi_91_pred_2 = _3366 * _3149.z;
                                frontier_phi_91_pred_3 = _3366 * _3149.y;
                                frontier_phi_91_pred_4 = _3366 * _3149.x;
                                frontier_phi_91_pred_5 = _3292 * _3137.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3374 = frontier_phi_91_pred;
                            _3373 = frontier_phi_91_pred_1;
                            _3372 = frontier_phi_91_pred_2;
                            _3371 = frontier_phi_91_pred_3;
                            _3370 = frontier_phi_91_pred_4;
                            _3375 = frontier_phi_91_pred_5;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            _3076 = _3370 + _3089;
                            _3077 = _3371 + _3090;
                            _3078 = _3372 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3080;
                        frontier_phi_85_pred_1 = _3079;
                        frontier_phi_85_pred_2 = _3078;
                        frontier_phi_85_pred_3 = _3077;
                        frontier_phi_85_pred_4 = _3076;
                        frontier_phi_85_pred_5 = _3081;
                    }
                    _2716 = frontier_phi_85_pred;
                    _2714 = frontier_phi_85_pred_1;
                    _2712 = frontier_phi_85_pred_2;
                    _2710 = frontier_phi_85_pred_3;
                    _2708 = frontier_phi_85_pred_4;
                    _2718 = frontier_phi_85_pred_5;
                    uint _2874 = _2873 + 1u;
                    if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2867 = _2708;
                        _2868 = _2710;
                        _2869 = _2712;
                        _2870 = _2714;
                        _2871 = _2716;
                        _2872 = _2718;
                        _2873 = _2874;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2718;
                frontier_phi_66_67_ladder_1 = _2714;
                frontier_phi_66_67_ladder_2 = _2716;
                frontier_phi_66_67_ladder_3 = _2710;
                frontier_phi_66_67_ladder_4 = _2708;
                frontier_phi_66_67_ladder_5 = _2712;
            }
            else
            {
                frontier_phi_66_67_ladder = _2597;
                frontier_phi_66_67_ladder_1 = _2593;
                frontier_phi_66_67_ladder_2 = _2595;
                frontier_phi_66_67_ladder_3 = _2589;
                frontier_phi_66_67_ladder_4 = _2587;
                frontier_phi_66_67_ladder_5 = _2591;
            }
            _2707 = frontier_phi_66_67_ladder_4;
            _2709 = frontier_phi_66_67_ladder_3;
            _2711 = frontier_phi_66_67_ladder_5;
            _2713 = frontier_phi_66_67_ladder_1;
            _2715 = frontier_phi_66_67_ladder_2;
            _2717 = frontier_phi_66_67_ladder;
        }
        float _2722 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
        _2481 = (_2722 * _2713) + _1915;
        _2483 = (_2722 * _2715) + _1917;
        _2485 = (_2722 * _2717) + _1919;
        _2487 = ((_2707 * _674) * _2722) + _2263;
        _2489 = ((_2709 * _676) * _2722) + _2265;
        _2491 = ((_2711 * _677) * _2722) + _2267;
    }
    else
    {
        _2481 = _1915;
        _2483 = _1917;
        _2485 = _1919;
        _2487 = _2263;
        _2489 = _2265;
        _2491 = _2267;
    }
    vec4 _2497 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4444 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4455 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4466 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2521 = (((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2481 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _689))) + ((_2487 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + (_2497.x * cbMtdParam._m0[3u].x);
    float _2523 = ((_2497.y * cbMtdParam._m0[3u].x) + ((_2489 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2483 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _689)));
    float _2525 = ((_2497.z * cbMtdParam._m0[3u].x) + ((_2491 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2485 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _689)));
    float _2526 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2527 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2528 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    uint _2529 = _616 + 6u;
    float _2537 = _559 / cbSceneParam._m0[86u].x;
    float _2538 = _560 / cbSceneParam._m0[86u].y;
    vec4 _2552 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2554 = _2552.x;
    float _2555 = _2552.y;
    float _2556 = _2552.z;
    float _2557 = _2552.w;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2612 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2613 = _2612 / _477;
        float _2624 = _2613 * _528;
        float _2625 = _529 * _2613;
        float _2626 = (-0.0) - _2625;
        float _2627 = _2613 * _530;
        float _2629 = (cbSceneParam._m0[77u].w * _2626) / _2612;
        float _2630 = _2629 + cbSceneParam._m0[79u].w;
        float _2631 = cbSceneParam._m0[79u].w - _2625;
        float _2637 = sqrt(((_2624 * _2624) + (_2625 * _2625)) + (_2627 * _2627));
        float _2640 = (1.0 - (cbSceneParam._m0[77u].w / _2612)) * _2637;
        float _2645 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2647 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2824;
        if (abs((_2626 - _2629) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2824 = ((((_2630 > 0.0) ? exp2(_2645 * _2630) : (2.0 - exp2(_2647 * _2630))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2640;
        }
        else
        {
            float _2768 = 1.0 / cbSceneParam._m0[80u].x;
            float _2769 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : max(_2630, _2631));
            float _2770 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : min(_2630, _2631));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            _2824 = ((abs(_2637 / _2626) * cbSceneParam._m0[80u].y) * ((((_2779 - _2780) * 2.0) - ((exp2(_2645 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0)))) - exp2(_2645 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))))) * _2768)) - ((exp2(_2647 * _2779) - exp2(_2647 * _2780)) * _2768))) + (_2640 * cbSceneParam._m0[80u].z);
        }
        vec4 _2826 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, 1.0), 0.0);
        float _2835 = exp2((_2824 * (-1.44269502162933349609375)) * (1.0 - _2826.w));
        float _2836 = log2(_2835);
        float _2852 = log2(_2557);
        _2649 = (exp2(_2852 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].x)) * _2826.x) / cbSceneParam._m0[78u].x)) + _2554;
        _2651 = (exp2(_2852 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].y)) * _2826.y) / cbSceneParam._m0[78u].y)) + _2555;
        _2653 = (exp2(_2852 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].z)) * _2826.z) / cbSceneParam._m0[78u].z)) + _2556;
        _2655 = _2835 * _2557;
    }
    else
    {
        _2649 = _2554;
        _2651 = _2555;
        _2653 = _2556;
        _2655 = _2557;
    }
    bool _2862;
    vec4 _2665;
    vec4 _2687;
    float _2689;
    float _2693;
    float _2694;
    float _2695;
    float _2696;
    bool _2706;
    for (;;)
    {
        _2665 = cbMatDynParam._m0[0u];
        float _2667 = roundEven(_2665.y);
        bool _2668 = _2667 == 3.0;
        float _2669 = log2(_2655);
        float _2676 = exp2(_2669 * cbSceneParam._m0[78u].x) * _2526;
        float _2677 = exp2(_2669 * cbSceneParam._m0[78u].y) * _2527;
        float _2678 = exp2(_2669 * cbSceneParam._m0[78u].z) * _2528;
        float _2685 = _544 + (-0.5);
        _2687 = cbMtdParam._m0[1u];
        _2689 = _2687.y * _2685;
        float _2692 = (_2667 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2693 = _2692 * (_2668 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2649)));
        _2694 = _2692 * (_2668 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2651)));
        _2695 = _2692 * (_2668 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2653)));
        _2696 = _2685 * 0.999000012874603271484375;
        _2706 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2706)
        {
            if ((cbInstanceData._m0[_616 + 7u].x + _2696) < 0.5)
            {
                _2862 = true;
                break;
            }
        }
        uint _2803 = _618 + uint(_2665.w);
        if ((cbInstanceData._m0[_2803].w < 1.0) && ((cbInstanceData._m0[_2803].w + _2696) < 0.5))
        {
            _2862 = true;
            break;
        }
        if ((_2689 + 1.0) < _2687.x)
        {
            _2862 = true;
            break;
        }
        _2862 = false;
        break;
    }
    float _3067;
    if (_2862)
    {
        discard_state = true;
        _3067 = 0.0;
    }
    else
    {
        _3067 = cbInstanceData._m0[_2529].w;
    }
    SV_Target.x = _2693;
    SV_Target.y = _2694;
    SV_Target.z = _2695;
    SV_Target.w = _3067;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2529].w;
    discard_exit();
}


