#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1152;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _260 = log2(0.0);
    bool _263 = exp2(_260 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[15u].x;
    _188[0u] = cbMtdParam._m0[15u].y;
    _189[0u] = cbMtdParam._m0[15u].z;
    _187[1u] = cbMtdParam._m0[16u].x;
    _188[1u] = cbMtdParam._m0[16u].y;
    _189[1u] = cbMtdParam._m0[16u].z;
    _187[2u] = cbMtdParam._m0[17u].x;
    _188[2u] = cbMtdParam._m0[17u].y;
    _189[2u] = cbMtdParam._m0[17u].z;
    _187[3u] = cbMtdParam._m0[12u].x;
    _188[3u] = cbMtdParam._m0[12u].y;
    _189[3u] = cbMtdParam._m0[12u].z;
    _187[4u] = cbMtdParam._m0[13u].x;
    _188[4u] = cbMtdParam._m0[13u].y;
    _189[4u] = cbMtdParam._m0[13u].z;
    _187[5u] = cbMtdParam._m0[14u].x;
    _188[5u] = cbMtdParam._m0[14u].y;
    _189[5u] = cbMtdParam._m0[14u].z;
    vec4 _331 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _335 = _331.y;
    float _338 = (_331.x + (-0.02500000037252902984619140625)) * 8.0;
    float _340 = roundEven(_338);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    uint _344 = uint(int(isnan(5.0) ? _341 : (isnan(_341) ? 5.0 : min(_341, 5.0))));
    float _361;
    if (_263)
    {
        _361 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _361 = cbMtdParam._m0[20u].z;
    }
    float _367;
    float _369;
    if (_263)
    {
        _367 = cbMtdParam._m0[28u].z;
        _369 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _367 = cbMtdParam._m0[24u].x;
        _369 = cbMtdParam._m0[24u].y;
    }
    float _371 = _367 * TEXCOORD.x;
    float _372 = _369 * TEXCOORD.y;
    float _384 = floor(_361);
    vec4 _387 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _371) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _372) + cbTextureTilingScale._m0[8u].w, _384));
    vec4 _409 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _417 = ((((((_187[_344] - cbMtdParam._m0[19u].x) * _335) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _387.x) * cbMtdParam._m0[9u].x) * _409.x;
    float _421 = ((((((_188[_344] - cbMtdParam._m0[19u].y) * _335) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _387.y) * cbMtdParam._m0[9u].y) * _409.y;
    float _425 = ((((((_189[_344] - cbMtdParam._m0[19u].z) * _335) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _387.z) * cbMtdParam._m0[9u].z) * _409.z;
    vec4 _437 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _441 = _437.z;
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].x;
    _183[0u] = cbMtdParam._m0[25u].y;
    _182[1u] = cbMtdParam._m0[26u].x;
    _183[1u] = cbMtdParam._m0[26u].y;
    _182[2u] = cbMtdParam._m0[26u].z;
    _183[2u] = cbMtdParam._m0[26u].w;
    _182[3u] = cbMtdParam._m0[27u].x;
    _183[3u] = cbMtdParam._m0[27u].y;
    _182[4u] = cbMtdParam._m0[25u].z;
    _183[4u] = cbMtdParam._m0[25u].w;
    float _486 = roundEven(5.0 - _338);
    float _487 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = isnan(4.0) ? _487 : (isnan(_487) ? 4.0 : min(_487, 4.0));
    float _490 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    uint _492 = uint(int(isnan(4.0) ? _490 : (isnan(_490) ? 4.0 : min(_490, 4.0))));
    float _498 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _371) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _372) + cbTextureTilingScale._m0[10u].w, _384)).x + _437.w) + _183[_492];
    vec4 _516 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _371) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _372) + cbTextureTilingScale._m0[9u].w, _384));
    float _523 = (_516.x * 2.0) + (-1.0);
    float _524 = (_516.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3531 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))));
    float _541 = (cbMtdParam._m0[21u].x * (((_441 * 2.0) * (_516.z + _182[_492])) - _441)) + _441;
    float _545 = (cbMtdParam._m0[21u].y * ((_437.x * 2.0) + (-1.0))) + _523;
    float _546 = (cbMtdParam._m0[21u].y * ((_437.y * 2.0) + (-1.0))) + _524;
    float _549 = fma(_531, _239, fma(_546, _231 * TANGENT.x, (_217 * _209) * _545));
    float _552 = fma(_531, _240, fma(_546, _231 * TANGENT.y, (_217 * _210) * _545));
    float _555 = fma(_531, _241, fma(_546, _231 * TANGENT.z, (_217 * _211) * _545));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    float _560 = _559 * _549;
    float _561 = _559 * _552;
    float _562 = _559 * _555;
    float _3542 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _563 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3564 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3575 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3586 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _567 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _583 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _634 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _624);
    float _635 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _624);
    float _636 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _624);
    float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
    float _641 = _634 * _640;
    float _642 = _635 * _640;
    float _643 = _636 * _640;
    float _649 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _650 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _652 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _654 = _652.w;
    float _673 = fma(_562, cbSceneParam._m0[5u].z, fma(_561, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _560));
    float _676 = fma(_562, cbSceneParam._m0[6u].z, fma(_561, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _560));
    float _679 = fma(_562, cbSceneParam._m0[7u].z, fma(_561, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _560));
    vec4 _681 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = (((_681.y - _563) + (_681.w * _563)) * cbMtdParam._m0[3u].x) + _563;
    uint _705 = uint(roundEven(NORMAL.w)) * 13u;
    uint _707 = (_705 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _713 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_707].x;
    float _714 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_707].y;
    float _715 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_707].z;
    float _3597 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    vec4 _719 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _724 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = (((_724.x - _567) + (_724.w * _567)) * cbMtdParam._m0[3u].x) + _567;
    float _748 = (cbMtdParam._m0[3u].x * (((_716 * _654) - _716) + _719.x)) + _716;
    float _749 = (cbMtdParam._m0[3u].x * (((_717 * _654) - _717) + _719.y)) + _717;
    float _750 = (cbMtdParam._m0[3u].x * (((_718 * _654) - _718) + _719.z)) + _718;
    float _751 = 1.0 - _735;
    float _752 = _751 * _748;
    float _753 = _751 * _749;
    float _754 = _751 * _750;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _735;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _735;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _735;
    float _762 = _759 + 0.039999999105930328369140625;
    float _764 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _649, cbSceneParam._m0[86u].y * _650));
    float _777 = _774.x * TEXCOORD_4;
    float _778 = dot(vec3(_560, _561, _562), vec3(_641, _642, _643));
    float _781 = _778 * 2.0;
    float _785 = (_781 * _560) - _641;
    float _786 = (_781 * _561) - _642;
    float _787 = (_781 * _562) - _643;
    float _791 = abs(dot(vec3(_641, _642, _643), vec3(_560, _561, _562)));
    float _3630 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _793 = sqrt(_692);
    float _804 = exp2((_793 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_793 * 3.0));
    float _810 = (1.0 - _804) * ((_793 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _811 = _804 * _793;
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1151;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _876 = fma(_847, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839));
        float _880 = fma(_847, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839));
        float _884 = fma(_847, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839));
        float _909 = _839 + _560;
        float _910 = _843 + _561;
        float _911 = _847 + _562;
        float _921 = fma(_911, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909)) - _876;
        float _922 = fma(_911, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909)) - _880;
        float _923 = fma(_911, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909)) - _884;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_876 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_880 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[34u].z) + ((((((_884 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _979 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_945.x + (-0.5));
        float _981 = _979 * (_945.y + (-0.5));
        float _982 = _979 * (_945.z + (-0.5));
        float _989 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_952.x + (-0.5));
        float _991 = _989 * (_952.y + (-0.5));
        float _992 = _989 * (_952.z + (-0.5));
        float _999 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_959.x + (-0.5));
        float _1001 = _999 * (_959.y + (-0.5));
        float _1002 = _999 * (_959.z + (-0.5));
        float _1009 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_966.x + (-0.5));
        float _1011 = _1009 * (_966.y + (-0.5));
        float _1012 = _1009 * (_966.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1033 = (dot(vec3(_560, _561, _562), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1043 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3678 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1045 + 1.0))) + _1050) * _1013;
        float _1060 = _981 * 0.5;
        float _1061 = _991 * 0.5;
        float _1062 = _1001 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_560, _561, _562), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3711 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1087 + 1.0))) + _1092) * _1014;
        float _1102 = _982 * 0.5;
        float _1103 = _992 * 0.5;
        float _1104 = _1002 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_560, _561, _562), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3744 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1129 + 1.0))) + _1134) * _1015;
        _1151 = _982;
        _1153 = _981;
        _1154 = _980;
        _1155 = _992;
        _1156 = _991;
        _1157 = _990;
        _1158 = _1002;
        _1159 = _1001;
        _1160 = _1000;
        _1161 = _1015;
        _1162 = _1014;
        _1163 = _1013;
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _1152;
        _1153 = _1152;
        _1154 = _1152;
        _1155 = _1152;
        _1156 = _1152;
        _1157 = _1152;
        _1158 = _1152;
        _1159 = _1152;
        _1160 = _1152;
        _1161 = _1152;
        _1162 = _1152;
        _1163 = _1152;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1192 = fma(_847, cbModelParam._m0[30u].z, fma(_843, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _839));
        float _1196 = fma(_847, cbModelParam._m0[31u].z, fma(_843, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _839));
        float _1200 = fma(_847, cbModelParam._m0[32u].z, fma(_843, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _839));
        float _1223 = _839 + _560;
        float _1224 = _843 + _561;
        float _1225 = _847 + _562;
        float _1235 = fma(_1225, cbModelParam._m0[30u].z, fma(_1224, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1223)) - _1192;
        float _1236 = fma(_1225, cbModelParam._m0[31u].z, fma(_1224, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1223)) - _1196;
        float _1237 = fma(_1225, cbModelParam._m0[32u].z, fma(_1224, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1223)) - _1200;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1192 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1196 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[35u].z) + ((((((_1200 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1291 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1258.x + (-0.5));
        float _1293 = _1291 * (_1258.y + (-0.5));
        float _1294 = _1291 * (_1258.z + (-0.5));
        float _1301 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1265.x + (-0.5));
        float _1303 = _1301 * (_1265.y + (-0.5));
        float _1304 = _1301 * (_1265.z + (-0.5));
        float _1311 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1272.x + (-0.5));
        float _1313 = _1311 * (_1272.y + (-0.5));
        float _1314 = _1311 * (_1272.z + (-0.5));
        float _1321 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1279.x + (-0.5));
        float _1323 = _1321 * (_1279.y + (-0.5));
        float _1324 = _1321 * (_1279.z + (-0.5));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = _1292 * 0.5;
        float _1329 = _1302 * 0.5;
        float _1330 = _1312 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_560, _561, _562), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3807 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1355 + 1.0))) + _1360) * _1325;
        float _1370 = _1293 * 0.5;
        float _1371 = _1303 * 0.5;
        float _1372 = _1313 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_560, _561, _562), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3840 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1397 + 1.0))) + _1402) * _1326;
        float _1412 = _1294 * 0.5;
        float _1413 = _1304 * 0.5;
        float _1414 = _1314 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_560, _561, _562), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _3873 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1439 + 1.0))) + _1444) * _1327;
        _1461 = _1294;
        _1462 = _1293;
        _1463 = _1292;
        _1464 = _1304;
        _1465 = _1303;
        _1466 = _1302;
        _1467 = _1314;
        _1468 = _1313;
        _1469 = _1312;
        _1470 = _1327;
        _1471 = _1326;
        _1472 = _1325;
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1152;
        _1462 = _1152;
        _1463 = _1152;
        _1464 = _1152;
        _1465 = _1152;
        _1466 = _1152;
        _1467 = _1152;
        _1468 = _1152;
        _1469 = _1152;
        _1470 = _1152;
        _1471 = _1152;
        _1472 = _1152;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1164)) + _1164;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1165)) + _1165;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1166)) + _1166;
    float _1508 = fma(_1487, cbSceneParam._m0[89u].z, fma(_1486, cbSceneParam._m0[89u].y, _1485 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1487, cbSceneParam._m0[90u].z, fma(_1486, cbSceneParam._m0[90u].y, _1485 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1487, cbSceneParam._m0[91u].z, fma(_1486, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1485));
    float _1529 = _785 * 0.5;
    float _1530 = _786 * 0.5;
    float _1531 = _787 * 0.5;
    float _1532 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1535 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1538 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1572;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1545 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1151, _1155, _1158, _1161));
        float _1549 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1553 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1560 = dot(vec4(cbModelParam._m0[39u]), vec4(_1529, _1530, _1531, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1583;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1574 = dot(vec4(cbModelParam._m0[40u]), vec4(_1529, _1530, _1531, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1587 = (_1583 * cbModelParam._m0[1u].x) + (_1572 * (1.0 - cbModelParam._m0[1u].x));
    float _1597 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _692);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1597 : min(cbModelParam._m0[25u].z, _1597));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_847, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_847, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_847, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_787, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785));
        float _1659 = fma(_787, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785));
        float _1662 = fma(_787, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1690 = frontier_phi_20_18_ladder;
        }
        float _1893;
        if (_1659 > 0.0)
        {
            _1893 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1893 = frontier_phi_29_25_ladder;
        }
        float _2147;
        if (_1662 > 0.0)
        {
            _2147 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2147 = frontier_phi_41_36_ladder;
        }
        float _2149 = isnan(_1893) ? _1690 : (isnan(_1690) ? _1893 : min(_1690, _1893));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1656) + _1645;
        float _2155 = (_2150 * _1659) + _1649;
        float _2156 = (_2150 * _1662) + _1653;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1598);
            frontier_phi_19_41_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_19_41_ladder_2;
        _1680 = frontier_phi_19_41_ladder_1;
        _1682 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_785, _786, _787), _1598);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _692);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1741 = fma(_847, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839)) + cbModelParam._m0[21u].w;
        float _1745 = fma(_847, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839)) + cbModelParam._m0[22u].w;
        float _1749 = fma(_847, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839)) + cbModelParam._m0[23u].w;
        float _1752 = fma(_787, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785));
        float _1755 = fma(_787, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785));
        float _1758 = fma(_787, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785));
        float _1898;
        if (_1752 > 0.0)
        {
            _1898 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1898 = frontier_phi_31_27_ladder;
        }
        float _2174;
        if (_1755 > 0.0)
        {
            _2174 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2174 = frontier_phi_43_38_ladder;
        }
        float _2387;
        if (_1758 > 0.0)
        {
            _2387 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2387 = frontier_phi_52_49_ladder;
        }
        float _2389 = isnan(_2174) ? _1898 : (isnan(_1898) ? _2174 : min(_1898, _2174));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1752) + _1741;
        float _2395 = (_2390 * _1755) + _1745;
        float _2396 = (_2390 * _1758) + _1749;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_28_52_ladder = _2612.z * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_1 = _2612.y * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_2 = _2612.x * cbModelParam._m0[1u].z;
        }
        _1777 = frontier_phi_28_52_ladder_2;
        _1779 = frontier_phi_28_52_ladder_1;
        _1781 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_785, _786, _787), _1687);
        _1777 = _1761.x * cbModelParam._m0[1u].z;
        _1779 = _1761.y * cbModelParam._m0[1u].z;
        _1781 = _1761.z * cbModelParam._m0[1u].z;
    }
    float _1794 = (((_810 * _762) + _811) * _777) * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1796 = (((_810 * _764) + _811) * _777) * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1798 = (((_810 * _765) + _811) * _777) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1794 * cbSceneParam._m0[91u].x));
    uvec4 _1817 = floatBitsToUint(cbInstanceData._m0[_705 + 5u]);
    uint _1819 = _1817.x * 14u;
    uint _1820 = _1819 + 13u;
    float _1827 = _777 + (-1.0);
    float _1832 = (cbLight._m0[_1820].x * _1827) + 1.0;
    float _1833 = (cbLight._m0[_1820].y * _1827) + 1.0;
    float _1834 = (cbLight._m0[_1820].z * _1827) + 1.0;
    float _1835 = (cbLight._m0[_1820].w * _1827) + 1.0;
    uint _1836 = _1819 + 5u;
    float _1842 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1846 = _1819 + 4u;
    float _1852 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1856 = _1819 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_560, _561, _562));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_560, _561, _562));
    float _4009 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _4020 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1836].x * _1842) * _1877) + ((cbLight._m0[_1846].x * _1852) * _1875);
    float _1885 = ((_1842 * cbLight._m0[_1836].y) * _1877) + ((_1852 * cbLight._m0[_1846].y) * _1875);
    float _1886 = ((_1842 * cbLight._m0[_1836].z) * _1877) + ((_1852 * cbLight._m0[_1846].z) * _1875);
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1819 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1892)
    {
        _1903 = _1884;
        _1905 = _1885;
        _1907 = _1886;
    }
    else
    {
        uint _1911 = _1819 + 6u;
        float _1927 = (dot(vec3(cbLight._m0[_1819 + 2u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _1928 = _1927 * _1927;
        float _4031 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1930 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1903 = (((cbLight._m0[_1911].x * 0.3183098733425140380859375) * _1929) * _1930) + _1884;
        _1905 = (((cbLight._m0[_1911].y * 0.3183098733425140380859375) * _1929) * _1930) + _1885;
        _1907 = (((cbLight._m0[_1911].z * 0.3183098733425140380859375) * _1929) * _1930) + _1886;
    }
    bool _1910 = _1890.y == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1910)
    {
        _1948 = _1903;
        _1950 = _1905;
        _1952 = _1907;
    }
    else
    {
        uint _2118 = _1819 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1819 + 3u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4047 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2137 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1948 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1903;
        _1950 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1905;
        _1952 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1907;
    }
    uint _1955 = _1819 + 8u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _692) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1819].x + _641;
    float _1971 = cbLight._m0[_1819].y + _642;
    float _1972 = cbLight._m0[_1819].z + _643;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1819].xyz));
    float _4063 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _1984 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _1985 = dot(vec3(_560, _561, _562), vec3(_1977, _1978, _1979));
    float _4085 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1977, _1978, _1979));
    float _4096 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1969 * _1969;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0);
    float _2006 = 0.959999978542327880859375 - _759;
    float _2008 = 0.959999978542327880859375 - _760;
    float _2009 = 0.959999978542327880859375 - _761;
    float _2016 = 1.0 - _1969;
    float _2027 = (0.5 / (((_1984 * ((_1983 * _2016) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2016) + _1969) * _1983))) * _1983;
    float _4107 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    uint _2040 = _1819 + 9u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _692) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1856].x + _641;
    float _2054 = cbLight._m0[_1856].y + _642;
    float _2055 = cbLight._m0[_1856].z + _643;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1856].xyz));
    float _4118 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2067 = dot(vec3(_560, _561, _562), vec3(_2060, _2061, _2062));
    float _4129 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2071 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2060, _2061, _2062));
    float _4140 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2075 = _2052 * _2052;
    float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
    float _2093 = 1.0 - _2052;
    float _2103 = (0.5 / (((_1984 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2093) + _2052) * _2066))) * _2066;
    float _4151 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
    float _2115 = (((((_2086 * _2006) + _762) * cbLight._m0[_2040].x) * _2105) * _1842) + (((((_2005 * _2006) + _762) * cbLight._m0[_1955].x) * _2029) * _1852);
    float _2116 = (((((_2086 * _2008) + _764) * cbLight._m0[_2040].y) * _2105) * _1842) + (((((_2005 * _2008) + _764) * cbLight._m0[_1955].y) * _2029) * _1852);
    float _2117 = (((((_2086 * _2009) + _765) * cbLight._m0[_2040].z) * _2105) * _1842) + (((((_2005 * _2009) + _765) * cbLight._m0[_1955].z) * _2029) * _1852);
    float _2179;
    float _2181;
    float _2183;
    if (_1892)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1819 + 2u;
        uint _2189 = _1819 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _692) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _641;
        float _2206 = cbLight._m0[_2185].y + _642;
        float _2207 = cbLight._m0[_2185].z + _643;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2185].xyz));
        float _4162 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2219 = dot(vec3(_560, _561, _562), vec3(_2212, _2213, _2214));
        float _4173 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4184 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0);
        float _2245 = 1.0 - _2204;
        float _2255 = (0.5 / (((_1984 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2245) + _2204) * _2218))) * _2218;
        float _4195 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2179 = (((((_2238 * _2006) + _762) * cbLight._m0[_2189].x) * _2257) * _2258) + _2115;
        _2181 = (((((_2238 * _2008) + _764) * cbLight._m0[_2189].y) * _2257) * _2258) + _2116;
        _2183 = (((((_2238 * _2009) + _765) * cbLight._m0[_2189].z) * _2257) * _2258) + _2117;
    }
    float _2293;
    float _2295;
    float _2297;
    if (_1910)
    {
        _2293 = _2179;
        _2295 = _2181;
        _2297 = _2183;
    }
    else
    {
        uint _2304 = _1819 + 3u;
        uint _2308 = _1819 + 11u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _692) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _641;
        float _2325 = cbLight._m0[_2304].y + _642;
        float _2326 = cbLight._m0[_2304].z + _643;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2304].xyz));
        float _4211 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2338 = dot(vec3(_560, _561, _562), vec3(_2331, _2332, _2333));
        float _4222 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4233 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
        float _2364 = 1.0 - _2323;
        float _2374 = (0.5 / (((_1984 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2364) + _2323) * _2337))) * _2337;
        float _4244 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2293 = (((((_2357 * _2006) + _762) * cbLight._m0[_2308].x) * _2376) * _2377) + _2179;
        _2295 = (((((_2357 * _2008) + _764) * cbLight._m0[_2308].y) * _2376) * _2377) + _2181;
        _2297 = (((((_2357 * _2009) + _765) * cbLight._m0[_2308].z) * _2376) * _2377) + _2183;
    }
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    if (_1817.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _650) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _649) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2777)
                {
                    frontier_phi_67_pred = _2766;
                    frontier_phi_67_pred_1 = _2765;
                    frontier_phi_67_pred_2 = _2764;
                    frontier_phi_67_pred_3 = _2763;
                    frontier_phi_67_pred_4 = _2762;
                    frontier_phi_67_pred_5 = _2761;
                }
                else
                {
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    uint _2891;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2776;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2895 = uint(findLSB(_2891)) + (_2767 << 5u);
                        uint _2892 = (_2891 + 4294967295u) & _2891;
                        uint _2897 = _2895 * 48u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2917 = (_2895 * 48u) + 4u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2936 = (_2895 * 48u) + 8u;
                        vec3 _2947 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x));
                        float _2951 = _2911.x - _2453;
                        float _2952 = _2911.y - _2454;
                        float _2953 = _2911.z - _2455;
                        float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                        float _2957 = inversesqrt(_2954);
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2961 = dot(vec3(_673, _676, _679), vec3(_2958, _2959, _2960));
                        float _2966 = 1.0 - (_2954 * _2911.w);
                        float _4270 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                        float _2968 = sqrt(_2954) * _2930.w;
                        float _2971 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2961) + _2972;
                        float _2978 = _2968 * _2968;
                        float _2982 = ((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2967) / ((_2978 * 0.699999988079071044921875) + 1.0);
                        float _2986 = (-0.0) - _2453;
                        float _2987 = (-0.0) - _2454;
                        float _2988 = (-0.0) - _2455;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _3003 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                        float _3004 = 1.0 - _793;
                        float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                        float _3012 = _3011 * _3011;
                        float _3013 = _3012 * _3012;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3024 = dot(vec3(_673, _676, _679), vec3(_2993, _2994, _2995));
                        float _4286 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _3028 = dot(vec3(_673, _676, _679), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                        float _4297 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                        float _3036 = _2971 * _3012;
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _2961) + _3037;
                        float _4308 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3042 = 1.0 - _3012;
                        float _3052 = (0.5 / (((_3041 * ((_3027 * _3042) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3012) * _3027))) * _3041;
                        float _4319 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3063 = (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) / ((_3035 * _3035) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125))) * _2967;
                        _2820 = (_2982 * _2930.x) + _2888;
                        _2821 = (_2982 * _2930.y) + _2889;
                        _2822 = (_2982 * _2930.z) + _2890;
                        _2817 = (_3063 * _2947.x) + _2885;
                        _2818 = (_3063 * _2947.y) + _2886;
                        _2819 = (_3063 * _2947.z) + _2887;
                        if (_2892 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2892;
                        }
                    }
                    frontier_phi_67_pred = _2822;
                    frontier_phi_67_pred_1 = _2821;
                    frontier_phi_67_pred_2 = _2820;
                    frontier_phi_67_pred_3 = _2819;
                    frontier_phi_67_pred_4 = _2818;
                    frontier_phi_67_pred_5 = _2817;
                }
                _2628 = frontier_phi_67_pred;
                _2626 = frontier_phi_67_pred_1;
                _2624 = frontier_phi_67_pred_2;
                _2622 = frontier_phi_67_pred_3;
                _2620 = frontier_phi_67_pred_4;
                _2618 = frontier_phi_67_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2618;
                    _2762 = _2620;
                    _2763 = _2622;
                    _2764 = _2624;
                    _2765 = _2626;
                    _2766 = _2628;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2634) & _2499) == 0u)
        {
            _2729 = _2617;
            _2731 = _2619;
            _2733 = _2621;
            _2735 = _2623;
            _2737 = _2625;
            _2739 = _2627;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2755 = _2754 * _2453;
            float _2756 = _2754 * _2454;
            float _2757 = _2754 * _2455;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2868 = _2617;
                float _2869 = _2619;
                float _2870 = _2621;
                float _2871 = _2623;
                float _2872 = _2625;
                float _2873 = _2627;
                uint _2874 = _2634;
                uint _2883;
                bool _2884;
                for (;;)
                {
                    _2883 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                    _2884 = _2883 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2884)
                    {
                        frontier_phi_73_pred = _2873;
                        frontier_phi_73_pred_1 = _2872;
                        frontier_phi_73_pred_2 = _2871;
                        frontier_phi_73_pred_3 = _2870;
                        frontier_phi_73_pred_4 = _2869;
                        frontier_phi_73_pred_5 = _2868;
                    }
                    else
                    {
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        uint _3087 = _2883;
                        uint _3088;
                        vec4 _3113;
                        float _3114;
                        vec4 _3129;
                        vec3 _3141;
                        vec4 _3156;
                        vec4 _3171;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3098 = ((_2874 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3087));
                            _3088 = (_3087 + 4294967295u) & _3087;
                            uint _3100 = _3098 * 40u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3114 = _3113.w;
                            uint _3116 = (_3098 * 40u) + 4u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3098 * 40u) + 8u;
                            _3141 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x));
                            uint _3143 = (_3098 * 40u) + 16u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3098 * 40u) + 20u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3098 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3098 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_2455, _3205.z, fma(_2454, _3205.y, _3205.x * _2453)) + _3205.w;
                            _3218 = !((fma(_2455, _3186.z, fma(_2454, _3186.y, _3186.x * _2453)) + _3186.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3113.x - _2453;
                                float _3246 = _3113.y - _2454;
                                float _3247 = _3113.z - _2455;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3114 * _3114));
                                float _4330 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3263 = sqrt(_3248) * _3129.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_673, _676, _679))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_2455, _3156.z, fma(_2454, _3156.y, _3156.x * _2453)) + _3156.w) / _3217;
                                float _3277 = (fma(_2455, _3171.z, fma(_2454, _3171.y, _3171.x * _2453)) + _3171.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4346 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _793;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2755;
                                float _3307 = _3253 - _2756;
                                float _3308 = _3254 - _2757;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_673, _676, _679), vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757));
                                float _4357 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3320 = dot(vec3(_673, _676, _679), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4368 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_673, _676, _679), vec3(_3252, _3253, _3254))) + _3329;
                                float _4379 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4390 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3283 * _3129.y;
                                frontier_phi_79_pred_1 = _3283 * _3129.x;
                                frontier_phi_79_pred_2 = _3357 * _3141.z;
                                frontier_phi_79_pred_3 = _3357 * _3141.y;
                                frontier_phi_79_pred_4 = _3357 * _3141.x;
                                frontier_phi_79_pred_5 = _3283 * _3129.z;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3365 = frontier_phi_79_pred;
                            _3364 = frontier_phi_79_pred_1;
                            _3363 = frontier_phi_79_pred_2;
                            _3362 = frontier_phi_79_pred_3;
                            _3361 = frontier_phi_79_pred_4;
                            _3366 = frontier_phi_79_pred_5;
                            _3071 = _3364 + _3084;
                            _3072 = _3365 + _3085;
                            _3073 = _3366 + _3086;
                            _3068 = _3361 + _3081;
                            _3069 = _3362 + _3082;
                            _3070 = _3363 + _3083;
                            if (_3088 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3088;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3073;
                        frontier_phi_73_pred_1 = _3072;
                        frontier_phi_73_pred_2 = _3071;
                        frontier_phi_73_pred_3 = _3070;
                        frontier_phi_73_pred_4 = _3069;
                        frontier_phi_73_pred_5 = _3068;
                    }
                    _2740 = frontier_phi_73_pred;
                    _2738 = frontier_phi_73_pred_1;
                    _2736 = frontier_phi_73_pred_2;
                    _2734 = frontier_phi_73_pred_3;
                    _2732 = frontier_phi_73_pred_4;
                    _2730 = frontier_phi_73_pred_5;
                    uint _2875 = _2874 + 1u;
                    if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2868 = _2730;
                        _2869 = _2732;
                        _2870 = _2734;
                        _2871 = _2736;
                        _2872 = _2738;
                        _2873 = _2740;
                        _2874 = _2875;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2740;
                frontier_phi_61_62_ladder_1 = _2738;
                frontier_phi_61_62_ladder_2 = _2734;
                frontier_phi_61_62_ladder_3 = _2732;
                frontier_phi_61_62_ladder_4 = _2730;
                frontier_phi_61_62_ladder_5 = _2736;
            }
            else
            {
                frontier_phi_61_62_ladder = _2627;
                frontier_phi_61_62_ladder_1 = _2625;
                frontier_phi_61_62_ladder_2 = _2621;
                frontier_phi_61_62_ladder_3 = _2619;
                frontier_phi_61_62_ladder_4 = _2617;
                frontier_phi_61_62_ladder_5 = _2623;
            }
            _2729 = frontier_phi_61_62_ladder_4;
            _2731 = frontier_phi_61_62_ladder_3;
            _2733 = frontier_phi_61_62_ladder_2;
            _2735 = frontier_phi_61_62_ladder_5;
            _2737 = frontier_phi_61_62_ladder_1;
            _2739 = frontier_phi_61_62_ladder;
        }
        float _2744 = isnan(1.0) ? _777 : (isnan(_777) ? 1.0 : min(_777, 1.0));
        _2511 = (_2744 * _2735) + _1948;
        _2513 = (_2744 * _2737) + _1950;
        _2515 = (_2744 * _2739) + _1952;
        _2517 = ((_2729 * _762) * _2744) + _2293;
        _2519 = ((_2731 * _764) * _2744) + _2295;
        _2521 = ((_2733 * _765) * _2744) + _2297;
    }
    else
    {
        _2511 = _1948;
        _2513 = _1950;
        _2515 = _1952;
        _2517 = _2293;
        _2519 = _2295;
        _2521 = _2297;
    }
    vec4 _2527 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4406 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4417 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4428 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2551 = (((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2511 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _777))) + ((_2517 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1587)) * cbPerFrame._m0[3u].x)) + (_2527.x * cbMtdParam._m0[3u].x);
    float _2553 = ((_2527.y * cbMtdParam._m0[3u].x) + ((_2519 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1587)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2513 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _777)));
    float _2555 = ((_2527.z * cbMtdParam._m0[3u].x) + ((_2521 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1587)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2515 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _777)));
    uint _2559 = _705 + 6u;
    float _2567 = _649 / cbSceneParam._m0[86u].x;
    float _2568 = _650 / cbSceneParam._m0[86u].y;
    vec4 _2582 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, (log2((isnan(cbSceneParam._m0[77u].w) ? _583 : (isnan(_583) ? cbSceneParam._m0[77u].w : min(_583, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2584 = _2582.x;
    float _2585 = _2582.y;
    float _2586 = _2582.z;
    float _2587 = _2582.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_583 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_583) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _583 : min(cbSceneParam._m0[80u].w, _583));
        float _2643 = _2642 / _583;
        float _2654 = _2643 * _634;
        float _2655 = _635 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2657 = _2643 * _636;
        float _2659 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2660 = _2659 + cbSceneParam._m0[79u].w;
        float _2661 = cbSceneParam._m0[79u].w - _2655;
        float _2667 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2657 * _2657));
        float _2670 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2667;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2656 - _2659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2660 > 0.0) ? exp2(_2675 * _2660) : (2.0 - exp2(_2677 * _2660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2670;
        }
        else
        {
            float _2790 = 1.0 / cbSceneParam._m0[80u].x;
            float _2791 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : max(_2660, _2661));
            float _2792 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : min(_2660, _2661));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            _2830 = ((abs(_2667 / _2656) * cbSceneParam._m0[80u].y) * ((((_2801 - _2802) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))))) * _2790)) - ((exp2(_2677 * _2801) - exp2(_2677 * _2802)) * _2790))) + (_2670 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2587);
        _2679 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2584;
        _2681 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2585;
        _2683 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2586;
        _2685 = _2841 * _2587;
    }
    else
    {
        _2679 = _2584;
        _2681 = _2585;
        _2683 = _2586;
        _2685 = _2587;
    }
    float _2697 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2698 = _2697 == 3.0;
    float _2699 = log2(_2685);
    float _2706 = exp2(_2699 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)));
    float _2707 = exp2(_2699 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)));
    float _2708 = exp2(_2699 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)));
    float _2717 = (_2697 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2717 * (_2698 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.y = _2717 * (_2698 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.z = _2717 * (_2698 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.w = cbInstanceData._m0[_2559].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2559].w;
}


