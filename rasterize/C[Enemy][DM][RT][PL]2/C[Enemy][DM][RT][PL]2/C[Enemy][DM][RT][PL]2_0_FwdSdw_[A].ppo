#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1221;
float _3907;
float _3908;
float _3909;
float _3910;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    float _270 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _283 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_270 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _294 = exp2(log2(_283.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[15u].x;
    _198[0u] = cbMtdParam._m0[15u].y;
    _199[0u] = cbMtdParam._m0[15u].z;
    _197[1u] = cbMtdParam._m0[16u].x;
    _198[1u] = cbMtdParam._m0[16u].y;
    _199[1u] = cbMtdParam._m0[16u].z;
    _197[2u] = cbMtdParam._m0[17u].x;
    _198[2u] = cbMtdParam._m0[17u].y;
    _199[2u] = cbMtdParam._m0[17u].z;
    _197[3u] = cbMtdParam._m0[12u].x;
    _198[3u] = cbMtdParam._m0[12u].y;
    _199[3u] = cbMtdParam._m0[12u].z;
    _197[4u] = cbMtdParam._m0[13u].x;
    _198[4u] = cbMtdParam._m0[13u].y;
    _199[4u] = cbMtdParam._m0[13u].z;
    _197[5u] = cbMtdParam._m0[14u].x;
    _198[5u] = cbMtdParam._m0[14u].y;
    _199[5u] = cbMtdParam._m0[14u].z;
    vec4 _361 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _364 = _361.y;
    float _367 = (_361.x + (-0.02500000037252902984619140625)) * 8.0;
    float _369 = roundEven(_367);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _373 = uint(int(isnan(5.0) ? _370 : (isnan(_370) ? 5.0 : min(_370, 5.0))));
    float _390;
    if (_294)
    {
        _390 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _390 = cbMtdParam._m0[20u].z;
    }
    float _396;
    float _398;
    if (_294)
    {
        _396 = cbMtdParam._m0[28u].z;
        _398 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _396 = cbMtdParam._m0[24u].x;
        _398 = cbMtdParam._m0[24u].y;
    }
    float _400 = _396 * TEXCOORD.x;
    float _401 = _398 * TEXCOORD.y;
    float _413 = floor(_390);
    vec4 _416 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _400) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _401) + cbTextureTilingScale._m0[8u].w, _413));
    vec4 _438 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _270) + cbTextureTilingScale._m0[0u].w));
    float _446 = ((((((_197[_373] - cbMtdParam._m0[19u].x) * _364) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _416.x) * cbMtdParam._m0[9u].x) * _438.x;
    float _450 = ((((((_198[_373] - cbMtdParam._m0[19u].y) * _364) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _416.y) * cbMtdParam._m0[9u].y) * _438.y;
    float _454 = ((((((_199[_373] - cbMtdParam._m0[19u].z) * _364) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _416.z) * cbMtdParam._m0[9u].z) * _438.z;
    vec4 _466 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _270) + cbTextureTilingScale._m0[1u].w));
    float _470 = _466.z;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[25u].x;
    _193[0u] = cbMtdParam._m0[25u].y;
    _192[1u] = cbMtdParam._m0[26u].x;
    _193[1u] = cbMtdParam._m0[26u].y;
    _192[2u] = cbMtdParam._m0[26u].z;
    _193[2u] = cbMtdParam._m0[26u].w;
    _192[3u] = cbMtdParam._m0[27u].x;
    _193[3u] = cbMtdParam._m0[27u].y;
    _192[4u] = cbMtdParam._m0[25u].z;
    _193[4u] = cbMtdParam._m0[25u].w;
    float _515 = roundEven(5.0 - _367);
    float _516 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _517 = isnan(4.0) ? _516 : (isnan(_516) ? 4.0 : min(_516, 4.0));
    float _519 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    uint _521 = uint(int(isnan(4.0) ? _519 : (isnan(_519) ? 4.0 : min(_519, 4.0))));
    float _527 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _400) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _401) + cbTextureTilingScale._m0[10u].w, _413)).x + _466.w) + _193[_521];
    vec4 _545 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _400) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _401) + cbTextureTilingScale._m0[9u].w, _413));
    float _552 = (_545.x * 2.0) + (-1.0);
    float _553 = (_545.y * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3949 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))));
    float _569 = (cbMtdParam._m0[21u].x * (((_470 * 2.0) * (_545.z + _192[_521])) - _470)) + _470;
    float _573 = (cbMtdParam._m0[21u].y * ((_466.x * 2.0) + (-1.0))) + _552;
    float _574 = (cbMtdParam._m0[21u].y * ((_466.y * 2.0) + (-1.0))) + _553;
    float _577 = fma(_560, _249, fma(_574, _241 * TANGENT.x, (_227 * _219) * _573));
    float _580 = fma(_560, _250, fma(_574, _241 * TANGENT.y, (_227 * _220) * _573));
    float _583 = fma(_560, _251, fma(_574, _241 * TANGENT.z, (_227 * _221) * _573));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3960 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _591 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3982 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3993 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4004 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _595 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _611 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _662 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _652);
    float _663 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _652);
    float _664 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _652);
    float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
    float _669 = _662 * _668;
    float _670 = _663 * _668;
    float _671 = _664 * _668;
    vec4 _676 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _678 = _676.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _901 = sqrt(((_662 * _662) + (_663 * _663)) + (_664 * _664));
        float _907 = (cbMatDynParam._m0[5u].x * _901) + cbMatDynParam._m0[5u].y;
        float _4015 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _912 = (cbMatDynParam._m0[5u].z * _901) + cbMatDynParam._m0[5u].w;
        float _4026 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) - _908)) + _908) < ((_678 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _692 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _693 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _695 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _697 = _695.w;
    float _716 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _719 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _722 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    vec4 _724 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = (((_724.y - _591) + (_724.w * _591)) * cbMtdParam._m0[3u].x) + _591;
    uint _748 = uint(roundEven(NORMAL.w)) * 13u;
    uint _749 = _748 + 9u;
    uint _750 = _749 + uint(cbMatDynParam._m0[0u].w);
    float _756 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_750].x;
    float _757 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_750].y;
    float _758 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_750].z;
    float _4037 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    vec4 _762 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _767 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _778 = (((_767.x - _595) + (_767.w * _595)) * cbMtdParam._m0[3u].x) + _595;
    float _791 = (cbMtdParam._m0[3u].x * (((_759 * _697) - _759) + _762.x)) + _759;
    float _792 = (cbMtdParam._m0[3u].x * (((_760 * _697) - _760) + _762.y)) + _760;
    float _793 = (cbMtdParam._m0[3u].x * (((_761 * _697) - _761) + _762.z)) + _761;
    float _794 = 1.0 - _778;
    float _795 = _794 * _791;
    float _796 = _794 * _792;
    float _797 = _794 * _793;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _778;
    float _803 = (_792 + (-0.039999999105930328369140625)) * _778;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _778;
    float _805 = _802 + 0.039999999105930328369140625;
    float _807 = _803 + 0.039999999105930328369140625;
    float _808 = _804 + 0.039999999105930328369140625;
    vec4 _817 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _692, cbSceneParam._m0[86u].y * _693));
    float _820 = _817.x * TEXCOORD_4;
    float _821 = dot(vec3(_588, _589, _590), vec3(_669, _670, _671));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _588) - _669;
    float _829 = (_824 * _589) - _670;
    float _830 = (_824 * _590) - _671;
    float _834 = abs(dot(vec3(_669, _670, _671), vec3(_588, _589, _590)));
    float _4070 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_735);
    float _847 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _853 = (1.0 - _847) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _854 = _847 * _836;
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1220;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _945 = fma(_890, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882));
        float _949 = fma(_890, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882));
        float _953 = fma(_890, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882));
        float _978 = _882 + _588;
        float _979 = _886 + _589;
        float _980 = _890 + _590;
        float _990 = fma(_980, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978)) - _945;
        float _991 = fma(_980, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978)) - _949;
        float _992 = fma(_980, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978)) - _953;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_945 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_949 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[34u].z) + ((((((_953 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1048 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1014.x + (-0.5));
        float _1050 = _1048 * (_1014.y + (-0.5));
        float _1051 = _1048 * (_1014.z + (-0.5));
        float _1058 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1021.x + (-0.5));
        float _1060 = _1058 * (_1021.y + (-0.5));
        float _1061 = _1058 * (_1021.z + (-0.5));
        float _1068 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1028.x + (-0.5));
        float _1070 = _1068 * (_1028.y + (-0.5));
        float _1071 = _1068 * (_1028.z + (-0.5));
        float _1078 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1035.x + (-0.5));
        float _1080 = _1078 * (_1035.y + (-0.5));
        float _1081 = _1078 * (_1035.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1102 = (dot(vec3(_588, _589, _590), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1112 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _4118 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1114 + 1.0))) + _1119) * _1082;
        float _1129 = _1050 * 0.5;
        float _1130 = _1060 * 0.5;
        float _1131 = _1070 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_588, _589, _590), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4151 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1156 + 1.0))) + _1161) * _1083;
        float _1171 = _1051 * 0.5;
        float _1172 = _1061 * 0.5;
        float _1173 = _1071 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_588, _589, _590), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4184 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1198 + 1.0))) + _1203) * _1084;
        _1220 = _1051;
        _1222 = _1050;
        _1223 = _1049;
        _1224 = _1061;
        _1225 = _1060;
        _1226 = _1059;
        _1227 = _1071;
        _1228 = _1070;
        _1229 = _1069;
        _1230 = _1084;
        _1231 = _1083;
        _1232 = _1082;
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _1221;
        _1222 = _1221;
        _1223 = _1221;
        _1224 = _1221;
        _1225 = _1221;
        _1226 = _1221;
        _1227 = _1221;
        _1228 = _1221;
        _1229 = _1221;
        _1230 = _1221;
        _1231 = _1221;
        _1232 = _1221;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_890, cbModelParam._m0[30u].z, fma(_886, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882));
        float _1268 = fma(_890, cbModelParam._m0[31u].z, fma(_886, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882));
        float _1272 = fma(_890, cbModelParam._m0[32u].z, fma(_886, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882));
        float _1295 = _882 + _588;
        float _1296 = _886 + _589;
        float _1297 = _890 + _590;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_588, _589, _590), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4247 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_588, _589, _590), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4280 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_588, _589, _590), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4313 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1221;
        _1534 = _1221;
        _1535 = _1221;
        _1536 = _1221;
        _1537 = _1221;
        _1538 = _1221;
        _1539 = _1221;
        _1540 = _1221;
        _1541 = _1221;
        _1542 = _1221;
        _1543 = _1221;
        _1544 = _1221;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1233)) + _1233;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1234)) + _1234;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1235)) + _1235;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _828 * 0.5;
    float _1602 = _829 * 0.5;
    float _1603 = _830 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1220, _1224, _1227, _1230));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _735);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_890, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_890, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_890, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1731 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1734 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_23_21_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_23_21_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_23_21_ladder = 5000.0;
            }
            _1762 = frontier_phi_23_21_ladder;
        }
        float _1934;
        if (_1731 > 0.0)
        {
            _1934 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1934 = frontier_phi_32_28_ladder;
        }
        float _2229;
        if (_1734 > 0.0)
        {
            _2229 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2229 = frontier_phi_44_39_ladder;
        }
        float _2231 = isnan(_1934) ? _1762 : (isnan(_1762) ? _1934 : min(_1762, _1934));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1728) + _1717;
        float _2237 = (_2232 * _1731) + _1721;
        float _2238 = (_2232 * _1734) + _1725;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2239;
        float _2243 = _2239 + 1.0;
        float frontier_phi_22_44_ladder;
        float frontier_phi_22_44_ladder_1;
        float frontier_phi_22_44_ladder_2;
        if ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 > _2243) || ((_2237 < _2241) || ((_2236 < _2241) || (_2236 > _2243))))))
        {
            frontier_phi_22_44_ladder = 0.0;
            frontier_phi_22_44_ladder_1 = 0.0;
            frontier_phi_22_44_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2238, cbModelParam._m0[9u].z, fma(_2237, cbModelParam._m0[9u].y, _2236 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2238, cbModelParam._m0[10u].z, fma(_2237, cbModelParam._m0[10u].y, _2236 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2238, cbModelParam._m0[11u].z, fma(_2237, cbModelParam._m0[11u].y, _2236 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_22_44_ladder = _2383.x * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_1 = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_2 = _2383.y * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_22_44_ladder;
        _1752 = frontier_phi_22_44_ladder_2;
        _1754 = frontier_phi_22_44_ladder_1;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1670);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _735);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1813 = fma(_890, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882)) + cbModelParam._m0[21u].w;
        float _1817 = fma(_890, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882)) + cbModelParam._m0[22u].w;
        float _1821 = fma(_890, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882)) + cbModelParam._m0[23u].w;
        float _1824 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1827 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1830 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1939;
        if (_1824 > 0.0)
        {
            _1939 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1939 = frontier_phi_34_30_ladder;
        }
        float _2256;
        if (_1827 > 0.0)
        {
            _2256 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2256 = frontier_phi_46_41_ladder;
        }
        float _2594;
        if (_1830 > 0.0)
        {
            _2594 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_56_53_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_56_53_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_56_53_ladder = 5000.0;
            }
            _2594 = frontier_phi_56_53_ladder;
        }
        float _2596 = isnan(_2256) ? _1939 : (isnan(_1939) ? _2256 : min(_1939, _2256));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1824) + _1813;
        float _2602 = (_2597 * _1827) + _1817;
        float _2603 = (_2597 * _1830) + _1821;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_31_56_ladder;
        float frontier_phi_31_56_ladder_1;
        float frontier_phi_31_56_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_31_56_ladder = 0.0;
            frontier_phi_31_56_ladder_1 = 0.0;
            frontier_phi_31_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_31_56_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1849 = frontier_phi_31_56_ladder_2;
        _1851 = frontier_phi_31_56_ladder_1;
        _1853 = frontier_phi_31_56_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1759);
        _1849 = _1833.x * cbModelParam._m0[1u].z;
        _1851 = _1833.y * cbModelParam._m0[1u].z;
        _1853 = _1833.z * cbModelParam._m0[1u].z;
    }
    float _1866 = (((_853 * _805) + _854) * _820) * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1868 = (((_853 * _807) + _854) * _820) * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1870 = (((_853 * _808) + _854) * _820) * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, _1866 * cbSceneParam._m0[91u].x));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1926 = _1913 / _1925;
    float _1927 = _1917 / _1925;
    float _1928 = _1921 / _1925;
    float _2075;
    float _2076;
    float _2077;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1955 = ((uint(_1928 > cbSceneParam._m0[59u].y) + uint(_1928 > cbSceneParam._m0[59u].x)) + uint(_1928 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1956 = _1955 + 43u;
        uint _1964 = _1955 + 44u;
        uint _1972 = _1955 + 45u;
        uint _1980 = _1955 + 46u;
        float _1991 = fma(_1925, cbSceneParam._m0[_1956].w, fma(_1921, cbSceneParam._m0[_1956].z, fma(_1917, cbSceneParam._m0[_1956].y, _1913 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1925, cbSceneParam._m0[_1964].w, fma(_1921, cbSceneParam._m0[_1964].z, fma(_1917, cbSceneParam._m0[_1964].y, _1913 * cbSceneParam._m0[_1964].x)));
        float _2003 = fma(_1925, cbSceneParam._m0[_1980].w, fma(_1921, cbSceneParam._m0[_1980].z, fma(_1917, cbSceneParam._m0[_1980].y, _1913 * cbSceneParam._m0[_1980].x)));
        float _2008 = cbSceneParam._m0[33u].z * _2003;
        float _2010 = cbSceneParam._m0[33u].w * _2003;
        float _2013 = fma(_1925, cbSceneParam._m0[_1972].w, fma(_1921, cbSceneParam._m0[_1972].z, fma(_1917, cbSceneParam._m0[_1972].y, _1913 * cbSceneParam._m0[_1972].x))) / _2003;
        float _2061 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
        float _4439 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2068 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 + _1991) / _2003, (_2010 + _1995) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1991) / _2003, (_1995 - _2008) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2008) / _2003, (_1995 - _2010) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2010) / _2003, (_2008 + _1995) / _2003), _2013), 0.0)).x), vec4(0.25)));
        _2075 = 1.0 - (_2068 * cbSceneParam._m0[34u].x);
        _2076 = 1.0 - (_2068 * cbSceneParam._m0[34u].y);
        _2077 = 1.0 - (_2068 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2075 = 1.0;
        _2076 = 1.0;
        _2077 = 1.0;
    }
    float _2141;
    float _2143;
    float _2145;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2129 = fma(_1925, cbSceneParam._m0[63u].w, fma(_1921, cbSceneParam._m0[63u].z, fma(_1917, cbSceneParam._m0[63u].y, _1913 * cbSceneParam._m0[63u].x)));
        float _2130 = fma(_1925, cbSceneParam._m0[60u].w, fma(_1921, cbSceneParam._m0[60u].z, fma(_1917, cbSceneParam._m0[60u].y, _1913 * cbSceneParam._m0[60u].x))) / _2129;
        float _2131 = fma(_1925, cbSceneParam._m0[61u].w, fma(_1921, cbSceneParam._m0[61u].z, fma(_1917, cbSceneParam._m0[61u].y, _1913 * cbSceneParam._m0[61u].x))) / _2129;
        float frontier_phi_43_42_ladder;
        float frontier_phi_43_42_ladder_1;
        float frontier_phi_43_42_ladder_2;
        if ((((_2130 >= cbSceneParam._m0[64u].x) && (_2131 >= cbSceneParam._m0[64u].y)) && (_2130 <= cbSceneParam._m0[64u].z)) && (_2131 <= cbSceneParam._m0[64u].w))
        {
            float _2269 = fma(_1925, cbSceneParam._m0[62u].w, fma(_1921, cbSceneParam._m0[62u].z, fma(_1917, cbSceneParam._m0[62u].y, _1913 * cbSceneParam._m0[62u].x))) / _2129;
            float _2273 = isnan(cbSceneParam._m0[41u].w) ? _2269 : (isnan(_2269) ? cbSceneParam._m0[41u].w : max(_2269, cbSceneParam._m0[41u].w));
            float _2316 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
            float _4455 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
            float _2323 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2130, cbSceneParam._m0[33u].w + _2131), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2130, _2131 - cbSceneParam._m0[33u].z), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].z, _2131 - cbSceneParam._m0[33u].w), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2131), _2273), 0.0)).x), vec4(0.25)));
            float _2327 = 1.0 - (_2323 * cbSceneParam._m0[34u].x);
            float _2328 = 1.0 - (_2323 * cbSceneParam._m0[34u].y);
            float _2329 = 1.0 - (_2323 * cbSceneParam._m0[34u].z);
            frontier_phi_43_42_ladder = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
            frontier_phi_43_42_ladder_1 = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
            frontier_phi_43_42_ladder_2 = isnan(_2327) ? _2075 : (isnan(_2075) ? _2327 : min(_2075, _2327));
        }
        else
        {
            frontier_phi_43_42_ladder = _2077;
            frontier_phi_43_42_ladder_1 = _2076;
            frontier_phi_43_42_ladder_2 = _2075;
        }
        _2141 = frontier_phi_43_42_ladder_2;
        _2143 = frontier_phi_43_42_ladder_1;
        _2145 = frontier_phi_43_42_ladder;
    }
    else
    {
        _2141 = _2075;
        _2143 = _2076;
        _2145 = _2077;
    }
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_748 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2160 = _820 + (-1.0);
    float _2165 = (cbLight._m0[_2153].x * _2160) + 1.0;
    float _2166 = (cbLight._m0[_2153].y * _2160) + 1.0;
    float _2167 = (cbLight._m0[_2153].z * _2160) + 1.0;
    float _2168 = (cbLight._m0[_2153].w * _2160) + 1.0;
    uint _2169 = _2152 + 5u;
    float _2175 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2179 = _2152 + 4u;
    float _2188 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2192 = _2152 | 1u;
    float _2203 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_588, _589, _590));
    float _2206 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_588, _589, _590));
    float _4491 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _4502 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2211 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2213 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2220 = ((cbLight._m0[_2169].x * _2175) * _2213) + (((cbLight._m0[_2179].x * _2141) * _2188) * _2211);
    float _2221 = ((_2175 * cbLight._m0[_2169].y) * _2213) + (((cbLight._m0[_2179].y * _2143) * _2188) * _2211);
    float _2222 = ((_2175 * cbLight._m0[_2169].z) * _2213) + (((cbLight._m0[_2179].z * _2145) * _2188) * _2211);
    uvec4 _2226 = floatBitsToUint(cbLight._m0[_2152 + 12u]);
    bool _2228 = _2226.x == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2228)
    {
        _2330 = _2220;
        _2332 = _2221;
        _2334 = _2222;
    }
    else
    {
        uint _2338 = _2152 + 6u;
        float _2354 = (dot(vec3(cbLight._m0[_2152 + 2u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4513 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2357 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2330 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2220;
        _2332 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2221;
        _2334 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2222;
    }
    bool _2337 = _2226.y == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2337)
    {
        _2392 = _2330;
        _2394 = _2332;
        _2396 = _2334;
    }
    else
    {
        uint _2565 = _2152 + 7u;
        float _2581 = (dot(vec3(cbLight._m0[_2152 + 3u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2582 = _2581 * _2581;
        float _4529 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2583 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2584 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2392 = (((cbLight._m0[_2565].x * 0.3183098733425140380859375) * _2583) * _2584) + _2330;
        _2394 = (((cbLight._m0[_2565].y * 0.3183098733425140380859375) * _2583) * _2584) + _2332;
        _2396 = (((cbLight._m0[_2565].z * 0.3183098733425140380859375) * _2583) * _2584) + _2334;
    }
    uint _2399 = _2152 + 8u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _735) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2152].x + _669;
    float _2415 = cbLight._m0[_2152].y + _670;
    float _2416 = cbLight._m0[_2152].z + _671;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2152].xyz));
    float _4545 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _4556 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2428 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2429 = dot(vec3(_588, _589, _590), vec3(_2421, _2422, _2423));
    float _4567 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2421, _2422, _2423));
    float _4578 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2413 * _2413;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0);
    float _2450 = 0.959999978542327880859375 - _802;
    float _2452 = 0.959999978542327880859375 - _803;
    float _2453 = 0.959999978542327880859375 - _804;
    float _2460 = 1.0 - _2413;
    float _2471 = (0.5 / (((_2428 * ((_2427 * _2460) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2460) + _2413) * _2427))) * _2427;
    float _4589 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2473 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    uint _2487 = _2152 + 9u;
    float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _735) * 0.949999988079071044921875);
    float _2499 = _2498 * _2498;
    float _2500 = cbLight._m0[_2192].x + _669;
    float _2501 = cbLight._m0[_2192].y + _670;
    float _2502 = cbLight._m0[_2192].z + _671;
    float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
    float _2507 = _2506 * _2500;
    float _2508 = _2506 * _2501;
    float _2509 = _2506 * _2502;
    float _2510 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2192].xyz));
    float _4600 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2514 = dot(vec3(_588, _589, _590), vec3(_2507, _2508, _2509));
    float _4611 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2518 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2507, _2508, _2509));
    float _4622 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2522 = _2499 * _2499;
    float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
    float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
    float _2540 = 1.0 - _2499;
    float _2550 = (0.5 / (((_2428 * ((_2513 * _2540) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2540) + _2499) * _2513))) * _2513;
    float _4633 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
    float _2562 = (((((_2533 * _2450) + _805) * cbLight._m0[_2487].x) * _2552) * _2175) + ((((cbLight._m0[_2399].x * _2141) * ((_2449 * _2450) + _805)) * _2473) * _2188);
    float _2563 = (((((_2533 * _2452) + _807) * cbLight._m0[_2487].y) * _2552) * _2175) + ((((cbLight._m0[_2399].y * _2143) * ((_2449 * _2452) + _807)) * _2473) * _2188);
    float _2564 = (((((_2533 * _2453) + _808) * cbLight._m0[_2487].z) * _2552) * _2175) + ((((cbLight._m0[_2399].z * _2145) * ((_2449 * _2453) + _808)) * _2473) * _2188);
    float _2620;
    float _2622;
    float _2624;
    if (_2228)
    {
        _2620 = _2562;
        _2622 = _2563;
        _2624 = _2564;
    }
    else
    {
        uint _2626 = _2152 + 2u;
        uint _2630 = _2152 + 10u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _735) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _669;
        float _2647 = cbLight._m0[_2626].y + _670;
        float _2648 = cbLight._m0[_2626].z + _671;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2626].xyz));
        float _4644 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2660 = dot(vec3(_588, _589, _590), vec3(_2653, _2654, _2655));
        float _4655 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4666 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2428 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2686) + _2645) * _2659))) * _2659;
        float _4677 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2620 = (((((_2679 * _2450) + _805) * cbLight._m0[_2630].x) * _2698) * _2699) + _2562;
        _2622 = (((((_2679 * _2452) + _807) * cbLight._m0[_2630].y) * _2698) * _2699) + _2563;
        _2624 = (((((_2679 * _2453) + _808) * cbLight._m0[_2630].z) * _2698) * _2699) + _2564;
    }
    float _2730;
    float _2732;
    float _2734;
    if (_2337)
    {
        _2730 = _2620;
        _2732 = _2622;
        _2734 = _2624;
    }
    else
    {
        uint _2741 = _2152 + 3u;
        uint _2745 = _2152 + 11u;
        float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2741].w)) * _735) * 0.949999988079071044921875);
        float _2760 = _2759 * _2759;
        float _2761 = cbLight._m0[_2741].x + _669;
        float _2762 = cbLight._m0[_2741].y + _670;
        float _2763 = cbLight._m0[_2741].z + _671;
        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
        float _2768 = _2767 * _2761;
        float _2769 = _2767 * _2762;
        float _2770 = _2767 * _2763;
        float _2771 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2741].xyz));
        float _4693 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2775 = dot(vec3(_588, _589, _590), vec3(_2768, _2769, _2770));
        float _4704 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2779 = dot(vec3(cbLight._m0[_2741].xyz), vec3(_2768, _2769, _2770));
        float _4715 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2783 = _2760 * _2760;
        float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
        float _2794 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
        float _2801 = 1.0 - _2760;
        float _2811 = (0.5 / (((_2428 * ((_2774 * _2801) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2801) + _2760) * _2774))) * _2774;
        float _4726 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2730 = (((((_2794 * _2450) + _805) * cbLight._m0[_2745].x) * _2813) * _2814) + _2620;
        _2732 = (((((_2794 * _2452) + _807) * cbLight._m0[_2745].y) * _2813) * _2814) + _2622;
        _2734 = (((((_2794 * _2453) + _808) * cbLight._m0[_2745].z) * _2813) * _2814) + _2624;
    }
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_2150.y == 0u)
    {
        uvec4 _2835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2836 = _2835.x;
        uint _2847 = uint((float(_2835.y) * floor(float(uint(cbSceneParam._m0[85u].y * _693) / _2836))) + floor(float(uint(cbSceneParam._m0[85u].x * _692) / _2836)));
        float _2857 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2858 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        uint _2861 = uint(isnan(14.0) ? _2858 : (isnan(_2858) ? 14.0 : min(_2858, 14.0)));
        uvec4 _2866 = texelFetch(g_lightClusterGridBuffer, int(((_2861 << 2u) + (_2847 << 6u)) >> 2u));
        uint _2867 = _2866.x;
        uint _2868 = _2835.z;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((((1u << ((_2868 >> 4u) & 15u)) + 4294967295u) & _2867) == 0u) || ((_2868 & 240u) == 0u))
        {
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
        }
        else
        {
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            uint _3122 = 0u;
            uint _3131;
            bool _3132;
            for (;;)
            {
                _3131 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                _3132 = _3131 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_3132)
                {
                    frontier_phi_77_pred = _3121;
                    frontier_phi_77_pred_1 = _3120;
                    frontier_phi_77_pred_2 = _3119;
                    frontier_phi_77_pred_3 = _3118;
                    frontier_phi_77_pred_4 = _3116;
                    frontier_phi_77_pred_5 = _3117;
                }
                else
                {
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    uint _3267;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3131;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    for (;;)
                    {
                        uint _3271 = uint(findLSB(_3267)) + (_3122 << 5u);
                        uint _3268 = (_3267 + 4294967295u) & _3267;
                        uint _3273 = _3271 * 48u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3293 = (_3271 * 48u) + 4u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3312 = (_3271 * 48u) + 8u;
                        vec3 _3323 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x));
                        float _3327 = _3287.x - _1926;
                        float _3328 = _3287.y - _1927;
                        float _3329 = _3287.z - _1928;
                        float _3330 = dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329));
                        float _3333 = inversesqrt(_3330);
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3337 = dot(vec3(_716, _719, _722), vec3(_3334, _3335, _3336));
                        float _3342 = 1.0 - (_3330 * _3287.w);
                        float _4752 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3344 = sqrt(_3330) * _3306.w;
                        float _3347 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3337) + _3348;
                        float _3354 = _3344 * _3344;
                        float _3358 = ((isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))) * _3343) / ((_3354 * 0.699999988079071044921875) + 1.0);
                        float _3362 = (-0.0) - _1926;
                        float _3363 = (-0.0) - _1927;
                        float _3364 = (-0.0) - _1928;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3378 = exp2(log2(1.0 / ((_3354 * 3.5) + 5.0)) * 0.25);
                        float _3379 = 1.0 - _836;
                        float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                        float _3387 = _3386 * _3386;
                        float _3388 = _3387 * _3387;
                        float _3389 = _3369 + _3334;
                        float _3390 = _3370 + _3335;
                        float _3391 = _3371 + _3336;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3399 = dot(vec3(_716, _719, _722), vec3(_3369, _3370, _3371));
                        float _4768 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3403 = dot(vec3(_716, _719, _722), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                        float _4779 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                        float _3411 = _3347 * _3387;
                        float _3412 = _3411 * _3411;
                        float _3415 = ((1.0 - _3412) * _3337) + _3412;
                        float _4790 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3417 = 1.0 - _3387;
                        float _3427 = (0.5 / (((_3416 * ((_3402 * _3417) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3387) * _3402))) * _3416;
                        float _4801 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3438 = (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3410 * _3410) * ((_3354 * 2.1991131305694580078125) + 3.141590118408203125))) * _3343;
                        _3191 = (_3358 * _3306.x) + _3264;
                        _3192 = (_3358 * _3306.y) + _3265;
                        _3193 = (_3358 * _3306.z) + _3266;
                        _3188 = (_3438 * _3323.x) + _3261;
                        _3189 = (_3438 * _3323.y) + _3262;
                        _3190 = (_3438 * _3323.z) + _3263;
                        if (_3268 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3268;
                        }
                    }
                    frontier_phi_77_pred = _3193;
                    frontier_phi_77_pred_1 = _3192;
                    frontier_phi_77_pred_2 = _3191;
                    frontier_phi_77_pred_3 = _3190;
                    frontier_phi_77_pred_4 = _3188;
                    frontier_phi_77_pred_5 = _3189;
                }
                _2975 = frontier_phi_77_pred;
                _2973 = frontier_phi_77_pred_1;
                _2971 = frontier_phi_77_pred_2;
                _2969 = frontier_phi_77_pred_3;
                _2965 = frontier_phi_77_pred_4;
                _2967 = frontier_phi_77_pred_5;
                uint _3123 = _3122 + 1u;
                if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3116 = _2965;
                    _3117 = _2967;
                    _3118 = _2969;
                    _3119 = _2971;
                    _3120 = _2973;
                    _3121 = _2975;
                    _3122 = _3123;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
        }
        uvec4 _2978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2979 = _2978.z;
        uint _2981 = (_2979 >> 8u) & 15u;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        if (((4294967295u << _2981) & _2867) == 0u)
        {
            _3084 = _2964;
            _3086 = _2966;
            _3088 = _2968;
            _3090 = _2970;
            _3092 = _2972;
            _3094 = _2974;
        }
        else
        {
            float _3109 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float _3110 = _3109 * _1926;
            float _3111 = _3109 * _1927;
            float _3112 = _3109 * _1928;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2981 < ((_2979 >> 12u) & 15u))
            {
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3244 = _2964;
                float _3245 = _2966;
                float _3246 = _2968;
                float _3247 = _2970;
                float _3248 = _2972;
                float _3249 = _2974;
                uint _3250 = _2981;
                uint _3259;
                bool _3260;
                for (;;)
                {
                    _3259 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                    _3260 = _3259 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_3260)
                    {
                        frontier_phi_88_pred = _3245;
                        frontier_phi_88_pred_1 = _3244;
                        frontier_phi_88_pred_2 = _3249;
                        frontier_phi_88_pred_3 = _3248;
                        frontier_phi_88_pred_4 = _3247;
                        frontier_phi_88_pred_5 = _3246;
                    }
                    else
                    {
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        float _3469 = _3248;
                        float _3470 = _3249;
                        uint _3471 = _3259;
                        uint _3472;
                        vec4 _3497;
                        float _3498;
                        vec4 _3513;
                        vec3 _3525;
                        vec4 _3540;
                        vec4 _3555;
                        float _3601;
                        bool _3602;
                        for (;;)
                        {
                            uint _3482 = ((_3250 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3471));
                            _3472 = (_3471 + 4294967295u) & _3471;
                            uint _3484 = _3482 * 40u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3498 = _3497.w;
                            uint _3500 = (_3482 * 40u) + 4u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3482 * 40u) + 8u;
                            _3525 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x));
                            uint _3527 = (_3482 * 40u) + 16u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3482 * 40u) + 20u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3482 * 40u) + 24u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3576 = (_3482 * 40u) + 28u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            _3601 = fma(_1928, _3589.z, fma(_1927, _3589.y, _3589.x * _1926)) + _3589.w;
                            _3602 = !((fma(_1928, _3570.z, fma(_1927, _3570.y, _3570.x * _1926)) + _3570.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3602)
                            {
                                float _3629 = _3497.x - _1926;
                                float _3630 = _3497.y - _1927;
                                float _3631 = _3497.z - _1928;
                                float _3632 = dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631));
                                float _3635 = inversesqrt(_3632);
                                float _3636 = _3635 * _3629;
                                float _3637 = _3635 * _3630;
                                float _3638 = _3635 * _3631;
                                float _3642 = 1.0 - (_3632 / (_3498 * _3498));
                                float _4812 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3647 = sqrt(_3632) * _3513.w;
                                float _3649 = 1.39999997615814208984375 / (_3647 + 1.39999997615814208984375);
                                float _3650 = _3649 * _3649;
                                float _3653 = ((1.0 - _3650) * dot(vec3(_3636, _3637, _3638), vec3(_716, _719, _722))) + _3650;
                                float _3656 = _3647 * _3647;
                                float _3660 = (fma(_1928, _3540.z, fma(_1927, _3540.y, _3540.x * _1926)) + _3540.w) / _3601;
                                float _3661 = (fma(_1928, _3555.z, fma(_1927, _3555.y, _3555.x * _1926)) + _3555.w) / _3601;
                                float _3665 = 1.0 - dot(vec2(_3660, _3661), vec2(_3660, _3661));
                                float _4828 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3667 = _3666 * (((isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0))) * _3643) / ((_3656 * 0.699999988079071044921875) + 1.0));
                                float _3679 = exp2(log2(1.0 / ((_3656 * 3.5) + 5.0)) * 0.25);
                                float _3680 = 1.0 - _836;
                                float _3687 = sqrt(1.0 - ((1.0 - (_3680 * _3680)) * (1.0 - (_3679 * _3679))));
                                float _3688 = _3687 * _3687;
                                float _3689 = _3688 * _3688;
                                float _3690 = _3636 - _3110;
                                float _3691 = _3637 - _3111;
                                float _3692 = _3638 - _3112;
                                float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                                float _3700 = dot(vec3(_716, _719, _722), vec3((-0.0) - _3110, (-0.0) - _3111, (-0.0) - _3112));
                                float _4839 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3704 = dot(vec3(_716, _719, _722), vec3(_3696 * _3690, _3696 * _3691, _3696 * _3692));
                                float _4850 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3711 = ((_3707 * _3707) * (_3689 + (-1.0))) + 1.0;
                                float _3712 = _3649 * _3688;
                                float _3713 = _3712 * _3712;
                                float _3719 = ((1.0 - _3713) * dot(vec3(_716, _719, _722), vec3(_3636, _3637, _3638))) + _3713;
                                float _4861 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3721 = 1.0 - _3688;
                                float _3731 = (0.5 / (((_3720 * ((_3703 * _3721) + _3688)) + 9.9999999392252902907785028219223e-09) + (((_3720 * _3721) + _3688) * _3703))) * _3720;
                                float _4872 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3741 = (_3666 * _3643) * (((_3689 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3711 * _3711) * ((_3656 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3741 * _3525.y;
                                frontier_phi_94_pred_1 = _3741 * _3525.x;
                                frontier_phi_94_pred_2 = _3667 * _3513.z;
                                frontier_phi_94_pred_3 = _3667 * _3513.y;
                                frontier_phi_94_pred_4 = _3667 * _3513.x;
                                frontier_phi_94_pred_5 = _3741 * _3525.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3746 = frontier_phi_94_pred;
                            _3745 = frontier_phi_94_pred_1;
                            _3750 = frontier_phi_94_pred_2;
                            _3749 = frontier_phi_94_pred_3;
                            _3748 = frontier_phi_94_pred_4;
                            _3747 = frontier_phi_94_pred_5;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            if (_3472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3472;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3453;
                        frontier_phi_88_pred_1 = _3452;
                        frontier_phi_88_pred_2 = _3457;
                        frontier_phi_88_pred_3 = _3456;
                        frontier_phi_88_pred_4 = _3455;
                        frontier_phi_88_pred_5 = _3454;
                    }
                    _3087 = frontier_phi_88_pred;
                    _3085 = frontier_phi_88_pred_1;
                    _3095 = frontier_phi_88_pred_2;
                    _3093 = frontier_phi_88_pred_3;
                    _3091 = frontier_phi_88_pred_4;
                    _3089 = frontier_phi_88_pred_5;
                    uint _3251 = _3250 + 1u;
                    if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3244 = _3085;
                        _3245 = _3087;
                        _3246 = _3089;
                        _3247 = _3091;
                        _3248 = _3093;
                        _3249 = _3095;
                        _3250 = _3251;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _3095;
                frontier_phi_69_70_ladder_1 = _3091;
                frontier_phi_69_70_ladder_2 = _3089;
                frontier_phi_69_70_ladder_3 = _3087;
                frontier_phi_69_70_ladder_4 = _3085;
                frontier_phi_69_70_ladder_5 = _3093;
            }
            else
            {
                frontier_phi_69_70_ladder = _2974;
                frontier_phi_69_70_ladder_1 = _2970;
                frontier_phi_69_70_ladder_2 = _2968;
                frontier_phi_69_70_ladder_3 = _2966;
                frontier_phi_69_70_ladder_4 = _2964;
                frontier_phi_69_70_ladder_5 = _2972;
            }
            _3084 = frontier_phi_69_70_ladder_4;
            _3086 = frontier_phi_69_70_ladder_3;
            _3088 = frontier_phi_69_70_ladder_2;
            _3090 = frontier_phi_69_70_ladder_1;
            _3092 = frontier_phi_69_70_ladder_5;
            _3094 = frontier_phi_69_70_ladder;
        }
        float _3099 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2879 = (_3099 * _3090) + _2392;
        _2881 = (_3099 * _3092) + _2394;
        _2883 = (_3099 * _3094) + _2396;
        _2885 = ((_3084 * _805) * _3099) + _2730;
        _2887 = ((_3086 * _807) * _3099) + _2732;
        _2889 = ((_3088 * _808) * _3099) + _2734;
    }
    else
    {
        _2879 = _2392;
        _2881 = _2394;
        _2883 = _2396;
        _2885 = _2730;
        _2887 = _2732;
        _2889 = _2734;
    }
    vec4 _2895 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4888 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4899 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4910 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2919 = (((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2879 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _820))) + ((_2885 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1659)) * cbPerFrame._m0[3u].x)) + (_2895.x * cbMtdParam._m0[3u].x);
    float _2921 = ((_2895.y * cbMtdParam._m0[3u].x) + ((_2887 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1659)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2881 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _820)));
    float _2923 = ((_2895.z * cbMtdParam._m0[3u].x) + ((_2889 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1659)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2883 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _820)));
    float _2924 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
    float _2925 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
    float _2926 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
    uint _2927 = _748 + 6u;
    float _2935 = _692 / cbSceneParam._m0[86u].x;
    float _2936 = _693 / cbSceneParam._m0[86u].y;
    vec4 _2950 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, (log2((isnan(cbSceneParam._m0[77u].w) ? _611 : (isnan(_611) ? cbSceneParam._m0[77u].w : min(_611, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2952 = _2950.x;
    float _2953 = _2950.y;
    float _2954 = _2950.z;
    float _2955 = _2950.w;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_611 > cbSceneParam._m0[78u].w)
    {
        float _2989 = isnan(_611) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _611 : min(cbSceneParam._m0[80u].w, _611));
        float _2990 = _2989 / _611;
        float _3001 = _2990 * _662;
        float _3002 = _663 * _2990;
        float _3003 = (-0.0) - _3002;
        float _3004 = _2990 * _664;
        float _3006 = (cbSceneParam._m0[77u].w * _3003) / _2989;
        float _3007 = _3006 + cbSceneParam._m0[79u].w;
        float _3008 = cbSceneParam._m0[79u].w - _3002;
        float _3014 = sqrt(((_3001 * _3001) + (_3002 * _3002)) + (_3004 * _3004));
        float _3017 = (1.0 - (cbSceneParam._m0[77u].w / _2989)) * _3014;
        float _3022 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3024 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3201;
        if (abs((_3003 - _3006) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3201 = ((((_3007 > 0.0) ? exp2(_3022 * _3007) : (2.0 - exp2(_3024 * _3007))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3017;
        }
        else
        {
            float _3145 = 1.0 / cbSceneParam._m0[80u].x;
            float _3146 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : max(_3007, _3008));
            float _3147 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : min(_3007, _3008));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            _3201 = ((abs(_3014 / _3003) * cbSceneParam._m0[80u].y) * ((((_3156 - _3157) * 2.0) - ((exp2(_3022 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0)))) - exp2(_3022 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))))) * _3145)) - ((exp2(_3024 * _3156) - exp2(_3024 * _3157)) * _3145))) + (_3017 * cbSceneParam._m0[80u].z);
        }
        vec4 _3203 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, 1.0), 0.0);
        float _3212 = exp2((_3201 * (-1.44269502162933349609375)) * (1.0 - _3203.w));
        float _3213 = log2(_3212);
        float _3229 = log2(_2955);
        _3026 = (exp2(_3229 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].x)) * _3203.x) / cbSceneParam._m0[78u].x)) + _2952;
        _3028 = (exp2(_3229 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].y)) * _3203.y) / cbSceneParam._m0[78u].y)) + _2953;
        _3030 = (exp2(_3229 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].z)) * _3203.z) / cbSceneParam._m0[78u].z)) + _2954;
        _3032 = _3212 * _2955;
    }
    else
    {
        _3026 = _2952;
        _3028 = _2953;
        _3030 = _2954;
        _3032 = _2955;
    }
    bool _3239;
    vec4 _3042;
    vec4 _3064;
    float _3066;
    float _3070;
    float _3071;
    float _3072;
    float _3073;
    bool _3083;
    for (;;)
    {
        _3042 = cbMatDynParam._m0[0u];
        float _3044 = roundEven(_3042.y);
        bool _3045 = _3044 == 3.0;
        float _3046 = log2(_3032);
        float _3053 = exp2(_3046 * cbSceneParam._m0[78u].x) * _2924;
        float _3054 = exp2(_3046 * cbSceneParam._m0[78u].y) * _2925;
        float _3055 = exp2(_3046 * cbSceneParam._m0[78u].z) * _2926;
        float _3062 = _678 + (-0.5);
        _3064 = cbMtdParam._m0[1u];
        _3066 = _3064.y * _3062;
        float _3069 = (_3044 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3070 = _3069 * (_3045 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3026)));
        _3071 = _3069 * (_3045 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3028)));
        _3072 = _3069 * (_3045 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3030)));
        _3073 = _3062 * 0.999000012874603271484375;
        _3083 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3083)
        {
            if ((cbInstanceData._m0[_748 + 7u].x + _3073) < 0.5)
            {
                _3239 = true;
                break;
            }
        }
        uint _3180 = _749 + uint(_3042.w);
        if ((cbInstanceData._m0[_3180].w < 1.0) && ((cbInstanceData._m0[_3180].w + _3073) < 0.5))
        {
            _3239 = true;
            break;
        }
        if ((_3066 + 1.0) < _3064.x)
        {
            _3239 = true;
            break;
        }
        _3239 = false;
        break;
    }
    float _3443;
    if (_3239)
    {
        discard_state = true;
        _3443 = 0.0;
    }
    else
    {
        _3443 = cbInstanceData._m0[_2927].w;
    }
    SV_Target.x = _3070;
    SV_Target.y = _3071;
    SV_Target.z = _3072;
    SV_Target.w = _3443;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2927].w;
    discard_exit();
}


