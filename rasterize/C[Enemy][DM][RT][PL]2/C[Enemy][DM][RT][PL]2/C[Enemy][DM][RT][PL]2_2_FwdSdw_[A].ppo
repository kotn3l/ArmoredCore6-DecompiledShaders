#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1217;
float _3903;
float _3904;
float _3905;
float _3906;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _278 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _289 = exp2(log2(_278.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[15u].x;
    _198[0u] = cbMtdParam._m0[15u].y;
    _199[0u] = cbMtdParam._m0[15u].z;
    _197[1u] = cbMtdParam._m0[16u].x;
    _198[1u] = cbMtdParam._m0[16u].y;
    _199[1u] = cbMtdParam._m0[16u].z;
    _197[2u] = cbMtdParam._m0[17u].x;
    _198[2u] = cbMtdParam._m0[17u].y;
    _199[2u] = cbMtdParam._m0[17u].z;
    _197[3u] = cbMtdParam._m0[12u].x;
    _198[3u] = cbMtdParam._m0[12u].y;
    _199[3u] = cbMtdParam._m0[12u].z;
    _197[4u] = cbMtdParam._m0[13u].x;
    _198[4u] = cbMtdParam._m0[13u].y;
    _199[4u] = cbMtdParam._m0[13u].z;
    _197[5u] = cbMtdParam._m0[14u].x;
    _198[5u] = cbMtdParam._m0[14u].y;
    _199[5u] = cbMtdParam._m0[14u].z;
    vec4 _356 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _359 = _356.y;
    float _362 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _364 = roundEven(_362);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    uint _368 = uint(int(isnan(5.0) ? _365 : (isnan(_365) ? 5.0 : min(_365, 5.0))));
    float _385;
    if (_289)
    {
        _385 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _385 = cbMtdParam._m0[20u].z;
    }
    float _391;
    float _393;
    if (_289)
    {
        _391 = cbMtdParam._m0[28u].z;
        _393 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _391 = cbMtdParam._m0[24u].x;
        _393 = cbMtdParam._m0[24u].y;
    }
    float _395 = _391 * TEXCOORD.x;
    float _396 = _393 * TEXCOORD.y;
    float _408 = floor(_385);
    vec4 _411 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _395) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _396) + cbTextureTilingScale._m0[8u].w, _408));
    vec4 _433 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _441 = ((((((_197[_368] - cbMtdParam._m0[19u].x) * _359) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _411.x) * cbMtdParam._m0[9u].x) * _433.x;
    float _445 = ((((((_198[_368] - cbMtdParam._m0[19u].y) * _359) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _411.y) * cbMtdParam._m0[9u].y) * _433.y;
    float _449 = ((((((_199[_368] - cbMtdParam._m0[19u].z) * _359) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _411.z) * cbMtdParam._m0[9u].z) * _433.z;
    vec4 _461 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _465 = _461.z;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[25u].x;
    _193[0u] = cbMtdParam._m0[25u].y;
    _192[1u] = cbMtdParam._m0[26u].x;
    _193[1u] = cbMtdParam._m0[26u].y;
    _192[2u] = cbMtdParam._m0[26u].z;
    _193[2u] = cbMtdParam._m0[26u].w;
    _192[3u] = cbMtdParam._m0[27u].x;
    _193[3u] = cbMtdParam._m0[27u].y;
    _192[4u] = cbMtdParam._m0[25u].z;
    _193[4u] = cbMtdParam._m0[25u].w;
    float _510 = roundEven(5.0 - _362);
    float _511 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = isnan(4.0) ? _511 : (isnan(_511) ? 4.0 : min(_511, 4.0));
    float _514 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    uint _516 = uint(int(isnan(4.0) ? _514 : (isnan(_514) ? 4.0 : min(_514, 4.0))));
    float _522 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _395) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _396) + cbTextureTilingScale._m0[10u].w, _408)).x + _461.w) + _193[_516];
    vec4 _540 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _395) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _396) + cbTextureTilingScale._m0[9u].w, _408));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3945 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))));
    float _565 = (cbMtdParam._m0[21u].x * (((_465 * 2.0) * (_540.z + _192[_516])) - _465)) + _465;
    float _569 = (cbMtdParam._m0[21u].y * ((_461.x * 2.0) + (-1.0))) + _547;
    float _570 = (cbMtdParam._m0[21u].y * ((_461.y * 2.0) + (-1.0))) + _548;
    float _573 = fma(_555, _249, fma(_570, _241 * TANGENT.x, (_227 * _219) * _569));
    float _576 = fma(_555, _250, fma(_570, _241 * TANGENT.y, (_227 * _220) * _569));
    float _579 = fma(_555, _251, fma(_570, _241 * TANGENT.z, (_227 * _221) * _569));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3956 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _587 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3978 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3989 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4000 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _591 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _607 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _658 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _648);
    float _659 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _648);
    float _660 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _648);
    float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
    float _665 = _658 * _664;
    float _666 = _659 * _664;
    float _667 = _660 * _664;
    vec4 _672 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _674 = _672.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _897 = sqrt(((_658 * _658) + (_659 * _659)) + (_660 * _660));
        float _903 = (cbMatDynParam._m0[5u].x * _897) + cbMatDynParam._m0[5u].y;
        float _4011 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _908 = (cbMatDynParam._m0[5u].z * _897) + cbMatDynParam._m0[5u].w;
        float _4022 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) - _904)) + _904) < ((_674 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _688 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _689 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _691 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _693 = _691.w;
    float _712 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _715 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _718 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    vec4 _720 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _731 = (((_720.y - _587) + (_720.w * _587)) * cbMtdParam._m0[3u].x) + _587;
    uint _744 = uint(roundEven(NORMAL.w)) * 13u;
    uint _745 = _744 + 9u;
    uint _746 = _745 + uint(cbMatDynParam._m0[0u].w);
    float _752 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_746].x;
    float _753 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_746].y;
    float _754 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_746].z;
    float _4033 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    vec4 _758 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _763 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _774 = (((_763.x - _591) + (_763.w * _591)) * cbMtdParam._m0[3u].x) + _591;
    float _787 = (cbMtdParam._m0[3u].x * (((_755 * _693) - _755) + _758.x)) + _755;
    float _788 = (cbMtdParam._m0[3u].x * (((_756 * _693) - _756) + _758.y)) + _756;
    float _789 = (cbMtdParam._m0[3u].x * (((_757 * _693) - _757) + _758.z)) + _757;
    float _790 = 1.0 - _774;
    float _791 = _790 * _787;
    float _792 = _790 * _788;
    float _793 = _790 * _789;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _774;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _774;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _774;
    float _801 = _798 + 0.039999999105930328369140625;
    float _803 = _799 + 0.039999999105930328369140625;
    float _804 = _800 + 0.039999999105930328369140625;
    vec4 _813 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _688, cbSceneParam._m0[86u].y * _689));
    float _816 = _813.x * TEXCOORD_4;
    float _817 = dot(vec3(_584, _585, _586), vec3(_665, _666, _667));
    float _820 = _817 * 2.0;
    float _824 = (_820 * _584) - _665;
    float _825 = (_820 * _585) - _666;
    float _826 = (_820 * _586) - _667;
    float _830 = abs(dot(vec3(_665, _666, _667), vec3(_584, _585, _586)));
    float _4066 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _832 = sqrt(_731);
    float _843 = exp2((_832 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_832 * 3.0));
    float _849 = (1.0 - _843) * ((_832 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _850 = _843 * _832;
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_886, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878));
        float _945 = fma(_886, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878));
        float _949 = fma(_886, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878));
        float _974 = _878 + _584;
        float _975 = _882 + _585;
        float _976 = _886 + _586;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _941;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _945;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _949;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_584, _585, _586), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4114 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_584, _585, _586), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4147 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_584, _585, _586), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _4180 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_886, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878));
        float _1264 = fma(_886, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878));
        float _1268 = fma(_886, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878));
        float _1291 = _878 + _584;
        float _1292 = _882 + _585;
        float _1293 = _886 + _586;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_584, _585, _586), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4243 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_584, _585, _586), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4276 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_584, _585, _586), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4309 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = _1217;
        _1538 = _1217;
        _1539 = _1217;
        _1540 = _1217;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1230)) + _1230;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _824 * 0.5;
    float _1598 = _825 * 0.5;
    float _1599 = _826 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _731);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_886, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_886, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_886, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_826, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824));
        float _1727 = fma(_826, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824));
        float _1730 = fma(_826, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_23_21_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_23_21_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_23_21_ladder = 5000.0;
            }
            _1758 = frontier_phi_23_21_ladder;
        }
        float _1930;
        if (_1727 > 0.0)
        {
            _1930 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1930 = frontier_phi_32_28_ladder;
        }
        float _2225;
        if (_1730 > 0.0)
        {
            _2225 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2225 = frontier_phi_44_39_ladder;
        }
        float _2227 = isnan(_1930) ? _1758 : (isnan(_1758) ? _1930 : min(_1758, _1930));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1724) + _1713;
        float _2233 = (_2228 * _1727) + _1717;
        float _2234 = (_2228 * _1730) + _1721;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_22_44_ladder;
        float frontier_phi_22_44_ladder_1;
        float frontier_phi_22_44_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_22_44_ladder = 0.0;
            frontier_phi_22_44_ladder_1 = 0.0;
            frontier_phi_22_44_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_22_44_ladder = _2379.x * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_1 = _2379.z * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_2 = _2379.y * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_22_44_ladder;
        _1748 = frontier_phi_22_44_ladder_2;
        _1750 = frontier_phi_22_44_ladder_1;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_824, _825, _826), _1666);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _731);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_886, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_886, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_886, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_826, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824));
        float _1823 = fma(_826, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824));
        float _1826 = fma(_826, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824));
        float _1935;
        if (_1820 > 0.0)
        {
            _1935 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1935 = frontier_phi_34_30_ladder;
        }
        float _2252;
        if (_1823 > 0.0)
        {
            _2252 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2252 = frontier_phi_46_41_ladder;
        }
        float _2590;
        if (_1826 > 0.0)
        {
            _2590 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_56_53_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_56_53_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_56_53_ladder = 5000.0;
            }
            _2590 = frontier_phi_56_53_ladder;
        }
        float _2592 = isnan(_2252) ? _1935 : (isnan(_1935) ? _2252 : min(_1935, _2252));
        float _2593 = isnan(_2590) ? _2592 : (isnan(_2592) ? _2590 : min(_2592, _2590));
        float _2597 = (_2593 * _1820) + _1809;
        float _2598 = (_2593 * _1823) + _1813;
        float _2599 = (_2593 * _1826) + _1817;
        float _2600 = _2593 * 9.9999997473787516355514526367188e-05;
        float _2601 = (-1.0) - _2600;
        float _2603 = _2600 + 1.0;
        float frontier_phi_31_56_ladder;
        float frontier_phi_31_56_ladder_1;
        float frontier_phi_31_56_ladder_2;
        if ((_2599 > _2603) || ((_2599 < _2601) || ((_2598 > _2603) || ((_2598 < _2601) || ((_2597 < _2601) || (_2597 > _2603))))))
        {
            frontier_phi_31_56_ladder = 0.0;
            frontier_phi_31_56_ladder_1 = 0.0;
            frontier_phi_31_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2599, cbModelParam._m0[17u].z, fma(_2598, cbModelParam._m0[17u].y, _2597 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2599, cbModelParam._m0[18u].z, fma(_2598, cbModelParam._m0[18u].y, _2597 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2599, cbModelParam._m0[19u].z, fma(_2598, cbModelParam._m0[19u].y, _2597 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_31_56_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_31_56_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_31_56_ladder_2;
        _1847 = frontier_phi_31_56_ladder_1;
        _1849 = frontier_phi_31_56_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_824, _825, _826), _1755);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1862 = (((_849 * _801) + _850) * _816) * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1864 = (((_849 * _803) + _850) * _816) * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1866 = (((_849 * _804) + _850) * _816) * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1922 = _1909 / _1921;
    float _1923 = _1913 / _1921;
    float _1924 = _1917 / _1921;
    float _2071;
    float _2072;
    float _2073;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1951 = ((uint(_1924 > cbSceneParam._m0[59u].y) + uint(_1924 > cbSceneParam._m0[59u].x)) + uint(_1924 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1952 = _1951 + 43u;
        uint _1960 = _1951 + 44u;
        uint _1968 = _1951 + 45u;
        uint _1976 = _1951 + 46u;
        float _1987 = fma(_1921, cbSceneParam._m0[_1952].w, fma(_1917, cbSceneParam._m0[_1952].z, fma(_1913, cbSceneParam._m0[_1952].y, _1909 * cbSceneParam._m0[_1952].x)));
        float _1991 = fma(_1921, cbSceneParam._m0[_1960].w, fma(_1917, cbSceneParam._m0[_1960].z, fma(_1913, cbSceneParam._m0[_1960].y, _1909 * cbSceneParam._m0[_1960].x)));
        float _1999 = fma(_1921, cbSceneParam._m0[_1976].w, fma(_1917, cbSceneParam._m0[_1976].z, fma(_1913, cbSceneParam._m0[_1976].y, _1909 * cbSceneParam._m0[_1976].x)));
        float _2004 = cbSceneParam._m0[33u].z * _1999;
        float _2006 = cbSceneParam._m0[33u].w * _1999;
        float _2009 = fma(_1921, cbSceneParam._m0[_1968].w, fma(_1917, cbSceneParam._m0[_1968].z, fma(_1913, cbSceneParam._m0[_1968].y, _1909 * cbSceneParam._m0[_1968].x))) / _1999;
        float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924))) * cbSceneParam._m0[33u].y;
        float _4435 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2064 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 + _1987) / _1999, (_2006 + _1991) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 + _1987) / _1999, (_1991 - _2004) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 - _2004) / _1999, (_1991 - _2006) / _1999), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 - _2006) / _1999, (_2004 + _1991) / _1999), _2009), 0.0)).x), vec4(0.25)));
        _2071 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
        _2072 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
        _2073 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2071 = 1.0;
        _2072 = 1.0;
        _2073 = 1.0;
    }
    float _2137;
    float _2139;
    float _2141;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2125 = fma(_1921, cbSceneParam._m0[63u].w, fma(_1917, cbSceneParam._m0[63u].z, fma(_1913, cbSceneParam._m0[63u].y, _1909 * cbSceneParam._m0[63u].x)));
        float _2126 = fma(_1921, cbSceneParam._m0[60u].w, fma(_1917, cbSceneParam._m0[60u].z, fma(_1913, cbSceneParam._m0[60u].y, _1909 * cbSceneParam._m0[60u].x))) / _2125;
        float _2127 = fma(_1921, cbSceneParam._m0[61u].w, fma(_1917, cbSceneParam._m0[61u].z, fma(_1913, cbSceneParam._m0[61u].y, _1909 * cbSceneParam._m0[61u].x))) / _2125;
        float frontier_phi_43_42_ladder;
        float frontier_phi_43_42_ladder_1;
        float frontier_phi_43_42_ladder_2;
        if ((((_2126 >= cbSceneParam._m0[64u].x) && (_2127 >= cbSceneParam._m0[64u].y)) && (_2126 <= cbSceneParam._m0[64u].z)) && (_2127 <= cbSceneParam._m0[64u].w))
        {
            float _2265 = fma(_1921, cbSceneParam._m0[62u].w, fma(_1917, cbSceneParam._m0[62u].z, fma(_1913, cbSceneParam._m0[62u].y, _1909 * cbSceneParam._m0[62u].x))) / _2125;
            float _2269 = isnan(cbSceneParam._m0[41u].w) ? _2265 : (isnan(_2265) ? cbSceneParam._m0[41u].w : max(_2265, cbSceneParam._m0[41u].w));
            float _2312 = (cbSceneParam._m0[33u].x - sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924))) * cbSceneParam._m0[33u].y;
            float _4451 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
            float _2319 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2126, cbSceneParam._m0[33u].w + _2127), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2126, _2127 - cbSceneParam._m0[33u].z), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2126 - cbSceneParam._m0[33u].z, _2127 - cbSceneParam._m0[33u].w), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2126 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2127), _2269), 0.0)).x), vec4(0.25)));
            float _2323 = 1.0 - (_2319 * cbSceneParam._m0[34u].x);
            float _2324 = 1.0 - (_2319 * cbSceneParam._m0[34u].y);
            float _2325 = 1.0 - (_2319 * cbSceneParam._m0[34u].z);
            frontier_phi_43_42_ladder = isnan(_2325) ? _2073 : (isnan(_2073) ? _2325 : min(_2073, _2325));
            frontier_phi_43_42_ladder_1 = isnan(_2324) ? _2072 : (isnan(_2072) ? _2324 : min(_2072, _2324));
            frontier_phi_43_42_ladder_2 = isnan(_2323) ? _2071 : (isnan(_2071) ? _2323 : min(_2071, _2323));
        }
        else
        {
            frontier_phi_43_42_ladder = _2073;
            frontier_phi_43_42_ladder_1 = _2072;
            frontier_phi_43_42_ladder_2 = _2071;
        }
        _2137 = frontier_phi_43_42_ladder_2;
        _2139 = frontier_phi_43_42_ladder_1;
        _2141 = frontier_phi_43_42_ladder;
    }
    else
    {
        _2137 = _2071;
        _2139 = _2072;
        _2141 = _2073;
    }
    uvec4 _2146 = floatBitsToUint(cbInstanceData._m0[_744 + 5u]);
    uint _2148 = _2146.x * 14u;
    uint _2149 = _2148 + 13u;
    float _2156 = _816 + (-1.0);
    float _2161 = (cbLight._m0[_2149].x * _2156) + 1.0;
    float _2162 = (cbLight._m0[_2149].y * _2156) + 1.0;
    float _2163 = (cbLight._m0[_2149].z * _2156) + 1.0;
    float _2164 = (cbLight._m0[_2149].w * _2156) + 1.0;
    uint _2165 = _2148 + 5u;
    float _2171 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2175 = _2148 + 4u;
    float _2184 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2188 = _2148 | 1u;
    float _2199 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_584, _585, _586));
    float _2202 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_584, _585, _586));
    float _4487 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _4498 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2207 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.3183098733425140380859375;
    float _2209 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2216 = ((cbLight._m0[_2165].x * _2171) * _2209) + (((cbLight._m0[_2175].x * _2137) * _2184) * _2207);
    float _2217 = ((_2171 * cbLight._m0[_2165].y) * _2209) + (((cbLight._m0[_2175].y * _2139) * _2184) * _2207);
    float _2218 = ((_2171 * cbLight._m0[_2165].z) * _2209) + (((cbLight._m0[_2175].z * _2141) * _2184) * _2207);
    uvec4 _2222 = floatBitsToUint(cbLight._m0[_2148 + 12u]);
    bool _2224 = _2222.x == 0u;
    float _2326;
    float _2328;
    float _2330;
    if (_2224)
    {
        _2326 = _2216;
        _2328 = _2217;
        _2330 = _2218;
    }
    else
    {
        uint _2334 = _2148 + 6u;
        float _2350 = (dot(vec3(cbLight._m0[_2148 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4509 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2353 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2326 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2216;
        _2328 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2217;
        _2330 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2218;
    }
    bool _2333 = _2222.y == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2333)
    {
        _2388 = _2326;
        _2390 = _2328;
        _2392 = _2330;
    }
    else
    {
        uint _2561 = _2148 + 7u;
        float _2577 = (dot(vec3(cbLight._m0[_2148 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2578 = _2577 * _2577;
        float _4525 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2579 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2580 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2388 = (((cbLight._m0[_2561].x * 0.3183098733425140380859375) * _2579) * _2580) + _2326;
        _2390 = (((cbLight._m0[_2561].y * 0.3183098733425140380859375) * _2579) * _2580) + _2328;
        _2392 = (((cbLight._m0[_2561].z * 0.3183098733425140380859375) * _2579) * _2580) + _2330;
    }
    uint _2395 = _2148 + 8u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _731) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2148].x + _665;
    float _2411 = cbLight._m0[_2148].y + _666;
    float _2412 = cbLight._m0[_2148].z + _667;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2148].xyz));
    float _4541 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _4552 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2424 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2425 = dot(vec3(_584, _585, _586), vec3(_2417, _2418, _2419));
    float _4563 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2417, _2418, _2419));
    float _4574 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2409 * _2409;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
    float _2446 = 0.959999978542327880859375 - _798;
    float _2448 = 0.959999978542327880859375 - _799;
    float _2449 = 0.959999978542327880859375 - _800;
    float _2456 = 1.0 - _2409;
    float _2467 = (0.5 / (((_2424 * ((_2423 * _2456) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2456) + _2409) * _2423))) * _2423;
    float _4585 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    uint _2483 = _2148 + 9u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _731) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2188].x + _665;
    float _2497 = cbLight._m0[_2188].y + _666;
    float _2498 = cbLight._m0[_2188].z + _667;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2188].xyz));
    float _4596 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2510 = dot(vec3(_584, _585, _586), vec3(_2503, _2504, _2505));
    float _4607 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2514 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2503, _2504, _2505));
    float _4618 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2518 = _2495 * _2495;
    float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
    float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
    float _2536 = 1.0 - _2495;
    float _2546 = (0.5 / (((_2424 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2536) + _2495) * _2509))) * _2509;
    float _4629 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
    float _2558 = (((((_2529 * _2446) + _801) * cbLight._m0[_2483].x) * _2548) * _2171) + ((((cbLight._m0[_2395].x * _2137) * ((_2445 * _2446) + _801)) * _2469) * _2184);
    float _2559 = (((((_2529 * _2448) + _803) * cbLight._m0[_2483].y) * _2548) * _2171) + ((((cbLight._m0[_2395].y * _2139) * ((_2445 * _2448) + _803)) * _2469) * _2184);
    float _2560 = (((((_2529 * _2449) + _804) * cbLight._m0[_2483].z) * _2548) * _2171) + ((((cbLight._m0[_2395].z * _2141) * ((_2445 * _2449) + _804)) * _2469) * _2184);
    float _2616;
    float _2618;
    float _2620;
    if (_2224)
    {
        _2616 = _2558;
        _2618 = _2559;
        _2620 = _2560;
    }
    else
    {
        uint _2622 = _2148 + 2u;
        uint _2626 = _2148 + 10u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _731) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _665;
        float _2643 = cbLight._m0[_2622].y + _666;
        float _2644 = cbLight._m0[_2622].z + _667;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2622].xyz));
        float _4640 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2656 = dot(vec3(_584, _585, _586), vec3(_2649, _2650, _2651));
        float _4651 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4662 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
        float _2682 = 1.0 - _2641;
        float _2692 = (0.5 / (((_2424 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2682) + _2641) * _2655))) * _2655;
        float _4673 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2616 = (((((_2675 * _2446) + _801) * cbLight._m0[_2626].x) * _2694) * _2695) + _2558;
        _2618 = (((((_2675 * _2448) + _803) * cbLight._m0[_2626].y) * _2694) * _2695) + _2559;
        _2620 = (((((_2675 * _2449) + _804) * cbLight._m0[_2626].z) * _2694) * _2695) + _2560;
    }
    float _2726;
    float _2728;
    float _2730;
    if (_2333)
    {
        _2726 = _2616;
        _2728 = _2618;
        _2730 = _2620;
    }
    else
    {
        uint _2737 = _2148 + 3u;
        uint _2741 = _2148 + 11u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _731) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _665;
        float _2758 = cbLight._m0[_2737].y + _666;
        float _2759 = cbLight._m0[_2737].z + _667;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2737].xyz));
        float _4689 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2771 = dot(vec3(_584, _585, _586), vec3(_2764, _2765, _2766));
        float _4700 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4711 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
        float _2797 = 1.0 - _2756;
        float _2807 = (0.5 / (((_2424 * ((_2770 * _2797) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2797) + _2756) * _2770))) * _2770;
        float _4722 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2809 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2810 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2726 = (((((_2790 * _2446) + _801) * cbLight._m0[_2741].x) * _2809) * _2810) + _2616;
        _2728 = (((((_2790 * _2448) + _803) * cbLight._m0[_2741].y) * _2809) * _2810) + _2618;
        _2730 = (((((_2790 * _2449) + _804) * cbLight._m0[_2741].z) * _2809) * _2810) + _2620;
    }
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_2146.y == 0u)
    {
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.x;
        uint _2843 = uint((float(_2831.y) * floor(float(uint(cbSceneParam._m0[85u].y * _689) / _2832))) + floor(float(uint(cbSceneParam._m0[85u].x * _688) / _2832)));
        float _2853 = (log2(_1924 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2854 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        uint _2857 = uint(isnan(14.0) ? _2854 : (isnan(_2854) ? 14.0 : min(_2854, 14.0)));
        uvec4 _2862 = texelFetch(g_lightClusterGridBuffer, int(((_2857 << 2u) + (_2843 << 6u)) >> 2u));
        uint _2863 = _2862.x;
        uint _2864 = _2831.z;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((((1u << ((_2864 >> 4u) & 15u)) + 4294967295u) & _2863) == 0u) || ((_2864 & 240u) == 0u))
        {
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
        }
        else
        {
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            uint _3118 = 0u;
            uint _3127;
            bool _3128;
            for (;;)
            {
                _3127 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                _3128 = _3127 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_3128)
                {
                    frontier_phi_77_pred = _3117;
                    frontier_phi_77_pred_1 = _3116;
                    frontier_phi_77_pred_2 = _3115;
                    frontier_phi_77_pred_3 = _3114;
                    frontier_phi_77_pred_4 = _3112;
                    frontier_phi_77_pred_5 = _3113;
                }
                else
                {
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    uint _3263;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3127;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    for (;;)
                    {
                        uint _3267 = uint(findLSB(_3263)) + (_3118 << 5u);
                        uint _3264 = (_3263 + 4294967295u) & _3263;
                        uint _3269 = _3267 * 48u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3289 = (_3267 * 48u) + 4u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3308 = (_3267 * 48u) + 8u;
                        vec3 _3319 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x));
                        float _3323 = _3283.x - _1922;
                        float _3324 = _3283.y - _1923;
                        float _3325 = _3283.z - _1924;
                        float _3326 = dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325));
                        float _3329 = inversesqrt(_3326);
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3333 = dot(vec3(_712, _715, _718), vec3(_3330, _3331, _3332));
                        float _3338 = 1.0 - (_3326 * _3283.w);
                        float _4748 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3340 = sqrt(_3326) * _3302.w;
                        float _3343 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3333) + _3344;
                        float _3350 = _3340 * _3340;
                        float _3354 = ((isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))) * _3339) / ((_3350 * 0.699999988079071044921875) + 1.0);
                        float _3358 = (-0.0) - _1922;
                        float _3359 = (-0.0) - _1923;
                        float _3360 = (-0.0) - _1924;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3374 = exp2(log2(1.0 / ((_3350 * 3.5) + 5.0)) * 0.25);
                        float _3375 = 1.0 - _832;
                        float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                        float _3383 = _3382 * _3382;
                        float _3384 = _3383 * _3383;
                        float _3385 = _3365 + _3330;
                        float _3386 = _3366 + _3331;
                        float _3387 = _3367 + _3332;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3395 = dot(vec3(_712, _715, _718), vec3(_3365, _3366, _3367));
                        float _4764 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3399 = dot(vec3(_712, _715, _718), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                        float _4775 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                        float _3407 = _3343 * _3383;
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3333) + _3408;
                        float _4786 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3413 = 1.0 - _3383;
                        float _3423 = (0.5 / (((_3412 * ((_3398 * _3413) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3383) * _3398))) * _3412;
                        float _4797 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3434 = (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3406 * _3406) * ((_3350 * 2.1991131305694580078125) + 3.141590118408203125))) * _3339;
                        _3187 = (_3354 * _3302.x) + _3260;
                        _3188 = (_3354 * _3302.y) + _3261;
                        _3189 = (_3354 * _3302.z) + _3262;
                        _3184 = (_3434 * _3319.x) + _3257;
                        _3185 = (_3434 * _3319.y) + _3258;
                        _3186 = (_3434 * _3319.z) + _3259;
                        if (_3264 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3264;
                        }
                    }
                    frontier_phi_77_pred = _3189;
                    frontier_phi_77_pred_1 = _3188;
                    frontier_phi_77_pred_2 = _3187;
                    frontier_phi_77_pred_3 = _3186;
                    frontier_phi_77_pred_4 = _3184;
                    frontier_phi_77_pred_5 = _3185;
                }
                _2971 = frontier_phi_77_pred;
                _2969 = frontier_phi_77_pred_1;
                _2967 = frontier_phi_77_pred_2;
                _2965 = frontier_phi_77_pred_3;
                _2961 = frontier_phi_77_pred_4;
                _2963 = frontier_phi_77_pred_5;
                uint _3119 = _3118 + 1u;
                if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3112 = _2961;
                    _3113 = _2963;
                    _3114 = _2965;
                    _3115 = _2967;
                    _3116 = _2969;
                    _3117 = _2971;
                    _3118 = _3119;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
        }
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.z;
        uint _2977 = (_2975 >> 8u) & 15u;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        if (((4294967295u << _2977) & _2863) == 0u)
        {
            _3080 = _2960;
            _3082 = _2962;
            _3084 = _2964;
            _3086 = _2966;
            _3088 = _2968;
            _3090 = _2970;
        }
        else
        {
            float _3105 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
            float _3106 = _3105 * _1922;
            float _3107 = _3105 * _1923;
            float _3108 = _3105 * _1924;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2977 < ((_2975 >> 12u) & 15u))
            {
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3240 = _2960;
                float _3241 = _2962;
                float _3242 = _2964;
                float _3243 = _2966;
                float _3244 = _2968;
                float _3245 = _2970;
                uint _3246 = _2977;
                uint _3255;
                bool _3256;
                for (;;)
                {
                    _3255 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                    _3256 = _3255 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_3256)
                    {
                        frontier_phi_88_pred = _3241;
                        frontier_phi_88_pred_1 = _3240;
                        frontier_phi_88_pred_2 = _3245;
                        frontier_phi_88_pred_3 = _3244;
                        frontier_phi_88_pred_4 = _3243;
                        frontier_phi_88_pred_5 = _3242;
                    }
                    else
                    {
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3461 = _3240;
                        float _3462 = _3241;
                        float _3463 = _3242;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        uint _3467 = _3255;
                        uint _3468;
                        vec4 _3493;
                        float _3494;
                        vec4 _3509;
                        vec3 _3521;
                        vec4 _3536;
                        vec4 _3551;
                        float _3597;
                        bool _3598;
                        for (;;)
                        {
                            uint _3478 = ((_3246 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3467));
                            _3468 = (_3467 + 4294967295u) & _3467;
                            uint _3480 = _3478 * 40u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3494 = _3493.w;
                            uint _3496 = (_3478 * 40u) + 4u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3478 * 40u) + 8u;
                            _3521 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x));
                            uint _3523 = (_3478 * 40u) + 16u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3478 * 40u) + 20u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3478 * 40u) + 24u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3572 = (_3478 * 40u) + 28u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3597 = fma(_1924, _3585.z, fma(_1923, _3585.y, _3585.x * _1922)) + _3585.w;
                            _3598 = !((fma(_1924, _3566.z, fma(_1923, _3566.y, _3566.x * _1922)) + _3566.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3598)
                            {
                                float _3625 = _3493.x - _1922;
                                float _3626 = _3493.y - _1923;
                                float _3627 = _3493.z - _1924;
                                float _3628 = dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627));
                                float _3631 = inversesqrt(_3628);
                                float _3632 = _3631 * _3625;
                                float _3633 = _3631 * _3626;
                                float _3634 = _3631 * _3627;
                                float _3638 = 1.0 - (_3628 / (_3494 * _3494));
                                float _4808 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3643 = sqrt(_3628) * _3509.w;
                                float _3645 = 1.39999997615814208984375 / (_3643 + 1.39999997615814208984375);
                                float _3646 = _3645 * _3645;
                                float _3649 = ((1.0 - _3646) * dot(vec3(_3632, _3633, _3634), vec3(_712, _715, _718))) + _3646;
                                float _3652 = _3643 * _3643;
                                float _3656 = (fma(_1924, _3536.z, fma(_1923, _3536.y, _3536.x * _1922)) + _3536.w) / _3597;
                                float _3657 = (fma(_1924, _3551.z, fma(_1923, _3551.y, _3551.x * _1922)) + _3551.w) / _3597;
                                float _3661 = 1.0 - dot(vec2(_3656, _3657), vec2(_3656, _3657));
                                float _4824 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3663 = _3662 * (((isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))) * _3639) / ((_3652 * 0.699999988079071044921875) + 1.0));
                                float _3675 = exp2(log2(1.0 / ((_3652 * 3.5) + 5.0)) * 0.25);
                                float _3676 = 1.0 - _832;
                                float _3683 = sqrt(1.0 - ((1.0 - (_3676 * _3676)) * (1.0 - (_3675 * _3675))));
                                float _3684 = _3683 * _3683;
                                float _3685 = _3684 * _3684;
                                float _3686 = _3632 - _3106;
                                float _3687 = _3633 - _3107;
                                float _3688 = _3634 - _3108;
                                float _3692 = inversesqrt(dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688)));
                                float _3696 = dot(vec3(_712, _715, _718), vec3((-0.0) - _3106, (-0.0) - _3107, (-0.0) - _3108));
                                float _4835 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3700 = dot(vec3(_712, _715, _718), vec3(_3692 * _3686, _3692 * _3687, _3692 * _3688));
                                float _4846 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3707 = ((_3703 * _3703) * (_3685 + (-1.0))) + 1.0;
                                float _3708 = _3645 * _3684;
                                float _3709 = _3708 * _3708;
                                float _3715 = ((1.0 - _3709) * dot(vec3(_712, _715, _718), vec3(_3632, _3633, _3634))) + _3709;
                                float _4857 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3717 = 1.0 - _3684;
                                float _3727 = (0.5 / (((_3716 * ((_3699 * _3717) + _3684)) + 9.9999999392252902907785028219223e-09) + (((_3716 * _3717) + _3684) * _3699))) * _3716;
                                float _4868 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3737 = (_3662 * _3639) * (((_3685 * 3.1415927410125732421875) * (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) / ((_3707 * _3707) * ((_3652 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3737 * _3521.y;
                                frontier_phi_94_pred_1 = _3737 * _3521.x;
                                frontier_phi_94_pred_2 = _3663 * _3509.z;
                                frontier_phi_94_pred_3 = _3663 * _3509.y;
                                frontier_phi_94_pred_4 = _3663 * _3509.x;
                                frontier_phi_94_pred_5 = _3737 * _3521.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3742 = frontier_phi_94_pred;
                            _3741 = frontier_phi_94_pred_1;
                            _3746 = frontier_phi_94_pred_2;
                            _3745 = frontier_phi_94_pred_3;
                            _3744 = frontier_phi_94_pred_4;
                            _3743 = frontier_phi_94_pred_5;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            if (_3468 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3468;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3449;
                        frontier_phi_88_pred_1 = _3448;
                        frontier_phi_88_pred_2 = _3453;
                        frontier_phi_88_pred_3 = _3452;
                        frontier_phi_88_pred_4 = _3451;
                        frontier_phi_88_pred_5 = _3450;
                    }
                    _3083 = frontier_phi_88_pred;
                    _3081 = frontier_phi_88_pred_1;
                    _3091 = frontier_phi_88_pred_2;
                    _3089 = frontier_phi_88_pred_3;
                    _3087 = frontier_phi_88_pred_4;
                    _3085 = frontier_phi_88_pred_5;
                    uint _3247 = _3246 + 1u;
                    if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3240 = _3081;
                        _3241 = _3083;
                        _3242 = _3085;
                        _3243 = _3087;
                        _3244 = _3089;
                        _3245 = _3091;
                        _3246 = _3247;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _3091;
                frontier_phi_69_70_ladder_1 = _3087;
                frontier_phi_69_70_ladder_2 = _3085;
                frontier_phi_69_70_ladder_3 = _3083;
                frontier_phi_69_70_ladder_4 = _3081;
                frontier_phi_69_70_ladder_5 = _3089;
            }
            else
            {
                frontier_phi_69_70_ladder = _2970;
                frontier_phi_69_70_ladder_1 = _2966;
                frontier_phi_69_70_ladder_2 = _2964;
                frontier_phi_69_70_ladder_3 = _2962;
                frontier_phi_69_70_ladder_4 = _2960;
                frontier_phi_69_70_ladder_5 = _2968;
            }
            _3080 = frontier_phi_69_70_ladder_4;
            _3082 = frontier_phi_69_70_ladder_3;
            _3084 = frontier_phi_69_70_ladder_2;
            _3086 = frontier_phi_69_70_ladder_1;
            _3088 = frontier_phi_69_70_ladder_5;
            _3090 = frontier_phi_69_70_ladder;
        }
        float _3095 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
        _2875 = (_3095 * _3086) + _2388;
        _2877 = (_3095 * _3088) + _2390;
        _2879 = (_3095 * _3090) + _2392;
        _2881 = ((_3080 * _801) * _3095) + _2726;
        _2883 = ((_3082 * _803) * _3095) + _2728;
        _2885 = ((_3084 * _804) * _3095) + _2730;
    }
    else
    {
        _2875 = _2388;
        _2877 = _2390;
        _2879 = _2392;
        _2881 = _2726;
        _2883 = _2728;
        _2885 = _2730;
    }
    vec4 _2891 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4884 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4895 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4906 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _2915 = (((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2875 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _816))) + ((_2881 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1655)) * cbPerFrame._m0[3u].x)) + (_2891.x * cbMtdParam._m0[3u].x);
    float _2917 = ((_2891.y * cbMtdParam._m0[3u].x) + ((_2883 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1655)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2877 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _816)));
    float _2919 = ((_2891.z * cbMtdParam._m0[3u].x) + ((_2885 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1655)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2879 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _816)));
    float _2920 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
    float _2921 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
    float _2922 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
    uint _2923 = _744 + 6u;
    float _2931 = _688 / cbSceneParam._m0[86u].x;
    float _2932 = _689 / cbSceneParam._m0[86u].y;
    vec4 _2946 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, (log2((isnan(cbSceneParam._m0[77u].w) ? _607 : (isnan(_607) ? cbSceneParam._m0[77u].w : min(_607, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2948 = _2946.x;
    float _2949 = _2946.y;
    float _2950 = _2946.z;
    float _2951 = _2946.w;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_607 > cbSceneParam._m0[78u].w)
    {
        float _2985 = isnan(_607) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _607 : min(cbSceneParam._m0[80u].w, _607));
        float _2986 = _2985 / _607;
        float _2997 = _2986 * _658;
        float _2998 = _659 * _2986;
        float _2999 = (-0.0) - _2998;
        float _3000 = _2986 * _660;
        float _3002 = (cbSceneParam._m0[77u].w * _2999) / _2985;
        float _3003 = _3002 + cbSceneParam._m0[79u].w;
        float _3004 = cbSceneParam._m0[79u].w - _2998;
        float _3010 = sqrt(((_2997 * _2997) + (_2998 * _2998)) + (_3000 * _3000));
        float _3013 = (1.0 - (cbSceneParam._m0[77u].w / _2985)) * _3010;
        float _3018 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3020 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3197;
        if (abs((_2999 - _3002) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3197 = ((((_3003 > 0.0) ? exp2(_3018 * _3003) : (2.0 - exp2(_3020 * _3003))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3013;
        }
        else
        {
            float _3141 = 1.0 / cbSceneParam._m0[80u].x;
            float _3142 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : max(_3003, _3004));
            float _3143 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : min(_3003, _3004));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            _3197 = ((abs(_3010 / _2999) * cbSceneParam._m0[80u].y) * ((((_3152 - _3153) * 2.0) - ((exp2(_3018 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0)))) - exp2(_3018 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))))) * _3141)) - ((exp2(_3020 * _3152) - exp2(_3020 * _3153)) * _3141))) + (_3013 * cbSceneParam._m0[80u].z);
        }
        vec4 _3199 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, 1.0), 0.0);
        float _3208 = exp2((_3197 * (-1.44269502162933349609375)) * (1.0 - _3199.w));
        float _3209 = log2(_3208);
        float _3225 = log2(_2951);
        _3022 = (exp2(_3225 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].x)) * _3199.x) / cbSceneParam._m0[78u].x)) + _2948;
        _3024 = (exp2(_3225 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].y)) * _3199.y) / cbSceneParam._m0[78u].y)) + _2949;
        _3026 = (exp2(_3225 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].z)) * _3199.z) / cbSceneParam._m0[78u].z)) + _2950;
        _3028 = _3208 * _2951;
    }
    else
    {
        _3022 = _2948;
        _3024 = _2949;
        _3026 = _2950;
        _3028 = _2951;
    }
    bool _3235;
    vec4 _3038;
    vec4 _3060;
    float _3062;
    float _3066;
    float _3067;
    float _3068;
    float _3069;
    bool _3079;
    for (;;)
    {
        _3038 = cbMatDynParam._m0[0u];
        float _3040 = roundEven(_3038.y);
        bool _3041 = _3040 == 3.0;
        float _3042 = log2(_3028);
        float _3049 = exp2(_3042 * cbSceneParam._m0[78u].x) * _2920;
        float _3050 = exp2(_3042 * cbSceneParam._m0[78u].y) * _2921;
        float _3051 = exp2(_3042 * cbSceneParam._m0[78u].z) * _2922;
        float _3058 = _674 + (-0.5);
        _3060 = cbMtdParam._m0[1u];
        _3062 = _3060.y * _3058;
        float _3065 = (_3040 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3066 = _3065 * (_3041 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3022)));
        _3067 = _3065 * (_3041 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3024)));
        _3068 = _3065 * (_3041 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3026)));
        _3069 = _3058 * 0.999000012874603271484375;
        _3079 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3079)
        {
            if ((cbInstanceData._m0[_744 + 7u].x + _3069) < 0.5)
            {
                _3235 = true;
                break;
            }
        }
        uint _3176 = _745 + uint(_3038.w);
        if ((cbInstanceData._m0[_3176].w < 1.0) && ((cbInstanceData._m0[_3176].w + _3069) < 0.5))
        {
            _3235 = true;
            break;
        }
        if ((_3062 + 1.0) < _3060.x)
        {
            _3235 = true;
            break;
        }
        _3235 = false;
        break;
    }
    float _3439;
    if (_3235)
    {
        discard_state = true;
        _3439 = 0.0;
    }
    else
    {
        _3439 = cbInstanceData._m0[_2923].w;
    }
    SV_Target.x = _3066;
    SV_Target.y = _3067;
    SV_Target.z = _3068;
    SV_Target.w = _3439;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2923].w;
    discard_exit();
}


