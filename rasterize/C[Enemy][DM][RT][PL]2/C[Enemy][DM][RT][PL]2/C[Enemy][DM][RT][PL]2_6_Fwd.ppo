#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1061;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _261 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _272 = exp2(log2(_261.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _273;
    float _275;
    float _277;
    if (_272)
    {
        _273 = cbMtdParam._m0[19u].x;
        _275 = cbMtdParam._m0[19u].y;
        _277 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _273 = cbMtdParam._m0[18u].x;
        _275 = cbMtdParam._m0[18u].y;
        _277 = cbMtdParam._m0[18u].z;
    }
    float _283;
    if (_272)
    {
        _283 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _283 = cbMtdParam._m0[20u].z;
    }
    float _289;
    float _291;
    if (_272)
    {
        _289 = cbMtdParam._m0[28u].z;
        _291 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _289 = cbMtdParam._m0[24u].x;
        _291 = cbMtdParam._m0[24u].y;
    }
    float _293 = _289 * TEXCOORD.x;
    float _294 = _291 * TEXCOORD.y;
    float _306 = floor(_283);
    vec4 _309 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _293) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _294) + cbTextureTilingScale._m0[8u].w, _306));
    vec4 _331 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _339 = (((_273 * cbMtdParam._m0[20u].w) * _309.x) * cbMtdParam._m0[9u].x) * _331.x;
    float _343 = (((_275 * cbMtdParam._m0[20u].w) * _309.y) * cbMtdParam._m0[9u].y) * _331.y;
    float _347 = (((_277 * cbMtdParam._m0[20u].w) * _309.z) * cbMtdParam._m0[9u].z) * _331.z;
    vec4 _359 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _363 = _359.z;
    vec4 _377 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _293) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _294) + cbTextureTilingScale._m0[10u].w, _306));
    float _181[2];
    float _182[2];
    _181[0u] = cbMtdParam._m0[27u].z;
    _182[0u] = cbMtdParam._m0[27u].w;
    _181[1u] = cbMtdParam._m0[28u].x;
    _182[1u] = cbMtdParam._m0[28u].y;
    float _394 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _397 = uint(int(isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0))));
    float _403 = (_377.x + _359.w) + _182[_397];
    vec4 _421 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w, _306));
    float _428 = (_421.x * 2.0) + (-1.0);
    float _429 = (_421.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3426 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    float _445 = (cbMtdParam._m0[21u].x * (((_363 * 2.0) * (_421.z + _181[_397])) - _363)) + _363;
    float _449 = (cbMtdParam._m0[21u].y * ((_359.x * 2.0) + (-1.0))) + _428;
    float _450 = (cbMtdParam._m0[21u].y * ((_359.y * 2.0) + (-1.0))) + _429;
    float _453 = fma(_435, _232, fma(_450, _224 * TANGENT.x, (_210 * _202) * _449));
    float _456 = fma(_435, _233, fma(_450, _224 * TANGENT.y, (_210 * _203) * _449));
    float _459 = fma(_435, _234, fma(_450, _224 * TANGENT.z, (_210 * _204) * _449));
    float _463 = inversesqrt(dot(vec3(_453, _456, _459), vec3(_453, _456, _459)));
    float _464 = _463 * _453;
    float _465 = _463 * _456;
    float _466 = _463 * _459;
    float _3437 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _467 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3459 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3470 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3481 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _471 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _487 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _538 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _528);
    float _539 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _528);
    float _540 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _528);
    float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
    float _545 = _538 * _544;
    float _546 = _539 * _544;
    float _547 = _540 * _544;
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _556 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _558 = _556.w;
    float _579 = fma(_466, cbSceneParam._m0[5u].z, fma(_465, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _464));
    float _582 = fma(_466, cbSceneParam._m0[6u].z, fma(_465, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _464));
    float _585 = fma(_466, cbSceneParam._m0[7u].z, fma(_465, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _464));
    vec4 _587 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _598 = (((_587.y - _467) + (_587.w * _467)) * cbMtdParam._m0[3u].x) + _467;
    uint _611 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = (_611 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3492 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    vec4 _626 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _631 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _642 = (((_631.x - _471) + (_631.w * _471)) * cbMtdParam._m0[3u].x) + _471;
    float _655 = (cbMtdParam._m0[3u].x * (((_623 * _558) - _623) + _626.x)) + _623;
    float _656 = (cbMtdParam._m0[3u].x * (((_624 * _558) - _624) + _626.y)) + _624;
    float _657 = (cbMtdParam._m0[3u].x * (((_625 * _558) - _625) + _626.z)) + _625;
    float _658 = 1.0 - _642;
    float _659 = _658 * _655;
    float _660 = _658 * _656;
    float _661 = _658 * _657;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _642;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _642;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _642;
    float _669 = _666 + 0.039999999105930328369140625;
    float _671 = _667 + 0.039999999105930328369140625;
    float _672 = _668 + 0.039999999105930328369140625;
    vec4 _681 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _684 = _681.x * TEXCOORD_4;
    float _685 = dot(vec3(_464, _465, _466), vec3(_545, _546, _547));
    float _688 = _685 * 2.0;
    float _692 = (_688 * _464) - _545;
    float _693 = (_688 * _465) - _546;
    float _694 = (_688 * _466) - _547;
    float _698 = abs(dot(vec3(_545, _546, _547), vec3(_464, _465, _466)));
    float _3525 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _700 = sqrt(_598);
    float _713 = exp2((_700 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_700 * 3.0));
    float _719 = (1.0 - _713) * ((_700 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _720 = _713 * _700;
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_756, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748));
        float _789 = fma(_756, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748));
        float _793 = fma(_756, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748));
        float _818 = _748 + _464;
        float _819 = _752 + _465;
        float _820 = _756 + _466;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _785;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _789;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _793;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_464, _465, _466), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3573 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_464, _465, _466), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3606 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_464, _465, _466), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3639 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_756, cbModelParam._m0[30u].z, fma(_752, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _748));
        float _1105 = fma(_756, cbModelParam._m0[31u].z, fma(_752, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _748));
        float _1109 = fma(_756, cbModelParam._m0[32u].z, fma(_752, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _748));
        float _1132 = _748 + _464;
        float _1133 = _752 + _465;
        float _1134 = _756 + _466;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_464, _465, _466), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3702 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_464, _465, _466), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3735 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_464, _465, _466), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3768 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1061;
        _1371 = _1061;
        _1372 = _1061;
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = _1061;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1074)) + _1074;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _692 * 0.5;
    float _1439 = _693 * 0.5;
    float _1440 = _694 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_756, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_756, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_756, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_694, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692));
        float _1570 = fma(_694, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692));
        float _1573 = fma(_694, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1601 = frontier_phi_22_20_ladder;
        }
        float _1805;
        if (_1570 > 0.0)
        {
            _1805 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1805 = frontier_phi_31_27_ladder;
        }
        float _2059;
        if (_1573 > 0.0)
        {
            _2059 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2059 = frontier_phi_43_38_ladder;
        }
        float _2061 = isnan(_1805) ? _1601 : (isnan(_1601) ? _1805 : min(_1601, _1805));
        float _2062 = isnan(_2059) ? _2061 : (isnan(_2061) ? _2059 : min(_2061, _2059));
        float _2066 = (_2062 * _1567) + _1556;
        float _2067 = (_2062 * _1570) + _1560;
        float _2068 = (_2062 * _1573) + _1564;
        float _2069 = _2062 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2069;
        float _2073 = _2069 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 > _2073) || ((_2067 < _2071) || ((_2066 < _2071) || (_2066 > _2073))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2068, cbModelParam._m0[9u].z, fma(_2067, cbModelParam._m0[9u].y, _2066 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2068, cbModelParam._m0[10u].z, fma(_2067, cbModelParam._m0[10u].y, _2066 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2068, cbModelParam._m0[11u].z, fma(_2067, cbModelParam._m0[11u].y, _2066 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_21_43_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_21_43_ladder_2;
        _1591 = frontier_phi_21_43_ladder_1;
        _1593 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_692, _693, _694), _1507);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1651 = fma(_756, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748)) + cbModelParam._m0[21u].w;
        float _1655 = fma(_756, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748)) + cbModelParam._m0[22u].w;
        float _1659 = fma(_756, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748)) + cbModelParam._m0[23u].w;
        float _1662 = fma(_694, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692));
        float _1665 = fma(_694, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692));
        float _1668 = fma(_694, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692));
        float _1810;
        if (_1662 > 0.0)
        {
            _1810 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1810 = frontier_phi_33_29_ladder;
        }
        float _2086;
        if (_1665 > 0.0)
        {
            _2086 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2086 = frontier_phi_45_40_ladder;
        }
        float _2299;
        if (_1668 > 0.0)
        {
            _2299 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2299 = frontier_phi_54_51_ladder;
        }
        float _2301 = isnan(_2086) ? _1810 : (isnan(_1810) ? _2086 : min(_1810, _2086));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1662) + _1651;
        float _2307 = (_2302 * _1665) + _1655;
        float _2308 = (_2302 * _1668) + _1659;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_30_54_ladder = _2524.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2524.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2524.x * cbModelParam._m0[1u].z;
        }
        _1687 = frontier_phi_30_54_ladder_2;
        _1689 = frontier_phi_30_54_ladder;
        _1691 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_692, _693, _694), _1598);
        _1687 = _1671.x * cbModelParam._m0[1u].z;
        _1689 = _1671.y * cbModelParam._m0[1u].z;
        _1691 = _1671.z * cbModelParam._m0[1u].z;
    }
    float _1704 = (((_719 * _669) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1706 = (((_719 * _671) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1689 - _1591)) + _1591);
    float _1708 = (((_719 * _672) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1691 - _1593)) + _1593);
    float _1711 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, _1704 * cbSceneParam._m0[91u].x));
    uvec4 _1727 = floatBitsToUint(cbInstanceData._m0[_611 + 5u]);
    uint _1729 = _1727.x * 14u;
    uint _1730 = _1729 + 13u;
    float _1737 = _684 + (-1.0);
    float _1742 = (cbLight._m0[_1730].x * _1737) + 1.0;
    float _1743 = (cbLight._m0[_1730].y * _1737) + 1.0;
    float _1744 = (cbLight._m0[_1730].z * _1737) + 1.0;
    float _1745 = (cbLight._m0[_1730].w * _1737) + 1.0;
    uint _1746 = _1729 + 5u;
    float _1752 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1756 = _1729 + 4u;
    float _1763 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1767 = _1729 | 1u;
    float _1778 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_464, _465, _466));
    float _1781 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_464, _465, _466));
    float _3904 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _3915 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1786 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.3183098733425140380859375;
    float _1788 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1795 = ((cbLight._m0[_1746].x * _1752) * _1788) + ((cbLight._m0[_1756].x * _1763) * _1786);
    float _1796 = ((_1752 * cbLight._m0[_1746].y) * _1788) + ((_1763 * cbLight._m0[_1756].y) * _1786);
    float _1797 = ((_1752 * cbLight._m0[_1746].z) * _1788) + ((_1763 * cbLight._m0[_1756].z) * _1786);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1729 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1795;
        _1817 = _1796;
        _1819 = _1797;
    }
    else
    {
        uint _1823 = _1729 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1729 + 2u].xyz), vec3(_464, _465, _466)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _3926 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1842 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1795;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2030 = _1729 + 7u;
        float _2046 = (dot(vec3(cbLight._m0[_1729 + 3u].xyz), vec3(_464, _465, _466)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _3942 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2049 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1860 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _1815;
        _1862 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _1817;
        _1864 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _1819;
    }
    uint _1867 = _1729 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * _598) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1729].x + _545;
    float _1883 = cbLight._m0[_1729].y + _546;
    float _1884 = cbLight._m0[_1729].z + _547;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_1729].xyz));
    float _3958 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _1896 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1897 = dot(vec3(_464, _465, _466), vec3(_1889, _1890, _1891));
    float _3980 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1889, _1890, _1891));
    float _3991 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1917 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
    float _1918 = 0.959999978542327880859375 - _666;
    float _1920 = 0.959999978542327880859375 - _667;
    float _1921 = 0.959999978542327880859375 - _668;
    float _1928 = 1.0 - _1881;
    float _1939 = (0.5 / (((_1896 * ((_1895 * _1928) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1928) + _1881) * _1895))) * _1895;
    float _4002 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1952 = _1729 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * _598) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1767].x + _545;
    float _1966 = cbLight._m0[_1767].y + _546;
    float _1967 = cbLight._m0[_1767].z + _547;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_1767].xyz));
    float _4013 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1979 = dot(vec3(_464, _465, _466), vec3(_1972, _1973, _1974));
    float _4024 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1972, _1973, _1974));
    float _4035 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0);
    float _2005 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1896 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2005) + _1964) * _1978))) * _1978;
    float _4046 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2027 = (((((_1998 * _1918) + _669) * cbLight._m0[_1952].x) * _2017) * _1752) + (((((_1917 * _1918) + _669) * cbLight._m0[_1867].x) * _1941) * _1763);
    float _2028 = (((((_1998 * _1920) + _671) * cbLight._m0[_1952].y) * _2017) * _1752) + (((((_1917 * _1920) + _671) * cbLight._m0[_1867].y) * _1941) * _1763);
    float _2029 = (((((_1998 * _1921) + _672) * cbLight._m0[_1952].z) * _2017) * _1752) + (((((_1917 * _1921) + _672) * cbLight._m0[_1867].z) * _1941) * _1763);
    float _2091;
    float _2093;
    float _2095;
    if (_1804)
    {
        _2091 = _2027;
        _2093 = _2028;
        _2095 = _2029;
    }
    else
    {
        uint _2097 = _1729 + 2u;
        uint _2101 = _1729 + 10u;
        float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _598) * 0.949999988079071044921875);
        float _2116 = _2115 * _2115;
        float _2117 = cbLight._m0[_2097].x + _545;
        float _2118 = cbLight._m0[_2097].y + _546;
        float _2119 = cbLight._m0[_2097].z + _547;
        float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
        float _2124 = _2123 * _2117;
        float _2125 = _2123 * _2118;
        float _2126 = _2123 * _2119;
        float _2127 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_2097].xyz));
        float _4057 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2131 = dot(vec3(_464, _465, _466), vec3(_2124, _2125, _2126));
        float _4068 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2135 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2124, _2125, _2126));
        float _4079 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2139 = _2116 * _2116;
        float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
        float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
        float _2157 = 1.0 - _2116;
        float _2167 = (0.5 / (((_1896 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2157) + _2116) * _2130))) * _2130;
        float _4090 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _2091 = (((((_2150 * _1918) + _669) * cbLight._m0[_2101].x) * _2169) * _2170) + _2027;
        _2093 = (((((_2150 * _1920) + _671) * cbLight._m0[_2101].y) * _2169) * _2170) + _2028;
        _2095 = (((((_2150 * _1921) + _672) * cbLight._m0[_2101].z) * _2169) * _2170) + _2029;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1822)
    {
        _2205 = _2091;
        _2207 = _2093;
        _2209 = _2095;
    }
    else
    {
        uint _2216 = _1729 + 3u;
        uint _2220 = _1729 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _598) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _545;
        float _2237 = cbLight._m0[_2216].y + _546;
        float _2238 = cbLight._m0[_2216].z + _547;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_2216].xyz));
        float _4106 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2250 = dot(vec3(_464, _465, _466), vec3(_2243, _2244, _2245));
        float _4117 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4128 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
        float _2276 = 1.0 - _2235;
        float _2286 = (0.5 / (((_1896 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2276) + _2235) * _2249))) * _2249;
        float _4139 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2288 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2289 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2205 = (((((_2269 * _1918) + _669) * cbLight._m0[_2220].x) * _2288) * _2289) + _2091;
        _2207 = (((((_2269 * _1920) + _671) * cbLight._m0[_2220].y) * _2288) * _2289) + _2093;
        _2209 = (((((_2269 * _1921) + _672) * cbLight._m0[_2220].z) * _2288) * _2289) + _2095;
    }
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_1727.y == 0u)
    {
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2364;
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2364;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2364;
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.x;
        uint _2391 = uint((float(_2379.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2380))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2380)));
        float _2401 = (log2(_2367 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2402 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        uint _2405 = uint(isnan(14.0) ? _2402 : (isnan(_2402) ? 14.0 : min(_2402, 14.0)));
        uvec4 _2410 = texelFetch(g_lightClusterGridBuffer, int(((_2405 << 2u) + (_2391 << 6u)) >> 2u));
        uint _2411 = _2410.x;
        uint _2412 = _2379.z;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((((1u << ((_2412 >> 4u) & 15u)) + 4294967295u) & _2411) == 0u) || ((_2412 & 240u) == 0u))
        {
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
        }
        else
        {
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            uint _2679 = 0u;
            uint _2688;
            bool _2689;
            for (;;)
            {
                _2688 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                _2689 = _2688 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2689)
                {
                    frontier_phi_69_pred = _2678;
                    frontier_phi_69_pred_1 = _2677;
                    frontier_phi_69_pred_2 = _2676;
                    frontier_phi_69_pred_3 = _2674;
                    frontier_phi_69_pred_4 = _2673;
                    frontier_phi_69_pred_5 = _2675;
                }
                else
                {
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    uint _2803;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2688;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    for (;;)
                    {
                        uint _2807 = uint(findLSB(_2803)) + (_2679 << 5u);
                        uint _2804 = (_2803 + 4294967295u) & _2803;
                        uint _2809 = _2807 * 48u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2829 = (_2807 * 48u) + 4u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2848 = (_2807 * 48u) + 8u;
                        vec3 _2859 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x));
                        float _2863 = _2823.x - _2365;
                        float _2864 = _2823.y - _2366;
                        float _2865 = _2823.z - _2367;
                        float _2866 = dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865));
                        float _2869 = inversesqrt(_2866);
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2873 = dot(vec3(_579, _582, _585), vec3(_2870, _2871, _2872));
                        float _2878 = 1.0 - (_2866 * _2823.w);
                        float _4165 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2880 = sqrt(_2866) * _2842.w;
                        float _2883 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2873) + _2884;
                        float _2890 = _2880 * _2880;
                        float _2894 = ((isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))) * _2879) / ((_2890 * 0.699999988079071044921875) + 1.0);
                        float _2898 = (-0.0) - _2365;
                        float _2899 = (-0.0) - _2366;
                        float _2900 = (-0.0) - _2367;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2915 = exp2(log2(1.0 / ((_2890 * 3.5) + 5.0)) * 0.25);
                        float _2916 = 1.0 - _700;
                        float _2923 = sqrt(1.0 - ((1.0 - (_2916 * _2916)) * (1.0 - (_2915 * _2915))));
                        float _2924 = _2923 * _2923;
                        float _2925 = _2924 * _2924;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2936 = dot(vec3(_579, _582, _585), vec3(_2905, _2906, _2907));
                        float _4181 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2940 = dot(vec3(_579, _582, _585), vec3(_2932 * _2926, _2932 * _2927, _2932 * _2928));
                        float _4192 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2947 = ((_2943 * _2943) * (_2925 + (-1.0))) + 1.0;
                        float _2948 = _2883 * _2924;
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2873) + _2949;
                        float _4203 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2954 = 1.0 - _2924;
                        float _2964 = (0.5 / (((_2953 * ((_2939 * _2954) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2953 * _2954) + _2924) * _2939))) * _2953;
                        float _4214 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2975 = (((_2925 * 3.1415927410125732421875) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) / ((_2947 * _2947) * ((_2890 * 2.1991131305694580078125) + 3.141590118408203125))) * _2879;
                        _2732 = (_2894 * _2842.x) + _2800;
                        _2733 = (_2894 * _2842.y) + _2801;
                        _2734 = (_2894 * _2842.z) + _2802;
                        _2729 = (_2975 * _2859.x) + _2797;
                        _2730 = (_2975 * _2859.y) + _2798;
                        _2731 = (_2975 * _2859.z) + _2799;
                        if (_2804 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2804;
                        }
                    }
                    frontier_phi_69_pred = _2734;
                    frontier_phi_69_pred_1 = _2733;
                    frontier_phi_69_pred_2 = _2732;
                    frontier_phi_69_pred_3 = _2730;
                    frontier_phi_69_pred_4 = _2729;
                    frontier_phi_69_pred_5 = _2731;
                }
                _2540 = frontier_phi_69_pred;
                _2538 = frontier_phi_69_pred_1;
                _2536 = frontier_phi_69_pred_2;
                _2532 = frontier_phi_69_pred_3;
                _2530 = frontier_phi_69_pred_4;
                _2534 = frontier_phi_69_pred_5;
                uint _2680 = _2679 + 1u;
                if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2673 = _2530;
                    _2674 = _2532;
                    _2675 = _2534;
                    _2676 = _2536;
                    _2677 = _2538;
                    _2678 = _2540;
                    _2679 = _2680;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
        }
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.z;
        uint _2546 = (_2544 >> 8u) & 15u;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((4294967295u << _2546) & _2411) == 0u)
        {
            _2641 = _2529;
            _2643 = _2531;
            _2645 = _2533;
            _2647 = _2535;
            _2649 = _2537;
            _2651 = _2539;
        }
        else
        {
            float _2666 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
            float _2667 = _2666 * _2365;
            float _2668 = _2666 * _2366;
            float _2669 = _2666 * _2367;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2546 < ((_2544 >> 12u) & 15u))
            {
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2780 = _2529;
                float _2781 = _2531;
                float _2782 = _2533;
                float _2783 = _2535;
                float _2784 = _2537;
                float _2785 = _2539;
                uint _2786 = _2546;
                uint _2795;
                bool _2796;
                for (;;)
                {
                    _2795 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                    _2796 = _2795 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2796)
                    {
                        frontier_phi_75_pred = _2782;
                        frontier_phi_75_pred_1 = _2781;
                        frontier_phi_75_pred_2 = _2780;
                        frontier_phi_75_pred_3 = _2785;
                        frontier_phi_75_pred_4 = _2784;
                        frontier_phi_75_pred_5 = _2783;
                    }
                    else
                    {
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        uint _2999 = _2795;
                        uint _3000;
                        vec4 _3025;
                        float _3026;
                        vec4 _3041;
                        vec3 _3053;
                        vec4 _3069;
                        vec4 _3084;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3010 = ((_2786 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2999));
                            _3000 = (_2999 + 4294967295u) & _2999;
                            uint _3012 = _3010 * 40u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3026 = _3025.w;
                            uint _3028 = (_3010 * 40u) + 4u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3043 = (_3010 * 40u) + 8u;
                            _3053 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x));
                            uint _3056 = (_3010 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_3010 * 40u) + 20u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3010 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3010 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2367, _3118.z, fma(_2366, _3118.y, _3118.x * _2365)) + _3118.w;
                            _3131 = !((fma(_2367, _3099.z, fma(_2366, _3099.y, _3099.x * _2365)) + _3099.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3025.x - _2365;
                                float _3159 = _3025.y - _2366;
                                float _3160 = _3025.z - _2367;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3026 * _3026));
                                float _4225 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3176 = sqrt(_3161) * _3041.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_579, _582, _585))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2367, _3069.z, fma(_2366, _3069.y, _3069.x * _2365)) + _3069.w) / _3130;
                                float _3190 = (fma(_2367, _3084.z, fma(_2366, _3084.y, _3084.x * _2365)) + _3084.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4241 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _700;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2667;
                                float _3220 = _3166 - _2668;
                                float _3221 = _3167 - _2669;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_579, _582, _585), vec3((-0.0) - _2667, (-0.0) - _2668, (-0.0) - _2669));
                                float _4252 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3233 = dot(vec3(_579, _582, _585), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4263 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_579, _582, _585), vec3(_3165, _3166, _3167))) + _3242;
                                float _4274 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4285 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3270 * _3053.z;
                                frontier_phi_81_pred_1 = _3270 * _3053.y;
                                frontier_phi_81_pred_2 = _3270 * _3053.x;
                                frontier_phi_81_pred_3 = _3196 * _3041.z;
                                frontier_phi_81_pred_4 = _3196 * _3041.y;
                                frontier_phi_81_pred_5 = _3196 * _3041.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3276 = frontier_phi_81_pred;
                            _3275 = frontier_phi_81_pred_1;
                            _3274 = frontier_phi_81_pred_2;
                            _3279 = frontier_phi_81_pred_3;
                            _3278 = frontier_phi_81_pred_4;
                            _3277 = frontier_phi_81_pred_5;
                            _2983 = _3277 + _2996;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2980 = _3274 + _2993;
                            _2981 = _3275 + _2994;
                            _2982 = _3276 + _2995;
                            if (_3000 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _3000;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2982;
                        frontier_phi_75_pred_1 = _2981;
                        frontier_phi_75_pred_2 = _2980;
                        frontier_phi_75_pred_3 = _2985;
                        frontier_phi_75_pred_4 = _2984;
                        frontier_phi_75_pred_5 = _2983;
                    }
                    _2646 = frontier_phi_75_pred;
                    _2644 = frontier_phi_75_pred_1;
                    _2642 = frontier_phi_75_pred_2;
                    _2652 = frontier_phi_75_pred_3;
                    _2650 = frontier_phi_75_pred_4;
                    _2648 = frontier_phi_75_pred_5;
                    uint _2787 = _2786 + 1u;
                    if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2780 = _2642;
                        _2781 = _2644;
                        _2782 = _2646;
                        _2783 = _2648;
                        _2784 = _2650;
                        _2785 = _2652;
                        _2786 = _2787;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2650;
                frontier_phi_63_64_ladder_1 = _2648;
                frontier_phi_63_64_ladder_2 = _2646;
                frontier_phi_63_64_ladder_3 = _2652;
                frontier_phi_63_64_ladder_4 = _2644;
                frontier_phi_63_64_ladder_5 = _2642;
            }
            else
            {
                frontier_phi_63_64_ladder = _2537;
                frontier_phi_63_64_ladder_1 = _2535;
                frontier_phi_63_64_ladder_2 = _2533;
                frontier_phi_63_64_ladder_3 = _2539;
                frontier_phi_63_64_ladder_4 = _2531;
                frontier_phi_63_64_ladder_5 = _2529;
            }
            _2641 = frontier_phi_63_64_ladder_5;
            _2643 = frontier_phi_63_64_ladder_4;
            _2645 = frontier_phi_63_64_ladder_2;
            _2647 = frontier_phi_63_64_ladder_1;
            _2649 = frontier_phi_63_64_ladder;
            _2651 = frontier_phi_63_64_ladder_3;
        }
        float _2656 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
        _2423 = (_2656 * _2647) + _1860;
        _2425 = (_2656 * _2649) + _1862;
        _2427 = (_2656 * _2651) + _1864;
        _2429 = ((_2641 * _669) * _2656) + _2205;
        _2431 = ((_2643 * _671) * _2656) + _2207;
        _2433 = ((_2645 * _672) * _2656) + _2209;
    }
    else
    {
        _2423 = _1860;
        _2425 = _1862;
        _2427 = _1864;
        _2429 = _2205;
        _2431 = _2207;
        _2433 = _2209;
    }
    vec4 _2439 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4301 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4312 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4323 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _2463 = (((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2423 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _684))) + ((_2429 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + (_2439.x * cbMtdParam._m0[3u].x);
    float _2465 = ((_2439.y * cbMtdParam._m0[3u].x) + ((_2431 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2425 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _684)));
    float _2467 = ((_2439.z * cbMtdParam._m0[3u].x) + ((_2433 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2427 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _684)));
    uint _2471 = _611 + 6u;
    float _2479 = _553 / cbSceneParam._m0[86u].x;
    float _2480 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2494 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, (log2((isnan(cbSceneParam._m0[77u].w) ? _487 : (isnan(_487) ? cbSceneParam._m0[77u].w : min(_487, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2496 = _2494.x;
    float _2497 = _2494.y;
    float _2498 = _2494.z;
    float _2499 = _2494.w;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    if (_487 > cbSceneParam._m0[78u].w)
    {
        float _2554 = isnan(_487) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _487 : min(cbSceneParam._m0[80u].w, _487));
        float _2555 = _2554 / _487;
        float _2566 = _2555 * _538;
        float _2567 = _539 * _2555;
        float _2568 = (-0.0) - _2567;
        float _2569 = _2555 * _540;
        float _2571 = (cbSceneParam._m0[77u].w * _2568) / _2554;
        float _2572 = _2571 + cbSceneParam._m0[79u].w;
        float _2573 = cbSceneParam._m0[79u].w - _2567;
        float _2579 = sqrt(((_2566 * _2566) + (_2567 * _2567)) + (_2569 * _2569));
        float _2582 = (1.0 - (cbSceneParam._m0[77u].w / _2554)) * _2579;
        float _2587 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2589 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2742;
        if (abs((_2568 - _2571) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2742 = ((((_2572 > 0.0) ? exp2(_2587 * _2572) : (2.0 - exp2(_2589 * _2572))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2582;
        }
        else
        {
            float _2702 = 1.0 / cbSceneParam._m0[80u].x;
            float _2703 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : max(_2572, _2573));
            float _2704 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : min(_2572, _2573));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            _2742 = ((abs(_2579 / _2568) * cbSceneParam._m0[80u].y) * ((((_2713 - _2714) * 2.0) - ((exp2(_2587 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0)))) - exp2(_2587 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0))))) * _2702)) - ((exp2(_2589 * _2713) - exp2(_2589 * _2714)) * _2702))) + (_2582 * cbSceneParam._m0[80u].z);
        }
        vec4 _2744 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, 1.0), 0.0);
        float _2753 = exp2((_2742 * (-1.44269502162933349609375)) * (1.0 - _2744.w));
        float _2754 = log2(_2753);
        float _2770 = log2(_2499);
        _2591 = (exp2(_2770 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].x)) * _2744.x) / cbSceneParam._m0[78u].x)) + _2496;
        _2593 = (exp2(_2770 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].y)) * _2744.y) / cbSceneParam._m0[78u].y)) + _2497;
        _2595 = (exp2(_2770 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].z)) * _2744.z) / cbSceneParam._m0[78u].z)) + _2498;
        _2597 = _2753 * _2499;
    }
    else
    {
        _2591 = _2496;
        _2593 = _2497;
        _2595 = _2498;
        _2597 = _2499;
    }
    float _2609 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2610 = _2609 == 3.0;
    float _2611 = log2(_2597);
    float _2618 = exp2(_2611 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)));
    float _2619 = exp2(_2611 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0)));
    float _2620 = exp2(_2611 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0)));
    float _2629 = (_2609 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2629 * (_2610 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.y = _2629 * (_2610 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.z = _2629 * (_2610 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.w = cbInstanceData._m0[_2471].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2471].w;
}


