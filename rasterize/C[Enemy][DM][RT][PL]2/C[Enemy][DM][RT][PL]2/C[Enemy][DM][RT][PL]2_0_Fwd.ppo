#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1172;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _262 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _275 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_262 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _286 = exp2(log2(_275.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[15u].x;
    _190[0u] = cbMtdParam._m0[15u].y;
    _191[0u] = cbMtdParam._m0[15u].z;
    _189[1u] = cbMtdParam._m0[16u].x;
    _190[1u] = cbMtdParam._m0[16u].y;
    _191[1u] = cbMtdParam._m0[16u].z;
    _189[2u] = cbMtdParam._m0[17u].x;
    _190[2u] = cbMtdParam._m0[17u].y;
    _191[2u] = cbMtdParam._m0[17u].z;
    _189[3u] = cbMtdParam._m0[12u].x;
    _190[3u] = cbMtdParam._m0[12u].y;
    _191[3u] = cbMtdParam._m0[12u].z;
    _189[4u] = cbMtdParam._m0[13u].x;
    _190[4u] = cbMtdParam._m0[13u].y;
    _191[4u] = cbMtdParam._m0[13u].z;
    _189[5u] = cbMtdParam._m0[14u].x;
    _190[5u] = cbMtdParam._m0[14u].y;
    _191[5u] = cbMtdParam._m0[14u].z;
    vec4 _353 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _356 = _353.y;
    float _359 = (_353.x + (-0.02500000037252902984619140625)) * 8.0;
    float _361 = roundEven(_359);
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    uint _365 = uint(int(isnan(5.0) ? _362 : (isnan(_362) ? 5.0 : min(_362, 5.0))));
    float _382;
    if (_286)
    {
        _382 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _382 = cbMtdParam._m0[20u].z;
    }
    float _388;
    float _390;
    if (_286)
    {
        _388 = cbMtdParam._m0[28u].z;
        _390 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _388 = cbMtdParam._m0[24u].x;
        _390 = cbMtdParam._m0[24u].y;
    }
    float _392 = _388 * TEXCOORD.x;
    float _393 = _390 * TEXCOORD.y;
    float _405 = floor(_382);
    vec4 _408 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _392) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _393) + cbTextureTilingScale._m0[8u].w, _405));
    vec4 _430 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _262) + cbTextureTilingScale._m0[0u].w));
    float _438 = ((((((_189[_365] - cbMtdParam._m0[19u].x) * _356) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _408.x) * cbMtdParam._m0[9u].x) * _430.x;
    float _442 = ((((((_190[_365] - cbMtdParam._m0[19u].y) * _356) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _408.y) * cbMtdParam._m0[9u].y) * _430.y;
    float _446 = ((((((_191[_365] - cbMtdParam._m0[19u].z) * _356) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _408.z) * cbMtdParam._m0[9u].z) * _430.z;
    vec4 _458 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _262) + cbTextureTilingScale._m0[1u].w));
    float _462 = _458.z;
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].x;
    _185[0u] = cbMtdParam._m0[25u].y;
    _184[1u] = cbMtdParam._m0[26u].x;
    _185[1u] = cbMtdParam._m0[26u].y;
    _184[2u] = cbMtdParam._m0[26u].z;
    _185[2u] = cbMtdParam._m0[26u].w;
    _184[3u] = cbMtdParam._m0[27u].x;
    _185[3u] = cbMtdParam._m0[27u].y;
    _184[4u] = cbMtdParam._m0[25u].z;
    _185[4u] = cbMtdParam._m0[25u].w;
    float _507 = roundEven(5.0 - _359);
    float _508 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = isnan(4.0) ? _508 : (isnan(_508) ? 4.0 : min(_508, 4.0));
    float _511 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    uint _513 = uint(int(isnan(4.0) ? _511 : (isnan(_511) ? 4.0 : min(_511, 4.0))));
    float _519 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _392) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _393) + cbTextureTilingScale._m0[10u].w, _405)).x + _458.w) + _185[_513];
    vec4 _537 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _392) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _393) + cbTextureTilingScale._m0[9u].w, _405));
    float _544 = (_537.x * 2.0) + (-1.0);
    float _545 = (_537.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3551 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _552 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _561 = (cbMtdParam._m0[21u].x * (((_462 * 2.0) * (_537.z + _184[_513])) - _462)) + _462;
    float _565 = (cbMtdParam._m0[21u].y * ((_458.x * 2.0) + (-1.0))) + _544;
    float _566 = (cbMtdParam._m0[21u].y * ((_458.y * 2.0) + (-1.0))) + _545;
    float _569 = fma(_552, _241, fma(_566, _233 * TANGENT.x, (_219 * _211) * _565));
    float _572 = fma(_552, _242, fma(_566, _233 * TANGENT.y, (_219 * _212) * _565));
    float _575 = fma(_552, _243, fma(_566, _233 * TANGENT.z, (_219 * _213) * _565));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _3562 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _583 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3584 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3595 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3606 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _587 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _654 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _644);
    float _655 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _644);
    float _656 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _644);
    float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
    float _661 = _654 * _660;
    float _662 = _655 * _660;
    float _663 = _656 * _660;
    float _669 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _670 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _672 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _674 = _672.w;
    float _693 = fma(_582, cbSceneParam._m0[5u].z, fma(_581, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _580));
    float _696 = fma(_582, cbSceneParam._m0[6u].z, fma(_581, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _580));
    float _699 = fma(_582, cbSceneParam._m0[7u].z, fma(_581, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _580));
    vec4 _701 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _712 = (((_701.y - _583) + (_701.w * _583)) * cbMtdParam._m0[3u].x) + _583;
    uint _725 = uint(roundEven(NORMAL.w)) * 13u;
    uint _727 = (_725 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _733 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_727].x;
    float _734 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_727].y;
    float _735 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_727].z;
    float _3617 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    vec4 _739 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _744 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _755 = (((_744.x - _587) + (_744.w * _587)) * cbMtdParam._m0[3u].x) + _587;
    float _768 = (cbMtdParam._m0[3u].x * (((_736 * _674) - _736) + _739.x)) + _736;
    float _769 = (cbMtdParam._m0[3u].x * (((_737 * _674) - _737) + _739.y)) + _737;
    float _770 = (cbMtdParam._m0[3u].x * (((_738 * _674) - _738) + _739.z)) + _738;
    float _771 = 1.0 - _755;
    float _772 = _771 * _768;
    float _773 = _771 * _769;
    float _774 = _771 * _770;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _755;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _755;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _755;
    float _782 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    float _785 = _781 + 0.039999999105930328369140625;
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _669, cbSceneParam._m0[86u].y * _670));
    float _797 = _794.x * TEXCOORD_4;
    float _798 = dot(vec3(_580, _581, _582), vec3(_661, _662, _663));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _580) - _661;
    float _806 = (_801 * _581) - _662;
    float _807 = (_801 * _582) - _663;
    float _811 = abs(dot(vec3(_661, _662, _663), vec3(_580, _581, _582)));
    float _3650 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_712);
    float _824 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _830 = (1.0 - _824) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _831 = _824 * _813;
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _900 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _904 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _929 = _859 + _580;
        float _930 = _863 + _581;
        float _931 = _867 + _582;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_580, _581, _582), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3698 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_580, _581, _582), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3731 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_580, _581, _582), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3764 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1216 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1220 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1243 = _859 + _580;
        float _1244 = _863 + _581;
        float _1245 = _867 + _582;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_580, _581, _582), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3827 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_580, _581, _582), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3860 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_580, _581, _582), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3893 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1172;
        _1482 = _1172;
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = _1172;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1184)) + _1184;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1185)) + _1185;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1186)) + _1186;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _805 * 0.5;
    float _1550 = _806 * 0.5;
    float _1551 = _807 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1679 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1682 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1710 = frontier_phi_20_18_ladder;
        }
        float _1913;
        if (_1679 > 0.0)
        {
            _1913 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1913 = frontier_phi_29_25_ladder;
        }
        float _2167;
        if (_1682 > 0.0)
        {
            _2167 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2167 = frontier_phi_41_36_ladder;
        }
        float _2169 = isnan(_1913) ? _1710 : (isnan(_1710) ? _1913 : min(_1710, _1913));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1676) + _1665;
        float _2175 = (_2170 * _1679) + _1669;
        float _2176 = (_2170 * _1682) + _1673;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_19_41_ladder = _2304.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2304.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2304.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_19_41_ladder_2;
        _1700 = frontier_phi_19_41_ladder_1;
        _1702 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1775 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1778 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1918;
        if (_1772 > 0.0)
        {
            _1918 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1918 = frontier_phi_31_27_ladder;
        }
        float _2194;
        if (_1775 > 0.0)
        {
            _2194 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2194 = frontier_phi_43_38_ladder;
        }
        float _2407;
        if (_1778 > 0.0)
        {
            _2407 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2407 = frontier_phi_52_49_ladder;
        }
        float _2409 = isnan(_2194) ? _1918 : (isnan(_1918) ? _2194 : min(_1918, _2194));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1772) + _1761;
        float _2415 = (_2410 * _1775) + _1765;
        float _2416 = (_2410 * _1778) + _1769;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2417;
        float _2420 = _2417 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2416 > _2420) || ((_2416 < _2418) || ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 < _2418) || (_2414 > _2420))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2416, cbModelParam._m0[17u].z, fma(_2415, cbModelParam._m0[17u].y, _2414 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2416, cbModelParam._m0[18u].z, fma(_2415, cbModelParam._m0[18u].y, _2414 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2416, cbModelParam._m0[19u].z, fma(_2415, cbModelParam._m0[19u].y, _2414 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_28_52_ladder = _2632.z * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_1 = _2632.y * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_2 = _2632.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_28_52_ladder_2;
        _1799 = frontier_phi_28_52_ladder_1;
        _1801 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1707);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1814 = (((_830 * _782) + _831) * _797) * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1816 = (((_830 * _784) + _831) * _797) * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1818 = (((_830 * _785) + _831) * _797) * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    uvec4 _1837 = floatBitsToUint(cbInstanceData._m0[_725 + 5u]);
    uint _1839 = _1837.x * 14u;
    uint _1840 = _1839 + 13u;
    float _1847 = _797 + (-1.0);
    float _1852 = (cbLight._m0[_1840].x * _1847) + 1.0;
    float _1853 = (cbLight._m0[_1840].y * _1847) + 1.0;
    float _1854 = (cbLight._m0[_1840].z * _1847) + 1.0;
    float _1855 = (cbLight._m0[_1840].w * _1847) + 1.0;
    uint _1856 = _1839 + 5u;
    float _1862 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1866 = _1839 + 4u;
    float _1872 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1876 = _1839 | 1u;
    float _1887 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_580, _581, _582));
    float _1890 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_580, _581, _582));
    float _4029 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _4040 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1895 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1897 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1904 = ((cbLight._m0[_1856].x * _1862) * _1897) + ((cbLight._m0[_1866].x * _1872) * _1895);
    float _1905 = ((_1862 * cbLight._m0[_1856].y) * _1897) + ((_1872 * cbLight._m0[_1866].y) * _1895);
    float _1906 = ((_1862 * cbLight._m0[_1856].z) * _1897) + ((_1872 * cbLight._m0[_1866].z) * _1895);
    uvec4 _1910 = floatBitsToUint(cbLight._m0[_1839 + 12u]);
    bool _1912 = _1910.x == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1912)
    {
        _1923 = _1904;
        _1925 = _1905;
        _1927 = _1906;
    }
    else
    {
        uint _1931 = _1839 + 6u;
        float _1947 = (dot(vec3(cbLight._m0[_1839 + 2u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _4051 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1950 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1923 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1904;
        _1925 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1905;
        _1927 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1906;
    }
    bool _1930 = _1910.y == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1930)
    {
        _1968 = _1923;
        _1970 = _1925;
        _1972 = _1927;
    }
    else
    {
        uint _2138 = _1839 + 7u;
        float _2154 = (dot(vec3(cbLight._m0[_1839 + 3u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4067 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2157 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1968 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _1923;
        _1970 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _1925;
        _1972 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _1927;
    }
    uint _1975 = _1839 + 8u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _712) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1839].x + _661;
    float _1991 = cbLight._m0[_1839].y + _662;
    float _1992 = cbLight._m0[_1839].z + _663;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1839].xyz));
    float _4083 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2004 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2005 = dot(vec3(_580, _581, _582), vec3(_1997, _1998, _1999));
    float _4105 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1997, _1998, _1999));
    float _4116 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1989 * _1989;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
    float _2026 = 0.959999978542327880859375 - _779;
    float _2028 = 0.959999978542327880859375 - _780;
    float _2029 = 0.959999978542327880859375 - _781;
    float _2036 = 1.0 - _1989;
    float _2047 = (0.5 / (((_2004 * ((_2003 * _2036) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2036) + _1989) * _2003))) * _2003;
    float _4127 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    uint _2060 = _1839 + 9u;
    float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _712) * 0.949999988079071044921875);
    float _2072 = _2071 * _2071;
    float _2073 = cbLight._m0[_1876].x + _661;
    float _2074 = cbLight._m0[_1876].y + _662;
    float _2075 = cbLight._m0[_1876].z + _663;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2080 = _2079 * _2073;
    float _2081 = _2079 * _2074;
    float _2082 = _2079 * _2075;
    float _2083 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1876].xyz));
    float _4138 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2087 = dot(vec3(_580, _581, _582), vec3(_2080, _2081, _2082));
    float _4149 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2080, _2081, _2082));
    float _4160 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2072 * _2072;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _2113 = 1.0 - _2072;
    float _2123 = (0.5 / (((_2004 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2113) + _2072) * _2086))) * _2086;
    float _4171 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    float _2135 = (((((_2106 * _2026) + _782) * cbLight._m0[_2060].x) * _2125) * _1862) + (((((_2025 * _2026) + _782) * cbLight._m0[_1975].x) * _2049) * _1872);
    float _2136 = (((((_2106 * _2028) + _784) * cbLight._m0[_2060].y) * _2125) * _1862) + (((((_2025 * _2028) + _784) * cbLight._m0[_1975].y) * _2049) * _1872);
    float _2137 = (((((_2106 * _2029) + _785) * cbLight._m0[_2060].z) * _2125) * _1862) + (((((_2025 * _2029) + _785) * cbLight._m0[_1975].z) * _2049) * _1872);
    float _2199;
    float _2201;
    float _2203;
    if (_1912)
    {
        _2199 = _2135;
        _2201 = _2136;
        _2203 = _2137;
    }
    else
    {
        uint _2205 = _1839 + 2u;
        uint _2209 = _1839 + 10u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _712) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _661;
        float _2226 = cbLight._m0[_2205].y + _662;
        float _2227 = cbLight._m0[_2205].z + _663;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2205].xyz));
        float _4182 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2239 = dot(vec3(_580, _581, _582), vec3(_2232, _2233, _2234));
        float _4193 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4204 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
        float _2265 = 1.0 - _2224;
        float _2275 = (0.5 / (((_2004 * ((_2238 * _2265) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2265) + _2224) * _2238))) * _2238;
        float _4215 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2199 = (((((_2258 * _2026) + _782) * cbLight._m0[_2209].x) * _2277) * _2278) + _2135;
        _2201 = (((((_2258 * _2028) + _784) * cbLight._m0[_2209].y) * _2277) * _2278) + _2136;
        _2203 = (((((_2258 * _2029) + _785) * cbLight._m0[_2209].z) * _2277) * _2278) + _2137;
    }
    float _2313;
    float _2315;
    float _2317;
    if (_1930)
    {
        _2313 = _2199;
        _2315 = _2201;
        _2317 = _2203;
    }
    else
    {
        uint _2324 = _1839 + 3u;
        uint _2328 = _1839 + 11u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _712) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _661;
        float _2345 = cbLight._m0[_2324].y + _662;
        float _2346 = cbLight._m0[_2324].z + _663;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2324].xyz));
        float _4231 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2358 = dot(vec3(_580, _581, _582), vec3(_2351, _2352, _2353));
        float _4242 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4253 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2384 = 1.0 - _2343;
        float _2394 = (0.5 / (((_2004 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2384) + _2343) * _2357))) * _2357;
        float _4264 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2313 = (((((_2377 * _2026) + _782) * cbLight._m0[_2328].x) * _2396) * _2397) + _2199;
        _2315 = (((((_2377 * _2028) + _784) * cbLight._m0[_2328].y) * _2396) * _2397) + _2201;
        _2317 = (((((_2377 * _2029) + _785) * cbLight._m0[_2328].z) * _2396) * _2397) + _2203;
    }
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    if (_1837.y == 0u)
    {
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2472;
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2472;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2472;
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.x;
        uint _2499 = uint((float(_2487.y) * floor(float(uint(cbSceneParam._m0[85u].y * _670) / _2488))) + floor(float(uint(cbSceneParam._m0[85u].x * _669) / _2488)));
        float _2509 = (log2(_2475 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2510 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        uint _2513 = uint(isnan(14.0) ? _2510 : (isnan(_2510) ? 14.0 : min(_2510, 14.0)));
        uvec4 _2518 = texelFetch(g_lightClusterGridBuffer, int(((_2513 << 2u) + (_2499 << 6u)) >> 2u));
        uint _2519 = _2518.x;
        uint _2520 = _2487.z;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((((1u << ((_2520 >> 4u) & 15u)) + 4294967295u) & _2519) == 0u) || ((_2520 & 240u) == 0u))
        {
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
        }
        else
        {
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2797)
                {
                    frontier_phi_67_pred = _2786;
                    frontier_phi_67_pred_1 = _2785;
                    frontier_phi_67_pred_2 = _2784;
                    frontier_phi_67_pred_3 = _2783;
                    frontier_phi_67_pred_4 = _2782;
                    frontier_phi_67_pred_5 = _2781;
                }
                else
                {
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    uint _2911;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2796;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    for (;;)
                    {
                        uint _2915 = uint(findLSB(_2911)) + (_2787 << 5u);
                        uint _2912 = (_2911 + 4294967295u) & _2911;
                        uint _2917 = _2915 * 48u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2937 = (_2915 * 48u) + 4u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2956 = (_2915 * 48u) + 8u;
                        vec3 _2967 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x));
                        float _2971 = _2931.x - _2473;
                        float _2972 = _2931.y - _2474;
                        float _2973 = _2931.z - _2475;
                        float _2974 = dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973));
                        float _2977 = inversesqrt(_2974);
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2981 = dot(vec3(_693, _696, _699), vec3(_2978, _2979, _2980));
                        float _2986 = 1.0 - (_2974 * _2931.w);
                        float _4290 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2988 = sqrt(_2974) * _2950.w;
                        float _2991 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2981) + _2992;
                        float _2998 = _2988 * _2988;
                        float _3002 = ((isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))) * _2987) / ((_2998 * 0.699999988079071044921875) + 1.0);
                        float _3006 = (-0.0) - _2473;
                        float _3007 = (-0.0) - _2474;
                        float _3008 = (-0.0) - _2475;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3023 = exp2(log2(1.0 / ((_2998 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _813;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3036 = _3015 + _2980;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_693, _696, _699), vec3(_3013, _3014, _3015));
                        float _4306 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3048 = dot(vec3(_693, _696, _699), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4317 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2991 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2981) + _3057;
                        float _4328 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4339 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) / ((_3055 * _3055) * ((_2998 * 2.1991131305694580078125) + 3.141590118408203125))) * _2987;
                        _2840 = (_3002 * _2950.x) + _2908;
                        _2841 = (_3002 * _2950.y) + _2909;
                        _2842 = (_3002 * _2950.z) + _2910;
                        _2837 = (_3083 * _2967.x) + _2905;
                        _2838 = (_3083 * _2967.y) + _2906;
                        _2839 = (_3083 * _2967.z) + _2907;
                        if (_2912 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2912;
                        }
                    }
                    frontier_phi_67_pred = _2842;
                    frontier_phi_67_pred_1 = _2841;
                    frontier_phi_67_pred_2 = _2840;
                    frontier_phi_67_pred_3 = _2839;
                    frontier_phi_67_pred_4 = _2838;
                    frontier_phi_67_pred_5 = _2837;
                }
                _2648 = frontier_phi_67_pred;
                _2646 = frontier_phi_67_pred_1;
                _2644 = frontier_phi_67_pred_2;
                _2642 = frontier_phi_67_pred_3;
                _2640 = frontier_phi_67_pred_4;
                _2638 = frontier_phi_67_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2638;
                    _2782 = _2640;
                    _2783 = _2642;
                    _2784 = _2644;
                    _2785 = _2646;
                    _2786 = _2648;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
        }
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.z;
        uint _2654 = (_2652 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2654) & _2519) == 0u)
        {
            _2749 = _2637;
            _2751 = _2639;
            _2753 = _2641;
            _2755 = _2643;
            _2757 = _2645;
            _2759 = _2647;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
            float _2775 = _2774 * _2473;
            float _2776 = _2774 * _2474;
            float _2777 = _2774 * _2475;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2654 < ((_2652 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2888 = _2637;
                float _2889 = _2639;
                float _2890 = _2641;
                float _2891 = _2643;
                float _2892 = _2645;
                float _2893 = _2647;
                uint _2894 = _2654;
                uint _2903;
                bool _2904;
                for (;;)
                {
                    _2903 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                    _2904 = _2903 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2904)
                    {
                        frontier_phi_73_pred = _2893;
                        frontier_phi_73_pred_1 = _2892;
                        frontier_phi_73_pred_2 = _2891;
                        frontier_phi_73_pred_3 = _2890;
                        frontier_phi_73_pred_4 = _2889;
                        frontier_phi_73_pred_5 = _2888;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        uint _3107 = _2903;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        vec3 _3161;
                        vec4 _3176;
                        vec4 _3191;
                        float _3237;
                        bool _3238;
                        for (;;)
                        {
                            uint _3118 = ((_2894 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3118 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3163 = (_3118 * 40u) + 16u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3118 * 40u) + 20u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3193 = (_3118 * 40u) + 24u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3212 = (_3118 * 40u) + 28u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3237 = fma(_2475, _3225.z, fma(_2474, _3225.y, _3225.x * _2473)) + _3225.w;
                            _3238 = !((fma(_2475, _3206.z, fma(_2474, _3206.y, _3206.x * _2473)) + _3206.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3238)
                            {
                                float _3265 = _3133.x - _2473;
                                float _3266 = _3133.y - _2474;
                                float _3267 = _3133.z - _2475;
                                float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                                float _3271 = inversesqrt(_3268);
                                float _3272 = _3271 * _3265;
                                float _3273 = _3271 * _3266;
                                float _3274 = _3271 * _3267;
                                float _3278 = 1.0 - (_3268 / (_3134 * _3134));
                                float _4350 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3283 = sqrt(_3268) * _3149.w;
                                float _3285 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                                float _3286 = _3285 * _3285;
                                float _3289 = ((1.0 - _3286) * dot(vec3(_3272, _3273, _3274), vec3(_693, _696, _699))) + _3286;
                                float _3292 = _3283 * _3283;
                                float _3296 = (fma(_2475, _3176.z, fma(_2474, _3176.y, _3176.x * _2473)) + _3176.w) / _3237;
                                float _3297 = (fma(_2475, _3191.z, fma(_2474, _3191.y, _3191.x * _2473)) + _3191.w) / _3237;
                                float _3301 = 1.0 - dot(vec2(_3296, _3297), vec2(_3296, _3297));
                                float _4366 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3303 = _3302 * (((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3279) / ((_3292 * 0.699999988079071044921875) + 1.0));
                                float _3315 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                                float _3316 = 1.0 - _813;
                                float _3323 = sqrt(1.0 - ((1.0 - (_3316 * _3316)) * (1.0 - (_3315 * _3315))));
                                float _3324 = _3323 * _3323;
                                float _3325 = _3324 * _3324;
                                float _3326 = _3272 - _2775;
                                float _3327 = _3273 - _2776;
                                float _3328 = _3274 - _2777;
                                float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                                float _3336 = dot(vec3(_693, _696, _699), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4377 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3340 = dot(vec3(_693, _696, _699), vec3(_3332 * _3326, _3332 * _3327, _3332 * _3328));
                                float _4388 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3347 = ((_3343 * _3343) * (_3325 + (-1.0))) + 1.0;
                                float _3348 = _3285 * _3324;
                                float _3349 = _3348 * _3348;
                                float _3355 = ((1.0 - _3349) * dot(vec3(_693, _696, _699), vec3(_3272, _3273, _3274))) + _3349;
                                float _4399 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3357 = 1.0 - _3324;
                                float _3367 = (0.5 / (((_3356 * ((_3339 * _3357) + _3324)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3324) * _3339))) * _3356;
                                float _4410 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3377 = (_3302 * _3279) * (((_3325 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3347 * _3347) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3303 * _3149.y;
                                frontier_phi_79_pred_1 = _3303 * _3149.x;
                                frontier_phi_79_pred_2 = _3377 * _3161.z;
                                frontier_phi_79_pred_3 = _3377 * _3161.y;
                                frontier_phi_79_pred_4 = _3377 * _3161.x;
                                frontier_phi_79_pred_5 = _3303 * _3149.z;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_79_pred;
                            _3384 = frontier_phi_79_pred_1;
                            _3383 = frontier_phi_79_pred_2;
                            _3382 = frontier_phi_79_pred_3;
                            _3381 = frontier_phi_79_pred_4;
                            _3386 = frontier_phi_79_pred_5;
                            _3091 = _3384 + _3104;
                            _3092 = _3385 + _3105;
                            _3093 = _3386 + _3106;
                            _3088 = _3381 + _3101;
                            _3089 = _3382 + _3102;
                            _3090 = _3383 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3093;
                        frontier_phi_73_pred_1 = _3092;
                        frontier_phi_73_pred_2 = _3091;
                        frontier_phi_73_pred_3 = _3090;
                        frontier_phi_73_pred_4 = _3089;
                        frontier_phi_73_pred_5 = _3088;
                    }
                    _2760 = frontier_phi_73_pred;
                    _2758 = frontier_phi_73_pred_1;
                    _2756 = frontier_phi_73_pred_2;
                    _2754 = frontier_phi_73_pred_3;
                    _2752 = frontier_phi_73_pred_4;
                    _2750 = frontier_phi_73_pred_5;
                    uint _2895 = _2894 + 1u;
                    if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2888 = _2750;
                        _2889 = _2752;
                        _2890 = _2754;
                        _2891 = _2756;
                        _2892 = _2758;
                        _2893 = _2760;
                        _2894 = _2895;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2760;
                frontier_phi_61_62_ladder_1 = _2758;
                frontier_phi_61_62_ladder_2 = _2754;
                frontier_phi_61_62_ladder_3 = _2752;
                frontier_phi_61_62_ladder_4 = _2750;
                frontier_phi_61_62_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_61_62_ladder = _2647;
                frontier_phi_61_62_ladder_1 = _2645;
                frontier_phi_61_62_ladder_2 = _2641;
                frontier_phi_61_62_ladder_3 = _2639;
                frontier_phi_61_62_ladder_4 = _2637;
                frontier_phi_61_62_ladder_5 = _2643;
            }
            _2749 = frontier_phi_61_62_ladder_4;
            _2751 = frontier_phi_61_62_ladder_3;
            _2753 = frontier_phi_61_62_ladder_2;
            _2755 = frontier_phi_61_62_ladder_5;
            _2757 = frontier_phi_61_62_ladder_1;
            _2759 = frontier_phi_61_62_ladder;
        }
        float _2764 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2531 = (_2764 * _2755) + _1968;
        _2533 = (_2764 * _2757) + _1970;
        _2535 = (_2764 * _2759) + _1972;
        _2537 = ((_2749 * _782) * _2764) + _2313;
        _2539 = ((_2751 * _784) * _2764) + _2315;
        _2541 = ((_2753 * _785) * _2764) + _2317;
    }
    else
    {
        _2531 = _1968;
        _2533 = _1970;
        _2535 = _1972;
        _2537 = _2313;
        _2539 = _2315;
        _2541 = _2317;
    }
    vec4 _2547 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4426 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4437 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4448 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2571 = (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2531 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _797))) + ((_2537 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + (_2547.x * cbMtdParam._m0[3u].x);
    float _2573 = ((_2547.y * cbMtdParam._m0[3u].x) + ((_2539 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2533 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _797)));
    float _2575 = ((_2547.z * cbMtdParam._m0[3u].x) + ((_2541 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2535 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _797)));
    uint _2579 = _725 + 6u;
    float _2587 = _669 / cbSceneParam._m0[86u].x;
    float _2588 = _670 / cbSceneParam._m0[86u].y;
    vec4 _2602 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2604 = _2602.x;
    float _2605 = _2602.y;
    float _2606 = _2602.z;
    float _2607 = _2602.w;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2662 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2663 = _2662 / _603;
        float _2674 = _2663 * _654;
        float _2675 = _655 * _2663;
        float _2676 = (-0.0) - _2675;
        float _2677 = _2663 * _656;
        float _2679 = (cbSceneParam._m0[77u].w * _2676) / _2662;
        float _2680 = _2679 + cbSceneParam._m0[79u].w;
        float _2681 = cbSceneParam._m0[79u].w - _2675;
        float _2687 = sqrt(((_2674 * _2674) + (_2675 * _2675)) + (_2677 * _2677));
        float _2690 = (1.0 - (cbSceneParam._m0[77u].w / _2662)) * _2687;
        float _2695 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2697 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2850;
        if (abs((_2676 - _2679) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2850 = ((((_2680 > 0.0) ? exp2(_2695 * _2680) : (2.0 - exp2(_2697 * _2680))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2690;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : max(_2680, _2681));
            float _2812 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : min(_2680, _2681));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2850 = ((abs(_2687 / _2676) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2695 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2695 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2697 * _2821) - exp2(_2697 * _2822)) * _2810))) + (_2690 * cbSceneParam._m0[80u].z);
        }
        vec4 _2852 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, 1.0), 0.0);
        float _2861 = exp2((_2850 * (-1.44269502162933349609375)) * (1.0 - _2852.w));
        float _2862 = log2(_2861);
        float _2878 = log2(_2607);
        _2699 = (exp2(_2878 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].x)) * _2852.x) / cbSceneParam._m0[78u].x)) + _2604;
        _2701 = (exp2(_2878 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].y)) * _2852.y) / cbSceneParam._m0[78u].y)) + _2605;
        _2703 = (exp2(_2878 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].z)) * _2852.z) / cbSceneParam._m0[78u].z)) + _2606;
        _2705 = _2861 * _2607;
    }
    else
    {
        _2699 = _2604;
        _2701 = _2605;
        _2703 = _2606;
        _2705 = _2607;
    }
    float _2717 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2718 = _2717 == 3.0;
    float _2719 = log2(_2705);
    float _2726 = exp2(_2719 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0)));
    float _2727 = exp2(_2719 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)));
    float _2728 = exp2(_2719 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)));
    float _2737 = (_2717 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2737 * (_2718 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.y = _2737 * (_2718 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.z = _2737 * (_2718 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.w = cbInstanceData._m0[_2579].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2579].w;
}


