#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1303;
float _3736;
float _3737;
float _3738;
float _3739;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246;
    float _247;
    float _248;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
    }
    else
    {
        _246 = _232;
        _247 = _233;
        _248 = _234;
    }
    vec4 _275 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _286 = exp2(log2(_275.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _287;
    float _289;
    float _291;
    if (_286)
    {
        _287 = cbMtdParam._m0[19u].x;
        _289 = cbMtdParam._m0[19u].y;
        _291 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _287 = cbMtdParam._m0[18u].x;
        _289 = cbMtdParam._m0[18u].y;
        _291 = cbMtdParam._m0[18u].z;
    }
    float _297;
    if (_286)
    {
        _297 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _297 = cbMtdParam._m0[20u].z;
    }
    float _303;
    float _305;
    if (_286)
    {
        _303 = cbMtdParam._m0[28u].z;
        _305 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _303 = cbMtdParam._m0[24u].x;
        _305 = cbMtdParam._m0[24u].y;
    }
    float _307 = _303 * TEXCOORD.x;
    float _308 = _305 * TEXCOORD.y;
    float _320 = floor(_297);
    vec4 _323 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _307) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _308) + cbTextureTilingScale._m0[8u].w, _320));
    vec4 _345 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _354 = (((_287 * cbMtdParam._m0[20u].w) * _323.x) * cbMtdParam._m0[9u].x) * _345.x;
    float _358 = (((_289 * cbMtdParam._m0[20u].w) * _323.y) * cbMtdParam._m0[9u].y) * _345.y;
    float _362 = (((_291 * cbMtdParam._m0[20u].w) * _323.z) * cbMtdParam._m0[9u].z) * _345.z;
    float _374 = cbMtdParam._m0[24u].z * TEXCOORD.x;
    float _375 = cbMtdParam._m0[24u].w * TEXCOORD.y;
    vec4 _387 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _374) + cbTextureTilingScale._m0[3u].z, (_375 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _409 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _413 = _409.z;
    float _414 = _409.w;
    float _419 = exp2(log2(_414 * cbMtdParam._m0[22u].z) * cbMtdParam._m0[22u].y);
    float _426 = (_419 * ((_387.x * cbMtdParam._m0[10u].x) - _354)) + _354;
    float _427 = (_419 * ((_387.y * cbMtdParam._m0[10u].y) - _358)) + _358;
    float _428 = (_419 * ((_387.z * cbMtdParam._m0[10u].z) - _362)) + _362;
    vec4 _441 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _465 = exp2(log2(cbMtdParam._m0[20u].x * _345.w) * cbMtdParam._m0[21u].w);
    float _466 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
    float _475 = (_467 * ((cbMtdParam._m0[11u].x * _441.x) - _426)) + _426;
    float _476 = (_467 * ((cbMtdParam._m0[11u].y * _441.y) - _427)) + _427;
    float _477 = (_467 * ((cbMtdParam._m0[11u].z * _441.z) - _428)) + _428;
    float _195[2];
    float _196[2];
    _195[0u] = cbMtdParam._m0[27u].z;
    _196[0u] = cbMtdParam._m0[27u].w;
    _195[1u] = cbMtdParam._m0[28u].x;
    _196[1u] = cbMtdParam._m0[28u].y;
    float _509 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    uint _511 = uint(int(isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0))));
    float _516 = _196[_511] + texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w, _320)).x;
    float _519 = ((cbMtdParam._m0[23u].y - _516) * _419) + _516;
    float _526 = (_519 + _414) + ((cbMtdParam._m0[22u].x - _519) * _467);
    vec4 _544 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w, _320));
    float _551 = (_544.x * 2.0) + (-1.0);
    float _552 = (_544.y * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3768 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))));
    float _567 = (cbMtdParam._m0[21u].x * (((_413 * 2.0) * (_544.z + _195[_511])) - _413)) + _413;
    vec4 _580 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _374) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _375) + cbTextureTilingScale._m0[6u].w));
    float _587 = (_580.x * 2.0) + (-1.0);
    float _588 = (_580.y * 2.0) + (-1.0);
    float _589 = dot(vec2(_587, _588), vec2(_587, _588));
    float _3779 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _601 = (((_580.z - _567) + cbMtdParam._m0[23u].z) * _419) + _567;
    vec4 _614 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _621 = (_614.x * 2.0) + (-1.0);
    float _622 = (_614.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3790 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _633 = (((_614.z - _601) + cbMtdParam._m0[23u].w) * _467) + _601;
    float _637 = (cbMtdParam._m0[21u].y * ((_409.x * 2.0) + (-1.0))) + _551;
    float _638 = (cbMtdParam._m0[21u].y * ((_409.y * 2.0) + (-1.0))) + _552;
    float _645 = ((_587 - _637) * _419) + _637;
    float _646 = ((_588 - _638) * _419) + _638;
    float _647 = ((sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) - _558) * _419) + _558;
    float _654 = ((_621 - _645) * _467) + _645;
    float _655 = ((_622 - _646) * _467) + _646;
    float _656 = ((sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _647) * _467) + _647;
    float _659 = fma(_656, _246, fma(_655, _238 * TANGENT.x, (_224 * _216) * _654));
    float _662 = fma(_656, _247, fma(_655, _238 * TANGENT.y, (_224 * _217) * _654));
    float _665 = fma(_656, _248, fma(_655, _238 * TANGENT.z, (_224 * _218) * _654));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3801 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _673 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3823 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3834 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3845 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _677 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    vec4 _757 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _759 = _757.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _983 = sqrt(((_743 * _743) + (_744 * _744)) + (_745 * _745));
        float _989 = (cbMatDynParam._m0[5u].x * _983) + cbMatDynParam._m0[5u].y;
        float _3856 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _994 = (cbMatDynParam._m0[5u].z * _983) + cbMatDynParam._m0[5u].w;
        float _3867 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) - _990)) + _990) < ((_759 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _772 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _773 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _775 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _777 = _775.w;
    float _795 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _798 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _801 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    vec4 _803 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _814 = (((_803.y - _673) + (_803.w * _673)) * cbMtdParam._m0[3u].x) + _673;
    uint _827 = uint(roundEven(NORMAL.w)) * 13u;
    uint _829 = _827 + 9u;
    uint _830 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_830].z;
    float _3878 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    vec4 _842 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _847 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _858 = (((_847.x - _677) + (_847.w * _677)) * cbMtdParam._m0[3u].x) + _677;
    float _871 = (cbMtdParam._m0[3u].x * (((_839 * _777) - _839) + _842.x)) + _839;
    float _872 = (cbMtdParam._m0[3u].x * (((_840 * _777) - _840) + _842.y)) + _840;
    float _873 = (cbMtdParam._m0[3u].x * (((_841 * _777) - _841) + _842.z)) + _841;
    float _874 = 1.0 - _858;
    float _875 = _874 * _871;
    float _876 = _874 * _872;
    float _877 = _874 * _873;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _858;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _858;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _858;
    float _885 = _882 + 0.039999999105930328369140625;
    float _887 = _883 + 0.039999999105930328369140625;
    float _888 = _884 + 0.039999999105930328369140625;
    vec4 _897 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _772, cbSceneParam._m0[86u].y * _773));
    float _900 = _897.x * TEXCOORD_4;
    float _901 = dot(vec3(_670, _671, _672), vec3(_750, _751, _752));
    float _904 = _901 * 2.0;
    float _908 = (_904 * _670) - _750;
    float _909 = (_904 * _671) - _751;
    float _910 = (_904 * _672) - _752;
    float _914 = abs(dot(vec3(_750, _751, _752), vec3(_670, _671, _672)));
    float _3911 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _916 = sqrt(_814);
    float _929 = exp2((_916 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_916 * 3.0));
    float _935 = (1.0 - _929) * ((_916 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _936 = _929 * _916;
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964));
        float _1031 = fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964));
        float _1035 = fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964));
        float _1060 = _964 + _670;
        float _1061 = _968 + _671;
        float _1062 = _972 + _672;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_670, _671, _672), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3959 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_670, _671, _672), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3992 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_670, _671, _672), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4025 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1346 = fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964));
        float _1350 = fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964));
        float _1354 = fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964));
        float _1377 = _964 + _670;
        float _1378 = _968 + _671;
        float _1379 = _972 + _672;
        float _1389 = fma(_1379, cbModelParam._m0[30u].z, fma(_1378, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1377)) - _1346;
        float _1390 = fma(_1379, cbModelParam._m0[31u].z, fma(_1378, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1377)) - _1350;
        float _1391 = fma(_1379, cbModelParam._m0[32u].z, fma(_1378, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1377)) - _1354;
        float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
        float _1408 = ((_1395 * _1389) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1346 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1395 * _1390) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1350 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1395 * _1391) / cbModelParam._m0[35u].z) + ((((((_1354 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        float _1445 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1412.x + (-0.5));
        float _1447 = _1445 * (_1412.y + (-0.5));
        float _1448 = _1445 * (_1412.z + (-0.5));
        float _1455 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1419.x + (-0.5));
        float _1457 = _1455 * (_1419.y + (-0.5));
        float _1458 = _1455 * (_1419.z + (-0.5));
        float _1465 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1426.x + (-0.5));
        float _1467 = _1465 * (_1426.y + (-0.5));
        float _1468 = _1465 * (_1426.z + (-0.5));
        float _1475 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1433.x + (-0.5));
        float _1477 = _1475 * (_1433.y + (-0.5));
        float _1478 = _1475 * (_1433.z + (-0.5));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = _1446 * 0.5;
        float _1483 = _1456 * 0.5;
        float _1484 = _1466 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_670, _671, _672), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4088 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1509 + 1.0))) + _1514) * _1479;
        float _1524 = _1447 * 0.5;
        float _1525 = _1457 * 0.5;
        float _1526 = _1467 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_670, _671, _672), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4121 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1551 + 1.0))) + _1556) * _1480;
        float _1566 = _1448 * 0.5;
        float _1567 = _1458 * 0.5;
        float _1568 = _1468 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_670, _671, _672), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4154 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1593 + 1.0))) + _1598) * _1481;
        _1615 = _1448;
        _1616 = _1447;
        _1617 = _1446;
        _1618 = _1458;
        _1619 = _1457;
        _1620 = _1456;
        _1621 = _1468;
        _1622 = _1467;
        _1623 = _1466;
        _1624 = _1481;
        _1625 = _1480;
        _1626 = _1479;
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
    }
    else
    {
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = _1303;
        _1623 = _1303;
        _1624 = _1303;
        _1625 = _1303;
        _1626 = _1303;
        _1627 = 0.0;
        _1628 = 0.0;
        _1629 = 0.0;
    }
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1315)) + _1315;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1316)) + _1316;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1317)) + _1317;
    float _1662 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1665 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1668 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1639));
    float _1683 = _908 * 0.5;
    float _1684 = _909 * 0.5;
    float _1685 = _910 * 0.5;
    float _1686 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1689 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1692 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1726;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1699 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1703 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1707 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1714 = dot(vec4(cbModelParam._m0[39u]), vec4(_1683, _1684, _1685, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1737;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1728 = dot(vec4(cbModelParam._m0[40u]), vec4(_1683, _1684, _1685, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1741 = (_1737 * cbModelParam._m0[1u].x) + (_1726 * (1.0 - cbModelParam._m0[1u].x));
    float _1751 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _814);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1751 : min(cbModelParam._m0[25u].z, _1751));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_910, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908));
        float _1815 = fma(_910, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908));
        float _1818 = fma(_910, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1846 = frontier_phi_25_23_ladder;
        }
        float _2071;
        if (_1815 > 0.0)
        {
            _2071 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2071 = frontier_phi_34_30_ladder;
        }
        float _2328;
        if (_1818 > 0.0)
        {
            _2328 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2328 = frontier_phi_46_41_ladder;
        }
        float _2330 = isnan(_2071) ? _1846 : (isnan(_1846) ? _2071 : min(_1846, _2071));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1812) + _1801;
        float _2336 = (_2331 * _1815) + _1805;
        float _2337 = (_2331 * _1818) + _1809;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1752);
            frontier_phi_24_46_ladder = _2465.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2465.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2465.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_24_46_ladder_2;
        _1836 = frontier_phi_24_46_ladder_1;
        _1838 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_908, _909, _910), _1752);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _814);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1896 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1900 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1904 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1907 = fma(_910, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908));
        float _1910 = fma(_910, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908));
        float _1913 = fma(_910, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908));
        float _2076;
        if (_1907 > 0.0)
        {
            _2076 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2076 = frontier_phi_36_32_ladder;
        }
        float _2355;
        if (_1910 > 0.0)
        {
            _2355 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2355 = frontier_phi_48_43_ladder;
        }
        float _2568;
        if (_1913 > 0.0)
        {
            _2568 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2568 = frontier_phi_57_54_ladder;
        }
        float _2570 = isnan(_2355) ? _2076 : (isnan(_2076) ? _2355 : min(_2076, _2355));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1907) + _1896;
        float _2576 = (_2571 * _1910) + _1900;
        float _2577 = (_2571 * _1913) + _1904;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_33_57_ladder = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2793.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2793.z * cbModelParam._m0[1u].z;
        }
        _1932 = frontier_phi_33_57_ladder_1;
        _1934 = frontier_phi_33_57_ladder;
        _1936 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_908, _909, _910), _1843);
        _1932 = _1916.x * cbModelParam._m0[1u].z;
        _1934 = _1916.y * cbModelParam._m0[1u].z;
        _1936 = _1916.z * cbModelParam._m0[1u].z;
    }
    float _1949 = (((_935 * _885) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1951 = (((_935 * _887) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1934 - _1836)) + _1836);
    float _1953 = (((_935 * _888) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1936 - _1838)) + _1838);
    float _1956 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1949 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1949 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1949 * cbSceneParam._m0[91u].x));
    vec4 _1970 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_772, _773));
    float _1972 = _1970.w;
    float _1984 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1972);
    float _1985 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1972);
    float _1986 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1972);
    uvec4 _1990 = floatBitsToUint(cbInstanceData._m0[_827 + 5u]);
    uint _1992 = _1990.x * 14u;
    uint _1993 = _1992 + 13u;
    float _2000 = _900 + (-1.0);
    float _2005 = (cbLight._m0[_1993].x * _2000) + 1.0;
    float _2006 = (cbLight._m0[_1993].y * _2000) + 1.0;
    float _2007 = (cbLight._m0[_1993].z * _2000) + 1.0;
    float _2008 = (cbLight._m0[_1993].w * _2000) + 1.0;
    uint _2009 = _1992 + 5u;
    float _2015 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2019 = _1992 + 4u;
    float _2029 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2033 = _1992 | 1u;
    float _2044 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_670, _671, _672));
    float _2047 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_670, _671, _672));
    float _4290 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _4301 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2054 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2061 = ((cbLight._m0[_2009].x * _2015) * _2054) + (((cbLight._m0[_2019].x * _1984) * _2029) * _2052);
    float _2062 = ((_2015 * cbLight._m0[_2009].y) * _2054) + (((cbLight._m0[_2019].y * _1985) * _2029) * _2052);
    float _2063 = ((_2015 * cbLight._m0[_2009].z) * _2054) + (((cbLight._m0[_2019].z * _1986) * _2029) * _2052);
    uvec4 _2068 = floatBitsToUint(cbLight._m0[_1992 + 12u]);
    bool _2070 = _2068.x == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2070)
    {
        _2081 = _2061;
        _2083 = _2062;
        _2085 = _2063;
    }
    else
    {
        uint _2089 = _1992 + 6u;
        float _2105 = (dot(vec3(cbLight._m0[_1992 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4312 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2108 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2081 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _2061;
        _2083 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _2062;
        _2085 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _2063;
    }
    bool _2088 = _2068.y == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2088)
    {
        _2126 = _2081;
        _2128 = _2083;
        _2130 = _2085;
    }
    else
    {
        uint _2299 = _1992 + 7u;
        float _2315 = (dot(vec3(cbLight._m0[_1992 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4328 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2318 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2126 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2081;
        _2128 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2083;
        _2130 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2085;
    }
    uint _2133 = _1992 + 8u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _814) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1992].x + _750;
    float _2149 = cbLight._m0[_1992].y + _751;
    float _2150 = cbLight._m0[_1992].z + _752;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1992].xyz));
    float _4344 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2162 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2163 = dot(vec3(_670, _671, _672), vec3(_2155, _2156, _2157));
    float _4366 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2155, _2156, _2157));
    float _4377 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2147 * _2147;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2183 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
    float _2184 = 0.959999978542327880859375 - _882;
    float _2186 = 0.959999978542327880859375 - _883;
    float _2187 = 0.959999978542327880859375 - _884;
    float _2194 = 1.0 - _2147;
    float _2205 = (0.5 / (((_2162 * ((_2161 * _2194) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2194) + _2147) * _2161))) * _2161;
    float _4388 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    uint _2221 = _1992 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _814) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_2033].x + _750;
    float _2235 = cbLight._m0[_2033].y + _751;
    float _2236 = cbLight._m0[_2033].z + _752;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2033].xyz));
    float _4399 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2248 = dot(vec3(_670, _671, _672), vec3(_2241, _2242, _2243));
    float _4410 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2241, _2242, _2243));
    float _4421 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
    float _2274 = 1.0 - _2233;
    float _2284 = (0.5 / (((_2162 * ((_2247 * _2274) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2274) + _2233) * _2247))) * _2247;
    float _4432 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2286 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2296 = (((((_2267 * _2184) + _885) * cbLight._m0[_2221].x) * _2286) * _2015) + ((((cbLight._m0[_2133].x * _1984) * ((_2183 * _2184) + _885)) * _2207) * _2029);
    float _2297 = (((((_2267 * _2186) + _887) * cbLight._m0[_2221].y) * _2286) * _2015) + ((((cbLight._m0[_2133].y * _1985) * ((_2183 * _2186) + _887)) * _2207) * _2029);
    float _2298 = (((((_2267 * _2187) + _888) * cbLight._m0[_2221].z) * _2286) * _2015) + ((((cbLight._m0[_2133].z * _1986) * ((_2183 * _2187) + _888)) * _2207) * _2029);
    float _2360;
    float _2362;
    float _2364;
    if (_2070)
    {
        _2360 = _2296;
        _2362 = _2297;
        _2364 = _2298;
    }
    else
    {
        uint _2366 = _1992 + 2u;
        uint _2370 = _1992 + 10u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _814) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _750;
        float _2387 = cbLight._m0[_2366].y + _751;
        float _2388 = cbLight._m0[_2366].z + _752;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2366].xyz));
        float _4443 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2400 = dot(vec3(_670, _671, _672), vec3(_2393, _2394, _2395));
        float _4454 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4465 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
        float _2426 = 1.0 - _2385;
        float _2436 = (0.5 / (((_2162 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2426) + _2385) * _2399))) * _2399;
        float _4476 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2438 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2439 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2360 = (((((_2419 * _2184) + _885) * cbLight._m0[_2370].x) * _2438) * _2439) + _2296;
        _2362 = (((((_2419 * _2186) + _887) * cbLight._m0[_2370].y) * _2438) * _2439) + _2297;
        _2364 = (((((_2419 * _2187) + _888) * cbLight._m0[_2370].z) * _2438) * _2439) + _2298;
    }
    float _2474;
    float _2476;
    float _2478;
    if (_2088)
    {
        _2474 = _2360;
        _2476 = _2362;
        _2478 = _2364;
    }
    else
    {
        uint _2485 = _1992 + 3u;
        uint _2489 = _1992 + 11u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _814) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _750;
        float _2506 = cbLight._m0[_2485].y + _751;
        float _2507 = cbLight._m0[_2485].z + _752;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2485].xyz));
        float _4492 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2519 = dot(vec3(_670, _671, _672), vec3(_2512, _2513, _2514));
        float _4503 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4514 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2545 = 1.0 - _2504;
        float _2555 = (0.5 / (((_2162 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2545) + _2504) * _2518))) * _2518;
        float _4525 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2474 = (((((_2538 * _2184) + _885) * cbLight._m0[_2489].x) * _2557) * _2558) + _2360;
        _2476 = (((((_2538 * _2186) + _887) * cbLight._m0[_2489].y) * _2557) * _2558) + _2362;
        _2478 = (((((_2538 * _2187) + _888) * cbLight._m0[_2489].z) * _2557) * _2558) + _2364;
    }
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_1990.y == 0u)
    {
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2633;
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2633;
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2633;
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.x;
        uint _2660 = uint((float(_2648.y) * floor(float(uint(cbSceneParam._m0[85u].y * _773) / _2649))) + floor(float(uint(cbSceneParam._m0[85u].x * _772) / _2649)));
        float _2670 = (log2(_2636 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2671 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        uint _2674 = uint(isnan(14.0) ? _2671 : (isnan(_2671) ? 14.0 : min(_2671, 14.0)));
        uvec4 _2679 = texelFetch(g_lightClusterGridBuffer, int(((_2674 << 2u) + (_2660 << 6u)) >> 2u));
        uint _2680 = _2679.x;
        uint _2681 = _2648.z;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((((1u << ((_2681 >> 4u) & 15u)) + 4294967295u) & _2680) == 0u) || ((_2681 & 240u) == 0u))
        {
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
        }
        else
        {
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            uint _2956 = 0u;
            uint _2965;
            bool _2966;
            for (;;)
            {
                _2965 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                _2966 = _2965 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2966)
                {
                    frontier_phi_74_pred = _2955;
                    frontier_phi_74_pred_1 = _2954;
                    frontier_phi_74_pred_2 = _2953;
                    frontier_phi_74_pred_3 = _2952;
                    frontier_phi_74_pred_4 = _2951;
                    frontier_phi_74_pred_5 = _2950;
                }
                else
                {
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    uint _3101;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2965;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    for (;;)
                    {
                        uint _3105 = uint(findLSB(_3101)) + (_2956 << 5u);
                        uint _3102 = (_3101 + 4294967295u) & _3101;
                        uint _3107 = _3105 * 48u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3127 = (_3105 * 48u) + 4u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3146 = (_3105 * 48u) + 8u;
                        vec3 _3157 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x));
                        float _3161 = _3121.x - _2634;
                        float _3162 = _3121.y - _2635;
                        float _3163 = _3121.z - _2636;
                        float _3164 = dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163));
                        float _3167 = inversesqrt(_3164);
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3171 = dot(vec3(_795, _798, _801), vec3(_3168, _3169, _3170));
                        float _3176 = 1.0 - (_3164 * _3121.w);
                        float _4551 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3178 = sqrt(_3164) * _3140.w;
                        float _3181 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3171) + _3182;
                        float _3188 = _3178 * _3178;
                        float _3192 = ((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) * _3177) / ((_3188 * 0.699999988079071044921875) + 1.0);
                        float _3196 = (-0.0) - _2634;
                        float _3197 = (-0.0) - _2635;
                        float _3198 = (-0.0) - _2636;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3213 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                        float _3214 = 1.0 - _916;
                        float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                        float _3222 = _3221 * _3221;
                        float _3223 = _3222 * _3222;
                        float _3224 = _3203 + _3168;
                        float _3225 = _3204 + _3169;
                        float _3226 = _3205 + _3170;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3234 = dot(vec3(_795, _798, _801), vec3(_3203, _3204, _3205));
                        float _4567 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3238 = dot(vec3(_795, _798, _801), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                        float _4578 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3241 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                        float _3246 = _3181 * _3222;
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3171) + _3247;
                        float _4589 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3252 = 1.0 - _3222;
                        float _3262 = (0.5 / (((_3251 * ((_3237 * _3252) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3222) * _3237))) * _3251;
                        float _4600 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3273 = (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) / ((_3245 * _3245) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125))) * _3177;
                        _3025 = (_3192 * _3140.x) + _3098;
                        _3026 = (_3192 * _3140.y) + _3099;
                        _3027 = (_3192 * _3140.z) + _3100;
                        _3022 = (_3273 * _3157.x) + _3095;
                        _3023 = (_3273 * _3157.y) + _3096;
                        _3024 = (_3273 * _3157.z) + _3097;
                        if (_3102 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3102;
                        }
                    }
                    frontier_phi_74_pred = _3027;
                    frontier_phi_74_pred_1 = _3026;
                    frontier_phi_74_pred_2 = _3025;
                    frontier_phi_74_pred_3 = _3024;
                    frontier_phi_74_pred_4 = _3023;
                    frontier_phi_74_pred_5 = _3022;
                }
                _2809 = frontier_phi_74_pred;
                _2807 = frontier_phi_74_pred_1;
                _2805 = frontier_phi_74_pred_2;
                _2803 = frontier_phi_74_pred_3;
                _2801 = frontier_phi_74_pred_4;
                _2799 = frontier_phi_74_pred_5;
                uint _2957 = _2956 + 1u;
                if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2950 = _2799;
                    _2951 = _2801;
                    _2952 = _2803;
                    _2953 = _2805;
                    _2954 = _2807;
                    _2955 = _2809;
                    _2956 = _2957;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
        }
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.z;
        uint _2815 = (_2813 >> 8u) & 15u;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((4294967295u << _2815) & _2680) == 0u)
        {
            _2918 = _2798;
            _2920 = _2800;
            _2922 = _2802;
            _2924 = _2804;
            _2926 = _2806;
            _2928 = _2808;
        }
        else
        {
            float _2943 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
            float _2944 = _2943 * _2634;
            float _2945 = _2943 * _2635;
            float _2946 = _2943 * _2636;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2815 < ((_2813 >> 12u) & 15u))
            {
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _3078 = _2798;
                float _3079 = _2800;
                float _3080 = _2802;
                float _3081 = _2804;
                float _3082 = _2806;
                float _3083 = _2808;
                uint _3084 = _2815;
                uint _3093;
                bool _3094;
                for (;;)
                {
                    _3093 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                    _3094 = _3093 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_3094)
                    {
                        frontier_phi_85_pred = _3082;
                        frontier_phi_85_pred_1 = _3081;
                        frontier_phi_85_pred_2 = _3080;
                        frontier_phi_85_pred_3 = _3079;
                        frontier_phi_85_pred_4 = _3078;
                        frontier_phi_85_pred_5 = _3083;
                    }
                    else
                    {
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        uint _3306 = _3093;
                        uint _3307;
                        vec4 _3332;
                        float _3333;
                        vec4 _3348;
                        vec3 _3360;
                        vec4 _3376;
                        vec4 _3391;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3317 = ((_3084 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3306));
                            _3307 = (_3306 + 4294967295u) & _3306;
                            uint _3319 = _3317 * 40u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.w;
                            uint _3335 = (_3317 * 40u) + 4u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3317 * 40u) + 8u;
                            _3360 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x));
                            uint _3363 = (_3317 * 40u) + 16u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3317 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3317 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3317 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_2636, _3425.z, fma(_2635, _3425.y, _3425.x * _2634)) + _3425.w;
                            _3438 = !((fma(_2636, _3406.z, fma(_2635, _3406.y, _3406.x * _2634)) + _3406.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3332.x - _2634;
                                float _3466 = _3332.y - _2635;
                                float _3467 = _3332.z - _2636;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3333 * _3333));
                                float _4611 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3483 = sqrt(_3468) * _3348.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_795, _798, _801))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_2636, _3376.z, fma(_2635, _3376.y, _3376.x * _2634)) + _3376.w) / _3437;
                                float _3497 = (fma(_2636, _3391.z, fma(_2635, _3391.y, _3391.x * _2634)) + _3391.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4627 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _916;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2944;
                                float _3527 = _3473 - _2945;
                                float _3528 = _3474 - _2946;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_795, _798, _801), vec3((-0.0) - _2944, (-0.0) - _2945, (-0.0) - _2946));
                                float _4638 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3540 = dot(vec3(_795, _798, _801), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4649 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_795, _798, _801), vec3(_3472, _3473, _3474))) + _3549;
                                float _4660 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4671 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3503 * _3348.y;
                                frontier_phi_91_pred_1 = _3503 * _3348.x;
                                frontier_phi_91_pred_2 = _3577 * _3360.z;
                                frontier_phi_91_pred_3 = _3577 * _3360.y;
                                frontier_phi_91_pred_4 = _3577 * _3360.x;
                                frontier_phi_91_pred_5 = _3503 * _3348.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3585 = frontier_phi_91_pred;
                            _3584 = frontier_phi_91_pred_1;
                            _3583 = frontier_phi_91_pred_2;
                            _3582 = frontier_phi_91_pred_3;
                            _3581 = frontier_phi_91_pred_4;
                            _3586 = frontier_phi_91_pred_5;
                            _3290 = _3584 + _3303;
                            _3291 = _3585 + _3304;
                            _3292 = _3586 + _3305;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3289 = _3583 + _3302;
                            if (_3307 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3307;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3291;
                        frontier_phi_85_pred_1 = _3290;
                        frontier_phi_85_pred_2 = _3289;
                        frontier_phi_85_pred_3 = _3288;
                        frontier_phi_85_pred_4 = _3287;
                        frontier_phi_85_pred_5 = _3292;
                    }
                    _2927 = frontier_phi_85_pred;
                    _2925 = frontier_phi_85_pred_1;
                    _2923 = frontier_phi_85_pred_2;
                    _2921 = frontier_phi_85_pred_3;
                    _2919 = frontier_phi_85_pred_4;
                    _2929 = frontier_phi_85_pred_5;
                    uint _3085 = _3084 + 1u;
                    if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3078 = _2919;
                        _3079 = _2921;
                        _3080 = _2923;
                        _3081 = _2925;
                        _3082 = _2927;
                        _3083 = _2929;
                        _3084 = _3085;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2929;
                frontier_phi_66_67_ladder_1 = _2925;
                frontier_phi_66_67_ladder_2 = _2927;
                frontier_phi_66_67_ladder_3 = _2921;
                frontier_phi_66_67_ladder_4 = _2919;
                frontier_phi_66_67_ladder_5 = _2923;
            }
            else
            {
                frontier_phi_66_67_ladder = _2808;
                frontier_phi_66_67_ladder_1 = _2804;
                frontier_phi_66_67_ladder_2 = _2806;
                frontier_phi_66_67_ladder_3 = _2800;
                frontier_phi_66_67_ladder_4 = _2798;
                frontier_phi_66_67_ladder_5 = _2802;
            }
            _2918 = frontier_phi_66_67_ladder_4;
            _2920 = frontier_phi_66_67_ladder_3;
            _2922 = frontier_phi_66_67_ladder_5;
            _2924 = frontier_phi_66_67_ladder_1;
            _2926 = frontier_phi_66_67_ladder_2;
            _2928 = frontier_phi_66_67_ladder;
        }
        float _2933 = isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0));
        _2692 = (_2933 * _2924) + _2126;
        _2694 = (_2933 * _2926) + _2128;
        _2696 = (_2933 * _2928) + _2130;
        _2698 = ((_2918 * _885) * _2933) + _2474;
        _2700 = ((_2920 * _887) * _2933) + _2476;
        _2702 = ((_2922 * _888) * _2933) + _2478;
    }
    else
    {
        _2692 = _2126;
        _2694 = _2128;
        _2696 = _2130;
        _2698 = _2474;
        _2700 = _2476;
        _2702 = _2478;
    }
    vec4 _2708 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4687 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4698 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4709 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2732 = (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2692 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _900))) + ((_2698 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1741)) * cbPerFrame._m0[3u].x)) + (_2708.x * cbMtdParam._m0[3u].x);
    float _2734 = ((_2708.y * cbMtdParam._m0[3u].x) + ((_2700 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1741)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2694 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _900)));
    float _2736 = ((_2708.z * cbMtdParam._m0[3u].x) + ((_2702 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1741)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2696 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _900)));
    float _2737 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2738 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2739 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    uint _2740 = _827 + 6u;
    float _2748 = _772 / cbSceneParam._m0[86u].x;
    float _2749 = _773 / cbSceneParam._m0[86u].y;
    vec4 _2763 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2765 = _2763.x;
    float _2766 = _2763.y;
    float _2767 = _2763.z;
    float _2768 = _2763.w;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2823 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2824 = _2823 / _693;
        float _2835 = _2824 * _743;
        float _2836 = _744 * _2824;
        float _2837 = (-0.0) - _2836;
        float _2838 = _2824 * _745;
        float _2840 = (cbSceneParam._m0[77u].w * _2837) / _2823;
        float _2841 = _2840 + cbSceneParam._m0[79u].w;
        float _2842 = cbSceneParam._m0[79u].w - _2836;
        float _2848 = sqrt(((_2835 * _2835) + (_2836 * _2836)) + (_2838 * _2838));
        float _2851 = (1.0 - (cbSceneParam._m0[77u].w / _2823)) * _2848;
        float _2856 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2858 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3035;
        if (abs((_2837 - _2840) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3035 = ((((_2841 > 0.0) ? exp2(_2856 * _2841) : (2.0 - exp2(_2858 * _2841))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2851;
        }
        else
        {
            float _2979 = 1.0 / cbSceneParam._m0[80u].x;
            float _2980 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : max(_2841, _2842));
            float _2981 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : min(_2841, _2842));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            _3035 = ((abs(_2848 / _2837) * cbSceneParam._m0[80u].y) * ((((_2990 - _2991) * 2.0) - ((exp2(_2856 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0)))) - exp2(_2856 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))))) * _2979)) - ((exp2(_2858 * _2990) - exp2(_2858 * _2991)) * _2979))) + (_2851 * cbSceneParam._m0[80u].z);
        }
        vec4 _3037 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, 1.0), 0.0);
        float _3046 = exp2((_3035 * (-1.44269502162933349609375)) * (1.0 - _3037.w));
        float _3047 = log2(_3046);
        float _3063 = log2(_2768);
        _2860 = (exp2(_3063 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].x)) * _3037.x) / cbSceneParam._m0[78u].x)) + _2765;
        _2862 = (exp2(_3063 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].y)) * _3037.y) / cbSceneParam._m0[78u].y)) + _2766;
        _2864 = (exp2(_3063 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].z)) * _3037.z) / cbSceneParam._m0[78u].z)) + _2767;
        _2866 = _3046 * _2768;
    }
    else
    {
        _2860 = _2765;
        _2862 = _2766;
        _2864 = _2767;
        _2866 = _2768;
    }
    bool _3073;
    vec4 _2876;
    vec4 _2898;
    float _2900;
    float _2904;
    float _2905;
    float _2906;
    float _2907;
    bool _2917;
    for (;;)
    {
        _2876 = cbMatDynParam._m0[0u];
        float _2878 = roundEven(_2876.y);
        bool _2879 = _2878 == 3.0;
        float _2880 = log2(_2866);
        float _2887 = exp2(_2880 * cbSceneParam._m0[78u].x) * _2737;
        float _2888 = exp2(_2880 * cbSceneParam._m0[78u].y) * _2738;
        float _2889 = exp2(_2880 * cbSceneParam._m0[78u].z) * _2739;
        float _2896 = _759 + (-0.5);
        _2898 = cbMtdParam._m0[1u];
        _2900 = _2898.y * _2896;
        float _2903 = (_2878 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2904 = _2903 * (_2879 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2860)));
        _2905 = _2903 * (_2879 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2862)));
        _2906 = _2903 * (_2879 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2864)));
        _2907 = _2896 * 0.999000012874603271484375;
        _2917 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2917)
        {
            if ((cbInstanceData._m0[_827 + 7u].x + _2907) < 0.5)
            {
                _3073 = true;
                break;
            }
        }
        uint _3014 = _829 + uint(_2876.w);
        if ((cbInstanceData._m0[_3014].w < 1.0) && ((cbInstanceData._m0[_3014].w + _2907) < 0.5))
        {
            _3073 = true;
            break;
        }
        if ((_2900 + 1.0) < _2898.x)
        {
            _3073 = true;
            break;
        }
        _3073 = false;
        break;
    }
    float _3278;
    if (_3073)
    {
        discard_state = true;
        _3278 = 0.0;
    }
    else
    {
        _3278 = cbInstanceData._m0[_2740].w;
    }
    SV_Target.x = _2904;
    SV_Target.y = _2905;
    SV_Target.z = _2906;
    SV_Target.w = _3278;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2740].w;
    discard_exit();
}


