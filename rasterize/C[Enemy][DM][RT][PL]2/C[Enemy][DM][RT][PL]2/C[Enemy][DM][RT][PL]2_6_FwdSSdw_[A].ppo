#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1108;
float _3541;
float _3542;
float _3543;
float _3544;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _267 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _278 = exp2(log2(_267.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _279;
    float _281;
    float _283;
    if (_278)
    {
        _279 = cbMtdParam._m0[19u].x;
        _281 = cbMtdParam._m0[19u].y;
        _283 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _279 = cbMtdParam._m0[18u].x;
        _281 = cbMtdParam._m0[18u].y;
        _283 = cbMtdParam._m0[18u].z;
    }
    float _289;
    if (_278)
    {
        _289 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _289 = cbMtdParam._m0[20u].z;
    }
    float _295;
    float _297;
    if (_278)
    {
        _295 = cbMtdParam._m0[28u].z;
        _297 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _295 = cbMtdParam._m0[24u].x;
        _297 = cbMtdParam._m0[24u].y;
    }
    float _299 = _295 * TEXCOORD.x;
    float _300 = _297 * TEXCOORD.y;
    float _312 = floor(_289);
    vec4 _315 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _299) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _300) + cbTextureTilingScale._m0[8u].w, _312));
    vec4 _337 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _345 = (((_279 * cbMtdParam._m0[20u].w) * _315.x) * cbMtdParam._m0[9u].x) * _337.x;
    float _349 = (((_281 * cbMtdParam._m0[20u].w) * _315.y) * cbMtdParam._m0[9u].y) * _337.y;
    float _353 = (((_283 * cbMtdParam._m0[20u].w) * _315.z) * cbMtdParam._m0[9u].z) * _337.z;
    vec4 _365 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _369 = _365.z;
    vec4 _383 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _299) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _300) + cbTextureTilingScale._m0[10u].w, _312));
    float _187[2];
    float _188[2];
    _187[0u] = cbMtdParam._m0[27u].z;
    _188[0u] = cbMtdParam._m0[27u].w;
    _187[1u] = cbMtdParam._m0[28u].x;
    _188[1u] = cbMtdParam._m0[28u].y;
    float _400 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _403 = uint(int(isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0))));
    float _409 = (_383.x + _365.w) + _188[_403];
    vec4 _427 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w, _312));
    float _434 = (_427.x * 2.0) + (-1.0);
    float _435 = (_427.y * 2.0) + (-1.0);
    float _436 = dot(vec2(_434, _435), vec2(_434, _435));
    float _3563 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))));
    float _451 = (cbMtdParam._m0[21u].x * (((_369 * 2.0) * (_427.z + _187[_403])) - _369)) + _369;
    float _455 = (cbMtdParam._m0[21u].y * ((_365.x * 2.0) + (-1.0))) + _434;
    float _456 = (cbMtdParam._m0[21u].y * ((_365.y * 2.0) + (-1.0))) + _435;
    float _459 = fma(_441, _238, fma(_456, _230 * TANGENT.x, (_216 * _208) * _455));
    float _462 = fma(_441, _239, fma(_456, _230 * TANGENT.y, (_216 * _209) * _455));
    float _465 = fma(_441, _240, fma(_456, _230 * TANGENT.z, (_216 * _210) * _455));
    float _469 = inversesqrt(dot(vec3(_459, _462, _465), vec3(_459, _462, _465)));
    float _470 = _469 * _459;
    float _471 = _469 * _462;
    float _472 = _469 * _465;
    float _3574 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _473 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3596 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3607 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3618 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _477 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _493 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _544 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _534);
    float _545 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _534);
    float _546 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _534);
    float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
    float _551 = _544 * _550;
    float _552 = _545 * _550;
    float _553 = _546 * _550;
    vec4 _558 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _560 = _558.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _788 = sqrt(((_544 * _544) + (_545 * _545)) + (_546 * _546));
        float _794 = (cbMatDynParam._m0[5u].x * _788) + cbMatDynParam._m0[5u].y;
        float _3629 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _799 = (cbMatDynParam._m0[5u].z * _788) + cbMatDynParam._m0[5u].w;
        float _3640 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) - _795)) + _795) < ((_560 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _578 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _580 = _578.w;
    float _600 = fma(_472, cbSceneParam._m0[5u].z, fma(_471, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _470));
    float _603 = fma(_472, cbSceneParam._m0[6u].z, fma(_471, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _470));
    float _606 = fma(_472, cbSceneParam._m0[7u].z, fma(_471, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _470));
    vec4 _608 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _619 = (((_608.y - _473) + (_608.w * _473)) * cbMtdParam._m0[3u].x) + _473;
    uint _632 = uint(roundEven(NORMAL.w)) * 13u;
    uint _634 = _632 + 9u;
    uint _635 = _634 + uint(cbMatDynParam._m0[0u].w);
    float _641 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_635].x;
    float _642 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_635].y;
    float _643 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_635].z;
    float _3651 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _647 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _652 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _663 = (((_652.x - _477) + (_652.w * _477)) * cbMtdParam._m0[3u].x) + _477;
    float _676 = (cbMtdParam._m0[3u].x * (((_644 * _580) - _644) + _647.x)) + _644;
    float _677 = (cbMtdParam._m0[3u].x * (((_645 * _580) - _645) + _647.y)) + _645;
    float _678 = (cbMtdParam._m0[3u].x * (((_646 * _580) - _646) + _647.z)) + _646;
    float _679 = 1.0 - _663;
    float _680 = _679 * _676;
    float _681 = _679 * _677;
    float _682 = _679 * _678;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _663;
    float _688 = (_677 + (-0.039999999105930328369140625)) * _663;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _663;
    float _690 = _687 + 0.039999999105930328369140625;
    float _692 = _688 + 0.039999999105930328369140625;
    float _693 = _689 + 0.039999999105930328369140625;
    vec4 _702 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _575, cbSceneParam._m0[86u].y * _576));
    float _705 = _702.x * TEXCOORD_4;
    float _706 = dot(vec3(_470, _471, _472), vec3(_551, _552, _553));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _470) - _551;
    float _714 = (_709 * _471) - _552;
    float _715 = (_709 * _472) - _553;
    float _719 = abs(dot(vec3(_551, _552, _553), vec3(_470, _471, _472)));
    float _3684 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_619);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _740 = (1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _741 = _734 * _721;
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1107;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _832 = fma(_777, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769));
        float _836 = fma(_777, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769));
        float _840 = fma(_777, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769));
        float _865 = _769 + _470;
        float _866 = _773 + _471;
        float _867 = _777 + _472;
        float _877 = fma(_867, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865)) - _832;
        float _878 = fma(_867, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865)) - _836;
        float _879 = fma(_867, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865)) - _840;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_832 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_836 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[34u].z) + ((((((_840 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _935 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_901.x + (-0.5));
        float _937 = _935 * (_901.y + (-0.5));
        float _938 = _935 * (_901.z + (-0.5));
        float _945 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_908.x + (-0.5));
        float _947 = _945 * (_908.y + (-0.5));
        float _948 = _945 * (_908.z + (-0.5));
        float _955 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_915.x + (-0.5));
        float _957 = _955 * (_915.y + (-0.5));
        float _958 = _955 * (_915.z + (-0.5));
        float _965 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_922.x + (-0.5));
        float _967 = _965 * (_922.y + (-0.5));
        float _968 = _965 * (_922.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _989 = (dot(vec3(_470, _471, _472), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _999 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3732 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1001 + 1.0))) + _1006) * _969;
        float _1016 = _937 * 0.5;
        float _1017 = _947 * 0.5;
        float _1018 = _957 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_470, _471, _472), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3765 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1043 + 1.0))) + _1048) * _970;
        float _1058 = _938 * 0.5;
        float _1059 = _948 * 0.5;
        float _1060 = _958 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_470, _471, _472), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3798 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1085 + 1.0))) + _1090) * _971;
        _1107 = _938;
        _1109 = _937;
        _1110 = _936;
        _1111 = _948;
        _1112 = _947;
        _1113 = _946;
        _1114 = _958;
        _1115 = _957;
        _1116 = _956;
        _1117 = _971;
        _1118 = _970;
        _1119 = _969;
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _1108;
        _1109 = _1108;
        _1110 = _1108;
        _1111 = _1108;
        _1112 = _1108;
        _1113 = _1108;
        _1114 = _1108;
        _1115 = _1108;
        _1116 = _1108;
        _1117 = _1108;
        _1118 = _1108;
        _1119 = _1108;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1151 = fma(_777, cbModelParam._m0[30u].z, fma(_773, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _769));
        float _1155 = fma(_777, cbModelParam._m0[31u].z, fma(_773, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _769));
        float _1159 = fma(_777, cbModelParam._m0[32u].z, fma(_773, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _769));
        float _1182 = _769 + _470;
        float _1183 = _773 + _471;
        float _1184 = _777 + _472;
        float _1194 = fma(_1184, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182)) - _1151;
        float _1195 = fma(_1184, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182)) - _1155;
        float _1196 = fma(_1184, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182)) - _1159;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1151 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1155 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[35u].z) + ((((((_1159 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1250 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1217.x + (-0.5));
        float _1252 = _1250 * (_1217.y + (-0.5));
        float _1253 = _1250 * (_1217.z + (-0.5));
        float _1260 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1224.x + (-0.5));
        float _1262 = _1260 * (_1224.y + (-0.5));
        float _1263 = _1260 * (_1224.z + (-0.5));
        float _1270 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1231.x + (-0.5));
        float _1272 = _1270 * (_1231.y + (-0.5));
        float _1273 = _1270 * (_1231.z + (-0.5));
        float _1280 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1238.x + (-0.5));
        float _1282 = _1280 * (_1238.y + (-0.5));
        float _1283 = _1280 * (_1238.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_470, _471, _472), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3861 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1314 + 1.0))) + _1319) * _1284;
        float _1329 = _1252 * 0.5;
        float _1330 = _1262 * 0.5;
        float _1331 = _1272 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_470, _471, _472), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3894 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1356 + 1.0))) + _1361) * _1285;
        float _1371 = _1253 * 0.5;
        float _1372 = _1263 * 0.5;
        float _1373 = _1273 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_470, _471, _472), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3927 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1398 + 1.0))) + _1403) * _1286;
        _1420 = _1253;
        _1421 = _1252;
        _1422 = _1251;
        _1423 = _1263;
        _1424 = _1262;
        _1425 = _1261;
        _1426 = _1273;
        _1427 = _1272;
        _1428 = _1271;
        _1429 = _1286;
        _1430 = _1285;
        _1431 = _1284;
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1108;
        _1421 = _1108;
        _1422 = _1108;
        _1423 = _1108;
        _1424 = _1108;
        _1425 = _1108;
        _1426 = _1108;
        _1427 = _1108;
        _1428 = _1108;
        _1429 = _1108;
        _1430 = _1108;
        _1431 = _1108;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1121)) + _1121;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1467 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1444));
    float _1488 = _713 * 0.5;
    float _1489 = _714 * 0.5;
    float _1490 = _715 * 0.5;
    float _1491 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1494 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1497 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1531;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1504 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1107, _1111, _1114, _1117));
        float _1508 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1109, _1112, _1115, _1118));
        float _1512 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1519 = dot(vec4(cbModelParam._m0[39u]), vec4(_1488, _1489, _1490, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1542;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1533 = dot(vec4(cbModelParam._m0[40u]), vec4(_1488, _1489, _1490, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1546 = (_1542 * cbModelParam._m0[1u].x) + (_1531 * (1.0 - cbModelParam._m0[1u].x));
    float _1556 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1556 : min(cbModelParam._m0[25u].z, _1556));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_777, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_777, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_777, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1620 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1623 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1651 = frontier_phi_25_23_ladder;
        }
        float _1876;
        if (_1620 > 0.0)
        {
            _1876 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1876 = frontier_phi_34_30_ladder;
        }
        float _2133;
        if (_1623 > 0.0)
        {
            _2133 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2133 = frontier_phi_46_41_ladder;
        }
        float _2135 = isnan(_1876) ? _1651 : (isnan(_1651) ? _1876 : min(_1651, _1876));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1617) + _1606;
        float _2141 = (_2136 * _1620) + _1610;
        float _2142 = (_2136 * _1623) + _1614;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2145 = (-1.0) - _2143;
        float _2147 = _2143 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2142 > _2147) || ((_2142 < _2145) || ((_2141 > _2147) || ((_2141 < _2145) || ((_2140 < _2145) || (_2140 > _2147))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2142, cbModelParam._m0[9u].z, fma(_2141, cbModelParam._m0[9u].y, _2140 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2142, cbModelParam._m0[10u].z, fma(_2141, cbModelParam._m0[10u].y, _2140 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2142, cbModelParam._m0[11u].z, fma(_2141, cbModelParam._m0[11u].y, _2140 * cbModelParam._m0[11u].x))), _1557);
            frontier_phi_24_46_ladder = _2270.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2270.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2270.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_24_46_ladder_2;
        _1641 = frontier_phi_24_46_ladder_1;
        _1643 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1557);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1701 = fma(_777, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769)) + cbModelParam._m0[21u].w;
        float _1705 = fma(_777, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769)) + cbModelParam._m0[22u].w;
        float _1709 = fma(_777, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769)) + cbModelParam._m0[23u].w;
        float _1712 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1715 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1718 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1881;
        if (_1712 > 0.0)
        {
            _1881 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1881 = frontier_phi_36_32_ladder;
        }
        float _2160;
        if (_1715 > 0.0)
        {
            _2160 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2160 = frontier_phi_48_43_ladder;
        }
        float _2373;
        if (_1718 > 0.0)
        {
            _2373 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2373 = frontier_phi_57_54_ladder;
        }
        float _2375 = isnan(_2160) ? _1881 : (isnan(_1881) ? _2160 : min(_1881, _2160));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1712) + _1701;
        float _2381 = (_2376 * _1715) + _1705;
        float _2382 = (_2376 * _1718) + _1709;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2383;
        float _2386 = _2383 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2382 > _2386) || ((_2382 < _2384) || ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 < _2384) || (_2380 > _2386))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2382, cbModelParam._m0[17u].z, fma(_2381, cbModelParam._m0[17u].y, _2380 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2382, cbModelParam._m0[18u].z, fma(_2381, cbModelParam._m0[18u].y, _2380 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2382, cbModelParam._m0[19u].z, fma(_2381, cbModelParam._m0[19u].y, _2380 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_33_57_ladder = _2598.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2598.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2598.z * cbModelParam._m0[1u].z;
        }
        _1737 = frontier_phi_33_57_ladder_1;
        _1739 = frontier_phi_33_57_ladder;
        _1741 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1648);
        _1737 = _1721.x * cbModelParam._m0[1u].z;
        _1739 = _1721.y * cbModelParam._m0[1u].z;
        _1741 = _1721.z * cbModelParam._m0[1u].z;
    }
    float _1754 = (((_740 * _690) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1756 = (((_740 * _692) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1758 = (((_740 * _693) + _741) * _705) * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1761 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1754 * cbSceneParam._m0[91u].x));
    vec4 _1775 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_575, _576));
    float _1777 = _1775.w;
    float _1789 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1777);
    float _1790 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1777);
    float _1791 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1777);
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_632 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _705 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1834 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1838 = _1797 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_470, _471, _472));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_470, _471, _472));
    float _4063 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _4074 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1814].x * _1820) * _1859) + (((cbLight._m0[_1824].x * _1789) * _1834) * _1857);
    float _1867 = ((_1820 * cbLight._m0[_1814].y) * _1859) + (((cbLight._m0[_1824].y * _1790) * _1834) * _1857);
    float _1868 = ((_1820 * cbLight._m0[_1814].z) * _1859) + (((cbLight._m0[_1824].z * _1791) * _1834) * _1857);
    uvec4 _1873 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1875 = _1873.x == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1875)
    {
        _1886 = _1866;
        _1888 = _1867;
        _1890 = _1868;
    }
    else
    {
        uint _1894 = _1797 + 6u;
        float _1910 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_470, _471, _472)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _4085 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1913 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1886 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1866;
        _1888 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1867;
        _1890 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1868;
    }
    bool _1893 = _1873.y == 0u;
    float _1931;
    float _1933;
    float _1935;
    if (_1893)
    {
        _1931 = _1886;
        _1933 = _1888;
        _1935 = _1890;
    }
    else
    {
        uint _2104 = _1797 + 7u;
        float _2120 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_470, _471, _472)) * 0.5) + 0.5;
        float _2121 = _2120 * _2120;
        float _4101 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2122 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2123 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1931 = (((cbLight._m0[_2104].x * 0.3183098733425140380859375) * _2122) * _2123) + _1886;
        _1933 = (((cbLight._m0[_2104].y * 0.3183098733425140380859375) * _2122) * _2123) + _1888;
        _1935 = (((cbLight._m0[_2104].z * 0.3183098733425140380859375) * _2122) * _2123) + _1890;
    }
    uint _1938 = _1797 + 8u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _619) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1797].x + _551;
    float _1954 = cbLight._m0[_1797].y + _552;
    float _1955 = cbLight._m0[_1797].z + _553;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_1797].xyz));
    float _4117 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1967 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _1968 = dot(vec3(_470, _471, _472), vec3(_1960, _1961, _1962));
    float _4139 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1960, _1961, _1962));
    float _4150 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1952 * _1952;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1988 = exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0);
    float _1989 = 0.959999978542327880859375 - _687;
    float _1991 = 0.959999978542327880859375 - _688;
    float _1992 = 0.959999978542327880859375 - _689;
    float _1999 = 1.0 - _1952;
    float _2010 = (0.5 / (((_1967 * ((_1966 * _1999) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _1999) + _1952) * _1966))) * _1966;
    float _4161 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    uint _2026 = _1797 + 9u;
    float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _619) * 0.949999988079071044921875);
    float _2038 = _2037 * _2037;
    float _2039 = cbLight._m0[_1838].x + _551;
    float _2040 = cbLight._m0[_1838].y + _552;
    float _2041 = cbLight._m0[_1838].z + _553;
    float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
    float _2046 = _2045 * _2039;
    float _2047 = _2045 * _2040;
    float _2048 = _2045 * _2041;
    float _2049 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_1838].xyz));
    float _4172 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2053 = dot(vec3(_470, _471, _472), vec3(_2046, _2047, _2048));
    float _4183 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2046, _2047, _2048));
    float _4194 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2038 * _2038;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0);
    float _2079 = 1.0 - _2038;
    float _2089 = (0.5 / (((_1967 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2079) + _2038) * _2052))) * _2052;
    float _4205 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2091 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    float _2101 = (((((_2072 * _1989) + _690) * cbLight._m0[_2026].x) * _2091) * _1820) + ((((cbLight._m0[_1938].x * _1789) * ((_1988 * _1989) + _690)) * _2012) * _1834);
    float _2102 = (((((_2072 * _1991) + _692) * cbLight._m0[_2026].y) * _2091) * _1820) + ((((cbLight._m0[_1938].y * _1790) * ((_1988 * _1991) + _692)) * _2012) * _1834);
    float _2103 = (((((_2072 * _1992) + _693) * cbLight._m0[_2026].z) * _2091) * _1820) + ((((cbLight._m0[_1938].z * _1791) * ((_1988 * _1992) + _693)) * _2012) * _1834);
    float _2165;
    float _2167;
    float _2169;
    if (_1875)
    {
        _2165 = _2101;
        _2167 = _2102;
        _2169 = _2103;
    }
    else
    {
        uint _2171 = _1797 + 2u;
        uint _2175 = _1797 + 10u;
        float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _619) * 0.949999988079071044921875);
        float _2190 = _2189 * _2189;
        float _2191 = cbLight._m0[_2171].x + _551;
        float _2192 = cbLight._m0[_2171].y + _552;
        float _2193 = cbLight._m0[_2171].z + _553;
        float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
        float _2198 = _2197 * _2191;
        float _2199 = _2197 * _2192;
        float _2200 = _2197 * _2193;
        float _2201 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_2171].xyz));
        float _4216 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2205 = dot(vec3(_470, _471, _472), vec3(_2198, _2199, _2200));
        float _4227 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2209 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2198, _2199, _2200));
        float _4238 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2213 = _2190 * _2190;
        float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
        float _2224 = exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0);
        float _2231 = 1.0 - _2190;
        float _2241 = (0.5 / (((_1967 * ((_2204 * _2231) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2231) + _2190) * _2204))) * _2204;
        float _4249 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2243 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
        float _2244 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2165 = (((((_2224 * _1989) + _690) * cbLight._m0[_2175].x) * _2243) * _2244) + _2101;
        _2167 = (((((_2224 * _1991) + _692) * cbLight._m0[_2175].y) * _2243) * _2244) + _2102;
        _2169 = (((((_2224 * _1992) + _693) * cbLight._m0[_2175].z) * _2243) * _2244) + _2103;
    }
    float _2279;
    float _2281;
    float _2283;
    if (_1893)
    {
        _2279 = _2165;
        _2281 = _2167;
        _2283 = _2169;
    }
    else
    {
        uint _2290 = _1797 + 3u;
        uint _2294 = _1797 + 11u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _619) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _551;
        float _2311 = cbLight._m0[_2290].y + _552;
        float _2312 = cbLight._m0[_2290].z + _553;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_2290].xyz));
        float _4265 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2324 = dot(vec3(_470, _471, _472), vec3(_2317, _2318, _2319));
        float _4276 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4287 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
        float _2350 = 1.0 - _2309;
        float _2360 = (0.5 / (((_1967 * ((_2323 * _2350) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2350) + _2309) * _2323))) * _2323;
        float _4298 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2279 = (((((_2343 * _1989) + _690) * cbLight._m0[_2294].x) * _2362) * _2363) + _2165;
        _2281 = (((((_2343 * _1991) + _692) * cbLight._m0[_2294].y) * _2362) * _2363) + _2167;
        _2283 = (((((_2343 * _1992) + _693) * cbLight._m0[_2294].z) * _2362) * _2363) + _2169;
    }
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_1795.y == 0u)
    {
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2438;
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2438;
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2438;
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.x;
        uint _2465 = uint((float(_2453.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _2454))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _2454)));
        float _2475 = (log2(_2441 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2476 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        uint _2479 = uint(isnan(14.0) ? _2476 : (isnan(_2476) ? 14.0 : min(_2476, 14.0)));
        uvec4 _2484 = texelFetch(g_lightClusterGridBuffer, int(((_2479 << 2u) + (_2465 << 6u)) >> 2u));
        uint _2485 = _2484.x;
        uint _2486 = _2453.z;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        if (((((1u << ((_2486 >> 4u) & 15u)) + 4294967295u) & _2485) == 0u) || ((_2486 & 240u) == 0u))
        {
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
        }
        else
        {
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2771)
                {
                    frontier_phi_74_pred = _2760;
                    frontier_phi_74_pred_1 = _2759;
                    frontier_phi_74_pred_2 = _2758;
                    frontier_phi_74_pred_3 = _2757;
                    frontier_phi_74_pred_4 = _2756;
                    frontier_phi_74_pred_5 = _2755;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2770;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2761 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2439;
                        float _2967 = _2926.y - _2440;
                        float _2968 = _2926.z - _2441;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_600, _603, _606), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4324 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2439;
                        float _3002 = (-0.0) - _2440;
                        float _3003 = (-0.0) - _2441;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _721;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_600, _603, _606), vec3(_3008, _3009, _3010));
                        float _4340 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3043 = dot(vec3(_600, _603, _606), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4351 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4362 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4373 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2830 = (_2997 * _2945.x) + _2903;
                        _2831 = (_2997 * _2945.y) + _2904;
                        _2832 = (_2997 * _2945.z) + _2905;
                        _2827 = (_3078 * _2962.x) + _2900;
                        _2828 = (_3078 * _2962.y) + _2901;
                        _2829 = (_3078 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_74_pred = _2832;
                    frontier_phi_74_pred_1 = _2831;
                    frontier_phi_74_pred_2 = _2830;
                    frontier_phi_74_pred_3 = _2829;
                    frontier_phi_74_pred_4 = _2828;
                    frontier_phi_74_pred_5 = _2827;
                }
                _2614 = frontier_phi_74_pred;
                _2612 = frontier_phi_74_pred_1;
                _2610 = frontier_phi_74_pred_2;
                _2608 = frontier_phi_74_pred_3;
                _2606 = frontier_phi_74_pred_4;
                _2604 = frontier_phi_74_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2604;
                    _2756 = _2606;
                    _2757 = _2608;
                    _2758 = _2610;
                    _2759 = _2612;
                    _2760 = _2614;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
        }
        uvec4 _2617 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2618 = _2617.z;
        uint _2620 = (_2618 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2620) & _2485) == 0u)
        {
            _2723 = _2603;
            _2725 = _2605;
            _2727 = _2607;
            _2729 = _2609;
            _2731 = _2611;
            _2733 = _2613;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
            float _2749 = _2748 * _2439;
            float _2750 = _2748 * _2440;
            float _2751 = _2748 * _2441;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2620 < ((_2618 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2883 = _2603;
                float _2884 = _2605;
                float _2885 = _2607;
                float _2886 = _2609;
                float _2887 = _2611;
                float _2888 = _2613;
                uint _2889 = _2620;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2899)
                    {
                        frontier_phi_85_pred = _2887;
                        frontier_phi_85_pred_1 = _2886;
                        frontier_phi_85_pred_2 = _2885;
                        frontier_phi_85_pred_3 = _2884;
                        frontier_phi_85_pred_4 = _2883;
                        frontier_phi_85_pred_5 = _2888;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        uint _3111 = _2898;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3181;
                        vec4 _3196;
                        float _3242;
                        bool _3243;
                        for (;;)
                        {
                            uint _3122 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3168 = (_3122 * 40u) + 16u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3122 * 40u) + 20u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3122 * 40u) + 24u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3217 = (_3122 * 40u) + 28u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3242 = fma(_2441, _3230.z, fma(_2440, _3230.y, _3230.x * _2439)) + _3230.w;
                            _3243 = !((fma(_2441, _3211.z, fma(_2440, _3211.y, _3211.x * _2439)) + _3211.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3243)
                            {
                                float _3270 = _3137.x - _2439;
                                float _3271 = _3137.y - _2440;
                                float _3272 = _3137.z - _2441;
                                float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                                float _3276 = inversesqrt(_3273);
                                float _3277 = _3276 * _3270;
                                float _3278 = _3276 * _3271;
                                float _3279 = _3276 * _3272;
                                float _3283 = 1.0 - (_3273 / (_3138 * _3138));
                                float _4384 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3288 = sqrt(_3273) * _3153.w;
                                float _3290 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                                float _3291 = _3290 * _3290;
                                float _3294 = ((1.0 - _3291) * dot(vec3(_3277, _3278, _3279), vec3(_600, _603, _606))) + _3291;
                                float _3297 = _3288 * _3288;
                                float _3301 = (fma(_2441, _3181.z, fma(_2440, _3181.y, _3181.x * _2439)) + _3181.w) / _3242;
                                float _3302 = (fma(_2441, _3196.z, fma(_2440, _3196.y, _3196.x * _2439)) + _3196.w) / _3242;
                                float _3306 = 1.0 - dot(vec2(_3301, _3302), vec2(_3301, _3302));
                                float _4400 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3308 = _3307 * (((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3284) / ((_3297 * 0.699999988079071044921875) + 1.0));
                                float _3320 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                                float _3321 = 1.0 - _721;
                                float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                                float _3329 = _3328 * _3328;
                                float _3330 = _3329 * _3329;
                                float _3331 = _3277 - _2749;
                                float _3332 = _3278 - _2750;
                                float _3333 = _3279 - _2751;
                                float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                                float _3341 = dot(vec3(_600, _603, _606), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4411 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3345 = dot(vec3(_600, _603, _606), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                                float _4422 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                                float _3353 = _3290 * _3329;
                                float _3354 = _3353 * _3353;
                                float _3360 = ((1.0 - _3354) * dot(vec3(_600, _603, _606), vec3(_3277, _3278, _3279))) + _3354;
                                float _4433 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3362 = 1.0 - _3329;
                                float _3372 = (0.5 / (((_3361 * ((_3344 * _3362) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3329) * _3344))) * _3361;
                                float _4444 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3382 = (_3307 * _3284) * (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3352 * _3352) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3308 * _3153.y;
                                frontier_phi_91_pred_1 = _3308 * _3153.x;
                                frontier_phi_91_pred_2 = _3382 * _3165.z;
                                frontier_phi_91_pred_3 = _3382 * _3165.y;
                                frontier_phi_91_pred_4 = _3382 * _3165.x;
                                frontier_phi_91_pred_5 = _3308 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3390 = frontier_phi_91_pred;
                            _3389 = frontier_phi_91_pred_1;
                            _3388 = frontier_phi_91_pred_2;
                            _3387 = frontier_phi_91_pred_3;
                            _3386 = frontier_phi_91_pred_4;
                            _3391 = frontier_phi_91_pred_5;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3092 = _3386 + _3105;
                            _3093 = _3387 + _3106;
                            _3094 = _3388 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3096;
                        frontier_phi_85_pred_1 = _3095;
                        frontier_phi_85_pred_2 = _3094;
                        frontier_phi_85_pred_3 = _3093;
                        frontier_phi_85_pred_4 = _3092;
                        frontier_phi_85_pred_5 = _3097;
                    }
                    _2732 = frontier_phi_85_pred;
                    _2730 = frontier_phi_85_pred_1;
                    _2728 = frontier_phi_85_pred_2;
                    _2726 = frontier_phi_85_pred_3;
                    _2724 = frontier_phi_85_pred_4;
                    _2734 = frontier_phi_85_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2724;
                        _2884 = _2726;
                        _2885 = _2728;
                        _2886 = _2730;
                        _2887 = _2732;
                        _2888 = _2734;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2734;
                frontier_phi_66_67_ladder_1 = _2730;
                frontier_phi_66_67_ladder_2 = _2732;
                frontier_phi_66_67_ladder_3 = _2726;
                frontier_phi_66_67_ladder_4 = _2724;
                frontier_phi_66_67_ladder_5 = _2728;
            }
            else
            {
                frontier_phi_66_67_ladder = _2613;
                frontier_phi_66_67_ladder_1 = _2609;
                frontier_phi_66_67_ladder_2 = _2611;
                frontier_phi_66_67_ladder_3 = _2605;
                frontier_phi_66_67_ladder_4 = _2603;
                frontier_phi_66_67_ladder_5 = _2607;
            }
            _2723 = frontier_phi_66_67_ladder_4;
            _2725 = frontier_phi_66_67_ladder_3;
            _2727 = frontier_phi_66_67_ladder_5;
            _2729 = frontier_phi_66_67_ladder_1;
            _2731 = frontier_phi_66_67_ladder_2;
            _2733 = frontier_phi_66_67_ladder;
        }
        float _2738 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2497 = (_2738 * _2729) + _1931;
        _2499 = (_2738 * _2731) + _1933;
        _2501 = (_2738 * _2733) + _1935;
        _2503 = ((_2723 * _690) * _2738) + _2279;
        _2505 = ((_2725 * _692) * _2738) + _2281;
        _2507 = ((_2727 * _693) * _2738) + _2283;
    }
    else
    {
        _2497 = _1931;
        _2499 = _1933;
        _2501 = _1935;
        _2503 = _2279;
        _2505 = _2281;
        _2507 = _2283;
    }
    vec4 _2513 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4460 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4471 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4482 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2537 = (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2497 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _705))) + ((_2503 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1546)) * cbPerFrame._m0[3u].x)) + (_2513.x * cbMtdParam._m0[3u].x);
    float _2539 = ((_2513.y * cbMtdParam._m0[3u].x) + ((_2505 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1546)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2499 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _705)));
    float _2541 = ((_2513.z * cbMtdParam._m0[3u].x) + ((_2507 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1546)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2501 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _705)));
    float _2542 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2543 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2544 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    uint _2545 = _632 + 6u;
    float _2553 = _575 / cbSceneParam._m0[86u].x;
    float _2554 = _576 / cbSceneParam._m0[86u].y;
    vec4 _2568 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, (log2((isnan(cbSceneParam._m0[77u].w) ? _493 : (isnan(_493) ? cbSceneParam._m0[77u].w : min(_493, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2570 = _2568.x;
    float _2571 = _2568.y;
    float _2572 = _2568.z;
    float _2573 = _2568.w;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_493 > cbSceneParam._m0[78u].w)
    {
        float _2628 = isnan(_493) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _493 : min(cbSceneParam._m0[80u].w, _493));
        float _2629 = _2628 / _493;
        float _2640 = _2629 * _544;
        float _2641 = _545 * _2629;
        float _2642 = (-0.0) - _2641;
        float _2643 = _2629 * _546;
        float _2645 = (cbSceneParam._m0[77u].w * _2642) / _2628;
        float _2646 = _2645 + cbSceneParam._m0[79u].w;
        float _2647 = cbSceneParam._m0[79u].w - _2641;
        float _2653 = sqrt(((_2640 * _2640) + (_2641 * _2641)) + (_2643 * _2643));
        float _2656 = (1.0 - (cbSceneParam._m0[77u].w / _2628)) * _2653;
        float _2661 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2663 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2642 - _2645) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2646 > 0.0) ? exp2(_2661 * _2646) : (2.0 - exp2(_2663 * _2646))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2656;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : max(_2646, _2647));
            float _2786 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : min(_2646, _2647));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2840 = ((abs(_2653 / _2642) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2661 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2661 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2663 * _2795) - exp2(_2663 * _2796)) * _2784))) + (_2656 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2573);
        _2665 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2570;
        _2667 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2571;
        _2669 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2572;
        _2671 = _2851 * _2573;
    }
    else
    {
        _2665 = _2570;
        _2667 = _2571;
        _2669 = _2572;
        _2671 = _2573;
    }
    bool _2878;
    vec4 _2681;
    vec4 _2703;
    float _2705;
    float _2709;
    float _2710;
    float _2711;
    float _2712;
    bool _2722;
    for (;;)
    {
        _2681 = cbMatDynParam._m0[0u];
        float _2683 = roundEven(_2681.y);
        bool _2684 = _2683 == 3.0;
        float _2685 = log2(_2671);
        float _2692 = exp2(_2685 * cbSceneParam._m0[78u].x) * _2542;
        float _2693 = exp2(_2685 * cbSceneParam._m0[78u].y) * _2543;
        float _2694 = exp2(_2685 * cbSceneParam._m0[78u].z) * _2544;
        float _2701 = _560 + (-0.5);
        _2703 = cbMtdParam._m0[1u];
        _2705 = _2703.y * _2701;
        float _2708 = (_2683 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2709 = _2708 * (_2684 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2665)));
        _2710 = _2708 * (_2684 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2667)));
        _2711 = _2708 * (_2684 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2669)));
        _2712 = _2701 * 0.999000012874603271484375;
        _2722 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2722)
        {
            if ((cbInstanceData._m0[_632 + 7u].x + _2712) < 0.5)
            {
                _2878 = true;
                break;
            }
        }
        uint _2819 = _634 + uint(_2681.w);
        if ((cbInstanceData._m0[_2819].w < 1.0) && ((cbInstanceData._m0[_2819].w + _2712) < 0.5))
        {
            _2878 = true;
            break;
        }
        if ((_2705 + 1.0) < _2703.x)
        {
            _2878 = true;
            break;
        }
        _2878 = false;
        break;
    }
    float _3083;
    if (_2878)
    {
        discard_state = true;
        _3083 = 0.0;
    }
    else
    {
        _3083 = cbInstanceData._m0[_2545].w;
    }
    SV_Target.x = _2709;
    SV_Target.y = _2710;
    SV_Target.z = _2711;
    SV_Target.w = _3083;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2545].w;
    discard_exit();
}


