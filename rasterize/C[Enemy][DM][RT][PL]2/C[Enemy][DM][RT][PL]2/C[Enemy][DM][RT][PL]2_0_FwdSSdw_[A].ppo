#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1219;
float _3646;
float _3647;
float _3648;
float _3649;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _268 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _281 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_268 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _292 = exp2(log2(_281.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[15u].x;
    _196[0u] = cbMtdParam._m0[15u].y;
    _197[0u] = cbMtdParam._m0[15u].z;
    _195[1u] = cbMtdParam._m0[16u].x;
    _196[1u] = cbMtdParam._m0[16u].y;
    _197[1u] = cbMtdParam._m0[16u].z;
    _195[2u] = cbMtdParam._m0[17u].x;
    _196[2u] = cbMtdParam._m0[17u].y;
    _197[2u] = cbMtdParam._m0[17u].z;
    _195[3u] = cbMtdParam._m0[12u].x;
    _196[3u] = cbMtdParam._m0[12u].y;
    _197[3u] = cbMtdParam._m0[12u].z;
    _195[4u] = cbMtdParam._m0[13u].x;
    _196[4u] = cbMtdParam._m0[13u].y;
    _197[4u] = cbMtdParam._m0[13u].z;
    _195[5u] = cbMtdParam._m0[14u].x;
    _196[5u] = cbMtdParam._m0[14u].y;
    _197[5u] = cbMtdParam._m0[14u].z;
    vec4 _359 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _362 = _359.y;
    float _365 = (_359.x + (-0.02500000037252902984619140625)) * 8.0;
    float _367 = roundEven(_365);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    uint _371 = uint(int(isnan(5.0) ? _368 : (isnan(_368) ? 5.0 : min(_368, 5.0))));
    float _388;
    if (_292)
    {
        _388 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _388 = cbMtdParam._m0[20u].z;
    }
    float _394;
    float _396;
    if (_292)
    {
        _394 = cbMtdParam._m0[28u].z;
        _396 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _394 = cbMtdParam._m0[24u].x;
        _396 = cbMtdParam._m0[24u].y;
    }
    float _398 = _394 * TEXCOORD.x;
    float _399 = _396 * TEXCOORD.y;
    float _411 = floor(_388);
    vec4 _414 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _398) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _399) + cbTextureTilingScale._m0[8u].w, _411));
    vec4 _436 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _268) + cbTextureTilingScale._m0[0u].w));
    float _444 = ((((((_195[_371] - cbMtdParam._m0[19u].x) * _362) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _414.x) * cbMtdParam._m0[9u].x) * _436.x;
    float _448 = ((((((_196[_371] - cbMtdParam._m0[19u].y) * _362) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _414.y) * cbMtdParam._m0[9u].y) * _436.y;
    float _452 = ((((((_197[_371] - cbMtdParam._m0[19u].z) * _362) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _414.z) * cbMtdParam._m0[9u].z) * _436.z;
    vec4 _464 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _268) + cbTextureTilingScale._m0[1u].w));
    float _468 = _464.z;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[25u].x;
    _191[0u] = cbMtdParam._m0[25u].y;
    _190[1u] = cbMtdParam._m0[26u].x;
    _191[1u] = cbMtdParam._m0[26u].y;
    _190[2u] = cbMtdParam._m0[26u].z;
    _191[2u] = cbMtdParam._m0[26u].w;
    _190[3u] = cbMtdParam._m0[27u].x;
    _191[3u] = cbMtdParam._m0[27u].y;
    _190[4u] = cbMtdParam._m0[25u].z;
    _191[4u] = cbMtdParam._m0[25u].w;
    float _513 = roundEven(5.0 - _365);
    float _514 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _515 = isnan(4.0) ? _514 : (isnan(_514) ? 4.0 : min(_514, 4.0));
    float _517 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    uint _519 = uint(int(isnan(4.0) ? _517 : (isnan(_517) ? 4.0 : min(_517, 4.0))));
    float _525 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _398) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _399) + cbTextureTilingScale._m0[10u].w, _411)).x + _464.w) + _191[_519];
    vec4 _543 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _398) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _399) + cbTextureTilingScale._m0[9u].w, _411));
    float _550 = (_543.x * 2.0) + (-1.0);
    float _551 = (_543.y * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3688 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    float _567 = (cbMtdParam._m0[21u].x * (((_468 * 2.0) * (_543.z + _190[_519])) - _468)) + _468;
    float _571 = (cbMtdParam._m0[21u].y * ((_464.x * 2.0) + (-1.0))) + _550;
    float _572 = (cbMtdParam._m0[21u].y * ((_464.y * 2.0) + (-1.0))) + _551;
    float _575 = fma(_558, _247, fma(_572, _239 * TANGENT.x, (_225 * _217) * _571));
    float _578 = fma(_558, _248, fma(_572, _239 * TANGENT.y, (_225 * _218) * _571));
    float _581 = fma(_558, _249, fma(_572, _239 * TANGENT.z, (_225 * _219) * _571));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    float _586 = _585 * _575;
    float _587 = _585 * _578;
    float _588 = _585 * _581;
    float _3699 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _589 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3721 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3732 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3743 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _593 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _609 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _660 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _650);
    float _661 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _650);
    float _662 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _650);
    float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
    float _667 = _660 * _666;
    float _668 = _661 * _666;
    float _669 = _662 * _666;
    vec4 _674 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _676 = _674.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _899 = sqrt(((_660 * _660) + (_661 * _661)) + (_662 * _662));
        float _905 = (cbMatDynParam._m0[5u].x * _899) + cbMatDynParam._m0[5u].y;
        float _3754 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _910 = (cbMatDynParam._m0[5u].z * _899) + cbMatDynParam._m0[5u].w;
        float _3765 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) - _906)) + _906) < ((_676 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _690 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _691 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _693 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _695 = _693.w;
    float _714 = fma(_588, cbSceneParam._m0[5u].z, fma(_587, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _586));
    float _717 = fma(_588, cbSceneParam._m0[6u].z, fma(_587, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _586));
    float _720 = fma(_588, cbSceneParam._m0[7u].z, fma(_587, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _586));
    vec4 _722 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _733 = (((_722.y - _589) + (_722.w * _589)) * cbMtdParam._m0[3u].x) + _589;
    uint _746 = uint(roundEven(NORMAL.w)) * 13u;
    uint _747 = _746 + 9u;
    uint _748 = _747 + uint(cbMatDynParam._m0[0u].w);
    float _754 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_748].x;
    float _755 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_748].y;
    float _756 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_748].z;
    float _3776 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    vec4 _760 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _765 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _776 = (((_765.x - _593) + (_765.w * _593)) * cbMtdParam._m0[3u].x) + _593;
    float _789 = (cbMtdParam._m0[3u].x * (((_757 * _695) - _757) + _760.x)) + _757;
    float _790 = (cbMtdParam._m0[3u].x * (((_758 * _695) - _758) + _760.y)) + _758;
    float _791 = (cbMtdParam._m0[3u].x * (((_759 * _695) - _759) + _760.z)) + _759;
    float _792 = 1.0 - _776;
    float _793 = _792 * _789;
    float _794 = _792 * _790;
    float _795 = _792 * _791;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _776;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _776;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _776;
    float _803 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _690, cbSceneParam._m0[86u].y * _691));
    float _818 = _815.x * TEXCOORD_4;
    float _819 = dot(vec3(_586, _587, _588), vec3(_667, _668, _669));
    float _822 = _819 * 2.0;
    float _826 = (_822 * _586) - _667;
    float _827 = (_822 * _587) - _668;
    float _828 = (_822 * _588) - _669;
    float _832 = abs(dot(vec3(_667, _668, _669), vec3(_586, _587, _588)));
    float _3809 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _834 = sqrt(_733);
    float _845 = exp2((_834 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_834 * 3.0));
    float _851 = (1.0 - _845) * ((_834 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _852 = _845 * _834;
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1218;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _943 = fma(_888, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880));
        float _947 = fma(_888, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880));
        float _951 = fma(_888, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880));
        float _976 = _880 + _586;
        float _977 = _884 + _587;
        float _978 = _888 + _588;
        float _988 = fma(_978, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976)) - _943;
        float _989 = fma(_978, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976)) - _947;
        float _990 = fma(_978, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976)) - _951;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_943 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_947 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[34u].z) + ((((((_951 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1046 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1012.x + (-0.5));
        float _1048 = _1046 * (_1012.y + (-0.5));
        float _1049 = _1046 * (_1012.z + (-0.5));
        float _1056 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1019.x + (-0.5));
        float _1058 = _1056 * (_1019.y + (-0.5));
        float _1059 = _1056 * (_1019.z + (-0.5));
        float _1066 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1026.x + (-0.5));
        float _1068 = _1066 * (_1026.y + (-0.5));
        float _1069 = _1066 * (_1026.z + (-0.5));
        float _1076 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1033.x + (-0.5));
        float _1078 = _1076 * (_1033.y + (-0.5));
        float _1079 = _1076 * (_1033.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1100 = (dot(vec3(_586, _587, _588), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1110 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3857 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1112 + 1.0))) + _1117) * _1080;
        float _1127 = _1048 * 0.5;
        float _1128 = _1058 * 0.5;
        float _1129 = _1068 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_586, _587, _588), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3890 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1154 + 1.0))) + _1159) * _1081;
        float _1169 = _1049 * 0.5;
        float _1170 = _1059 * 0.5;
        float _1171 = _1069 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_586, _587, _588), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3923 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1196 + 1.0))) + _1201) * _1082;
        _1218 = _1049;
        _1220 = _1048;
        _1221 = _1047;
        _1222 = _1059;
        _1223 = _1058;
        _1224 = _1057;
        _1225 = _1069;
        _1226 = _1068;
        _1227 = _1067;
        _1228 = _1082;
        _1229 = _1081;
        _1230 = _1080;
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _1219;
        _1220 = _1219;
        _1221 = _1219;
        _1222 = _1219;
        _1223 = _1219;
        _1224 = _1219;
        _1225 = _1219;
        _1226 = _1219;
        _1227 = _1219;
        _1228 = _1219;
        _1229 = _1219;
        _1230 = _1219;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1262 = fma(_888, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880));
        float _1266 = fma(_888, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880));
        float _1270 = fma(_888, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880));
        float _1293 = _880 + _586;
        float _1294 = _884 + _587;
        float _1295 = _888 + _588;
        float _1305 = fma(_1295, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1293)) - _1262;
        float _1306 = fma(_1295, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1293)) - _1266;
        float _1307 = fma(_1295, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1293)) - _1270;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1262 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1266 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[35u].z) + ((((((_1270 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1361 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1328.x + (-0.5));
        float _1363 = _1361 * (_1328.y + (-0.5));
        float _1364 = _1361 * (_1328.z + (-0.5));
        float _1371 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1335.x + (-0.5));
        float _1373 = _1371 * (_1335.y + (-0.5));
        float _1374 = _1371 * (_1335.z + (-0.5));
        float _1381 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1342.x + (-0.5));
        float _1383 = _1381 * (_1342.y + (-0.5));
        float _1384 = _1381 * (_1342.z + (-0.5));
        float _1391 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1349.x + (-0.5));
        float _1393 = _1391 * (_1349.y + (-0.5));
        float _1394 = _1391 * (_1349.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_586, _587, _588), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3986 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1425 + 1.0))) + _1430) * _1395;
        float _1440 = _1363 * 0.5;
        float _1441 = _1373 * 0.5;
        float _1442 = _1383 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_586, _587, _588), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4019 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1467 + 1.0))) + _1472) * _1396;
        float _1482 = _1364 * 0.5;
        float _1483 = _1374 * 0.5;
        float _1484 = _1384 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_586, _587, _588), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4052 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1509 + 1.0))) + _1514) * _1397;
        _1531 = _1364;
        _1532 = _1363;
        _1533 = _1362;
        _1534 = _1374;
        _1535 = _1373;
        _1536 = _1372;
        _1537 = _1384;
        _1538 = _1383;
        _1539 = _1382;
        _1540 = _1397;
        _1541 = _1396;
        _1542 = _1395;
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1219;
        _1532 = _1219;
        _1533 = _1219;
        _1534 = _1219;
        _1535 = _1219;
        _1536 = _1219;
        _1537 = _1219;
        _1538 = _1219;
        _1539 = _1219;
        _1540 = _1219;
        _1541 = _1219;
        _1542 = _1219;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1232)) + _1232;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1233)) + _1233;
    float _1578 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1581 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1584 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1555));
    float _1599 = _826 * 0.5;
    float _1600 = _827 * 0.5;
    float _1601 = _828 * 0.5;
    float _1602 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1605 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1608 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1642;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1615 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1218, _1222, _1225, _1228));
        float _1619 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1623 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1630 = dot(vec4(cbModelParam._m0[39u]), vec4(_1599, _1600, _1601, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1653;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1644 = dot(vec4(cbModelParam._m0[40u]), vec4(_1599, _1600, _1601, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1657 = (_1653 * cbModelParam._m0[1u].x) + (_1642 * (1.0 - cbModelParam._m0[1u].x));
    float _1667 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _733);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1667 : min(cbModelParam._m0[25u].z, _1667));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1715 = fma(_888, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880)) + cbModelParam._m0[13u].w;
        float _1719 = fma(_888, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880)) + cbModelParam._m0[14u].w;
        float _1723 = fma(_888, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880)) + cbModelParam._m0[15u].w;
        float _1726 = fma(_828, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826));
        float _1729 = fma(_828, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826));
        float _1732 = fma(_828, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826));
        float _1760;
        if (_1726 > 0.0)
        {
            _1760 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_23_21_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_23_21_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_23_21_ladder = 5000.0;
            }
            _1760 = frontier_phi_23_21_ladder;
        }
        float _1984;
        if (_1729 > 0.0)
        {
            _1984 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1984 = frontier_phi_32_28_ladder;
        }
        float _2241;
        if (_1732 > 0.0)
        {
            _2241 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2241 = frontier_phi_44_39_ladder;
        }
        float _2243 = isnan(_1984) ? _1760 : (isnan(_1760) ? _1984 : min(_1760, _1984));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1726) + _1715;
        float _2249 = (_2244 * _1729) + _1719;
        float _2250 = (_2244 * _1732) + _1723;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2251;
        float _2255 = _2251 + 1.0;
        float frontier_phi_22_44_ladder;
        float frontier_phi_22_44_ladder_1;
        float frontier_phi_22_44_ladder_2;
        if ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 > _2255) || ((_2249 < _2253) || ((_2248 < _2253) || (_2248 > _2255))))))
        {
            frontier_phi_22_44_ladder = 0.0;
            frontier_phi_22_44_ladder_1 = 0.0;
            frontier_phi_22_44_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2250, cbModelParam._m0[9u].z, fma(_2249, cbModelParam._m0[9u].y, _2248 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2250, cbModelParam._m0[10u].z, fma(_2249, cbModelParam._m0[10u].y, _2248 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2250, cbModelParam._m0[11u].z, fma(_2249, cbModelParam._m0[11u].y, _2248 * cbModelParam._m0[11u].x))), _1668);
            frontier_phi_22_44_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_22_44_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1748 = frontier_phi_22_44_ladder_2;
        _1750 = frontier_phi_22_44_ladder_1;
        _1752 = frontier_phi_22_44_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_826, _827, _828), _1668);
        _1748 = _1736.x * cbModelParam._m0[1u].y;
        _1750 = _1736.y * cbModelParam._m0[1u].y;
        _1752 = _1736.z * cbModelParam._m0[1u].y;
    }
    float _1756 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _733);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1756 : min(cbModelParam._m0[25u].w, _1756));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1811 = fma(_888, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880)) + cbModelParam._m0[21u].w;
        float _1815 = fma(_888, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880)) + cbModelParam._m0[22u].w;
        float _1819 = fma(_888, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880)) + cbModelParam._m0[23u].w;
        float _1822 = fma(_828, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826));
        float _1825 = fma(_828, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826));
        float _1828 = fma(_828, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826));
        float _1989;
        if (_1822 > 0.0)
        {
            _1989 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1989 = frontier_phi_34_30_ladder;
        }
        float _2268;
        if (_1825 > 0.0)
        {
            _2268 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2268 = frontier_phi_46_41_ladder;
        }
        float _2481;
        if (_1828 > 0.0)
        {
            _2481 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2481 = frontier_phi_55_52_ladder;
        }
        float _2483 = isnan(_2268) ? _1989 : (isnan(_1989) ? _2268 : min(_1989, _2268));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1822) + _1811;
        float _2489 = (_2484 * _1825) + _1815;
        float _2490 = (_2484 * _1828) + _1819;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2491;
        float _2494 = _2491 + 1.0;
        float frontier_phi_31_55_ladder;
        float frontier_phi_31_55_ladder_1;
        float frontier_phi_31_55_ladder_2;
        if ((_2490 > _2494) || ((_2490 < _2492) || ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 < _2492) || (_2488 > _2494))))))
        {
            frontier_phi_31_55_ladder = 0.0;
            frontier_phi_31_55_ladder_1 = 0.0;
            frontier_phi_31_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2490, cbModelParam._m0[17u].z, fma(_2489, cbModelParam._m0[17u].y, _2488 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2490, cbModelParam._m0[18u].z, fma(_2489, cbModelParam._m0[18u].y, _2488 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2490, cbModelParam._m0[19u].z, fma(_2489, cbModelParam._m0[19u].y, _2488 * cbModelParam._m0[19u].x))), _1757);
            frontier_phi_31_55_ladder = _2706.z * cbModelParam._m0[1u].z;
            frontier_phi_31_55_ladder_1 = _2706.y * cbModelParam._m0[1u].z;
            frontier_phi_31_55_ladder_2 = _2706.x * cbModelParam._m0[1u].z;
        }
        _1847 = frontier_phi_31_55_ladder_2;
        _1849 = frontier_phi_31_55_ladder_1;
        _1851 = frontier_phi_31_55_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_826, _827, _828), _1757);
        _1847 = _1831.x * cbModelParam._m0[1u].z;
        _1849 = _1831.y * cbModelParam._m0[1u].z;
        _1851 = _1831.z * cbModelParam._m0[1u].z;
    }
    float _1864 = (((_851 * _803) + _852) * _818) * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1866 = (((_851 * _805) + _852) * _818) * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1868 = (((_851 * _806) + _852) * _818) * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1871 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, _1864 * cbSceneParam._m0[91u].x));
    vec4 _1885 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_690, _691));
    float _1887 = _1885.w;
    float _1899 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1887);
    float _1900 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1887);
    float _1901 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1887);
    uvec4 _1905 = floatBitsToUint(cbInstanceData._m0[_746 + 5u]);
    uint _1907 = _1905.x * 14u;
    uint _1908 = _1907 + 13u;
    float _1915 = _818 + (-1.0);
    float _1920 = (cbLight._m0[_1908].x * _1915) + 1.0;
    float _1921 = (cbLight._m0[_1908].y * _1915) + 1.0;
    float _1922 = (cbLight._m0[_1908].z * _1915) + 1.0;
    float _1923 = (cbLight._m0[_1908].w * _1915) + 1.0;
    uint _1924 = _1907 + 5u;
    float _1930 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1934 = _1907 + 4u;
    float _1943 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1947 = _1907 | 1u;
    float _1958 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_586, _587, _588));
    float _1961 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_586, _587, _588));
    float _4188 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _4199 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1966 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _1968 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _1975 = ((cbLight._m0[_1924].x * _1930) * _1968) + (((cbLight._m0[_1934].x * _1899) * _1943) * _1966);
    float _1976 = ((_1930 * cbLight._m0[_1924].y) * _1968) + (((cbLight._m0[_1934].y * _1900) * _1943) * _1966);
    float _1977 = ((_1930 * cbLight._m0[_1924].z) * _1968) + (((cbLight._m0[_1934].z * _1901) * _1943) * _1966);
    uvec4 _1981 = floatBitsToUint(cbLight._m0[_1907 + 12u]);
    bool _1983 = _1981.x == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1983)
    {
        _1994 = _1975;
        _1996 = _1976;
        _1998 = _1977;
    }
    else
    {
        uint _2002 = _1907 + 6u;
        float _2018 = (dot(vec3(cbLight._m0[_1907 + 2u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _4210 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2021 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _1994 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1975;
        _1996 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1976;
        _1998 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1977;
    }
    bool _2001 = _1981.y == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_2001)
    {
        _2039 = _1994;
        _2041 = _1996;
        _2043 = _1998;
    }
    else
    {
        uint _2212 = _1907 + 7u;
        float _2228 = (dot(vec3(cbLight._m0[_1907 + 3u].xyz), vec3(_586, _587, _588)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4226 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2231 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2039 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _1994;
        _2041 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _1996;
        _2043 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _1998;
    }
    uint _2046 = _1907 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _733) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1907].x + _667;
    float _2062 = cbLight._m0[_1907].y + _668;
    float _2063 = cbLight._m0[_1907].z + _669;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1907].xyz));
    float _4242 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _2075 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2076 = dot(vec3(_586, _587, _588), vec3(_2068, _2069, _2070));
    float _4264 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_2068, _2069, _2070));
    float _4275 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
    float _2097 = 0.959999978542327880859375 - _800;
    float _2099 = 0.959999978542327880859375 - _801;
    float _2100 = 0.959999978542327880859375 - _802;
    float _2107 = 1.0 - _2060;
    float _2118 = (0.5 / (((_2075 * ((_2074 * _2107) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2107) + _2060) * _2074))) * _2074;
    float _4286 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2134 = _1907 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _733) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1947].x + _667;
    float _2148 = cbLight._m0[_1947].y + _668;
    float _2149 = cbLight._m0[_1947].z + _669;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1947].xyz));
    float _4297 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2161 = dot(vec3(_586, _587, _588), vec3(_2154, _2155, _2156));
    float _4308 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2154, _2155, _2156));
    float _4319 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
    float _2187 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2075 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2187) + _2146) * _2160))) * _2160;
    float _4330 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2209 = (((((_2180 * _2097) + _803) * cbLight._m0[_2134].x) * _2199) * _1930) + ((((cbLight._m0[_2046].x * _1899) * ((_2096 * _2097) + _803)) * _2120) * _1943);
    float _2210 = (((((_2180 * _2099) + _805) * cbLight._m0[_2134].y) * _2199) * _1930) + ((((cbLight._m0[_2046].y * _1900) * ((_2096 * _2099) + _805)) * _2120) * _1943);
    float _2211 = (((((_2180 * _2100) + _806) * cbLight._m0[_2134].z) * _2199) * _1930) + ((((cbLight._m0[_2046].z * _1901) * ((_2096 * _2100) + _806)) * _2120) * _1943);
    float _2273;
    float _2275;
    float _2277;
    if (_1983)
    {
        _2273 = _2209;
        _2275 = _2210;
        _2277 = _2211;
    }
    else
    {
        uint _2279 = _1907 + 2u;
        uint _2283 = _1907 + 10u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _733) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _667;
        float _2300 = cbLight._m0[_2279].y + _668;
        float _2301 = cbLight._m0[_2279].z + _669;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2279].xyz));
        float _4341 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2313 = dot(vec3(_586, _587, _588), vec3(_2306, _2307, _2308));
        float _4352 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4363 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
        float _2339 = 1.0 - _2298;
        float _2349 = (0.5 / (((_2075 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2339) + _2298) * _2312))) * _2312;
        float _4374 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2273 = (((((_2332 * _2097) + _803) * cbLight._m0[_2283].x) * _2351) * _2352) + _2209;
        _2275 = (((((_2332 * _2099) + _805) * cbLight._m0[_2283].y) * _2351) * _2352) + _2210;
        _2277 = (((((_2332 * _2100) + _806) * cbLight._m0[_2283].z) * _2351) * _2352) + _2211;
    }
    float _2387;
    float _2389;
    float _2391;
    if (_2001)
    {
        _2387 = _2273;
        _2389 = _2275;
        _2391 = _2277;
    }
    else
    {
        uint _2398 = _1907 + 3u;
        uint _2402 = _1907 + 11u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _733) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _667;
        float _2419 = cbLight._m0[_2398].y + _668;
        float _2420 = cbLight._m0[_2398].z + _669;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_2398].xyz));
        float _4390 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2432 = dot(vec3(_586, _587, _588), vec3(_2425, _2426, _2427));
        float _4401 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4412 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2451 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
        float _2458 = 1.0 - _2417;
        float _2468 = (0.5 / (((_2075 * ((_2431 * _2458) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2458) + _2417) * _2431))) * _2431;
        float _4423 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2387 = (((((_2451 * _2097) + _803) * cbLight._m0[_2402].x) * _2470) * _2471) + _2273;
        _2389 = (((((_2451 * _2099) + _805) * cbLight._m0[_2402].y) * _2470) * _2471) + _2275;
        _2391 = (((((_2451 * _2100) + _806) * cbLight._m0[_2402].z) * _2470) * _2471) + _2277;
    }
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_1905.y == 0u)
    {
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2546;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2546;
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2546;
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.x;
        uint _2573 = uint((float(_2561.y) * floor(float(uint(cbSceneParam._m0[85u].y * _691) / _2562))) + floor(float(uint(cbSceneParam._m0[85u].x * _690) / _2562)));
        float _2583 = (log2(_2549 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2584 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        uint _2587 = uint(isnan(14.0) ? _2584 : (isnan(_2584) ? 14.0 : min(_2584, 14.0)));
        uvec4 _2592 = texelFetch(g_lightClusterGridBuffer, int(((_2587 << 2u) + (_2573 << 6u)) >> 2u));
        uint _2593 = _2592.x;
        uint _2594 = _2561.z;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((((1u << ((_2594 >> 4u) & 15u)) + 4294967295u) & _2593) == 0u) || ((_2594 & 240u) == 0u))
        {
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
        }
        else
        {
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            uint _2869 = 0u;
            uint _2878;
            bool _2879;
            for (;;)
            {
                _2878 = texelFetch(g_lightClassification, int((((_2587 << 5u) + (_2573 << 9u)) + (_2869 << 2u)) >> 2u)).x;
                _2879 = _2878 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2879)
                {
                    frontier_phi_72_pred = _2868;
                    frontier_phi_72_pred_1 = _2867;
                    frontier_phi_72_pred_2 = _2866;
                    frontier_phi_72_pred_3 = _2865;
                    frontier_phi_72_pred_4 = _2864;
                    frontier_phi_72_pred_5 = _2863;
                }
                else
                {
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    uint _3014;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2878;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    for (;;)
                    {
                        uint _3018 = uint(findLSB(_3014)) + (_2869 << 5u);
                        uint _3015 = (_3014 + 4294967295u) & _3014;
                        uint _3020 = _3018 * 48u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3040 = (_3018 * 48u) + 4u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3059 = (_3018 * 48u) + 8u;
                        vec3 _3070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x));
                        float _3074 = _3034.x - _2547;
                        float _3075 = _3034.y - _2548;
                        float _3076 = _3034.z - _2549;
                        float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                        float _3080 = inversesqrt(_3077);
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3084 = dot(vec3(_714, _717, _720), vec3(_3081, _3082, _3083));
                        float _3089 = 1.0 - (_3077 * _3034.w);
                        float _4449 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3091 = sqrt(_3077) * _3053.w;
                        float _3094 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3084) + _3095;
                        float _3101 = _3091 * _3091;
                        float _3105 = ((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3090) / ((_3101 * 0.699999988079071044921875) + 1.0);
                        float _3109 = (-0.0) - _2547;
                        float _3110 = (-0.0) - _2548;
                        float _3111 = (-0.0) - _2549;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3126 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                        float _3127 = 1.0 - _834;
                        float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                        float _3135 = _3134 * _3134;
                        float _3136 = _3135 * _3135;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3147 = dot(vec3(_714, _717, _720), vec3(_3116, _3117, _3118));
                        float _4465 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3151 = dot(vec3(_714, _717, _720), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                        float _4476 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                        float _3159 = _3094 * _3135;
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3084) + _3160;
                        float _4487 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3165 = 1.0 - _3135;
                        float _3175 = (0.5 / (((_3164 * ((_3150 * _3165) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3135) * _3150))) * _3164;
                        float _4498 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3186 = (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3158 * _3158) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125))) * _3090;
                        _2938 = (_3105 * _3053.x) + _3011;
                        _2939 = (_3105 * _3053.y) + _3012;
                        _2940 = (_3105 * _3053.z) + _3013;
                        _2935 = (_3186 * _3070.x) + _3008;
                        _2936 = (_3186 * _3070.y) + _3009;
                        _2937 = (_3186 * _3070.z) + _3010;
                        if (_3015 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _3015;
                        }
                    }
                    frontier_phi_72_pred = _2940;
                    frontier_phi_72_pred_1 = _2939;
                    frontier_phi_72_pred_2 = _2938;
                    frontier_phi_72_pred_3 = _2937;
                    frontier_phi_72_pred_4 = _2936;
                    frontier_phi_72_pred_5 = _2935;
                }
                _2722 = frontier_phi_72_pred;
                _2720 = frontier_phi_72_pred_1;
                _2718 = frontier_phi_72_pred_2;
                _2716 = frontier_phi_72_pred_3;
                _2714 = frontier_phi_72_pred_4;
                _2712 = frontier_phi_72_pred_5;
                uint _2870 = _2869 + 1u;
                if (_2870 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2863 = _2712;
                    _2864 = _2714;
                    _2865 = _2716;
                    _2866 = _2718;
                    _2867 = _2720;
                    _2868 = _2722;
                    _2869 = _2870;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
        }
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.z;
        uint _2728 = (_2726 >> 8u) & 15u;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((4294967295u << _2728) & _2593) == 0u)
        {
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
            _2837 = _2717;
            _2839 = _2719;
            _2841 = _2721;
        }
        else
        {
            float _2856 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
            float _2857 = _2856 * _2547;
            float _2858 = _2856 * _2548;
            float _2859 = _2856 * _2549;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2728 < ((_2726 >> 12u) & 15u))
            {
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2991 = _2711;
                float _2992 = _2713;
                float _2993 = _2715;
                float _2994 = _2717;
                float _2995 = _2719;
                float _2996 = _2721;
                uint _2997 = _2728;
                uint _3006;
                bool _3007;
                for (;;)
                {
                    _3006 = texelFetch(g_lightClassification, int((((_2587 << 5u) + (_2573 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                    _3007 = _3006 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_3007)
                    {
                        frontier_phi_83_pred = _2996;
                        frontier_phi_83_pred_1 = _2995;
                        frontier_phi_83_pred_2 = _2994;
                        frontier_phi_83_pred_3 = _2993;
                        frontier_phi_83_pred_4 = _2992;
                        frontier_phi_83_pred_5 = _2991;
                    }
                    else
                    {
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        uint _3219 = _3006;
                        uint _3220;
                        vec4 _3245;
                        float _3246;
                        vec4 _3261;
                        vec3 _3273;
                        vec4 _3288;
                        vec4 _3303;
                        float _3349;
                        bool _3350;
                        for (;;)
                        {
                            uint _3230 = ((_2997 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3219));
                            _3220 = (_3219 + 4294967295u) & _3219;
                            uint _3232 = _3230 * 40u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3246 = _3245.w;
                            uint _3248 = (_3230 * 40u) + 4u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3230 * 40u) + 8u;
                            _3273 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x));
                            uint _3275 = (_3230 * 40u) + 16u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3290 = (_3230 * 40u) + 20u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3230 * 40u) + 24u;
                            vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3324 = (_3230 * 40u) + 28u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            _3349 = fma(_2549, _3337.z, fma(_2548, _3337.y, _3337.x * _2547)) + _3337.w;
                            _3350 = !((fma(_2549, _3318.z, fma(_2548, _3318.y, _3318.x * _2547)) + _3318.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3350)
                            {
                                float _3377 = _3245.x - _2547;
                                float _3378 = _3245.y - _2548;
                                float _3379 = _3245.z - _2549;
                                float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                                float _3383 = inversesqrt(_3380);
                                float _3384 = _3383 * _3377;
                                float _3385 = _3383 * _3378;
                                float _3386 = _3383 * _3379;
                                float _3390 = 1.0 - (_3380 / (_3246 * _3246));
                                float _4509 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3395 = sqrt(_3380) * _3261.w;
                                float _3397 = 1.39999997615814208984375 / (_3395 + 1.39999997615814208984375);
                                float _3398 = _3397 * _3397;
                                float _3401 = ((1.0 - _3398) * dot(vec3(_3384, _3385, _3386), vec3(_714, _717, _720))) + _3398;
                                float _3404 = _3395 * _3395;
                                float _3408 = (fma(_2549, _3288.z, fma(_2548, _3288.y, _3288.x * _2547)) + _3288.w) / _3349;
                                float _3409 = (fma(_2549, _3303.z, fma(_2548, _3303.y, _3303.x * _2547)) + _3303.w) / _3349;
                                float _3413 = 1.0 - dot(vec2(_3408, _3409), vec2(_3408, _3409));
                                float _4525 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3415 = _3414 * (((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3391) / ((_3404 * 0.699999988079071044921875) + 1.0));
                                float _3427 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                                float _3428 = 1.0 - _834;
                                float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                                float _3436 = _3435 * _3435;
                                float _3437 = _3436 * _3436;
                                float _3438 = _3384 - _2857;
                                float _3439 = _3385 - _2858;
                                float _3440 = _3386 - _2859;
                                float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                                float _3448 = dot(vec3(_714, _717, _720), vec3((-0.0) - _2857, (-0.0) - _2858, (-0.0) - _2859));
                                float _4536 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3452 = dot(vec3(_714, _717, _720), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                                float _4547 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                                float _3460 = _3397 * _3436;
                                float _3461 = _3460 * _3460;
                                float _3467 = ((1.0 - _3461) * dot(vec3(_714, _717, _720), vec3(_3384, _3385, _3386))) + _3461;
                                float _4558 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3469 = 1.0 - _3436;
                                float _3479 = (0.5 / (((_3468 * ((_3451 * _3469) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3468 * _3469) + _3436) * _3451))) * _3468;
                                float _4569 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3489 = (_3414 * _3391) * (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3459 * _3459) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3415 * _3261.z;
                                frontier_phi_89_pred_1 = _3415 * _3261.y;
                                frontier_phi_89_pred_2 = _3415 * _3261.x;
                                frontier_phi_89_pred_3 = _3489 * _3273.z;
                                frontier_phi_89_pred_4 = _3489 * _3273.y;
                                frontier_phi_89_pred_5 = _3489 * _3273.x;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3498 = frontier_phi_89_pred;
                            _3497 = frontier_phi_89_pred_1;
                            _3496 = frontier_phi_89_pred_2;
                            _3495 = frontier_phi_89_pred_3;
                            _3494 = frontier_phi_89_pred_4;
                            _3493 = frontier_phi_89_pred_5;
                            _3203 = _3496 + _3216;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            if (_3220 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3220;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3205;
                        frontier_phi_83_pred_1 = _3204;
                        frontier_phi_83_pred_2 = _3203;
                        frontier_phi_83_pred_3 = _3202;
                        frontier_phi_83_pred_4 = _3201;
                        frontier_phi_83_pred_5 = _3200;
                    }
                    _2842 = frontier_phi_83_pred;
                    _2840 = frontier_phi_83_pred_1;
                    _2838 = frontier_phi_83_pred_2;
                    _2836 = frontier_phi_83_pred_3;
                    _2834 = frontier_phi_83_pred_4;
                    _2832 = frontier_phi_83_pred_5;
                    uint _2998 = _2997 + 1u;
                    if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2991 = _2832;
                        _2992 = _2834;
                        _2993 = _2836;
                        _2994 = _2838;
                        _2995 = _2840;
                        _2996 = _2842;
                        _2997 = _2998;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2838;
                frontier_phi_64_65_ladder_1 = _2842;
                frontier_phi_64_65_ladder_2 = _2840;
                frontier_phi_64_65_ladder_3 = _2836;
                frontier_phi_64_65_ladder_4 = _2834;
                frontier_phi_64_65_ladder_5 = _2832;
            }
            else
            {
                frontier_phi_64_65_ladder = _2717;
                frontier_phi_64_65_ladder_1 = _2721;
                frontier_phi_64_65_ladder_2 = _2719;
                frontier_phi_64_65_ladder_3 = _2715;
                frontier_phi_64_65_ladder_4 = _2713;
                frontier_phi_64_65_ladder_5 = _2711;
            }
            _2831 = frontier_phi_64_65_ladder_5;
            _2833 = frontier_phi_64_65_ladder_4;
            _2835 = frontier_phi_64_65_ladder_3;
            _2837 = frontier_phi_64_65_ladder;
            _2839 = frontier_phi_64_65_ladder_2;
            _2841 = frontier_phi_64_65_ladder_1;
        }
        float _2846 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
        _2605 = (_2846 * _2837) + _2039;
        _2607 = (_2846 * _2839) + _2041;
        _2609 = (_2846 * _2841) + _2043;
        _2611 = ((_2831 * _803) * _2846) + _2387;
        _2613 = ((_2833 * _805) * _2846) + _2389;
        _2615 = ((_2835 * _806) * _2846) + _2391;
    }
    else
    {
        _2605 = _2039;
        _2607 = _2041;
        _2609 = _2043;
        _2611 = _2387;
        _2613 = _2389;
        _2615 = _2391;
    }
    vec4 _2621 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4585 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4596 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4607 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2645 = (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2605 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _818))) + ((_2611 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1657)) * cbPerFrame._m0[3u].x)) + (_2621.x * cbMtdParam._m0[3u].x);
    float _2647 = ((_2621.y * cbMtdParam._m0[3u].x) + ((_2613 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1657)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2607 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _818)));
    float _2649 = ((_2621.z * cbMtdParam._m0[3u].x) + ((_2615 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1657)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2609 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _818)));
    float _2650 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2651 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2652 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    uint _2653 = _746 + 6u;
    float _2661 = _690 / cbSceneParam._m0[86u].x;
    float _2662 = _691 / cbSceneParam._m0[86u].y;
    vec4 _2676 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, (log2((isnan(cbSceneParam._m0[77u].w) ? _609 : (isnan(_609) ? cbSceneParam._m0[77u].w : min(_609, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2678 = _2676.x;
    float _2679 = _2676.y;
    float _2680 = _2676.z;
    float _2681 = _2676.w;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_609 > cbSceneParam._m0[78u].w)
    {
        float _2736 = isnan(_609) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _609 : min(cbSceneParam._m0[80u].w, _609));
        float _2737 = _2736 / _609;
        float _2748 = _2737 * _660;
        float _2749 = _661 * _2737;
        float _2750 = (-0.0) - _2749;
        float _2751 = _2737 * _662;
        float _2753 = (cbSceneParam._m0[77u].w * _2750) / _2736;
        float _2754 = _2753 + cbSceneParam._m0[79u].w;
        float _2755 = cbSceneParam._m0[79u].w - _2749;
        float _2761 = sqrt(((_2748 * _2748) + (_2749 * _2749)) + (_2751 * _2751));
        float _2764 = (1.0 - (cbSceneParam._m0[77u].w / _2736)) * _2761;
        float _2769 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2948;
        if (abs((_2750 - _2753) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2948 = ((((_2754 > 0.0) ? exp2(_2769 * _2754) : (2.0 - exp2(_2771 * _2754))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2764;
        }
        else
        {
            float _2892 = 1.0 / cbSceneParam._m0[80u].x;
            float _2893 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : max(_2754, _2755));
            float _2894 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : min(_2754, _2755));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            _2948 = ((abs(_2761 / _2750) * cbSceneParam._m0[80u].y) * ((((_2903 - _2904) * 2.0) - ((exp2(_2769 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)))) - exp2(_2769 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))))) * _2892)) - ((exp2(_2771 * _2903) - exp2(_2771 * _2904)) * _2892))) + (_2764 * cbSceneParam._m0[80u].z);
        }
        vec4 _2950 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, 1.0), 0.0);
        float _2959 = exp2((_2948 * (-1.44269502162933349609375)) * (1.0 - _2950.w));
        float _2960 = log2(_2959);
        float _2976 = log2(_2681);
        _2773 = (exp2(_2976 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].x)) * _2950.x) / cbSceneParam._m0[78u].x)) + _2678;
        _2775 = (exp2(_2976 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].y)) * _2950.y) / cbSceneParam._m0[78u].y)) + _2679;
        _2777 = (exp2(_2976 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].z)) * _2950.z) / cbSceneParam._m0[78u].z)) + _2680;
        _2779 = _2959 * _2681;
    }
    else
    {
        _2773 = _2678;
        _2775 = _2679;
        _2777 = _2680;
        _2779 = _2681;
    }
    bool _2986;
    vec4 _2789;
    vec4 _2811;
    float _2813;
    float _2817;
    float _2818;
    float _2819;
    float _2820;
    bool _2830;
    for (;;)
    {
        _2789 = cbMatDynParam._m0[0u];
        float _2791 = roundEven(_2789.y);
        bool _2792 = _2791 == 3.0;
        float _2793 = log2(_2779);
        float _2800 = exp2(_2793 * cbSceneParam._m0[78u].x) * _2650;
        float _2801 = exp2(_2793 * cbSceneParam._m0[78u].y) * _2651;
        float _2802 = exp2(_2793 * cbSceneParam._m0[78u].z) * _2652;
        float _2809 = _676 + (-0.5);
        _2811 = cbMtdParam._m0[1u];
        _2813 = _2811.y * _2809;
        float _2816 = (_2791 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2817 = _2816 * (_2792 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2773)));
        _2818 = _2816 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
        _2819 = _2816 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
        _2820 = _2809 * 0.999000012874603271484375;
        _2830 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2830)
        {
            if ((cbInstanceData._m0[_746 + 7u].x + _2820) < 0.5)
            {
                _2986 = true;
                break;
            }
        }
        uint _2927 = _747 + uint(_2789.w);
        if ((cbInstanceData._m0[_2927].w < 1.0) && ((cbInstanceData._m0[_2927].w + _2820) < 0.5))
        {
            _2986 = true;
            break;
        }
        if ((_2813 + 1.0) < _2811.x)
        {
            _2986 = true;
            break;
        }
        _2986 = false;
        break;
    }
    float _3191;
    if (_2986)
    {
        discard_state = true;
        _3191 = 0.0;
    }
    else
    {
        _3191 = cbInstanceData._m0[_2653].w;
    }
    SV_Target.x = _2817;
    SV_Target.y = _2818;
    SV_Target.z = _2819;
    SV_Target.w = _3191;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2653].w;
    discard_exit();
}


