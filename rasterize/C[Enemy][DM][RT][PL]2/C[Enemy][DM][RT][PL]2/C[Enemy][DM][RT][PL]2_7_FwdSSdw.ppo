#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    float _253 = log2(0.0);
    bool _256 = exp2(_253 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _257;
    float _259;
    float _261;
    if (_256)
    {
        _257 = cbMtdParam._m0[19u].x;
        _259 = cbMtdParam._m0[19u].y;
        _261 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _257 = cbMtdParam._m0[18u].x;
        _259 = cbMtdParam._m0[18u].y;
        _261 = cbMtdParam._m0[18u].z;
    }
    float _267;
    if (_256)
    {
        _267 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _267 = cbMtdParam._m0[20u].z;
    }
    float _273;
    float _275;
    if (_256)
    {
        _273 = cbMtdParam._m0[28u].z;
        _275 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _273 = cbMtdParam._m0[24u].x;
        _275 = cbMtdParam._m0[24u].y;
    }
    float _277 = _273 * TEXCOORD.x;
    float _278 = _275 * TEXCOORD.y;
    float _290 = floor(_267);
    vec4 _293 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _277) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _278) + cbTextureTilingScale._m0[8u].w, _290));
    vec4 _316 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = (((_257 * cbMtdParam._m0[20u].w) * _293.x) * cbMtdParam._m0[9u].x) * _316.x;
    float _329 = (((_259 * cbMtdParam._m0[20u].w) * _293.y) * cbMtdParam._m0[9u].y) * _316.y;
    float _333 = (((_261 * cbMtdParam._m0[20u].w) * _293.z) * cbMtdParam._m0[9u].z) * _316.z;
    vec4 _345 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _349 = _345.z;
    vec4 _363 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _277) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _278) + cbTextureTilingScale._m0[10u].w, _290));
    float _181[2];
    float _182[2];
    _181[0u] = cbMtdParam._m0[27u].z;
    _182[0u] = cbMtdParam._m0[27u].w;
    _181[1u] = cbMtdParam._m0[28u].x;
    _182[1u] = cbMtdParam._m0[28u].y;
    float _380 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _383 = uint(int(isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0))));
    float _389 = (_363.x + _345.w) + _182[_383];
    vec4 _407 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _277) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _278) + cbTextureTilingScale._m0[9u].w, _290));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3436 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _421 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    float _431 = (cbMtdParam._m0[21u].x * (((_349 * 2.0) * (_407.z + _181[_383])) - _349)) + _349;
    float _435 = (cbMtdParam._m0[21u].y * ((_345.x * 2.0) + (-1.0))) + _414;
    float _436 = (cbMtdParam._m0[21u].y * ((_345.y * 2.0) + (-1.0))) + _415;
    float _439 = fma(_421, _232, fma(_436, _224 * TANGENT.x, (_210 * _202) * _435));
    float _442 = fma(_421, _233, fma(_436, _224 * TANGENT.y, (_210 * _203) * _435));
    float _445 = fma(_421, _234, fma(_436, _224 * TANGENT.z, (_210 * _204) * _435));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _450 = _449 * _439;
    float _451 = _449 * _442;
    float _452 = _449 * _445;
    float _3447 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _453 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3469 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3480 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3491 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _457 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _473 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _524 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _514);
    float _525 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _514);
    float _526 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _514);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _531 = _524 * _530;
    float _532 = _525 * _530;
    float _533 = _526 * _530;
    float _539 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _540 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _542 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _544 = _542.w;
    float _565 = fma(_452, cbSceneParam._m0[5u].z, fma(_451, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _450));
    float _568 = fma(_452, cbSceneParam._m0[6u].z, fma(_451, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _450));
    float _571 = fma(_452, cbSceneParam._m0[7u].z, fma(_451, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _450));
    vec4 _573 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _584 = (((_573.y - _453) + (_573.w * _453)) * cbMtdParam._m0[3u].x) + _453;
    uint _597 = uint(roundEven(NORMAL.w)) * 13u;
    uint _600 = (_597 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _606 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_600].x;
    float _607 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_600].y;
    float _608 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_600].z;
    float _3502 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _3513 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    vec4 _612 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _617 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _628 = (((_617.x - _457) + (_617.w * _457)) * cbMtdParam._m0[3u].x) + _457;
    float _641 = (cbMtdParam._m0[3u].x * (((_609 * _544) - _609) + _612.x)) + _609;
    float _642 = (cbMtdParam._m0[3u].x * (((_610 * _544) - _610) + _612.y)) + _610;
    float _643 = (cbMtdParam._m0[3u].x * (((_611 * _544) - _611) + _612.z)) + _611;
    float _644 = 1.0 - _628;
    float _645 = _644 * _641;
    float _646 = _644 * _642;
    float _647 = _644 * _643;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _628;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _628;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _628;
    float _655 = _652 + 0.039999999105930328369140625;
    float _657 = _653 + 0.039999999105930328369140625;
    float _658 = _654 + 0.039999999105930328369140625;
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _539, cbSceneParam._m0[86u].y * _540));
    float _670 = _667.x * TEXCOORD_4;
    float _671 = dot(vec3(_450, _451, _452), vec3(_531, _532, _533));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _450) - _531;
    float _679 = (_674 * _451) - _532;
    float _680 = (_674 * _452) - _533;
    float _684 = abs(dot(vec3(_531, _532, _533), vec3(_450, _451, _452)));
    float _3535 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _686 = sqrt(_584);
    float _699 = exp2((_686 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_686 * 3.0));
    float _705 = (1.0 - _699) * ((_686 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _706 = _699 * _686;
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _775 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _779 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _804 = _734 + _450;
        float _805 = _738 + _451;
        float _806 = _742 + _452;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_450, _451, _452), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3583 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_450, _451, _452), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3616 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_450, _451, _452), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3649 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1091 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1095 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1118 = _734 + _450;
        float _1119 = _738 + _451;
        float _1120 = _742 + _452;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_450, _451, _452), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3712 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_450, _451, _452), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3745 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_450, _451, _452), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3778 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _678 * 0.5;
    float _1425 = _679 * 0.5;
    float _1426 = _680 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _584);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1556 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1559 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1587 = frontier_phi_22_20_ladder;
        }
        float _1812;
        if (_1556 > 0.0)
        {
            _1812 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1812 = frontier_phi_31_27_ladder;
        }
        float _2069;
        if (_1559 > 0.0)
        {
            _2069 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2069 = frontier_phi_43_38_ladder;
        }
        float _2071 = isnan(_1812) ? _1587 : (isnan(_1587) ? _1812 : min(_1587, _1812));
        float _2072 = isnan(_2069) ? _2071 : (isnan(_2071) ? _2069 : min(_2071, _2069));
        float _2076 = (_2072 * _1553) + _1542;
        float _2077 = (_2072 * _1556) + _1546;
        float _2078 = (_2072 * _1559) + _1550;
        float _2079 = _2072 * 9.9999997473787516355514526367188e-05;
        float _2081 = (-1.0) - _2079;
        float _2083 = _2079 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2078 > _2083) || ((_2078 < _2081) || ((_2077 > _2083) || ((_2077 < _2081) || ((_2076 < _2081) || (_2076 > _2083))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2078, cbModelParam._m0[9u].z, fma(_2077, cbModelParam._m0[9u].y, _2076 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2078, cbModelParam._m0[10u].z, fma(_2077, cbModelParam._m0[10u].y, _2076 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2078, cbModelParam._m0[11u].z, fma(_2077, cbModelParam._m0[11u].y, _2076 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_21_43_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_21_43_ladder_2;
        _1577 = frontier_phi_21_43_ladder_1;
        _1579 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1493);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _584);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1637 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1641 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1645 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1648 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1651 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1654 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1817;
        if (_1648 > 0.0)
        {
            _1817 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1817 = frontier_phi_33_29_ladder;
        }
        float _2096;
        if (_1651 > 0.0)
        {
            _2096 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2096 = frontier_phi_45_40_ladder;
        }
        float _2309;
        if (_1654 > 0.0)
        {
            _2309 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2309 = frontier_phi_54_51_ladder;
        }
        float _2311 = isnan(_2096) ? _1817 : (isnan(_1817) ? _2096 : min(_1817, _2096));
        float _2312 = isnan(_2309) ? _2311 : (isnan(_2311) ? _2309 : min(_2311, _2309));
        float _2316 = (_2312 * _1648) + _1637;
        float _2317 = (_2312 * _1651) + _1641;
        float _2318 = (_2312 * _1654) + _1645;
        float _2319 = _2312 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2319;
        float _2322 = _2319 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2318 > _2322) || ((_2318 < _2320) || ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 < _2320) || (_2316 > _2322))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2318, cbModelParam._m0[17u].z, fma(_2317, cbModelParam._m0[17u].y, _2316 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2318, cbModelParam._m0[18u].z, fma(_2317, cbModelParam._m0[18u].y, _2316 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2318, cbModelParam._m0[19u].z, fma(_2317, cbModelParam._m0[19u].y, _2316 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_30_54_ladder = _2534.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2534.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2534.x * cbModelParam._m0[1u].z;
        }
        _1673 = frontier_phi_30_54_ladder_2;
        _1675 = frontier_phi_30_54_ladder;
        _1677 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1584);
        _1673 = _1657.x * cbModelParam._m0[1u].z;
        _1675 = _1657.y * cbModelParam._m0[1u].z;
        _1677 = _1657.z * cbModelParam._m0[1u].z;
    }
    float _1690 = (((_705 * _655) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1673 - _1575)) + _1575);
    float _1692 = (((_705 * _657) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1675 - _1577)) + _1577);
    float _1694 = (((_705 * _658) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1677 - _1579)) + _1579);
    float _1697 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1690 * cbSceneParam._m0[91u].x));
    vec4 _1711 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_539, _540));
    float _1713 = _1711.w;
    float _1725 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1713);
    float _1726 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1713);
    float _1727 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1713);
    uvec4 _1731 = floatBitsToUint(cbInstanceData._m0[_597 + 5u]);
    uint _1733 = _1731.x * 14u;
    uint _1734 = _1733 + 13u;
    float _1741 = _670 + (-1.0);
    float _1746 = (cbLight._m0[_1734].x * _1741) + 1.0;
    float _1747 = (cbLight._m0[_1734].y * _1741) + 1.0;
    float _1748 = (cbLight._m0[_1734].z * _1741) + 1.0;
    float _1749 = (cbLight._m0[_1734].w * _1741) + 1.0;
    uint _1750 = _1733 + 5u;
    float _1756 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1760 = _1733 + 4u;
    float _1770 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1774 = _1733 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_450, _451, _452));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_450, _451, _452));
    float _3914 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3925 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1750].x * _1756) * _1795) + (((cbLight._m0[_1760].x * _1725) * _1770) * _1793);
    float _1803 = ((_1756 * cbLight._m0[_1750].y) * _1795) + (((cbLight._m0[_1760].y * _1726) * _1770) * _1793);
    float _1804 = ((_1756 * cbLight._m0[_1750].z) * _1795) + (((cbLight._m0[_1760].z * _1727) * _1770) * _1793);
    uvec4 _1809 = floatBitsToUint(cbLight._m0[_1733 + 12u]);
    bool _1811 = _1809.x == 0u;
    float _1822;
    float _1824;
    float _1826;
    if (_1811)
    {
        _1822 = _1802;
        _1824 = _1803;
        _1826 = _1804;
    }
    else
    {
        uint _1830 = _1733 + 6u;
        float _1846 = (dot(vec3(cbLight._m0[_1733 + 2u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _1847 = _1846 * _1846;
        float _3936 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1849 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1822 = (((cbLight._m0[_1830].x * 0.3183098733425140380859375) * _1848) * _1849) + _1802;
        _1824 = (((cbLight._m0[_1830].y * 0.3183098733425140380859375) * _1848) * _1849) + _1803;
        _1826 = (((cbLight._m0[_1830].z * 0.3183098733425140380859375) * _1848) * _1849) + _1804;
    }
    bool _1829 = _1809.y == 0u;
    float _1867;
    float _1869;
    float _1871;
    if (_1829)
    {
        _1867 = _1822;
        _1869 = _1824;
        _1871 = _1826;
    }
    else
    {
        uint _2040 = _1733 + 7u;
        float _2056 = (dot(vec3(cbLight._m0[_1733 + 3u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _2057 = _2056 * _2056;
        float _3952 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2058 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _2059 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1867 = (((cbLight._m0[_2040].x * 0.3183098733425140380859375) * _2058) * _2059) + _1822;
        _1869 = (((cbLight._m0[_2040].y * 0.3183098733425140380859375) * _2058) * _2059) + _1824;
        _1871 = (((cbLight._m0[_2040].z * 0.3183098733425140380859375) * _2058) * _2059) + _1826;
    }
    uint _1874 = _1733 + 8u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1733].w)) * _584) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1733].x + _531;
    float _1890 = cbLight._m0[_1733].y + _532;
    float _1891 = cbLight._m0[_1733].z + _533;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1733].xyz));
    float _3968 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _1903 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1904 = dot(vec3(_450, _451, _452), vec3(_1896, _1897, _1898));
    float _3990 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1896, _1897, _1898));
    float _4001 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1888 * _1888;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * 5.0);
    float _1925 = 0.959999978542327880859375 - _652;
    float _1927 = 0.959999978542327880859375 - _653;
    float _1928 = 0.959999978542327880859375 - _654;
    float _1935 = 1.0 - _1888;
    float _1946 = (0.5 / (((_1903 * ((_1902 * _1935) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _1935) + _1888) * _1902))) * _1902;
    float _4012 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    uint _1962 = _1733 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _584) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1774].x + _531;
    float _1976 = cbLight._m0[_1774].y + _532;
    float _1977 = cbLight._m0[_1774].z + _533;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1774].xyz));
    float _4023 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1989 = dot(vec3(_450, _451, _452), vec3(_1982, _1983, _1984));
    float _4034 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1982, _1983, _1984));
    float _4045 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * 5.0);
    float _2015 = 1.0 - _1974;
    float _2025 = (0.5 / (((_1903 * ((_1988 * _2015) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2015) + _1974) * _1988))) * _1988;
    float _4056 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2037 = (((((_2008 * _1925) + _655) * cbLight._m0[_1962].x) * _2027) * _1756) + ((((cbLight._m0[_1874].x * _1725) * ((_1924 * _1925) + _655)) * _1948) * _1770);
    float _2038 = (((((_2008 * _1927) + _657) * cbLight._m0[_1962].y) * _2027) * _1756) + ((((cbLight._m0[_1874].y * _1726) * ((_1924 * _1927) + _657)) * _1948) * _1770);
    float _2039 = (((((_2008 * _1928) + _658) * cbLight._m0[_1962].z) * _2027) * _1756) + ((((cbLight._m0[_1874].z * _1727) * ((_1924 * _1928) + _658)) * _1948) * _1770);
    float _2101;
    float _2103;
    float _2105;
    if (_1811)
    {
        _2101 = _2037;
        _2103 = _2038;
        _2105 = _2039;
    }
    else
    {
        uint _2107 = _1733 + 2u;
        uint _2111 = _1733 + 10u;
        float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _584) * 0.949999988079071044921875);
        float _2126 = _2125 * _2125;
        float _2127 = cbLight._m0[_2107].x + _531;
        float _2128 = cbLight._m0[_2107].y + _532;
        float _2129 = cbLight._m0[_2107].z + _533;
        float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
        float _2134 = _2133 * _2127;
        float _2135 = _2133 * _2128;
        float _2136 = _2133 * _2129;
        float _2137 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2107].xyz));
        float _4067 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2141 = dot(vec3(_450, _451, _452), vec3(_2134, _2135, _2136));
        float _4078 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2145 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2134, _2135, _2136));
        float _4089 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2149 = _2126 * _2126;
        float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
        float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * 5.0);
        float _2167 = 1.0 - _2126;
        float _2177 = (0.5 / (((_1903 * ((_2140 * _2167) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2167) + _2126) * _2140))) * _2140;
        float _4100 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2179 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
        float _2180 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2101 = (((((_2160 * _1925) + _655) * cbLight._m0[_2111].x) * _2179) * _2180) + _2037;
        _2103 = (((((_2160 * _1927) + _657) * cbLight._m0[_2111].y) * _2179) * _2180) + _2038;
        _2105 = (((((_2160 * _1928) + _658) * cbLight._m0[_2111].z) * _2179) * _2180) + _2039;
    }
    float _2215;
    float _2217;
    float _2219;
    if (_1829)
    {
        _2215 = _2101;
        _2217 = _2103;
        _2219 = _2105;
    }
    else
    {
        uint _2226 = _1733 + 3u;
        uint _2230 = _1733 + 11u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _584) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _531;
        float _2247 = cbLight._m0[_2226].y + _532;
        float _2248 = cbLight._m0[_2226].z + _533;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2226].xyz));
        float _4116 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2260 = dot(vec3(_450, _451, _452), vec3(_2253, _2254, _2255));
        float _4127 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4138 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0);
        float _2286 = 1.0 - _2245;
        float _2296 = (0.5 / (((_1903 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2286) + _2245) * _2259))) * _2259;
        float _4149 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2215 = (((((_2279 * _1925) + _655) * cbLight._m0[_2230].x) * _2298) * _2299) + _2101;
        _2217 = (((((_2279 * _1927) + _657) * cbLight._m0[_2230].y) * _2298) * _2299) + _2103;
        _2219 = (((((_2279 * _1928) + _658) * cbLight._m0[_2230].z) * _2298) * _2299) + _2105;
    }
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_1731.y == 0u)
    {
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2374;
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2374;
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2374;
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.x;
        uint _2401 = uint((float(_2389.y) * floor(float(uint(cbSceneParam._m0[85u].y * _540) / _2390))) + floor(float(uint(cbSceneParam._m0[85u].x * _539) / _2390)));
        float _2411 = (log2(_2377 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2412 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        uint _2415 = uint(isnan(14.0) ? _2412 : (isnan(_2412) ? 14.0 : min(_2412, 14.0)));
        uvec4 _2420 = texelFetch(g_lightClusterGridBuffer, int(((_2415 << 2u) + (_2401 << 6u)) >> 2u));
        uint _2421 = _2420.x;
        uint _2422 = _2389.z;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((((1u << ((_2422 >> 4u) & 15u)) + 4294967295u) & _2421) == 0u) || ((_2422 & 240u) == 0u))
        {
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
        }
        else
        {
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            uint _2689 = 0u;
            uint _2698;
            bool _2699;
            for (;;)
            {
                _2698 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2689 << 2u)) >> 2u)).x;
                _2699 = _2698 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2699)
                {
                    frontier_phi_69_pred = _2688;
                    frontier_phi_69_pred_1 = _2687;
                    frontier_phi_69_pred_2 = _2686;
                    frontier_phi_69_pred_3 = _2684;
                    frontier_phi_69_pred_4 = _2683;
                    frontier_phi_69_pred_5 = _2685;
                }
                else
                {
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    uint _2813;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2698;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    for (;;)
                    {
                        uint _2817 = uint(findLSB(_2813)) + (_2689 << 5u);
                        uint _2814 = (_2813 + 4294967295u) & _2813;
                        uint _2819 = _2817 * 48u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2839 = (_2817 * 48u) + 4u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 3u)).x));
                        uint _2858 = (_2817 * 48u) + 8u;
                        vec3 _2869 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x));
                        float _2873 = _2833.x - _2375;
                        float _2874 = _2833.y - _2376;
                        float _2875 = _2833.z - _2377;
                        float _2876 = dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875));
                        float _2879 = inversesqrt(_2876);
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2883 = dot(vec3(_565, _568, _571), vec3(_2880, _2881, _2882));
                        float _2888 = 1.0 - (_2876 * _2833.w);
                        float _4175 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2890 = sqrt(_2876) * _2852.w;
                        float _2893 = 1.39999997615814208984375 / (_2890 + 1.39999997615814208984375);
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2883) + _2894;
                        float _2900 = _2890 * _2890;
                        float _2904 = ((isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))) * _2889) / ((_2900 * 0.699999988079071044921875) + 1.0);
                        float _2908 = (-0.0) - _2375;
                        float _2909 = (-0.0) - _2376;
                        float _2910 = (-0.0) - _2377;
                        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                        float _2915 = _2914 * _2908;
                        float _2916 = _2914 * _2909;
                        float _2917 = _2914 * _2910;
                        float _2925 = exp2(log2(1.0 / ((_2900 * 3.5) + 5.0)) * 0.25);
                        float _2926 = 1.0 - _686;
                        float _2933 = sqrt(1.0 - ((1.0 - (_2926 * _2926)) * (1.0 - (_2925 * _2925))));
                        float _2934 = _2933 * _2933;
                        float _2935 = _2934 * _2934;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2946 = dot(vec3(_565, _568, _571), vec3(_2915, _2916, _2917));
                        float _4191 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2950 = dot(vec3(_565, _568, _571), vec3(_2942 * _2936, _2942 * _2937, _2942 * _2938));
                        float _4202 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2957 = ((_2953 * _2953) * (_2935 + (-1.0))) + 1.0;
                        float _2958 = _2893 * _2934;
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2883) + _2959;
                        float _4213 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2964 = 1.0 - _2934;
                        float _2974 = (0.5 / (((_2963 * ((_2949 * _2964) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2934) * _2949))) * _2963;
                        float _4224 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2985 = (((_2935 * 3.1415927410125732421875) * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) / ((_2957 * _2957) * ((_2900 * 2.1991131305694580078125) + 3.141590118408203125))) * _2889;
                        _2742 = (_2904 * _2852.x) + _2810;
                        _2743 = (_2904 * _2852.y) + _2811;
                        _2744 = (_2904 * _2852.z) + _2812;
                        _2739 = (_2985 * _2869.x) + _2807;
                        _2740 = (_2985 * _2869.y) + _2808;
                        _2741 = (_2985 * _2869.z) + _2809;
                        if (_2814 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2814;
                        }
                    }
                    frontier_phi_69_pred = _2744;
                    frontier_phi_69_pred_1 = _2743;
                    frontier_phi_69_pred_2 = _2742;
                    frontier_phi_69_pred_3 = _2740;
                    frontier_phi_69_pred_4 = _2739;
                    frontier_phi_69_pred_5 = _2741;
                }
                _2550 = frontier_phi_69_pred;
                _2548 = frontier_phi_69_pred_1;
                _2546 = frontier_phi_69_pred_2;
                _2542 = frontier_phi_69_pred_3;
                _2540 = frontier_phi_69_pred_4;
                _2544 = frontier_phi_69_pred_5;
                uint _2690 = _2689 + 1u;
                if (_2690 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2683 = _2540;
                    _2684 = _2542;
                    _2685 = _2544;
                    _2686 = _2546;
                    _2687 = _2548;
                    _2688 = _2550;
                    _2689 = _2690;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
        }
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.z;
        uint _2556 = (_2554 >> 8u) & 15u;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((4294967295u << _2556) & _2421) == 0u)
        {
            _2651 = _2539;
            _2653 = _2541;
            _2655 = _2543;
            _2657 = _2545;
            _2659 = _2547;
            _2661 = _2549;
        }
        else
        {
            float _2676 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
            float _2677 = _2676 * _2375;
            float _2678 = _2676 * _2376;
            float _2679 = _2676 * _2377;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2556 < ((_2554 >> 12u) & 15u))
            {
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2790 = _2539;
                float _2791 = _2541;
                float _2792 = _2543;
                float _2793 = _2545;
                float _2794 = _2547;
                float _2795 = _2549;
                uint _2796 = _2556;
                uint _2805;
                bool _2806;
                for (;;)
                {
                    _2805 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                    _2806 = _2805 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2806)
                    {
                        frontier_phi_75_pred = _2792;
                        frontier_phi_75_pred_1 = _2791;
                        frontier_phi_75_pred_2 = _2790;
                        frontier_phi_75_pred_3 = _2795;
                        frontier_phi_75_pred_4 = _2794;
                        frontier_phi_75_pred_5 = _2793;
                    }
                    else
                    {
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        uint _3009 = _2805;
                        uint _3010;
                        vec4 _3035;
                        float _3036;
                        vec4 _3051;
                        vec3 _3063;
                        vec4 _3079;
                        vec4 _3094;
                        float _3140;
                        bool _3141;
                        for (;;)
                        {
                            uint _3020 = ((_2796 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3009));
                            _3010 = (_3009 + 4294967295u) & _3009;
                            uint _3022 = _3020 * 40u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3036 = _3035.w;
                            uint _3038 = (_3020 * 40u) + 4u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_3020 * 40u) + 8u;
                            _3063 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x));
                            uint _3066 = (_3020 * 40u) + 16u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3081 = (_3020 * 40u) + 20u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3020 * 40u) + 24u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3115 = (_3020 * 40u) + 28u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3140 = fma(_2377, _3128.z, fma(_2376, _3128.y, _3128.x * _2375)) + _3128.w;
                            _3141 = !((fma(_2377, _3109.z, fma(_2376, _3109.y, _3109.x * _2375)) + _3109.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3141)
                            {
                                float _3168 = _3035.x - _2375;
                                float _3169 = _3035.y - _2376;
                                float _3170 = _3035.z - _2377;
                                float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                                float _3174 = inversesqrt(_3171);
                                float _3175 = _3174 * _3168;
                                float _3176 = _3174 * _3169;
                                float _3177 = _3174 * _3170;
                                float _3181 = 1.0 - (_3171 / (_3036 * _3036));
                                float _4235 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3186 = sqrt(_3171) * _3051.w;
                                float _3188 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                                float _3189 = _3188 * _3188;
                                float _3192 = ((1.0 - _3189) * dot(vec3(_3175, _3176, _3177), vec3(_565, _568, _571))) + _3189;
                                float _3195 = _3186 * _3186;
                                float _3199 = (fma(_2377, _3079.z, fma(_2376, _3079.y, _3079.x * _2375)) + _3079.w) / _3140;
                                float _3200 = (fma(_2377, _3094.z, fma(_2376, _3094.y, _3094.x * _2375)) + _3094.w) / _3140;
                                float _3204 = 1.0 - dot(vec2(_3199, _3200), vec2(_3199, _3200));
                                float _4251 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3206 = _3205 * (((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3182) / ((_3195 * 0.699999988079071044921875) + 1.0));
                                float _3218 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                                float _3219 = 1.0 - _686;
                                float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                                float _3227 = _3226 * _3226;
                                float _3228 = _3227 * _3227;
                                float _3229 = _3175 - _2677;
                                float _3230 = _3176 - _2678;
                                float _3231 = _3177 - _2679;
                                float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                                float _3239 = dot(vec3(_565, _568, _571), vec3((-0.0) - _2677, (-0.0) - _2678, (-0.0) - _2679));
                                float _4262 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3243 = dot(vec3(_565, _568, _571), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                                float _4273 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                                float _3251 = _3188 * _3227;
                                float _3252 = _3251 * _3251;
                                float _3258 = ((1.0 - _3252) * dot(vec3(_565, _568, _571), vec3(_3175, _3176, _3177))) + _3252;
                                float _4284 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3260 = 1.0 - _3227;
                                float _3270 = (0.5 / (((_3259 * ((_3242 * _3260) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3227) * _3242))) * _3259;
                                float _4295 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3280 = (_3205 * _3182) * (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) / ((_3250 * _3250) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3280 * _3063.z;
                                frontier_phi_81_pred_1 = _3280 * _3063.y;
                                frontier_phi_81_pred_2 = _3280 * _3063.x;
                                frontier_phi_81_pred_3 = _3206 * _3051.z;
                                frontier_phi_81_pred_4 = _3206 * _3051.y;
                                frontier_phi_81_pred_5 = _3206 * _3051.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_81_pred;
                            _3285 = frontier_phi_81_pred_1;
                            _3284 = frontier_phi_81_pred_2;
                            _3289 = frontier_phi_81_pred_3;
                            _3288 = frontier_phi_81_pred_4;
                            _3287 = frontier_phi_81_pred_5;
                            _2993 = _3287 + _3006;
                            _2994 = _3288 + _3007;
                            _2995 = _3289 + _3008;
                            _2990 = _3284 + _3003;
                            _2991 = _3285 + _3004;
                            _2992 = _3286 + _3005;
                            if (_3010 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _3010;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2992;
                        frontier_phi_75_pred_1 = _2991;
                        frontier_phi_75_pred_2 = _2990;
                        frontier_phi_75_pred_3 = _2995;
                        frontier_phi_75_pred_4 = _2994;
                        frontier_phi_75_pred_5 = _2993;
                    }
                    _2656 = frontier_phi_75_pred;
                    _2654 = frontier_phi_75_pred_1;
                    _2652 = frontier_phi_75_pred_2;
                    _2662 = frontier_phi_75_pred_3;
                    _2660 = frontier_phi_75_pred_4;
                    _2658 = frontier_phi_75_pred_5;
                    uint _2797 = _2796 + 1u;
                    if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2790 = _2652;
                        _2791 = _2654;
                        _2792 = _2656;
                        _2793 = _2658;
                        _2794 = _2660;
                        _2795 = _2662;
                        _2796 = _2797;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2660;
                frontier_phi_63_64_ladder_1 = _2658;
                frontier_phi_63_64_ladder_2 = _2656;
                frontier_phi_63_64_ladder_3 = _2662;
                frontier_phi_63_64_ladder_4 = _2654;
                frontier_phi_63_64_ladder_5 = _2652;
            }
            else
            {
                frontier_phi_63_64_ladder = _2547;
                frontier_phi_63_64_ladder_1 = _2545;
                frontier_phi_63_64_ladder_2 = _2543;
                frontier_phi_63_64_ladder_3 = _2549;
                frontier_phi_63_64_ladder_4 = _2541;
                frontier_phi_63_64_ladder_5 = _2539;
            }
            _2651 = frontier_phi_63_64_ladder_5;
            _2653 = frontier_phi_63_64_ladder_4;
            _2655 = frontier_phi_63_64_ladder_2;
            _2657 = frontier_phi_63_64_ladder_1;
            _2659 = frontier_phi_63_64_ladder;
            _2661 = frontier_phi_63_64_ladder_3;
        }
        float _2666 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2433 = (_2666 * _2657) + _1867;
        _2435 = (_2666 * _2659) + _1869;
        _2437 = (_2666 * _2661) + _1871;
        _2439 = ((_2651 * _655) * _2666) + _2215;
        _2441 = ((_2653 * _657) * _2666) + _2217;
        _2443 = ((_2655 * _658) * _2666) + _2219;
    }
    else
    {
        _2433 = _1867;
        _2435 = _1869;
        _2437 = _1871;
        _2439 = _2215;
        _2441 = _2217;
        _2443 = _2219;
    }
    vec4 _2449 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4311 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4322 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4333 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _2473 = (((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2433 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _670))) + ((_2439 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + (_2449.x * cbMtdParam._m0[3u].x);
    float _2475 = ((_2449.y * cbMtdParam._m0[3u].x) + ((_2441 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2435 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _670)));
    float _2477 = ((_2449.z * cbMtdParam._m0[3u].x) + ((_2443 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2437 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _670)));
    uint _2481 = _597 + 6u;
    float _2489 = _539 / cbSceneParam._m0[86u].x;
    float _2490 = _540 / cbSceneParam._m0[86u].y;
    vec4 _2504 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, (log2((isnan(cbSceneParam._m0[77u].w) ? _473 : (isnan(_473) ? cbSceneParam._m0[77u].w : min(_473, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2506 = _2504.x;
    float _2507 = _2504.y;
    float _2508 = _2504.z;
    float _2509 = _2504.w;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_473 > cbSceneParam._m0[78u].w)
    {
        float _2564 = isnan(_473) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _473 : min(cbSceneParam._m0[80u].w, _473));
        float _2565 = _2564 / _473;
        float _2576 = _2565 * _524;
        float _2577 = _525 * _2565;
        float _2578 = (-0.0) - _2577;
        float _2579 = _2565 * _526;
        float _2581 = (cbSceneParam._m0[77u].w * _2578) / _2564;
        float _2582 = _2581 + cbSceneParam._m0[79u].w;
        float _2583 = cbSceneParam._m0[79u].w - _2577;
        float _2589 = sqrt(((_2576 * _2576) + (_2577 * _2577)) + (_2579 * _2579));
        float _2592 = (1.0 - (cbSceneParam._m0[77u].w / _2564)) * _2589;
        float _2597 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2599 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2752;
        if (abs((_2578 - _2581) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2752 = ((((_2582 > 0.0) ? exp2(_2597 * _2582) : (2.0 - exp2(_2599 * _2582))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2592;
        }
        else
        {
            float _2712 = 1.0 / cbSceneParam._m0[80u].x;
            float _2713 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : max(_2582, _2583));
            float _2714 = isnan(_2583) ? _2582 : (isnan(_2582) ? _2583 : min(_2582, _2583));
            float _2723 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : min(_2713, 0.0));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            _2752 = ((abs(_2589 / _2578) * cbSceneParam._m0[80u].y) * ((((_2723 - _2724) * 2.0) - ((exp2(_2597 * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0)))) - exp2(_2597 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0))))) * _2712)) - ((exp2(_2599 * _2723) - exp2(_2599 * _2724)) * _2712))) + (_2592 * cbSceneParam._m0[80u].z);
        }
        vec4 _2754 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, 1.0), 0.0);
        float _2763 = exp2((_2752 * (-1.44269502162933349609375)) * (1.0 - _2754.w));
        float _2764 = log2(_2763);
        float _2780 = log2(_2509);
        _2601 = (exp2(_2780 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].x)) * _2754.x) / cbSceneParam._m0[78u].x)) + _2506;
        _2603 = (exp2(_2780 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].y)) * _2754.y) / cbSceneParam._m0[78u].y)) + _2507;
        _2605 = (exp2(_2780 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].z)) * _2754.z) / cbSceneParam._m0[78u].z)) + _2508;
        _2607 = _2763 * _2509;
    }
    else
    {
        _2601 = _2506;
        _2603 = _2507;
        _2605 = _2508;
        _2607 = _2509;
    }
    float _2619 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2620 = _2619 == 3.0;
    float _2621 = log2(_2607);
    float _2628 = exp2(_2621 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)));
    float _2629 = exp2(_2621 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0)));
    float _2630 = exp2(_2621 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)));
    float _2639 = (_2619 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2639 * (_2620 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.y = _2639 * (_2620 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2603)));
    SV_Target.z = _2639 * (_2620 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.w = cbInstanceData._m0[_2481].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2481].w;
}


