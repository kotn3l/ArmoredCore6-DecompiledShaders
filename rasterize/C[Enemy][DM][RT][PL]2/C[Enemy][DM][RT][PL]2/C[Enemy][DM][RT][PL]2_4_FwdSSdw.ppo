#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1067;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _255 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _268 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_255 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _279 = exp2(log2(_268.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _280;
    float _282;
    float _284;
    if (_279)
    {
        _280 = cbMtdParam._m0[19u].x;
        _282 = cbMtdParam._m0[19u].y;
        _284 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _280 = cbMtdParam._m0[18u].x;
        _282 = cbMtdParam._m0[18u].y;
        _284 = cbMtdParam._m0[18u].z;
    }
    float _290;
    if (_279)
    {
        _290 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _290 = cbMtdParam._m0[20u].z;
    }
    float _296;
    float _298;
    if (_279)
    {
        _296 = cbMtdParam._m0[28u].z;
        _298 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _296 = cbMtdParam._m0[24u].x;
        _298 = cbMtdParam._m0[24u].y;
    }
    float _300 = _296 * TEXCOORD.x;
    float _301 = _298 * TEXCOORD.y;
    float _313 = floor(_290);
    vec4 _316 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _300) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _301) + cbTextureTilingScale._m0[8u].w, _313));
    vec4 _338 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    float _346 = (((_280 * cbMtdParam._m0[20u].w) * _316.x) * cbMtdParam._m0[9u].x) * _338.x;
    float _350 = (((_282 * cbMtdParam._m0[20u].w) * _316.y) * cbMtdParam._m0[9u].y) * _338.y;
    float _354 = (((_284 * cbMtdParam._m0[20u].w) * _316.z) * cbMtdParam._m0[9u].z) * _338.z;
    vec4 _366 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _370 = _366.z;
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[27u].z;
    _184[0u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _184[1u] = cbMtdParam._m0[28u].y;
    float _401 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    uint _404 = uint(int(isnan(1.0) ? _401 : (isnan(_401) ? 1.0 : min(_401, 1.0))));
    float _410 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _300) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _301) + cbTextureTilingScale._m0[10u].w, _313)).x + _366.w) + _184[_404];
    vec4 _428 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w, _313));
    float _435 = (_428.x * 2.0) + (-1.0);
    float _436 = (_428.y * 2.0) + (-1.0);
    float _437 = dot(vec2(_435, _436), vec2(_435, _436));
    float _3456 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))));
    float _451 = (cbMtdParam._m0[21u].x * (((_370 * 2.0) * (_428.z + _183[_404])) - _370)) + _370;
    float _455 = (cbMtdParam._m0[21u].y * ((_366.x * 2.0) + (-1.0))) + _435;
    float _456 = (cbMtdParam._m0[21u].y * ((_366.y * 2.0) + (-1.0))) + _436;
    float _459 = fma(_442, _234, fma(_456, _226 * TANGENT.x, (_212 * _204) * _455));
    float _462 = fma(_442, _235, fma(_456, _226 * TANGENT.y, (_212 * _205) * _455));
    float _465 = fma(_442, _236, fma(_456, _226 * TANGENT.z, (_212 * _206) * _455));
    float _469 = inversesqrt(dot(vec3(_459, _462, _465), vec3(_459, _462, _465)));
    float _470 = _469 * _459;
    float _471 = _469 * _462;
    float _472 = _469 * _465;
    float _3467 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _473 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3489 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3500 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3511 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _477 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _493 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _544 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _534);
    float _545 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _534);
    float _546 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _534);
    float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
    float _551 = _544 * _550;
    float _552 = _545 * _550;
    float _553 = _546 * _550;
    float _559 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _560 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _562 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _564 = _562.w;
    float _585 = fma(_472, cbSceneParam._m0[5u].z, fma(_471, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _470));
    float _588 = fma(_472, cbSceneParam._m0[6u].z, fma(_471, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _470));
    float _591 = fma(_472, cbSceneParam._m0[7u].z, fma(_471, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _470));
    vec4 _593 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _604 = (((_593.y - _473) + (_593.w * _473)) * cbMtdParam._m0[3u].x) + _473;
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _620 = (_617 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_620].z;
    float _3522 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    vec4 _632 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _637 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _648 = (((_637.x - _477) + (_637.w * _477)) * cbMtdParam._m0[3u].x) + _477;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _564) - _629) + _632.x)) + _629;
    float _662 = (cbMtdParam._m0[3u].x * (((_630 * _564) - _630) + _632.y)) + _630;
    float _663 = (cbMtdParam._m0[3u].x * (((_631 * _564) - _631) + _632.z)) + _631;
    float _664 = 1.0 - _648;
    float _665 = _664 * _661;
    float _666 = _664 * _662;
    float _667 = _664 * _663;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _648;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _648;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _648;
    float _675 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    float _678 = _674 + 0.039999999105930328369140625;
    vec4 _687 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _559, cbSceneParam._m0[86u].y * _560));
    float _690 = _687.x * TEXCOORD_4;
    float _691 = dot(vec3(_470, _471, _472), vec3(_551, _552, _553));
    float _694 = _691 * 2.0;
    float _698 = (_694 * _470) - _551;
    float _699 = (_694 * _471) - _552;
    float _700 = (_694 * _472) - _553;
    float _704 = abs(dot(vec3(_551, _552, _553), vec3(_470, _471, _472)));
    float _3555 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _706 = sqrt(_604);
    float _719 = exp2((_706 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_706 * 3.0));
    float _725 = (1.0 - _719) * ((_706 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _726 = _719 * _706;
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1066;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _791 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _795 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _799 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _824 = _754 + _470;
        float _825 = _758 + _471;
        float _826 = _762 + _472;
        float _836 = fma(_826, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824)) - _791;
        float _837 = fma(_826, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824)) - _795;
        float _838 = fma(_826, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824)) - _799;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_791 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_795 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[34u].z) + ((((((_799 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _894 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_860.x + (-0.5));
        float _896 = _894 * (_860.y + (-0.5));
        float _897 = _894 * (_860.z + (-0.5));
        float _904 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_867.x + (-0.5));
        float _906 = _904 * (_867.y + (-0.5));
        float _907 = _904 * (_867.z + (-0.5));
        float _914 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_874.x + (-0.5));
        float _916 = _914 * (_874.y + (-0.5));
        float _917 = _914 * (_874.z + (-0.5));
        float _924 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_881.x + (-0.5));
        float _926 = _924 * (_881.y + (-0.5));
        float _927 = _924 * (_881.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _948 = (dot(vec3(_470, _471, _472), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _958 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3603 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_960 + 1.0))) + _965) * _928;
        float _975 = _896 * 0.5;
        float _976 = _906 * 0.5;
        float _977 = _916 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_470, _471, _472), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3636 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1002 + 1.0))) + _1007) * _929;
        float _1017 = _897 * 0.5;
        float _1018 = _907 * 0.5;
        float _1019 = _917 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_470, _471, _472), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3669 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1044 + 1.0))) + _1049) * _930;
        _1066 = _897;
        _1068 = _896;
        _1069 = _895;
        _1070 = _907;
        _1071 = _906;
        _1072 = _905;
        _1073 = _917;
        _1074 = _916;
        _1075 = _915;
        _1076 = _930;
        _1077 = _929;
        _1078 = _928;
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _1067;
        _1068 = _1067;
        _1069 = _1067;
        _1070 = _1067;
        _1071 = _1067;
        _1072 = _1067;
        _1073 = _1067;
        _1074 = _1067;
        _1075 = _1067;
        _1076 = _1067;
        _1077 = _1067;
        _1078 = _1067;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1107 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1111 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1115 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1138 = _754 + _470;
        float _1139 = _758 + _471;
        float _1140 = _762 + _472;
        float _1150 = fma(_1140, cbModelParam._m0[30u].z, fma(_1139, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138)) - _1107;
        float _1151 = fma(_1140, cbModelParam._m0[31u].z, fma(_1139, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138)) - _1111;
        float _1152 = fma(_1140, cbModelParam._m0[32u].z, fma(_1139, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138)) - _1115;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1107 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1111 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[35u].z) + ((((((_1115 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1206 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1173.x + (-0.5));
        float _1208 = _1206 * (_1173.y + (-0.5));
        float _1209 = _1206 * (_1173.z + (-0.5));
        float _1216 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1180.x + (-0.5));
        float _1218 = _1216 * (_1180.y + (-0.5));
        float _1219 = _1216 * (_1180.z + (-0.5));
        float _1226 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1187.x + (-0.5));
        float _1228 = _1226 * (_1187.y + (-0.5));
        float _1229 = _1226 * (_1187.z + (-0.5));
        float _1236 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1194.x + (-0.5));
        float _1238 = _1236 * (_1194.y + (-0.5));
        float _1239 = _1236 * (_1194.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_470, _471, _472), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3732 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1270 + 1.0))) + _1275) * _1240;
        float _1285 = _1208 * 0.5;
        float _1286 = _1218 * 0.5;
        float _1287 = _1228 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_470, _471, _472), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3765 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1312 + 1.0))) + _1317) * _1241;
        float _1327 = _1209 * 0.5;
        float _1328 = _1219 * 0.5;
        float _1329 = _1229 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_470, _471, _472), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3798 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1354 + 1.0))) + _1359) * _1242;
        _1376 = _1209;
        _1377 = _1208;
        _1378 = _1207;
        _1379 = _1219;
        _1380 = _1218;
        _1381 = _1217;
        _1382 = _1229;
        _1383 = _1228;
        _1384 = _1227;
        _1385 = _1242;
        _1386 = _1241;
        _1387 = _1240;
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
    }
    else
    {
        _1376 = _1067;
        _1377 = _1067;
        _1378 = _1067;
        _1379 = _1067;
        _1380 = _1067;
        _1381 = _1067;
        _1382 = _1067;
        _1383 = _1067;
        _1384 = _1067;
        _1385 = _1067;
        _1386 = _1067;
        _1387 = _1067;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1080)) + _1080;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1081)) + _1081;
    float _1423 = fma(_1402, cbSceneParam._m0[89u].z, fma(_1401, cbSceneParam._m0[89u].y, _1400 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1402, cbSceneParam._m0[90u].z, fma(_1401, cbSceneParam._m0[90u].y, _1400 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1402, cbSceneParam._m0[91u].z, fma(_1401, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1400));
    float _1444 = _698 * 0.5;
    float _1445 = _699 * 0.5;
    float _1446 = _700 * 0.5;
    float _1447 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1450 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1453 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1487;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1460 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1066, _1070, _1073, _1076));
        float _1464 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1468 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1475 = dot(vec4(cbModelParam._m0[39u]), vec4(_1444, _1445, _1446, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1475) ? 0.0 : (isnan(0.0) ? _1475 : max(0.0, _1475))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1498;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1489 = dot(vec4(cbModelParam._m0[40u]), vec4(_1444, _1445, _1446, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1502 = (_1498 * cbModelParam._m0[1u].x) + (_1487 * (1.0 - cbModelParam._m0[1u].x));
    float _1512 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1513 = isnan(_1512) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1512 : min(cbModelParam._m0[25u].z, _1512));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1562 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1566 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1570 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1573 = fma(_700, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698));
        float _1576 = fma(_700, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698));
        float _1579 = fma(_700, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698));
        float _1607;
        if (_1573 > 0.0)
        {
            _1607 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1607 = frontier_phi_22_20_ladder;
        }
        float _1832;
        if (_1576 > 0.0)
        {
            _1832 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1832 = frontier_phi_31_27_ladder;
        }
        float _2089;
        if (_1579 > 0.0)
        {
            _2089 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2089 = frontier_phi_43_38_ladder;
        }
        float _2091 = isnan(_1832) ? _1607 : (isnan(_1607) ? _1832 : min(_1607, _1832));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1573) + _1562;
        float _2097 = (_2092 * _1576) + _1566;
        float _2098 = (_2092 * _1579) + _1570;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2226 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1513);
            frontier_phi_21_43_ladder = _2226.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2226.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2226.x * cbModelParam._m0[1u].y;
        }
        _1595 = frontier_phi_21_43_ladder_2;
        _1597 = frontier_phi_21_43_ladder_1;
        _1599 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_698, _699, _700), _1513);
        _1595 = _1583.x * cbModelParam._m0[1u].y;
        _1597 = _1583.y * cbModelParam._m0[1u].y;
        _1599 = _1583.z * cbModelParam._m0[1u].y;
    }
    float _1603 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1603 : min(cbModelParam._m0[25u].w, _1603));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1657 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1661 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1665 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1668 = fma(_700, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698));
        float _1671 = fma(_700, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698));
        float _1674 = fma(_700, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698));
        float _1837;
        if (_1668 > 0.0)
        {
            _1837 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1837 = frontier_phi_33_29_ladder;
        }
        float _2116;
        if (_1671 > 0.0)
        {
            _2116 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2116 = frontier_phi_45_40_ladder;
        }
        float _2329;
        if (_1674 > 0.0)
        {
            _2329 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2329 = frontier_phi_54_51_ladder;
        }
        float _2331 = isnan(_2116) ? _1837 : (isnan(_1837) ? _2116 : min(_1837, _2116));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1668) + _1657;
        float _2337 = (_2332 * _1671) + _1661;
        float _2338 = (_2332 * _1674) + _1665;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2339;
        float _2342 = _2339 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2338 > _2342) || ((_2338 < _2340) || ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 < _2340) || (_2336 > _2342))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2338, cbModelParam._m0[17u].z, fma(_2337, cbModelParam._m0[17u].y, _2336 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2338, cbModelParam._m0[18u].z, fma(_2337, cbModelParam._m0[18u].y, _2336 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2338, cbModelParam._m0[19u].z, fma(_2337, cbModelParam._m0[19u].y, _2336 * cbModelParam._m0[19u].x))), _1604);
            frontier_phi_30_54_ladder = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1693 = frontier_phi_30_54_ladder_2;
        _1695 = frontier_phi_30_54_ladder;
        _1697 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_698, _699, _700), _1604);
        _1693 = _1677.x * cbModelParam._m0[1u].z;
        _1695 = _1677.y * cbModelParam._m0[1u].z;
        _1697 = _1677.z * cbModelParam._m0[1u].z;
    }
    float _1710 = (((_725 * _675) + _726) * _690) * ((cbModelParam._m0[1u].w * (_1693 - _1595)) + _1595);
    float _1712 = (((_725 * _677) + _726) * _690) * ((cbModelParam._m0[1u].w * (_1695 - _1597)) + _1597);
    float _1714 = (((_725 * _678) + _726) * _690) * ((cbModelParam._m0[1u].w * (_1697 - _1599)) + _1599);
    float _1717 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, _1710 * cbSceneParam._m0[91u].x));
    vec4 _1731 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_559, _560));
    float _1733 = _1731.w;
    float _1745 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1733);
    float _1746 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1733);
    float _1747 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1733);
    uvec4 _1751 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1753 = _1751.x * 14u;
    uint _1754 = _1753 + 13u;
    float _1761 = _690 + (-1.0);
    float _1766 = (cbLight._m0[_1754].x * _1761) + 1.0;
    float _1767 = (cbLight._m0[_1754].y * _1761) + 1.0;
    float _1768 = (cbLight._m0[_1754].z * _1761) + 1.0;
    float _1769 = (cbLight._m0[_1754].w * _1761) + 1.0;
    uint _1770 = _1753 + 5u;
    float _1776 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1780 = _1753 + 4u;
    float _1790 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1794 = _1753 | 1u;
    float _1805 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_470, _471, _472));
    float _1808 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_470, _471, _472));
    float _3934 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _3945 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1813 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1815 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1822 = ((cbLight._m0[_1770].x * _1776) * _1815) + (((cbLight._m0[_1780].x * _1745) * _1790) * _1813);
    float _1823 = ((_1776 * cbLight._m0[_1770].y) * _1815) + (((cbLight._m0[_1780].y * _1746) * _1790) * _1813);
    float _1824 = ((_1776 * cbLight._m0[_1770].z) * _1815) + (((cbLight._m0[_1780].z * _1747) * _1790) * _1813);
    uvec4 _1829 = floatBitsToUint(cbLight._m0[_1753 + 12u]);
    bool _1831 = _1829.x == 0u;
    float _1842;
    float _1844;
    float _1846;
    if (_1831)
    {
        _1842 = _1822;
        _1844 = _1823;
        _1846 = _1824;
    }
    else
    {
        uint _1850 = _1753 + 6u;
        float _1866 = (dot(vec3(cbLight._m0[_1753 + 2u].xyz), vec3(_470, _471, _472)) * 0.5) + 0.5;
        float _1867 = _1866 * _1866;
        float _3956 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1869 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1842 = (((cbLight._m0[_1850].x * 0.3183098733425140380859375) * _1868) * _1869) + _1822;
        _1844 = (((cbLight._m0[_1850].y * 0.3183098733425140380859375) * _1868) * _1869) + _1823;
        _1846 = (((cbLight._m0[_1850].z * 0.3183098733425140380859375) * _1868) * _1869) + _1824;
    }
    bool _1849 = _1829.y == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1849)
    {
        _1887 = _1842;
        _1889 = _1844;
        _1891 = _1846;
    }
    else
    {
        uint _2060 = _1753 + 7u;
        float _2076 = (dot(vec3(cbLight._m0[_1753 + 3u].xyz), vec3(_470, _471, _472)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _3972 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2079 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1887 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1842;
        _1889 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1844;
        _1891 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1846;
    }
    uint _1894 = _1753 + 8u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _604) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1753].x + _551;
    float _1910 = cbLight._m0[_1753].y + _552;
    float _1911 = cbLight._m0[_1753].z + _553;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_1753].xyz));
    float _3988 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _1923 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1924 = dot(vec3(_470, _471, _472), vec3(_1916, _1917, _1918));
    float _4010 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1916, _1917, _1918));
    float _4021 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1932 = _1908 * _1908;
    float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
    float _1944 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
    float _1945 = 0.959999978542327880859375 - _672;
    float _1947 = 0.959999978542327880859375 - _673;
    float _1948 = 0.959999978542327880859375 - _674;
    float _1955 = 1.0 - _1908;
    float _1966 = (0.5 / (((_1923 * ((_1922 * _1955) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _1955) + _1908) * _1922))) * _1922;
    float _4032 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
    uint _1982 = _1753 + 9u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _604) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1794].x + _551;
    float _1996 = cbLight._m0[_1794].y + _552;
    float _1997 = cbLight._m0[_1794].z + _553;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_1794].xyz));
    float _4043 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2009 = dot(vec3(_470, _471, _472), vec3(_2002, _2003, _2004));
    float _4054 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2013 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_2002, _2003, _2004));
    float _4065 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2017 = _1994 * _1994;
    float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
    float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
    float _2035 = 1.0 - _1994;
    float _2045 = (0.5 / (((_1923 * ((_2008 * _2035) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2035) + _1994) * _2008))) * _2008;
    float _4076 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
    float _2057 = (((((_2028 * _1945) + _675) * cbLight._m0[_1982].x) * _2047) * _1776) + ((((cbLight._m0[_1894].x * _1745) * ((_1944 * _1945) + _675)) * _1968) * _1790);
    float _2058 = (((((_2028 * _1947) + _677) * cbLight._m0[_1982].y) * _2047) * _1776) + ((((cbLight._m0[_1894].y * _1746) * ((_1944 * _1947) + _677)) * _1968) * _1790);
    float _2059 = (((((_2028 * _1948) + _678) * cbLight._m0[_1982].z) * _2047) * _1776) + ((((cbLight._m0[_1894].z * _1747) * ((_1944 * _1948) + _678)) * _1968) * _1790);
    float _2121;
    float _2123;
    float _2125;
    if (_1831)
    {
        _2121 = _2057;
        _2123 = _2058;
        _2125 = _2059;
    }
    else
    {
        uint _2127 = _1753 + 2u;
        uint _2131 = _1753 + 10u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _604) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _551;
        float _2148 = cbLight._m0[_2127].y + _552;
        float _2149 = cbLight._m0[_2127].z + _553;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_2127].xyz));
        float _4087 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2161 = dot(vec3(_470, _471, _472), vec3(_2154, _2155, _2156));
        float _4098 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4109 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
        float _2187 = 1.0 - _2146;
        float _2197 = (0.5 / (((_1923 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2187) + _2146) * _2160))) * _2160;
        float _4120 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2121 = (((((_2180 * _1945) + _675) * cbLight._m0[_2131].x) * _2199) * _2200) + _2057;
        _2123 = (((((_2180 * _1947) + _677) * cbLight._m0[_2131].y) * _2199) * _2200) + _2058;
        _2125 = (((((_2180 * _1948) + _678) * cbLight._m0[_2131].z) * _2199) * _2200) + _2059;
    }
    float _2235;
    float _2237;
    float _2239;
    if (_1849)
    {
        _2235 = _2121;
        _2237 = _2123;
        _2239 = _2125;
    }
    else
    {
        uint _2246 = _1753 + 3u;
        uint _2250 = _1753 + 11u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _604) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _551;
        float _2267 = cbLight._m0[_2246].y + _552;
        float _2268 = cbLight._m0[_2246].z + _553;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_470, _471, _472), vec3(cbLight._m0[_2246].xyz));
        float _4136 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2280 = dot(vec3(_470, _471, _472), vec3(_2273, _2274, _2275));
        float _4147 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4158 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
        float _2306 = 1.0 - _2265;
        float _2316 = (0.5 / (((_1923 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2306) + _2265) * _2279))) * _2279;
        float _4169 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2235 = (((((_2299 * _1945) + _675) * cbLight._m0[_2250].x) * _2318) * _2319) + _2121;
        _2237 = (((((_2299 * _1947) + _677) * cbLight._m0[_2250].y) * _2318) * _2319) + _2123;
        _2239 = (((((_2299 * _1948) + _678) * cbLight._m0[_2250].z) * _2318) * _2319) + _2125;
    }
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_1751.y == 0u)
    {
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2394;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2394;
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2394;
        uvec4 _2409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2410 = _2409.x;
        uint _2421 = uint((float(_2409.y) * floor(float(uint(cbSceneParam._m0[85u].y * _560) / _2410))) + floor(float(uint(cbSceneParam._m0[85u].x * _559) / _2410)));
        float _2431 = (log2(_2397 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2432 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        uint _2435 = uint(isnan(14.0) ? _2432 : (isnan(_2432) ? 14.0 : min(_2432, 14.0)));
        uvec4 _2440 = texelFetch(g_lightClusterGridBuffer, int(((_2435 << 2u) + (_2421 << 6u)) >> 2u));
        uint _2441 = _2440.x;
        uint _2442 = _2409.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2442 >> 4u) & 15u)) + 4294967295u) & _2441) == 0u) || ((_2442 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            uint _2709 = 0u;
            uint _2718;
            bool _2719;
            for (;;)
            {
                _2718 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                _2719 = _2718 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2719)
                {
                    frontier_phi_69_pred = _2708;
                    frontier_phi_69_pred_1 = _2707;
                    frontier_phi_69_pred_2 = _2706;
                    frontier_phi_69_pred_3 = _2704;
                    frontier_phi_69_pred_4 = _2703;
                    frontier_phi_69_pred_5 = _2705;
                }
                else
                {
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    uint _2833;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2718;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    for (;;)
                    {
                        uint _2837 = uint(findLSB(_2833)) + (_2709 << 5u);
                        uint _2834 = (_2833 + 4294967295u) & _2833;
                        uint _2839 = _2837 * 48u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 3u)).x));
                        uint _2859 = (_2837 * 48u) + 4u;
                        vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 3u)).x));
                        uint _2878 = (_2837 * 48u) + 8u;
                        vec3 _2889 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x));
                        float _2893 = _2853.x - _2395;
                        float _2894 = _2853.y - _2396;
                        float _2895 = _2853.z - _2397;
                        float _2896 = dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895));
                        float _2899 = inversesqrt(_2896);
                        float _2900 = _2899 * _2893;
                        float _2901 = _2899 * _2894;
                        float _2902 = _2899 * _2895;
                        float _2903 = dot(vec3(_585, _588, _591), vec3(_2900, _2901, _2902));
                        float _2908 = 1.0 - (_2896 * _2853.w);
                        float _4195 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2909 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2910 = sqrt(_2896) * _2872.w;
                        float _2913 = 1.39999997615814208984375 / (_2910 + 1.39999997615814208984375);
                        float _2914 = _2913 * _2913;
                        float _2917 = ((1.0 - _2914) * _2903) + _2914;
                        float _2920 = _2910 * _2910;
                        float _2924 = ((isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))) * _2909) / ((_2920 * 0.699999988079071044921875) + 1.0);
                        float _2928 = (-0.0) - _2395;
                        float _2929 = (-0.0) - _2396;
                        float _2930 = (-0.0) - _2397;
                        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2945 = exp2(log2(1.0 / ((_2920 * 3.5) + 5.0)) * 0.25);
                        float _2946 = 1.0 - _706;
                        float _2953 = sqrt(1.0 - ((1.0 - (_2946 * _2946)) * (1.0 - (_2945 * _2945))));
                        float _2954 = _2953 * _2953;
                        float _2955 = _2954 * _2954;
                        float _2956 = _2935 + _2900;
                        float _2957 = _2936 + _2901;
                        float _2958 = _2937 + _2902;
                        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                        float _2966 = dot(vec3(_585, _588, _591), vec3(_2935, _2936, _2937));
                        float _4211 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2969 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2970 = dot(vec3(_585, _588, _591), vec3(_2962 * _2956, _2962 * _2957, _2962 * _2958));
                        float _4222 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2977 = ((_2973 * _2973) * (_2955 + (-1.0))) + 1.0;
                        float _2978 = _2913 * _2954;
                        float _2979 = _2978 * _2978;
                        float _2982 = ((1.0 - _2979) * _2903) + _2979;
                        float _4233 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2984 = 1.0 - _2954;
                        float _2994 = (0.5 / (((_2983 * ((_2969 * _2984) + _2954)) + 9.9999999392252902907785028219223e-09) + (((_2983 * _2984) + _2954) * _2969))) * _2983;
                        float _4244 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _3005 = (((_2955 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_2977 * _2977) * ((_2920 * 2.1991131305694580078125) + 3.141590118408203125))) * _2909;
                        _2762 = (_2924 * _2872.x) + _2830;
                        _2763 = (_2924 * _2872.y) + _2831;
                        _2764 = (_2924 * _2872.z) + _2832;
                        _2759 = (_3005 * _2889.x) + _2827;
                        _2760 = (_3005 * _2889.y) + _2828;
                        _2761 = (_3005 * _2889.z) + _2829;
                        if (_2834 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2834;
                        }
                    }
                    frontier_phi_69_pred = _2764;
                    frontier_phi_69_pred_1 = _2763;
                    frontier_phi_69_pred_2 = _2762;
                    frontier_phi_69_pred_3 = _2760;
                    frontier_phi_69_pred_4 = _2759;
                    frontier_phi_69_pred_5 = _2761;
                }
                _2570 = frontier_phi_69_pred;
                _2568 = frontier_phi_69_pred_1;
                _2566 = frontier_phi_69_pred_2;
                _2562 = frontier_phi_69_pred_3;
                _2560 = frontier_phi_69_pred_4;
                _2564 = frontier_phi_69_pred_5;
                uint _2710 = _2709 + 1u;
                if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2703 = _2560;
                    _2704 = _2562;
                    _2705 = _2564;
                    _2706 = _2566;
                    _2707 = _2568;
                    _2708 = _2570;
                    _2709 = _2710;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((4294967295u << _2576) & _2441) == 0u)
        {
            _2671 = _2559;
            _2673 = _2561;
            _2675 = _2563;
            _2677 = _2565;
            _2679 = _2567;
            _2681 = _2569;
        }
        else
        {
            float _2696 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
            float _2697 = _2696 * _2395;
            float _2698 = _2696 * _2396;
            float _2699 = _2696 * _2397;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2810 = _2559;
                float _2811 = _2561;
                float _2812 = _2563;
                float _2813 = _2565;
                float _2814 = _2567;
                float _2815 = _2569;
                uint _2816 = _2576;
                uint _2825;
                bool _2826;
                for (;;)
                {
                    _2825 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2816 << 2u)) >> 2u)).x;
                    _2826 = _2825 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2826)
                    {
                        frontier_phi_75_pred = _2812;
                        frontier_phi_75_pred_1 = _2811;
                        frontier_phi_75_pred_2 = _2810;
                        frontier_phi_75_pred_3 = _2815;
                        frontier_phi_75_pred_4 = _2814;
                        frontier_phi_75_pred_5 = _2813;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        uint _3029 = _2825;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3099;
                        vec4 _3114;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3040 = ((_2816 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3086 = (_3040 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3040 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3040 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3040 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_2397, _3148.z, fma(_2396, _3148.y, _3148.x * _2395)) + _3148.w;
                            _3161 = !((fma(_2397, _3129.z, fma(_2396, _3129.y, _3129.x * _2395)) + _3129.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3161)
                            {
                                float _3188 = _3055.x - _2395;
                                float _3189 = _3055.y - _2396;
                                float _3190 = _3055.z - _2397;
                                float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                                float _3194 = inversesqrt(_3191);
                                float _3195 = _3194 * _3188;
                                float _3196 = _3194 * _3189;
                                float _3197 = _3194 * _3190;
                                float _3201 = 1.0 - (_3191 / (_3056 * _3056));
                                float _4255 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3206 = sqrt(_3191) * _3071.w;
                                float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                                float _3209 = _3208 * _3208;
                                float _3212 = ((1.0 - _3209) * dot(vec3(_3195, _3196, _3197), vec3(_585, _588, _591))) + _3209;
                                float _3215 = _3206 * _3206;
                                float _3219 = (fma(_2397, _3099.z, fma(_2396, _3099.y, _3099.x * _2395)) + _3099.w) / _3160;
                                float _3220 = (fma(_2397, _3114.z, fma(_2396, _3114.y, _3114.x * _2395)) + _3114.w) / _3160;
                                float _3224 = 1.0 - dot(vec2(_3219, _3220), vec2(_3219, _3220));
                                float _4271 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3226 = _3225 * (((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3202) / ((_3215 * 0.699999988079071044921875) + 1.0));
                                float _3238 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3239 = 1.0 - _706;
                                float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                                float _3247 = _3246 * _3246;
                                float _3248 = _3247 * _3247;
                                float _3249 = _3195 - _2697;
                                float _3250 = _3196 - _2698;
                                float _3251 = _3197 - _2699;
                                float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                                float _3259 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2697, (-0.0) - _2698, (-0.0) - _2699));
                                float _4282 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3263 = dot(vec3(_585, _588, _591), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                                float _4293 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                                float _3271 = _3208 * _3247;
                                float _3272 = _3271 * _3271;
                                float _3278 = ((1.0 - _3272) * dot(vec3(_585, _588, _591), vec3(_3195, _3196, _3197))) + _3272;
                                float _4304 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3280 = 1.0 - _3247;
                                float _3290 = (0.5 / (((_3279 * ((_3262 * _3280) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3247) * _3262))) * _3279;
                                float _4315 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3300 = (_3225 * _3202) * (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3270 * _3270) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3300 * _3083.z;
                                frontier_phi_81_pred_1 = _3300 * _3083.y;
                                frontier_phi_81_pred_2 = _3300 * _3083.x;
                                frontier_phi_81_pred_3 = _3226 * _3071.z;
                                frontier_phi_81_pred_4 = _3226 * _3071.y;
                                frontier_phi_81_pred_5 = _3226 * _3071.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3306 = frontier_phi_81_pred;
                            _3305 = frontier_phi_81_pred_1;
                            _3304 = frontier_phi_81_pred_2;
                            _3309 = frontier_phi_81_pred_3;
                            _3308 = frontier_phi_81_pred_4;
                            _3307 = frontier_phi_81_pred_5;
                            _3013 = _3307 + _3026;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3012;
                        frontier_phi_75_pred_1 = _3011;
                        frontier_phi_75_pred_2 = _3010;
                        frontier_phi_75_pred_3 = _3015;
                        frontier_phi_75_pred_4 = _3014;
                        frontier_phi_75_pred_5 = _3013;
                    }
                    _2676 = frontier_phi_75_pred;
                    _2674 = frontier_phi_75_pred_1;
                    _2672 = frontier_phi_75_pred_2;
                    _2682 = frontier_phi_75_pred_3;
                    _2680 = frontier_phi_75_pred_4;
                    _2678 = frontier_phi_75_pred_5;
                    uint _2817 = _2816 + 1u;
                    if (_2817 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2810 = _2672;
                        _2811 = _2674;
                        _2812 = _2676;
                        _2813 = _2678;
                        _2814 = _2680;
                        _2815 = _2682;
                        _2816 = _2817;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2680;
                frontier_phi_63_64_ladder_1 = _2678;
                frontier_phi_63_64_ladder_2 = _2676;
                frontier_phi_63_64_ladder_3 = _2682;
                frontier_phi_63_64_ladder_4 = _2674;
                frontier_phi_63_64_ladder_5 = _2672;
            }
            else
            {
                frontier_phi_63_64_ladder = _2567;
                frontier_phi_63_64_ladder_1 = _2565;
                frontier_phi_63_64_ladder_2 = _2563;
                frontier_phi_63_64_ladder_3 = _2569;
                frontier_phi_63_64_ladder_4 = _2561;
                frontier_phi_63_64_ladder_5 = _2559;
            }
            _2671 = frontier_phi_63_64_ladder_5;
            _2673 = frontier_phi_63_64_ladder_4;
            _2675 = frontier_phi_63_64_ladder_2;
            _2677 = frontier_phi_63_64_ladder_1;
            _2679 = frontier_phi_63_64_ladder;
            _2681 = frontier_phi_63_64_ladder_3;
        }
        float _2686 = isnan(1.0) ? _690 : (isnan(_690) ? 1.0 : min(_690, 1.0));
        _2453 = (_2686 * _2677) + _1887;
        _2455 = (_2686 * _2679) + _1889;
        _2457 = (_2686 * _2681) + _1891;
        _2459 = ((_2671 * _675) * _2686) + _2235;
        _2461 = ((_2673 * _677) * _2686) + _2237;
        _2463 = ((_2675 * _678) * _2686) + _2239;
    }
    else
    {
        _2453 = _1887;
        _2455 = _1889;
        _2457 = _1891;
        _2459 = _2235;
        _2461 = _2237;
        _2463 = _2239;
    }
    vec4 _2469 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4331 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4342 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4353 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _2493 = (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2453 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _690))) + ((_2459 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1502)) * cbPerFrame._m0[3u].x)) + (_2469.x * cbMtdParam._m0[3u].x);
    float _2495 = ((_2469.y * cbMtdParam._m0[3u].x) + ((_2461 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1502)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2455 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _690)));
    float _2497 = ((_2469.z * cbMtdParam._m0[3u].x) + ((_2463 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1502)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2457 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _690)));
    uint _2501 = _617 + 6u;
    float _2509 = _559 / cbSceneParam._m0[86u].x;
    float _2510 = _560 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _493 : (isnan(_493) ? cbSceneParam._m0[77u].w : min(_493, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_493 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_493) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _493 : min(cbSceneParam._m0[80u].w, _493));
        float _2585 = _2584 / _493;
        float _2596 = _2585 * _544;
        float _2597 = _545 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2599 = _2585 * _546;
        float _2601 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2602 = _2601 + cbSceneParam._m0[79u].w;
        float _2603 = cbSceneParam._m0[79u].w - _2597;
        float _2609 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2599 * _2599));
        float _2612 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2609;
        float _2617 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2619 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2772;
        if (abs((_2598 - _2601) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2772 = ((((_2602 > 0.0) ? exp2(_2617 * _2602) : (2.0 - exp2(_2619 * _2602))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2612;
        }
        else
        {
            float _2732 = 1.0 / cbSceneParam._m0[80u].x;
            float _2733 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : max(_2602, _2603));
            float _2734 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : min(_2602, _2603));
            float _2743 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : min(_2733, 0.0));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            _2772 = ((abs(_2609 / _2598) * cbSceneParam._m0[80u].y) * ((((_2743 - _2744) * 2.0) - ((exp2(_2617 * (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0)))) - exp2(_2617 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0))))) * _2732)) - ((exp2(_2619 * _2743) - exp2(_2619 * _2744)) * _2732))) + (_2612 * cbSceneParam._m0[80u].z);
        }
        vec4 _2774 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2783 = exp2((_2772 * (-1.44269502162933349609375)) * (1.0 - _2774.w));
        float _2784 = log2(_2783);
        float _2800 = log2(_2529);
        _2621 = (exp2(_2800 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].x)) * _2774.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2623 = (exp2(_2800 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].y)) * _2774.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2625 = (exp2(_2800 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].z)) * _2774.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2627 = _2783 * _2529;
    }
    else
    {
        _2621 = _2526;
        _2623 = _2527;
        _2625 = _2528;
        _2627 = _2529;
    }
    float _2639 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2640 = _2639 == 3.0;
    float _2641 = log2(_2627);
    float _2648 = exp2(_2641 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0)));
    float _2649 = exp2(_2641 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0)));
    float _2650 = exp2(_2641 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0)));
    float _2659 = (_2639 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2659 * (_2640 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2621)));
    SV_Target.y = _2659 * (_2640 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2623)));
    SV_Target.z = _2659 * (_2640 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.w = cbInstanceData._m0[_2501].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
}


