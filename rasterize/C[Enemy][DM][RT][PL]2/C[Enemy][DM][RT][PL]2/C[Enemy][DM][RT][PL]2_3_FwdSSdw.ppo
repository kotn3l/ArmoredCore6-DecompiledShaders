#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _262 = log2(0.0);
    bool _265 = exp2(_262 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[15u].x;
    _190[0u] = cbMtdParam._m0[15u].y;
    _191[0u] = cbMtdParam._m0[15u].z;
    _189[1u] = cbMtdParam._m0[16u].x;
    _190[1u] = cbMtdParam._m0[16u].y;
    _191[1u] = cbMtdParam._m0[16u].z;
    _189[2u] = cbMtdParam._m0[17u].x;
    _190[2u] = cbMtdParam._m0[17u].y;
    _191[2u] = cbMtdParam._m0[17u].z;
    _189[3u] = cbMtdParam._m0[12u].x;
    _190[3u] = cbMtdParam._m0[12u].y;
    _191[3u] = cbMtdParam._m0[12u].z;
    _189[4u] = cbMtdParam._m0[13u].x;
    _190[4u] = cbMtdParam._m0[13u].y;
    _191[4u] = cbMtdParam._m0[13u].z;
    _189[5u] = cbMtdParam._m0[14u].x;
    _190[5u] = cbMtdParam._m0[14u].y;
    _191[5u] = cbMtdParam._m0[14u].z;
    vec4 _333 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _337 = _333.y;
    float _340 = (_333.x + (-0.02500000037252902984619140625)) * 8.0;
    float _342 = roundEven(_340);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    uint _346 = uint(int(isnan(5.0) ? _343 : (isnan(_343) ? 5.0 : min(_343, 5.0))));
    float _363;
    if (_265)
    {
        _363 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _363 = cbMtdParam._m0[20u].z;
    }
    float _369;
    float _371;
    if (_265)
    {
        _369 = cbMtdParam._m0[28u].z;
        _371 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _369 = cbMtdParam._m0[24u].x;
        _371 = cbMtdParam._m0[24u].y;
    }
    float _373 = _369 * TEXCOORD.x;
    float _374 = _371 * TEXCOORD.y;
    float _386 = floor(_363);
    vec4 _389 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _373) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _374) + cbTextureTilingScale._m0[8u].w, _386));
    vec4 _411 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _419 = ((((((_189[_346] - cbMtdParam._m0[19u].x) * _337) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _389.x) * cbMtdParam._m0[9u].x) * _411.x;
    float _423 = ((((((_190[_346] - cbMtdParam._m0[19u].y) * _337) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _389.y) * cbMtdParam._m0[9u].y) * _411.y;
    float _427 = ((((((_191[_346] - cbMtdParam._m0[19u].z) * _337) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _389.z) * cbMtdParam._m0[9u].z) * _411.z;
    vec4 _439 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _443 = _439.z;
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].x;
    _185[0u] = cbMtdParam._m0[25u].y;
    _184[1u] = cbMtdParam._m0[26u].x;
    _185[1u] = cbMtdParam._m0[26u].y;
    _184[2u] = cbMtdParam._m0[26u].z;
    _185[2u] = cbMtdParam._m0[26u].w;
    _184[3u] = cbMtdParam._m0[27u].x;
    _185[3u] = cbMtdParam._m0[27u].y;
    _184[4u] = cbMtdParam._m0[25u].z;
    _185[4u] = cbMtdParam._m0[25u].w;
    float _488 = roundEven(5.0 - _340);
    float _489 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = isnan(4.0) ? _489 : (isnan(_489) ? 4.0 : min(_489, 4.0));
    float _492 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    uint _494 = uint(int(isnan(4.0) ? _492 : (isnan(_492) ? 4.0 : min(_492, 4.0))));
    float _500 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _373) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _374) + cbTextureTilingScale._m0[10u].w, _386)).x + _439.w) + _185[_494];
    vec4 _518 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _373) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _374) + cbTextureTilingScale._m0[9u].w, _386));
    float _525 = (_518.x * 2.0) + (-1.0);
    float _526 = (_518.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3557 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))));
    float _543 = (cbMtdParam._m0[21u].x * (((_443 * 2.0) * (_518.z + _184[_494])) - _443)) + _443;
    float _547 = (cbMtdParam._m0[21u].y * ((_439.x * 2.0) + (-1.0))) + _525;
    float _548 = (cbMtdParam._m0[21u].y * ((_439.y * 2.0) + (-1.0))) + _526;
    float _551 = fma(_533, _241, fma(_548, _233 * TANGENT.x, (_219 * _211) * _547));
    float _554 = fma(_533, _242, fma(_548, _233 * TANGENT.y, (_219 * _212) * _547));
    float _557 = fma(_533, _243, fma(_548, _233 * TANGENT.z, (_219 * _213) * _547));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    float _562 = _561 * _551;
    float _563 = _561 * _554;
    float _564 = _561 * _557;
    float _3568 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _565 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3590 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3601 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3612 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _569 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _636 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _626);
    float _637 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _626);
    float _638 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _626);
    float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
    float _643 = _636 * _642;
    float _644 = _637 * _642;
    float _645 = _638 * _642;
    float _651 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _652 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _654 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _656 = _654.w;
    float _675 = fma(_564, cbSceneParam._m0[5u].z, fma(_563, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _562));
    float _678 = fma(_564, cbSceneParam._m0[6u].z, fma(_563, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _562));
    float _681 = fma(_564, cbSceneParam._m0[7u].z, fma(_563, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _562));
    vec4 _683 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _694 = (((_683.y - _565) + (_683.w * _565)) * cbMtdParam._m0[3u].x) + _565;
    uint _707 = uint(roundEven(NORMAL.w)) * 13u;
    uint _709 = (_707 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _715 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * cbInstanceData._m0[_709].x;
    float _716 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_709].y;
    float _717 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_709].z;
    float _3623 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    vec4 _721 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _726 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _737 = (((_726.x - _569) + (_726.w * _569)) * cbMtdParam._m0[3u].x) + _569;
    float _750 = (cbMtdParam._m0[3u].x * (((_718 * _656) - _718) + _721.x)) + _718;
    float _751 = (cbMtdParam._m0[3u].x * (((_719 * _656) - _719) + _721.y)) + _719;
    float _752 = (cbMtdParam._m0[3u].x * (((_720 * _656) - _720) + _721.z)) + _720;
    float _753 = 1.0 - _737;
    float _754 = _753 * _750;
    float _755 = _753 * _751;
    float _756 = _753 * _752;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _737;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _737;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _737;
    float _764 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _651, cbSceneParam._m0[86u].y * _652));
    float _779 = _776.x * TEXCOORD_4;
    float _780 = dot(vec3(_562, _563, _564), vec3(_643, _644, _645));
    float _783 = _780 * 2.0;
    float _787 = (_783 * _562) - _643;
    float _788 = (_783 * _563) - _644;
    float _789 = (_783 * _564) - _645;
    float _793 = abs(dot(vec3(_643, _644, _645), vec3(_562, _563, _564)));
    float _3656 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _795 = sqrt(_694);
    float _806 = exp2((_795 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_795 * 3.0));
    float _812 = (1.0 - _806) * ((_795 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _813 = _806 * _795;
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_849, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841));
        float _882 = fma(_849, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841));
        float _886 = fma(_849, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841));
        float _911 = _841 + _562;
        float _912 = _845 + _563;
        float _913 = _849 + _564;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_562, _563, _564), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3704 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_562, _563, _564), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3737 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_562, _563, _564), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3770 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1194 = fma(_849, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841));
        float _1198 = fma(_849, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841));
        float _1202 = fma(_849, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841));
        float _1225 = _841 + _562;
        float _1226 = _845 + _563;
        float _1227 = _849 + _564;
        float _1237 = fma(_1227, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1225)) - _1194;
        float _1238 = fma(_1227, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1225)) - _1198;
        float _1239 = fma(_1227, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1225)) - _1202;
        float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
        float _1256 = ((_1243 * _1237) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1194 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1243 * _1238) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1198 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1243 * _1239) / cbModelParam._m0[35u].z) + ((((((_1202 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        float _1293 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1260.x + (-0.5));
        float _1295 = _1293 * (_1260.y + (-0.5));
        float _1296 = _1293 * (_1260.z + (-0.5));
        float _1303 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1267.x + (-0.5));
        float _1305 = _1303 * (_1267.y + (-0.5));
        float _1306 = _1303 * (_1267.z + (-0.5));
        float _1313 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1274.x + (-0.5));
        float _1315 = _1313 * (_1274.y + (-0.5));
        float _1316 = _1313 * (_1274.z + (-0.5));
        float _1323 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1281.x + (-0.5));
        float _1325 = _1323 * (_1281.y + (-0.5));
        float _1326 = _1323 * (_1281.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_562, _563, _564), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3833 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1357 + 1.0))) + _1362) * _1327;
        float _1372 = _1295 * 0.5;
        float _1373 = _1305 * 0.5;
        float _1374 = _1315 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_562, _563, _564), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3866 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1399 + 1.0))) + _1404) * _1328;
        float _1414 = _1296 * 0.5;
        float _1415 = _1306 * 0.5;
        float _1416 = _1316 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_562, _563, _564), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3899 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1441 + 1.0))) + _1446) * _1329;
        _1463 = _1296;
        _1464 = _1295;
        _1465 = _1294;
        _1466 = _1306;
        _1467 = _1305;
        _1468 = _1304;
        _1469 = _1316;
        _1470 = _1315;
        _1471 = _1314;
        _1472 = _1329;
        _1473 = _1328;
        _1474 = _1327;
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1154;
        _1464 = _1154;
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = _1154;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1166)) + _1166;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1510 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1487));
    float _1531 = _787 * 0.5;
    float _1532 = _788 * 0.5;
    float _1533 = _789 * 0.5;
    float _1534 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1537 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1540 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1574;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1547 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1551 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1555 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1562 = dot(vec4(cbModelParam._m0[39u]), vec4(_1531, _1532, _1533, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1585;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1576 = dot(vec4(cbModelParam._m0[40u]), vec4(_1531, _1532, _1533, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1589 = (_1585 * cbModelParam._m0[1u].x) + (_1574 * (1.0 - cbModelParam._m0[1u].x));
    float _1599 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1599 : min(cbModelParam._m0[25u].z, _1599));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_849, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_849, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_849, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_789, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787));
        float _1661 = fma(_789, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787));
        float _1664 = fma(_789, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1692 = frontier_phi_20_18_ladder;
        }
        float _1916;
        if (_1661 > 0.0)
        {
            _1916 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1916 = frontier_phi_29_25_ladder;
        }
        float _2173;
        if (_1664 > 0.0)
        {
            _2173 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2173 = frontier_phi_41_36_ladder;
        }
        float _2175 = isnan(_1916) ? _1692 : (isnan(_1692) ? _1916 : min(_1692, _1916));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1658) + _1647;
        float _2181 = (_2176 * _1661) + _1651;
        float _2182 = (_2176 * _1664) + _1655;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1600);
            frontier_phi_19_41_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_19_41_ladder_2;
        _1682 = frontier_phi_19_41_ladder_1;
        _1684 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_787, _788, _789), _1600);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1743 = fma(_849, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841)) + cbModelParam._m0[21u].w;
        float _1747 = fma(_849, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841)) + cbModelParam._m0[22u].w;
        float _1751 = fma(_849, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841)) + cbModelParam._m0[23u].w;
        float _1754 = fma(_789, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787));
        float _1757 = fma(_789, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787));
        float _1760 = fma(_789, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787));
        float _1921;
        if (_1754 > 0.0)
        {
            _1921 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1921 = frontier_phi_31_27_ladder;
        }
        float _2200;
        if (_1757 > 0.0)
        {
            _2200 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2200 = frontier_phi_43_38_ladder;
        }
        float _2413;
        if (_1760 > 0.0)
        {
            _2413 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2413 = frontier_phi_52_49_ladder;
        }
        float _2415 = isnan(_2200) ? _1921 : (isnan(_1921) ? _2200 : min(_1921, _2200));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1754) + _1743;
        float _2421 = (_2416 * _1757) + _1747;
        float _2422 = (_2416 * _1760) + _1751;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_28_52_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1779 = frontier_phi_28_52_ladder_2;
        _1781 = frontier_phi_28_52_ladder_1;
        _1783 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_787, _788, _789), _1689);
        _1779 = _1763.x * cbModelParam._m0[1u].z;
        _1781 = _1763.y * cbModelParam._m0[1u].z;
        _1783 = _1763.z * cbModelParam._m0[1u].z;
    }
    float _1796 = (((_812 * _764) + _813) * _779) * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1798 = (((_812 * _766) + _813) * _779) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1800 = (((_812 * _767) + _813) * _779) * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1803 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, _1796 * cbSceneParam._m0[91u].x));
    vec4 _1817 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_651, _652));
    float _1819 = _1817.w;
    float _1831 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1819);
    float _1832 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1819);
    float _1833 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1819);
    uvec4 _1837 = floatBitsToUint(cbInstanceData._m0[_707 + 5u]);
    uint _1839 = _1837.x * 14u;
    uint _1840 = _1839 + 13u;
    float _1847 = _779 + (-1.0);
    float _1852 = (cbLight._m0[_1840].x * _1847) + 1.0;
    float _1853 = (cbLight._m0[_1840].y * _1847) + 1.0;
    float _1854 = (cbLight._m0[_1840].z * _1847) + 1.0;
    float _1855 = (cbLight._m0[_1840].w * _1847) + 1.0;
    uint _1856 = _1839 + 5u;
    float _1862 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1866 = _1839 + 4u;
    float _1875 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1879 = _1839 | 1u;
    float _1890 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_562, _563, _564));
    float _1893 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_562, _563, _564));
    float _4035 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _4046 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1898 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.3183098733425140380859375;
    float _1900 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1907 = ((cbLight._m0[_1856].x * _1862) * _1900) + (((cbLight._m0[_1866].x * _1831) * _1875) * _1898);
    float _1908 = ((_1862 * cbLight._m0[_1856].y) * _1900) + (((cbLight._m0[_1866].y * _1832) * _1875) * _1898);
    float _1909 = ((_1862 * cbLight._m0[_1856].z) * _1900) + (((cbLight._m0[_1866].z * _1833) * _1875) * _1898);
    uvec4 _1913 = floatBitsToUint(cbLight._m0[_1839 + 12u]);
    bool _1915 = _1913.x == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1915)
    {
        _1926 = _1907;
        _1928 = _1908;
        _1930 = _1909;
    }
    else
    {
        uint _1934 = _1839 + 6u;
        float _1950 = (dot(vec3(cbLight._m0[_1839 + 2u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _4057 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1953 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1926 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1907;
        _1928 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1908;
        _1930 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1909;
    }
    bool _1933 = _1913.y == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1933)
    {
        _1971 = _1926;
        _1973 = _1928;
        _1975 = _1930;
    }
    else
    {
        uint _2144 = _1839 + 7u;
        float _2160 = (dot(vec3(cbLight._m0[_1839 + 3u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4073 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2163 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1971 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _1926;
        _1973 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _1928;
        _1975 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _1930;
    }
    uint _1978 = _1839 + 8u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _694) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1839].x + _643;
    float _1994 = cbLight._m0[_1839].y + _644;
    float _1995 = cbLight._m0[_1839].z + _645;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1839].xyz));
    float _4089 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2007 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2008 = dot(vec3(_562, _563, _564), vec3(_2000, _2001, _2002));
    float _4111 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2000, _2001, _2002));
    float _4122 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1992 * _1992;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
    float _2029 = 0.959999978542327880859375 - _761;
    float _2031 = 0.959999978542327880859375 - _762;
    float _2032 = 0.959999978542327880859375 - _763;
    float _2039 = 1.0 - _1992;
    float _2050 = (0.5 / (((_2007 * ((_2006 * _2039) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2039) + _1992) * _2006))) * _2006;
    float _4133 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    uint _2066 = _1839 + 9u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _694) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1879].x + _643;
    float _2080 = cbLight._m0[_1879].y + _644;
    float _2081 = cbLight._m0[_1879].z + _645;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1879].xyz));
    float _4144 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2093 = dot(vec3(_562, _563, _564), vec3(_2086, _2087, _2088));
    float _4155 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2086, _2087, _2088));
    float _4166 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2078 * _2078;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
    float _2119 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2007 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2119) + _2078) * _2092))) * _2092;
    float _4177 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    float _2141 = (((((_2112 * _2029) + _764) * cbLight._m0[_2066].x) * _2131) * _1862) + ((((cbLight._m0[_1978].x * _1831) * ((_2028 * _2029) + _764)) * _2052) * _1875);
    float _2142 = (((((_2112 * _2031) + _766) * cbLight._m0[_2066].y) * _2131) * _1862) + ((((cbLight._m0[_1978].y * _1832) * ((_2028 * _2031) + _766)) * _2052) * _1875);
    float _2143 = (((((_2112 * _2032) + _767) * cbLight._m0[_2066].z) * _2131) * _1862) + ((((cbLight._m0[_1978].z * _1833) * ((_2028 * _2032) + _767)) * _2052) * _1875);
    float _2205;
    float _2207;
    float _2209;
    if (_1915)
    {
        _2205 = _2141;
        _2207 = _2142;
        _2209 = _2143;
    }
    else
    {
        uint _2211 = _1839 + 2u;
        uint _2215 = _1839 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _694) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _643;
        float _2232 = cbLight._m0[_2211].y + _644;
        float _2233 = cbLight._m0[_2211].z + _645;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2211].xyz));
        float _4188 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2245 = dot(vec3(_562, _563, _564), vec3(_2238, _2239, _2240));
        float _4199 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4210 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0);
        float _2271 = 1.0 - _2230;
        float _2281 = (0.5 / (((_2007 * ((_2244 * _2271) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2271) + _2230) * _2244))) * _2244;
        float _4221 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2205 = (((((_2264 * _2029) + _764) * cbLight._m0[_2215].x) * _2283) * _2284) + _2141;
        _2207 = (((((_2264 * _2031) + _766) * cbLight._m0[_2215].y) * _2283) * _2284) + _2142;
        _2209 = (((((_2264 * _2032) + _767) * cbLight._m0[_2215].z) * _2283) * _2284) + _2143;
    }
    float _2319;
    float _2321;
    float _2323;
    if (_1933)
    {
        _2319 = _2205;
        _2321 = _2207;
        _2323 = _2209;
    }
    else
    {
        uint _2330 = _1839 + 3u;
        uint _2334 = _1839 + 11u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _694) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _643;
        float _2351 = cbLight._m0[_2330].y + _644;
        float _2352 = cbLight._m0[_2330].z + _645;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2330].xyz));
        float _4237 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2364 = dot(vec3(_562, _563, _564), vec3(_2357, _2358, _2359));
        float _4248 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4259 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2007 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2390) + _2349) * _2363))) * _2363;
        float _4270 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2319 = (((((_2383 * _2029) + _764) * cbLight._m0[_2334].x) * _2402) * _2403) + _2205;
        _2321 = (((((_2383 * _2031) + _766) * cbLight._m0[_2334].y) * _2402) * _2403) + _2207;
        _2323 = (((((_2383 * _2032) + _767) * cbLight._m0[_2334].z) * _2402) * _2403) + _2209;
    }
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_1837.y == 0u)
    {
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2478;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2478;
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2478;
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _652) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _651) / _2494)));
        float _2515 = (log2(_2481 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            uint _2793 = 0u;
            uint _2802;
            bool _2803;
            for (;;)
            {
                _2802 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                _2803 = _2802 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2803)
                {
                    frontier_phi_67_pred = _2792;
                    frontier_phi_67_pred_1 = _2791;
                    frontier_phi_67_pred_2 = _2790;
                    frontier_phi_67_pred_3 = _2789;
                    frontier_phi_67_pred_4 = _2788;
                    frontier_phi_67_pred_5 = _2787;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2802;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2793 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _2479;
                        float _2978 = _2937.y - _2480;
                        float _2979 = _2937.z - _2481;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_675, _678, _681), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4296 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _2479;
                        float _3013 = (-0.0) - _2480;
                        float _3014 = (-0.0) - _2481;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3029 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3030 = 1.0 - _795;
                        float _3037 = sqrt(1.0 - ((1.0 - (_3030 * _3030)) * (1.0 - (_3029 * _3029))));
                        float _3038 = _3037 * _3037;
                        float _3039 = _3038 * _3038;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3042 = _3021 + _2986;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3050 = dot(vec3(_675, _678, _681), vec3(_3019, _3020, _3021));
                        float _4312 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3054 = dot(vec3(_675, _678, _681), vec3(_3046 * _3040, _3046 * _3041, _3046 * _3042));
                        float _4323 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3061 = ((_3057 * _3057) * (_3039 + (-1.0))) + 1.0;
                        float _3062 = _2997 * _3038;
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _2987) + _3063;
                        float _4334 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3068 = 1.0 - _3038;
                        float _3078 = (0.5 / (((_3067 * ((_3053 * _3068) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_3067 * _3068) + _3038) * _3053))) * _3067;
                        float _4345 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3089 = (((_3039 * 3.1415927410125732421875) * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) / ((_3061 * _3061) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2846 = (_3008 * _2956.x) + _2914;
                        _2847 = (_3008 * _2956.y) + _2915;
                        _2848 = (_3008 * _2956.z) + _2916;
                        _2843 = (_3089 * _2973.x) + _2911;
                        _2844 = (_3089 * _2973.y) + _2912;
                        _2845 = (_3089 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_67_pred = _2848;
                    frontier_phi_67_pred_1 = _2847;
                    frontier_phi_67_pred_2 = _2846;
                    frontier_phi_67_pred_3 = _2845;
                    frontier_phi_67_pred_4 = _2844;
                    frontier_phi_67_pred_5 = _2843;
                }
                _2654 = frontier_phi_67_pred;
                _2652 = frontier_phi_67_pred_1;
                _2650 = frontier_phi_67_pred_2;
                _2648 = frontier_phi_67_pred_3;
                _2646 = frontier_phi_67_pred_4;
                _2644 = frontier_phi_67_pred_5;
                uint _2794 = _2793 + 1u;
                if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2787 = _2644;
                    _2788 = _2646;
                    _2789 = _2648;
                    _2790 = _2650;
                    _2791 = _2652;
                    _2792 = _2654;
                    _2793 = _2794;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((4294967295u << _2660) & _2525) == 0u)
        {
            _2755 = _2643;
            _2757 = _2645;
            _2759 = _2647;
            _2761 = _2649;
            _2763 = _2651;
            _2765 = _2653;
        }
        else
        {
            float _2780 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
            float _2781 = _2780 * _2479;
            float _2782 = _2780 * _2480;
            float _2783 = _2780 * _2481;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2894 = _2643;
                float _2895 = _2645;
                float _2896 = _2647;
                float _2897 = _2649;
                float _2898 = _2651;
                float _2899 = _2653;
                uint _2900 = _2660;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2910)
                    {
                        frontier_phi_73_pred = _2899;
                        frontier_phi_73_pred_1 = _2898;
                        frontier_phi_73_pred_2 = _2897;
                        frontier_phi_73_pred_3 = _2896;
                        frontier_phi_73_pred_4 = _2895;
                        frontier_phi_73_pred_5 = _2894;
                    }
                    else
                    {
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        uint _3113 = _2909;
                        uint _3114;
                        vec4 _3139;
                        float _3140;
                        vec4 _3155;
                        vec3 _3167;
                        vec4 _3182;
                        vec4 _3197;
                        float _3243;
                        bool _3244;
                        for (;;)
                        {
                            uint _3124 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3113));
                            _3114 = (_3113 + 4294967295u) & _3113;
                            uint _3126 = _3124 * 40u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3140 = _3139.w;
                            uint _3142 = (_3124 * 40u) + 4u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3124 * 40u) + 8u;
                            _3167 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x));
                            uint _3169 = (_3124 * 40u) + 16u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3124 * 40u) + 20u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3124 * 40u) + 24u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3218 = (_3124 * 40u) + 28u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3243 = fma(_2481, _3231.z, fma(_2480, _3231.y, _3231.x * _2479)) + _3231.w;
                            _3244 = !((fma(_2481, _3212.z, fma(_2480, _3212.y, _3212.x * _2479)) + _3212.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3244)
                            {
                                float _3271 = _3139.x - _2479;
                                float _3272 = _3139.y - _2480;
                                float _3273 = _3139.z - _2481;
                                float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                                float _3277 = inversesqrt(_3274);
                                float _3278 = _3277 * _3271;
                                float _3279 = _3277 * _3272;
                                float _3280 = _3277 * _3273;
                                float _3284 = 1.0 - (_3274 / (_3140 * _3140));
                                float _4356 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3289 = sqrt(_3274) * _3155.w;
                                float _3291 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                                float _3292 = _3291 * _3291;
                                float _3295 = ((1.0 - _3292) * dot(vec3(_3278, _3279, _3280), vec3(_675, _678, _681))) + _3292;
                                float _3298 = _3289 * _3289;
                                float _3302 = (fma(_2481, _3182.z, fma(_2480, _3182.y, _3182.x * _2479)) + _3182.w) / _3243;
                                float _3303 = (fma(_2481, _3197.z, fma(_2480, _3197.y, _3197.x * _2479)) + _3197.w) / _3243;
                                float _3307 = 1.0 - dot(vec2(_3302, _3303), vec2(_3302, _3303));
                                float _4372 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3309 = _3308 * (((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3285) / ((_3298 * 0.699999988079071044921875) + 1.0));
                                float _3321 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                                float _3322 = 1.0 - _795;
                                float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                                float _3330 = _3329 * _3329;
                                float _3331 = _3330 * _3330;
                                float _3332 = _3278 - _2781;
                                float _3333 = _3279 - _2782;
                                float _3334 = _3280 - _2783;
                                float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                                float _3342 = dot(vec3(_675, _678, _681), vec3((-0.0) - _2781, (-0.0) - _2782, (-0.0) - _2783));
                                float _4383 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3346 = dot(vec3(_675, _678, _681), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                                float _4394 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                                float _3354 = _3291 * _3330;
                                float _3355 = _3354 * _3354;
                                float _3361 = ((1.0 - _3355) * dot(vec3(_675, _678, _681), vec3(_3278, _3279, _3280))) + _3355;
                                float _4405 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3363 = 1.0 - _3330;
                                float _3373 = (0.5 / (((_3362 * ((_3345 * _3363) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3330) * _3345))) * _3362;
                                float _4416 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = (_3308 * _3285) * (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) / ((_3353 * _3353) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3309 * _3155.y;
                                frontier_phi_79_pred_1 = _3309 * _3155.x;
                                frontier_phi_79_pred_2 = _3383 * _3167.z;
                                frontier_phi_79_pred_3 = _3383 * _3167.y;
                                frontier_phi_79_pred_4 = _3383 * _3167.x;
                                frontier_phi_79_pred_5 = _3309 * _3155.z;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3391 = frontier_phi_79_pred;
                            _3390 = frontier_phi_79_pred_1;
                            _3389 = frontier_phi_79_pred_2;
                            _3388 = frontier_phi_79_pred_3;
                            _3387 = frontier_phi_79_pred_4;
                            _3392 = frontier_phi_79_pred_5;
                            _3097 = _3390 + _3110;
                            _3098 = _3391 + _3111;
                            _3099 = _3392 + _3112;
                            _3094 = _3387 + _3107;
                            _3095 = _3388 + _3108;
                            _3096 = _3389 + _3109;
                            if (_3114 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3114;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3099;
                        frontier_phi_73_pred_1 = _3098;
                        frontier_phi_73_pred_2 = _3097;
                        frontier_phi_73_pred_3 = _3096;
                        frontier_phi_73_pred_4 = _3095;
                        frontier_phi_73_pred_5 = _3094;
                    }
                    _2766 = frontier_phi_73_pred;
                    _2764 = frontier_phi_73_pred_1;
                    _2762 = frontier_phi_73_pred_2;
                    _2760 = frontier_phi_73_pred_3;
                    _2758 = frontier_phi_73_pred_4;
                    _2756 = frontier_phi_73_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2756;
                        _2895 = _2758;
                        _2896 = _2760;
                        _2897 = _2762;
                        _2898 = _2764;
                        _2899 = _2766;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2766;
                frontier_phi_61_62_ladder_1 = _2764;
                frontier_phi_61_62_ladder_2 = _2760;
                frontier_phi_61_62_ladder_3 = _2758;
                frontier_phi_61_62_ladder_4 = _2756;
                frontier_phi_61_62_ladder_5 = _2762;
            }
            else
            {
                frontier_phi_61_62_ladder = _2653;
                frontier_phi_61_62_ladder_1 = _2651;
                frontier_phi_61_62_ladder_2 = _2647;
                frontier_phi_61_62_ladder_3 = _2645;
                frontier_phi_61_62_ladder_4 = _2643;
                frontier_phi_61_62_ladder_5 = _2649;
            }
            _2755 = frontier_phi_61_62_ladder_4;
            _2757 = frontier_phi_61_62_ladder_3;
            _2759 = frontier_phi_61_62_ladder_2;
            _2761 = frontier_phi_61_62_ladder_5;
            _2763 = frontier_phi_61_62_ladder_1;
            _2765 = frontier_phi_61_62_ladder;
        }
        float _2770 = isnan(1.0) ? _779 : (isnan(_779) ? 1.0 : min(_779, 1.0));
        _2537 = (_2770 * _2761) + _1971;
        _2539 = (_2770 * _2763) + _1973;
        _2541 = (_2770 * _2765) + _1975;
        _2543 = ((_2755 * _764) * _2770) + _2319;
        _2545 = ((_2757 * _766) * _2770) + _2321;
        _2547 = ((_2759 * _767) * _2770) + _2323;
    }
    else
    {
        _2537 = _1971;
        _2539 = _1973;
        _2541 = _1975;
        _2543 = _2319;
        _2545 = _2321;
        _2547 = _2323;
    }
    vec4 _2553 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4432 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4443 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4454 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2577 = (((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2537 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _779))) + ((_2543 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1589)) * cbPerFrame._m0[3u].x)) + (_2553.x * cbMtdParam._m0[3u].x);
    float _2579 = ((_2553.y * cbMtdParam._m0[3u].x) + ((_2545 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1589)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2539 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _779)));
    float _2581 = ((_2553.z * cbMtdParam._m0[3u].x) + ((_2547 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1589)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2541 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _779)));
    uint _2585 = _707 + 6u;
    float _2593 = _651 / cbSceneParam._m0[86u].x;
    float _2594 = _652 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2669 = _2668 / _585;
        float _2680 = _2669 * _636;
        float _2681 = _637 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2683 = _2669 * _638;
        float _2685 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2681;
        float _2693 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2682 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2816 = 1.0 / cbSceneParam._m0[80u].x;
            float _2817 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2818 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            _2856 = ((abs(_2693 / _2682) * cbSceneParam._m0[80u].y) * ((((_2827 - _2828) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))))) * _2816)) - ((exp2(_2703 * _2827) - exp2(_2703 * _2828)) * _2816))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2613);
        _2705 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2707 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2709 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2711 = _2867 * _2613;
    }
    else
    {
        _2705 = _2610;
        _2707 = _2611;
        _2709 = _2612;
        _2711 = _2613;
    }
    float _2723 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2724 = _2723 == 3.0;
    float _2725 = log2(_2711);
    float _2732 = exp2(_2725 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)));
    float _2733 = exp2(_2725 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)));
    float _2734 = exp2(_2725 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)));
    float _2743 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2743 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.y = _2743 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.z = _2743 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


