#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1260;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244;
    float _245;
    float _246;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
    }
    else
    {
        _244 = _230;
        _245 = _231;
        _246 = _232;
    }
    vec4 _273 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _284 = exp2(log2(_273.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _285;
    float _287;
    float _289;
    if (_284)
    {
        _285 = cbMtdParam._m0[19u].x;
        _287 = cbMtdParam._m0[19u].y;
        _289 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _285 = cbMtdParam._m0[18u].x;
        _287 = cbMtdParam._m0[18u].y;
        _289 = cbMtdParam._m0[18u].z;
    }
    float _295;
    if (_284)
    {
        _295 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _295 = cbMtdParam._m0[20u].z;
    }
    float _301;
    float _303;
    if (_284)
    {
        _301 = cbMtdParam._m0[28u].z;
        _303 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _301 = cbMtdParam._m0[24u].x;
        _303 = cbMtdParam._m0[24u].y;
    }
    float _305 = _301 * TEXCOORD.x;
    float _306 = _303 * TEXCOORD.y;
    float _318 = floor(_295);
    vec4 _321 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _305) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _306) + cbTextureTilingScale._m0[8u].w, _318));
    vec4 _343 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _352 = (((_285 * cbMtdParam._m0[20u].w) * _321.x) * cbMtdParam._m0[9u].x) * _343.x;
    float _356 = (((_287 * cbMtdParam._m0[20u].w) * _321.y) * cbMtdParam._m0[9u].y) * _343.y;
    float _360 = (((_289 * cbMtdParam._m0[20u].w) * _321.z) * cbMtdParam._m0[9u].z) * _343.z;
    float _372 = cbMtdParam._m0[24u].z * TEXCOORD.x;
    float _373 = cbMtdParam._m0[24u].w * TEXCOORD.y;
    vec4 _385 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _372) + cbTextureTilingScale._m0[3u].z, (_373 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    vec4 _407 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _411 = _407.z;
    float _412 = _407.w;
    float _417 = exp2(log2(_412 * cbMtdParam._m0[22u].z) * cbMtdParam._m0[22u].y);
    float _424 = (_417 * ((_385.x * cbMtdParam._m0[10u].x) - _352)) + _352;
    float _425 = (_417 * ((_385.y * cbMtdParam._m0[10u].y) - _356)) + _356;
    float _426 = (_417 * ((_385.z * cbMtdParam._m0[10u].z) - _360)) + _360;
    vec4 _439 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _463 = exp2(log2(cbMtdParam._m0[20u].x * _343.w) * cbMtdParam._m0[21u].w);
    float _464 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
    float _473 = (_465 * ((cbMtdParam._m0[11u].x * _439.x) - _424)) + _424;
    float _474 = (_465 * ((cbMtdParam._m0[11u].y * _439.y) - _425)) + _425;
    float _475 = (_465 * ((cbMtdParam._m0[11u].z * _439.z) - _426)) + _426;
    float _193[2];
    float _194[2];
    _193[0u] = cbMtdParam._m0[27u].z;
    _194[0u] = cbMtdParam._m0[27u].w;
    _193[1u] = cbMtdParam._m0[28u].x;
    _194[1u] = cbMtdParam._m0[28u].y;
    float _507 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _509 = uint(int(isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0))));
    float _514 = _194[_509] + texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w, _318)).x;
    float _517 = ((cbMtdParam._m0[23u].y - _514) * _417) + _514;
    float _524 = (_517 + _412) + ((cbMtdParam._m0[22u].x - _517) * _465);
    vec4 _542 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w, _318));
    float _549 = (_542.x * 2.0) + (-1.0);
    float _550 = (_542.y * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3918 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))));
    float _565 = (cbMtdParam._m0[21u].x * (((_411 * 2.0) * (_542.z + _193[_509])) - _411)) + _411;
    vec4 _578 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * _372) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _373) + cbTextureTilingScale._m0[6u].w));
    float _585 = (_578.x * 2.0) + (-1.0);
    float _586 = (_578.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3929 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _599 = (((_578.z - _565) + cbMtdParam._m0[23u].z) * _417) + _565;
    vec4 _612 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _619 = (_612.x * 2.0) + (-1.0);
    float _620 = (_612.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3940 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _631 = (((_612.z - _599) + cbMtdParam._m0[23u].w) * _465) + _599;
    float _635 = (cbMtdParam._m0[21u].y * ((_407.x * 2.0) + (-1.0))) + _549;
    float _636 = (cbMtdParam._m0[21u].y * ((_407.y * 2.0) + (-1.0))) + _550;
    float _643 = ((_585 - _635) * _417) + _635;
    float _644 = ((_586 - _636) * _417) + _636;
    float _645 = ((sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) - _556) * _417) + _556;
    float _652 = ((_619 - _643) * _465) + _643;
    float _653 = ((_620 - _644) * _465) + _644;
    float _654 = ((sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) - _645) * _465) + _645;
    float _657 = fma(_654, _244, fma(_653, _236 * TANGENT.x, (_222 * _214) * _652));
    float _660 = fma(_654, _245, fma(_653, _236 * TANGENT.y, (_222 * _215) * _652));
    float _663 = fma(_654, _246, fma(_653, _236 * TANGENT.z, (_222 * _216) * _652));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3951 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _671 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3973 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3984 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3995 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _675 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _741 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _731);
    float _742 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _731);
    float _743 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _731);
    float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
    float _748 = _741 * _747;
    float _749 = _742 * _747;
    float _750 = _743 * _747;
    float _756 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _757 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _759 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _761 = _759.w;
    float _779 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _782 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _785 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    vec4 _787 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _798 = (((_787.y - _671) + (_787.w * _671)) * cbMtdParam._m0[3u].x) + _671;
    uint _811 = uint(roundEven(NORMAL.w)) * 13u;
    uint _814 = (_811 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_814].z;
    float _4006 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    vec4 _826 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _831 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _842 = (((_831.x - _675) + (_831.w * _675)) * cbMtdParam._m0[3u].x) + _675;
    float _855 = (cbMtdParam._m0[3u].x * (((_823 * _761) - _823) + _826.x)) + _823;
    float _856 = (cbMtdParam._m0[3u].x * (((_824 * _761) - _824) + _826.y)) + _824;
    float _857 = (cbMtdParam._m0[3u].x * (((_825 * _761) - _825) + _826.z)) + _825;
    float _858 = 1.0 - _842;
    float _859 = _858 * _855;
    float _860 = _858 * _856;
    float _861 = _858 * _857;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _842;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _842;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _842;
    float _869 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    float _872 = _868 + 0.039999999105930328369140625;
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _756, cbSceneParam._m0[86u].y * _757));
    float _884 = _881.x * TEXCOORD_4;
    float _885 = dot(vec3(_668, _669, _670), vec3(_748, _749, _750));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _668) - _748;
    float _893 = (_888 * _669) - _749;
    float _894 = (_888 * _670) - _750;
    float _898 = abs(dot(vec3(_748, _749, _750), vec3(_668, _669, _670)));
    float _4039 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_798);
    float _913 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _919 = (1.0 - _913) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _920 = _913 * _900;
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_956, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948));
        float _988 = fma(_956, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948));
        float _992 = fma(_956, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948));
        float _1017 = _948 + _668;
        float _1018 = _952 + _669;
        float _1019 = _956 + _670;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_668, _669, _670), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4087 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_668, _669, _670), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4120 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_668, _669, _670), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4153 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_956, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _948));
        float _1304 = fma(_956, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _948));
        float _1308 = fma(_956, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _948));
        float _1331 = _948 + _668;
        float _1332 = _952 + _669;
        float _1333 = _956 + _670;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_668, _669, _670), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4216 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_668, _669, _670), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4249 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_668, _669, _670), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4282 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1260;
        _1570 = _1260;
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1272)) + _1272;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1273)) + _1273;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1274)) + _1274;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _892 * 0.5;
    float _1638 = _893 * 0.5;
    float _1639 = _894 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _798);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_956, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_956, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_956, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1769 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1772 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1800 = frontier_phi_22_20_ladder;
        }
        float _1972;
        if (_1769 > 0.0)
        {
            _1972 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1972 = frontier_phi_31_27_ladder;
        }
        float _2268;
        if (_1772 > 0.0)
        {
            _2268 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2268 = frontier_phi_43_38_ladder;
        }
        float _2270 = isnan(_1972) ? _1800 : (isnan(_1800) ? _1972 : min(_1800, _1972));
        float _2271 = isnan(_2268) ? _2270 : (isnan(_2270) ? _2268 : min(_2270, _2268));
        float _2275 = (_2271 * _1766) + _1755;
        float _2276 = (_2271 * _1769) + _1759;
        float _2277 = (_2271 * _1772) + _1763;
        float _2278 = _2271 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2278;
        float _2282 = _2278 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 > _2282) || ((_2276 < _2280) || ((_2275 < _2280) || (_2275 > _2282))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2277, cbModelParam._m0[9u].z, fma(_2276, cbModelParam._m0[9u].y, _2275 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2277, cbModelParam._m0[10u].z, fma(_2276, cbModelParam._m0[10u].y, _2275 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2277, cbModelParam._m0[11u].z, fma(_2276, cbModelParam._m0[11u].y, _2275 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_21_43_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_21_43_ladder_2;
        _1790 = frontier_phi_21_43_ladder_1;
        _1792 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1706);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _798);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_956, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_956, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_956, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1864 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1867 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _1977;
        if (_1861 > 0.0)
        {
            _1977 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1977 = frontier_phi_33_29_ladder;
        }
        float _2295;
        if (_1864 > 0.0)
        {
            _2295 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2295 = frontier_phi_45_40_ladder;
        }
        float _2633;
        if (_1867 > 0.0)
        {
            _2633 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2633 = frontier_phi_55_52_ladder;
        }
        float _2635 = isnan(_2295) ? _1977 : (isnan(_1977) ? _2295 : min(_1977, _2295));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _1861) + _1850;
        float _2641 = (_2636 * _1864) + _1854;
        float _2642 = (_2636 * _1867) + _1858;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2644 = (-1.0) - _2643;
        float _2646 = _2643 + 1.0;
        float frontier_phi_30_55_ladder;
        float frontier_phi_30_55_ladder_1;
        float frontier_phi_30_55_ladder_2;
        if ((_2642 > _2646) || ((_2642 < _2644) || ((_2641 > _2646) || ((_2641 < _2644) || ((_2640 < _2644) || (_2640 > _2646))))))
        {
            frontier_phi_30_55_ladder = 0.0;
            frontier_phi_30_55_ladder_1 = 0.0;
            frontier_phi_30_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2642, cbModelParam._m0[17u].z, fma(_2641, cbModelParam._m0[17u].y, _2640 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2642, cbModelParam._m0[18u].z, fma(_2641, cbModelParam._m0[18u].y, _2640 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2642, cbModelParam._m0[19u].z, fma(_2641, cbModelParam._m0[19u].y, _2640 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_30_55_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_30_55_ladder_2;
        _1888 = frontier_phi_30_55_ladder_1;
        _1890 = frontier_phi_30_55_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1797);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1903 = (((_919 * _869) + _920) * _884) * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1905 = (((_919 * _871) + _920) * _884) * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1907 = (((_919 * _872) + _920) * _884) * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    float _1951 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1955 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1959 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1964 = _1951 / _1963;
    float _1965 = _1955 / _1963;
    float _1966 = _1959 / _1963;
    float _2113;
    float _2114;
    float _2115;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1993 = ((uint(_1966 > cbSceneParam._m0[59u].y) + uint(_1966 > cbSceneParam._m0[59u].x)) + uint(_1966 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1994 = _1993 + 43u;
        uint _2002 = _1993 + 44u;
        uint _2010 = _1993 + 45u;
        uint _2018 = _1993 + 46u;
        float _2029 = fma(_1963, cbSceneParam._m0[_1994].w, fma(_1959, cbSceneParam._m0[_1994].z, fma(_1955, cbSceneParam._m0[_1994].y, _1951 * cbSceneParam._m0[_1994].x)));
        float _2033 = fma(_1963, cbSceneParam._m0[_2002].w, fma(_1959, cbSceneParam._m0[_2002].z, fma(_1955, cbSceneParam._m0[_2002].y, _1951 * cbSceneParam._m0[_2002].x)));
        float _2041 = fma(_1963, cbSceneParam._m0[_2018].w, fma(_1959, cbSceneParam._m0[_2018].z, fma(_1955, cbSceneParam._m0[_2018].y, _1951 * cbSceneParam._m0[_2018].x)));
        float _2046 = cbSceneParam._m0[33u].z * _2041;
        float _2048 = cbSceneParam._m0[33u].w * _2041;
        float _2051 = fma(_1963, cbSceneParam._m0[_2010].w, fma(_1959, cbSceneParam._m0[_2010].z, fma(_1955, cbSceneParam._m0[_2010].y, _1951 * cbSceneParam._m0[_2010].x))) / _2041;
        float _2099 = (cbSceneParam._m0[33u].x - sqrt(((_1965 * _1965) + (_1964 * _1964)) + (_1966 * _1966))) * cbSceneParam._m0[33u].y;
        float _4408 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2106 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 + _2029) / _2041, (_2048 + _2033) / _2041), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 + _2029) / _2041, (_2033 - _2046) / _2041), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 - _2046) / _2041, (_2033 - _2048) / _2041), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 - _2048) / _2041, (_2046 + _2033) / _2041), _2051), 0.0)).x), vec4(0.25)));
        _2113 = 1.0 - (_2106 * cbSceneParam._m0[34u].x);
        _2114 = 1.0 - (_2106 * cbSceneParam._m0[34u].y);
        _2115 = 1.0 - (_2106 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2113 = 1.0;
        _2114 = 1.0;
        _2115 = 1.0;
    }
    float _2179;
    float _2181;
    float _2183;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2167 = fma(_1963, cbSceneParam._m0[63u].w, fma(_1959, cbSceneParam._m0[63u].z, fma(_1955, cbSceneParam._m0[63u].y, _1951 * cbSceneParam._m0[63u].x)));
        float _2168 = fma(_1963, cbSceneParam._m0[60u].w, fma(_1959, cbSceneParam._m0[60u].z, fma(_1955, cbSceneParam._m0[60u].y, _1951 * cbSceneParam._m0[60u].x))) / _2167;
        float _2169 = fma(_1963, cbSceneParam._m0[61u].w, fma(_1959, cbSceneParam._m0[61u].z, fma(_1955, cbSceneParam._m0[61u].y, _1951 * cbSceneParam._m0[61u].x))) / _2167;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_2168 >= cbSceneParam._m0[64u].x) && (_2169 >= cbSceneParam._m0[64u].y)) && (_2168 <= cbSceneParam._m0[64u].z)) && (_2169 <= cbSceneParam._m0[64u].w))
        {
            float _2308 = fma(_1963, cbSceneParam._m0[62u].w, fma(_1959, cbSceneParam._m0[62u].z, fma(_1955, cbSceneParam._m0[62u].y, _1951 * cbSceneParam._m0[62u].x))) / _2167;
            float _2312 = isnan(cbSceneParam._m0[41u].w) ? _2308 : (isnan(_2308) ? cbSceneParam._m0[41u].w : max(_2308, cbSceneParam._m0[41u].w));
            float _2355 = (cbSceneParam._m0[33u].x - sqrt(((_1965 * _1965) + (_1964 * _1964)) + (_1966 * _1966))) * cbSceneParam._m0[33u].y;
            float _4424 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
            float _2362 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2168, cbSceneParam._m0[33u].w + _2169), _2312), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2168, _2169 - cbSceneParam._m0[33u].z), _2312), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2168 - cbSceneParam._m0[33u].z, _2169 - cbSceneParam._m0[33u].w), _2312), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2168 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2169), _2312), 0.0)).x), vec4(0.25)));
            float _2366 = 1.0 - (_2362 * cbSceneParam._m0[34u].x);
            float _2367 = 1.0 - (_2362 * cbSceneParam._m0[34u].y);
            float _2368 = 1.0 - (_2362 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2368) ? _2115 : (isnan(_2115) ? _2368 : min(_2115, _2368));
            frontier_phi_42_41_ladder_1 = isnan(_2367) ? _2114 : (isnan(_2114) ? _2367 : min(_2114, _2367));
            frontier_phi_42_41_ladder_2 = isnan(_2366) ? _2113 : (isnan(_2113) ? _2366 : min(_2113, _2366));
        }
        else
        {
            frontier_phi_42_41_ladder = _2115;
            frontier_phi_42_41_ladder_1 = _2114;
            frontier_phi_42_41_ladder_2 = _2113;
        }
        _2179 = frontier_phi_42_41_ladder_2;
        _2181 = frontier_phi_42_41_ladder_1;
        _2183 = frontier_phi_42_41_ladder;
    }
    else
    {
        _2179 = _2113;
        _2181 = _2114;
        _2183 = _2115;
    }
    uvec4 _2188 = floatBitsToUint(cbInstanceData._m0[_811 + 5u]);
    uint _2190 = _2188.x * 14u;
    uint _2191 = _2190 + 13u;
    float _2198 = _884 + (-1.0);
    float _2203 = (cbLight._m0[_2191].x * _2198) + 1.0;
    float _2204 = (cbLight._m0[_2191].y * _2198) + 1.0;
    float _2205 = (cbLight._m0[_2191].z * _2198) + 1.0;
    float _2206 = (cbLight._m0[_2191].w * _2198) + 1.0;
    uint _2207 = _2190 + 5u;
    float _2213 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2217 = _2190 + 4u;
    float _2227 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2231 = _2190 | 1u;
    float _2242 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_668, _669, _670));
    float _2245 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_668, _669, _670));
    float _4460 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _4471 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2250 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 0.3183098733425140380859375;
    float _2252 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2259 = ((cbLight._m0[_2207].x * _2213) * _2252) + (((cbLight._m0[_2217].x * _2179) * _2227) * _2250);
    float _2260 = ((_2213 * cbLight._m0[_2207].y) * _2252) + (((cbLight._m0[_2217].y * _2181) * _2227) * _2250);
    float _2261 = ((_2213 * cbLight._m0[_2207].z) * _2252) + (((cbLight._m0[_2217].z * _2183) * _2227) * _2250);
    uvec4 _2265 = floatBitsToUint(cbLight._m0[_2190 + 12u]);
    bool _2267 = _2265.x == 0u;
    float _2369;
    float _2371;
    float _2373;
    if (_2267)
    {
        _2369 = _2259;
        _2371 = _2260;
        _2373 = _2261;
    }
    else
    {
        uint _2377 = _2190 + 6u;
        float _2393 = (dot(vec3(cbLight._m0[_2190 + 2u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4482 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2396 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2369 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2259;
        _2371 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2260;
        _2373 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2261;
    }
    bool _2376 = _2265.y == 0u;
    float _2431;
    float _2433;
    float _2435;
    if (_2376)
    {
        _2431 = _2369;
        _2433 = _2371;
        _2435 = _2373;
    }
    else
    {
        uint _2604 = _2190 + 7u;
        float _2620 = (dot(vec3(cbLight._m0[_2190 + 3u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2621 = _2620 * _2620;
        float _4498 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2622 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2623 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2431 = (((cbLight._m0[_2604].x * 0.3183098733425140380859375) * _2622) * _2623) + _2369;
        _2433 = (((cbLight._m0[_2604].y * 0.3183098733425140380859375) * _2622) * _2623) + _2371;
        _2435 = (((cbLight._m0[_2604].z * 0.3183098733425140380859375) * _2622) * _2623) + _2373;
    }
    uint _2438 = _2190 + 8u;
    float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _798) * 0.949999988079071044921875);
    float _2452 = _2451 * _2451;
    float _2453 = cbLight._m0[_2190].x + _748;
    float _2454 = cbLight._m0[_2190].y + _749;
    float _2455 = cbLight._m0[_2190].z + _750;
    float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
    float _2460 = _2459 * _2453;
    float _2461 = _2459 * _2454;
    float _2462 = _2459 * _2455;
    float _2463 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2190].xyz));
    float _4514 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _4525 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2467 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2468 = dot(vec3(_668, _669, _670), vec3(_2460, _2461, _2462));
    float _4536 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2460, _2461, _2462));
    float _4547 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2452 * _2452;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
    float _2489 = 0.959999978542327880859375 - _866;
    float _2491 = 0.959999978542327880859375 - _867;
    float _2492 = 0.959999978542327880859375 - _868;
    float _2499 = 1.0 - _2452;
    float _2510 = (0.5 / (((_2467 * ((_2466 * _2499) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2499) + _2452) * _2466))) * _2466;
    float _4558 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2512 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    uint _2526 = _2190 + 9u;
    float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _798) * 0.949999988079071044921875);
    float _2538 = _2537 * _2537;
    float _2539 = cbLight._m0[_2231].x + _748;
    float _2540 = cbLight._m0[_2231].y + _749;
    float _2541 = cbLight._m0[_2231].z + _750;
    float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
    float _2546 = _2545 * _2539;
    float _2547 = _2545 * _2540;
    float _2548 = _2545 * _2541;
    float _2549 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2231].xyz));
    float _4569 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2553 = dot(vec3(_668, _669, _670), vec3(_2546, _2547, _2548));
    float _4580 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2557 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2546, _2547, _2548));
    float _4591 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2561 = _2538 * _2538;
    float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
    float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2579 = 1.0 - _2538;
    float _2589 = (0.5 / (((_2467 * ((_2552 * _2579) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2579) + _2538) * _2552))) * _2552;
    float _4602 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2591 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
    float _2601 = (((((_2572 * _2489) + _869) * cbLight._m0[_2526].x) * _2591) * _2213) + ((((cbLight._m0[_2438].x * _2179) * ((_2488 * _2489) + _869)) * _2512) * _2227);
    float _2602 = (((((_2572 * _2491) + _871) * cbLight._m0[_2526].y) * _2591) * _2213) + ((((cbLight._m0[_2438].y * _2181) * ((_2488 * _2491) + _871)) * _2512) * _2227);
    float _2603 = (((((_2572 * _2492) + _872) * cbLight._m0[_2526].z) * _2591) * _2213) + ((((cbLight._m0[_2438].z * _2183) * ((_2488 * _2492) + _872)) * _2512) * _2227);
    float _2659;
    float _2661;
    float _2663;
    if (_2267)
    {
        _2659 = _2601;
        _2661 = _2602;
        _2663 = _2603;
    }
    else
    {
        uint _2665 = _2190 + 2u;
        uint _2669 = _2190 + 10u;
        float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2665].w)) * _798) * 0.949999988079071044921875);
        float _2684 = _2683 * _2683;
        float _2685 = cbLight._m0[_2665].x + _748;
        float _2686 = cbLight._m0[_2665].y + _749;
        float _2687 = cbLight._m0[_2665].z + _750;
        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
        float _2692 = _2691 * _2685;
        float _2693 = _2691 * _2686;
        float _2694 = _2691 * _2687;
        float _2695 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2665].xyz));
        float _4613 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2699 = dot(vec3(_668, _669, _670), vec3(_2692, _2693, _2694));
        float _4624 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2703 = dot(vec3(cbLight._m0[_2665].xyz), vec3(_2692, _2693, _2694));
        float _4635 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2707 = _2684 * _2684;
        float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
        float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
        float _2725 = 1.0 - _2684;
        float _2735 = (0.5 / (((_2467 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2725) + _2684) * _2698))) * _2698;
        float _4646 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2659 = (((((_2718 * _2489) + _869) * cbLight._m0[_2669].x) * _2737) * _2738) + _2601;
        _2661 = (((((_2718 * _2491) + _871) * cbLight._m0[_2669].y) * _2737) * _2738) + _2602;
        _2663 = (((((_2718 * _2492) + _872) * cbLight._m0[_2669].z) * _2737) * _2738) + _2603;
    }
    float _2769;
    float _2771;
    float _2773;
    if (_2376)
    {
        _2769 = _2659;
        _2771 = _2661;
        _2773 = _2663;
    }
    else
    {
        uint _2780 = _2190 + 3u;
        uint _2784 = _2190 + 11u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _798) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _748;
        float _2801 = cbLight._m0[_2780].y + _749;
        float _2802 = cbLight._m0[_2780].z + _750;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2780].xyz));
        float _4662 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2814 = dot(vec3(_668, _669, _670), vec3(_2807, _2808, _2809));
        float _4673 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4684 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2467 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2840) + _2799) * _2813))) * _2813;
        float _4695 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2769 = (((((_2833 * _2489) + _869) * cbLight._m0[_2784].x) * _2852) * _2853) + _2659;
        _2771 = (((((_2833 * _2491) + _871) * cbLight._m0[_2784].y) * _2852) * _2853) + _2661;
        _2773 = (((((_2833 * _2492) + _872) * cbLight._m0[_2784].z) * _2852) * _2853) + _2663;
    }
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_2188.y == 0u)
    {
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.x;
        uint _2886 = uint((float(_2874.y) * floor(float(uint(cbSceneParam._m0[85u].y * _757) / _2875))) + floor(float(uint(cbSceneParam._m0[85u].x * _756) / _2875)));
        float _2896 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2897 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        uint _2900 = uint(isnan(14.0) ? _2897 : (isnan(_2897) ? 14.0 : min(_2897, 14.0)));
        uvec4 _2905 = texelFetch(g_lightClusterGridBuffer, int(((_2900 << 2u) + (_2886 << 6u)) >> 2u));
        uint _2906 = _2905.x;
        uint _2907 = _2874.z;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((((1u << ((_2907 >> 4u) & 15u)) + 4294967295u) & _2906) == 0u) || ((_2907 & 240u) == 0u))
        {
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
        }
        else
        {
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            uint _3153 = 0u;
            uint _3162;
            bool _3163;
            for (;;)
            {
                _3162 = texelFetch(g_lightClassification, int((((_2900 << 5u) + (_2886 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                _3163 = _3162 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_3163)
                {
                    frontier_phi_74_pred = _3151;
                    frontier_phi_74_pred_1 = _3152;
                    frontier_phi_74_pred_2 = _3150;
                    frontier_phi_74_pred_3 = _3149;
                    frontier_phi_74_pred_4 = _3148;
                    frontier_phi_74_pred_5 = _3147;
                }
                else
                {
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    uint _3277;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3162;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3281 = uint(findLSB(_3277)) + (_3153 << 5u);
                        uint _3278 = (_3277 + 4294967295u) & _3277;
                        uint _3283 = _3281 * 48u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3303 = (_3281 * 48u) + 4u;
                        vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3322 = (_3281 * 48u) + 8u;
                        vec3 _3333 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x));
                        float _3337 = _3297.x - _1964;
                        float _3338 = _3297.y - _1965;
                        float _3339 = _3297.z - _1966;
                        float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                        float _3343 = inversesqrt(_3340);
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3347 = dot(vec3(_779, _782, _785), vec3(_3344, _3345, _3346));
                        float _3352 = 1.0 - (_3340 * _3297.w);
                        float _4721 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3353 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3354 = sqrt(_3340) * _3316.w;
                        float _3357 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3347) + _3358;
                        float _3364 = _3354 * _3354;
                        float _3368 = ((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3353) / ((_3364 * 0.699999988079071044921875) + 1.0);
                        float _3372 = (-0.0) - _1964;
                        float _3373 = (-0.0) - _1965;
                        float _3374 = (-0.0) - _1966;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3388 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                        float _3389 = 1.0 - _900;
                        float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                        float _3397 = _3396 * _3396;
                        float _3398 = _3397 * _3397;
                        float _3399 = _3379 + _3344;
                        float _3400 = _3380 + _3345;
                        float _3401 = _3381 + _3346;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3409 = dot(vec3(_779, _782, _785), vec3(_3379, _3380, _3381));
                        float _4737 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3413 = dot(vec3(_779, _782, _785), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                        float _4748 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                        float _3421 = _3357 * _3397;
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3347) + _3422;
                        float _4759 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3427 = 1.0 - _3397;
                        float _3437 = (0.5 / (((_3426 * ((_3412 * _3427) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3397) * _3412))) * _3426;
                        float _4770 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3448 = (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3420 * _3420) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125))) * _3353;
                        _3206 = (_3368 * _3316.x) + _3274;
                        _3207 = (_3368 * _3316.y) + _3275;
                        _3208 = (_3368 * _3316.z) + _3276;
                        _3203 = (_3448 * _3333.x) + _3271;
                        _3204 = (_3448 * _3333.y) + _3272;
                        _3205 = (_3448 * _3333.z) + _3273;
                        if (_3278 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3278;
                        }
                    }
                    frontier_phi_74_pred = _3207;
                    frontier_phi_74_pred_1 = _3208;
                    frontier_phi_74_pred_2 = _3206;
                    frontier_phi_74_pred_3 = _3205;
                    frontier_phi_74_pred_4 = _3204;
                    frontier_phi_74_pred_5 = _3203;
                }
                _3012 = frontier_phi_74_pred;
                _3014 = frontier_phi_74_pred_1;
                _3010 = frontier_phi_74_pred_2;
                _3008 = frontier_phi_74_pred_3;
                _3006 = frontier_phi_74_pred_4;
                _3004 = frontier_phi_74_pred_5;
                uint _3154 = _3153 + 1u;
                if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3147 = _3004;
                    _3148 = _3006;
                    _3149 = _3008;
                    _3150 = _3010;
                    _3151 = _3012;
                    _3152 = _3014;
                    _3153 = _3154;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
        }
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.z;
        uint _3020 = (_3018 >> 8u) & 15u;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((4294967295u << _3020) & _2906) == 0u)
        {
            _3115 = _3003;
            _3117 = _3005;
            _3119 = _3007;
            _3121 = _3009;
            _3123 = _3011;
            _3125 = _3013;
        }
        else
        {
            float _3140 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float _3141 = _3140 * _1964;
            float _3142 = _3140 * _1965;
            float _3143 = _3140 * _1966;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_3020 < ((_3018 >> 12u) & 15u))
            {
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3254 = _3003;
                float _3255 = _3005;
                float _3256 = _3007;
                float _3257 = _3009;
                float _3258 = _3011;
                float _3259 = _3013;
                uint _3260 = _3020;
                uint _3269;
                bool _3270;
                for (;;)
                {
                    _3269 = texelFetch(g_lightClassification, int((((_2900 << 5u) + (_2886 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                    _3270 = _3269 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_3270)
                    {
                        frontier_phi_80_pred = _3259;
                        frontier_phi_80_pred_1 = _3258;
                        frontier_phi_80_pred_2 = _3257;
                        frontier_phi_80_pred_3 = _3256;
                        frontier_phi_80_pred_4 = _3254;
                        frontier_phi_80_pred_5 = _3255;
                    }
                    else
                    {
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3466 = _3254;
                        float _3467 = _3255;
                        float _3468 = _3256;
                        float _3469 = _3257;
                        float _3470 = _3258;
                        float _3471 = _3259;
                        uint _3472 = _3269;
                        uint _3473;
                        vec4 _3498;
                        float _3499;
                        vec4 _3514;
                        vec3 _3526;
                        vec4 _3542;
                        vec4 _3557;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3483 = ((_3260 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3472));
                            _3473 = (_3472 + 4294967295u) & _3472;
                            uint _3485 = _3483 * 40u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3499 = _3498.w;
                            uint _3501 = (_3483 * 40u) + 4u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3483 * 40u) + 8u;
                            _3526 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x));
                            uint _3529 = (_3483 * 40u) + 16u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3483 * 40u) + 20u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3483 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3483 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_1966, _3591.z, fma(_1965, _3591.y, _3591.x * _1964)) + _3591.w;
                            _3604 = !((fma(_1966, _3572.z, fma(_1965, _3572.y, _3572.x * _1964)) + _3572.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3498.x - _1964;
                                float _3632 = _3498.y - _1965;
                                float _3633 = _3498.z - _1966;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3499 * _3499));
                                float _4781 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3649 = sqrt(_3634) * _3514.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_779, _782, _785))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_1966, _3542.z, fma(_1965, _3542.y, _3542.x * _1964)) + _3542.w) / _3603;
                                float _3663 = (fma(_1966, _3557.z, fma(_1965, _3557.y, _3557.x * _1964)) + _3557.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4797 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _900;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3141;
                                float _3693 = _3639 - _3142;
                                float _3694 = _3640 - _3143;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_779, _782, _785), vec3((-0.0) - _3141, (-0.0) - _3142, (-0.0) - _3143));
                                float _4808 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3706 = dot(vec3(_779, _782, _785), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4819 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_779, _782, _785), vec3(_3638, _3639, _3640))) + _3715;
                                float _4830 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4841 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _3669 * _3514.z;
                                frontier_phi_86_pred_1 = _3669 * _3514.y;
                                frontier_phi_86_pred_2 = _3669 * _3514.x;
                                frontier_phi_86_pred_3 = _3743 * _3526.z;
                                frontier_phi_86_pred_4 = _3743 * _3526.y;
                                frontier_phi_86_pred_5 = _3743 * _3526.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _3752 = frontier_phi_86_pred;
                            _3751 = frontier_phi_86_pred_1;
                            _3750 = frontier_phi_86_pred_2;
                            _3749 = frontier_phi_86_pred_3;
                            _3748 = frontier_phi_86_pred_4;
                            _3747 = frontier_phi_86_pred_5;
                            _3456 = _3750 + _3469;
                            _3457 = _3751 + _3470;
                            _3458 = _3752 + _3471;
                            _3453 = _3747 + _3466;
                            _3454 = _3748 + _3467;
                            _3455 = _3749 + _3468;
                            if (_3473 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3473;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _3458;
                        frontier_phi_80_pred_1 = _3457;
                        frontier_phi_80_pred_2 = _3456;
                        frontier_phi_80_pred_3 = _3455;
                        frontier_phi_80_pred_4 = _3453;
                        frontier_phi_80_pred_5 = _3454;
                    }
                    _3126 = frontier_phi_80_pred;
                    _3124 = frontier_phi_80_pred_1;
                    _3122 = frontier_phi_80_pred_2;
                    _3120 = frontier_phi_80_pred_3;
                    _3116 = frontier_phi_80_pred_4;
                    _3118 = frontier_phi_80_pred_5;
                    uint _3261 = _3260 + 1u;
                    if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3254 = _3116;
                        _3255 = _3118;
                        _3256 = _3120;
                        _3257 = _3122;
                        _3258 = _3124;
                        _3259 = _3126;
                        _3260 = _3261;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _3126;
                frontier_phi_68_69_ladder_1 = _3124;
                frontier_phi_68_69_ladder_2 = _3122;
                frontier_phi_68_69_ladder_3 = _3120;
                frontier_phi_68_69_ladder_4 = _3118;
                frontier_phi_68_69_ladder_5 = _3116;
            }
            else
            {
                frontier_phi_68_69_ladder = _3013;
                frontier_phi_68_69_ladder_1 = _3011;
                frontier_phi_68_69_ladder_2 = _3009;
                frontier_phi_68_69_ladder_3 = _3007;
                frontier_phi_68_69_ladder_4 = _3005;
                frontier_phi_68_69_ladder_5 = _3003;
            }
            _3115 = frontier_phi_68_69_ladder_5;
            _3117 = frontier_phi_68_69_ladder_4;
            _3119 = frontier_phi_68_69_ladder_3;
            _3121 = frontier_phi_68_69_ladder_2;
            _3123 = frontier_phi_68_69_ladder_1;
            _3125 = frontier_phi_68_69_ladder;
        }
        float _3130 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2918 = (_3130 * _3121) + _2431;
        _2920 = (_3130 * _3123) + _2433;
        _2922 = (_3130 * _3125) + _2435;
        _2924 = ((_3115 * _869) * _3130) + _2769;
        _2926 = ((_3117 * _871) * _3130) + _2771;
        _2928 = ((_3119 * _872) * _3130) + _2773;
    }
    else
    {
        _2918 = _2431;
        _2920 = _2433;
        _2922 = _2435;
        _2924 = _2769;
        _2926 = _2771;
        _2928 = _2773;
    }
    vec4 _2934 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4857 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4868 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4879 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2958 = (((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2918 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _884))) + ((_2924 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1695)) * cbPerFrame._m0[3u].x)) + (_2934.x * cbMtdParam._m0[3u].x);
    float _2960 = ((_2934.y * cbMtdParam._m0[3u].x) + ((_2926 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1695)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2920 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _884)));
    float _2962 = ((_2934.z * cbMtdParam._m0[3u].x) + ((_2928 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1695)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2922 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _884)));
    uint _2966 = _811 + 6u;
    float _2974 = _756 / cbSceneParam._m0[86u].x;
    float _2975 = _757 / cbSceneParam._m0[86u].y;
    vec4 _2989 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2991 = _2989.x;
    float _2992 = _2989.y;
    float _2993 = _2989.z;
    float _2994 = _2989.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _3028 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _3029 = _3028 / _691;
        float _3040 = _3029 * _741;
        float _3041 = _742 * _3029;
        float _3042 = (-0.0) - _3041;
        float _3043 = _3029 * _743;
        float _3045 = (cbSceneParam._m0[77u].w * _3042) / _3028;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3041;
        float _3053 = sqrt(((_3040 * _3040) + (_3041 * _3041)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3028)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3042 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3176 = 1.0 / cbSceneParam._m0[80u].x;
            float _3177 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3178 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            _3216 = ((abs(_3053 / _3042) * cbSceneParam._m0[80u].y) * ((((_3187 - _3188) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))))) * _3176)) - ((exp2(_3063 * _3187) - exp2(_3063 * _3188)) * _3176))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2994);
        _3065 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2991;
        _3067 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2992;
        _3069 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2993;
        _3071 = _3227 * _2994;
    }
    else
    {
        _3065 = _2991;
        _3067 = _2992;
        _3069 = _2993;
        _3071 = _2994;
    }
    float _3083 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3084 = _3083 == 3.0;
    float _3085 = log2(_3071);
    float _3092 = exp2(_3085 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)));
    float _3093 = exp2(_3085 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)));
    float _3094 = exp2(_3085 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)));
    float _3103 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3103 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.y = _3103 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.z = _3103 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
    SV_Target.w = cbInstanceData._m0[_2966].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2966].w;
}


