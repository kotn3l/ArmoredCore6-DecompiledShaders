#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1114;
float _3806;
float _3807;
float _3808;
float _3809;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    float _261 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _274 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_261 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _285 = exp2(log2(_274.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _286;
    float _288;
    float _290;
    if (_285)
    {
        _286 = cbMtdParam._m0[19u].x;
        _288 = cbMtdParam._m0[19u].y;
        _290 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _286 = cbMtdParam._m0[18u].x;
        _288 = cbMtdParam._m0[18u].y;
        _290 = cbMtdParam._m0[18u].z;
    }
    float _296;
    if (_285)
    {
        _296 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _296 = cbMtdParam._m0[20u].z;
    }
    float _302;
    float _304;
    if (_285)
    {
        _302 = cbMtdParam._m0[28u].z;
        _304 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _302 = cbMtdParam._m0[24u].x;
        _304 = cbMtdParam._m0[24u].y;
    }
    float _306 = _302 * TEXCOORD.x;
    float _307 = _304 * TEXCOORD.y;
    float _319 = floor(_296);
    vec4 _322 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _306) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _307) + cbTextureTilingScale._m0[8u].w, _319));
    vec4 _344 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _261) + cbTextureTilingScale._m0[0u].w));
    float _352 = (((_286 * cbMtdParam._m0[20u].w) * _322.x) * cbMtdParam._m0[9u].x) * _344.x;
    float _356 = (((_288 * cbMtdParam._m0[20u].w) * _322.y) * cbMtdParam._m0[9u].y) * _344.y;
    float _360 = (((_290 * cbMtdParam._m0[20u].w) * _322.z) * cbMtdParam._m0[9u].z) * _344.z;
    vec4 _372 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _261) + cbTextureTilingScale._m0[1u].w));
    float _376 = _372.z;
    vec4 _390 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _306) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _307) + cbTextureTilingScale._m0[10u].w, _319));
    float _189[2];
    float _190[2];
    _189[0u] = cbMtdParam._m0[27u].z;
    _190[0u] = cbMtdParam._m0[27u].w;
    _189[1u] = cbMtdParam._m0[28u].x;
    _190[1u] = cbMtdParam._m0[28u].y;
    float _407 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    uint _410 = uint(int(isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0))));
    float _416 = (_390.x + _372.w) + _190[_410];
    vec4 _434 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w, _319));
    float _441 = (_434.x * 2.0) + (-1.0);
    float _442 = (_434.y * 2.0) + (-1.0);
    float _443 = dot(vec2(_441, _442), vec2(_441, _442));
    float _3828 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    float _457 = (cbMtdParam._m0[21u].x * (((_376 * 2.0) * (_434.z + _189[_410])) - _376)) + _376;
    float _461 = (cbMtdParam._m0[21u].y * ((_372.x * 2.0) + (-1.0))) + _441;
    float _462 = (cbMtdParam._m0[21u].y * ((_372.y * 2.0) + (-1.0))) + _442;
    float _465 = fma(_448, _240, fma(_462, _232 * TANGENT.x, (_218 * _210) * _461));
    float _468 = fma(_448, _241, fma(_462, _232 * TANGENT.y, (_218 * _211) * _461));
    float _471 = fma(_448, _242, fma(_462, _232 * TANGENT.z, (_218 * _212) * _461));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    float _3839 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _479 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3861 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3872 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3883 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _483 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _499 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _550 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _540);
    float _551 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _540);
    float _552 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _540);
    float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
    float _557 = _550 * _556;
    float _558 = _551 * _556;
    float _559 = _552 * _556;
    vec4 _564 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _566 = _564.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _794 = sqrt(((_550 * _550) + (_551 * _551)) + (_552 * _552));
        float _800 = (cbMatDynParam._m0[5u].x * _794) + cbMatDynParam._m0[5u].y;
        float _3894 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _805 = (cbMatDynParam._m0[5u].z * _794) + cbMatDynParam._m0[5u].w;
        float _3905 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) - _801)) + _801) < ((_566 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _584 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _586 = _584.w;
    float _606 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _609 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _612 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    vec4 _614 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _625 = (((_614.y - _479) + (_614.w * _479)) * cbMtdParam._m0[3u].x) + _479;
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = _638 + 9u;
    uint _641 = _640 + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3916 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    vec4 _653 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _658 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _669 = (((_658.x - _483) + (_658.w * _483)) * cbMtdParam._m0[3u].x) + _483;
    float _682 = (cbMtdParam._m0[3u].x * (((_650 * _586) - _650) + _653.x)) + _650;
    float _683 = (cbMtdParam._m0[3u].x * (((_651 * _586) - _651) + _653.y)) + _651;
    float _684 = (cbMtdParam._m0[3u].x * (((_652 * _586) - _652) + _653.z)) + _652;
    float _685 = 1.0 - _669;
    float _686 = _685 * _682;
    float _687 = _685 * _683;
    float _688 = _685 * _684;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _669;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _669;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _669;
    float _696 = _693 + 0.039999999105930328369140625;
    float _698 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _711 = _708.x * TEXCOORD_4;
    float _712 = dot(vec3(_476, _477, _478), vec3(_557, _558, _559));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _476) - _557;
    float _720 = (_715 * _477) - _558;
    float _721 = (_715 * _478) - _559;
    float _725 = abs(dot(vec3(_557, _558, _559), vec3(_476, _477, _478)));
    float _3949 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = sqrt(_625);
    float _740 = exp2((_727 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_727 * 3.0));
    float _746 = (1.0 - _740) * ((_727 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _747 = _740 * _727;
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1113;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _838 = fma(_783, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775));
        float _842 = fma(_783, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775));
        float _846 = fma(_783, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775));
        float _871 = _775 + _476;
        float _872 = _779 + _477;
        float _873 = _783 + _478;
        float _883 = fma(_873, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871)) - _838;
        float _884 = fma(_873, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871)) - _842;
        float _885 = fma(_873, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871)) - _846;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_838 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_842 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[34u].z) + ((((((_846 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _941 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_907.x + (-0.5));
        float _943 = _941 * (_907.y + (-0.5));
        float _944 = _941 * (_907.z + (-0.5));
        float _951 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_914.x + (-0.5));
        float _953 = _951 * (_914.y + (-0.5));
        float _954 = _951 * (_914.z + (-0.5));
        float _961 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_921.x + (-0.5));
        float _963 = _961 * (_921.y + (-0.5));
        float _964 = _961 * (_921.z + (-0.5));
        float _971 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_928.x + (-0.5));
        float _973 = _971 * (_928.y + (-0.5));
        float _974 = _971 * (_928.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _995 = (dot(vec3(_476, _477, _478), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1005 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3997 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1007 + 1.0))) + _1012) * _975;
        float _1022 = _943 * 0.5;
        float _1023 = _953 * 0.5;
        float _1024 = _963 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_476, _477, _478), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _4030 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1049 + 1.0))) + _1054) * _976;
        float _1064 = _944 * 0.5;
        float _1065 = _954 * 0.5;
        float _1066 = _964 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_476, _477, _478), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _4063 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1091 + 1.0))) + _1096) * _977;
        _1113 = _944;
        _1115 = _943;
        _1116 = _942;
        _1117 = _954;
        _1118 = _953;
        _1119 = _952;
        _1120 = _964;
        _1121 = _963;
        _1122 = _962;
        _1123 = _977;
        _1124 = _976;
        _1125 = _975;
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _1114;
        _1115 = _1114;
        _1116 = _1114;
        _1117 = _1114;
        _1118 = _1114;
        _1119 = _1114;
        _1120 = _1114;
        _1121 = _1114;
        _1122 = _1114;
        _1123 = _1114;
        _1124 = _1114;
        _1125 = _1114;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1157 = fma(_783, cbModelParam._m0[30u].z, fma(_779, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775));
        float _1161 = fma(_783, cbModelParam._m0[31u].z, fma(_779, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775));
        float _1165 = fma(_783, cbModelParam._m0[32u].z, fma(_779, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775));
        float _1188 = _775 + _476;
        float _1189 = _779 + _477;
        float _1190 = _783 + _478;
        float _1200 = fma(_1190, cbModelParam._m0[30u].z, fma(_1189, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[31u].z, fma(_1189, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[32u].z, fma(_1189, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1157 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1161 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[35u].z) + ((((((_1165 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1256 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1223.x + (-0.5));
        float _1258 = _1256 * (_1223.y + (-0.5));
        float _1259 = _1256 * (_1223.z + (-0.5));
        float _1266 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1230.x + (-0.5));
        float _1268 = _1266 * (_1230.y + (-0.5));
        float _1269 = _1266 * (_1230.z + (-0.5));
        float _1276 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1237.x + (-0.5));
        float _1278 = _1276 * (_1237.y + (-0.5));
        float _1279 = _1276 * (_1237.z + (-0.5));
        float _1286 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1244.x + (-0.5));
        float _1288 = _1286 * (_1244.y + (-0.5));
        float _1289 = _1286 * (_1244.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_476, _477, _478), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4126 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1320 + 1.0))) + _1325) * _1290;
        float _1335 = _1258 * 0.5;
        float _1336 = _1268 * 0.5;
        float _1337 = _1278 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_476, _477, _478), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4159 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1362 + 1.0))) + _1367) * _1291;
        float _1377 = _1259 * 0.5;
        float _1378 = _1269 * 0.5;
        float _1379 = _1279 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_476, _477, _478), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4192 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1404 + 1.0))) + _1409) * _1292;
        _1426 = _1259;
        _1427 = _1258;
        _1428 = _1257;
        _1429 = _1269;
        _1430 = _1268;
        _1431 = _1267;
        _1432 = _1279;
        _1433 = _1278;
        _1434 = _1277;
        _1435 = _1292;
        _1436 = _1291;
        _1437 = _1290;
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1114;
        _1427 = _1114;
        _1428 = _1114;
        _1429 = _1114;
        _1430 = _1114;
        _1431 = _1114;
        _1432 = _1114;
        _1433 = _1114;
        _1434 = _1114;
        _1435 = _1114;
        _1436 = _1114;
        _1437 = _1114;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1126)) + _1126;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1127)) + _1127;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1128)) + _1128;
    float _1473 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1450));
    float _1494 = _719 * 0.5;
    float _1495 = _720 * 0.5;
    float _1496 = _721 * 0.5;
    float _1497 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1500 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1503 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1537;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1510 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1113, _1117, _1120, _1123));
        float _1514 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1518 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1525 = dot(vec4(cbModelParam._m0[39u]), vec4(_1494, _1495, _1496, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1548;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1539 = dot(vec4(cbModelParam._m0[40u]), vec4(_1494, _1495, _1496, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1552 = (_1548 * cbModelParam._m0[1u].x) + (_1537 * (1.0 - cbModelParam._m0[1u].x));
    float _1562 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _625);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1562 : min(cbModelParam._m0[25u].z, _1562));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_783, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_783, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_783, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1626 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1629 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1657 = frontier_phi_25_23_ladder;
        }
        float _1829;
        if (_1626 > 0.0)
        {
            _1829 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1829 = frontier_phi_34_30_ladder;
        }
        float _2125;
        if (_1629 > 0.0)
        {
            _2125 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2125 = frontier_phi_46_41_ladder;
        }
        float _2127 = isnan(_1829) ? _1657 : (isnan(_1657) ? _1829 : min(_1657, _1829));
        float _2128 = isnan(_2125) ? _2127 : (isnan(_2127) ? _2125 : min(_2127, _2125));
        float _2132 = (_2128 * _1623) + _1612;
        float _2133 = (_2128 * _1626) + _1616;
        float _2134 = (_2128 * _1629) + _1620;
        float _2135 = _2128 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2135;
        float _2139 = _2135 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 > _2139) || ((_2133 < _2137) || ((_2132 < _2137) || (_2132 > _2139))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2279 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2134, cbModelParam._m0[9u].z, fma(_2133, cbModelParam._m0[9u].y, _2132 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2134, cbModelParam._m0[10u].z, fma(_2133, cbModelParam._m0[10u].y, _2132 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2134, cbModelParam._m0[11u].z, fma(_2133, cbModelParam._m0[11u].y, _2132 * cbModelParam._m0[11u].x))), _1563);
            frontier_phi_24_46_ladder = _2279.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2279.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2279.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_24_46_ladder_2;
        _1647 = frontier_phi_24_46_ladder_1;
        _1649 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1563);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _625);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1707 = fma(_783, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775)) + cbModelParam._m0[21u].w;
        float _1711 = fma(_783, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775)) + cbModelParam._m0[22u].w;
        float _1715 = fma(_783, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775)) + cbModelParam._m0[23u].w;
        float _1718 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1721 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1724 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1834;
        if (_1718 > 0.0)
        {
            _1834 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1834 = frontier_phi_36_32_ladder;
        }
        float _2152;
        if (_1721 > 0.0)
        {
            _2152 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2152 = frontier_phi_48_43_ladder;
        }
        float _2490;
        if (_1724 > 0.0)
        {
            _2490 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2490 = frontier_phi_58_55_ladder;
        }
        float _2492 = isnan(_2152) ? _1834 : (isnan(_1834) ? _2152 : min(_1834, _2152));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1718) + _1707;
        float _2498 = (_2493 * _1721) + _1711;
        float _2499 = (_2493 * _1724) + _1715;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_33_58_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1743 = frontier_phi_33_58_ladder_2;
        _1745 = frontier_phi_33_58_ladder_1;
        _1747 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1654);
        _1743 = _1727.x * cbModelParam._m0[1u].z;
        _1745 = _1727.y * cbModelParam._m0[1u].z;
        _1747 = _1727.z * cbModelParam._m0[1u].z;
    }
    float _1760 = (((_746 * _696) + _747) * _711) * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1762 = (((_746 * _698) + _747) * _711) * ((cbModelParam._m0[1u].w * (_1745 - _1647)) + _1647);
    float _1764 = (((_746 * _699) + _747) * _711) * ((cbModelParam._m0[1u].w * (_1747 - _1649)) + _1649);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, _1760 * cbSceneParam._m0[91u].x));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1821 = _1808 / _1820;
    float _1822 = _1812 / _1820;
    float _1823 = _1816 / _1820;
    float _1970;
    float _1971;
    float _1972;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1850 = ((uint(_1823 > cbSceneParam._m0[59u].y) + uint(_1823 > cbSceneParam._m0[59u].x)) + uint(_1823 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1851 = _1850 + 43u;
        uint _1859 = _1850 + 44u;
        uint _1867 = _1850 + 45u;
        uint _1875 = _1850 + 46u;
        float _1886 = fma(_1820, cbSceneParam._m0[_1851].w, fma(_1816, cbSceneParam._m0[_1851].z, fma(_1812, cbSceneParam._m0[_1851].y, _1808 * cbSceneParam._m0[_1851].x)));
        float _1890 = fma(_1820, cbSceneParam._m0[_1859].w, fma(_1816, cbSceneParam._m0[_1859].z, fma(_1812, cbSceneParam._m0[_1859].y, _1808 * cbSceneParam._m0[_1859].x)));
        float _1898 = fma(_1820, cbSceneParam._m0[_1875].w, fma(_1816, cbSceneParam._m0[_1875].z, fma(_1812, cbSceneParam._m0[_1875].y, _1808 * cbSceneParam._m0[_1875].x)));
        float _1903 = cbSceneParam._m0[33u].z * _1898;
        float _1905 = cbSceneParam._m0[33u].w * _1898;
        float _1908 = fma(_1820, cbSceneParam._m0[_1867].w, fma(_1816, cbSceneParam._m0[_1867].z, fma(_1812, cbSceneParam._m0[_1867].y, _1808 * cbSceneParam._m0[_1867].x))) / _1898;
        float _1956 = (cbSceneParam._m0[33u].x - sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823))) * cbSceneParam._m0[33u].y;
        float _4318 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1963 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 + _1886) / _1898, (_1905 + _1890) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 + _1886) / _1898, (_1890 - _1903) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 - _1903) / _1898, (_1890 - _1905) / _1898), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 - _1905) / _1898, (_1903 + _1890) / _1898), _1908), 0.0)).x), vec4(0.25)));
        _1970 = 1.0 - (_1963 * cbSceneParam._m0[34u].x);
        _1971 = 1.0 - (_1963 * cbSceneParam._m0[34u].y);
        _1972 = 1.0 - (_1963 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1970 = 1.0;
        _1971 = 1.0;
        _1972 = 1.0;
    }
    float _2036;
    float _2038;
    float _2040;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2024 = fma(_1820, cbSceneParam._m0[63u].w, fma(_1816, cbSceneParam._m0[63u].z, fma(_1812, cbSceneParam._m0[63u].y, _1808 * cbSceneParam._m0[63u].x)));
        float _2025 = fma(_1820, cbSceneParam._m0[60u].w, fma(_1816, cbSceneParam._m0[60u].z, fma(_1812, cbSceneParam._m0[60u].y, _1808 * cbSceneParam._m0[60u].x))) / _2024;
        float _2026 = fma(_1820, cbSceneParam._m0[61u].w, fma(_1816, cbSceneParam._m0[61u].z, fma(_1812, cbSceneParam._m0[61u].y, _1808 * cbSceneParam._m0[61u].x))) / _2024;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_2025 >= cbSceneParam._m0[64u].x) && (_2026 >= cbSceneParam._m0[64u].y)) && (_2025 <= cbSceneParam._m0[64u].z)) && (_2026 <= cbSceneParam._m0[64u].w))
        {
            float _2165 = fma(_1820, cbSceneParam._m0[62u].w, fma(_1816, cbSceneParam._m0[62u].z, fma(_1812, cbSceneParam._m0[62u].y, _1808 * cbSceneParam._m0[62u].x))) / _2024;
            float _2169 = isnan(cbSceneParam._m0[41u].w) ? _2165 : (isnan(_2165) ? cbSceneParam._m0[41u].w : max(_2165, cbSceneParam._m0[41u].w));
            float _2212 = (cbSceneParam._m0[33u].x - sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823))) * cbSceneParam._m0[33u].y;
            float _4334 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
            float _2219 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2025, cbSceneParam._m0[33u].w + _2026), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2025, _2026 - cbSceneParam._m0[33u].z), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2025 - cbSceneParam._m0[33u].z, _2026 - cbSceneParam._m0[33u].w), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2025 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2026), _2169), 0.0)).x), vec4(0.25)));
            float _2223 = 1.0 - (_2219 * cbSceneParam._m0[34u].x);
            float _2224 = 1.0 - (_2219 * cbSceneParam._m0[34u].y);
            float _2225 = 1.0 - (_2219 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2225) ? _1972 : (isnan(_1972) ? _2225 : min(_1972, _2225));
            frontier_phi_45_44_ladder_1 = isnan(_2224) ? _1971 : (isnan(_1971) ? _2224 : min(_1971, _2224));
            frontier_phi_45_44_ladder_2 = isnan(_2223) ? _1970 : (isnan(_1970) ? _2223 : min(_1970, _2223));
        }
        else
        {
            frontier_phi_45_44_ladder = _1972;
            frontier_phi_45_44_ladder_1 = _1971;
            frontier_phi_45_44_ladder_2 = _1970;
        }
        _2036 = frontier_phi_45_44_ladder_2;
        _2038 = frontier_phi_45_44_ladder_1;
        _2040 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2036 = _1970;
        _2038 = _1971;
        _2040 = _1972;
    }
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _2047 = _2045.x * 14u;
    uint _2048 = _2047 + 13u;
    float _2055 = _711 + (-1.0);
    float _2060 = (cbLight._m0[_2048].x * _2055) + 1.0;
    float _2061 = (cbLight._m0[_2048].y * _2055) + 1.0;
    float _2062 = (cbLight._m0[_2048].z * _2055) + 1.0;
    float _2063 = (cbLight._m0[_2048].w * _2055) + 1.0;
    uint _2064 = _2047 + 5u;
    float _2070 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2074 = _2047 + 4u;
    float _2084 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2088 = _2047 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_476, _477, _478));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_476, _477, _478));
    float _4370 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4381 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2064].x * _2070) * _2109) + (((cbLight._m0[_2074].x * _2036) * _2084) * _2107);
    float _2117 = ((_2070 * cbLight._m0[_2064].y) * _2109) + (((cbLight._m0[_2074].y * _2038) * _2084) * _2107);
    float _2118 = ((_2070 * cbLight._m0[_2064].z) * _2109) + (((cbLight._m0[_2074].z * _2040) * _2084) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2047 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2124)
    {
        _2226 = _2116;
        _2228 = _2117;
        _2230 = _2118;
    }
    else
    {
        uint _2234 = _2047 + 6u;
        float _2250 = (dot(vec3(cbLight._m0[_2047 + 2u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4392 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2253 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2226 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2116;
        _2228 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2117;
        _2230 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2118;
    }
    bool _2233 = _2122.y == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2233)
    {
        _2288 = _2226;
        _2290 = _2228;
        _2292 = _2230;
    }
    else
    {
        uint _2461 = _2047 + 7u;
        float _2477 = (dot(vec3(cbLight._m0[_2047 + 3u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4408 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2480 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2288 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2226;
        _2290 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2228;
        _2292 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2230;
    }
    uint _2295 = _2047 + 8u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _625) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2047].x + _557;
    float _2311 = cbLight._m0[_2047].y + _558;
    float _2312 = cbLight._m0[_2047].z + _559;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2047].xyz));
    float _4424 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _2324 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2325 = dot(vec3(_476, _477, _478), vec3(_2317, _2318, _2319));
    float _4446 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2317, _2318, _2319));
    float _4457 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2309 * _2309;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2346 = 0.959999978542327880859375 - _693;
    float _2348 = 0.959999978542327880859375 - _694;
    float _2349 = 0.959999978542327880859375 - _695;
    float _2356 = 1.0 - _2309;
    float _2367 = (0.5 / (((_2324 * ((_2323 * _2356) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2356) + _2309) * _2323))) * _2323;
    float _4468 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    uint _2383 = _2047 + 9u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _625) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2088].x + _557;
    float _2397 = cbLight._m0[_2088].y + _558;
    float _2398 = cbLight._m0[_2088].z + _559;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2088].xyz));
    float _4479 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2410 = dot(vec3(_476, _477, _478), vec3(_2403, _2404, _2405));
    float _4490 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2414 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2403, _2404, _2405));
    float _4501 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2418 = _2395 * _2395;
    float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
    float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2436 = 1.0 - _2395;
    float _2446 = (0.5 / (((_2324 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2436) + _2395) * _2409))) * _2409;
    float _4512 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
    float _2458 = (((((_2429 * _2346) + _696) * cbLight._m0[_2383].x) * _2448) * _2070) + ((((cbLight._m0[_2295].x * _2036) * ((_2345 * _2346) + _696)) * _2369) * _2084);
    float _2459 = (((((_2429 * _2348) + _698) * cbLight._m0[_2383].y) * _2448) * _2070) + ((((cbLight._m0[_2295].y * _2038) * ((_2345 * _2348) + _698)) * _2369) * _2084);
    float _2460 = (((((_2429 * _2349) + _699) * cbLight._m0[_2383].z) * _2448) * _2070) + ((((cbLight._m0[_2295].z * _2040) * ((_2345 * _2349) + _699)) * _2369) * _2084);
    float _2516;
    float _2518;
    float _2520;
    if (_2124)
    {
        _2516 = _2458;
        _2518 = _2459;
        _2520 = _2460;
    }
    else
    {
        uint _2522 = _2047 + 2u;
        uint _2526 = _2047 + 10u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _625) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _557;
        float _2543 = cbLight._m0[_2522].y + _558;
        float _2544 = cbLight._m0[_2522].z + _559;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2522].xyz));
        float _4523 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2556 = dot(vec3(_476, _477, _478), vec3(_2549, _2550, _2551));
        float _4534 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4545 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2324 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2582) + _2541) * _2555))) * _2555;
        float _4556 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2516 = (((((_2575 * _2346) + _696) * cbLight._m0[_2526].x) * _2594) * _2595) + _2458;
        _2518 = (((((_2575 * _2348) + _698) * cbLight._m0[_2526].y) * _2594) * _2595) + _2459;
        _2520 = (((((_2575 * _2349) + _699) * cbLight._m0[_2526].z) * _2594) * _2595) + _2460;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2233)
    {
        _2626 = _2516;
        _2628 = _2518;
        _2630 = _2520;
    }
    else
    {
        uint _2637 = _2047 + 3u;
        uint _2641 = _2047 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _625) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _557;
        float _2658 = cbLight._m0[_2637].y + _558;
        float _2659 = cbLight._m0[_2637].z + _559;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2637].xyz));
        float _4572 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2671 = dot(vec3(_476, _477, _478), vec3(_2664, _2665, _2666));
        float _4583 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4594 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2324 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2697) + _2656) * _2670))) * _2670;
        float _4605 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2626 = (((((_2690 * _2346) + _696) * cbLight._m0[_2641].x) * _2709) * _2710) + _2516;
        _2628 = (((((_2690 * _2348) + _698) * cbLight._m0[_2641].y) * _2709) * _2710) + _2518;
        _2630 = (((((_2690 * _2349) + _699) * cbLight._m0[_2641].z) * _2709) * _2710) + _2520;
    }
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_2045.y == 0u)
    {
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.x;
        uint _2743 = uint((float(_2731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2732))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2732)));
        float _2753 = (log2(_1823 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2754 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        uint _2757 = uint(isnan(14.0) ? _2754 : (isnan(_2754) ? 14.0 : min(_2754, 14.0)));
        uvec4 _2762 = texelFetch(g_lightClusterGridBuffer, int(((_2757 << 2u) + (_2743 << 6u)) >> 2u));
        uint _2763 = _2762.x;
        uint _2764 = _2731.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2764 >> 4u) & 15u)) + 4294967295u) & _2763) == 0u) || ((_2764 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            uint _3018 = 0u;
            uint _3027;
            bool _3028;
            for (;;)
            {
                _3027 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                _3028 = _3027 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3028)
                {
                    frontier_phi_79_pred = _3015;
                    frontier_phi_79_pred_1 = _3017;
                    frontier_phi_79_pred_2 = _3016;
                    frontier_phi_79_pred_3 = _3014;
                    frontier_phi_79_pred_4 = _3013;
                    frontier_phi_79_pred_5 = _3012;
                }
                else
                {
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    uint _3163;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3027;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3167 = uint(findLSB(_3163)) + (_3018 << 5u);
                        uint _3164 = (_3163 + 4294967295u) & _3163;
                        uint _3169 = _3167 * 48u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3189 = (_3167 * 48u) + 4u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3208 = (_3167 * 48u) + 8u;
                        vec3 _3219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x));
                        float _3223 = _3183.x - _1821;
                        float _3224 = _3183.y - _1822;
                        float _3225 = _3183.z - _1823;
                        float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                        float _3229 = inversesqrt(_3226);
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3233 = dot(vec3(_606, _609, _612), vec3(_3230, _3231, _3232));
                        float _3238 = 1.0 - (_3226 * _3183.w);
                        float _4631 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3240 = sqrt(_3226) * _3202.w;
                        float _3243 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3233) + _3244;
                        float _3250 = _3240 * _3240;
                        float _3254 = ((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3239) / ((_3250 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _1821;
                        float _3259 = (-0.0) - _1822;
                        float _3260 = (-0.0) - _1823;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3274 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                        float _3275 = 1.0 - _727;
                        float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                        float _3283 = _3282 * _3282;
                        float _3284 = _3283 * _3283;
                        float _3285 = _3265 + _3230;
                        float _3286 = _3266 + _3231;
                        float _3287 = _3267 + _3232;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3295 = dot(vec3(_606, _609, _612), vec3(_3265, _3266, _3267));
                        float _4647 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3299 = dot(vec3(_606, _609, _612), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                        float _4658 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                        float _3307 = _3243 * _3283;
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3233) + _3308;
                        float _4669 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3313 = 1.0 - _3283;
                        float _3323 = (0.5 / (((_3312 * ((_3298 * _3313) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3283) * _3298))) * _3312;
                        float _4680 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3334 = (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3306 * _3306) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125))) * _3239;
                        _3087 = (_3254 * _3202.x) + _3160;
                        _3088 = (_3254 * _3202.y) + _3161;
                        _3089 = (_3254 * _3202.z) + _3162;
                        _3084 = (_3334 * _3219.x) + _3157;
                        _3085 = (_3334 * _3219.y) + _3158;
                        _3086 = (_3334 * _3219.z) + _3159;
                        if (_3164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3164;
                        }
                    }
                    frontier_phi_79_pred = _3087;
                    frontier_phi_79_pred_1 = _3089;
                    frontier_phi_79_pred_2 = _3088;
                    frontier_phi_79_pred_3 = _3086;
                    frontier_phi_79_pred_4 = _3085;
                    frontier_phi_79_pred_5 = _3084;
                }
                _2867 = frontier_phi_79_pred;
                _2871 = frontier_phi_79_pred_1;
                _2869 = frontier_phi_79_pred_2;
                _2865 = frontier_phi_79_pred_3;
                _2863 = frontier_phi_79_pred_4;
                _2861 = frontier_phi_79_pred_5;
                uint _3019 = _3018 + 1u;
                if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3012 = _2861;
                    _3013 = _2863;
                    _3014 = _2865;
                    _3015 = _2867;
                    _3016 = _2869;
                    _3017 = _2871;
                    _3018 = _3019;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((4294967295u << _2877) & _2763) == 0u)
        {
            _2980 = _2860;
            _2982 = _2862;
            _2984 = _2864;
            _2986 = _2866;
            _2988 = _2868;
            _2990 = _2870;
        }
        else
        {
            float _3005 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
            float _3006 = _3005 * _1821;
            float _3007 = _3005 * _1822;
            float _3008 = _3005 * _1823;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _3140 = _2860;
                float _3141 = _2862;
                float _3142 = _2864;
                float _3143 = _2866;
                float _3144 = _2868;
                float _3145 = _2870;
                uint _3146 = _2877;
                uint _3155;
                bool _3156;
                for (;;)
                {
                    _3155 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                    _3156 = _3155 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3156)
                    {
                        frontier_phi_90_pred = _3142;
                        frontier_phi_90_pred_1 = _3143;
                        frontier_phi_90_pred_2 = _3145;
                        frontier_phi_90_pred_3 = _3144;
                        frontier_phi_90_pred_4 = _3141;
                        frontier_phi_90_pred_5 = _3140;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3361 = _3140;
                        float _3362 = _3141;
                        float _3363 = _3142;
                        float _3364 = _3143;
                        float _3365 = _3144;
                        float _3366 = _3145;
                        uint _3367 = _3155;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3437;
                        vec4 _3452;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3378 = ((_3146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3424 = (_3378 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3378 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3378 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3378 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_1823, _3486.z, fma(_1822, _3486.y, _3486.x * _1821)) + _3486.w;
                            _3499 = !((fma(_1823, _3467.z, fma(_1822, _3467.y, _3467.x * _1821)) + _3467.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3393.x - _1821;
                                float _3527 = _3393.y - _1822;
                                float _3528 = _3393.z - _1823;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3394 * _3394));
                                float _4691 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3544 = sqrt(_3529) * _3409.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_606, _609, _612))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_1823, _3437.z, fma(_1822, _3437.y, _3437.x * _1821)) + _3437.w) / _3498;
                                float _3558 = (fma(_1823, _3452.z, fma(_1822, _3452.y, _3452.x * _1821)) + _3452.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4707 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _727;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3006;
                                float _3588 = _3534 - _3007;
                                float _3589 = _3535 - _3008;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_606, _609, _612), vec3((-0.0) - _3006, (-0.0) - _3007, (-0.0) - _3008));
                                float _4718 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3601 = dot(vec3(_606, _609, _612), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4729 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_606, _609, _612), vec3(_3533, _3534, _3535))) + _3610;
                                float _4740 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4751 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3564 * _3409.z;
                                frontier_phi_96_pred_1 = _3564 * _3409.y;
                                frontier_phi_96_pred_2 = _3564 * _3409.x;
                                frontier_phi_96_pred_3 = _3638 * _3421.z;
                                frontier_phi_96_pred_4 = _3638 * _3421.y;
                                frontier_phi_96_pred_5 = _3638 * _3421.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3647 = frontier_phi_96_pred;
                            _3646 = frontier_phi_96_pred_1;
                            _3645 = frontier_phi_96_pred_2;
                            _3644 = frontier_phi_96_pred_3;
                            _3643 = frontier_phi_96_pred_4;
                            _3642 = frontier_phi_96_pred_5;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3350;
                        frontier_phi_90_pred_1 = _3351;
                        frontier_phi_90_pred_2 = _3353;
                        frontier_phi_90_pred_3 = _3352;
                        frontier_phi_90_pred_4 = _3349;
                        frontier_phi_90_pred_5 = _3348;
                    }
                    _2985 = frontier_phi_90_pred;
                    _2987 = frontier_phi_90_pred_1;
                    _2991 = frontier_phi_90_pred_2;
                    _2989 = frontier_phi_90_pred_3;
                    _2983 = frontier_phi_90_pred_4;
                    _2981 = frontier_phi_90_pred_5;
                    uint _3147 = _3146 + 1u;
                    if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3140 = _2981;
                        _3141 = _2983;
                        _3142 = _2985;
                        _3143 = _2987;
                        _3144 = _2989;
                        _3145 = _2991;
                        _3146 = _3147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2989;
                frontier_phi_71_72_ladder_1 = _2991;
                frontier_phi_71_72_ladder_2 = _2987;
                frontier_phi_71_72_ladder_3 = _2985;
                frontier_phi_71_72_ladder_4 = _2983;
                frontier_phi_71_72_ladder_5 = _2981;
            }
            else
            {
                frontier_phi_71_72_ladder = _2868;
                frontier_phi_71_72_ladder_1 = _2870;
                frontier_phi_71_72_ladder_2 = _2866;
                frontier_phi_71_72_ladder_3 = _2864;
                frontier_phi_71_72_ladder_4 = _2862;
                frontier_phi_71_72_ladder_5 = _2860;
            }
            _2980 = frontier_phi_71_72_ladder_5;
            _2982 = frontier_phi_71_72_ladder_4;
            _2984 = frontier_phi_71_72_ladder_3;
            _2986 = frontier_phi_71_72_ladder_2;
            _2988 = frontier_phi_71_72_ladder;
            _2990 = frontier_phi_71_72_ladder_1;
        }
        float _2995 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2775 = (_2995 * _2986) + _2288;
        _2777 = (_2995 * _2988) + _2290;
        _2779 = (_2995 * _2990) + _2292;
        _2781 = ((_2980 * _696) * _2995) + _2626;
        _2783 = ((_2982 * _698) * _2995) + _2628;
        _2785 = ((_2984 * _699) * _2995) + _2630;
    }
    else
    {
        _2775 = _2288;
        _2777 = _2290;
        _2779 = _2292;
        _2781 = _2626;
        _2783 = _2628;
        _2785 = _2630;
    }
    vec4 _2791 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4767 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4778 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4789 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2815 = (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2775 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _711))) + ((_2781 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + (_2791.x * cbMtdParam._m0[3u].x);
    float _2817 = ((_2791.y * cbMtdParam._m0[3u].x) + ((_2783 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2777 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _711)));
    float _2819 = ((_2791.z * cbMtdParam._m0[3u].x) + ((_2785 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2779 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _711)));
    float _2820 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2821 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2822 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    uint _2823 = _638 + 6u;
    float _2831 = _581 / cbSceneParam._m0[86u].x;
    float _2832 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2846 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, (log2((isnan(cbSceneParam._m0[77u].w) ? _499 : (isnan(_499) ? cbSceneParam._m0[77u].w : min(_499, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2848 = _2846.x;
    float _2849 = _2846.y;
    float _2850 = _2846.z;
    float _2851 = _2846.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_499 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_499) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _499 : min(cbSceneParam._m0[80u].w, _499));
        float _2886 = _2885 / _499;
        float _2897 = _2886 * _550;
        float _2898 = _551 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2900 = _2886 * _552;
        float _2902 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2898;
        float _2910 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2899 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3041 = 1.0 / cbSceneParam._m0[80u].x;
            float _3042 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3043 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            _3097 = ((abs(_2910 / _2899) * cbSceneParam._m0[80u].y) * ((((_3052 - _3053) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))))) * _3041)) - ((exp2(_2920 * _3052) - exp2(_2920 * _3053)) * _3041))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2851);
        _2922 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2848;
        _2924 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2849;
        _2926 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2850;
        _2928 = _3108 * _2851;
    }
    else
    {
        _2922 = _2848;
        _2924 = _2849;
        _2926 = _2850;
        _2928 = _2851;
    }
    bool _3135;
    vec4 _2938;
    vec4 _2960;
    float _2962;
    float _2966;
    float _2967;
    float _2968;
    float _2969;
    bool _2979;
    for (;;)
    {
        _2938 = cbMatDynParam._m0[0u];
        float _2940 = roundEven(_2938.y);
        bool _2941 = _2940 == 3.0;
        float _2942 = log2(_2928);
        float _2949 = exp2(_2942 * cbSceneParam._m0[78u].x) * _2820;
        float _2950 = exp2(_2942 * cbSceneParam._m0[78u].y) * _2821;
        float _2951 = exp2(_2942 * cbSceneParam._m0[78u].z) * _2822;
        float _2958 = _566 + (-0.5);
        _2960 = cbMtdParam._m0[1u];
        _2962 = _2960.y * _2958;
        float _2965 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2966 = _2965 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
        _2967 = _2965 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
        _2968 = _2965 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
        _2969 = _2958 * 0.999000012874603271484375;
        _2979 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2979)
        {
            if ((cbInstanceData._m0[_638 + 7u].x + _2969) < 0.5)
            {
                _3135 = true;
                break;
            }
        }
        uint _3076 = _640 + uint(_2938.w);
        if ((cbInstanceData._m0[_3076].w < 1.0) && ((cbInstanceData._m0[_3076].w + _2969) < 0.5))
        {
            _3135 = true;
            break;
        }
        if ((_2962 + 1.0) < _2960.x)
        {
            _3135 = true;
            break;
        }
        _3135 = false;
        break;
    }
    float _3339;
    if (_3135)
    {
        discard_state = true;
        _3339 = 0.0;
    }
    else
    {
        _3339 = cbInstanceData._m0[_2823].w;
    }
    SV_Target.x = _2966;
    SV_Target.y = _2967;
    SV_Target.z = _2968;
    SV_Target.w = _3339;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2823].w;
    discard_exit();
}


