#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1065;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _265 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _276 = exp2(log2(_265.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _277;
    float _279;
    float _281;
    if (_276)
    {
        _277 = cbMtdParam._m0[19u].x;
        _279 = cbMtdParam._m0[19u].y;
        _281 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _277 = cbMtdParam._m0[18u].x;
        _279 = cbMtdParam._m0[18u].y;
        _281 = cbMtdParam._m0[18u].z;
    }
    float _287;
    if (_276)
    {
        _287 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _287 = cbMtdParam._m0[20u].z;
    }
    float _293;
    float _295;
    if (_276)
    {
        _293 = cbMtdParam._m0[28u].z;
        _295 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _293 = cbMtdParam._m0[24u].x;
        _295 = cbMtdParam._m0[24u].y;
    }
    float _297 = _293 * TEXCOORD.x;
    float _298 = _295 * TEXCOORD.y;
    float _310 = floor(_287);
    vec4 _313 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _297) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _298) + cbTextureTilingScale._m0[8u].w, _310));
    vec4 _335 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = (((_277 * cbMtdParam._m0[20u].w) * _313.x) * cbMtdParam._m0[9u].x) * _335.x;
    float _347 = (((_279 * cbMtdParam._m0[20u].w) * _313.y) * cbMtdParam._m0[9u].y) * _335.y;
    float _351 = (((_281 * cbMtdParam._m0[20u].w) * _313.z) * cbMtdParam._m0[9u].z) * _335.z;
    vec4 _363 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _367 = _363.z;
    vec4 _381 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _297) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _298) + cbTextureTilingScale._m0[10u].w, _310));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[27u].z;
    _186[0u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _186[1u] = cbMtdParam._m0[28u].y;
    float _398 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _401 = uint(int(isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0))));
    float _407 = (_381.x + _363.w) + _186[_401];
    vec4 _425 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w, _310));
    float _432 = (_425.x * 2.0) + (-1.0);
    float _433 = (_425.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3713 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    float _449 = (cbMtdParam._m0[21u].x * (((_367 * 2.0) * (_425.z + _185[_401])) - _367)) + _367;
    float _453 = (cbMtdParam._m0[21u].y * ((_363.x * 2.0) + (-1.0))) + _432;
    float _454 = (cbMtdParam._m0[21u].y * ((_363.y * 2.0) + (-1.0))) + _433;
    float _457 = fma(_439, _236, fma(_454, _228 * TANGENT.x, (_214 * _206) * _453));
    float _460 = fma(_439, _237, fma(_454, _228 * TANGENT.y, (_214 * _207) * _453));
    float _463 = fma(_439, _238, fma(_454, _228 * TANGENT.z, (_214 * _208) * _453));
    float _467 = inversesqrt(dot(vec3(_457, _460, _463), vec3(_457, _460, _463)));
    float _468 = _467 * _457;
    float _469 = _467 * _460;
    float _470 = _467 * _463;
    float _3724 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _471 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3746 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3757 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3768 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _475 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _491 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _542 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _532);
    float _543 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _532);
    float _544 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _532);
    float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
    float _549 = _542 * _548;
    float _550 = _543 * _548;
    float _551 = _544 * _548;
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _560 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _562 = _560.w;
    float _583 = fma(_470, cbSceneParam._m0[5u].z, fma(_469, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _468));
    float _586 = fma(_470, cbSceneParam._m0[6u].z, fma(_469, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _468));
    float _589 = fma(_470, cbSceneParam._m0[7u].z, fma(_469, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _468));
    vec4 _591 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _602 = (((_591.y - _471) + (_591.w * _471)) * cbMtdParam._m0[3u].x) + _471;
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = (_615 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _624 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_618].x;
    float _625 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_618].y;
    float _626 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_618].z;
    float _3779 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    vec4 _630 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _635 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _646 = (((_635.x - _475) + (_635.w * _475)) * cbMtdParam._m0[3u].x) + _475;
    float _659 = (cbMtdParam._m0[3u].x * (((_627 * _562) - _627) + _630.x)) + _627;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _562) - _628) + _630.y)) + _628;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _562) - _629) + _630.z)) + _629;
    float _662 = 1.0 - _646;
    float _663 = _662 * _659;
    float _664 = _662 * _660;
    float _665 = _662 * _661;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _646;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _646;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _646;
    float _673 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _688 = _685.x * TEXCOORD_4;
    float _689 = dot(vec3(_468, _469, _470), vec3(_549, _550, _551));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _468) - _549;
    float _697 = (_692 * _469) - _550;
    float _698 = (_692 * _470) - _551;
    float _702 = abs(dot(vec3(_549, _550, _551), vec3(_468, _469, _470)));
    float _3812 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _704 = sqrt(_602);
    float _717 = exp2((_704 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_704 * 3.0));
    float _723 = (1.0 - _717) * ((_704 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _724 = _717 * _704;
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _793 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _797 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _822 = _752 + _468;
        float _823 = _756 + _469;
        float _824 = _760 + _470;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_468, _469, _470), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3860 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_468, _469, _470), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3893 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_468, _469, _470), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3926 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1105 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1109 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1113 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1136 = _752 + _468;
        float _1137 = _756 + _469;
        float _1138 = _760 + _470;
        float _1148 = fma(_1138, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136)) - _1105;
        float _1149 = fma(_1138, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136)) - _1109;
        float _1150 = fma(_1138, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136)) - _1113;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1105 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1109 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[35u].z) + ((((((_1113 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1204 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1171.x + (-0.5));
        float _1206 = _1204 * (_1171.y + (-0.5));
        float _1207 = _1204 * (_1171.z + (-0.5));
        float _1214 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1178.x + (-0.5));
        float _1216 = _1214 * (_1178.y + (-0.5));
        float _1217 = _1214 * (_1178.z + (-0.5));
        float _1224 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1185.x + (-0.5));
        float _1226 = _1224 * (_1185.y + (-0.5));
        float _1227 = _1224 * (_1185.z + (-0.5));
        float _1234 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1192.x + (-0.5));
        float _1236 = _1234 * (_1192.y + (-0.5));
        float _1237 = _1234 * (_1192.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_468, _469, _470), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3989 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1268 + 1.0))) + _1273) * _1238;
        float _1283 = _1206 * 0.5;
        float _1284 = _1216 * 0.5;
        float _1285 = _1226 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_468, _469, _470), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4022 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1310 + 1.0))) + _1315) * _1239;
        float _1325 = _1207 * 0.5;
        float _1326 = _1217 * 0.5;
        float _1327 = _1227 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_468, _469, _470), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4055 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1352 + 1.0))) + _1357) * _1240;
        _1374 = _1207;
        _1375 = _1206;
        _1376 = _1205;
        _1377 = _1217;
        _1378 = _1216;
        _1379 = _1215;
        _1380 = _1227;
        _1381 = _1226;
        _1382 = _1225;
        _1383 = _1240;
        _1384 = _1239;
        _1385 = _1238;
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1065;
        _1375 = _1065;
        _1376 = _1065;
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1421 = fma(_1400, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1398 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1400, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1398 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1400, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1398));
    float _1442 = _696 * 0.5;
    float _1443 = _697 * 0.5;
    float _1444 = _698 * 0.5;
    float _1445 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1448 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1451 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1485;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1458 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1462 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1466 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1473 = dot(vec4(cbModelParam._m0[39u]), vec4(_1442, _1443, _1444, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1496;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1487 = dot(vec4(cbModelParam._m0[40u]), vec4(_1442, _1443, _1444, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1500 = (_1496 * cbModelParam._m0[1u].x) + (_1485 * (1.0 - cbModelParam._m0[1u].x));
    float _1510 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1510 : min(cbModelParam._m0[25u].z, _1510));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1560 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1564 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1568 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1571 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1574 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1577 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1605;
        if (_1571 > 0.0)
        {
            _1605 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1605 = frontier_phi_22_20_ladder;
        }
        float _1777;
        if (_1574 > 0.0)
        {
            _1777 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1777 = frontier_phi_31_27_ladder;
        }
        float _2073;
        if (_1577 > 0.0)
        {
            _2073 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2073 = frontier_phi_43_38_ladder;
        }
        float _2075 = isnan(_1777) ? _1605 : (isnan(_1605) ? _1777 : min(_1605, _1777));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1571) + _1560;
        float _2081 = (_2076 * _1574) + _1564;
        float _2082 = (_2076 * _1577) + _1568;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2083;
        float _2087 = _2083 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 > _2087) || ((_2081 < _2085) || ((_2080 < _2085) || (_2080 > _2087))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1511);
            frontier_phi_21_43_ladder = _2227.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2227.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2227.x * cbModelParam._m0[1u].y;
        }
        _1593 = frontier_phi_21_43_ladder_2;
        _1595 = frontier_phi_21_43_ladder_1;
        _1597 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1511);
        _1593 = _1581.x * cbModelParam._m0[1u].y;
        _1595 = _1581.y * cbModelParam._m0[1u].y;
        _1597 = _1581.z * cbModelParam._m0[1u].y;
    }
    float _1601 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1601 : min(cbModelParam._m0[25u].w, _1601));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1655 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1659 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1663 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1666 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1669 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1672 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1782;
        if (_1666 > 0.0)
        {
            _1782 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1782 = frontier_phi_33_29_ladder;
        }
        float _2100;
        if (_1669 > 0.0)
        {
            _2100 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2100 = frontier_phi_45_40_ladder;
        }
        float _2438;
        if (_1672 > 0.0)
        {
            _2438 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2438 = frontier_phi_55_52_ladder;
        }
        float _2440 = isnan(_2100) ? _1782 : (isnan(_1782) ? _2100 : min(_1782, _2100));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1666) + _1655;
        float _2446 = (_2441 * _1669) + _1659;
        float _2447 = (_2441 * _1672) + _1663;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_30_55_ladder;
        float frontier_phi_30_55_ladder_1;
        float frontier_phi_30_55_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_30_55_ladder = 0.0;
            frontier_phi_30_55_ladder_1 = 0.0;
            frontier_phi_30_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1602);
            frontier_phi_30_55_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1691 = frontier_phi_30_55_ladder_2;
        _1693 = frontier_phi_30_55_ladder_1;
        _1695 = frontier_phi_30_55_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1602);
        _1691 = _1675.x * cbModelParam._m0[1u].z;
        _1693 = _1675.y * cbModelParam._m0[1u].z;
        _1695 = _1675.z * cbModelParam._m0[1u].z;
    }
    float _1708 = (((_723 * _673) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1691 - _1593)) + _1593);
    float _1710 = (((_723 * _675) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1693 - _1595)) + _1595);
    float _1712 = (((_723 * _676) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1695 - _1597)) + _1597);
    float _1715 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, _1708 * cbSceneParam._m0[91u].x));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1769 = _1756 / _1768;
    float _1770 = _1760 / _1768;
    float _1771 = _1764 / _1768;
    float _1918;
    float _1919;
    float _1920;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1798 = ((uint(_1771 > cbSceneParam._m0[59u].y) + uint(_1771 > cbSceneParam._m0[59u].x)) + uint(_1771 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1799 = _1798 + 43u;
        uint _1807 = _1798 + 44u;
        uint _1815 = _1798 + 45u;
        uint _1823 = _1798 + 46u;
        float _1834 = fma(_1768, cbSceneParam._m0[_1799].w, fma(_1764, cbSceneParam._m0[_1799].z, fma(_1760, cbSceneParam._m0[_1799].y, _1756 * cbSceneParam._m0[_1799].x)));
        float _1838 = fma(_1768, cbSceneParam._m0[_1807].w, fma(_1764, cbSceneParam._m0[_1807].z, fma(_1760, cbSceneParam._m0[_1807].y, _1756 * cbSceneParam._m0[_1807].x)));
        float _1846 = fma(_1768, cbSceneParam._m0[_1823].w, fma(_1764, cbSceneParam._m0[_1823].z, fma(_1760, cbSceneParam._m0[_1823].y, _1756 * cbSceneParam._m0[_1823].x)));
        float _1851 = cbSceneParam._m0[33u].z * _1846;
        float _1853 = cbSceneParam._m0[33u].w * _1846;
        float _1856 = fma(_1768, cbSceneParam._m0[_1815].w, fma(_1764, cbSceneParam._m0[_1815].z, fma(_1760, cbSceneParam._m0[_1815].y, _1756 * cbSceneParam._m0[_1815].x))) / _1846;
        float _1904 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
        float _4181 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1911 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 + _1834) / _1846, (_1853 + _1838) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 + _1834) / _1846, (_1838 - _1851) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1851) / _1846, (_1838 - _1853) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1853) / _1846, (_1851 + _1838) / _1846), _1856), 0.0)).x), vec4(0.25)));
        _1918 = 1.0 - (_1911 * cbSceneParam._m0[34u].x);
        _1919 = 1.0 - (_1911 * cbSceneParam._m0[34u].y);
        _1920 = 1.0 - (_1911 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1918 = 1.0;
        _1919 = 1.0;
        _1920 = 1.0;
    }
    float _1984;
    float _1986;
    float _1988;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1972 = fma(_1768, cbSceneParam._m0[63u].w, fma(_1764, cbSceneParam._m0[63u].z, fma(_1760, cbSceneParam._m0[63u].y, _1756 * cbSceneParam._m0[63u].x)));
        float _1973 = fma(_1768, cbSceneParam._m0[60u].w, fma(_1764, cbSceneParam._m0[60u].z, fma(_1760, cbSceneParam._m0[60u].y, _1756 * cbSceneParam._m0[60u].x))) / _1972;
        float _1974 = fma(_1768, cbSceneParam._m0[61u].w, fma(_1764, cbSceneParam._m0[61u].z, fma(_1760, cbSceneParam._m0[61u].y, _1756 * cbSceneParam._m0[61u].x))) / _1972;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1973 >= cbSceneParam._m0[64u].x) && (_1974 >= cbSceneParam._m0[64u].y)) && (_1973 <= cbSceneParam._m0[64u].z)) && (_1974 <= cbSceneParam._m0[64u].w))
        {
            float _2113 = fma(_1768, cbSceneParam._m0[62u].w, fma(_1764, cbSceneParam._m0[62u].z, fma(_1760, cbSceneParam._m0[62u].y, _1756 * cbSceneParam._m0[62u].x))) / _1972;
            float _2117 = isnan(cbSceneParam._m0[41u].w) ? _2113 : (isnan(_2113) ? cbSceneParam._m0[41u].w : max(_2113, cbSceneParam._m0[41u].w));
            float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
            float _4197 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
            float _2167 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1973, cbSceneParam._m0[33u].w + _1974), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1973, _1974 - cbSceneParam._m0[33u].z), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].z, _1974 - cbSceneParam._m0[33u].w), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1974), _2117), 0.0)).x), vec4(0.25)));
            float _2171 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
            float _2172 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
            float _2173 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2173) ? _1920 : (isnan(_1920) ? _2173 : min(_1920, _2173));
            frontier_phi_42_41_ladder_1 = isnan(_2172) ? _1919 : (isnan(_1919) ? _2172 : min(_1919, _2172));
            frontier_phi_42_41_ladder_2 = isnan(_2171) ? _1918 : (isnan(_1918) ? _2171 : min(_1918, _2171));
        }
        else
        {
            frontier_phi_42_41_ladder = _1920;
            frontier_phi_42_41_ladder_1 = _1919;
            frontier_phi_42_41_ladder_2 = _1918;
        }
        _1984 = frontier_phi_42_41_ladder_2;
        _1986 = frontier_phi_42_41_ladder_1;
        _1988 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1984 = _1918;
        _1986 = _1919;
        _1988 = _1920;
    }
    uvec4 _1993 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1995 = _1993.x * 14u;
    uint _1996 = _1995 + 13u;
    float _2003 = _688 + (-1.0);
    float _2008 = (cbLight._m0[_1996].x * _2003) + 1.0;
    float _2009 = (cbLight._m0[_1996].y * _2003) + 1.0;
    float _2010 = (cbLight._m0[_1996].z * _2003) + 1.0;
    float _2011 = (cbLight._m0[_1996].w * _2003) + 1.0;
    uint _2012 = _1995 + 5u;
    float _2018 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2022 = _1995 + 4u;
    float _2032 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2036 = _1995 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_468, _469, _470));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_468, _469, _470));
    float _4233 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4244 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2012].x * _2018) * _2057) + (((cbLight._m0[_2022].x * _1984) * _2032) * _2055);
    float _2065 = ((_2018 * cbLight._m0[_2012].y) * _2057) + (((cbLight._m0[_2022].y * _1986) * _2032) * _2055);
    float _2066 = ((_2018 * cbLight._m0[_2012].z) * _2057) + (((cbLight._m0[_2022].z * _1988) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1995 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2072)
    {
        _2174 = _2064;
        _2176 = _2065;
        _2178 = _2066;
    }
    else
    {
        uint _2182 = _1995 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_1995 + 2u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4255 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2201 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2064;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2065;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2066;
    }
    bool _2181 = _2070.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2181)
    {
        _2236 = _2174;
        _2238 = _2176;
        _2240 = _2178;
    }
    else
    {
        uint _2409 = _1995 + 7u;
        float _2425 = (dot(vec3(cbLight._m0[_1995 + 3u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4271 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2428 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2236 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2174;
        _2238 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2176;
        _2240 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2178;
    }
    uint _2243 = _1995 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _602) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_1995].x + _549;
    float _2259 = cbLight._m0[_1995].y + _550;
    float _2260 = cbLight._m0[_1995].z + _551;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_1995].xyz));
    float _4287 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _2272 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2273 = dot(vec3(_468, _469, _470), vec3(_2265, _2266, _2267));
    float _4309 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2265, _2266, _2267));
    float _4320 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _670;
    float _2296 = 0.959999978542327880859375 - _671;
    float _2297 = 0.959999978542327880859375 - _672;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4331 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2331 = _1995 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _602) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2036].x + _549;
    float _2345 = cbLight._m0[_2036].y + _550;
    float _2346 = cbLight._m0[_2036].z + _551;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2036].xyz));
    float _4342 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2358 = dot(vec3(_468, _469, _470), vec3(_2351, _2352, _2353));
    float _4353 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2351, _2352, _2353));
    float _4364 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
    float _2384 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2272 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2384) + _2343) * _2357))) * _2357;
    float _4375 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2406 = (((((_2377 * _2294) + _673) * cbLight._m0[_2331].x) * _2396) * _2018) + ((((cbLight._m0[_2243].x * _1984) * ((_2293 * _2294) + _673)) * _2317) * _2032);
    float _2407 = (((((_2377 * _2296) + _675) * cbLight._m0[_2331].y) * _2396) * _2018) + ((((cbLight._m0[_2243].y * _1986) * ((_2293 * _2296) + _675)) * _2317) * _2032);
    float _2408 = (((((_2377 * _2297) + _676) * cbLight._m0[_2331].z) * _2396) * _2018) + ((((cbLight._m0[_2243].z * _1988) * ((_2293 * _2297) + _676)) * _2317) * _2032);
    float _2464;
    float _2466;
    float _2468;
    if (_2072)
    {
        _2464 = _2406;
        _2466 = _2407;
        _2468 = _2408;
    }
    else
    {
        uint _2470 = _1995 + 2u;
        uint _2474 = _1995 + 10u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _602) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _549;
        float _2491 = cbLight._m0[_2470].y + _550;
        float _2492 = cbLight._m0[_2470].z + _551;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2470].xyz));
        float _4386 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2504 = dot(vec3(_468, _469, _470), vec3(_2497, _2498, _2499));
        float _4397 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4408 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2272 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2530) + _2489) * _2503))) * _2503;
        float _4419 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2464 = (((((_2523 * _2294) + _673) * cbLight._m0[_2474].x) * _2542) * _2543) + _2406;
        _2466 = (((((_2523 * _2296) + _675) * cbLight._m0[_2474].y) * _2542) * _2543) + _2407;
        _2468 = (((((_2523 * _2297) + _676) * cbLight._m0[_2474].z) * _2542) * _2543) + _2408;
    }
    float _2574;
    float _2576;
    float _2578;
    if (_2181)
    {
        _2574 = _2464;
        _2576 = _2466;
        _2578 = _2468;
    }
    else
    {
        uint _2585 = _1995 + 3u;
        uint _2589 = _1995 + 11u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _602) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _549;
        float _2606 = cbLight._m0[_2585].y + _550;
        float _2607 = cbLight._m0[_2585].z + _551;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2585].xyz));
        float _4435 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2619 = dot(vec3(_468, _469, _470), vec3(_2612, _2613, _2614));
        float _4446 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4457 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2272 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2645) + _2604) * _2618))) * _2618;
        float _4468 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2574 = (((((_2638 * _2294) + _673) * cbLight._m0[_2589].x) * _2657) * _2658) + _2464;
        _2576 = (((((_2638 * _2296) + _675) * cbLight._m0[_2589].y) * _2657) * _2658) + _2466;
        _2578 = (((((_2638 * _2297) + _676) * cbLight._m0[_2589].z) * _2657) * _2658) + _2468;
    }
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_1993.y == 0u)
    {
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.x;
        uint _2691 = uint((float(_2679.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2680))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2680)));
        float _2701 = (log2(_1771 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2702 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        uint _2705 = uint(isnan(14.0) ? _2702 : (isnan(_2702) ? 14.0 : min(_2702, 14.0)));
        uvec4 _2710 = texelFetch(g_lightClusterGridBuffer, int(((_2705 << 2u) + (_2691 << 6u)) >> 2u));
        uint _2711 = _2710.x;
        uint _2712 = _2679.z;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        if (((((1u << ((_2712 >> 4u) & 15u)) + 4294967295u) & _2711) == 0u) || ((_2712 & 240u) == 0u))
        {
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
        }
        else
        {
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2968)
                {
                    frontier_phi_74_pred = _2956;
                    frontier_phi_74_pred_1 = _2957;
                    frontier_phi_74_pred_2 = _2955;
                    frontier_phi_74_pred_3 = _2954;
                    frontier_phi_74_pred_4 = _2953;
                    frontier_phi_74_pred_5 = _2952;
                }
                else
                {
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    uint _3082;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2967;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    for (;;)
                    {
                        uint _3086 = uint(findLSB(_3082)) + (_2958 << 5u);
                        uint _3083 = (_3082 + 4294967295u) & _3082;
                        uint _3088 = _3086 * 48u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3108 = (_3086 * 48u) + 4u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3127 = (_3086 * 48u) + 8u;
                        vec3 _3138 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x));
                        float _3142 = _3102.x - _1769;
                        float _3143 = _3102.y - _1770;
                        float _3144 = _3102.z - _1771;
                        float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                        float _3148 = inversesqrt(_3145);
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3152 = dot(vec3(_583, _586, _589), vec3(_3149, _3150, _3151));
                        float _3157 = 1.0 - (_3145 * _3102.w);
                        float _4494 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3159 = sqrt(_3145) * _3121.w;
                        float _3162 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3152) + _3163;
                        float _3169 = _3159 * _3159;
                        float _3173 = ((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3158) / ((_3169 * 0.699999988079071044921875) + 1.0);
                        float _3177 = (-0.0) - _1769;
                        float _3178 = (-0.0) - _1770;
                        float _3179 = (-0.0) - _1771;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3193 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                        float _3194 = 1.0 - _704;
                        float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                        float _3202 = _3201 * _3201;
                        float _3203 = _3202 * _3202;
                        float _3204 = _3184 + _3149;
                        float _3205 = _3185 + _3150;
                        float _3206 = _3186 + _3151;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3214 = dot(vec3(_583, _586, _589), vec3(_3184, _3185, _3186));
                        float _4510 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3218 = dot(vec3(_583, _586, _589), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                        float _4521 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                        float _3226 = _3162 * _3202;
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3152) + _3227;
                        float _4532 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3232 = 1.0 - _3202;
                        float _3242 = (0.5 / (((_3231 * ((_3217 * _3232) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3202) * _3217))) * _3231;
                        float _4543 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3253 = (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3225 * _3225) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125))) * _3158;
                        _3011 = (_3173 * _3121.x) + _3079;
                        _3012 = (_3173 * _3121.y) + _3080;
                        _3013 = (_3173 * _3121.z) + _3081;
                        _3008 = (_3253 * _3138.x) + _3076;
                        _3009 = (_3253 * _3138.y) + _3077;
                        _3010 = (_3253 * _3138.z) + _3078;
                        if (_3083 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3083;
                        }
                    }
                    frontier_phi_74_pred = _3012;
                    frontier_phi_74_pred_1 = _3013;
                    frontier_phi_74_pred_2 = _3011;
                    frontier_phi_74_pred_3 = _3010;
                    frontier_phi_74_pred_4 = _3009;
                    frontier_phi_74_pred_5 = _3008;
                }
                _2817 = frontier_phi_74_pred;
                _2819 = frontier_phi_74_pred_1;
                _2815 = frontier_phi_74_pred_2;
                _2813 = frontier_phi_74_pred_3;
                _2811 = frontier_phi_74_pred_4;
                _2809 = frontier_phi_74_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2809;
                    _2953 = _2811;
                    _2954 = _2813;
                    _2955 = _2815;
                    _2956 = _2817;
                    _2957 = _2819;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
        }
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.z;
        uint _2825 = (_2823 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2825) & _2711) == 0u)
        {
            _2920 = _2808;
            _2922 = _2810;
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
            _2930 = _2818;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
            float _2946 = _2945 * _1769;
            float _2947 = _2945 * _1770;
            float _2948 = _2945 * _1771;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2825 < ((_2823 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3059 = _2808;
                float _3060 = _2810;
                float _3061 = _2812;
                float _3062 = _2814;
                float _3063 = _2816;
                float _3064 = _2818;
                uint _3065 = _2825;
                uint _3074;
                bool _3075;
                for (;;)
                {
                    _3074 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                    _3075 = _3074 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_3075)
                    {
                        frontier_phi_80_pred = _3064;
                        frontier_phi_80_pred_1 = _3063;
                        frontier_phi_80_pred_2 = _3062;
                        frontier_phi_80_pred_3 = _3061;
                        frontier_phi_80_pred_4 = _3059;
                        frontier_phi_80_pred_5 = _3060;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3271 = _3059;
                        float _3272 = _3060;
                        float _3273 = _3061;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        uint _3277 = _3074;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3347;
                        vec4 _3362;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3288 = ((_3065 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3334 = (_3288 * 40u) + 16u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3288 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3288 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3288 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_1771, _3396.z, fma(_1770, _3396.y, _3396.x * _1769)) + _3396.w;
                            _3409 = !((fma(_1771, _3377.z, fma(_1770, _3377.y, _3377.x * _1769)) + _3377.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3303.x - _1769;
                                float _3437 = _3303.y - _1770;
                                float _3438 = _3303.z - _1771;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3304 * _3304));
                                float _4554 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3454 = sqrt(_3439) * _3319.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_583, _586, _589))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_1771, _3347.z, fma(_1770, _3347.y, _3347.x * _1769)) + _3347.w) / _3408;
                                float _3468 = (fma(_1771, _3362.z, fma(_1770, _3362.y, _3362.x * _1769)) + _3362.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4570 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _704;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2946;
                                float _3498 = _3444 - _2947;
                                float _3499 = _3445 - _2948;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4581 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3511 = dot(vec3(_583, _586, _589), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4592 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_583, _586, _589), vec3(_3443, _3444, _3445))) + _3520;
                                float _4603 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4614 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _3474 * _3319.z;
                                frontier_phi_86_pred_1 = _3474 * _3319.y;
                                frontier_phi_86_pred_2 = _3474 * _3319.x;
                                frontier_phi_86_pred_3 = _3548 * _3331.z;
                                frontier_phi_86_pred_4 = _3548 * _3331.y;
                                frontier_phi_86_pred_5 = _3548 * _3331.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_86_pred;
                            _3556 = frontier_phi_86_pred_1;
                            _3555 = frontier_phi_86_pred_2;
                            _3554 = frontier_phi_86_pred_3;
                            _3553 = frontier_phi_86_pred_4;
                            _3552 = frontier_phi_86_pred_5;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            _3258 = _3552 + _3271;
                            _3259 = _3553 + _3272;
                            _3260 = _3554 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _3263;
                        frontier_phi_80_pred_1 = _3262;
                        frontier_phi_80_pred_2 = _3261;
                        frontier_phi_80_pred_3 = _3260;
                        frontier_phi_80_pred_4 = _3258;
                        frontier_phi_80_pred_5 = _3259;
                    }
                    _2931 = frontier_phi_80_pred;
                    _2929 = frontier_phi_80_pred_1;
                    _2927 = frontier_phi_80_pred_2;
                    _2925 = frontier_phi_80_pred_3;
                    _2921 = frontier_phi_80_pred_4;
                    _2923 = frontier_phi_80_pred_5;
                    uint _3066 = _3065 + 1u;
                    if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3059 = _2921;
                        _3060 = _2923;
                        _3061 = _2925;
                        _3062 = _2927;
                        _3063 = _2929;
                        _3064 = _2931;
                        _3065 = _3066;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2931;
                frontier_phi_68_69_ladder_1 = _2929;
                frontier_phi_68_69_ladder_2 = _2927;
                frontier_phi_68_69_ladder_3 = _2925;
                frontier_phi_68_69_ladder_4 = _2923;
                frontier_phi_68_69_ladder_5 = _2921;
            }
            else
            {
                frontier_phi_68_69_ladder = _2818;
                frontier_phi_68_69_ladder_1 = _2816;
                frontier_phi_68_69_ladder_2 = _2814;
                frontier_phi_68_69_ladder_3 = _2812;
                frontier_phi_68_69_ladder_4 = _2810;
                frontier_phi_68_69_ladder_5 = _2808;
            }
            _2920 = frontier_phi_68_69_ladder_5;
            _2922 = frontier_phi_68_69_ladder_4;
            _2924 = frontier_phi_68_69_ladder_3;
            _2926 = frontier_phi_68_69_ladder_2;
            _2928 = frontier_phi_68_69_ladder_1;
            _2930 = frontier_phi_68_69_ladder;
        }
        float _2935 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2723 = (_2935 * _2926) + _2236;
        _2725 = (_2935 * _2928) + _2238;
        _2727 = (_2935 * _2930) + _2240;
        _2729 = ((_2920 * _673) * _2935) + _2574;
        _2731 = ((_2922 * _675) * _2935) + _2576;
        _2733 = ((_2924 * _676) * _2935) + _2578;
    }
    else
    {
        _2723 = _2236;
        _2725 = _2238;
        _2727 = _2240;
        _2729 = _2574;
        _2731 = _2576;
        _2733 = _2578;
    }
    vec4 _2739 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4630 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4641 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4652 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _2763 = (((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2723 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _688))) + ((_2729 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + (_2739.x * cbMtdParam._m0[3u].x);
    float _2765 = ((_2739.y * cbMtdParam._m0[3u].x) + ((_2731 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2725 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _688)));
    float _2767 = ((_2739.z * cbMtdParam._m0[3u].x) + ((_2733 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2727 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _688)));
    uint _2771 = _615 + 6u;
    float _2779 = _557 / cbSceneParam._m0[86u].x;
    float _2780 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2794 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, (log2((isnan(cbSceneParam._m0[77u].w) ? _491 : (isnan(_491) ? cbSceneParam._m0[77u].w : min(_491, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2796 = _2794.x;
    float _2797 = _2794.y;
    float _2798 = _2794.z;
    float _2799 = _2794.w;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_491 > cbSceneParam._m0[78u].w)
    {
        float _2833 = isnan(_491) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _491 : min(cbSceneParam._m0[80u].w, _491));
        float _2834 = _2833 / _491;
        float _2845 = _2834 * _542;
        float _2846 = _543 * _2834;
        float _2847 = (-0.0) - _2846;
        float _2848 = _2834 * _544;
        float _2850 = (cbSceneParam._m0[77u].w * _2847) / _2833;
        float _2851 = _2850 + cbSceneParam._m0[79u].w;
        float _2852 = cbSceneParam._m0[79u].w - _2846;
        float _2858 = sqrt(((_2845 * _2845) + (_2846 * _2846)) + (_2848 * _2848));
        float _2861 = (1.0 - (cbSceneParam._m0[77u].w / _2833)) * _2858;
        float _2866 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2868 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3021;
        if (abs((_2847 - _2850) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3021 = ((((_2851 > 0.0) ? exp2(_2866 * _2851) : (2.0 - exp2(_2868 * _2851))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2861;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : max(_2851, _2852));
            float _2983 = isnan(_2852) ? _2851 : (isnan(_2851) ? _2852 : min(_2851, _2852));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3021 = ((abs(_2858 / _2847) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2866 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2866 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2868 * _2992) - exp2(_2868 * _2993)) * _2981))) + (_2861 * cbSceneParam._m0[80u].z);
        }
        vec4 _3023 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, 1.0), 0.0);
        float _3032 = exp2((_3021 * (-1.44269502162933349609375)) * (1.0 - _3023.w));
        float _3033 = log2(_3032);
        float _3049 = log2(_2799);
        _2870 = (exp2(_3049 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].x)) * _3023.x) / cbSceneParam._m0[78u].x)) + _2796;
        _2872 = (exp2(_3049 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].y)) * _3023.y) / cbSceneParam._m0[78u].y)) + _2797;
        _2874 = (exp2(_3049 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].z)) * _3023.z) / cbSceneParam._m0[78u].z)) + _2798;
        _2876 = _3032 * _2799;
    }
    else
    {
        _2870 = _2796;
        _2872 = _2797;
        _2874 = _2798;
        _2876 = _2799;
    }
    float _2888 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2889 = _2888 == 3.0;
    float _2890 = log2(_2876);
    float _2897 = exp2(_2890 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)));
    float _2898 = exp2(_2890 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0)));
    float _2899 = exp2(_2890 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0)));
    float _2908 = (_2888 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2908 * (_2889 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.y = _2908 * (_2889 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.z = _2908 * (_2889 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.w = cbInstanceData._m0[_2771].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2771].w;
}


