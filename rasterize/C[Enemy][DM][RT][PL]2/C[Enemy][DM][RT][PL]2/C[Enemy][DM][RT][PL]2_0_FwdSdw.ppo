#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1176;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _266 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _279 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_266 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _290 = exp2(log2(_279.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[15u].x;
    _194[0u] = cbMtdParam._m0[15u].y;
    _195[0u] = cbMtdParam._m0[15u].z;
    _193[1u] = cbMtdParam._m0[16u].x;
    _194[1u] = cbMtdParam._m0[16u].y;
    _195[1u] = cbMtdParam._m0[16u].z;
    _193[2u] = cbMtdParam._m0[17u].x;
    _194[2u] = cbMtdParam._m0[17u].y;
    _195[2u] = cbMtdParam._m0[17u].z;
    _193[3u] = cbMtdParam._m0[12u].x;
    _194[3u] = cbMtdParam._m0[12u].y;
    _195[3u] = cbMtdParam._m0[12u].z;
    _193[4u] = cbMtdParam._m0[13u].x;
    _194[4u] = cbMtdParam._m0[13u].y;
    _195[4u] = cbMtdParam._m0[13u].z;
    _193[5u] = cbMtdParam._m0[14u].x;
    _194[5u] = cbMtdParam._m0[14u].y;
    _195[5u] = cbMtdParam._m0[14u].z;
    vec4 _357 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _360 = _357.y;
    float _363 = (_357.x + (-0.02500000037252902984619140625)) * 8.0;
    float _365 = roundEven(_363);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    uint _369 = uint(int(isnan(5.0) ? _366 : (isnan(_366) ? 5.0 : min(_366, 5.0))));
    float _386;
    if (_290)
    {
        _386 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _386 = cbMtdParam._m0[20u].z;
    }
    float _392;
    float _394;
    if (_290)
    {
        _392 = cbMtdParam._m0[28u].z;
        _394 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _392 = cbMtdParam._m0[24u].x;
        _394 = cbMtdParam._m0[24u].y;
    }
    float _396 = _392 * TEXCOORD.x;
    float _397 = _394 * TEXCOORD.y;
    float _409 = floor(_386);
    vec4 _412 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _396) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _397) + cbTextureTilingScale._m0[8u].w, _409));
    vec4 _434 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _266) + cbTextureTilingScale._m0[0u].w));
    float _442 = ((((((_193[_369] - cbMtdParam._m0[19u].x) * _360) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _412.x) * cbMtdParam._m0[9u].x) * _434.x;
    float _446 = ((((((_194[_369] - cbMtdParam._m0[19u].y) * _360) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _412.y) * cbMtdParam._m0[9u].y) * _434.y;
    float _450 = ((((((_195[_369] - cbMtdParam._m0[19u].z) * _360) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _412.z) * cbMtdParam._m0[9u].z) * _434.z;
    vec4 _462 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _266) + cbTextureTilingScale._m0[1u].w));
    float _466 = _462.z;
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[25u].x;
    _189[0u] = cbMtdParam._m0[25u].y;
    _188[1u] = cbMtdParam._m0[26u].x;
    _189[1u] = cbMtdParam._m0[26u].y;
    _188[2u] = cbMtdParam._m0[26u].z;
    _189[2u] = cbMtdParam._m0[26u].w;
    _188[3u] = cbMtdParam._m0[27u].x;
    _189[3u] = cbMtdParam._m0[27u].y;
    _188[4u] = cbMtdParam._m0[25u].z;
    _189[4u] = cbMtdParam._m0[25u].w;
    float _511 = roundEven(5.0 - _363);
    float _512 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _513 = isnan(4.0) ? _512 : (isnan(_512) ? 4.0 : min(_512, 4.0));
    float _515 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    uint _517 = uint(int(isnan(4.0) ? _515 : (isnan(_515) ? 4.0 : min(_515, 4.0))));
    float _523 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _396) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _397) + cbTextureTilingScale._m0[10u].w, _409)).x + _462.w) + _189[_517];
    vec4 _541 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _396) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _397) + cbTextureTilingScale._m0[9u].w, _409));
    float _548 = (_541.x * 2.0) + (-1.0);
    float _549 = (_541.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3838 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    float _565 = (cbMtdParam._m0[21u].x * (((_466 * 2.0) * (_541.z + _188[_517])) - _466)) + _466;
    float _569 = (cbMtdParam._m0[21u].y * ((_462.x * 2.0) + (-1.0))) + _548;
    float _570 = (cbMtdParam._m0[21u].y * ((_462.y * 2.0) + (-1.0))) + _549;
    float _573 = fma(_556, _245, fma(_570, _237 * TANGENT.x, (_223 * _215) * _569));
    float _576 = fma(_556, _246, fma(_570, _237 * TANGENT.y, (_223 * _216) * _569));
    float _579 = fma(_556, _247, fma(_570, _237 * TANGENT.z, (_223 * _217) * _569));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3849 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _587 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3871 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3882 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3893 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _591 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _607 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _658 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _648);
    float _659 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _648);
    float _660 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _648);
    float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
    float _665 = _658 * _664;
    float _666 = _659 * _664;
    float _667 = _660 * _664;
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _676 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _678 = _676.w;
    float _697 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _700 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _703 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    vec4 _705 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _716 = (((_705.y - _587) + (_705.w * _587)) * cbMtdParam._m0[3u].x) + _587;
    uint _729 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = (_729 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _737 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_731].x;
    float _738 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_731].y;
    float _739 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_731].z;
    float _3904 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    vec4 _743 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _748 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _759 = (((_748.x - _591) + (_748.w * _591)) * cbMtdParam._m0[3u].x) + _591;
    float _772 = (cbMtdParam._m0[3u].x * (((_740 * _678) - _740) + _743.x)) + _740;
    float _773 = (cbMtdParam._m0[3u].x * (((_741 * _678) - _741) + _743.y)) + _741;
    float _774 = (cbMtdParam._m0[3u].x * (((_742 * _678) - _742) + _743.z)) + _742;
    float _775 = 1.0 - _759;
    float _776 = _775 * _772;
    float _777 = _775 * _773;
    float _778 = _775 * _774;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _759;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _759;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _759;
    float _786 = _783 + 0.039999999105930328369140625;
    float _788 = _784 + 0.039999999105930328369140625;
    float _789 = _785 + 0.039999999105930328369140625;
    vec4 _798 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _801 = _798.x * TEXCOORD_4;
    float _802 = dot(vec3(_584, _585, _586), vec3(_665, _666, _667));
    float _805 = _802 * 2.0;
    float _809 = (_805 * _584) - _665;
    float _810 = (_805 * _585) - _666;
    float _811 = (_805 * _586) - _667;
    float _815 = abs(dot(vec3(_665, _666, _667), vec3(_584, _585, _586)));
    float _3937 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_716);
    float _828 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _834 = (1.0 - _828) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _835 = _828 * _817;
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1175;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _904 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _908 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _933 = _863 + _584;
        float _934 = _867 + _585;
        float _935 = _871 + _586;
        float _945 = fma(_935, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933)) - _900;
        float _946 = fma(_935, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933)) - _904;
        float _947 = fma(_935, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933)) - _908;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_969.x + (-0.5));
        float _1005 = _1003 * (_969.y + (-0.5));
        float _1006 = _1003 * (_969.z + (-0.5));
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_976.x + (-0.5));
        float _1015 = _1013 * (_976.y + (-0.5));
        float _1016 = _1013 * (_976.z + (-0.5));
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_983.x + (-0.5));
        float _1025 = _1023 * (_983.y + (-0.5));
        float _1026 = _1023 * (_983.z + (-0.5));
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1057 = (dot(vec3(_584, _585, _586), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1067 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3985 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1069 + 1.0))) + _1074) * _1037;
        float _1084 = _1005 * 0.5;
        float _1085 = _1015 * 0.5;
        float _1086 = _1025 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_584, _585, _586), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4018 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1111 + 1.0))) + _1116) * _1038;
        float _1126 = _1006 * 0.5;
        float _1127 = _1016 * 0.5;
        float _1128 = _1026 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_584, _585, _586), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4051 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1153 + 1.0))) + _1158) * _1039;
        _1175 = _1006;
        _1177 = _1005;
        _1178 = _1004;
        _1179 = _1016;
        _1180 = _1015;
        _1181 = _1014;
        _1182 = _1026;
        _1183 = _1025;
        _1184 = _1024;
        _1185 = _1039;
        _1186 = _1038;
        _1187 = _1037;
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _1176;
        _1177 = _1176;
        _1178 = _1176;
        _1179 = _1176;
        _1180 = _1176;
        _1181 = _1176;
        _1182 = _1176;
        _1183 = _1176;
        _1184 = _1176;
        _1185 = _1176;
        _1186 = _1176;
        _1187 = _1176;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1220 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1224 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1247 = _863 + _584;
        float _1248 = _867 + _585;
        float _1249 = _871 + _586;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_584, _585, _586), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4114 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_584, _585, _586), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4147 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_584, _585, _586), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4180 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1176;
        _1486 = _1176;
        _1487 = _1176;
        _1488 = _1176;
        _1489 = _1176;
        _1490 = _1176;
        _1491 = _1176;
        _1492 = _1176;
        _1493 = _1176;
        _1494 = _1176;
        _1495 = _1176;
        _1496 = _1176;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1189)) + _1189;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1190)) + _1190;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _809 * 0.5;
    float _1554 = _810 * 0.5;
    float _1555 = _811 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1175, _1179, _1182, _1185));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_811, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809));
        float _1683 = fma(_811, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809));
        float _1686 = fma(_811, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1714 = frontier_phi_20_18_ladder;
        }
        float _1886;
        if (_1683 > 0.0)
        {
            _1886 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1886 = frontier_phi_29_25_ladder;
        }
        float _2181;
        if (_1686 > 0.0)
        {
            _2181 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2181 = frontier_phi_41_36_ladder;
        }
        float _2183 = isnan(_1886) ? _1714 : (isnan(_1714) ? _1886 : min(_1714, _1886));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1680) + _1669;
        float _2189 = (_2184 * _1683) + _1673;
        float _2190 = (_2184 * _1686) + _1677;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2191;
        float _2195 = _2191 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 > _2195) || ((_2189 < _2193) || ((_2188 < _2193) || (_2188 > _2195))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2190, cbModelParam._m0[9u].z, fma(_2189, cbModelParam._m0[9u].y, _2188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2190, cbModelParam._m0[10u].z, fma(_2189, cbModelParam._m0[10u].y, _2188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2190, cbModelParam._m0[11u].z, fma(_2189, cbModelParam._m0[11u].y, _2188 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_19_41_ladder = _2335.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2335.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2335.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_19_41_ladder_2;
        _1704 = frontier_phi_19_41_ladder_1;
        _1706 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_809, _810, _811), _1622);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1765 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1769 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1773 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1776 = fma(_811, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809));
        float _1779 = fma(_811, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809));
        float _1782 = fma(_811, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809));
        float _1891;
        if (_1776 > 0.0)
        {
            _1891 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1891 = frontier_phi_31_27_ladder;
        }
        float _2208;
        if (_1779 > 0.0)
        {
            _2208 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2208 = frontier_phi_43_38_ladder;
        }
        float _2546;
        if (_1782 > 0.0)
        {
            _2546 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2546 = frontier_phi_53_50_ladder;
        }
        float _2548 = isnan(_2208) ? _1891 : (isnan(_1891) ? _2208 : min(_1891, _2208));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1776) + _1765;
        float _2554 = (_2549 * _1779) + _1769;
        float _2555 = (_2549 * _1782) + _1773;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_28_53_ladder;
        float frontier_phi_28_53_ladder_1;
        float frontier_phi_28_53_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_28_53_ladder = 0.0;
            frontier_phi_28_53_ladder_1 = 0.0;
            frontier_phi_28_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_28_53_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_28_53_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_28_53_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1801 = frontier_phi_28_53_ladder_2;
        _1803 = frontier_phi_28_53_ladder_1;
        _1805 = frontier_phi_28_53_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_809, _810, _811), _1711);
        _1801 = _1785.x * cbModelParam._m0[1u].z;
        _1803 = _1785.y * cbModelParam._m0[1u].z;
        _1805 = _1785.z * cbModelParam._m0[1u].z;
    }
    float _1818 = (((_834 * _786) + _835) * _801) * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1820 = (((_834 * _788) + _835) * _801) * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1822 = (((_834 * _789) + _835) * _801) * ((cbModelParam._m0[1u].w * (_1805 - _1706)) + _1706);
    float _1825 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, _1818 * cbSceneParam._m0[91u].x));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1878 = _1865 / _1877;
    float _1879 = _1869 / _1877;
    float _1880 = _1873 / _1877;
    float _2027;
    float _2028;
    float _2029;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1907 = ((uint(_1880 > cbSceneParam._m0[59u].y) + uint(_1880 > cbSceneParam._m0[59u].x)) + uint(_1880 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1908 = _1907 + 43u;
        uint _1916 = _1907 + 44u;
        uint _1924 = _1907 + 45u;
        uint _1932 = _1907 + 46u;
        float _1943 = fma(_1877, cbSceneParam._m0[_1908].w, fma(_1873, cbSceneParam._m0[_1908].z, fma(_1869, cbSceneParam._m0[_1908].y, _1865 * cbSceneParam._m0[_1908].x)));
        float _1947 = fma(_1877, cbSceneParam._m0[_1916].w, fma(_1873, cbSceneParam._m0[_1916].z, fma(_1869, cbSceneParam._m0[_1916].y, _1865 * cbSceneParam._m0[_1916].x)));
        float _1955 = fma(_1877, cbSceneParam._m0[_1932].w, fma(_1873, cbSceneParam._m0[_1932].z, fma(_1869, cbSceneParam._m0[_1932].y, _1865 * cbSceneParam._m0[_1932].x)));
        float _1960 = cbSceneParam._m0[33u].z * _1955;
        float _1962 = cbSceneParam._m0[33u].w * _1955;
        float _1965 = fma(_1877, cbSceneParam._m0[_1924].w, fma(_1873, cbSceneParam._m0[_1924].z, fma(_1869, cbSceneParam._m0[_1924].y, _1865 * cbSceneParam._m0[_1924].x))) / _1955;
        float _2013 = (cbSceneParam._m0[33u].x - sqrt(((_1879 * _1879) + (_1878 * _1878)) + (_1880 * _1880))) * cbSceneParam._m0[33u].y;
        float _4306 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2020 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 + _1943) / _1955, (_1962 + _1947) / _1955), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 + _1943) / _1955, (_1947 - _1960) / _1955), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1943 - _1960) / _1955, (_1947 - _1962) / _1955), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1943 - _1962) / _1955, (_1960 + _1947) / _1955), _1965), 0.0)).x), vec4(0.25)));
        _2027 = 1.0 - (_2020 * cbSceneParam._m0[34u].x);
        _2028 = 1.0 - (_2020 * cbSceneParam._m0[34u].y);
        _2029 = 1.0 - (_2020 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2027 = 1.0;
        _2028 = 1.0;
        _2029 = 1.0;
    }
    float _2093;
    float _2095;
    float _2097;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2081 = fma(_1877, cbSceneParam._m0[63u].w, fma(_1873, cbSceneParam._m0[63u].z, fma(_1869, cbSceneParam._m0[63u].y, _1865 * cbSceneParam._m0[63u].x)));
        float _2082 = fma(_1877, cbSceneParam._m0[60u].w, fma(_1873, cbSceneParam._m0[60u].z, fma(_1869, cbSceneParam._m0[60u].y, _1865 * cbSceneParam._m0[60u].x))) / _2081;
        float _2083 = fma(_1877, cbSceneParam._m0[61u].w, fma(_1873, cbSceneParam._m0[61u].z, fma(_1869, cbSceneParam._m0[61u].y, _1865 * cbSceneParam._m0[61u].x))) / _2081;
        float frontier_phi_40_39_ladder;
        float frontier_phi_40_39_ladder_1;
        float frontier_phi_40_39_ladder_2;
        if ((((_2082 >= cbSceneParam._m0[64u].x) && (_2083 >= cbSceneParam._m0[64u].y)) && (_2082 <= cbSceneParam._m0[64u].z)) && (_2083 <= cbSceneParam._m0[64u].w))
        {
            float _2221 = fma(_1877, cbSceneParam._m0[62u].w, fma(_1873, cbSceneParam._m0[62u].z, fma(_1869, cbSceneParam._m0[62u].y, _1865 * cbSceneParam._m0[62u].x))) / _2081;
            float _2225 = isnan(cbSceneParam._m0[41u].w) ? _2221 : (isnan(_2221) ? cbSceneParam._m0[41u].w : max(_2221, cbSceneParam._m0[41u].w));
            float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_1879 * _1879) + (_1878 * _1878)) + (_1880 * _1880))) * cbSceneParam._m0[33u].y;
            float _4322 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
            float _2275 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2082, cbSceneParam._m0[33u].w + _2083), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2082, _2083 - cbSceneParam._m0[33u].z), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2082 - cbSceneParam._m0[33u].z, _2083 - cbSceneParam._m0[33u].w), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2082 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2083), _2225), 0.0)).x), vec4(0.25)));
            float _2279 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
            float _2280 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
            float _2281 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
            frontier_phi_40_39_ladder = isnan(_2281) ? _2029 : (isnan(_2029) ? _2281 : min(_2029, _2281));
            frontier_phi_40_39_ladder_1 = isnan(_2280) ? _2028 : (isnan(_2028) ? _2280 : min(_2028, _2280));
            frontier_phi_40_39_ladder_2 = isnan(_2279) ? _2027 : (isnan(_2027) ? _2279 : min(_2027, _2279));
        }
        else
        {
            frontier_phi_40_39_ladder = _2029;
            frontier_phi_40_39_ladder_1 = _2028;
            frontier_phi_40_39_ladder_2 = _2027;
        }
        _2093 = frontier_phi_40_39_ladder_2;
        _2095 = frontier_phi_40_39_ladder_1;
        _2097 = frontier_phi_40_39_ladder;
    }
    else
    {
        _2093 = _2027;
        _2095 = _2028;
        _2097 = _2029;
    }
    uvec4 _2102 = floatBitsToUint(cbInstanceData._m0[_729 + 5u]);
    uint _2104 = _2102.x * 14u;
    uint _2105 = _2104 + 13u;
    float _2112 = _801 + (-1.0);
    float _2117 = (cbLight._m0[_2105].x * _2112) + 1.0;
    float _2118 = (cbLight._m0[_2105].y * _2112) + 1.0;
    float _2119 = (cbLight._m0[_2105].z * _2112) + 1.0;
    float _2120 = (cbLight._m0[_2105].w * _2112) + 1.0;
    uint _2121 = _2104 + 5u;
    float _2127 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2131 = _2104 + 4u;
    float _2140 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2144 = _2104 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_584, _585, _586));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_584, _585, _586));
    float _4358 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4369 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2121].x * _2127) * _2165) + (((cbLight._m0[_2131].x * _2093) * _2140) * _2163);
    float _2173 = ((_2127 * cbLight._m0[_2121].y) * _2165) + (((cbLight._m0[_2131].y * _2095) * _2140) * _2163);
    float _2174 = ((_2127 * cbLight._m0[_2121].z) * _2165) + (((cbLight._m0[_2131].z * _2097) * _2140) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2104 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2180)
    {
        _2282 = _2172;
        _2284 = _2173;
        _2286 = _2174;
    }
    else
    {
        uint _2290 = _2104 + 6u;
        float _2306 = (dot(vec3(cbLight._m0[_2104 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4380 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2309 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2282 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2172;
        _2284 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2173;
        _2286 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2174;
    }
    bool _2289 = _2178.y == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2289)
    {
        _2344 = _2282;
        _2346 = _2284;
        _2348 = _2286;
    }
    else
    {
        uint _2517 = _2104 + 7u;
        float _2533 = (dot(vec3(cbLight._m0[_2104 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2534 = _2533 * _2533;
        float _4396 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2535 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2536 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2344 = (((cbLight._m0[_2517].x * 0.3183098733425140380859375) * _2535) * _2536) + _2282;
        _2346 = (((cbLight._m0[_2517].y * 0.3183098733425140380859375) * _2535) * _2536) + _2284;
        _2348 = (((cbLight._m0[_2517].z * 0.3183098733425140380859375) * _2535) * _2536) + _2286;
    }
    uint _2351 = _2104 + 8u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _716) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2104].x + _665;
    float _2367 = cbLight._m0[_2104].y + _666;
    float _2368 = cbLight._m0[_2104].z + _667;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2104].xyz));
    float _4412 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _4423 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2380 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2381 = dot(vec3(_584, _585, _586), vec3(_2373, _2374, _2375));
    float _4434 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2373, _2374, _2375));
    float _4445 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2365 * _2365;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
    float _2402 = 0.959999978542327880859375 - _783;
    float _2404 = 0.959999978542327880859375 - _784;
    float _2405 = 0.959999978542327880859375 - _785;
    float _2412 = 1.0 - _2365;
    float _2423 = (0.5 / (((_2380 * ((_2379 * _2412) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2412) + _2365) * _2379))) * _2379;
    float _4456 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    uint _2439 = _2104 + 9u;
    float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _716) * 0.949999988079071044921875);
    float _2451 = _2450 * _2450;
    float _2452 = cbLight._m0[_2144].x + _665;
    float _2453 = cbLight._m0[_2144].y + _666;
    float _2454 = cbLight._m0[_2144].z + _667;
    float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
    float _2459 = _2458 * _2452;
    float _2460 = _2458 * _2453;
    float _2461 = _2458 * _2454;
    float _2462 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2144].xyz));
    float _4467 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2466 = dot(vec3(_584, _585, _586), vec3(_2459, _2460, _2461));
    float _4478 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2459, _2460, _2461));
    float _4489 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2451 * _2451;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
    float _2492 = 1.0 - _2451;
    float _2502 = (0.5 / (((_2380 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2492) + _2451) * _2465))) * _2465;
    float _4500 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    float _2514 = (((((_2485 * _2402) + _786) * cbLight._m0[_2439].x) * _2504) * _2127) + ((((cbLight._m0[_2351].x * _2093) * ((_2401 * _2402) + _786)) * _2425) * _2140);
    float _2515 = (((((_2485 * _2404) + _788) * cbLight._m0[_2439].y) * _2504) * _2127) + ((((cbLight._m0[_2351].y * _2095) * ((_2401 * _2404) + _788)) * _2425) * _2140);
    float _2516 = (((((_2485 * _2405) + _789) * cbLight._m0[_2439].z) * _2504) * _2127) + ((((cbLight._m0[_2351].z * _2097) * ((_2401 * _2405) + _789)) * _2425) * _2140);
    float _2572;
    float _2574;
    float _2576;
    if (_2180)
    {
        _2572 = _2514;
        _2574 = _2515;
        _2576 = _2516;
    }
    else
    {
        uint _2578 = _2104 + 2u;
        uint _2582 = _2104 + 10u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _716) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _665;
        float _2599 = cbLight._m0[_2578].y + _666;
        float _2600 = cbLight._m0[_2578].z + _667;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2578].xyz));
        float _4511 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2612 = dot(vec3(_584, _585, _586), vec3(_2605, _2606, _2607));
        float _4522 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4533 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2380 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2638) + _2597) * _2611))) * _2611;
        float _4544 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2572 = (((((_2631 * _2402) + _786) * cbLight._m0[_2582].x) * _2650) * _2651) + _2514;
        _2574 = (((((_2631 * _2404) + _788) * cbLight._m0[_2582].y) * _2650) * _2651) + _2515;
        _2576 = (((((_2631 * _2405) + _789) * cbLight._m0[_2582].z) * _2650) * _2651) + _2516;
    }
    float _2682;
    float _2684;
    float _2686;
    if (_2289)
    {
        _2682 = _2572;
        _2684 = _2574;
        _2686 = _2576;
    }
    else
    {
        uint _2693 = _2104 + 3u;
        uint _2697 = _2104 + 11u;
        float _2711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2693].w)) * _716) * 0.949999988079071044921875);
        float _2712 = _2711 * _2711;
        float _2713 = cbLight._m0[_2693].x + _665;
        float _2714 = cbLight._m0[_2693].y + _666;
        float _2715 = cbLight._m0[_2693].z + _667;
        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
        float _2720 = _2719 * _2713;
        float _2721 = _2719 * _2714;
        float _2722 = _2719 * _2715;
        float _2723 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2693].xyz));
        float _4560 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2727 = dot(vec3(_584, _585, _586), vec3(_2720, _2721, _2722));
        float _4571 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2731 = dot(vec3(cbLight._m0[_2693].xyz), vec3(_2720, _2721, _2722));
        float _4582 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2735 = _2712 * _2712;
        float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
        float _2746 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
        float _2753 = 1.0 - _2712;
        float _2763 = (0.5 / (((_2380 * ((_2726 * _2753) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2753) + _2712) * _2726))) * _2726;
        float _4593 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2682 = (((((_2746 * _2402) + _786) * cbLight._m0[_2697].x) * _2765) * _2766) + _2572;
        _2684 = (((((_2746 * _2404) + _788) * cbLight._m0[_2697].y) * _2765) * _2766) + _2574;
        _2686 = (((((_2746 * _2405) + _789) * cbLight._m0[_2697].z) * _2765) * _2766) + _2576;
    }
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_2102.y == 0u)
    {
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.x;
        uint _2799 = uint((float(_2787.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2788))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2788)));
        float _2809 = (log2(_1880 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2810 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        uint _2813 = uint(isnan(14.0) ? _2810 : (isnan(_2810) ? 14.0 : min(_2810, 14.0)));
        uvec4 _2818 = texelFetch(g_lightClusterGridBuffer, int(((_2813 << 2u) + (_2799 << 6u)) >> 2u));
        uint _2819 = _2818.x;
        uint _2820 = _2787.z;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        if (((((1u << ((_2820 >> 4u) & 15u)) + 4294967295u) & _2819) == 0u) || ((_2820 & 240u) == 0u))
        {
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
        }
        else
        {
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            uint _3066 = 0u;
            uint _3075;
            bool _3076;
            for (;;)
            {
                _3075 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                _3076 = _3075 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_3076)
                {
                    frontier_phi_72_pred = _3065;
                    frontier_phi_72_pred_1 = _3064;
                    frontier_phi_72_pred_2 = _3063;
                    frontier_phi_72_pred_3 = _3061;
                    frontier_phi_72_pred_4 = _3060;
                    frontier_phi_72_pred_5 = _3062;
                }
                else
                {
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    uint _3190;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3075;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    for (;;)
                    {
                        uint _3194 = uint(findLSB(_3190)) + (_3066 << 5u);
                        uint _3191 = (_3190 + 4294967295u) & _3190;
                        uint _3196 = _3194 * 48u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3216 = (_3194 * 48u) + 4u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3235 = (_3194 * 48u) + 8u;
                        vec3 _3246 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x));
                        float _3250 = _3210.x - _1878;
                        float _3251 = _3210.y - _1879;
                        float _3252 = _3210.z - _1880;
                        float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                        float _3256 = inversesqrt(_3253);
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3260 = dot(vec3(_697, _700, _703), vec3(_3257, _3258, _3259));
                        float _3265 = 1.0 - (_3253 * _3210.w);
                        float _4619 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3267 = sqrt(_3253) * _3229.w;
                        float _3270 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                        float _3271 = _3270 * _3270;
                        float _3274 = ((1.0 - _3271) * _3260) + _3271;
                        float _3277 = _3267 * _3267;
                        float _3281 = ((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3266) / ((_3277 * 0.699999988079071044921875) + 1.0);
                        float _3285 = (-0.0) - _1878;
                        float _3286 = (-0.0) - _1879;
                        float _3287 = (-0.0) - _1880;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3301 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _817;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3292 + _3257;
                        float _3313 = _3293 + _3258;
                        float _3314 = _3294 + _3259;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_697, _700, _703), vec3(_3292, _3293, _3294));
                        float _4635 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3326 = dot(vec3(_697, _700, _703), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4646 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3270 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3260) + _3335;
                        float _4657 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4668 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3333 * _3333) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125))) * _3266;
                        _3119 = (_3281 * _3229.x) + _3187;
                        _3120 = (_3281 * _3229.y) + _3188;
                        _3121 = (_3281 * _3229.z) + _3189;
                        _3116 = (_3361 * _3246.x) + _3184;
                        _3117 = (_3361 * _3246.y) + _3185;
                        _3118 = (_3361 * _3246.z) + _3186;
                        if (_3191 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3191;
                        }
                    }
                    frontier_phi_72_pred = _3121;
                    frontier_phi_72_pred_1 = _3120;
                    frontier_phi_72_pred_2 = _3119;
                    frontier_phi_72_pred_3 = _3117;
                    frontier_phi_72_pred_4 = _3116;
                    frontier_phi_72_pred_5 = _3118;
                }
                _2927 = frontier_phi_72_pred;
                _2925 = frontier_phi_72_pred_1;
                _2923 = frontier_phi_72_pred_2;
                _2919 = frontier_phi_72_pred_3;
                _2917 = frontier_phi_72_pred_4;
                _2921 = frontier_phi_72_pred_5;
                uint _3067 = _3066 + 1u;
                if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3060 = _2917;
                    _3061 = _2919;
                    _3062 = _2921;
                    _3063 = _2923;
                    _3064 = _2925;
                    _3065 = _2927;
                    _3066 = _3067;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
        }
        uvec4 _2930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2931 = _2930.z;
        uint _2933 = (_2931 >> 8u) & 15u;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((4294967295u << _2933) & _2819) == 0u)
        {
            _3028 = _2916;
            _3030 = _2918;
            _3032 = _2920;
            _3034 = _2922;
            _3036 = _2924;
            _3038 = _2926;
        }
        else
        {
            float _3053 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
            float _3054 = _3053 * _1878;
            float _3055 = _3053 * _1879;
            float _3056 = _3053 * _1880;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2933 < ((_2931 >> 12u) & 15u))
            {
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3167 = _2916;
                float _3168 = _2918;
                float _3169 = _2920;
                float _3170 = _2922;
                float _3171 = _2924;
                float _3172 = _2926;
                uint _3173 = _2933;
                uint _3182;
                bool _3183;
                for (;;)
                {
                    _3182 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                    _3183 = _3182 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_3183)
                    {
                        frontier_phi_78_pred = _3167;
                        frontier_phi_78_pred_1 = _3172;
                        frontier_phi_78_pred_2 = _3171;
                        frontier_phi_78_pred_3 = _3170;
                        frontier_phi_78_pred_4 = _3169;
                        frontier_phi_78_pred_5 = _3168;
                    }
                    else
                    {
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        float _3384 = _3172;
                        uint _3385 = _3182;
                        uint _3386;
                        vec4 _3411;
                        float _3412;
                        vec4 _3427;
                        vec3 _3439;
                        vec4 _3454;
                        vec4 _3469;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3396 = ((_3173 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3385));
                            _3386 = (_3385 + 4294967295u) & _3385;
                            uint _3398 = _3396 * 40u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            _3412 = _3411.w;
                            uint _3414 = (_3396 * 40u) + 4u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3396 * 40u) + 8u;
                            _3439 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x));
                            uint _3441 = (_3396 * 40u) + 16u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3396 * 40u) + 20u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3396 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3396 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_1880, _3503.z, fma(_1879, _3503.y, _3503.x * _1878)) + _3503.w;
                            _3516 = !((fma(_1880, _3484.z, fma(_1879, _3484.y, _3484.x * _1878)) + _3484.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3411.x - _1878;
                                float _3544 = _3411.y - _1879;
                                float _3545 = _3411.z - _1880;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3412 * _3412));
                                float _4679 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3561 = sqrt(_3546) * _3427.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_697, _700, _703))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_1880, _3454.z, fma(_1879, _3454.y, _3454.x * _1878)) + _3454.w) / _3515;
                                float _3575 = (fma(_1880, _3469.z, fma(_1879, _3469.y, _3469.x * _1878)) + _3469.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4695 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _817;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3054;
                                float _3605 = _3551 - _3055;
                                float _3606 = _3552 - _3056;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_697, _700, _703), vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056));
                                float _4706 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3618 = dot(vec3(_697, _700, _703), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4717 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_697, _700, _703), vec3(_3550, _3551, _3552))) + _3627;
                                float _4728 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4739 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3581 * _3427.z;
                                frontier_phi_84_pred_1 = _3581 * _3427.y;
                                frontier_phi_84_pred_2 = _3581 * _3427.x;
                                frontier_phi_84_pred_3 = _3655 * _3439.z;
                                frontier_phi_84_pred_4 = _3655 * _3439.y;
                                frontier_phi_84_pred_5 = _3655 * _3439.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3664 = frontier_phi_84_pred;
                            _3663 = frontier_phi_84_pred_1;
                            _3662 = frontier_phi_84_pred_2;
                            _3661 = frontier_phi_84_pred_3;
                            _3660 = frontier_phi_84_pred_4;
                            _3659 = frontier_phi_84_pred_5;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            if (_3386 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3386;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _3366;
                        frontier_phi_78_pred_1 = _3371;
                        frontier_phi_78_pred_2 = _3370;
                        frontier_phi_78_pred_3 = _3369;
                        frontier_phi_78_pred_4 = _3368;
                        frontier_phi_78_pred_5 = _3367;
                    }
                    _3029 = frontier_phi_78_pred;
                    _3039 = frontier_phi_78_pred_1;
                    _3037 = frontier_phi_78_pred_2;
                    _3035 = frontier_phi_78_pred_3;
                    _3033 = frontier_phi_78_pred_4;
                    _3031 = frontier_phi_78_pred_5;
                    uint _3174 = _3173 + 1u;
                    if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3167 = _3029;
                        _3168 = _3031;
                        _3169 = _3033;
                        _3170 = _3035;
                        _3171 = _3037;
                        _3172 = _3039;
                        _3173 = _3174;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _3037;
                frontier_phi_66_67_ladder_1 = _3035;
                frontier_phi_66_67_ladder_2 = _3033;
                frontier_phi_66_67_ladder_3 = _3031;
                frontier_phi_66_67_ladder_4 = _3029;
                frontier_phi_66_67_ladder_5 = _3039;
            }
            else
            {
                frontier_phi_66_67_ladder = _2924;
                frontier_phi_66_67_ladder_1 = _2922;
                frontier_phi_66_67_ladder_2 = _2920;
                frontier_phi_66_67_ladder_3 = _2918;
                frontier_phi_66_67_ladder_4 = _2916;
                frontier_phi_66_67_ladder_5 = _2926;
            }
            _3028 = frontier_phi_66_67_ladder_4;
            _3030 = frontier_phi_66_67_ladder_3;
            _3032 = frontier_phi_66_67_ladder_2;
            _3034 = frontier_phi_66_67_ladder_1;
            _3036 = frontier_phi_66_67_ladder;
            _3038 = frontier_phi_66_67_ladder_5;
        }
        float _3043 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
        _2831 = (_3043 * _3034) + _2344;
        _2833 = (_3043 * _3036) + _2346;
        _2835 = (_3043 * _3038) + _2348;
        _2837 = ((_3028 * _786) * _3043) + _2682;
        _2839 = ((_3030 * _788) * _3043) + _2684;
        _2841 = ((_3032 * _789) * _3043) + _2686;
    }
    else
    {
        _2831 = _2344;
        _2833 = _2346;
        _2835 = _2348;
        _2837 = _2682;
        _2839 = _2684;
        _2841 = _2686;
    }
    vec4 _2847 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4755 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4766 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4777 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2871 = (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2831 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _801))) + ((_2837 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1611)) * cbPerFrame._m0[3u].x)) + (_2847.x * cbMtdParam._m0[3u].x);
    float _2873 = ((_2847.y * cbMtdParam._m0[3u].x) + ((_2839 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1611)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2833 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _801)));
    float _2875 = ((_2847.z * cbMtdParam._m0[3u].x) + ((_2841 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1611)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2835 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _801)));
    uint _2879 = _729 + 6u;
    float _2887 = _673 / cbSceneParam._m0[86u].x;
    float _2888 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2902 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, (log2((isnan(cbSceneParam._m0[77u].w) ? _607 : (isnan(_607) ? cbSceneParam._m0[77u].w : min(_607, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2904 = _2902.x;
    float _2905 = _2902.y;
    float _2906 = _2902.z;
    float _2907 = _2902.w;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_607 > cbSceneParam._m0[78u].w)
    {
        float _2941 = isnan(_607) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _607 : min(cbSceneParam._m0[80u].w, _607));
        float _2942 = _2941 / _607;
        float _2953 = _2942 * _658;
        float _2954 = _659 * _2942;
        float _2955 = (-0.0) - _2954;
        float _2956 = _2942 * _660;
        float _2958 = (cbSceneParam._m0[77u].w * _2955) / _2941;
        float _2959 = _2958 + cbSceneParam._m0[79u].w;
        float _2960 = cbSceneParam._m0[79u].w - _2954;
        float _2966 = sqrt(((_2953 * _2953) + (_2954 * _2954)) + (_2956 * _2956));
        float _2969 = (1.0 - (cbSceneParam._m0[77u].w / _2941)) * _2966;
        float _2974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3129;
        if (abs((_2955 - _2958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3129 = ((((_2959 > 0.0) ? exp2(_2974 * _2959) : (2.0 - exp2(_2976 * _2959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2969;
        }
        else
        {
            float _3089 = 1.0 / cbSceneParam._m0[80u].x;
            float _3090 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : max(_2959, _2960));
            float _3091 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : min(_2959, _2960));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            _3129 = ((abs(_2966 / _2955) * cbSceneParam._m0[80u].y) * ((((_3100 - _3101) * 2.0) - ((exp2(_2974 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0)))) - exp2(_2974 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))))) * _3089)) - ((exp2(_2976 * _3100) - exp2(_2976 * _3101)) * _3089))) + (_2969 * cbSceneParam._m0[80u].z);
        }
        vec4 _3131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, 1.0), 0.0);
        float _3140 = exp2((_3129 * (-1.44269502162933349609375)) * (1.0 - _3131.w));
        float _3141 = log2(_3140);
        float _3157 = log2(_2907);
        _2978 = (exp2(_3157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].x)) * _3131.x) / cbSceneParam._m0[78u].x)) + _2904;
        _2980 = (exp2(_3157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].y)) * _3131.y) / cbSceneParam._m0[78u].y)) + _2905;
        _2982 = (exp2(_3157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].z)) * _3131.z) / cbSceneParam._m0[78u].z)) + _2906;
        _2984 = _3140 * _2907;
    }
    else
    {
        _2978 = _2904;
        _2980 = _2905;
        _2982 = _2906;
        _2984 = _2907;
    }
    float _2996 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2997 = _2996 == 3.0;
    float _2998 = log2(_2984);
    float _3005 = exp2(_2998 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)));
    float _3006 = exp2(_2998 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0)));
    float _3007 = exp2(_2998 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)));
    float _3016 = (_2996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3016 * (_2997 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.y = _3016 * (_2997 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.z = _3016 * (_2997 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.w = cbInstanceData._m0[_2879].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2879].w;
}


