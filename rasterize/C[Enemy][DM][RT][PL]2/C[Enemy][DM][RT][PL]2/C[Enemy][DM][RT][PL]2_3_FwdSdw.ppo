#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1156;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _264 = log2(0.0);
    bool _267 = exp2(_264 * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[15u].x;
    _192[0u] = cbMtdParam._m0[15u].y;
    _193[0u] = cbMtdParam._m0[15u].z;
    _191[1u] = cbMtdParam._m0[16u].x;
    _192[1u] = cbMtdParam._m0[16u].y;
    _193[1u] = cbMtdParam._m0[16u].z;
    _191[2u] = cbMtdParam._m0[17u].x;
    _192[2u] = cbMtdParam._m0[17u].y;
    _193[2u] = cbMtdParam._m0[17u].z;
    _191[3u] = cbMtdParam._m0[12u].x;
    _192[3u] = cbMtdParam._m0[12u].y;
    _193[3u] = cbMtdParam._m0[12u].z;
    _191[4u] = cbMtdParam._m0[13u].x;
    _192[4u] = cbMtdParam._m0[13u].y;
    _193[4u] = cbMtdParam._m0[13u].z;
    _191[5u] = cbMtdParam._m0[14u].x;
    _192[5u] = cbMtdParam._m0[14u].y;
    _193[5u] = cbMtdParam._m0[14u].z;
    vec4 _335 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _339 = _335.y;
    float _342 = (_335.x + (-0.02500000037252902984619140625)) * 8.0;
    float _344 = roundEven(_342);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    uint _348 = uint(int(isnan(5.0) ? _345 : (isnan(_345) ? 5.0 : min(_345, 5.0))));
    float _365;
    if (_267)
    {
        _365 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _365 = cbMtdParam._m0[20u].z;
    }
    float _371;
    float _373;
    if (_267)
    {
        _371 = cbMtdParam._m0[28u].z;
        _373 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _371 = cbMtdParam._m0[24u].x;
        _373 = cbMtdParam._m0[24u].y;
    }
    float _375 = _371 * TEXCOORD.x;
    float _376 = _373 * TEXCOORD.y;
    float _388 = floor(_365);
    vec4 _391 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _375) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _376) + cbTextureTilingScale._m0[8u].w, _388));
    vec4 _413 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _421 = ((((((_191[_348] - cbMtdParam._m0[19u].x) * _339) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _391.x) * cbMtdParam._m0[9u].x) * _413.x;
    float _425 = ((((((_192[_348] - cbMtdParam._m0[19u].y) * _339) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _391.y) * cbMtdParam._m0[9u].y) * _413.y;
    float _429 = ((((((_193[_348] - cbMtdParam._m0[19u].z) * _339) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _391.z) * cbMtdParam._m0[9u].z) * _413.z;
    vec4 _441 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _445 = _441.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[25u].x;
    _187[0u] = cbMtdParam._m0[25u].y;
    _186[1u] = cbMtdParam._m0[26u].x;
    _187[1u] = cbMtdParam._m0[26u].y;
    _186[2u] = cbMtdParam._m0[26u].z;
    _187[2u] = cbMtdParam._m0[26u].w;
    _186[3u] = cbMtdParam._m0[27u].x;
    _187[3u] = cbMtdParam._m0[27u].y;
    _186[4u] = cbMtdParam._m0[25u].z;
    _187[4u] = cbMtdParam._m0[25u].w;
    float _490 = roundEven(5.0 - _342);
    float _491 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _492 = isnan(4.0) ? _491 : (isnan(_491) ? 4.0 : min(_491, 4.0));
    float _494 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    uint _496 = uint(int(isnan(4.0) ? _494 : (isnan(_494) ? 4.0 : min(_494, 4.0))));
    float _502 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _375) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _376) + cbTextureTilingScale._m0[10u].w, _388)).x + _441.w) + _187[_496];
    vec4 _520 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _375) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _376) + cbTextureTilingScale._m0[9u].w, _388));
    float _527 = (_520.x * 2.0) + (-1.0);
    float _528 = (_520.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3818 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    float _545 = (cbMtdParam._m0[21u].x * (((_445 * 2.0) * (_520.z + _186[_496])) - _445)) + _445;
    float _549 = (cbMtdParam._m0[21u].y * ((_441.x * 2.0) + (-1.0))) + _527;
    float _550 = (cbMtdParam._m0[21u].y * ((_441.y * 2.0) + (-1.0))) + _528;
    float _553 = fma(_535, _243, fma(_550, _235 * TANGENT.x, (_221 * _213) * _549));
    float _556 = fma(_535, _244, fma(_550, _235 * TANGENT.y, (_221 * _214) * _549));
    float _559 = fma(_535, _245, fma(_550, _235 * TANGENT.z, (_221 * _215) * _549));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3829 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _567 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3851 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3862 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3873 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _571 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _638 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _628);
    float _639 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _628);
    float _640 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _628);
    float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
    float _645 = _638 * _644;
    float _646 = _639 * _644;
    float _647 = _640 * _644;
    float _653 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _654 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _656 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _658 = _656.w;
    float _677 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _680 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _683 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    vec4 _685 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _696 = (((_685.y - _567) + (_685.w * _567)) * cbMtdParam._m0[3u].x) + _567;
    uint _709 = uint(roundEven(NORMAL.w)) * 13u;
    uint _711 = (_709 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _717 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * cbInstanceData._m0[_711].x;
    float _718 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_711].y;
    float _719 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_711].z;
    float _3884 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    vec4 _723 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _728 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _739 = (((_728.x - _571) + (_728.w * _571)) * cbMtdParam._m0[3u].x) + _571;
    float _752 = (cbMtdParam._m0[3u].x * (((_720 * _658) - _720) + _723.x)) + _720;
    float _753 = (cbMtdParam._m0[3u].x * (((_721 * _658) - _721) + _723.y)) + _721;
    float _754 = (cbMtdParam._m0[3u].x * (((_722 * _658) - _722) + _723.z)) + _722;
    float _755 = 1.0 - _739;
    float _756 = _755 * _752;
    float _757 = _755 * _753;
    float _758 = _755 * _754;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _739;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _739;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _739;
    float _766 = _763 + 0.039999999105930328369140625;
    float _768 = _764 + 0.039999999105930328369140625;
    float _769 = _765 + 0.039999999105930328369140625;
    vec4 _778 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _653, cbSceneParam._m0[86u].y * _654));
    float _781 = _778.x * TEXCOORD_4;
    float _782 = dot(vec3(_564, _565, _566), vec3(_645, _646, _647));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _564) - _645;
    float _790 = (_785 * _565) - _646;
    float _791 = (_785 * _566) - _647;
    float _795 = abs(dot(vec3(_645, _646, _647), vec3(_564, _565, _566)));
    float _3917 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_696);
    float _808 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _814 = (1.0 - _808) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _815 = _808 * _797;
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1155;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_851, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843));
        float _884 = fma(_851, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843));
        float _888 = fma(_851, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843));
        float _913 = _843 + _564;
        float _914 = _847 + _565;
        float _915 = _851 + _566;
        float _925 = fma(_915, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913)) - _880;
        float _926 = fma(_915, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913)) - _884;
        float _927 = fma(_915, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913)) - _888;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _983 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_949.x + (-0.5));
        float _985 = _983 * (_949.y + (-0.5));
        float _986 = _983 * (_949.z + (-0.5));
        float _993 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_956.x + (-0.5));
        float _995 = _993 * (_956.y + (-0.5));
        float _996 = _993 * (_956.z + (-0.5));
        float _1003 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_963.x + (-0.5));
        float _1005 = _1003 * (_963.y + (-0.5));
        float _1006 = _1003 * (_963.z + (-0.5));
        float _1013 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_970.x + (-0.5));
        float _1015 = _1013 * (_970.y + (-0.5));
        float _1016 = _1013 * (_970.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1037 = (dot(vec3(_564, _565, _566), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1047 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3965 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1049 + 1.0))) + _1054) * _1017;
        float _1064 = _985 * 0.5;
        float _1065 = _995 * 0.5;
        float _1066 = _1005 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_564, _565, _566), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3998 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1091 + 1.0))) + _1096) * _1018;
        float _1106 = _986 * 0.5;
        float _1107 = _996 * 0.5;
        float _1108 = _1006 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_564, _565, _566), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4031 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1133 + 1.0))) + _1138) * _1019;
        _1155 = _986;
        _1157 = _985;
        _1158 = _984;
        _1159 = _996;
        _1160 = _995;
        _1161 = _994;
        _1162 = _1006;
        _1163 = _1005;
        _1164 = _1004;
        _1165 = _1019;
        _1166 = _1018;
        _1167 = _1017;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _1156;
        _1157 = _1156;
        _1158 = _1156;
        _1159 = _1156;
        _1160 = _1156;
        _1161 = _1156;
        _1162 = _1156;
        _1163 = _1156;
        _1164 = _1156;
        _1165 = _1156;
        _1166 = _1156;
        _1167 = _1156;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1196 = fma(_851, cbModelParam._m0[30u].z, fma(_847, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843));
        float _1200 = fma(_851, cbModelParam._m0[31u].z, fma(_847, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843));
        float _1204 = fma(_851, cbModelParam._m0[32u].z, fma(_847, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843));
        float _1227 = _843 + _564;
        float _1228 = _847 + _565;
        float _1229 = _851 + _566;
        float _1239 = fma(_1229, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227)) - _1196;
        float _1240 = fma(_1229, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227)) - _1200;
        float _1241 = fma(_1229, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227)) - _1204;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1196 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1200 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[35u].z) + ((((((_1204 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1295 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1262.x + (-0.5));
        float _1297 = _1295 * (_1262.y + (-0.5));
        float _1298 = _1295 * (_1262.z + (-0.5));
        float _1305 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1269.x + (-0.5));
        float _1307 = _1305 * (_1269.y + (-0.5));
        float _1308 = _1305 * (_1269.z + (-0.5));
        float _1315 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1276.x + (-0.5));
        float _1317 = _1315 * (_1276.y + (-0.5));
        float _1318 = _1315 * (_1276.z + (-0.5));
        float _1325 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1283.x + (-0.5));
        float _1327 = _1325 * (_1283.y + (-0.5));
        float _1328 = _1325 * (_1283.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_564, _565, _566), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4094 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1359 + 1.0))) + _1364) * _1329;
        float _1374 = _1297 * 0.5;
        float _1375 = _1307 * 0.5;
        float _1376 = _1317 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_564, _565, _566), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4127 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1401 + 1.0))) + _1406) * _1330;
        float _1416 = _1298 * 0.5;
        float _1417 = _1308 * 0.5;
        float _1418 = _1318 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_564, _565, _566), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4160 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1443 + 1.0))) + _1448) * _1331;
        _1465 = _1298;
        _1466 = _1297;
        _1467 = _1296;
        _1468 = _1308;
        _1469 = _1307;
        _1470 = _1306;
        _1471 = _1318;
        _1472 = _1317;
        _1473 = _1316;
        _1474 = _1331;
        _1475 = _1330;
        _1476 = _1329;
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1156;
        _1466 = _1156;
        _1467 = _1156;
        _1468 = _1156;
        _1469 = _1156;
        _1470 = _1156;
        _1471 = _1156;
        _1472 = _1156;
        _1473 = _1156;
        _1474 = _1156;
        _1475 = _1156;
        _1476 = _1156;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1170)) + _1170;
    float _1512 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1489));
    float _1533 = _789 * 0.5;
    float _1534 = _790 * 0.5;
    float _1535 = _791 * 0.5;
    float _1536 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1539 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1542 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1576;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1549 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1155, _1159, _1162, _1165));
        float _1553 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1557 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1564 = dot(vec4(cbModelParam._m0[39u]), vec4(_1533, _1534, _1535, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1587;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1578 = dot(vec4(cbModelParam._m0[40u]), vec4(_1533, _1534, _1535, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1591 = (_1587 * cbModelParam._m0[1u].x) + (_1576 * (1.0 - cbModelParam._m0[1u].x));
    float _1601 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _696);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1601 : min(cbModelParam._m0[25u].z, _1601));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1649 = fma(_851, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843)) + cbModelParam._m0[13u].w;
        float _1653 = fma(_851, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843)) + cbModelParam._m0[14u].w;
        float _1657 = fma(_851, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843)) + cbModelParam._m0[15u].w;
        float _1660 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1663 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1666 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1694;
        if (_1660 > 0.0)
        {
            _1694 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1694 = frontier_phi_20_18_ladder;
        }
        float _1866;
        if (_1663 > 0.0)
        {
            _1866 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1866 = frontier_phi_29_25_ladder;
        }
        float _2161;
        if (_1666 > 0.0)
        {
            _2161 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2161 = frontier_phi_41_36_ladder;
        }
        float _2163 = isnan(_1866) ? _1694 : (isnan(_1694) ? _1866 : min(_1694, _1866));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1660) + _1649;
        float _2169 = (_2164 * _1663) + _1653;
        float _2170 = (_2164 * _1666) + _1657;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1602);
            frontier_phi_19_41_ladder = _2315.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2315.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2315.x * cbModelParam._m0[1u].y;
        }
        _1682 = frontier_phi_19_41_ladder_2;
        _1684 = frontier_phi_19_41_ladder_1;
        _1686 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1602);
        _1682 = _1670.x * cbModelParam._m0[1u].y;
        _1684 = _1670.y * cbModelParam._m0[1u].y;
        _1686 = _1670.z * cbModelParam._m0[1u].y;
    }
    float _1690 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _696);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1690 : min(cbModelParam._m0[25u].w, _1690));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_851, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_851, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_851, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1759 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1762 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1871;
        if (_1756 > 0.0)
        {
            _1871 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1871 = frontier_phi_31_27_ladder;
        }
        float _2188;
        if (_1759 > 0.0)
        {
            _2188 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2188 = frontier_phi_43_38_ladder;
        }
        float _2526;
        if (_1762 > 0.0)
        {
            _2526 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2526 = frontier_phi_53_50_ladder;
        }
        float _2528 = isnan(_2188) ? _1871 : (isnan(_1871) ? _2188 : min(_1871, _2188));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1756) + _1745;
        float _2534 = (_2529 * _1759) + _1749;
        float _2535 = (_2529 * _1762) + _1753;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_28_53_ladder;
        float frontier_phi_28_53_ladder_1;
        float frontier_phi_28_53_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_28_53_ladder = 0.0;
            frontier_phi_28_53_ladder_1 = 0.0;
            frontier_phi_28_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1691);
            frontier_phi_28_53_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_28_53_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_28_53_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_28_53_ladder_2;
        _1783 = frontier_phi_28_53_ladder_1;
        _1785 = frontier_phi_28_53_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1691);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1798 = (((_814 * _766) + _815) * _781) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1800 = (((_814 * _768) + _815) * _781) * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1802 = (((_814 * _769) + _815) * _781) * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1858 = _1845 / _1857;
    float _1859 = _1849 / _1857;
    float _1860 = _1853 / _1857;
    float _2007;
    float _2008;
    float _2009;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1887 = ((uint(_1860 > cbSceneParam._m0[59u].y) + uint(_1860 > cbSceneParam._m0[59u].x)) + uint(_1860 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1888 = _1887 + 43u;
        uint _1896 = _1887 + 44u;
        uint _1904 = _1887 + 45u;
        uint _1912 = _1887 + 46u;
        float _1923 = fma(_1857, cbSceneParam._m0[_1888].w, fma(_1853, cbSceneParam._m0[_1888].z, fma(_1849, cbSceneParam._m0[_1888].y, _1845 * cbSceneParam._m0[_1888].x)));
        float _1927 = fma(_1857, cbSceneParam._m0[_1896].w, fma(_1853, cbSceneParam._m0[_1896].z, fma(_1849, cbSceneParam._m0[_1896].y, _1845 * cbSceneParam._m0[_1896].x)));
        float _1935 = fma(_1857, cbSceneParam._m0[_1912].w, fma(_1853, cbSceneParam._m0[_1912].z, fma(_1849, cbSceneParam._m0[_1912].y, _1845 * cbSceneParam._m0[_1912].x)));
        float _1940 = cbSceneParam._m0[33u].z * _1935;
        float _1942 = cbSceneParam._m0[33u].w * _1935;
        float _1945 = fma(_1857, cbSceneParam._m0[_1904].w, fma(_1853, cbSceneParam._m0[_1904].z, fma(_1849, cbSceneParam._m0[_1904].y, _1845 * cbSceneParam._m0[_1904].x))) / _1935;
        float _1993 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
        float _4286 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _2000 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 + _1923) / _1935, (_1942 + _1927) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 + _1923) / _1935, (_1927 - _1940) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1940) / _1935, (_1927 - _1942) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1942) / _1935, (_1940 + _1927) / _1935), _1945), 0.0)).x), vec4(0.25)));
        _2007 = 1.0 - (_2000 * cbSceneParam._m0[34u].x);
        _2008 = 1.0 - (_2000 * cbSceneParam._m0[34u].y);
        _2009 = 1.0 - (_2000 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2007 = 1.0;
        _2008 = 1.0;
        _2009 = 1.0;
    }
    float _2073;
    float _2075;
    float _2077;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2061 = fma(_1857, cbSceneParam._m0[63u].w, fma(_1853, cbSceneParam._m0[63u].z, fma(_1849, cbSceneParam._m0[63u].y, _1845 * cbSceneParam._m0[63u].x)));
        float _2062 = fma(_1857, cbSceneParam._m0[60u].w, fma(_1853, cbSceneParam._m0[60u].z, fma(_1849, cbSceneParam._m0[60u].y, _1845 * cbSceneParam._m0[60u].x))) / _2061;
        float _2063 = fma(_1857, cbSceneParam._m0[61u].w, fma(_1853, cbSceneParam._m0[61u].z, fma(_1849, cbSceneParam._m0[61u].y, _1845 * cbSceneParam._m0[61u].x))) / _2061;
        float frontier_phi_40_39_ladder;
        float frontier_phi_40_39_ladder_1;
        float frontier_phi_40_39_ladder_2;
        if ((((_2062 >= cbSceneParam._m0[64u].x) && (_2063 >= cbSceneParam._m0[64u].y)) && (_2062 <= cbSceneParam._m0[64u].z)) && (_2063 <= cbSceneParam._m0[64u].w))
        {
            float _2201 = fma(_1857, cbSceneParam._m0[62u].w, fma(_1853, cbSceneParam._m0[62u].z, fma(_1849, cbSceneParam._m0[62u].y, _1845 * cbSceneParam._m0[62u].x))) / _2061;
            float _2205 = isnan(cbSceneParam._m0[41u].w) ? _2201 : (isnan(_2201) ? cbSceneParam._m0[41u].w : max(_2201, cbSceneParam._m0[41u].w));
            float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
            float _4302 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
            float _2255 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2062, cbSceneParam._m0[33u].w + _2063), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2062, _2063 - cbSceneParam._m0[33u].z), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].z, _2063 - cbSceneParam._m0[33u].w), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2063), _2205), 0.0)).x), vec4(0.25)));
            float _2259 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
            float _2260 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
            float _2261 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
            frontier_phi_40_39_ladder = isnan(_2261) ? _2009 : (isnan(_2009) ? _2261 : min(_2009, _2261));
            frontier_phi_40_39_ladder_1 = isnan(_2260) ? _2008 : (isnan(_2008) ? _2260 : min(_2008, _2260));
            frontier_phi_40_39_ladder_2 = isnan(_2259) ? _2007 : (isnan(_2007) ? _2259 : min(_2007, _2259));
        }
        else
        {
            frontier_phi_40_39_ladder = _2009;
            frontier_phi_40_39_ladder_1 = _2008;
            frontier_phi_40_39_ladder_2 = _2007;
        }
        _2073 = frontier_phi_40_39_ladder_2;
        _2075 = frontier_phi_40_39_ladder_1;
        _2077 = frontier_phi_40_39_ladder;
    }
    else
    {
        _2073 = _2007;
        _2075 = _2008;
        _2077 = _2009;
    }
    uvec4 _2082 = floatBitsToUint(cbInstanceData._m0[_709 + 5u]);
    uint _2084 = _2082.x * 14u;
    uint _2085 = _2084 + 13u;
    float _2092 = _781 + (-1.0);
    float _2097 = (cbLight._m0[_2085].x * _2092) + 1.0;
    float _2098 = (cbLight._m0[_2085].y * _2092) + 1.0;
    float _2099 = (cbLight._m0[_2085].z * _2092) + 1.0;
    float _2100 = (cbLight._m0[_2085].w * _2092) + 1.0;
    uint _2101 = _2084 + 5u;
    float _2107 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2111 = _2084 + 4u;
    float _2120 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2124 = _2084 | 1u;
    float _2135 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_564, _565, _566));
    float _2138 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_564, _565, _566));
    float _4338 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _4349 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2145 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2152 = ((cbLight._m0[_2101].x * _2107) * _2145) + (((cbLight._m0[_2111].x * _2073) * _2120) * _2143);
    float _2153 = ((_2107 * cbLight._m0[_2101].y) * _2145) + (((cbLight._m0[_2111].y * _2075) * _2120) * _2143);
    float _2154 = ((_2107 * cbLight._m0[_2101].z) * _2145) + (((cbLight._m0[_2111].z * _2077) * _2120) * _2143);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2084 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2160)
    {
        _2262 = _2152;
        _2264 = _2153;
        _2266 = _2154;
    }
    else
    {
        uint _2270 = _2084 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2084 + 2u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4360 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2289 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2152;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2153;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2154;
    }
    bool _2269 = _2158.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2269)
    {
        _2324 = _2262;
        _2326 = _2264;
        _2328 = _2266;
    }
    else
    {
        uint _2497 = _2084 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2084 + 3u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4376 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2516 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2324 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2262;
        _2326 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2264;
        _2328 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2266;
    }
    uint _2331 = _2084 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _696) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2084].x + _645;
    float _2347 = cbLight._m0[_2084].y + _646;
    float _2348 = cbLight._m0[_2084].z + _647;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2084].xyz));
    float _4392 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2360 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2361 = dot(vec3(_564, _565, _566), vec3(_2353, _2354, _2355));
    float _4414 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2353, _2354, _2355));
    float _4425 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
    float _2382 = 0.959999978542327880859375 - _763;
    float _2384 = 0.959999978542327880859375 - _764;
    float _2385 = 0.959999978542327880859375 - _765;
    float _2392 = 1.0 - _2345;
    float _2403 = (0.5 / (((_2360 * ((_2359 * _2392) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2392) + _2345) * _2359))) * _2359;
    float _4436 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2419 = _2084 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _696) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2124].x + _645;
    float _2433 = cbLight._m0[_2124].y + _646;
    float _2434 = cbLight._m0[_2124].z + _647;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2124].xyz));
    float _4447 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2446 = dot(vec3(_564, _565, _566), vec3(_2439, _2440, _2441));
    float _4458 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2439, _2440, _2441));
    float _4469 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2360 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2472) + _2431) * _2445))) * _2445;
    float _4480 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2382) + _766) * cbLight._m0[_2419].x) * _2484) * _2107) + ((((cbLight._m0[_2331].x * _2073) * ((_2381 * _2382) + _766)) * _2405) * _2120);
    float _2495 = (((((_2465 * _2384) + _768) * cbLight._m0[_2419].y) * _2484) * _2107) + ((((cbLight._m0[_2331].y * _2075) * ((_2381 * _2384) + _768)) * _2405) * _2120);
    float _2496 = (((((_2465 * _2385) + _769) * cbLight._m0[_2419].z) * _2484) * _2107) + ((((cbLight._m0[_2331].z * _2077) * ((_2381 * _2385) + _769)) * _2405) * _2120);
    float _2552;
    float _2554;
    float _2556;
    if (_2160)
    {
        _2552 = _2494;
        _2554 = _2495;
        _2556 = _2496;
    }
    else
    {
        uint _2558 = _2084 + 2u;
        uint _2562 = _2084 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _696) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _645;
        float _2579 = cbLight._m0[_2558].y + _646;
        float _2580 = cbLight._m0[_2558].z + _647;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2558].xyz));
        float _4491 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2592 = dot(vec3(_564, _565, _566), vec3(_2585, _2586, _2587));
        float _4502 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4513 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2360 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2618) + _2577) * _2591))) * _2591;
        float _4524 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2552 = (((((_2611 * _2382) + _766) * cbLight._m0[_2562].x) * _2630) * _2631) + _2494;
        _2554 = (((((_2611 * _2384) + _768) * cbLight._m0[_2562].y) * _2630) * _2631) + _2495;
        _2556 = (((((_2611 * _2385) + _769) * cbLight._m0[_2562].z) * _2630) * _2631) + _2496;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2269)
    {
        _2662 = _2552;
        _2664 = _2554;
        _2666 = _2556;
    }
    else
    {
        uint _2673 = _2084 + 3u;
        uint _2677 = _2084 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _696) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _645;
        float _2694 = cbLight._m0[_2673].y + _646;
        float _2695 = cbLight._m0[_2673].z + _647;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2673].xyz));
        float _4540 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2707 = dot(vec3(_564, _565, _566), vec3(_2700, _2701, _2702));
        float _4551 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4562 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2360 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2733) + _2692) * _2706))) * _2706;
        float _4573 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2662 = (((((_2726 * _2382) + _766) * cbLight._m0[_2677].x) * _2745) * _2746) + _2552;
        _2664 = (((((_2726 * _2384) + _768) * cbLight._m0[_2677].y) * _2745) * _2746) + _2554;
        _2666 = (((((_2726 * _2385) + _769) * cbLight._m0[_2677].z) * _2745) * _2746) + _2556;
    }
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_2082.y == 0u)
    {
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _654) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _653) / _2768)));
        float _2789 = (log2(_1860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            uint _3046 = 0u;
            uint _3055;
            bool _3056;
            for (;;)
            {
                _3055 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                _3056 = _3055 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_3056)
                {
                    frontier_phi_72_pred = _3045;
                    frontier_phi_72_pred_1 = _3044;
                    frontier_phi_72_pred_2 = _3043;
                    frontier_phi_72_pred_3 = _3041;
                    frontier_phi_72_pred_4 = _3040;
                    frontier_phi_72_pred_5 = _3042;
                }
                else
                {
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    uint _3170;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3055;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    for (;;)
                    {
                        uint _3174 = uint(findLSB(_3170)) + (_3046 << 5u);
                        uint _3171 = (_3170 + 4294967295u) & _3170;
                        uint _3176 = _3174 * 48u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3196 = (_3174 * 48u) + 4u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3215 = (_3174 * 48u) + 8u;
                        vec3 _3226 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x));
                        float _3230 = _3190.x - _1858;
                        float _3231 = _3190.y - _1859;
                        float _3232 = _3190.z - _1860;
                        float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                        float _3236 = inversesqrt(_3233);
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3240 = dot(vec3(_677, _680, _683), vec3(_3237, _3238, _3239));
                        float _3245 = 1.0 - (_3233 * _3190.w);
                        float _4599 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3247 = sqrt(_3233) * _3209.w;
                        float _3250 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3240) + _3251;
                        float _3257 = _3247 * _3247;
                        float _3261 = ((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3246) / ((_3257 * 0.699999988079071044921875) + 1.0);
                        float _3265 = (-0.0) - _1858;
                        float _3266 = (-0.0) - _1859;
                        float _3267 = (-0.0) - _1860;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3281 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _797;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3272 + _3237;
                        float _3293 = _3273 + _3238;
                        float _3294 = _3274 + _3239;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_677, _680, _683), vec3(_3272, _3273, _3274));
                        float _4615 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3306 = dot(vec3(_677, _680, _683), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4626 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3250 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3240) + _3315;
                        float _4637 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4648 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3313 * _3313) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125))) * _3246;
                        _3099 = (_3261 * _3209.x) + _3167;
                        _3100 = (_3261 * _3209.y) + _3168;
                        _3101 = (_3261 * _3209.z) + _3169;
                        _3096 = (_3341 * _3226.x) + _3164;
                        _3097 = (_3341 * _3226.y) + _3165;
                        _3098 = (_3341 * _3226.z) + _3166;
                        if (_3171 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3171;
                        }
                    }
                    frontier_phi_72_pred = _3101;
                    frontier_phi_72_pred_1 = _3100;
                    frontier_phi_72_pred_2 = _3099;
                    frontier_phi_72_pred_3 = _3097;
                    frontier_phi_72_pred_4 = _3096;
                    frontier_phi_72_pred_5 = _3098;
                }
                _2907 = frontier_phi_72_pred;
                _2905 = frontier_phi_72_pred_1;
                _2903 = frontier_phi_72_pred_2;
                _2899 = frontier_phi_72_pred_3;
                _2897 = frontier_phi_72_pred_4;
                _2901 = frontier_phi_72_pred_5;
                uint _3047 = _3046 + 1u;
                if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3040 = _2897;
                    _3041 = _2899;
                    _3042 = _2901;
                    _3043 = _2903;
                    _3044 = _2905;
                    _3045 = _2907;
                    _3046 = _3047;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((4294967295u << _2913) & _2799) == 0u)
        {
            _3008 = _2896;
            _3010 = _2898;
            _3012 = _2900;
            _3014 = _2902;
            _3016 = _2904;
            _3018 = _2906;
        }
        else
        {
            float _3033 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
            float _3034 = _3033 * _1858;
            float _3035 = _3033 * _1859;
            float _3036 = _3033 * _1860;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3147 = _2896;
                float _3148 = _2898;
                float _3149 = _2900;
                float _3150 = _2902;
                float _3151 = _2904;
                float _3152 = _2906;
                uint _3153 = _2913;
                uint _3162;
                bool _3163;
                for (;;)
                {
                    _3162 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                    _3163 = _3162 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_3163)
                    {
                        frontier_phi_78_pred = _3147;
                        frontier_phi_78_pred_1 = _3152;
                        frontier_phi_78_pred_2 = _3151;
                        frontier_phi_78_pred_3 = _3150;
                        frontier_phi_78_pred_4 = _3149;
                        frontier_phi_78_pred_5 = _3148;
                    }
                    else
                    {
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3359 = _3147;
                        float _3360 = _3148;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        uint _3365 = _3162;
                        uint _3366;
                        vec4 _3391;
                        float _3392;
                        vec4 _3407;
                        vec3 _3419;
                        vec4 _3434;
                        vec4 _3449;
                        float _3495;
                        bool _3496;
                        for (;;)
                        {
                            uint _3376 = ((_3153 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3365));
                            _3366 = (_3365 + 4294967295u) & _3365;
                            uint _3378 = _3376 * 40u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3392 = _3391.w;
                            uint _3394 = (_3376 * 40u) + 4u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3376 * 40u) + 8u;
                            _3419 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x));
                            uint _3421 = (_3376 * 40u) + 16u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3376 * 40u) + 20u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3376 * 40u) + 24u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3470 = (_3376 * 40u) + 28u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3495 = fma(_1860, _3483.z, fma(_1859, _3483.y, _3483.x * _1858)) + _3483.w;
                            _3496 = !((fma(_1860, _3464.z, fma(_1859, _3464.y, _3464.x * _1858)) + _3464.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3496)
                            {
                                float _3523 = _3391.x - _1858;
                                float _3524 = _3391.y - _1859;
                                float _3525 = _3391.z - _1860;
                                float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                                float _3529 = inversesqrt(_3526);
                                float _3530 = _3529 * _3523;
                                float _3531 = _3529 * _3524;
                                float _3532 = _3529 * _3525;
                                float _3536 = 1.0 - (_3526 / (_3392 * _3392));
                                float _4659 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3541 = sqrt(_3526) * _3407.w;
                                float _3543 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                                float _3544 = _3543 * _3543;
                                float _3547 = ((1.0 - _3544) * dot(vec3(_3530, _3531, _3532), vec3(_677, _680, _683))) + _3544;
                                float _3550 = _3541 * _3541;
                                float _3554 = (fma(_1860, _3434.z, fma(_1859, _3434.y, _3434.x * _1858)) + _3434.w) / _3495;
                                float _3555 = (fma(_1860, _3449.z, fma(_1859, _3449.y, _3449.x * _1858)) + _3449.w) / _3495;
                                float _3559 = 1.0 - dot(vec2(_3554, _3555), vec2(_3554, _3555));
                                float _4675 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3561 = _3560 * (((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3537) / ((_3550 * 0.699999988079071044921875) + 1.0));
                                float _3573 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                                float _3574 = 1.0 - _797;
                                float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                                float _3582 = _3581 * _3581;
                                float _3583 = _3582 * _3582;
                                float _3584 = _3530 - _3034;
                                float _3585 = _3531 - _3035;
                                float _3586 = _3532 - _3036;
                                float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                                float _3594 = dot(vec3(_677, _680, _683), vec3((-0.0) - _3034, (-0.0) - _3035, (-0.0) - _3036));
                                float _4686 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3598 = dot(vec3(_677, _680, _683), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                                float _4697 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                                float _3606 = _3543 * _3582;
                                float _3607 = _3606 * _3606;
                                float _3613 = ((1.0 - _3607) * dot(vec3(_677, _680, _683), vec3(_3530, _3531, _3532))) + _3607;
                                float _4708 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3615 = 1.0 - _3582;
                                float _3625 = (0.5 / (((_3614 * ((_3597 * _3615) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3582) * _3597))) * _3614;
                                float _4719 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3635 = (_3560 * _3537) * (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3605 * _3605) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3561 * _3407.z;
                                frontier_phi_84_pred_1 = _3561 * _3407.y;
                                frontier_phi_84_pred_2 = _3561 * _3407.x;
                                frontier_phi_84_pred_3 = _3635 * _3419.z;
                                frontier_phi_84_pred_4 = _3635 * _3419.y;
                                frontier_phi_84_pred_5 = _3635 * _3419.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_84_pred;
                            _3643 = frontier_phi_84_pred_1;
                            _3642 = frontier_phi_84_pred_2;
                            _3641 = frontier_phi_84_pred_3;
                            _3640 = frontier_phi_84_pred_4;
                            _3639 = frontier_phi_84_pred_5;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            if (_3366 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3366;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _3346;
                        frontier_phi_78_pred_1 = _3351;
                        frontier_phi_78_pred_2 = _3350;
                        frontier_phi_78_pred_3 = _3349;
                        frontier_phi_78_pred_4 = _3348;
                        frontier_phi_78_pred_5 = _3347;
                    }
                    _3009 = frontier_phi_78_pred;
                    _3019 = frontier_phi_78_pred_1;
                    _3017 = frontier_phi_78_pred_2;
                    _3015 = frontier_phi_78_pred_3;
                    _3013 = frontier_phi_78_pred_4;
                    _3011 = frontier_phi_78_pred_5;
                    uint _3154 = _3153 + 1u;
                    if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3147 = _3009;
                        _3148 = _3011;
                        _3149 = _3013;
                        _3150 = _3015;
                        _3151 = _3017;
                        _3152 = _3019;
                        _3153 = _3154;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _3017;
                frontier_phi_66_67_ladder_1 = _3015;
                frontier_phi_66_67_ladder_2 = _3013;
                frontier_phi_66_67_ladder_3 = _3011;
                frontier_phi_66_67_ladder_4 = _3009;
                frontier_phi_66_67_ladder_5 = _3019;
            }
            else
            {
                frontier_phi_66_67_ladder = _2904;
                frontier_phi_66_67_ladder_1 = _2902;
                frontier_phi_66_67_ladder_2 = _2900;
                frontier_phi_66_67_ladder_3 = _2898;
                frontier_phi_66_67_ladder_4 = _2896;
                frontier_phi_66_67_ladder_5 = _2906;
            }
            _3008 = frontier_phi_66_67_ladder_4;
            _3010 = frontier_phi_66_67_ladder_3;
            _3012 = frontier_phi_66_67_ladder_2;
            _3014 = frontier_phi_66_67_ladder_1;
            _3016 = frontier_phi_66_67_ladder;
            _3018 = frontier_phi_66_67_ladder_5;
        }
        float _3023 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2811 = (_3023 * _3014) + _2324;
        _2813 = (_3023 * _3016) + _2326;
        _2815 = (_3023 * _3018) + _2328;
        _2817 = ((_3008 * _766) * _3023) + _2662;
        _2819 = ((_3010 * _768) * _3023) + _2664;
        _2821 = ((_3012 * _769) * _3023) + _2666;
    }
    else
    {
        _2811 = _2324;
        _2813 = _2326;
        _2815 = _2328;
        _2817 = _2662;
        _2819 = _2664;
        _2821 = _2666;
    }
    vec4 _2827 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4735 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4746 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4757 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2851 = (((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2811 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _781))) + ((_2817 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + (_2827.x * cbMtdParam._m0[3u].x);
    float _2853 = ((_2827.y * cbMtdParam._m0[3u].x) + ((_2819 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2813 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _781)));
    float _2855 = ((_2827.z * cbMtdParam._m0[3u].x) + ((_2821 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2815 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _781)));
    uint _2859 = _709 + 6u;
    float _2867 = _653 / cbSceneParam._m0[86u].x;
    float _2868 = _654 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2922 = _2921 / _587;
        float _2933 = _2922 * _638;
        float _2934 = _639 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2936 = _2922 * _640;
        float _2938 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2939 = _2938 + cbSceneParam._m0[79u].w;
        float _2940 = cbSceneParam._m0[79u].w - _2934;
        float _2946 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2936 * _2936));
        float _2949 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2946;
        float _2954 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2956 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3109;
        if (abs((_2935 - _2938) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3109 = ((((_2939 > 0.0) ? exp2(_2954 * _2939) : (2.0 - exp2(_2956 * _2939))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2949;
        }
        else
        {
            float _3069 = 1.0 / cbSceneParam._m0[80u].x;
            float _3070 = isnan(_2940) ? _2939 : (isnan(_2939) ? _2940 : max(_2939, _2940));
            float _3071 = isnan(_2940) ? _2939 : (isnan(_2939) ? _2940 : min(_2939, _2940));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            _3109 = ((abs(_2946 / _2935) * cbSceneParam._m0[80u].y) * ((((_3080 - _3081) * 2.0) - ((exp2(_2954 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0)))) - exp2(_2954 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))))) * _3069)) - ((exp2(_2956 * _3080) - exp2(_2956 * _3081)) * _3069))) + (_2949 * cbSceneParam._m0[80u].z);
        }
        vec4 _3111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3120 = exp2((_3109 * (-1.44269502162933349609375)) * (1.0 - _3111.w));
        float _3121 = log2(_3120);
        float _3137 = log2(_2887);
        _2958 = (exp2(_3137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].x)) * _3111.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2960 = (exp2(_3137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].y)) * _3111.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2962 = (exp2(_3137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].z)) * _3111.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2964 = _3120 * _2887;
    }
    else
    {
        _2958 = _2884;
        _2960 = _2885;
        _2962 = _2886;
        _2964 = _2887;
    }
    float _2976 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2977 = _2976 == 3.0;
    float _2978 = log2(_2964);
    float _2985 = exp2(_2978 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0)));
    float _2986 = exp2(_2978 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0)));
    float _2987 = exp2(_2978 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)));
    float _2996 = (_2976 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2996 * (_2977 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2958)));
    SV_Target.y = _2996 * (_2977 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.z = _2996 * (_2977 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.w = cbInstanceData._m0[_2859].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
}


