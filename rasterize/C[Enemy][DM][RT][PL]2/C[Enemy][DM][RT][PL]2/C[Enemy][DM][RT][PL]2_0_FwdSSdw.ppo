#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1174;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _264 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _277 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_264 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _288 = exp2(log2(_277.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[15u].x;
    _192[0u] = cbMtdParam._m0[15u].y;
    _193[0u] = cbMtdParam._m0[15u].z;
    _191[1u] = cbMtdParam._m0[16u].x;
    _192[1u] = cbMtdParam._m0[16u].y;
    _193[1u] = cbMtdParam._m0[16u].z;
    _191[2u] = cbMtdParam._m0[17u].x;
    _192[2u] = cbMtdParam._m0[17u].y;
    _193[2u] = cbMtdParam._m0[17u].z;
    _191[3u] = cbMtdParam._m0[12u].x;
    _192[3u] = cbMtdParam._m0[12u].y;
    _193[3u] = cbMtdParam._m0[12u].z;
    _191[4u] = cbMtdParam._m0[13u].x;
    _192[4u] = cbMtdParam._m0[13u].y;
    _193[4u] = cbMtdParam._m0[13u].z;
    _191[5u] = cbMtdParam._m0[14u].x;
    _192[5u] = cbMtdParam._m0[14u].y;
    _193[5u] = cbMtdParam._m0[14u].z;
    vec4 _355 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _358 = _355.y;
    float _361 = (_355.x + (-0.02500000037252902984619140625)) * 8.0;
    float _363 = roundEven(_361);
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    uint _367 = uint(int(isnan(5.0) ? _364 : (isnan(_364) ? 5.0 : min(_364, 5.0))));
    float _384;
    if (_288)
    {
        _384 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _384 = cbMtdParam._m0[20u].z;
    }
    float _390;
    float _392;
    if (_288)
    {
        _390 = cbMtdParam._m0[28u].z;
        _392 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _390 = cbMtdParam._m0[24u].x;
        _392 = cbMtdParam._m0[24u].y;
    }
    float _394 = _390 * TEXCOORD.x;
    float _395 = _392 * TEXCOORD.y;
    float _407 = floor(_384);
    vec4 _410 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _394) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _395) + cbTextureTilingScale._m0[8u].w, _407));
    vec4 _432 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _264) + cbTextureTilingScale._m0[0u].w));
    float _440 = ((((((_191[_367] - cbMtdParam._m0[19u].x) * _358) + cbMtdParam._m0[19u].x) * cbMtdParam._m0[20u].w) * _410.x) * cbMtdParam._m0[9u].x) * _432.x;
    float _444 = ((((((_192[_367] - cbMtdParam._m0[19u].y) * _358) + cbMtdParam._m0[19u].y) * cbMtdParam._m0[20u].w) * _410.y) * cbMtdParam._m0[9u].y) * _432.y;
    float _448 = ((((((_193[_367] - cbMtdParam._m0[19u].z) * _358) + cbMtdParam._m0[19u].z) * cbMtdParam._m0[20u].w) * _410.z) * cbMtdParam._m0[9u].z) * _432.z;
    vec4 _460 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _264) + cbTextureTilingScale._m0[1u].w));
    float _464 = _460.z;
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[25u].x;
    _187[0u] = cbMtdParam._m0[25u].y;
    _186[1u] = cbMtdParam._m0[26u].x;
    _187[1u] = cbMtdParam._m0[26u].y;
    _186[2u] = cbMtdParam._m0[26u].z;
    _187[2u] = cbMtdParam._m0[26u].w;
    _186[3u] = cbMtdParam._m0[27u].x;
    _187[3u] = cbMtdParam._m0[27u].y;
    _186[4u] = cbMtdParam._m0[25u].z;
    _187[4u] = cbMtdParam._m0[25u].w;
    float _509 = roundEven(5.0 - _361);
    float _510 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _511 = isnan(4.0) ? _510 : (isnan(_510) ? 4.0 : min(_510, 4.0));
    float _513 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    uint _515 = uint(int(isnan(4.0) ? _513 : (isnan(_513) ? 4.0 : min(_513, 4.0))));
    float _521 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _394) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _395) + cbTextureTilingScale._m0[10u].w, _407)).x + _460.w) + _187[_515];
    vec4 _539 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _394) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _395) + cbTextureTilingScale._m0[9u].w, _407));
    float _546 = (_539.x * 2.0) + (-1.0);
    float _547 = (_539.y * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3577 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    float _563 = (cbMtdParam._m0[21u].x * (((_464 * 2.0) * (_539.z + _186[_515])) - _464)) + _464;
    float _567 = (cbMtdParam._m0[21u].y * ((_460.x * 2.0) + (-1.0))) + _546;
    float _568 = (cbMtdParam._m0[21u].y * ((_460.y * 2.0) + (-1.0))) + _547;
    float _571 = fma(_554, _243, fma(_568, _235 * TANGENT.x, (_221 * _213) * _567));
    float _574 = fma(_554, _244, fma(_568, _235 * TANGENT.y, (_221 * _214) * _567));
    float _577 = fma(_554, _245, fma(_568, _235 * TANGENT.z, (_221 * _215) * _567));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    float _582 = _581 * _571;
    float _583 = _581 * _574;
    float _584 = _581 * _577;
    float _3588 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _585 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3610 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3621 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3632 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _589 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _605 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _656 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _646);
    float _657 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _646);
    float _658 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _646);
    float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
    float _663 = _656 * _662;
    float _664 = _657 * _662;
    float _665 = _658 * _662;
    float _671 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _672 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _674 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _676 = _674.w;
    float _695 = fma(_584, cbSceneParam._m0[5u].z, fma(_583, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _582));
    float _698 = fma(_584, cbSceneParam._m0[6u].z, fma(_583, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _582));
    float _701 = fma(_584, cbSceneParam._m0[7u].z, fma(_583, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _582));
    vec4 _703 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _714 = (((_703.y - _585) + (_703.w * _585)) * cbMtdParam._m0[3u].x) + _585;
    uint _727 = uint(roundEven(NORMAL.w)) * 13u;
    uint _729 = (_727 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _735 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_729].x;
    float _736 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_729].y;
    float _737 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_729].z;
    float _3643 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    vec4 _741 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _746 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _757 = (((_746.x - _589) + (_746.w * _589)) * cbMtdParam._m0[3u].x) + _589;
    float _770 = (cbMtdParam._m0[3u].x * (((_738 * _676) - _738) + _741.x)) + _738;
    float _771 = (cbMtdParam._m0[3u].x * (((_739 * _676) - _739) + _741.y)) + _739;
    float _772 = (cbMtdParam._m0[3u].x * (((_740 * _676) - _740) + _741.z)) + _740;
    float _773 = 1.0 - _757;
    float _774 = _773 * _770;
    float _775 = _773 * _771;
    float _776 = _773 * _772;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _757;
    float _782 = (_771 + (-0.039999999105930328369140625)) * _757;
    float _783 = (_772 + (-0.039999999105930328369140625)) * _757;
    float _784 = _781 + 0.039999999105930328369140625;
    float _786 = _782 + 0.039999999105930328369140625;
    float _787 = _783 + 0.039999999105930328369140625;
    vec4 _796 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _671, cbSceneParam._m0[86u].y * _672));
    float _799 = _796.x * TEXCOORD_4;
    float _800 = dot(vec3(_582, _583, _584), vec3(_663, _664, _665));
    float _803 = _800 * 2.0;
    float _807 = (_803 * _582) - _663;
    float _808 = (_803 * _583) - _664;
    float _809 = (_803 * _584) - _665;
    float _813 = abs(dot(vec3(_663, _664, _665), vec3(_582, _583, _584)));
    float _3676 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _815 = sqrt(_714);
    float _826 = exp2((_815 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_815 * 3.0));
    float _832 = (1.0 - _826) * ((_815 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _833 = _826 * _815;
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1173;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _898 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _902 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _906 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _931 = _861 + _582;
        float _932 = _865 + _583;
        float _933 = _869 + _584;
        float _943 = fma(_933, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931)) - _898;
        float _944 = fma(_933, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931)) - _902;
        float _945 = fma(_933, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931)) - _906;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_898 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_902 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[34u].z) + ((((((_906 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _1001 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_967.x + (-0.5));
        float _1003 = _1001 * (_967.y + (-0.5));
        float _1004 = _1001 * (_967.z + (-0.5));
        float _1011 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_974.x + (-0.5));
        float _1013 = _1011 * (_974.y + (-0.5));
        float _1014 = _1011 * (_974.z + (-0.5));
        float _1021 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_981.x + (-0.5));
        float _1023 = _1021 * (_981.y + (-0.5));
        float _1024 = _1021 * (_981.z + (-0.5));
        float _1031 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_988.x + (-0.5));
        float _1033 = _1031 * (_988.y + (-0.5));
        float _1034 = _1031 * (_988.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1055 = (dot(vec3(_582, _583, _584), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1065 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3724 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1067 + 1.0))) + _1072) * _1035;
        float _1082 = _1003 * 0.5;
        float _1083 = _1013 * 0.5;
        float _1084 = _1023 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_582, _583, _584), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3757 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1109 + 1.0))) + _1114) * _1036;
        float _1124 = _1004 * 0.5;
        float _1125 = _1014 * 0.5;
        float _1126 = _1024 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_582, _583, _584), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3790 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1151 + 1.0))) + _1156) * _1037;
        _1173 = _1004;
        _1175 = _1003;
        _1176 = _1002;
        _1177 = _1014;
        _1178 = _1013;
        _1179 = _1012;
        _1180 = _1024;
        _1181 = _1023;
        _1182 = _1022;
        _1183 = _1037;
        _1184 = _1036;
        _1185 = _1035;
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _1174;
        _1175 = _1174;
        _1176 = _1174;
        _1177 = _1174;
        _1178 = _1174;
        _1179 = _1174;
        _1180 = _1174;
        _1181 = _1174;
        _1182 = _1174;
        _1183 = _1174;
        _1184 = _1174;
        _1185 = _1174;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1218 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1222 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1245 = _861 + _582;
        float _1246 = _865 + _583;
        float _1247 = _869 + _584;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_582, _583, _584), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3853 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_582, _583, _584), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3886 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_582, _583, _584), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3919 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1174;
        _1484 = _1174;
        _1485 = _1174;
        _1486 = _1174;
        _1487 = _1174;
        _1488 = _1174;
        _1489 = _1174;
        _1490 = _1174;
        _1491 = _1174;
        _1492 = _1174;
        _1493 = _1174;
        _1494 = _1174;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1186)) + _1186;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1187)) + _1187;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _807 * 0.5;
    float _1552 = _808 * 0.5;
    float _1553 = _809 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1177, _1180, _1183));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_809, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807));
        float _1681 = fma(_809, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807));
        float _1684 = fma(_809, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_20_18_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_20_18_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_20_18_ladder = 5000.0;
            }
            _1712 = frontier_phi_20_18_ladder;
        }
        float _1936;
        if (_1681 > 0.0)
        {
            _1936 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1936 = frontier_phi_29_25_ladder;
        }
        float _2193;
        if (_1684 > 0.0)
        {
            _2193 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2193 = frontier_phi_41_36_ladder;
        }
        float _2195 = isnan(_1936) ? _1712 : (isnan(_1712) ? _1936 : min(_1712, _1936));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1678) + _1667;
        float _2201 = (_2196 * _1681) + _1671;
        float _2202 = (_2196 * _1684) + _1675;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_19_41_ladder;
        float frontier_phi_19_41_ladder_1;
        float frontier_phi_19_41_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_19_41_ladder = 0.0;
            frontier_phi_19_41_ladder_1 = 0.0;
            frontier_phi_19_41_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_19_41_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_19_41_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_19_41_ladder_2;
        _1702 = frontier_phi_19_41_ladder_1;
        _1704 = frontier_phi_19_41_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_807, _808, _809), _1620);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_809, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807));
        float _1777 = fma(_809, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807));
        float _1780 = fma(_809, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807));
        float _1941;
        if (_1774 > 0.0)
        {
            _1941 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1941 = frontier_phi_31_27_ladder;
        }
        float _2220;
        if (_1777 > 0.0)
        {
            _2220 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2220 = frontier_phi_43_38_ladder;
        }
        float _2433;
        if (_1780 > 0.0)
        {
            _2433 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2433 = frontier_phi_52_49_ladder;
        }
        float _2435 = isnan(_2220) ? _1941 : (isnan(_1941) ? _2220 : min(_1941, _2220));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1774) + _1763;
        float _2441 = (_2436 * _1777) + _1767;
        float _2442 = (_2436 * _1780) + _1771;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2443;
        float _2446 = _2443 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2442 > _2446) || ((_2442 < _2444) || ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 < _2444) || (_2440 > _2446))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2442, cbModelParam._m0[17u].z, fma(_2441, cbModelParam._m0[17u].y, _2440 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2442, cbModelParam._m0[18u].z, fma(_2441, cbModelParam._m0[18u].y, _2440 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2442, cbModelParam._m0[19u].z, fma(_2441, cbModelParam._m0[19u].y, _2440 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_28_52_ladder = _2658.z * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_1 = _2658.y * cbModelParam._m0[1u].z;
            frontier_phi_28_52_ladder_2 = _2658.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_28_52_ladder_2;
        _1801 = frontier_phi_28_52_ladder_1;
        _1803 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_807, _808, _809), _1709);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1816 = (((_832 * _784) + _833) * _799) * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1818 = (((_832 * _786) + _833) * _799) * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1820 = (((_832 * _787) + _833) * _799) * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    vec4 _1837 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_671, _672));
    float _1839 = _1837.w;
    float _1851 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1839);
    float _1852 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1839);
    float _1853 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1839);
    uvec4 _1857 = floatBitsToUint(cbInstanceData._m0[_727 + 5u]);
    uint _1859 = _1857.x * 14u;
    uint _1860 = _1859 + 13u;
    float _1867 = _799 + (-1.0);
    float _1872 = (cbLight._m0[_1860].x * _1867) + 1.0;
    float _1873 = (cbLight._m0[_1860].y * _1867) + 1.0;
    float _1874 = (cbLight._m0[_1860].z * _1867) + 1.0;
    float _1875 = (cbLight._m0[_1860].w * _1867) + 1.0;
    uint _1876 = _1859 + 5u;
    float _1882 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1886 = _1859 + 4u;
    float _1895 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
    uint _1899 = _1859 | 1u;
    float _1910 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_582, _583, _584));
    float _1913 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_582, _583, _584));
    float _4055 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _4066 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1918 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1920 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1927 = ((cbLight._m0[_1876].x * _1882) * _1920) + (((cbLight._m0[_1886].x * _1851) * _1895) * _1918);
    float _1928 = ((_1882 * cbLight._m0[_1876].y) * _1920) + (((cbLight._m0[_1886].y * _1852) * _1895) * _1918);
    float _1929 = ((_1882 * cbLight._m0[_1876].z) * _1920) + (((cbLight._m0[_1886].z * _1853) * _1895) * _1918);
    uvec4 _1933 = floatBitsToUint(cbLight._m0[_1859 + 12u]);
    bool _1935 = _1933.x == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1935)
    {
        _1946 = _1927;
        _1948 = _1928;
        _1950 = _1929;
    }
    else
    {
        uint _1954 = _1859 + 6u;
        float _1970 = (dot(vec3(cbLight._m0[_1859 + 2u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _1971 = _1970 * _1970;
        float _4077 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1973 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _1946 = (((cbLight._m0[_1954].x * 0.3183098733425140380859375) * _1972) * _1973) + _1927;
        _1948 = (((cbLight._m0[_1954].y * 0.3183098733425140380859375) * _1972) * _1973) + _1928;
        _1950 = (((cbLight._m0[_1954].z * 0.3183098733425140380859375) * _1972) * _1973) + _1929;
    }
    bool _1953 = _1933.y == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1953)
    {
        _1991 = _1946;
        _1993 = _1948;
        _1995 = _1950;
    }
    else
    {
        uint _2164 = _1859 + 7u;
        float _2180 = (dot(vec3(cbLight._m0[_1859 + 3u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4093 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2183 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _1991 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _1946;
        _1993 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _1948;
        _1995 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _1950;
    }
    uint _1998 = _1859 + 8u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _714) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1859].x + _663;
    float _2014 = cbLight._m0[_1859].y + _664;
    float _2015 = cbLight._m0[_1859].z + _665;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1859].xyz));
    float _4109 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2027 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2028 = dot(vec3(_582, _583, _584), vec3(_2020, _2021, _2022));
    float _4131 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2020, _2021, _2022));
    float _4142 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2012 * _2012;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
    float _2049 = 0.959999978542327880859375 - _781;
    float _2051 = 0.959999978542327880859375 - _782;
    float _2052 = 0.959999978542327880859375 - _783;
    float _2059 = 1.0 - _2012;
    float _2070 = (0.5 / (((_2027 * ((_2026 * _2059) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2059) + _2012) * _2026))) * _2026;
    float _4153 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2072 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    uint _2086 = _1859 + 9u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _714) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1899].x + _663;
    float _2100 = cbLight._m0[_1899].y + _664;
    float _2101 = cbLight._m0[_1899].z + _665;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1899].xyz));
    float _4164 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2113 = dot(vec3(_582, _583, _584), vec3(_2106, _2107, _2108));
    float _4175 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2106, _2107, _2108));
    float _4186 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2098 * _2098;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
    float _2139 = 1.0 - _2098;
    float _2149 = (0.5 / (((_2027 * ((_2112 * _2139) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2139) + _2098) * _2112))) * _2112;
    float _4197 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    float _2161 = (((((_2132 * _2049) + _784) * cbLight._m0[_2086].x) * _2151) * _1882) + ((((cbLight._m0[_1998].x * _1851) * ((_2048 * _2049) + _784)) * _2072) * _1895);
    float _2162 = (((((_2132 * _2051) + _786) * cbLight._m0[_2086].y) * _2151) * _1882) + ((((cbLight._m0[_1998].y * _1852) * ((_2048 * _2051) + _786)) * _2072) * _1895);
    float _2163 = (((((_2132 * _2052) + _787) * cbLight._m0[_2086].z) * _2151) * _1882) + ((((cbLight._m0[_1998].z * _1853) * ((_2048 * _2052) + _787)) * _2072) * _1895);
    float _2225;
    float _2227;
    float _2229;
    if (_1935)
    {
        _2225 = _2161;
        _2227 = _2162;
        _2229 = _2163;
    }
    else
    {
        uint _2231 = _1859 + 2u;
        uint _2235 = _1859 + 10u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _714) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _663;
        float _2252 = cbLight._m0[_2231].y + _664;
        float _2253 = cbLight._m0[_2231].z + _665;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2231].xyz));
        float _4208 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2265 = dot(vec3(_582, _583, _584), vec3(_2258, _2259, _2260));
        float _4219 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4230 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2284 = exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0);
        float _2291 = 1.0 - _2250;
        float _2301 = (0.5 / (((_2027 * ((_2264 * _2291) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2291) + _2250) * _2264))) * _2264;
        float _4241 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2225 = (((((_2284 * _2049) + _784) * cbLight._m0[_2235].x) * _2303) * _2304) + _2161;
        _2227 = (((((_2284 * _2051) + _786) * cbLight._m0[_2235].y) * _2303) * _2304) + _2162;
        _2229 = (((((_2284 * _2052) + _787) * cbLight._m0[_2235].z) * _2303) * _2304) + _2163;
    }
    float _2339;
    float _2341;
    float _2343;
    if (_1953)
    {
        _2339 = _2225;
        _2341 = _2227;
        _2343 = _2229;
    }
    else
    {
        uint _2350 = _1859 + 3u;
        uint _2354 = _1859 + 11u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _714) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _663;
        float _2371 = cbLight._m0[_2350].y + _664;
        float _2372 = cbLight._m0[_2350].z + _665;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2350].xyz));
        float _4257 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2384 = dot(vec3(_582, _583, _584), vec3(_2377, _2378, _2379));
        float _4268 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4279 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2410 = 1.0 - _2369;
        float _2420 = (0.5 / (((_2027 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2410) + _2369) * _2383))) * _2383;
        float _4290 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2339 = (((((_2403 * _2049) + _784) * cbLight._m0[_2354].x) * _2422) * _2423) + _2225;
        _2341 = (((((_2403 * _2051) + _786) * cbLight._m0[_2354].y) * _2422) * _2423) + _2227;
        _2343 = (((((_2403 * _2052) + _787) * cbLight._m0[_2354].z) * _2422) * _2423) + _2229;
    }
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_1857.y == 0u)
    {
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2498;
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2498;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2498;
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.x;
        uint _2525 = uint((float(_2513.y) * floor(float(uint(cbSceneParam._m0[85u].y * _672) / _2514))) + floor(float(uint(cbSceneParam._m0[85u].x * _671) / _2514)));
        float _2535 = (log2(_2501 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        uint _2539 = uint(isnan(14.0) ? _2536 : (isnan(_2536) ? 14.0 : min(_2536, 14.0)));
        uvec4 _2544 = texelFetch(g_lightClusterGridBuffer, int(((_2539 << 2u) + (_2525 << 6u)) >> 2u));
        uint _2545 = _2544.x;
        uint _2546 = _2513.z;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        if (((((1u << ((_2546 >> 4u) & 15u)) + 4294967295u) & _2545) == 0u) || ((_2546 & 240u) == 0u))
        {
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
        }
        else
        {
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2823)
                {
                    frontier_phi_67_pred = _2812;
                    frontier_phi_67_pred_1 = _2811;
                    frontier_phi_67_pred_2 = _2810;
                    frontier_phi_67_pred_3 = _2809;
                    frontier_phi_67_pred_4 = _2808;
                    frontier_phi_67_pred_5 = _2807;
                }
                else
                {
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    uint _2937;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2822;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    for (;;)
                    {
                        uint _2941 = uint(findLSB(_2937)) + (_2813 << 5u);
                        uint _2938 = (_2937 + 4294967295u) & _2937;
                        uint _2943 = _2941 * 48u;
                        vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2963 = (_2941 * 48u) + 4u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2963)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 3u)).x));
                        uint _2982 = (_2941 * 48u) + 8u;
                        vec3 _2993 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x));
                        float _2997 = _2957.x - _2499;
                        float _2998 = _2957.y - _2500;
                        float _2999 = _2957.z - _2501;
                        float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                        float _3003 = inversesqrt(_3000);
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3007 = dot(vec3(_695, _698, _701), vec3(_3004, _3005, _3006));
                        float _3012 = 1.0 - (_3000 * _2957.w);
                        float _4316 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3014 = sqrt(_3000) * _2976.w;
                        float _3017 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _3007) + _3018;
                        float _3024 = _3014 * _3014;
                        float _3028 = ((isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))) * _3013) / ((_3024 * 0.699999988079071044921875) + 1.0);
                        float _3032 = (-0.0) - _2499;
                        float _3033 = (-0.0) - _2500;
                        float _3034 = (-0.0) - _2501;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3049 = exp2(log2(1.0 / ((_3024 * 3.5) + 5.0)) * 0.25);
                        float _3050 = 1.0 - _815;
                        float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                        float _3058 = _3057 * _3057;
                        float _3059 = _3058 * _3058;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3062 = _3041 + _3006;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3070 = dot(vec3(_695, _698, _701), vec3(_3039, _3040, _3041));
                        float _4332 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3074 = dot(vec3(_695, _698, _701), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                        float _4343 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                        float _3082 = _3017 * _3058;
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3007) + _3083;
                        float _4354 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3088 = 1.0 - _3058;
                        float _3098 = (0.5 / (((_3087 * ((_3073 * _3088) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3088) + _3058) * _3073))) * _3087;
                        float _4365 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3109 = (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3081 * _3081) * ((_3024 * 2.1991131305694580078125) + 3.141590118408203125))) * _3013;
                        _2866 = (_3028 * _2976.x) + _2934;
                        _2867 = (_3028 * _2976.y) + _2935;
                        _2868 = (_3028 * _2976.z) + _2936;
                        _2863 = (_3109 * _2993.x) + _2931;
                        _2864 = (_3109 * _2993.y) + _2932;
                        _2865 = (_3109 * _2993.z) + _2933;
                        if (_2938 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2938;
                        }
                    }
                    frontier_phi_67_pred = _2868;
                    frontier_phi_67_pred_1 = _2867;
                    frontier_phi_67_pred_2 = _2866;
                    frontier_phi_67_pred_3 = _2865;
                    frontier_phi_67_pred_4 = _2864;
                    frontier_phi_67_pred_5 = _2863;
                }
                _2674 = frontier_phi_67_pred;
                _2672 = frontier_phi_67_pred_1;
                _2670 = frontier_phi_67_pred_2;
                _2668 = frontier_phi_67_pred_3;
                _2666 = frontier_phi_67_pred_4;
                _2664 = frontier_phi_67_pred_5;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2807 = _2664;
                    _2808 = _2666;
                    _2809 = _2668;
                    _2810 = _2670;
                    _2811 = _2672;
                    _2812 = _2674;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
        }
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.z;
        uint _2680 = (_2678 >> 8u) & 15u;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((4294967295u << _2680) & _2545) == 0u)
        {
            _2775 = _2663;
            _2777 = _2665;
            _2779 = _2667;
            _2781 = _2669;
            _2783 = _2671;
            _2785 = _2673;
        }
        else
        {
            float _2800 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
            float _2801 = _2800 * _2499;
            float _2802 = _2800 * _2500;
            float _2803 = _2800 * _2501;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2680 < ((_2678 >> 12u) & 15u))
            {
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2914 = _2663;
                float _2915 = _2665;
                float _2916 = _2667;
                float _2917 = _2669;
                float _2918 = _2671;
                float _2919 = _2673;
                uint _2920 = _2680;
                uint _2929;
                bool _2930;
                for (;;)
                {
                    _2929 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                    _2930 = _2929 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2930)
                    {
                        frontier_phi_73_pred = _2919;
                        frontier_phi_73_pred_1 = _2918;
                        frontier_phi_73_pred_2 = _2917;
                        frontier_phi_73_pred_3 = _2916;
                        frontier_phi_73_pred_4 = _2915;
                        frontier_phi_73_pred_5 = _2914;
                    }
                    else
                    {
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        uint _3133 = _2929;
                        uint _3134;
                        vec4 _3159;
                        float _3160;
                        vec4 _3175;
                        vec3 _3187;
                        vec4 _3202;
                        vec4 _3217;
                        float _3263;
                        bool _3264;
                        for (;;)
                        {
                            uint _3144 = ((_2920 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3133));
                            _3134 = (_3133 + 4294967295u) & _3133;
                            uint _3146 = _3144 * 40u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            _3160 = _3159.w;
                            uint _3162 = (_3144 * 40u) + 4u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3177 = (_3144 * 40u) + 8u;
                            _3187 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x));
                            uint _3189 = (_3144 * 40u) + 16u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3144 * 40u) + 20u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3144 * 40u) + 24u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3238 = (_3144 * 40u) + 28u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3263 = fma(_2501, _3251.z, fma(_2500, _3251.y, _3251.x * _2499)) + _3251.w;
                            _3264 = !((fma(_2501, _3232.z, fma(_2500, _3232.y, _3232.x * _2499)) + _3232.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3264)
                            {
                                float _3291 = _3159.x - _2499;
                                float _3292 = _3159.y - _2500;
                                float _3293 = _3159.z - _2501;
                                float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                                float _3297 = inversesqrt(_3294);
                                float _3298 = _3297 * _3291;
                                float _3299 = _3297 * _3292;
                                float _3300 = _3297 * _3293;
                                float _3304 = 1.0 - (_3294 / (_3160 * _3160));
                                float _4376 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3309 = sqrt(_3294) * _3175.w;
                                float _3311 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                                float _3312 = _3311 * _3311;
                                float _3315 = ((1.0 - _3312) * dot(vec3(_3298, _3299, _3300), vec3(_695, _698, _701))) + _3312;
                                float _3318 = _3309 * _3309;
                                float _3322 = (fma(_2501, _3202.z, fma(_2500, _3202.y, _3202.x * _2499)) + _3202.w) / _3263;
                                float _3323 = (fma(_2501, _3217.z, fma(_2500, _3217.y, _3217.x * _2499)) + _3217.w) / _3263;
                                float _3327 = 1.0 - dot(vec2(_3322, _3323), vec2(_3322, _3323));
                                float _4392 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3329 = _3328 * (((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3305) / ((_3318 * 0.699999988079071044921875) + 1.0));
                                float _3341 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                                float _3342 = 1.0 - _815;
                                float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                                float _3350 = _3349 * _3349;
                                float _3351 = _3350 * _3350;
                                float _3352 = _3298 - _2801;
                                float _3353 = _3299 - _2802;
                                float _3354 = _3300 - _2803;
                                float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                                float _3362 = dot(vec3(_695, _698, _701), vec3((-0.0) - _2801, (-0.0) - _2802, (-0.0) - _2803));
                                float _4403 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3366 = dot(vec3(_695, _698, _701), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                                float _4414 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                                float _3374 = _3311 * _3350;
                                float _3375 = _3374 * _3374;
                                float _3381 = ((1.0 - _3375) * dot(vec3(_695, _698, _701), vec3(_3298, _3299, _3300))) + _3375;
                                float _4425 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3383 = 1.0 - _3350;
                                float _3393 = (0.5 / (((_3382 * ((_3365 * _3383) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3350) * _3365))) * _3382;
                                float _4436 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3403 = (_3328 * _3305) * (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3373 * _3373) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3329 * _3175.y;
                                frontier_phi_79_pred_1 = _3329 * _3175.x;
                                frontier_phi_79_pred_2 = _3403 * _3187.z;
                                frontier_phi_79_pred_3 = _3403 * _3187.y;
                                frontier_phi_79_pred_4 = _3403 * _3187.x;
                                frontier_phi_79_pred_5 = _3329 * _3175.z;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3411 = frontier_phi_79_pred;
                            _3410 = frontier_phi_79_pred_1;
                            _3409 = frontier_phi_79_pred_2;
                            _3408 = frontier_phi_79_pred_3;
                            _3407 = frontier_phi_79_pred_4;
                            _3412 = frontier_phi_79_pred_5;
                            _3117 = _3410 + _3130;
                            _3118 = _3411 + _3131;
                            _3119 = _3412 + _3132;
                            _3114 = _3407 + _3127;
                            _3115 = _3408 + _3128;
                            _3116 = _3409 + _3129;
                            if (_3134 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3134;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3119;
                        frontier_phi_73_pred_1 = _3118;
                        frontier_phi_73_pred_2 = _3117;
                        frontier_phi_73_pred_3 = _3116;
                        frontier_phi_73_pred_4 = _3115;
                        frontier_phi_73_pred_5 = _3114;
                    }
                    _2786 = frontier_phi_73_pred;
                    _2784 = frontier_phi_73_pred_1;
                    _2782 = frontier_phi_73_pred_2;
                    _2780 = frontier_phi_73_pred_3;
                    _2778 = frontier_phi_73_pred_4;
                    _2776 = frontier_phi_73_pred_5;
                    uint _2921 = _2920 + 1u;
                    if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2914 = _2776;
                        _2915 = _2778;
                        _2916 = _2780;
                        _2917 = _2782;
                        _2918 = _2784;
                        _2919 = _2786;
                        _2920 = _2921;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2786;
                frontier_phi_61_62_ladder_1 = _2784;
                frontier_phi_61_62_ladder_2 = _2780;
                frontier_phi_61_62_ladder_3 = _2778;
                frontier_phi_61_62_ladder_4 = _2776;
                frontier_phi_61_62_ladder_5 = _2782;
            }
            else
            {
                frontier_phi_61_62_ladder = _2673;
                frontier_phi_61_62_ladder_1 = _2671;
                frontier_phi_61_62_ladder_2 = _2667;
                frontier_phi_61_62_ladder_3 = _2665;
                frontier_phi_61_62_ladder_4 = _2663;
                frontier_phi_61_62_ladder_5 = _2669;
            }
            _2775 = frontier_phi_61_62_ladder_4;
            _2777 = frontier_phi_61_62_ladder_3;
            _2779 = frontier_phi_61_62_ladder_2;
            _2781 = frontier_phi_61_62_ladder_5;
            _2783 = frontier_phi_61_62_ladder_1;
            _2785 = frontier_phi_61_62_ladder;
        }
        float _2790 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
        _2557 = (_2790 * _2781) + _1991;
        _2559 = (_2790 * _2783) + _1993;
        _2561 = (_2790 * _2785) + _1995;
        _2563 = ((_2775 * _784) * _2790) + _2339;
        _2565 = ((_2777 * _786) * _2790) + _2341;
        _2567 = ((_2779 * _787) * _2790) + _2343;
    }
    else
    {
        _2557 = _1991;
        _2559 = _1993;
        _2561 = _1995;
        _2563 = _2339;
        _2565 = _2341;
        _2567 = _2343;
    }
    vec4 _2573 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4452 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4463 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4474 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _2597 = (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2557 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _799))) + ((_2563 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + (_2573.x * cbMtdParam._m0[3u].x);
    float _2599 = ((_2573.y * cbMtdParam._m0[3u].x) + ((_2565 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2559 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _799)));
    float _2601 = ((_2573.z * cbMtdParam._m0[3u].x) + ((_2567 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2561 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _799)));
    uint _2605 = _727 + 6u;
    float _2613 = _671 / cbSceneParam._m0[86u].x;
    float _2614 = _672 / cbSceneParam._m0[86u].y;
    vec4 _2628 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, (log2((isnan(cbSceneParam._m0[77u].w) ? _605 : (isnan(_605) ? cbSceneParam._m0[77u].w : min(_605, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2630 = _2628.x;
    float _2631 = _2628.y;
    float _2632 = _2628.z;
    float _2633 = _2628.w;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_605 > cbSceneParam._m0[78u].w)
    {
        float _2688 = isnan(_605) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _605 : min(cbSceneParam._m0[80u].w, _605));
        float _2689 = _2688 / _605;
        float _2700 = _2689 * _656;
        float _2701 = _657 * _2689;
        float _2702 = (-0.0) - _2701;
        float _2703 = _2689 * _658;
        float _2705 = (cbSceneParam._m0[77u].w * _2702) / _2688;
        float _2706 = _2705 + cbSceneParam._m0[79u].w;
        float _2707 = cbSceneParam._m0[79u].w - _2701;
        float _2713 = sqrt(((_2700 * _2700) + (_2701 * _2701)) + (_2703 * _2703));
        float _2716 = (1.0 - (cbSceneParam._m0[77u].w / _2688)) * _2713;
        float _2721 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2723 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2876;
        if (abs((_2702 - _2705) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2876 = ((((_2706 > 0.0) ? exp2(_2721 * _2706) : (2.0 - exp2(_2723 * _2706))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2716;
        }
        else
        {
            float _2836 = 1.0 / cbSceneParam._m0[80u].x;
            float _2837 = isnan(_2707) ? _2706 : (isnan(_2706) ? _2707 : max(_2706, _2707));
            float _2838 = isnan(_2707) ? _2706 : (isnan(_2706) ? _2707 : min(_2706, _2707));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            _2876 = ((abs(_2713 / _2702) * cbSceneParam._m0[80u].y) * ((((_2847 - _2848) * 2.0) - ((exp2(_2721 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0)))) - exp2(_2721 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))))) * _2836)) - ((exp2(_2723 * _2847) - exp2(_2723 * _2848)) * _2836))) + (_2716 * cbSceneParam._m0[80u].z);
        }
        vec4 _2878 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, 1.0), 0.0);
        float _2887 = exp2((_2876 * (-1.44269502162933349609375)) * (1.0 - _2878.w));
        float _2888 = log2(_2887);
        float _2904 = log2(_2633);
        _2725 = (exp2(_2904 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].x)) * _2878.x) / cbSceneParam._m0[78u].x)) + _2630;
        _2727 = (exp2(_2904 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].y)) * _2878.y) / cbSceneParam._m0[78u].y)) + _2631;
        _2729 = (exp2(_2904 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].z)) * _2878.z) / cbSceneParam._m0[78u].z)) + _2632;
        _2731 = _2887 * _2633;
    }
    else
    {
        _2725 = _2630;
        _2727 = _2631;
        _2729 = _2632;
        _2731 = _2633;
    }
    float _2743 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2744 = _2743 == 3.0;
    float _2745 = log2(_2731);
    float _2752 = exp2(_2745 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0)));
    float _2753 = exp2(_2745 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)));
    float _2754 = exp2(_2745 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0)));
    float _2763 = (_2743 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2763 * (_2744 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2725)));
    SV_Target.y = _2763 * (_2744 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2727)));
    SV_Target.z = _2763 * (_2744 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.w = cbInstanceData._m0[_2605].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2605].w;
}


