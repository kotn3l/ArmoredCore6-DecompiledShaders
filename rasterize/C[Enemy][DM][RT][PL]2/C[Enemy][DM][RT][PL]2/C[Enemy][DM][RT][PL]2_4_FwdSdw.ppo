#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2;
layout(set = 0, binding = 10) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0;
layout(set = 0, binding = 9) uniform texture2DArray C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1069;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _257 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _270 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_257 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _281 = exp2(log2(_270.x) * cbMtdParam._m0[22u].w) < cbMtdParam._m0[23u].x;
    float _282;
    float _284;
    float _286;
    if (_281)
    {
        _282 = cbMtdParam._m0[19u].x;
        _284 = cbMtdParam._m0[19u].y;
        _286 = cbMtdParam._m0[19u].z;
    }
    else
    {
        _282 = cbMtdParam._m0[18u].x;
        _284 = cbMtdParam._m0[18u].y;
        _286 = cbMtdParam._m0[18u].z;
    }
    float _292;
    if (_281)
    {
        _292 = cbMtdParam._m0[20u].y;
    }
    else
    {
        _292 = cbMtdParam._m0[20u].z;
    }
    float _298;
    float _300;
    if (_281)
    {
        _298 = cbMtdParam._m0[28u].z;
        _300 = cbMtdParam._m0[28u].w;
    }
    else
    {
        _298 = cbMtdParam._m0[24u].x;
        _300 = cbMtdParam._m0[24u].y;
    }
    float _302 = _298 * TEXCOORD.x;
    float _303 = _300 * TEXCOORD.y;
    float _315 = floor(_292);
    vec4 _318 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[8u].x * _302) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _303) + cbTextureTilingScale._m0[8u].w, _315));
    vec4 _340 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _257) + cbTextureTilingScale._m0[0u].w));
    float _348 = (((_282 * cbMtdParam._m0[20u].w) * _318.x) * cbMtdParam._m0[9u].x) * _340.x;
    float _352 = (((_284 * cbMtdParam._m0[20u].w) * _318.y) * cbMtdParam._m0[9u].y) * _340.y;
    float _356 = (((_286 * cbMtdParam._m0[20u].w) * _318.z) * cbMtdParam._m0[9u].z) * _340.z;
    vec4 _368 = texture(sampler2D(C_Enemy_DM_RT_PL_2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _257) + cbTextureTilingScale._m0[1u].w));
    float _372 = _368.z;
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[27u].z;
    _186[0u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _186[1u] = cbMtdParam._m0[28u].y;
    float _403 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    uint _406 = uint(int(isnan(1.0) ? _403 : (isnan(_403) ? 1.0 : min(_403, 1.0))));
    float _412 = (texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[10u].x * _302) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _303) + cbTextureTilingScale._m0[10u].w, _315)).x + _368.w) + _186[_406];
    vec4 _430 = texture(sampler2DArray(C_Enemy_DM_RT_PL_2_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w, _315));
    float _437 = (_430.x * 2.0) + (-1.0);
    float _438 = (_430.y * 2.0) + (-1.0);
    float _439 = dot(vec2(_437, _438), vec2(_437, _438));
    float _3717 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    float _453 = (cbMtdParam._m0[21u].x * (((_372 * 2.0) * (_430.z + _185[_406])) - _372)) + _372;
    float _457 = (cbMtdParam._m0[21u].y * ((_368.x * 2.0) + (-1.0))) + _437;
    float _458 = (cbMtdParam._m0[21u].y * ((_368.y * 2.0) + (-1.0))) + _438;
    float _461 = fma(_444, _236, fma(_458, _228 * TANGENT.x, (_214 * _206) * _457));
    float _464 = fma(_444, _237, fma(_458, _228 * TANGENT.y, (_214 * _207) * _457));
    float _467 = fma(_444, _238, fma(_458, _228 * TANGENT.z, (_214 * _208) * _457));
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    float _472 = _471 * _461;
    float _473 = _471 * _464;
    float _474 = _471 * _467;
    float _3728 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _475 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3750 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3761 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3772 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _479 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _564 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _566 = _564.w;
    float _587 = fma(_474, cbSceneParam._m0[5u].z, fma(_473, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _472));
    float _590 = fma(_474, cbSceneParam._m0[6u].z, fma(_473, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _472));
    float _593 = fma(_474, cbSceneParam._m0[7u].z, fma(_473, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _472));
    vec4 _595 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _606 = (((_595.y - _475) + (_595.w * _475)) * cbMtdParam._m0[3u].x) + _475;
    uint _619 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = (_619 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3783 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    vec4 _634 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _639 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _650 = (((_639.x - _479) + (_639.w * _479)) * cbMtdParam._m0[3u].x) + _479;
    float _663 = (cbMtdParam._m0[3u].x * (((_631 * _566) - _631) + _634.x)) + _631;
    float _664 = (cbMtdParam._m0[3u].x * (((_632 * _566) - _632) + _634.y)) + _632;
    float _665 = (cbMtdParam._m0[3u].x * (((_633 * _566) - _633) + _634.z)) + _633;
    float _666 = 1.0 - _650;
    float _667 = _666 * _663;
    float _668 = _666 * _664;
    float _669 = _666 * _665;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _650;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _650;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _650;
    float _677 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    vec4 _689 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _692 = _689.x * TEXCOORD_4;
    float _693 = dot(vec3(_472, _473, _474), vec3(_553, _554, _555));
    float _696 = _693 * 2.0;
    float _700 = (_696 * _472) - _553;
    float _701 = (_696 * _473) - _554;
    float _702 = (_696 * _474) - _555;
    float _706 = abs(dot(vec3(_553, _554, _555), vec3(_472, _473, _474)));
    float _3816 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _708 = sqrt(_606);
    float _721 = exp2((_708 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _727 = (1.0 - _721) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _728 = _721 * _708;
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1068;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _793 = fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756));
        float _797 = fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756));
        float _801 = fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756));
        float _826 = _756 + _472;
        float _827 = _760 + _473;
        float _828 = _764 + _474;
        float _838 = fma(_828, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826)) - _793;
        float _839 = fma(_828, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826)) - _797;
        float _840 = fma(_828, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826)) - _801;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_793 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_797 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[34u].z) + ((((((_801 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _896 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_862.x + (-0.5));
        float _898 = _896 * (_862.y + (-0.5));
        float _899 = _896 * (_862.z + (-0.5));
        float _906 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_869.x + (-0.5));
        float _908 = _906 * (_869.y + (-0.5));
        float _909 = _906 * (_869.z + (-0.5));
        float _916 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_876.x + (-0.5));
        float _918 = _916 * (_876.y + (-0.5));
        float _919 = _916 * (_876.z + (-0.5));
        float _926 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_883.x + (-0.5));
        float _928 = _926 * (_883.y + (-0.5));
        float _929 = _926 * (_883.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _950 = (dot(vec3(_472, _473, _474), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _960 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3864 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_962 + 1.0))) + _967) * _930;
        float _977 = _898 * 0.5;
        float _978 = _908 * 0.5;
        float _979 = _918 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_472, _473, _474), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3897 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1004 + 1.0))) + _1009) * _931;
        float _1019 = _899 * 0.5;
        float _1020 = _909 * 0.5;
        float _1021 = _919 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_472, _473, _474), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3930 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1046 + 1.0))) + _1051) * _932;
        _1068 = _899;
        _1070 = _898;
        _1071 = _897;
        _1072 = _909;
        _1073 = _908;
        _1074 = _907;
        _1075 = _919;
        _1076 = _918;
        _1077 = _917;
        _1078 = _932;
        _1079 = _931;
        _1080 = _930;
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _1069;
        _1070 = _1069;
        _1071 = _1069;
        _1072 = _1069;
        _1073 = _1069;
        _1074 = _1069;
        _1075 = _1069;
        _1076 = _1069;
        _1077 = _1069;
        _1078 = _1069;
        _1079 = _1069;
        _1080 = _1069;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1109 = fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756));
        float _1113 = fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756));
        float _1117 = fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756));
        float _1140 = _756 + _472;
        float _1141 = _760 + _473;
        float _1142 = _764 + _474;
        float _1152 = fma(_1142, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140)) - _1109;
        float _1153 = fma(_1142, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140)) - _1113;
        float _1154 = fma(_1142, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140)) - _1117;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1109 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1113 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[35u].z) + ((((((_1117 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1208 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1175.x + (-0.5));
        float _1210 = _1208 * (_1175.y + (-0.5));
        float _1211 = _1208 * (_1175.z + (-0.5));
        float _1218 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1182.x + (-0.5));
        float _1220 = _1218 * (_1182.y + (-0.5));
        float _1221 = _1218 * (_1182.z + (-0.5));
        float _1228 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1189.x + (-0.5));
        float _1230 = _1228 * (_1189.y + (-0.5));
        float _1231 = _1228 * (_1189.z + (-0.5));
        float _1238 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1196.x + (-0.5));
        float _1240 = _1238 * (_1196.y + (-0.5));
        float _1241 = _1238 * (_1196.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_472, _473, _474), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3993 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1272 + 1.0))) + _1277) * _1242;
        float _1287 = _1210 * 0.5;
        float _1288 = _1220 * 0.5;
        float _1289 = _1230 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_472, _473, _474), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4026 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1314 + 1.0))) + _1319) * _1243;
        float _1329 = _1211 * 0.5;
        float _1330 = _1221 * 0.5;
        float _1331 = _1231 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_472, _473, _474), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4059 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1356 + 1.0))) + _1361) * _1244;
        _1378 = _1211;
        _1379 = _1210;
        _1380 = _1209;
        _1381 = _1221;
        _1382 = _1220;
        _1383 = _1219;
        _1384 = _1231;
        _1385 = _1230;
        _1386 = _1229;
        _1387 = _1244;
        _1388 = _1243;
        _1389 = _1242;
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1069;
        _1379 = _1069;
        _1380 = _1069;
        _1381 = _1069;
        _1382 = _1069;
        _1383 = _1069;
        _1384 = _1069;
        _1385 = _1069;
        _1386 = _1069;
        _1387 = _1069;
        _1388 = _1069;
        _1389 = _1069;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1081)) + _1081;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1082)) + _1082;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1083)) + _1083;
    float _1425 = fma(_1404, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1402 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1404, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1402 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1404, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1402));
    float _1446 = _700 * 0.5;
    float _1447 = _701 * 0.5;
    float _1448 = _702 * 0.5;
    float _1449 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1452 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1455 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1489;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1462 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1068, _1072, _1075, _1078));
        float _1466 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1470 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1477 = dot(vec4(cbModelParam._m0[39u]), vec4(_1446, _1447, _1448, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1500;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1491 = dot(vec4(cbModelParam._m0[40u]), vec4(_1446, _1447, _1448, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1504 = (_1500 * cbModelParam._m0[1u].x) + (_1489 * (1.0 - cbModelParam._m0[1u].x));
    float _1514 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1514 : min(cbModelParam._m0[25u].z, _1514));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1564 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1568 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1572 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1575 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1578 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1581 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1609;
        if (_1575 > 0.0)
        {
            _1609 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1609 = frontier_phi_22_20_ladder;
        }
        float _1781;
        if (_1578 > 0.0)
        {
            _1781 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1781 = frontier_phi_31_27_ladder;
        }
        float _2077;
        if (_1581 > 0.0)
        {
            _2077 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2077 = frontier_phi_43_38_ladder;
        }
        float _2079 = isnan(_1781) ? _1609 : (isnan(_1609) ? _1781 : min(_1609, _1781));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1575) + _1564;
        float _2085 = (_2080 * _1578) + _1568;
        float _2086 = (_2080 * _1581) + _1572;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1515);
            frontier_phi_21_43_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1597 = frontier_phi_21_43_ladder_2;
        _1599 = frontier_phi_21_43_ladder_1;
        _1601 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1515);
        _1597 = _1585.x * cbModelParam._m0[1u].y;
        _1599 = _1585.y * cbModelParam._m0[1u].y;
        _1601 = _1585.z * cbModelParam._m0[1u].y;
    }
    float _1605 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1605 : min(cbModelParam._m0[25u].w, _1605));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1659 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1663 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1667 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1670 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1673 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1676 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1786;
        if (_1670 > 0.0)
        {
            _1786 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1786 = frontier_phi_33_29_ladder;
        }
        float _2104;
        if (_1673 > 0.0)
        {
            _2104 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2104 = frontier_phi_45_40_ladder;
        }
        float _2442;
        if (_1676 > 0.0)
        {
            _2442 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2442 = frontier_phi_55_52_ladder;
        }
        float _2444 = isnan(_2104) ? _1786 : (isnan(_1786) ? _2104 : min(_1786, _2104));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1670) + _1659;
        float _2450 = (_2445 * _1673) + _1663;
        float _2451 = (_2445 * _1676) + _1667;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_30_55_ladder;
        float frontier_phi_30_55_ladder_1;
        float frontier_phi_30_55_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_30_55_ladder = 0.0;
            frontier_phi_30_55_ladder_1 = 0.0;
            frontier_phi_30_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1606);
            frontier_phi_30_55_ladder = _2573.z * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_1 = _2573.y * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_2 = _2573.x * cbModelParam._m0[1u].z;
        }
        _1695 = frontier_phi_30_55_ladder_2;
        _1697 = frontier_phi_30_55_ladder_1;
        _1699 = frontier_phi_30_55_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1606);
        _1695 = _1679.x * cbModelParam._m0[1u].z;
        _1697 = _1679.y * cbModelParam._m0[1u].z;
        _1699 = _1679.z * cbModelParam._m0[1u].z;
    }
    float _1712 = (((_727 * _677) + _728) * _692) * ((cbModelParam._m0[1u].w * (_1695 - _1597)) + _1597);
    float _1714 = (((_727 * _679) + _728) * _692) * ((cbModelParam._m0[1u].w * (_1697 - _1599)) + _1599);
    float _1716 = (((_727 * _680) + _728) * _692) * ((cbModelParam._m0[1u].w * (_1699 - _1601)) + _1601);
    float _1719 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, _1712 * cbSceneParam._m0[91u].x));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1772 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1773 = _1760 / _1772;
    float _1774 = _1764 / _1772;
    float _1775 = _1768 / _1772;
    float _1922;
    float _1923;
    float _1924;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1802 = ((uint(_1775 > cbSceneParam._m0[59u].y) + uint(_1775 > cbSceneParam._m0[59u].x)) + uint(_1775 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1803 = _1802 + 43u;
        uint _1811 = _1802 + 44u;
        uint _1819 = _1802 + 45u;
        uint _1827 = _1802 + 46u;
        float _1838 = fma(_1772, cbSceneParam._m0[_1803].w, fma(_1768, cbSceneParam._m0[_1803].z, fma(_1764, cbSceneParam._m0[_1803].y, _1760 * cbSceneParam._m0[_1803].x)));
        float _1842 = fma(_1772, cbSceneParam._m0[_1811].w, fma(_1768, cbSceneParam._m0[_1811].z, fma(_1764, cbSceneParam._m0[_1811].y, _1760 * cbSceneParam._m0[_1811].x)));
        float _1850 = fma(_1772, cbSceneParam._m0[_1827].w, fma(_1768, cbSceneParam._m0[_1827].z, fma(_1764, cbSceneParam._m0[_1827].y, _1760 * cbSceneParam._m0[_1827].x)));
        float _1855 = cbSceneParam._m0[33u].z * _1850;
        float _1857 = cbSceneParam._m0[33u].w * _1850;
        float _1860 = fma(_1772, cbSceneParam._m0[_1819].w, fma(_1768, cbSceneParam._m0[_1819].z, fma(_1764, cbSceneParam._m0[_1819].y, _1760 * cbSceneParam._m0[_1819].x))) / _1850;
        float _1908 = (cbSceneParam._m0[33u].x - sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775))) * cbSceneParam._m0[33u].y;
        float _4185 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1915 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 + _1838) / _1850, (_1857 + _1842) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 + _1838) / _1850, (_1842 - _1855) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 - _1855) / _1850, (_1842 - _1857) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 - _1857) / _1850, (_1855 + _1842) / _1850), _1860), 0.0)).x), vec4(0.25)));
        _1922 = 1.0 - (_1915 * cbSceneParam._m0[34u].x);
        _1923 = 1.0 - (_1915 * cbSceneParam._m0[34u].y);
        _1924 = 1.0 - (_1915 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1922 = 1.0;
        _1923 = 1.0;
        _1924 = 1.0;
    }
    float _1988;
    float _1990;
    float _1992;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1976 = fma(_1772, cbSceneParam._m0[63u].w, fma(_1768, cbSceneParam._m0[63u].z, fma(_1764, cbSceneParam._m0[63u].y, _1760 * cbSceneParam._m0[63u].x)));
        float _1977 = fma(_1772, cbSceneParam._m0[60u].w, fma(_1768, cbSceneParam._m0[60u].z, fma(_1764, cbSceneParam._m0[60u].y, _1760 * cbSceneParam._m0[60u].x))) / _1976;
        float _1978 = fma(_1772, cbSceneParam._m0[61u].w, fma(_1768, cbSceneParam._m0[61u].z, fma(_1764, cbSceneParam._m0[61u].y, _1760 * cbSceneParam._m0[61u].x))) / _1976;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1977 >= cbSceneParam._m0[64u].x) && (_1978 >= cbSceneParam._m0[64u].y)) && (_1977 <= cbSceneParam._m0[64u].z)) && (_1978 <= cbSceneParam._m0[64u].w))
        {
            float _2117 = fma(_1772, cbSceneParam._m0[62u].w, fma(_1768, cbSceneParam._m0[62u].z, fma(_1764, cbSceneParam._m0[62u].y, _1760 * cbSceneParam._m0[62u].x))) / _1976;
            float _2121 = isnan(cbSceneParam._m0[41u].w) ? _2117 : (isnan(_2117) ? cbSceneParam._m0[41u].w : max(_2117, cbSceneParam._m0[41u].w));
            float _2164 = (cbSceneParam._m0[33u].x - sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775))) * cbSceneParam._m0[33u].y;
            float _4201 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
            float _2171 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1977, cbSceneParam._m0[33u].w + _1978), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1977, _1978 - cbSceneParam._m0[33u].z), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1977 - cbSceneParam._m0[33u].z, _1978 - cbSceneParam._m0[33u].w), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1977 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1978), _2121), 0.0)).x), vec4(0.25)));
            float _2175 = 1.0 - (_2171 * cbSceneParam._m0[34u].x);
            float _2176 = 1.0 - (_2171 * cbSceneParam._m0[34u].y);
            float _2177 = 1.0 - (_2171 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2177) ? _1924 : (isnan(_1924) ? _2177 : min(_1924, _2177));
            frontier_phi_42_41_ladder_1 = isnan(_2176) ? _1923 : (isnan(_1923) ? _2176 : min(_1923, _2176));
            frontier_phi_42_41_ladder_2 = isnan(_2175) ? _1922 : (isnan(_1922) ? _2175 : min(_1922, _2175));
        }
        else
        {
            frontier_phi_42_41_ladder = _1924;
            frontier_phi_42_41_ladder_1 = _1923;
            frontier_phi_42_41_ladder_2 = _1922;
        }
        _1988 = frontier_phi_42_41_ladder_2;
        _1990 = frontier_phi_42_41_ladder_1;
        _1992 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1988 = _1922;
        _1990 = _1923;
        _1992 = _1924;
    }
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_619 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2007 = _692 + (-1.0);
    float _2012 = (cbLight._m0[_2000].x * _2007) + 1.0;
    float _2013 = (cbLight._m0[_2000].y * _2007) + 1.0;
    float _2014 = (cbLight._m0[_2000].z * _2007) + 1.0;
    float _2015 = (cbLight._m0[_2000].w * _2007) + 1.0;
    uint _2016 = _1999 + 5u;
    float _2022 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2026 = _1999 + 4u;
    float _2036 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2040 = _1999 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_472, _473, _474));
    float _2054 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_472, _473, _474));
    float _4237 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _4248 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2059 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2061 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2068 = ((cbLight._m0[_2016].x * _2022) * _2061) + (((cbLight._m0[_2026].x * _1988) * _2036) * _2059);
    float _2069 = ((_2022 * cbLight._m0[_2016].y) * _2061) + (((cbLight._m0[_2026].y * _1990) * _2036) * _2059);
    float _2070 = ((_2022 * cbLight._m0[_2016].z) * _2061) + (((cbLight._m0[_2026].z * _1992) * _2036) * _2059);
    uvec4 _2074 = floatBitsToUint(cbLight._m0[_1999 + 12u]);
    bool _2076 = _2074.x == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2076)
    {
        _2178 = _2068;
        _2180 = _2069;
        _2182 = _2070;
    }
    else
    {
        uint _2186 = _1999 + 6u;
        float _2202 = (dot(vec3(cbLight._m0[_1999 + 2u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4259 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2205 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2178 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _2068;
        _2180 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _2069;
        _2182 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _2070;
    }
    bool _2185 = _2074.y == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2185)
    {
        _2240 = _2178;
        _2242 = _2180;
        _2244 = _2182;
    }
    else
    {
        uint _2413 = _1999 + 7u;
        float _2429 = (dot(vec3(cbLight._m0[_1999 + 3u].xyz), vec3(_472, _473, _474)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4275 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2432 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2240 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2178;
        _2242 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2180;
        _2244 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2182;
    }
    uint _2247 = _1999 + 8u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _606) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_1999].x + _553;
    float _2263 = cbLight._m0[_1999].y + _554;
    float _2264 = cbLight._m0[_1999].z + _555;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_1999].xyz));
    float _4291 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _2276 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2277 = dot(vec3(_472, _473, _474), vec3(_2269, _2270, _2271));
    float _4313 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2269, _2270, _2271));
    float _4324 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2261 * _2261;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
    float _2298 = 0.959999978542327880859375 - _674;
    float _2300 = 0.959999978542327880859375 - _675;
    float _2301 = 0.959999978542327880859375 - _676;
    float _2308 = 1.0 - _2261;
    float _2319 = (0.5 / (((_2276 * ((_2275 * _2308) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2308) + _2261) * _2275))) * _2275;
    float _4335 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    uint _2335 = _1999 + 9u;
    float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _606) * 0.949999988079071044921875);
    float _2347 = _2346 * _2346;
    float _2348 = cbLight._m0[_2040].x + _553;
    float _2349 = cbLight._m0[_2040].y + _554;
    float _2350 = cbLight._m0[_2040].z + _555;
    float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
    float _2355 = _2354 * _2348;
    float _2356 = _2354 * _2349;
    float _2357 = _2354 * _2350;
    float _2358 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2040].xyz));
    float _4346 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2362 = dot(vec3(_472, _473, _474), vec3(_2355, _2356, _2357));
    float _4357 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2355, _2356, _2357));
    float _4368 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2347 * _2347;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
    float _2388 = 1.0 - _2347;
    float _2398 = (0.5 / (((_2276 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2388) + _2347) * _2361))) * _2361;
    float _4379 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2400 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    float _2410 = (((((_2381 * _2298) + _677) * cbLight._m0[_2335].x) * _2400) * _2022) + ((((cbLight._m0[_2247].x * _1988) * ((_2297 * _2298) + _677)) * _2321) * _2036);
    float _2411 = (((((_2381 * _2300) + _679) * cbLight._m0[_2335].y) * _2400) * _2022) + ((((cbLight._m0[_2247].y * _1990) * ((_2297 * _2300) + _679)) * _2321) * _2036);
    float _2412 = (((((_2381 * _2301) + _680) * cbLight._m0[_2335].z) * _2400) * _2022) + ((((cbLight._m0[_2247].z * _1992) * ((_2297 * _2301) + _680)) * _2321) * _2036);
    float _2468;
    float _2470;
    float _2472;
    if (_2076)
    {
        _2468 = _2410;
        _2470 = _2411;
        _2472 = _2412;
    }
    else
    {
        uint _2474 = _1999 + 2u;
        uint _2478 = _1999 + 10u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _606) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _553;
        float _2495 = cbLight._m0[_2474].y + _554;
        float _2496 = cbLight._m0[_2474].z + _555;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2474].xyz));
        float _4390 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2508 = dot(vec3(_472, _473, _474), vec3(_2501, _2502, _2503));
        float _4401 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4412 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2276 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2534) + _2493) * _2507))) * _2507;
        float _4423 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2468 = (((((_2527 * _2298) + _677) * cbLight._m0[_2478].x) * _2546) * _2547) + _2410;
        _2470 = (((((_2527 * _2300) + _679) * cbLight._m0[_2478].y) * _2546) * _2547) + _2411;
        _2472 = (((((_2527 * _2301) + _680) * cbLight._m0[_2478].z) * _2546) * _2547) + _2412;
    }
    float _2578;
    float _2580;
    float _2582;
    if (_2185)
    {
        _2578 = _2468;
        _2580 = _2470;
        _2582 = _2472;
    }
    else
    {
        uint _2589 = _1999 + 3u;
        uint _2593 = _1999 + 11u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _606) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _553;
        float _2610 = cbLight._m0[_2589].y + _554;
        float _2611 = cbLight._m0[_2589].z + _555;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_472, _473, _474), vec3(cbLight._m0[_2589].xyz));
        float _4439 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2623 = dot(vec3(_472, _473, _474), vec3(_2616, _2617, _2618));
        float _4450 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4461 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2276 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2649) + _2608) * _2622))) * _2622;
        float _4472 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2578 = (((((_2642 * _2298) + _677) * cbLight._m0[_2593].x) * _2661) * _2662) + _2468;
        _2580 = (((((_2642 * _2300) + _679) * cbLight._m0[_2593].y) * _2661) * _2662) + _2470;
        _2582 = (((((_2642 * _2301) + _680) * cbLight._m0[_2593].z) * _2661) * _2662) + _2472;
    }
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_1997.y == 0u)
    {
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.x;
        uint _2695 = uint((float(_2683.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2684))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2684)));
        float _2705 = (log2(_1775 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2706 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        uint _2709 = uint(isnan(14.0) ? _2706 : (isnan(_2706) ? 14.0 : min(_2706, 14.0)));
        uvec4 _2714 = texelFetch(g_lightClusterGridBuffer, int(((_2709 << 2u) + (_2695 << 6u)) >> 2u));
        uint _2715 = _2714.x;
        uint _2716 = _2683.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2716 >> 4u) & 15u)) + 4294967295u) & _2715) == 0u) || ((_2716 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            uint _2962 = 0u;
            uint _2971;
            bool _2972;
            for (;;)
            {
                _2971 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                _2972 = _2971 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2972)
                {
                    frontier_phi_74_pred = _2960;
                    frontier_phi_74_pred_1 = _2961;
                    frontier_phi_74_pred_2 = _2959;
                    frontier_phi_74_pred_3 = _2958;
                    frontier_phi_74_pred_4 = _2957;
                    frontier_phi_74_pred_5 = _2956;
                }
                else
                {
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    uint _3086;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2971;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    for (;;)
                    {
                        uint _3090 = uint(findLSB(_3086)) + (_2962 << 5u);
                        uint _3087 = (_3086 + 4294967295u) & _3086;
                        uint _3092 = _3090 * 48u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 3u)).x));
                        uint _3112 = (_3090 * 48u) + 4u;
                        vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3131 = (_3090 * 48u) + 8u;
                        vec3 _3142 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x));
                        float _3146 = _3106.x - _1773;
                        float _3147 = _3106.y - _1774;
                        float _3148 = _3106.z - _1775;
                        float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                        float _3152 = inversesqrt(_3149);
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3156 = dot(vec3(_587, _590, _593), vec3(_3153, _3154, _3155));
                        float _3161 = 1.0 - (_3149 * _3106.w);
                        float _4498 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3163 = sqrt(_3149) * _3125.w;
                        float _3166 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3156) + _3167;
                        float _3173 = _3163 * _3163;
                        float _3177 = ((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3162) / ((_3173 * 0.699999988079071044921875) + 1.0);
                        float _3181 = (-0.0) - _1773;
                        float _3182 = (-0.0) - _1774;
                        float _3183 = (-0.0) - _1775;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3197 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                        float _3198 = 1.0 - _708;
                        float _3205 = sqrt(1.0 - ((1.0 - (_3198 * _3198)) * (1.0 - (_3197 * _3197))));
                        float _3206 = _3205 * _3205;
                        float _3207 = _3206 * _3206;
                        float _3208 = _3188 + _3153;
                        float _3209 = _3189 + _3154;
                        float _3210 = _3190 + _3155;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3218 = dot(vec3(_587, _590, _593), vec3(_3188, _3189, _3190));
                        float _4514 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3222 = dot(vec3(_587, _590, _593), vec3(_3214 * _3208, _3214 * _3209, _3214 * _3210));
                        float _4525 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3229 = ((_3225 * _3225) * (_3207 + (-1.0))) + 1.0;
                        float _3230 = _3166 * _3206;
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3156) + _3231;
                        float _4536 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3236 = 1.0 - _3206;
                        float _3246 = (0.5 / (((_3235 * ((_3221 * _3236) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3206) * _3221))) * _3235;
                        float _4547 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3257 = (((_3207 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3229 * _3229) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125))) * _3162;
                        _3015 = (_3177 * _3125.x) + _3083;
                        _3016 = (_3177 * _3125.y) + _3084;
                        _3017 = (_3177 * _3125.z) + _3085;
                        _3012 = (_3257 * _3142.x) + _3080;
                        _3013 = (_3257 * _3142.y) + _3081;
                        _3014 = (_3257 * _3142.z) + _3082;
                        if (_3087 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3087;
                        }
                    }
                    frontier_phi_74_pred = _3016;
                    frontier_phi_74_pred_1 = _3017;
                    frontier_phi_74_pred_2 = _3015;
                    frontier_phi_74_pred_3 = _3014;
                    frontier_phi_74_pred_4 = _3013;
                    frontier_phi_74_pred_5 = _3012;
                }
                _2821 = frontier_phi_74_pred;
                _2823 = frontier_phi_74_pred_1;
                _2819 = frontier_phi_74_pred_2;
                _2817 = frontier_phi_74_pred_3;
                _2815 = frontier_phi_74_pred_4;
                _2813 = frontier_phi_74_pred_5;
                uint _2963 = _2962 + 1u;
                if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2956 = _2813;
                    _2957 = _2815;
                    _2958 = _2817;
                    _2959 = _2819;
                    _2960 = _2821;
                    _2961 = _2823;
                    _2962 = _2963;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((4294967295u << _2829) & _2715) == 0u)
        {
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
            _2930 = _2818;
            _2932 = _2820;
            _2934 = _2822;
        }
        else
        {
            float _2949 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
            float _2950 = _2949 * _1773;
            float _2951 = _2949 * _1774;
            float _2952 = _2949 * _1775;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _3063 = _2812;
                float _3064 = _2814;
                float _3065 = _2816;
                float _3066 = _2818;
                float _3067 = _2820;
                float _3068 = _2822;
                uint _3069 = _2829;
                uint _3078;
                bool _3079;
                for (;;)
                {
                    _3078 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                    _3079 = _3078 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_3079)
                    {
                        frontier_phi_80_pred = _3068;
                        frontier_phi_80_pred_1 = _3067;
                        frontier_phi_80_pred_2 = _3066;
                        frontier_phi_80_pred_3 = _3065;
                        frontier_phi_80_pred_4 = _3063;
                        frontier_phi_80_pred_5 = _3064;
                    }
                    else
                    {
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        float _3277 = _3065;
                        float _3278 = _3066;
                        float _3279 = _3067;
                        float _3280 = _3068;
                        uint _3281 = _3078;
                        uint _3282;
                        vec4 _3307;
                        float _3308;
                        vec4 _3323;
                        vec3 _3335;
                        vec4 _3351;
                        vec4 _3366;
                        float _3412;
                        bool _3413;
                        for (;;)
                        {
                            uint _3292 = ((_3069 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3281));
                            _3282 = (_3281 + 4294967295u) & _3281;
                            uint _3294 = _3292 * 40u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3308 = _3307.w;
                            uint _3310 = (_3292 * 40u) + 4u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3292 * 40u) + 8u;
                            _3335 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x));
                            uint _3338 = (_3292 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3292 * 40u) + 20u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3292 * 40u) + 24u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3387 = (_3292 * 40u) + 28u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3412 = fma(_1775, _3400.z, fma(_1774, _3400.y, _3400.x * _1773)) + _3400.w;
                            _3413 = !((fma(_1775, _3381.z, fma(_1774, _3381.y, _3381.x * _1773)) + _3381.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_3413)
                            {
                                float _3440 = _3307.x - _1773;
                                float _3441 = _3307.y - _1774;
                                float _3442 = _3307.z - _1775;
                                float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                                float _3446 = inversesqrt(_3443);
                                float _3447 = _3446 * _3440;
                                float _3448 = _3446 * _3441;
                                float _3449 = _3446 * _3442;
                                float _3453 = 1.0 - (_3443 / (_3308 * _3308));
                                float _4558 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3458 = sqrt(_3443) * _3323.w;
                                float _3460 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                                float _3461 = _3460 * _3460;
                                float _3464 = ((1.0 - _3461) * dot(vec3(_3447, _3448, _3449), vec3(_587, _590, _593))) + _3461;
                                float _3467 = _3458 * _3458;
                                float _3471 = (fma(_1775, _3351.z, fma(_1774, _3351.y, _3351.x * _1773)) + _3351.w) / _3412;
                                float _3472 = (fma(_1775, _3366.z, fma(_1774, _3366.y, _3366.x * _1773)) + _3366.w) / _3412;
                                float _3476 = 1.0 - dot(vec2(_3471, _3472), vec2(_3471, _3472));
                                float _4574 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3478 = _3477 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3454) / ((_3467 * 0.699999988079071044921875) + 1.0));
                                float _3490 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3491 = 1.0 - _708;
                                float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                                float _3499 = _3498 * _3498;
                                float _3500 = _3499 * _3499;
                                float _3501 = _3447 - _2950;
                                float _3502 = _3448 - _2951;
                                float _3503 = _3449 - _2952;
                                float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                                float _3511 = dot(vec3(_587, _590, _593), vec3((-0.0) - _2950, (-0.0) - _2951, (-0.0) - _2952));
                                float _4585 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3515 = dot(vec3(_587, _590, _593), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                                float _4596 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                                float _3523 = _3460 * _3499;
                                float _3524 = _3523 * _3523;
                                float _3530 = ((1.0 - _3524) * dot(vec3(_587, _590, _593), vec3(_3447, _3448, _3449))) + _3524;
                                float _4607 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3532 = 1.0 - _3499;
                                float _3542 = (0.5 / (((_3531 * ((_3514 * _3532) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3499) * _3514))) * _3531;
                                float _4618 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3552 = (_3477 * _3454) * (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3522 * _3522) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _3478 * _3323.z;
                                frontier_phi_86_pred_1 = _3478 * _3323.y;
                                frontier_phi_86_pred_2 = _3478 * _3323.x;
                                frontier_phi_86_pred_3 = _3552 * _3335.z;
                                frontier_phi_86_pred_4 = _3552 * _3335.y;
                                frontier_phi_86_pred_5 = _3552 * _3335.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_86_pred;
                            _3560 = frontier_phi_86_pred_1;
                            _3559 = frontier_phi_86_pred_2;
                            _3558 = frontier_phi_86_pred_3;
                            _3557 = frontier_phi_86_pred_4;
                            _3556 = frontier_phi_86_pred_5;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            _3264 = _3558 + _3277;
                            if (_3282 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3282;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _3267;
                        frontier_phi_80_pred_1 = _3266;
                        frontier_phi_80_pred_2 = _3265;
                        frontier_phi_80_pred_3 = _3264;
                        frontier_phi_80_pred_4 = _3262;
                        frontier_phi_80_pred_5 = _3263;
                    }
                    _2935 = frontier_phi_80_pred;
                    _2933 = frontier_phi_80_pred_1;
                    _2931 = frontier_phi_80_pred_2;
                    _2929 = frontier_phi_80_pred_3;
                    _2925 = frontier_phi_80_pred_4;
                    _2927 = frontier_phi_80_pred_5;
                    uint _3070 = _3069 + 1u;
                    if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3063 = _2925;
                        _3064 = _2927;
                        _3065 = _2929;
                        _3066 = _2931;
                        _3067 = _2933;
                        _3068 = _2935;
                        _3069 = _3070;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2935;
                frontier_phi_68_69_ladder_1 = _2933;
                frontier_phi_68_69_ladder_2 = _2931;
                frontier_phi_68_69_ladder_3 = _2929;
                frontier_phi_68_69_ladder_4 = _2927;
                frontier_phi_68_69_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_68_69_ladder = _2822;
                frontier_phi_68_69_ladder_1 = _2820;
                frontier_phi_68_69_ladder_2 = _2818;
                frontier_phi_68_69_ladder_3 = _2816;
                frontier_phi_68_69_ladder_4 = _2814;
                frontier_phi_68_69_ladder_5 = _2812;
            }
            _2924 = frontier_phi_68_69_ladder_5;
            _2926 = frontier_phi_68_69_ladder_4;
            _2928 = frontier_phi_68_69_ladder_3;
            _2930 = frontier_phi_68_69_ladder_2;
            _2932 = frontier_phi_68_69_ladder_1;
            _2934 = frontier_phi_68_69_ladder;
        }
        float _2939 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
        _2727 = (_2939 * _2930) + _2240;
        _2729 = (_2939 * _2932) + _2242;
        _2731 = (_2939 * _2934) + _2244;
        _2733 = ((_2924 * _677) * _2939) + _2578;
        _2735 = ((_2926 * _679) * _2939) + _2580;
        _2737 = ((_2928 * _680) * _2939) + _2582;
    }
    else
    {
        _2727 = _2240;
        _2729 = _2242;
        _2731 = _2244;
        _2733 = _2578;
        _2735 = _2580;
        _2737 = _2582;
    }
    vec4 _2743 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4634 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4645 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4656 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _2767 = (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2727 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _692))) + ((_2733 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + (_2743.x * cbMtdParam._m0[3u].x);
    float _2769 = ((_2743.y * cbMtdParam._m0[3u].x) + ((_2735 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2729 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _692)));
    float _2771 = ((_2743.z * cbMtdParam._m0[3u].x) + ((_2737 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2731 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _692)));
    uint _2775 = _619 + 6u;
    float _2783 = _561 / cbSceneParam._m0[86u].x;
    float _2784 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2798 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2800 = _2798.x;
    float _2801 = _2798.y;
    float _2802 = _2798.z;
    float _2803 = _2798.w;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2838 = _2837 / _495;
        float _2849 = _2838 * _546;
        float _2850 = _547 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2852 = _2838 * _548;
        float _2854 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2855 = _2854 + cbSceneParam._m0[79u].w;
        float _2856 = cbSceneParam._m0[79u].w - _2850;
        float _2862 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2852 * _2852));
        float _2865 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2862;
        float _2870 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2872 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3025;
        if (abs((_2851 - _2854) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3025 = ((((_2855 > 0.0) ? exp2(_2870 * _2855) : (2.0 - exp2(_2872 * _2855))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2865;
        }
        else
        {
            float _2985 = 1.0 / cbSceneParam._m0[80u].x;
            float _2986 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : max(_2855, _2856));
            float _2987 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : min(_2855, _2856));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            _3025 = ((abs(_2862 / _2851) * cbSceneParam._m0[80u].y) * ((((_2996 - _2997) * 2.0) - ((exp2(_2870 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0)))) - exp2(_2870 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))))) * _2985)) - ((exp2(_2872 * _2996) - exp2(_2872 * _2997)) * _2985))) + (_2865 * cbSceneParam._m0[80u].z);
        }
        vec4 _3027 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, 1.0), 0.0);
        float _3036 = exp2((_3025 * (-1.44269502162933349609375)) * (1.0 - _3027.w));
        float _3037 = log2(_3036);
        float _3053 = log2(_2803);
        _2874 = (exp2(_3053 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].x)) * _3027.x) / cbSceneParam._m0[78u].x)) + _2800;
        _2876 = (exp2(_3053 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].y)) * _3027.y) / cbSceneParam._m0[78u].y)) + _2801;
        _2878 = (exp2(_3053 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].z)) * _3027.z) / cbSceneParam._m0[78u].z)) + _2802;
        _2880 = _3036 * _2803;
    }
    else
    {
        _2874 = _2800;
        _2876 = _2801;
        _2878 = _2802;
        _2880 = _2803;
    }
    float _2892 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2893 = _2892 == 3.0;
    float _2894 = log2(_2880);
    float _2901 = exp2(_2894 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0)));
    float _2902 = exp2(_2894 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0)));
    float _2903 = exp2(_2894 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0)));
    float _2912 = (_2892 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2912 * (_2893 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.y = _2912 * (_2893 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.z = _2912 * (_2893 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.w = cbInstanceData._m0[_2775].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2775].w;
}


