#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _909;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    uint _238 = uint(int(floor(cbMtdParam._m0[10u].y)));
    uint _239 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _241 = float(int(_238 - _239 * (_238 / _239)));
    float _251 = (fract(TEXCOORD_1.x) + (_241 - cbMtdParam._m0[10u].w * trunc(_241 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _253 = (fract(TEXCOORD_1.y) + floor(_241 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _266 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _251) + cbTextureTilingScale._m0[0u].z, (_253 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _273 = _266.x * cbMtdParam._m0[9u].x;
    float _274 = _266.y * cbMtdParam._m0[9u].y;
    float _275 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _287 = _285.x;
    bool _294 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _310 = ((_294 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _287)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _287))) - POSITION_1.w) / cbMtdParam._m0[10u].z;
    float _3274 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _314 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _266.w) * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)));
    vec4 _329 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _251) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _332 = _329.x + cbMtdParam._m0[10u].x;
    vec4 _344 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _251) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _253) + cbTextureTilingScale._m0[1u].w));
    float _348 = _344.z;
    float _352 = (_344.x * 2.0) + (-1.0);
    float _354 = (_344.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_352, _354), vec2(_352, _354));
    float _3285 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _360 = sqrt(1.0 - (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))));
    float _363 = fma(_360, _216, fma(_354, _208 * TANGENT.x, (_194 * _186) * _352));
    float _366 = fma(_360, _217, fma(_354, _208 * TANGENT.y, (_194 * _187) * _352));
    float _369 = fma(_360, _218, fma(_354, _208 * TANGENT.z, (_194 * _188) * _352));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _374 = _373 * _363;
    float _375 = _373 * _366;
    float _376 = _373 * _369;
    float _3296 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _377 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _378 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _3318 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3329 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3340 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3351 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _382 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _387 = _294 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _438 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _428);
    float _439 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _428);
    float _440 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _428);
    float _444 = inversesqrt(dot(vec3(_438, _439, _440), vec3(_438, _439, _440)));
    float _445 = _438 * _444;
    float _446 = _439 * _444;
    float _447 = _440 * _444;
    float _452 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _453 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _474 = fma(_376, cbSceneParam._m0[5u].z, fma(_375, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _374));
    float _477 = fma(_376, cbSceneParam._m0[6u].z, fma(_375, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _374));
    float _480 = fma(_376, cbSceneParam._m0[7u].z, fma(_375, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _374));
    uint _493 = uint(roundEven(NORMAL.w)) * 13u;
    uint _496 = (_493 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _502 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_496].x;
    float _503 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) * cbInstanceData._m0[_496].y;
    float _504 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) * cbInstanceData._m0[_496].z;
    float _3362 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _508 = 1.0 - _382;
    float _509 = _505 * _508;
    float _510 = _506 * _508;
    float _511 = _507 * _508;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _382;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _382;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _382;
    float _519 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    float _522 = _518 + 0.039999999105930328369140625;
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _452, cbSceneParam._m0[86u].y * _453));
    float _534 = _531.x * TEXCOORD_1.w;
    float _535 = dot(vec3(_374, _375, _376), vec3(_445, _446, _447));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _374) - _445;
    float _543 = (_538 * _375) - _446;
    float _544 = (_538 * _376) - _447;
    float _548 = abs(dot(vec3(_445, _446, _447), vec3(_374, _375, _376)));
    float _3395 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_378);
    float _563 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _569 = (1.0 - _563) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _570 = _563 * _550;
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _637 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _641 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _666 = _598 + _374;
        float _667 = _602 + _375;
        float _668 = _606 + _376;
        float _678 = fma(_668, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666)) - _633;
        float _679 = fma(_668, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666)) - _637;
        float _680 = fma(_668, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666)) - _641;
        float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
        float _697 = ((_684 * _678) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_684 * _679) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_684 * _680) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        float _736 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_702.x + (-0.5));
        float _738 = _736 * (_702.y + (-0.5));
        float _739 = _736 * (_702.z + (-0.5));
        float _746 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_709.x + (-0.5));
        float _748 = _746 * (_709.y + (-0.5));
        float _749 = _746 * (_709.z + (-0.5));
        float _756 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_716.x + (-0.5));
        float _758 = _756 * (_716.y + (-0.5));
        float _759 = _756 * (_716.z + (-0.5));
        float _766 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_723.x + (-0.5));
        float _768 = _766 * (_723.y + (-0.5));
        float _769 = _766 * (_723.z + (-0.5));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = _737 * 0.5;
        float _774 = _747 * 0.5;
        float _775 = _757 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _790 = (dot(vec3(_374, _375, _376), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _800 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3443 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_802 + 1.0))) + _807) * _770;
        float _817 = _738 * 0.5;
        float _818 = _748 * 0.5;
        float _819 = _758 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_374, _375, _376), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3476 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_844 + 1.0))) + _849) * _771;
        float _859 = _739 * 0.5;
        float _860 = _749 * 0.5;
        float _861 = _759 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_374, _375, _376), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3509 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_886 + 1.0))) + _891) * _772;
        _908 = _739;
        _910 = _738;
        _911 = _737;
        _912 = _749;
        _913 = _748;
        _914 = _747;
        _915 = _759;
        _916 = _758;
        _917 = _757;
        _918 = _772;
        _919 = _771;
        _920 = _770;
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
        _921 = 0.0;
        _922 = 0.0;
        _923 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _953 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _957 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _980 = _598 + _374;
        float _981 = _602 + _375;
        float _982 = _606 + _376;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_374, _375, _376), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3572 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_374, _375, _376), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3605 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_374, _375, _376), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3638 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _909;
        _1219 = _909;
        _1220 = _909;
        _1221 = _909;
        _1222 = _909;
        _1223 = _909;
        _1224 = _909;
        _1225 = _909;
        _1226 = _909;
        _1227 = _909;
        _1228 = _909;
        _1229 = _909;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _922)) + _922;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _542 * 0.5;
    float _1287 = _543 * 0.5;
    float _1288 = _544 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _912, _915, _918));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_910, _913, _916, _919));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_911, _914, _917, _920));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _378);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1418 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1421 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1449 = frontier_phi_16_14_ladder;
        }
        float _1677;
        if (_1418 > 0.0)
        {
            _1677 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1677 = frontier_phi_25_21_ladder;
        }
        float _1934;
        if (_1421 > 0.0)
        {
            _1934 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1934 = frontier_phi_37_32_ladder;
        }
        float _1936 = isnan(_1677) ? _1449 : (isnan(_1449) ? _1677 : min(_1449, _1677));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1415) + _1404;
        float _1942 = (_1937 * _1418) + _1408;
        float _1943 = (_1937 * _1421) + _1412;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_15_37_ladder = _2071.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2071.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2071.x * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_15_37_ladder_2;
        _1439 = frontier_phi_15_37_ladder_1;
        _1441 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1355);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _378);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1517 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1520 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1682;
        if (_1514 > 0.0)
        {
            _1682 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1682 = frontier_phi_27_23_ladder;
        }
        float _1961;
        if (_1517 > 0.0)
        {
            _1961 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1961 = frontier_phi_39_34_ladder;
        }
        float _2174;
        if (_1520 > 0.0)
        {
            _2174 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2174 = frontier_phi_48_45_ladder;
        }
        float _2176 = isnan(_1961) ? _1682 : (isnan(_1682) ? _1961 : min(_1682, _1961));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1514) + _1503;
        float _2182 = (_2177 * _1517) + _1507;
        float _2183 = (_2177 * _1520) + _1511;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2184;
        float _2187 = _2184 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2183 > _2187) || ((_2183 < _2185) || ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 < _2185) || (_2181 > _2187))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2183, cbModelParam._m0[17u].z, fma(_2182, cbModelParam._m0[17u].y, _2181 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2183, cbModelParam._m0[18u].z, fma(_2182, cbModelParam._m0[18u].y, _2181 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2183, cbModelParam._m0[19u].z, fma(_2182, cbModelParam._m0[19u].y, _2181 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_24_48_ladder = _2386.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2386.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2386.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_24_48_ladder_2;
        _1541 = frontier_phi_24_48_ladder_1;
        _1543 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1446);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1556 = (((_569 * _519) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_569 * _521) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_569 * _522) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    vec4 _1577 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_452, _453));
    float _1579 = _1577.w;
    float _1591 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1579);
    float _1592 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1579);
    float _1593 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1579);
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_493 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _534 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1636 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1640 = _1599 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_374, _375, _376));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_374, _375, _376));
    float _3774 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3785 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1616].x * _1622) * _1661) + (((cbLight._m0[_1626].x * _1591) * _1636) * _1659);
    float _1669 = ((_1622 * cbLight._m0[_1616].y) * _1661) + (((cbLight._m0[_1626].y * _1592) * _1636) * _1659);
    float _1670 = ((_1622 * cbLight._m0[_1616].z) * _1661) + (((cbLight._m0[_1626].z * _1593) * _1636) * _1659);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1668;
        _1689 = _1669;
        _1691 = _1670;
    }
    else
    {
        uint _1695 = _1599 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3796 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1714 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1670;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1905 = _1599 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3812 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1924 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1732 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1687;
        _1734 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1689;
        _1736 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1691;
    }
    uint _1739 = _1599 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _378) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1599].x + _445;
    float _1755 = cbLight._m0[_1599].y + _446;
    float _1756 = cbLight._m0[_1599].z + _447;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1599].xyz));
    float _3828 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _1768 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1769 = dot(vec3(_374, _375, _376), vec3(_1761, _1762, _1763));
    float _3850 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1761, _1762, _1763));
    float _3861 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0);
    float _1790 = 0.959999978542327880859375 - _516;
    float _1792 = 0.959999978542327880859375 - _517;
    float _1793 = 0.959999978542327880859375 - _518;
    float _1800 = 1.0 - _1753;
    float _1811 = (0.5 / (((_1768 * ((_1767 * _1800) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1800) + _1753) * _1767))) * _1767;
    float _3872 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1813 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1827 = _1599 + 9u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _378) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1640].x + _445;
    float _1841 = cbLight._m0[_1640].y + _446;
    float _1842 = cbLight._m0[_1640].z + _447;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1640].xyz));
    float _3883 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _1854 = dot(vec3(_374, _375, _376), vec3(_1847, _1848, _1849));
    float _3894 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1847, _1848, _1849));
    float _3905 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1839 * _1839;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0);
    float _1880 = 1.0 - _1839;
    float _1890 = (0.5 / (((_1768 * ((_1853 * _1880) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1880) + _1839) * _1853))) * _1853;
    float _3916 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    float _1902 = (((((_1873 * _1790) + _519) * cbLight._m0[_1827].x) * _1892) * _1622) + ((((cbLight._m0[_1739].x * _1591) * ((_1789 * _1790) + _519)) * _1813) * _1636);
    float _1903 = (((((_1873 * _1792) + _521) * cbLight._m0[_1827].y) * _1892) * _1622) + ((((cbLight._m0[_1739].y * _1592) * ((_1789 * _1792) + _521)) * _1813) * _1636);
    float _1904 = (((((_1873 * _1793) + _522) * cbLight._m0[_1827].z) * _1892) * _1622) + ((((cbLight._m0[_1739].z * _1593) * ((_1789 * _1793) + _522)) * _1813) * _1636);
    float _1966;
    float _1968;
    float _1970;
    if (_1676)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1599 + 2u;
        uint _1976 = _1599 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _378) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _445;
        float _1993 = cbLight._m0[_1972].y + _446;
        float _1994 = cbLight._m0[_1972].z + _447;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1972].xyz));
        float _3927 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2006 = dot(vec3(_374, _375, _376), vec3(_1999, _2000, _2001));
        float _3938 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _3949 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0);
        float _2032 = 1.0 - _1991;
        float _2042 = (0.5 / (((_1768 * ((_2005 * _2032) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2032) + _1991) * _2005))) * _2005;
        float _3960 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2044 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2045 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1966 = (((((_2025 * _1790) + _519) * cbLight._m0[_1976].x) * _2044) * _2045) + _1902;
        _1968 = (((((_2025 * _1792) + _521) * cbLight._m0[_1976].y) * _2044) * _2045) + _1903;
        _1970 = (((((_2025 * _1793) + _522) * cbLight._m0[_1976].z) * _2044) * _2045) + _1904;
    }
    float _2080;
    float _2082;
    float _2084;
    if (_1694)
    {
        _2080 = _1966;
        _2082 = _1968;
        _2084 = _1970;
    }
    else
    {
        uint _2091 = _1599 + 3u;
        uint _2095 = _1599 + 11u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _378) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _445;
        float _2112 = cbLight._m0[_2091].y + _446;
        float _2113 = cbLight._m0[_2091].z + _447;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_2091].xyz));
        float _3976 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2125 = dot(vec3(_374, _375, _376), vec3(_2118, _2119, _2120));
        float _3987 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _3998 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0);
        float _2151 = 1.0 - _2110;
        float _2161 = (0.5 / (((_1768 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2151) + _2110) * _2124))) * _2124;
        float _4009 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2080 = (((((_2144 * _1790) + _519) * cbLight._m0[_2095].x) * _2163) * _2164) + _1966;
        _2082 = (((((_2144 * _1792) + _521) * cbLight._m0[_2095].y) * _2163) * _2164) + _1968;
        _2084 = (((((_2144 * _1793) + _522) * cbLight._m0[_2095].z) * _2163) * _2164) + _1970;
    }
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    if (_1597.y == 0u)
    {
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2239;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2239;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2239;
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.x;
        uint _2266 = uint((float(_2254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _453) / _2255))) + floor(float(uint(cbSceneParam._m0[85u].x * _452) / _2255)));
        float _2276 = (log2(_2242 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2277 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        uint _2280 = uint(isnan(14.0) ? _2277 : (isnan(_2277) ? 14.0 : min(_2277, 14.0)));
        uvec4 _2285 = texelFetch(g_lightClusterGridBuffer, int(((_2280 << 2u) + (_2266 << 6u)) >> 2u));
        uint _2286 = _2285.x;
        uint _2287 = _2254.z;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        if (((((1u << ((_2287 >> 4u) & 15u)) + 4294967295u) & _2286) == 0u) || ((_2287 & 240u) == 0u))
        {
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
        }
        else
        {
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2402;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            uint _2541 = 0u;
            uint _2550;
            bool _2551;
            for (;;)
            {
                _2550 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2541 << 2u)) >> 2u)).x;
                _2551 = _2550 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2551)
                {
                    frontier_phi_63_pred = _2540;
                    frontier_phi_63_pred_1 = _2539;
                    frontier_phi_63_pred_2 = _2538;
                    frontier_phi_63_pred_3 = _2537;
                    frontier_phi_63_pred_4 = _2536;
                    frontier_phi_63_pred_5 = _2535;
                }
                else
                {
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    uint _2665;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2550;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    for (;;)
                    {
                        uint _2669 = uint(findLSB(_2665)) + (_2541 << 5u);
                        uint _2666 = (_2665 + 4294967295u) & _2665;
                        uint _2671 = _2669 * 48u;
                        vec4 _2685 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 3u)).x));
                        uint _2691 = (_2669 * 48u) + 4u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 3u)).x));
                        uint _2710 = (_2669 * 48u) + 8u;
                        vec3 _2721 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x));
                        float _2725 = _2685.x - _2240;
                        float _2726 = _2685.y - _2241;
                        float _2727 = _2685.z - _2242;
                        float _2728 = dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727));
                        float _2731 = inversesqrt(_2728);
                        float _2732 = _2731 * _2725;
                        float _2733 = _2731 * _2726;
                        float _2734 = _2731 * _2727;
                        float _2735 = dot(vec3(_474, _477, _480), vec3(_2732, _2733, _2734));
                        float _2740 = 1.0 - (_2728 * _2685.w);
                        float _4035 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                        float _2741 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2742 = sqrt(_2728) * _2704.w;
                        float _2745 = 1.39999997615814208984375 / (_2742 + 1.39999997615814208984375);
                        float _2746 = _2745 * _2745;
                        float _2749 = ((1.0 - _2746) * _2735) + _2746;
                        float _2752 = _2742 * _2742;
                        float _2756 = ((isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))) * _2741) / ((_2752 * 0.699999988079071044921875) + 1.0);
                        float _2760 = (-0.0) - _2240;
                        float _2761 = (-0.0) - _2241;
                        float _2762 = (-0.0) - _2242;
                        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
                        float _2767 = _2766 * _2760;
                        float _2768 = _2766 * _2761;
                        float _2769 = _2766 * _2762;
                        float _2777 = exp2(log2(1.0 / ((_2752 * 3.5) + 5.0)) * 0.25);
                        float _2778 = 1.0 - _550;
                        float _2785 = sqrt(1.0 - ((1.0 - (_2778 * _2778)) * (1.0 - (_2777 * _2777))));
                        float _2786 = _2785 * _2785;
                        float _2787 = _2786 * _2786;
                        float _2788 = _2767 + _2732;
                        float _2789 = _2768 + _2733;
                        float _2790 = _2769 + _2734;
                        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
                        float _2798 = dot(vec3(_474, _477, _480), vec3(_2767, _2768, _2769));
                        float _4051 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2801 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2802 = dot(vec3(_474, _477, _480), vec3(_2794 * _2788, _2794 * _2789, _2794 * _2790));
                        float _4062 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2805 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2809 = ((_2805 * _2805) * (_2787 + (-1.0))) + 1.0;
                        float _2810 = _2745 * _2786;
                        float _2811 = _2810 * _2810;
                        float _2814 = ((1.0 - _2811) * _2735) + _2811;
                        float _4073 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2816 = 1.0 - _2786;
                        float _2826 = (0.5 / (((_2815 * ((_2801 * _2816) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2815 * _2816) + _2786) * _2801))) * _2815;
                        float _4084 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2837 = (((_2787 * 3.1415927410125732421875) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) / ((_2809 * _2809) * ((_2752 * 2.1991131305694580078125) + 3.141590118408203125))) * _2741;
                        _2594 = (_2756 * _2704.x) + _2662;
                        _2595 = (_2756 * _2704.y) + _2663;
                        _2596 = (_2756 * _2704.z) + _2664;
                        _2591 = (_2837 * _2721.x) + _2659;
                        _2592 = (_2837 * _2721.y) + _2660;
                        _2593 = (_2837 * _2721.z) + _2661;
                        if (_2666 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2666;
                        }
                    }
                    frontier_phi_63_pred = _2596;
                    frontier_phi_63_pred_1 = _2595;
                    frontier_phi_63_pred_2 = _2594;
                    frontier_phi_63_pred_3 = _2593;
                    frontier_phi_63_pred_4 = _2592;
                    frontier_phi_63_pred_5 = _2591;
                }
                _2402 = frontier_phi_63_pred;
                _2400 = frontier_phi_63_pred_1;
                _2398 = frontier_phi_63_pred_2;
                _2396 = frontier_phi_63_pred_3;
                _2394 = frontier_phi_63_pred_4;
                _2392 = frontier_phi_63_pred_5;
                uint _2542 = _2541 + 1u;
                if (_2542 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2535 = _2392;
                    _2536 = _2394;
                    _2537 = _2396;
                    _2538 = _2398;
                    _2539 = _2400;
                    _2540 = _2402;
                    _2541 = _2542;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
        }
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.z;
        uint _2408 = (_2406 >> 8u) & 15u;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        if (((4294967295u << _2408) & _2286) == 0u)
        {
            _2503 = _2391;
            _2505 = _2393;
            _2507 = _2395;
            _2509 = _2397;
            _2511 = _2399;
            _2513 = _2401;
        }
        else
        {
            float _2528 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
            float _2529 = _2528 * _2240;
            float _2530 = _2528 * _2241;
            float _2531 = _2528 * _2242;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2408 < ((_2406 >> 12u) & 15u))
            {
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2642 = _2391;
                float _2643 = _2393;
                float _2644 = _2395;
                float _2645 = _2397;
                float _2646 = _2399;
                float _2647 = _2401;
                uint _2648 = _2408;
                uint _2657;
                bool _2658;
                for (;;)
                {
                    _2657 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2648 << 2u)) >> 2u)).x;
                    _2658 = _2657 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2658)
                    {
                        frontier_phi_69_pred = _2647;
                        frontier_phi_69_pred_1 = _2646;
                        frontier_phi_69_pred_2 = _2645;
                        frontier_phi_69_pred_3 = _2644;
                        frontier_phi_69_pred_4 = _2643;
                        frontier_phi_69_pred_5 = _2642;
                    }
                    else
                    {
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _2855 = _2642;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        float _2859 = _2646;
                        float _2860 = _2647;
                        uint _2861 = _2657;
                        uint _2862;
                        vec4 _2887;
                        float _2888;
                        vec4 _2903;
                        vec3 _2915;
                        vec4 _2931;
                        vec4 _2947;
                        float _2994;
                        bool _2995;
                        for (;;)
                        {
                            uint _2872 = ((_2648 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2861));
                            _2862 = (_2861 + 4294967295u) & _2861;
                            uint _2874 = _2872 * 40u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            _2888 = _2887.w;
                            uint _2890 = (_2872 * 40u) + 4u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2905 = (_2872 * 40u) + 8u;
                            _2915 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x));
                            uint _2918 = (_2872 * 40u) + 16u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2934 = (_2872 * 40u) + 20u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2950 = (_2872 * 40u) + 24u;
                            vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2969 = (_2872 * 40u) + 28u;
                            vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            _2994 = fma(_2242, _2982.z, fma(_2241, _2982.y, _2982.x * _2240)) + _2982.w;
                            _2995 = !((fma(_2242, _2963.z, fma(_2241, _2963.y, _2963.x * _2240)) + _2963.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2995)
                            {
                                float _3022 = _2887.x - _2240;
                                float _3023 = _2887.y - _2241;
                                float _3024 = _2887.z - _2242;
                                float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                                float _3028 = inversesqrt(_3025);
                                float _3029 = _3028 * _3022;
                                float _3030 = _3028 * _3023;
                                float _3031 = _3028 * _3024;
                                float _3035 = 1.0 - (_3025 / (_2888 * _2888));
                                float _4095 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3040 = sqrt(_3025) * _2903.w;
                                float _3042 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                                float _3043 = _3042 * _3042;
                                float _3046 = ((1.0 - _3043) * dot(vec3(_3029, _3030, _3031), vec3(_474, _477, _480))) + _3043;
                                float _3049 = _3040 * _3040;
                                float _3053 = (fma(_2242, _2931.z, fma(_2241, _2931.y, _2931.x * _2240)) + _2931.w) / _2994;
                                float _3054 = (fma(_2242, _2947.z, fma(_2241, _2947.y, _2947.x * _2240)) + _2947.w) / _2994;
                                float _3058 = 1.0 - dot(vec2(_3053, _3054), vec2(_3053, _3054));
                                float _4111 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3060 = _3059 * (((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3036) / ((_3049 * 0.699999988079071044921875) + 1.0));
                                float _3072 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                                float _3073 = 1.0 - _550;
                                float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                                float _3081 = _3080 * _3080;
                                float _3082 = _3081 * _3081;
                                float _3083 = _3029 - _2529;
                                float _3084 = _3030 - _2530;
                                float _3085 = _3031 - _2531;
                                float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                                float _3093 = dot(vec3(_474, _477, _480), vec3((-0.0) - _2529, (-0.0) - _2530, (-0.0) - _2531));
                                float _4122 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3096 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3097 = dot(vec3(_474, _477, _480), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                                float _4133 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3100 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                                float _3105 = _3042 * _3081;
                                float _3106 = _3105 * _3105;
                                float _3112 = ((1.0 - _3106) * dot(vec3(_474, _477, _480), vec3(_3029, _3030, _3031))) + _3106;
                                float _4144 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3114 = 1.0 - _3081;
                                float _3124 = (0.5 / (((_3113 * ((_3096 * _3114) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3113 * _3114) + _3081) * _3096))) * _3113;
                                float _4155 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3134 = (_3059 * _3036) * (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) / ((_3104 * _3104) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3060 * _2903.z;
                                frontier_phi_75_pred_1 = _3060 * _2903.y;
                                frontier_phi_75_pred_2 = _3060 * _2903.x;
                                frontier_phi_75_pred_3 = _3134 * _2915.z;
                                frontier_phi_75_pred_4 = _3134 * _2915.y;
                                frontier_phi_75_pred_5 = _3134 * _2915.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3143 = frontier_phi_75_pred;
                            _3142 = frontier_phi_75_pred_1;
                            _3141 = frontier_phi_75_pred_2;
                            _3140 = frontier_phi_75_pred_3;
                            _3139 = frontier_phi_75_pred_4;
                            _3138 = frontier_phi_75_pred_5;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            if (_2862 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2862;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2847;
                        frontier_phi_69_pred_1 = _2846;
                        frontier_phi_69_pred_2 = _2845;
                        frontier_phi_69_pred_3 = _2844;
                        frontier_phi_69_pred_4 = _2843;
                        frontier_phi_69_pred_5 = _2842;
                    }
                    _2514 = frontier_phi_69_pred;
                    _2512 = frontier_phi_69_pred_1;
                    _2510 = frontier_phi_69_pred_2;
                    _2508 = frontier_phi_69_pred_3;
                    _2506 = frontier_phi_69_pred_4;
                    _2504 = frontier_phi_69_pred_5;
                    uint _2649 = _2648 + 1u;
                    if (_2649 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2642 = _2504;
                        _2643 = _2506;
                        _2644 = _2508;
                        _2645 = _2510;
                        _2646 = _2512;
                        _2647 = _2514;
                        _2648 = _2649;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2514;
                frontier_phi_57_58_ladder_1 = _2512;
                frontier_phi_57_58_ladder_2 = _2510;
                frontier_phi_57_58_ladder_3 = _2508;
                frontier_phi_57_58_ladder_4 = _2506;
                frontier_phi_57_58_ladder_5 = _2504;
            }
            else
            {
                frontier_phi_57_58_ladder = _2401;
                frontier_phi_57_58_ladder_1 = _2399;
                frontier_phi_57_58_ladder_2 = _2397;
                frontier_phi_57_58_ladder_3 = _2395;
                frontier_phi_57_58_ladder_4 = _2393;
                frontier_phi_57_58_ladder_5 = _2391;
            }
            _2503 = frontier_phi_57_58_ladder_5;
            _2505 = frontier_phi_57_58_ladder_4;
            _2507 = frontier_phi_57_58_ladder_3;
            _2509 = frontier_phi_57_58_ladder_2;
            _2511 = frontier_phi_57_58_ladder_1;
            _2513 = frontier_phi_57_58_ladder;
        }
        float _2518 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2298 = (_2518 * _2509) + _1732;
        _2300 = (_2518 * _2511) + _1734;
        _2302 = (_2518 * _2513) + _1736;
        _2304 = ((_2503 * _519) * _2518) + _2080;
        _2306 = ((_2505 * _521) * _2518) + _2082;
        _2308 = ((_2507 * _522) * _2518) + _2084;
    }
    else
    {
        _2298 = _1732;
        _2300 = _1734;
        _2302 = _1736;
        _2304 = _2080;
        _2306 = _2082;
        _2308 = _2084;
    }
    float _4171 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4182 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4193 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4204 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _2326 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2298 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _534))) + ((_2304 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _2327 = ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2300 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _534))) + ((_2306 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _2328 = ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2302 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _534))) + ((_2308 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _2336 = cbInstanceData._m0[_493 + 6u].w * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)));
    float _2341 = _452 / cbSceneParam._m0[86u].x;
    float _2342 = _453 / cbSceneParam._m0[86u].y;
    vec4 _2356 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, (log2((isnan(cbSceneParam._m0[77u].w) ? _387 : (isnan(_387) ? cbSceneParam._m0[77u].w : min(_387, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2358 = _2356.x;
    float _2359 = _2356.y;
    float _2360 = _2356.z;
    float _2361 = _2356.w;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_387 > cbSceneParam._m0[78u].w)
    {
        float _2416 = isnan(_387) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _387 : min(cbSceneParam._m0[80u].w, _387));
        float _2417 = _2416 / _387;
        float _2428 = _2417 * _438;
        float _2429 = _439 * _2417;
        float _2430 = (-0.0) - _2429;
        float _2431 = _2417 * _440;
        float _2433 = (cbSceneParam._m0[77u].w * _2430) / _2416;
        float _2434 = _2433 + cbSceneParam._m0[79u].w;
        float _2435 = cbSceneParam._m0[79u].w - _2429;
        float _2441 = sqrt(((_2428 * _2428) + (_2429 * _2429)) + (_2431 * _2431));
        float _2444 = (1.0 - (cbSceneParam._m0[77u].w / _2416)) * _2441;
        float _2449 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2451 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2604;
        if (abs((_2430 - _2433) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2604 = ((((_2434 > 0.0) ? exp2(_2449 * _2434) : (2.0 - exp2(_2451 * _2434))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2444;
        }
        else
        {
            float _2564 = 1.0 / cbSceneParam._m0[80u].x;
            float _2565 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : max(_2434, _2435));
            float _2566 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : min(_2434, _2435));
            float _2575 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : min(_2565, 0.0));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            _2604 = ((abs(_2441 / _2430) * cbSceneParam._m0[80u].y) * ((((_2575 - _2576) * 2.0) - ((exp2(_2449 * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0)))) - exp2(_2449 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0))))) * _2564)) - ((exp2(_2451 * _2575) - exp2(_2451 * _2576)) * _2564))) + (_2444 * cbSceneParam._m0[80u].z);
        }
        vec4 _2606 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, 1.0), 0.0);
        float _2615 = exp2((_2604 * (-1.44269502162933349609375)) * (1.0 - _2606.w));
        float _2616 = log2(_2615);
        float _2632 = log2(_2361);
        _2453 = (exp2(_2632 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2616 * cbSceneParam._m0[78u].x)) * _2606.x) / cbSceneParam._m0[78u].x)) + _2358;
        _2455 = (exp2(_2632 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2616 * cbSceneParam._m0[78u].y)) * _2606.y) / cbSceneParam._m0[78u].y)) + _2359;
        _2457 = (exp2(_2632 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2616 * cbSceneParam._m0[78u].z)) * _2606.z) / cbSceneParam._m0[78u].z)) + _2360;
        _2459 = _2615 * _2361;
    }
    else
    {
        _2453 = _2358;
        _2455 = _2359;
        _2457 = _2360;
        _2459 = _2361;
    }
    float _2471 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2472 = _2471 == 3.0;
    float _2473 = log2(_2459);
    float _2480 = exp2(_2473 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)));
    float _2481 = exp2(_2473 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0)));
    float _2482 = exp2(_2473 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0)));
    float _2491 = (_2471 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2491 * (_2472 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2453)));
    SV_Target.y = _2491 * (_2472 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2455)));
    SV_Target.z = _2491 * (_2472 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2457)));
    SV_Target.w = _2336;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2336;
}


