#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _968;
float _3363;
float _3364;
float _3365;
float _3366;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    uint _240 = uint(int(floor(cbMtdParam._m0[10u].y)));
    uint _241 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _243 = float(int(_240 - _241 * (_240 / _241)));
    float _253 = (fract(TEXCOORD_1.x) + (_243 - cbMtdParam._m0[10u].w * trunc(_243 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _255 = (fract(TEXCOORD_1.y) + floor(_243 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _268 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _253) + cbTextureTilingScale._m0[0u].z, (_255 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _275 = _268.x * cbMtdParam._m0[9u].x;
    float _276 = _268.y * cbMtdParam._m0[9u].y;
    float _277 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _289 = _287.x;
    float _312 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _289)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _289))) - POSITION_1.w) / cbMtdParam._m0[10u].z;
    float _3375 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _315 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _268.w;
    float _316 = (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * _315;
    float _317 = gl_FragCoord.x * 0.125;
    float _319 = gl_FragCoord.y * 0.125;
    vec4 _321 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_317, _319));
    float _329 = float(_315 >= ((_321.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _344 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _253) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _347 = _344.x + cbMtdParam._m0[10u].x;
    vec4 _359 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _253) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _369 = (_359.y * 2.0) + (-1.0);
    float _370 = dot(vec2(_367, _369), vec2(_367, _369));
    float _3386 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))));
    float _378 = fma(_375, _218, fma(_369, _210 * TANGENT.x, (_196 * _188) * _367));
    float _381 = fma(_375, _219, fma(_369, _210 * TANGENT.y, (_196 * _189) * _367));
    float _384 = fma(_375, _220, fma(_369, _210 * TANGENT.z, (_196 * _190) * _367));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3397 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _392 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _393 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3430 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3441 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3452 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _397 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _462 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _464 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
    float _469 = _462 * _468;
    float _470 = _463 * _468;
    float _471 = _464 * _468;
    vec4 _472 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_317, _319));
    float _474 = _472.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _649 = sqrt(((_462 * _462) + (_463 * _463)) + (_464 * _464));
        float _655 = (cbMatDynParam._m0[5u].x * _649) + cbMatDynParam._m0[5u].y;
        float _3463 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _656 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _660 = (cbMatDynParam._m0[5u].z * _649) + cbMatDynParam._m0[5u].w;
        float _3474 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) - _656)) + _656) < ((_474 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _485 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _486 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _506 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _509 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _512 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _525 = uint(roundEven(NORMAL.w)) * 13u;
    uint _527 = _525 + 9u;
    uint _528 = _527 + uint(cbMatDynParam._m0[0u].w);
    float _534 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_528].x;
    float _535 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_528].y;
    float _536 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_528].z;
    float _3485 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _540 = 1.0 - _397;
    float _541 = _537 * _540;
    float _542 = _538 * _540;
    float _543 = _539 * _540;
    float _548 = (_537 + (-0.039999999105930328369140625)) * _397;
    float _549 = (_538 + (-0.039999999105930328369140625)) * _397;
    float _550 = (_539 + (-0.039999999105930328369140625)) * _397;
    float _551 = _548 + 0.039999999105930328369140625;
    float _553 = _549 + 0.039999999105930328369140625;
    float _554 = _550 + 0.039999999105930328369140625;
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _485, cbSceneParam._m0[86u].y * _486));
    float _566 = _563.x * TEXCOORD_1.w;
    float _567 = dot(vec3(_389, _390, _391), vec3(_469, _470, _471));
    float _570 = _567 * 2.0;
    float _574 = (_570 * _389) - _469;
    float _575 = (_570 * _390) - _470;
    float _576 = (_570 * _391) - _471;
    float _580 = abs(dot(vec3(_469, _470, _471), vec3(_389, _390, _391)));
    float _3518 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _582 = sqrt(_393);
    float _595 = exp2((_582 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_582 * 3.0));
    float _601 = (1.0 - _595) * ((_582 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _602 = _595 * _582;
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _967;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _692 = fma(_638, cbModelParam._m0[26u].z, fma(_634, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630));
        float _696 = fma(_638, cbModelParam._m0[27u].z, fma(_634, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630));
        float _700 = fma(_638, cbModelParam._m0[28u].z, fma(_634, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630));
        float _725 = _630 + _389;
        float _726 = _634 + _390;
        float _727 = _638 + _391;
        float _737 = fma(_727, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725)) - _692;
        float _738 = fma(_727, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725)) - _696;
        float _739 = fma(_727, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725)) - _700;
        float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
        float _756 = ((_743 * _737) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_692 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_743 * _738) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_696 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_743 * _739) / cbModelParam._m0[34u].z) + ((((((_700 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        float _795 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_761.x + (-0.5));
        float _797 = _795 * (_761.y + (-0.5));
        float _798 = _795 * (_761.z + (-0.5));
        float _805 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_768.x + (-0.5));
        float _807 = _805 * (_768.y + (-0.5));
        float _808 = _805 * (_768.z + (-0.5));
        float _815 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_775.x + (-0.5));
        float _817 = _815 * (_775.y + (-0.5));
        float _818 = _815 * (_775.z + (-0.5));
        float _825 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_782.x + (-0.5));
        float _827 = _825 * (_782.y + (-0.5));
        float _828 = _825 * (_782.z + (-0.5));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = _796 * 0.5;
        float _833 = _806 * 0.5;
        float _834 = _816 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _849 = (dot(vec3(_389, _390, _391), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _859 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3566 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_861 + 1.0))) + _866) * _829;
        float _876 = _797 * 0.5;
        float _877 = _807 * 0.5;
        float _878 = _817 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_389, _390, _391), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3599 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_903 + 1.0))) + _908) * _830;
        float _918 = _798 * 0.5;
        float _919 = _808 * 0.5;
        float _920 = _818 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_389, _390, _391), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3632 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_945 + 1.0))) + _950) * _831;
        _967 = _798;
        _969 = _797;
        _970 = _796;
        _971 = _808;
        _972 = _807;
        _973 = _806;
        _974 = _818;
        _975 = _817;
        _976 = _816;
        _977 = _831;
        _978 = _830;
        _979 = _829;
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
    }
    else
    {
        _967 = _968;
        _969 = _968;
        _970 = _968;
        _971 = _968;
        _972 = _968;
        _973 = _968;
        _974 = _968;
        _975 = _968;
        _976 = _968;
        _977 = _968;
        _978 = _968;
        _979 = _968;
        _980 = 0.0;
        _981 = 0.0;
        _982 = 0.0;
    }
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1011 = fma(_638, cbModelParam._m0[30u].z, fma(_634, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _630));
        float _1015 = fma(_638, cbModelParam._m0[31u].z, fma(_634, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _630));
        float _1019 = fma(_638, cbModelParam._m0[32u].z, fma(_634, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _630));
        float _1042 = _630 + _389;
        float _1043 = _634 + _390;
        float _1044 = _638 + _391;
        float _1054 = fma(_1044, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1011 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1015 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[35u].z) + ((((((_1019 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1110 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1077.x + (-0.5));
        float _1112 = _1110 * (_1077.y + (-0.5));
        float _1113 = _1110 * (_1077.z + (-0.5));
        float _1120 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1084.x + (-0.5));
        float _1122 = _1120 * (_1084.y + (-0.5));
        float _1123 = _1120 * (_1084.z + (-0.5));
        float _1130 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1091.x + (-0.5));
        float _1132 = _1130 * (_1091.y + (-0.5));
        float _1133 = _1130 * (_1091.z + (-0.5));
        float _1140 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1098.x + (-0.5));
        float _1142 = _1140 * (_1098.y + (-0.5));
        float _1143 = _1140 * (_1098.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_389, _390, _391), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3695 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1174 + 1.0))) + _1179) * _1144;
        float _1189 = _1112 * 0.5;
        float _1190 = _1122 * 0.5;
        float _1191 = _1132 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_389, _390, _391), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3728 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1216 + 1.0))) + _1221) * _1145;
        float _1231 = _1113 * 0.5;
        float _1232 = _1123 * 0.5;
        float _1233 = _1133 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_389, _390, _391), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3761 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1258 + 1.0))) + _1263) * _1146;
        _1280 = _1113;
        _1281 = _1112;
        _1282 = _1111;
        _1283 = _1123;
        _1284 = _1122;
        _1285 = _1121;
        _1286 = _1133;
        _1287 = _1132;
        _1288 = _1131;
        _1289 = _1146;
        _1290 = _1145;
        _1291 = _1144;
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _968;
        _1281 = _968;
        _1282 = _968;
        _1283 = _968;
        _1284 = _968;
        _1285 = _968;
        _1286 = _968;
        _1287 = _968;
        _1288 = _968;
        _1289 = _968;
        _1290 = _968;
        _1291 = _968;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _982)) + _982;
    float _1327 = fma(_1306, cbSceneParam._m0[89u].z, fma(_1305, cbSceneParam._m0[89u].y, _1304 * cbSceneParam._m0[89u].x));
    float _1330 = fma(_1306, cbSceneParam._m0[90u].z, fma(_1305, cbSceneParam._m0[90u].y, _1304 * cbSceneParam._m0[90u].x));
    float _1333 = fma(_1306, cbSceneParam._m0[91u].z, fma(_1305, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1304));
    float _1348 = _574 * 0.5;
    float _1349 = _575 * 0.5;
    float _1350 = _576 * 0.5;
    float _1351 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1354 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1357 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1391;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1364 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_967, _971, _974, _977));
        float _1368 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_969, _972, _975, _978));
        float _1372 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_970, _973, _976, _979));
        float _1379 = dot(vec4(cbModelParam._m0[39u]), vec4(_1348, _1349, _1350, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1402;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1393 = dot(vec4(cbModelParam._m0[40u]), vec4(_1348, _1349, _1350, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1406 = (_1402 * cbModelParam._m0[1u].x) + (_1391 * (1.0 - cbModelParam._m0[1u].x));
    float _1416 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1416 : min(cbModelParam._m0[25u].z, _1416));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1466 = fma(_638, cbModelParam._m0[13u].z, fma(_634, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630)) + cbModelParam._m0[13u].w;
        float _1470 = fma(_638, cbModelParam._m0[14u].z, fma(_634, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630)) + cbModelParam._m0[14u].w;
        float _1474 = fma(_638, cbModelParam._m0[15u].z, fma(_634, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630)) + cbModelParam._m0[15u].w;
        float _1477 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1480 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1483 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1511;
        if (_1477 > 0.0)
        {
            _1511 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1511 = frontier_phi_19_17_ladder;
        }
        float _1718;
        if (_1480 > 0.0)
        {
            _1718 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1718 = frontier_phi_28_24_ladder;
        }
        float _1972;
        if (_1483 > 0.0)
        {
            _1972 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1972 = frontier_phi_40_35_ladder;
        }
        float _1974 = isnan(_1718) ? _1511 : (isnan(_1511) ? _1718 : min(_1511, _1718));
        float _1975 = isnan(_1972) ? _1974 : (isnan(_1974) ? _1972 : min(_1974, _1972));
        float _1979 = (_1975 * _1477) + _1466;
        float _1980 = (_1975 * _1480) + _1470;
        float _1981 = (_1975 * _1483) + _1474;
        float _1982 = _1975 * 9.9999997473787516355514526367188e-05;
        float _1984 = (-1.0) - _1982;
        float _1986 = _1982 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1981 > _1986) || ((_1981 < _1984) || ((_1980 > _1986) || ((_1980 < _1984) || ((_1979 < _1984) || (_1979 > _1986))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2109 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1981, cbModelParam._m0[9u].z, fma(_1980, cbModelParam._m0[9u].y, _1979 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1981, cbModelParam._m0[10u].z, fma(_1980, cbModelParam._m0[10u].y, _1979 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1981, cbModelParam._m0[11u].z, fma(_1980, cbModelParam._m0[11u].y, _1979 * cbModelParam._m0[11u].x))), _1417);
            frontier_phi_18_40_ladder = _2109.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2109.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2109.x * cbModelParam._m0[1u].y;
        }
        _1499 = frontier_phi_18_40_ladder_2;
        _1501 = frontier_phi_18_40_ladder_1;
        _1503 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1417);
        _1499 = _1487.x * cbModelParam._m0[1u].y;
        _1501 = _1487.y * cbModelParam._m0[1u].y;
        _1503 = _1487.z * cbModelParam._m0[1u].y;
    }
    float _1507 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1507 : min(cbModelParam._m0[25u].w, _1507));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1565 = fma(_638, cbModelParam._m0[21u].z, fma(_634, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630)) + cbModelParam._m0[21u].w;
        float _1569 = fma(_638, cbModelParam._m0[22u].z, fma(_634, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630)) + cbModelParam._m0[22u].w;
        float _1573 = fma(_638, cbModelParam._m0[23u].z, fma(_634, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630)) + cbModelParam._m0[23u].w;
        float _1576 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1579 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1582 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1723;
        if (_1576 > 0.0)
        {
            _1723 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1723 = frontier_phi_30_26_ladder;
        }
        float _1999;
        if (_1579 > 0.0)
        {
            _1999 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1999 = frontier_phi_42_37_ladder;
        }
        float _2212;
        if (_1582 > 0.0)
        {
            _2212 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2212 = frontier_phi_51_48_ladder;
        }
        float _2214 = isnan(_1999) ? _1723 : (isnan(_1723) ? _1999 : min(_1723, _1999));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1576) + _1565;
        float _2220 = (_2215 * _1579) + _1569;
        float _2221 = (_2215 * _1582) + _1573;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2222;
        float _2225 = _2222 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2221 > _2225) || ((_2221 < _2223) || ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 < _2223) || (_2219 > _2225))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2221, cbModelParam._m0[17u].z, fma(_2220, cbModelParam._m0[17u].y, _2219 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2221, cbModelParam._m0[18u].z, fma(_2220, cbModelParam._m0[18u].y, _2219 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2221, cbModelParam._m0[19u].z, fma(_2220, cbModelParam._m0[19u].y, _2219 * cbModelParam._m0[19u].x))), _1508);
            frontier_phi_27_51_ladder = _2424.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2424.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2424.x * cbModelParam._m0[1u].z;
        }
        _1601 = frontier_phi_27_51_ladder_2;
        _1603 = frontier_phi_27_51_ladder_1;
        _1605 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1508);
        _1601 = _1585.x * cbModelParam._m0[1u].z;
        _1603 = _1585.y * cbModelParam._m0[1u].z;
        _1605 = _1585.z * cbModelParam._m0[1u].z;
    }
    float _1618 = (((_601 * _551) + _602) * _566) * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1620 = (((_601 * _553) + _602) * _566) * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1622 = (((_601 * _554) + _602) * _566) * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1625 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1618 * cbSceneParam._m0[91u].x));
    uvec4 _1641 = floatBitsToUint(cbInstanceData._m0[_525 + 5u]);
    uint _1643 = _1641.x * 14u;
    uint _1644 = _1643 + 13u;
    float _1651 = _566 + (-1.0);
    float _1656 = (cbLight._m0[_1644].x * _1651) + 1.0;
    float _1657 = (cbLight._m0[_1644].y * _1651) + 1.0;
    float _1658 = (cbLight._m0[_1644].z * _1651) + 1.0;
    float _1659 = (cbLight._m0[_1644].w * _1651) + 1.0;
    uint _1660 = _1643 + 5u;
    float _1666 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
    uint _1670 = _1643 + 4u;
    float _1677 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1681 = _1643 | 1u;
    float _1692 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_389, _390, _391));
    float _1695 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_389, _390, _391));
    float _3897 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _3908 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1700 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1702 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1709 = ((cbLight._m0[_1660].x * _1666) * _1702) + ((cbLight._m0[_1670].x * _1677) * _1700);
    float _1710 = ((_1666 * cbLight._m0[_1660].y) * _1702) + ((_1677 * cbLight._m0[_1670].y) * _1700);
    float _1711 = ((_1666 * cbLight._m0[_1660].z) * _1702) + ((_1677 * cbLight._m0[_1670].z) * _1700);
    uvec4 _1715 = floatBitsToUint(cbLight._m0[_1643 + 12u]);
    bool _1717 = _1715.x == 0u;
    float _1728;
    float _1730;
    float _1732;
    if (_1717)
    {
        _1728 = _1709;
        _1730 = _1710;
        _1732 = _1711;
    }
    else
    {
        uint _1736 = _1643 + 6u;
        float _1752 = (dot(vec3(cbLight._m0[_1643 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1753 = _1752 * _1752;
        float _3919 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1755 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1728 = (((cbLight._m0[_1736].x * 0.3183098733425140380859375) * _1754) * _1755) + _1709;
        _1730 = (((cbLight._m0[_1736].y * 0.3183098733425140380859375) * _1754) * _1755) + _1710;
        _1732 = (((cbLight._m0[_1736].z * 0.3183098733425140380859375) * _1754) * _1755) + _1711;
    }
    bool _1735 = _1715.y == 0u;
    float _1773;
    float _1775;
    float _1777;
    if (_1735)
    {
        _1773 = _1728;
        _1775 = _1730;
        _1777 = _1732;
    }
    else
    {
        uint _1943 = _1643 + 7u;
        float _1959 = (dot(vec3(cbLight._m0[_1643 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1960 = _1959 * _1959;
        float _3935 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1962 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1773 = (((cbLight._m0[_1943].x * 0.3183098733425140380859375) * _1961) * _1962) + _1728;
        _1775 = (((cbLight._m0[_1943].y * 0.3183098733425140380859375) * _1961) * _1962) + _1730;
        _1777 = (((cbLight._m0[_1943].z * 0.3183098733425140380859375) * _1961) * _1962) + _1732;
    }
    uint _1780 = _1643 + 8u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _393) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1643].x + _469;
    float _1796 = cbLight._m0[_1643].y + _470;
    float _1797 = cbLight._m0[_1643].z + _471;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1643].xyz));
    float _3951 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _1809 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1810 = dot(vec3(_389, _390, _391), vec3(_1802, _1803, _1804));
    float _3973 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1802, _1803, _1804));
    float _3984 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1794 * _1794;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1831 = 0.959999978542327880859375 - _548;
    float _1833 = 0.959999978542327880859375 - _549;
    float _1834 = 0.959999978542327880859375 - _550;
    float _1841 = 1.0 - _1794;
    float _1852 = (0.5 / (((_1809 * ((_1808 * _1841) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1841) + _1794) * _1808))) * _1808;
    float _3995 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    uint _1865 = _1643 + 9u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1681].w)) * _393) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1681].x + _469;
    float _1879 = cbLight._m0[_1681].y + _470;
    float _1880 = cbLight._m0[_1681].z + _471;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1681].xyz));
    float _4006 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1892 = dot(vec3(_389, _390, _391), vec3(_1885, _1886, _1887));
    float _4017 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_1885, _1886, _1887));
    float _4028 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1877 * _1877;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1911 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
    float _1918 = 1.0 - _1877;
    float _1928 = (0.5 / (((_1809 * ((_1891 * _1918) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1918) + _1877) * _1891))) * _1891;
    float _4039 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1930 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    float _1940 = (((((_1911 * _1831) + _551) * cbLight._m0[_1865].x) * _1930) * _1666) + (((((_1830 * _1831) + _551) * cbLight._m0[_1780].x) * _1854) * _1677);
    float _1941 = (((((_1911 * _1833) + _553) * cbLight._m0[_1865].y) * _1930) * _1666) + (((((_1830 * _1833) + _553) * cbLight._m0[_1780].y) * _1854) * _1677);
    float _1942 = (((((_1911 * _1834) + _554) * cbLight._m0[_1865].z) * _1930) * _1666) + (((((_1830 * _1834) + _554) * cbLight._m0[_1780].z) * _1854) * _1677);
    float _2004;
    float _2006;
    float _2008;
    if (_1717)
    {
        _2004 = _1940;
        _2006 = _1941;
        _2008 = _1942;
    }
    else
    {
        uint _2010 = _1643 + 2u;
        uint _2014 = _1643 + 10u;
        float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _393) * 0.949999988079071044921875);
        float _2029 = _2028 * _2028;
        float _2030 = cbLight._m0[_2010].x + _469;
        float _2031 = cbLight._m0[_2010].y + _470;
        float _2032 = cbLight._m0[_2010].z + _471;
        float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
        float _2037 = _2036 * _2030;
        float _2038 = _2036 * _2031;
        float _2039 = _2036 * _2032;
        float _2040 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2010].xyz));
        float _4050 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2044 = dot(vec3(_389, _390, _391), vec3(_2037, _2038, _2039));
        float _4061 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2048 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2037, _2038, _2039));
        float _4072 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2052 = _2029 * _2029;
        float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
        float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0);
        float _2070 = 1.0 - _2029;
        float _2080 = (0.5 / (((_1809 * ((_2043 * _2070) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _2070) + _2029) * _2043))) * _2043;
        float _4083 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2082 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
        float _2083 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2004 = (((((_2063 * _1831) + _551) * cbLight._m0[_2014].x) * _2082) * _2083) + _1940;
        _2006 = (((((_2063 * _1833) + _553) * cbLight._m0[_2014].y) * _2082) * _2083) + _1941;
        _2008 = (((((_2063 * _1834) + _554) * cbLight._m0[_2014].z) * _2082) * _2083) + _1942;
    }
    float _2118;
    float _2120;
    float _2122;
    if (_1735)
    {
        _2118 = _2004;
        _2120 = _2006;
        _2122 = _2008;
    }
    else
    {
        uint _2129 = _1643 + 3u;
        uint _2133 = _1643 + 11u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _393) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _469;
        float _2150 = cbLight._m0[_2129].y + _470;
        float _2151 = cbLight._m0[_2129].z + _471;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2129].xyz));
        float _4099 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2163 = dot(vec3(_389, _390, _391), vec3(_2156, _2157, _2158));
        float _4110 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4121 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2189 = 1.0 - _2148;
        float _2199 = (0.5 / (((_1809 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _2189) + _2148) * _2162))) * _2162;
        float _4132 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _2118 = (((((_2182 * _1831) + _551) * cbLight._m0[_2133].x) * _2201) * _2202) + _2004;
        _2120 = (((((_2182 * _1833) + _553) * cbLight._m0[_2133].y) * _2201) * _2202) + _2006;
        _2122 = (((((_2182 * _1834) + _554) * cbLight._m0[_2133].z) * _2201) * _2202) + _2008;
    }
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    if (_1641.y == 0u)
    {
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2277;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2277;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2277;
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.x;
        uint _2304 = uint((float(_2292.y) * floor(float(uint(cbSceneParam._m0[85u].y * _486) / _2293))) + floor(float(uint(cbSceneParam._m0[85u].x * _485) / _2293)));
        float _2314 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2315 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        uint _2318 = uint(isnan(14.0) ? _2315 : (isnan(_2315) ? 14.0 : min(_2315, 14.0)));
        uvec4 _2323 = texelFetch(g_lightClusterGridBuffer, int(((_2318 << 2u) + (_2304 << 6u)) >> 2u));
        uint _2324 = _2323.x;
        uint _2325 = _2292.z;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((((1u << ((_2325 >> 4u) & 15u)) + 4294967295u) & _2324) == 0u) || ((_2325 & 240u) == 0u))
        {
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
        }
        else
        {
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            uint _2587 = 0u;
            uint _2596;
            bool _2597;
            for (;;)
            {
                _2596 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                _2597 = _2596 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2597)
                {
                    frontier_phi_68_pred = _2583;
                    frontier_phi_68_pred_1 = _2586;
                    frontier_phi_68_pred_2 = _2585;
                    frontier_phi_68_pred_3 = _2584;
                    frontier_phi_68_pred_4 = _2582;
                    frontier_phi_68_pred_5 = _2581;
                }
                else
                {
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    uint _2732;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2596;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    for (;;)
                    {
                        uint _2736 = uint(findLSB(_2732)) + (_2587 << 5u);
                        uint _2733 = (_2732 + 4294967295u) & _2732;
                        uint _2738 = _2736 * 48u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2758 = (_2736 * 48u) + 4u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2777 = (_2736 * 48u) + 8u;
                        vec3 _2788 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x));
                        float _2792 = _2752.x - _2278;
                        float _2793 = _2752.y - _2279;
                        float _2794 = _2752.z - _2280;
                        float _2795 = dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794));
                        float _2798 = inversesqrt(_2795);
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2802 = dot(vec3(_506, _509, _512), vec3(_2799, _2800, _2801));
                        float _2807 = 1.0 - (_2795 * _2752.w);
                        float _4158 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2809 = sqrt(_2795) * _2771.w;
                        float _2812 = 1.39999997615814208984375 / (_2809 + 1.39999997615814208984375);
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2802) + _2813;
                        float _2819 = _2809 * _2809;
                        float _2823 = ((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2808) / ((_2819 * 0.699999988079071044921875) + 1.0);
                        float _2827 = (-0.0) - _2278;
                        float _2828 = (-0.0) - _2279;
                        float _2829 = (-0.0) - _2280;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2844 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2845 = 1.0 - _582;
                        float _2852 = sqrt(1.0 - ((1.0 - (_2845 * _2845)) * (1.0 - (_2844 * _2844))));
                        float _2853 = _2852 * _2852;
                        float _2854 = _2853 * _2853;
                        float _2855 = _2834 + _2799;
                        float _2856 = _2835 + _2800;
                        float _2857 = _2836 + _2801;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2865 = dot(vec3(_506, _509, _512), vec3(_2834, _2835, _2836));
                        float _4174 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2869 = dot(vec3(_506, _509, _512), vec3(_2861 * _2855, _2861 * _2856, _2861 * _2857));
                        float _4185 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2876 = ((_2872 * _2872) * (_2854 + (-1.0))) + 1.0;
                        float _2877 = _2812 * _2853;
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2802) + _2878;
                        float _4196 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2883 = 1.0 - _2853;
                        float _2893 = (0.5 / (((_2882 * ((_2868 * _2883) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2882 * _2883) + _2853) * _2868))) * _2882;
                        float _4207 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2904 = (((_2854 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2876 * _2876) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2808;
                        _2656 = (_2823 * _2771.x) + _2729;
                        _2657 = (_2823 * _2771.y) + _2730;
                        _2658 = (_2823 * _2771.z) + _2731;
                        _2653 = (_2904 * _2788.x) + _2726;
                        _2654 = (_2904 * _2788.y) + _2727;
                        _2655 = (_2904 * _2788.z) + _2728;
                        if (_2733 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2733;
                        }
                    }
                    frontier_phi_68_pred = _2655;
                    frontier_phi_68_pred_1 = _2658;
                    frontier_phi_68_pred_2 = _2657;
                    frontier_phi_68_pred_3 = _2656;
                    frontier_phi_68_pred_4 = _2654;
                    frontier_phi_68_pred_5 = _2653;
                }
                _2434 = frontier_phi_68_pred;
                _2440 = frontier_phi_68_pred_1;
                _2438 = frontier_phi_68_pred_2;
                _2436 = frontier_phi_68_pred_3;
                _2432 = frontier_phi_68_pred_4;
                _2430 = frontier_phi_68_pred_5;
                uint _2588 = _2587 + 1u;
                if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2581 = _2430;
                    _2582 = _2432;
                    _2583 = _2434;
                    _2584 = _2436;
                    _2585 = _2438;
                    _2586 = _2440;
                    _2587 = _2588;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
        }
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.z;
        uint _2446 = (_2444 >> 8u) & 15u;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((4294967295u << _2446) & _2324) == 0u)
        {
            _2549 = _2429;
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
        }
        else
        {
            float _2574 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
            float _2575 = _2574 * _2278;
            float _2576 = _2574 * _2279;
            float _2577 = _2574 * _2280;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2446 < ((_2444 >> 12u) & 15u))
            {
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2709 = _2429;
                float _2710 = _2431;
                float _2711 = _2433;
                float _2712 = _2435;
                float _2713 = _2437;
                float _2714 = _2439;
                uint _2715 = _2446;
                uint _2724;
                bool _2725;
                for (;;)
                {
                    _2724 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                    _2725 = _2724 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2725)
                    {
                        frontier_phi_79_pred = _2714;
                        frontier_phi_79_pred_1 = _2713;
                        frontier_phi_79_pred_2 = _2712;
                        frontier_phi_79_pred_3 = _2711;
                        frontier_phi_79_pred_4 = _2710;
                        frontier_phi_79_pred_5 = _2709;
                    }
                    else
                    {
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        uint _2937 = _2724;
                        uint _2938;
                        vec4 _2963;
                        float _2964;
                        vec4 _2979;
                        vec3 _2991;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2948 = ((_2715 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2937));
                            _2938 = (_2937 + 4294967295u) & _2937;
                            uint _2950 = _2948 * 40u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            _2964 = _2963.w;
                            uint _2966 = (_2948 * 40u) + 4u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2981 = (_2948 * 40u) + 8u;
                            _2991 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x));
                            uint _2994 = (_2948 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2948 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2948 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2948 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2280, _3058.z, fma(_2279, _3058.y, _3058.x * _2278)) + _3058.w;
                            _3071 = !((fma(_2280, _3039.z, fma(_2279, _3039.y, _3039.x * _2278)) + _3039.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2963.x - _2278;
                                float _3099 = _2963.y - _2279;
                                float _3100 = _2963.z - _2280;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2964 * _2964));
                                float _4218 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3116 = sqrt(_3101) * _2979.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3122 = ((1.0 - _3119) * dot(vec3(_3105, _3106, _3107), vec3(_506, _509, _512))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_2280, _3007.z, fma(_2279, _3007.y, _3007.x * _2278)) + _3007.w) / _3070;
                                float _3130 = (fma(_2280, _3023.z, fma(_2279, _3023.y, _3023.x * _2278)) + _3023.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4234 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3148 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _582;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3105 - _2575;
                                float _3160 = _3106 - _2576;
                                float _3161 = _3107 - _2577;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_506, _509, _512), vec3((-0.0) - _2575, (-0.0) - _2576, (-0.0) - _2577));
                                float _4245 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3173 = dot(vec3(_506, _509, _512), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4256 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3118 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_506, _509, _512), vec3(_3105, _3106, _3107))) + _3182;
                                float _4267 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4278 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3135 * _3112) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3180 * _3180) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3136 * _2979.z;
                                frontier_phi_85_pred_1 = _3136 * _2979.y;
                                frontier_phi_85_pred_2 = _3136 * _2979.x;
                                frontier_phi_85_pred_3 = _3210 * _2991.z;
                                frontier_phi_85_pred_4 = _3210 * _2991.y;
                                frontier_phi_85_pred_5 = _3210 * _2991.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3219 = frontier_phi_85_pred;
                            _3218 = frontier_phi_85_pred_1;
                            _3217 = frontier_phi_85_pred_2;
                            _3216 = frontier_phi_85_pred_3;
                            _3215 = frontier_phi_85_pred_4;
                            _3214 = frontier_phi_85_pred_5;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            if (_2938 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2938;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2923;
                        frontier_phi_79_pred_1 = _2922;
                        frontier_phi_79_pred_2 = _2921;
                        frontier_phi_79_pred_3 = _2920;
                        frontier_phi_79_pred_4 = _2919;
                        frontier_phi_79_pred_5 = _2918;
                    }
                    _2560 = frontier_phi_79_pred;
                    _2558 = frontier_phi_79_pred_1;
                    _2556 = frontier_phi_79_pred_2;
                    _2554 = frontier_phi_79_pred_3;
                    _2552 = frontier_phi_79_pred_4;
                    _2550 = frontier_phi_79_pred_5;
                    uint _2716 = _2715 + 1u;
                    if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2709 = _2550;
                        _2710 = _2552;
                        _2711 = _2554;
                        _2712 = _2556;
                        _2713 = _2558;
                        _2714 = _2560;
                        _2715 = _2716;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2556;
                frontier_phi_60_61_ladder_1 = _2560;
                frontier_phi_60_61_ladder_2 = _2558;
                frontier_phi_60_61_ladder_3 = _2554;
                frontier_phi_60_61_ladder_4 = _2552;
                frontier_phi_60_61_ladder_5 = _2550;
            }
            else
            {
                frontier_phi_60_61_ladder = _2435;
                frontier_phi_60_61_ladder_1 = _2439;
                frontier_phi_60_61_ladder_2 = _2437;
                frontier_phi_60_61_ladder_3 = _2433;
                frontier_phi_60_61_ladder_4 = _2431;
                frontier_phi_60_61_ladder_5 = _2429;
            }
            _2549 = frontier_phi_60_61_ladder_5;
            _2551 = frontier_phi_60_61_ladder_4;
            _2553 = frontier_phi_60_61_ladder_3;
            _2555 = frontier_phi_60_61_ladder;
            _2557 = frontier_phi_60_61_ladder_2;
            _2559 = frontier_phi_60_61_ladder_1;
        }
        float _2564 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _2336 = (_2564 * _2555) + _1773;
        _2338 = (_2564 * _2557) + _1775;
        _2340 = (_2564 * _2559) + _1777;
        _2342 = ((_2549 * _551) * _2564) + _2118;
        _2344 = ((_2551 * _553) * _2564) + _2120;
        _2346 = ((_2553 * _554) * _2564) + _2122;
    }
    else
    {
        _2336 = _1773;
        _2338 = _1775;
        _2340 = _1777;
        _2342 = _2118;
        _2344 = _2120;
        _2346 = _2122;
    }
    float _4294 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4305 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4316 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4327 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _2364 = ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2336 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _566))) + ((_2342 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1406)) * cbPerFrame._m0[3u].x);
    float _2365 = ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2338 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _566))) + ((_2344 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1406)) * cbPerFrame._m0[3u].x);
    float _2366 = ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2340 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _566))) + ((_2346 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1406)) * cbPerFrame._m0[3u].x);
    float _2367 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2374 = cbInstanceData._m0[_525 + 6u].w * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)));
    float _2379 = _485 / cbSceneParam._m0[86u].x;
    float _2380 = _486 / cbSceneParam._m0[86u].y;
    vec4 _2394 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2396 = _2394.x;
    float _2397 = _2394.y;
    float _2398 = _2394.z;
    float _2399 = _2394.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2454 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2455 = _2454 / _411;
        float _2466 = _2455 * _462;
        float _2467 = _463 * _2455;
        float _2468 = (-0.0) - _2467;
        float _2469 = _2455 * _464;
        float _2471 = (cbSceneParam._m0[77u].w * _2468) / _2454;
        float _2472 = _2471 + cbSceneParam._m0[79u].w;
        float _2473 = cbSceneParam._m0[79u].w - _2467;
        float _2479 = sqrt(((_2466 * _2466) + (_2467 * _2467)) + (_2469 * _2469));
        float _2482 = (1.0 - (cbSceneParam._m0[77u].w / _2454)) * _2479;
        float _2487 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2666;
        if (abs((_2468 - _2471) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2666 = ((((_2472 > 0.0) ? exp2(_2487 * _2472) : (2.0 - exp2(_2489 * _2472))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2482;
        }
        else
        {
            float _2610 = 1.0 / cbSceneParam._m0[80u].x;
            float _2611 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : max(_2472, _2473));
            float _2612 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : min(_2472, _2473));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            _2666 = ((abs(_2479 / _2468) * cbSceneParam._m0[80u].y) * ((((_2621 - _2622) * 2.0) - ((exp2(_2487 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)))) - exp2(_2487 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))))) * _2610)) - ((exp2(_2489 * _2621) - exp2(_2489 * _2622)) * _2610))) + (_2482 * cbSceneParam._m0[80u].z);
        }
        vec4 _2668 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, 1.0), 0.0);
        float _2677 = exp2((_2666 * (-1.44269502162933349609375)) * (1.0 - _2668.w));
        float _2678 = log2(_2677);
        float _2694 = log2(_2399);
        _2491 = (exp2(_2694 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].x)) * _2668.x) / cbSceneParam._m0[78u].x)) + _2396;
        _2493 = (exp2(_2694 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].y)) * _2668.y) / cbSceneParam._m0[78u].y)) + _2397;
        _2495 = (exp2(_2694 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].z)) * _2668.z) / cbSceneParam._m0[78u].z)) + _2398;
        _2497 = _2677 * _2399;
    }
    else
    {
        _2491 = _2396;
        _2493 = _2397;
        _2495 = _2398;
        _2497 = _2399;
    }
    bool _2704;
    vec4 _2507;
    vec4 _2529;
    float _2531;
    float _2535;
    float _2536;
    float _2537;
    float _2538;
    bool _2548;
    for (;;)
    {
        _2507 = cbMatDynParam._m0[0u];
        float _2509 = roundEven(_2507.y);
        bool _2510 = _2509 == 3.0;
        float _2511 = log2(_2497);
        float _2518 = exp2(_2511 * cbSceneParam._m0[78u].x) * _2367;
        float _2519 = exp2(_2511 * cbSceneParam._m0[78u].y) * _2368;
        float _2520 = exp2(_2511 * cbSceneParam._m0[78u].z) * _2369;
        float _2527 = _474 + (-0.5);
        _2529 = cbMtdParam._m0[1u];
        _2531 = _2529.y * _2527;
        float _2534 = (_2509 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2535 = _2534 * (_2510 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
        _2536 = _2534 * (_2510 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
        _2537 = _2534 * (_2510 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2495)));
        _2538 = _2527 * 0.999000012874603271484375;
        _2548 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2548)
        {
            if ((cbInstanceData._m0[_525 + 7u].x + _2538) < 0.5)
            {
                _2704 = true;
                break;
            }
        }
        uint _2645 = _527 + uint(_2507.w);
        if ((cbInstanceData._m0[_2645].w < 1.0) && ((cbInstanceData._m0[_2645].w + _2538) < 0.5))
        {
            _2704 = true;
            break;
        }
        if ((_2531 + _329) < _2529.x)
        {
            _2704 = true;
            break;
        }
        _2704 = false;
        break;
    }
    float _2909;
    if (_2704)
    {
        discard_state = true;
        _2909 = 0.0;
    }
    else
    {
        _2909 = _2374;
    }
    SV_Target.x = _2535;
    SV_Target.y = _2536;
    SV_Target.z = _2537;
    SV_Target.w = _2909;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2374;
    discard_exit();
}


