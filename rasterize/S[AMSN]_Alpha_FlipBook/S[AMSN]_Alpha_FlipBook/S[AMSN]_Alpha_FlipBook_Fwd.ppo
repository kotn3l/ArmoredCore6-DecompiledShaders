#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _907;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    uint _236 = uint(int(floor(cbMtdParam._m0[10u].y)));
    uint _237 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _239 = float(int(_236 - _237 * (_236 / _237)));
    float _249 = (fract(TEXCOORD_1.x) + (_239 - cbMtdParam._m0[10u].w * trunc(_239 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _251 = (fract(TEXCOORD_1.y) + floor(_239 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _264 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _249) + cbTextureTilingScale._m0[0u].z, (_251 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _271 = _264.x * cbMtdParam._m0[9u].x;
    float _272 = _264.y * cbMtdParam._m0[9u].y;
    float _273 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _285 = _283.x;
    bool _292 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _308 = ((_292 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _285)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _285))) - POSITION_1.w) / cbMtdParam._m0[10u].z;
    float _3248 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _312 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _264.w) * (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0)));
    vec4 _327 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _249) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _251) + cbTextureTilingScale._m0[2u].w));
    float _330 = _327.x + cbMtdParam._m0[10u].x;
    vec4 _342 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _249) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _251) + cbTextureTilingScale._m0[1u].w));
    float _346 = _342.z;
    float _350 = (_342.x * 2.0) + (-1.0);
    float _352 = (_342.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_350, _352), vec2(_350, _352));
    float _3259 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _358 = sqrt(1.0 - (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))));
    float _361 = fma(_358, _214, fma(_352, _206 * TANGENT.x, (_192 * _184) * _350));
    float _364 = fma(_358, _215, fma(_352, _206 * TANGENT.y, (_192 * _185) * _350));
    float _367 = fma(_358, _216, fma(_352, _206 * TANGENT.z, (_192 * _186) * _350));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3270 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _375 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _376 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _3292 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3303 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3314 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3325 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _380 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _385 = _292 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _436 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _426);
    float _437 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _426);
    float _438 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _426);
    float _442 = inversesqrt(dot(vec3(_436, _437, _438), vec3(_436, _437, _438)));
    float _443 = _436 * _442;
    float _444 = _437 * _442;
    float _445 = _438 * _442;
    float _450 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _451 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _472 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _475 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _478 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    uint _491 = uint(roundEven(NORMAL.w)) * 13u;
    uint _494 = (_491 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _500 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)))) * cbInstanceData._m0[_494].x;
    float _501 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_494].y;
    float _502 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_494].z;
    float _3336 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _506 = 1.0 - _380;
    float _507 = _503 * _506;
    float _508 = _504 * _506;
    float _509 = _505 * _506;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _380;
    float _515 = (_504 + (-0.039999999105930328369140625)) * _380;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _380;
    float _517 = _514 + 0.039999999105930328369140625;
    float _519 = _515 + 0.039999999105930328369140625;
    float _520 = _516 + 0.039999999105930328369140625;
    vec4 _529 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _450, cbSceneParam._m0[86u].y * _451));
    float _532 = _529.x * TEXCOORD_1.w;
    float _533 = dot(vec3(_372, _373, _374), vec3(_443, _444, _445));
    float _536 = _533 * 2.0;
    float _540 = (_536 * _372) - _443;
    float _541 = (_536 * _373) - _444;
    float _542 = (_536 * _374) - _445;
    float _546 = abs(dot(vec3(_443, _444, _445), vec3(_372, _373, _374)));
    float _3369 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _548 = sqrt(_376);
    float _561 = exp2((_548 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_548 * 3.0));
    float _567 = (1.0 - _561) * ((_548 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _568 = _561 * _548;
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _906;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_604, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596));
        float _635 = fma(_604, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596));
        float _639 = fma(_604, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596));
        float _664 = _596 + _372;
        float _665 = _600 + _373;
        float _666 = _604 + _374;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _631;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _635;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _639;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_700.x + (-0.5));
        float _736 = _734 * (_700.y + (-0.5));
        float _737 = _734 * (_700.z + (-0.5));
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_707.x + (-0.5));
        float _746 = _744 * (_707.y + (-0.5));
        float _747 = _744 * (_707.z + (-0.5));
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_714.x + (-0.5));
        float _756 = _754 * (_714.y + (-0.5));
        float _757 = _754 * (_714.z + (-0.5));
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = _735 * 0.5;
        float _772 = _745 * 0.5;
        float _773 = _755 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _788 = (dot(vec3(_372, _373, _374), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3395 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _798 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3406 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3417 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * (_800 + 1.0))) + _805) * _768;
        float _815 = _736 * 0.5;
        float _816 = _746 * 0.5;
        float _817 = _756 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_372, _373, _374), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3428 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3439 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3450 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * (_842 + 1.0))) + _847) * _769;
        float _857 = _737 * 0.5;
        float _858 = _747 * 0.5;
        float _859 = _757 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_372, _373, _374), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3483 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_884 + 1.0))) + _889) * _770;
        _906 = _737;
        _908 = _736;
        _909 = _735;
        _910 = _747;
        _911 = _746;
        _912 = _745;
        _913 = _757;
        _914 = _756;
        _915 = _755;
        _916 = _770;
        _917 = _769;
        _918 = _768;
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
    }
    else
    {
        _906 = _907;
        _908 = _907;
        _909 = _907;
        _910 = _907;
        _911 = _907;
        _912 = _907;
        _913 = _907;
        _914 = _907;
        _915 = _907;
        _916 = _907;
        _917 = _907;
        _918 = _907;
        _919 = 0.0;
        _920 = 0.0;
        _921 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_604, cbModelParam._m0[30u].z, fma(_600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _596));
        float _951 = fma(_604, cbModelParam._m0[31u].z, fma(_600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _596));
        float _955 = fma(_604, cbModelParam._m0[32u].z, fma(_600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _596));
        float _978 = _596 + _372;
        float _979 = _600 + _373;
        float _980 = _604 + _374;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_372, _373, _374), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3546 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_372, _373, _374), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3579 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_372, _373, _374), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3612 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _907;
        _1217 = _907;
        _1218 = _907;
        _1219 = _907;
        _1220 = _907;
        _1221 = _907;
        _1222 = _907;
        _1223 = _907;
        _1224 = _907;
        _1225 = _907;
        _1226 = _907;
        _1227 = _907;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _919)) + _919;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _920)) + _920;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _540 * 0.5;
    float _1285 = _541 * 0.5;
    float _1286 = _542 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _910, _913, _916));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_908, _911, _914, _917));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_909, _912, _915, _918));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _376);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_604, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_604, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_604, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_542, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540));
        float _1416 = fma(_542, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540));
        float _1419 = fma(_542, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1447 = frontier_phi_16_14_ladder;
        }
        float _1654;
        if (_1416 > 0.0)
        {
            _1654 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1654 = frontier_phi_25_21_ladder;
        }
        float _1908;
        if (_1419 > 0.0)
        {
            _1908 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1908 = frontier_phi_37_32_ladder;
        }
        float _1910 = isnan(_1654) ? _1447 : (isnan(_1447) ? _1654 : min(_1447, _1654));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1413) + _1402;
        float _1916 = (_1911 * _1416) + _1406;
        float _1917 = (_1911 * _1419) + _1410;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_15_37_ladder = _2045.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2045.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2045.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_15_37_ladder_2;
        _1437 = frontier_phi_15_37_ladder_1;
        _1439 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_540, _541, _542), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _376);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_604, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_604, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_604, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_542, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540));
        float _1515 = fma(_542, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540));
        float _1518 = fma(_542, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540));
        float _1659;
        if (_1512 > 0.0)
        {
            _1659 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1659 = frontier_phi_27_23_ladder;
        }
        float _1935;
        if (_1515 > 0.0)
        {
            _1935 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1935 = frontier_phi_39_34_ladder;
        }
        float _2148;
        if (_1518 > 0.0)
        {
            _2148 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2148 = frontier_phi_48_45_ladder;
        }
        float _2150 = isnan(_1935) ? _1659 : (isnan(_1659) ? _1935 : min(_1659, _1935));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1512) + _1501;
        float _2156 = (_2151 * _1515) + _1505;
        float _2157 = (_2151 * _1518) + _1509;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2158;
        float _2161 = _2158 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2157 > _2161) || ((_2157 < _2159) || ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 < _2159) || (_2155 > _2161))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2157, cbModelParam._m0[17u].z, fma(_2156, cbModelParam._m0[17u].y, _2155 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2157, cbModelParam._m0[18u].z, fma(_2156, cbModelParam._m0[18u].y, _2155 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2157, cbModelParam._m0[19u].z, fma(_2156, cbModelParam._m0[19u].y, _2155 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_24_48_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_24_48_ladder_2;
        _1539 = frontier_phi_24_48_ladder_1;
        _1541 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_540, _541, _542), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_567 * _517) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_567 * _519) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_567 * _520) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_491 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _532 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1613 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1617 = _1579 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_372, _373, _374));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_372, _373, _374));
    float _3748 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3759 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1596].x * _1602) * _1638) + ((cbLight._m0[_1606].x * _1613) * _1636);
    float _1646 = ((_1602 * cbLight._m0[_1596].y) * _1638) + ((_1613 * cbLight._m0[_1606].y) * _1636);
    float _1647 = ((_1602 * cbLight._m0[_1596].z) * _1638) + ((_1613 * cbLight._m0[_1606].z) * _1636);
    uvec4 _1651 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1653 = _1651.x == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1653)
    {
        _1664 = _1645;
        _1666 = _1646;
        _1668 = _1647;
    }
    else
    {
        uint _1672 = _1579 + 6u;
        float _1688 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1689 = _1688 * _1688;
        float _3770 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1691 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1664 = (((cbLight._m0[_1672].x * 0.3183098733425140380859375) * _1690) * _1691) + _1645;
        _1666 = (((cbLight._m0[_1672].y * 0.3183098733425140380859375) * _1690) * _1691) + _1646;
        _1668 = (((cbLight._m0[_1672].z * 0.3183098733425140380859375) * _1690) * _1691) + _1647;
    }
    bool _1671 = _1651.y == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1671)
    {
        _1709 = _1664;
        _1711 = _1666;
        _1713 = _1668;
    }
    else
    {
        uint _1879 = _1579 + 7u;
        float _1895 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3786 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1898 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1709 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1664;
        _1711 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1666;
        _1713 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1668;
    }
    uint _1716 = _1579 + 8u;
    float _1729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _376) * 0.949999988079071044921875);
    float _1730 = _1729 * _1729;
    float _1731 = cbLight._m0[_1579].x + _443;
    float _1732 = cbLight._m0[_1579].y + _444;
    float _1733 = cbLight._m0[_1579].z + _445;
    float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
    float _1738 = _1737 * _1731;
    float _1739 = _1737 * _1732;
    float _1740 = _1737 * _1733;
    float _1741 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1579].xyz));
    float _3802 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _1745 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _1746 = dot(vec3(_372, _373, _374), vec3(_1738, _1739, _1740));
    float _3824 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1738, _1739, _1740));
    float _3835 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1754 = _1730 * _1730;
    float _1758 = ((_1749 * _1749) * (_1754 + (-1.0))) + 1.0;
    float _1766 = exp2(log2(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * 5.0);
    float _1767 = 0.959999978542327880859375 - _514;
    float _1769 = 0.959999978542327880859375 - _515;
    float _1770 = 0.959999978542327880859375 - _516;
    float _1777 = 1.0 - _1730;
    float _1788 = (0.5 / (((_1745 * ((_1744 * _1777) + _1730)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1777) + _1730) * _1744))) * _1744;
    float _3846 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1754 / ((_1758 * _1758) * 3.141590118408203125));
    uint _1801 = _1579 + 9u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _376) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1617].x + _443;
    float _1815 = cbLight._m0[_1617].y + _444;
    float _1816 = cbLight._m0[_1617].z + _445;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1617].xyz));
    float _3857 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _1828 = dot(vec3(_372, _373, _374), vec3(_1821, _1822, _1823));
    float _3868 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1821, _1822, _1823));
    float _3879 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1813 * _1813;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1847 = exp2(log2(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * 5.0);
    float _1854 = 1.0 - _1813;
    float _1864 = (0.5 / (((_1745 * ((_1827 * _1854) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1854) + _1813) * _1827))) * _1827;
    float _3890 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    float _1876 = (((((_1847 * _1767) + _517) * cbLight._m0[_1801].x) * _1866) * _1602) + (((((_1766 * _1767) + _517) * cbLight._m0[_1716].x) * _1790) * _1613);
    float _1877 = (((((_1847 * _1769) + _519) * cbLight._m0[_1801].y) * _1866) * _1602) + (((((_1766 * _1769) + _519) * cbLight._m0[_1716].y) * _1790) * _1613);
    float _1878 = (((((_1847 * _1770) + _520) * cbLight._m0[_1801].z) * _1866) * _1602) + (((((_1766 * _1770) + _520) * cbLight._m0[_1716].z) * _1790) * _1613);
    float _1940;
    float _1942;
    float _1944;
    if (_1653)
    {
        _1940 = _1876;
        _1942 = _1877;
        _1944 = _1878;
    }
    else
    {
        uint _1946 = _1579 + 2u;
        uint _1950 = _1579 + 10u;
        float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _376) * 0.949999988079071044921875);
        float _1965 = _1964 * _1964;
        float _1966 = cbLight._m0[_1946].x + _443;
        float _1967 = cbLight._m0[_1946].y + _444;
        float _1968 = cbLight._m0[_1946].z + _445;
        float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
        float _1973 = _1972 * _1966;
        float _1974 = _1972 * _1967;
        float _1975 = _1972 * _1968;
        float _1976 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1946].xyz));
        float _3901 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1980 = dot(vec3(_372, _373, _374), vec3(_1973, _1974, _1975));
        float _3912 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1984 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_1973, _1974, _1975));
        float _3923 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1988 = _1965 * _1965;
        float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
        float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0);
        float _2006 = 1.0 - _1965;
        float _2016 = (0.5 / (((_1745 * ((_1979 * _2006) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2006) + _1965) * _1979))) * _1979;
        float _3934 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2018 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
        float _2019 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1940 = (((((_1999 * _1767) + _517) * cbLight._m0[_1950].x) * _2018) * _2019) + _1876;
        _1942 = (((((_1999 * _1769) + _519) * cbLight._m0[_1950].y) * _2018) * _2019) + _1877;
        _1944 = (((((_1999 * _1770) + _520) * cbLight._m0[_1950].z) * _2018) * _2019) + _1878;
    }
    float _2054;
    float _2056;
    float _2058;
    if (_1671)
    {
        _2054 = _1940;
        _2056 = _1942;
        _2058 = _1944;
    }
    else
    {
        uint _2065 = _1579 + 3u;
        uint _2069 = _1579 + 11u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _376) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _443;
        float _2086 = cbLight._m0[_2065].y + _444;
        float _2087 = cbLight._m0[_2065].z + _445;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2065].xyz));
        float _3950 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _2099 = dot(vec3(_372, _373, _374), vec3(_2092, _2093, _2094));
        float _3961 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _3972 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
        float _2125 = 1.0 - _2084;
        float _2135 = (0.5 / (((_1745 * ((_2098 * _2125) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2125) + _2084) * _2098))) * _2098;
        float _3983 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2054 = (((((_2118 * _1767) + _517) * cbLight._m0[_2069].x) * _2137) * _2138) + _1940;
        _2056 = (((((_2118 * _1769) + _519) * cbLight._m0[_2069].y) * _2137) * _2138) + _1942;
        _2058 = (((((_2118 * _1770) + _520) * cbLight._m0[_2069].z) * _2137) * _2138) + _1944;
    }
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    if (_1577.y == 0u)
    {
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2213;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2213;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2213;
        uvec4 _2228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2229 = _2228.x;
        uint _2240 = uint((float(_2228.y) * floor(float(uint(cbSceneParam._m0[85u].y * _451) / _2229))) + floor(float(uint(cbSceneParam._m0[85u].x * _450) / _2229)));
        float _2250 = (log2(_2216 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2251 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        uint _2254 = uint(isnan(14.0) ? _2251 : (isnan(_2251) ? 14.0 : min(_2251, 14.0)));
        uvec4 _2259 = texelFetch(g_lightClusterGridBuffer, int(((_2254 << 2u) + (_2240 << 6u)) >> 2u));
        uint _2260 = _2259.x;
        uint _2261 = _2228.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2261 >> 4u) & 15u)) + 4294967295u) & _2260) == 0u) || ((_2261 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            uint _2515 = 0u;
            uint _2524;
            bool _2525;
            for (;;)
            {
                _2524 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2515 << 2u)) >> 2u)).x;
                _2525 = _2524 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2525)
                {
                    frontier_phi_63_pred = _2514;
                    frontier_phi_63_pred_1 = _2513;
                    frontier_phi_63_pred_2 = _2512;
                    frontier_phi_63_pred_3 = _2511;
                    frontier_phi_63_pred_4 = _2510;
                    frontier_phi_63_pred_5 = _2509;
                }
                else
                {
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    uint _2639;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2524;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    for (;;)
                    {
                        uint _2643 = uint(findLSB(_2639)) + (_2515 << 5u);
                        uint _2640 = (_2639 + 4294967295u) & _2639;
                        uint _2645 = _2643 * 48u;
                        vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 3u)).x));
                        uint _2665 = (_2643 * 48u) + 4u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2684 = (_2643 * 48u) + 8u;
                        vec3 _2695 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x));
                        float _2699 = _2659.x - _2214;
                        float _2700 = _2659.y - _2215;
                        float _2701 = _2659.z - _2216;
                        float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                        float _2705 = inversesqrt(_2702);
                        float _2706 = _2705 * _2699;
                        float _2707 = _2705 * _2700;
                        float _2708 = _2705 * _2701;
                        float _2709 = dot(vec3(_472, _475, _478), vec3(_2706, _2707, _2708));
                        float _2714 = 1.0 - (_2702 * _2659.w);
                        float _4009 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2715 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2716 = sqrt(_2702) * _2678.w;
                        float _2719 = 1.39999997615814208984375 / (_2716 + 1.39999997615814208984375);
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * _2709) + _2720;
                        float _2726 = _2716 * _2716;
                        float _2730 = ((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2715) / ((_2726 * 0.699999988079071044921875) + 1.0);
                        float _2734 = (-0.0) - _2214;
                        float _2735 = (-0.0) - _2215;
                        float _2736 = (-0.0) - _2216;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2751 = exp2(log2(1.0 / ((_2726 * 3.5) + 5.0)) * 0.25);
                        float _2752 = 1.0 - _548;
                        float _2759 = sqrt(1.0 - ((1.0 - (_2752 * _2752)) * (1.0 - (_2751 * _2751))));
                        float _2760 = _2759 * _2759;
                        float _2761 = _2760 * _2760;
                        float _2762 = _2741 + _2706;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2772 = dot(vec3(_472, _475, _478), vec3(_2741, _2742, _2743));
                        float _4025 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2775 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2776 = dot(vec3(_472, _475, _478), vec3(_2768 * _2762, _2768 * _2763, _2768 * _2764));
                        float _4036 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2783 = ((_2779 * _2779) * (_2761 + (-1.0))) + 1.0;
                        float _2784 = _2719 * _2760;
                        float _2785 = _2784 * _2784;
                        float _2788 = ((1.0 - _2785) * _2709) + _2785;
                        float _4047 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2789 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2790 = 1.0 - _2760;
                        float _2800 = (0.5 / (((_2789 * ((_2775 * _2790) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2789 * _2790) + _2760) * _2775))) * _2789;
                        float _4058 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2811 = (((_2761 * 3.1415927410125732421875) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) / ((_2783 * _2783) * ((_2726 * 2.1991131305694580078125) + 3.141590118408203125))) * _2715;
                        _2568 = (_2730 * _2678.x) + _2636;
                        _2569 = (_2730 * _2678.y) + _2637;
                        _2570 = (_2730 * _2678.z) + _2638;
                        _2565 = (_2811 * _2695.x) + _2633;
                        _2566 = (_2811 * _2695.y) + _2634;
                        _2567 = (_2811 * _2695.z) + _2635;
                        if (_2640 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2640;
                        }
                    }
                    frontier_phi_63_pred = _2570;
                    frontier_phi_63_pred_1 = _2569;
                    frontier_phi_63_pred_2 = _2568;
                    frontier_phi_63_pred_3 = _2567;
                    frontier_phi_63_pred_4 = _2566;
                    frontier_phi_63_pred_5 = _2565;
                }
                _2376 = frontier_phi_63_pred;
                _2374 = frontier_phi_63_pred_1;
                _2372 = frontier_phi_63_pred_2;
                _2370 = frontier_phi_63_pred_3;
                _2368 = frontier_phi_63_pred_4;
                _2366 = frontier_phi_63_pred_5;
                uint _2516 = _2515 + 1u;
                if (_2516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2509 = _2366;
                    _2510 = _2368;
                    _2511 = _2370;
                    _2512 = _2372;
                    _2513 = _2374;
                    _2514 = _2376;
                    _2515 = _2516;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        if (((4294967295u << _2382) & _2260) == 0u)
        {
            _2477 = _2365;
            _2479 = _2367;
            _2481 = _2369;
            _2483 = _2371;
            _2485 = _2373;
            _2487 = _2375;
        }
        else
        {
            float _2502 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
            float _2503 = _2502 * _2214;
            float _2504 = _2502 * _2215;
            float _2505 = _2502 * _2216;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2616 = _2365;
                float _2617 = _2367;
                float _2618 = _2369;
                float _2619 = _2371;
                float _2620 = _2373;
                float _2621 = _2375;
                uint _2622 = _2382;
                uint _2631;
                bool _2632;
                for (;;)
                {
                    _2631 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                    _2632 = _2631 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2632)
                    {
                        frontier_phi_69_pred = _2621;
                        frontier_phi_69_pred_1 = _2620;
                        frontier_phi_69_pred_2 = _2619;
                        frontier_phi_69_pred_3 = _2618;
                        frontier_phi_69_pred_4 = _2617;
                        frontier_phi_69_pred_5 = _2616;
                    }
                    else
                    {
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _2829 = _2616;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        uint _2835 = _2631;
                        uint _2836;
                        vec4 _2861;
                        float _2862;
                        vec4 _2877;
                        vec3 _2889;
                        vec4 _2905;
                        vec4 _2921;
                        float _2968;
                        bool _2969;
                        for (;;)
                        {
                            uint _2846 = ((_2622 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2835));
                            _2836 = (_2835 + 4294967295u) & _2835;
                            uint _2848 = _2846 * 40u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            _2862 = _2861.w;
                            uint _2864 = (_2846 * 40u) + 4u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2879 = (_2846 * 40u) + 8u;
                            _2889 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x));
                            uint _2892 = (_2846 * 40u) + 16u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2908 = (_2846 * 40u) + 20u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2846 * 40u) + 24u;
                            vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2943 = (_2846 * 40u) + 28u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2968 = fma(_2216, _2956.z, fma(_2215, _2956.y, _2956.x * _2214)) + _2956.w;
                            _2969 = !((fma(_2216, _2937.z, fma(_2215, _2937.y, _2937.x * _2214)) + _2937.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2969)
                            {
                                float _2996 = _2861.x - _2214;
                                float _2997 = _2861.y - _2215;
                                float _2998 = _2861.z - _2216;
                                float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                                float _3002 = inversesqrt(_2999);
                                float _3003 = _3002 * _2996;
                                float _3004 = _3002 * _2997;
                                float _3005 = _3002 * _2998;
                                float _3009 = 1.0 - (_2999 / (_2862 * _2862));
                                float _4069 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3014 = sqrt(_2999) * _2877.w;
                                float _3016 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                                float _3017 = _3016 * _3016;
                                float _3020 = ((1.0 - _3017) * dot(vec3(_3003, _3004, _3005), vec3(_472, _475, _478))) + _3017;
                                float _3023 = _3014 * _3014;
                                float _3027 = (fma(_2216, _2905.z, fma(_2215, _2905.y, _2905.x * _2214)) + _2905.w) / _2968;
                                float _3028 = (fma(_2216, _2921.z, fma(_2215, _2921.y, _2921.x * _2214)) + _2921.w) / _2968;
                                float _3032 = 1.0 - dot(vec2(_3027, _3028), vec2(_3027, _3028));
                                float _4085 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3034 = _3033 * (((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3010) / ((_3023 * 0.699999988079071044921875) + 1.0));
                                float _3046 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                                float _3047 = 1.0 - _548;
                                float _3054 = sqrt(1.0 - ((1.0 - (_3047 * _3047)) * (1.0 - (_3046 * _3046))));
                                float _3055 = _3054 * _3054;
                                float _3056 = _3055 * _3055;
                                float _3057 = _3003 - _2503;
                                float _3058 = _3004 - _2504;
                                float _3059 = _3005 - _2505;
                                float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                                float _3067 = dot(vec3(_472, _475, _478), vec3((-0.0) - _2503, (-0.0) - _2504, (-0.0) - _2505));
                                float _4096 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3070 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3071 = dot(vec3(_472, _475, _478), vec3(_3063 * _3057, _3063 * _3058, _3063 * _3059));
                                float _4107 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3074 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3078 = ((_3074 * _3074) * (_3056 + (-1.0))) + 1.0;
                                float _3079 = _3016 * _3055;
                                float _3080 = _3079 * _3079;
                                float _3086 = ((1.0 - _3080) * dot(vec3(_472, _475, _478), vec3(_3003, _3004, _3005))) + _3080;
                                float _4118 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3088 = 1.0 - _3055;
                                float _3098 = (0.5 / (((_3087 * ((_3070 * _3088) + _3055)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3088) + _3055) * _3070))) * _3087;
                                float _4129 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3108 = (_3033 * _3010) * (((_3056 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_3078 * _3078) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3034 * _2877.z;
                                frontier_phi_75_pred_1 = _3034 * _2877.y;
                                frontier_phi_75_pred_2 = _3034 * _2877.x;
                                frontier_phi_75_pred_3 = _3108 * _2889.z;
                                frontier_phi_75_pred_4 = _3108 * _2889.y;
                                frontier_phi_75_pred_5 = _3108 * _2889.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3117 = frontier_phi_75_pred;
                            _3116 = frontier_phi_75_pred_1;
                            _3115 = frontier_phi_75_pred_2;
                            _3114 = frontier_phi_75_pred_3;
                            _3113 = frontier_phi_75_pred_4;
                            _3112 = frontier_phi_75_pred_5;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            if (_2836 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2836;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2821;
                        frontier_phi_69_pred_1 = _2820;
                        frontier_phi_69_pred_2 = _2819;
                        frontier_phi_69_pred_3 = _2818;
                        frontier_phi_69_pred_4 = _2817;
                        frontier_phi_69_pred_5 = _2816;
                    }
                    _2488 = frontier_phi_69_pred;
                    _2486 = frontier_phi_69_pred_1;
                    _2484 = frontier_phi_69_pred_2;
                    _2482 = frontier_phi_69_pred_3;
                    _2480 = frontier_phi_69_pred_4;
                    _2478 = frontier_phi_69_pred_5;
                    uint _2623 = _2622 + 1u;
                    if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2616 = _2478;
                        _2617 = _2480;
                        _2618 = _2482;
                        _2619 = _2484;
                        _2620 = _2486;
                        _2621 = _2488;
                        _2622 = _2623;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2488;
                frontier_phi_57_58_ladder_1 = _2486;
                frontier_phi_57_58_ladder_2 = _2484;
                frontier_phi_57_58_ladder_3 = _2482;
                frontier_phi_57_58_ladder_4 = _2480;
                frontier_phi_57_58_ladder_5 = _2478;
            }
            else
            {
                frontier_phi_57_58_ladder = _2375;
                frontier_phi_57_58_ladder_1 = _2373;
                frontier_phi_57_58_ladder_2 = _2371;
                frontier_phi_57_58_ladder_3 = _2369;
                frontier_phi_57_58_ladder_4 = _2367;
                frontier_phi_57_58_ladder_5 = _2365;
            }
            _2477 = frontier_phi_57_58_ladder_5;
            _2479 = frontier_phi_57_58_ladder_4;
            _2481 = frontier_phi_57_58_ladder_3;
            _2483 = frontier_phi_57_58_ladder_2;
            _2485 = frontier_phi_57_58_ladder_1;
            _2487 = frontier_phi_57_58_ladder;
        }
        float _2492 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        _2272 = (_2492 * _2483) + _1709;
        _2274 = (_2492 * _2485) + _1711;
        _2276 = (_2492 * _2487) + _1713;
        _2278 = ((_2477 * _517) * _2492) + _2054;
        _2280 = ((_2479 * _519) * _2492) + _2056;
        _2282 = ((_2481 * _520) * _2492) + _2058;
    }
    else
    {
        _2272 = _1709;
        _2274 = _1711;
        _2276 = _1713;
        _2278 = _2054;
        _2280 = _2056;
        _2282 = _2058;
    }
    float _4145 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4156 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4167 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4178 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _2300 = ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2272 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _532))) + ((_2278 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2301 = ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2274 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _532))) + ((_2280 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2302 = ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2276 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _532))) + ((_2282 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2310 = cbInstanceData._m0[_491 + 6u].w * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)));
    float _2315 = _450 / cbSceneParam._m0[86u].x;
    float _2316 = _451 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _385 : (isnan(_385) ? cbSceneParam._m0[77u].w : min(_385, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_385 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_385) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _385 : min(cbSceneParam._m0[80u].w, _385));
        float _2391 = _2390 / _385;
        float _2402 = _2391 * _436;
        float _2403 = _437 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2405 = _2391 * _438;
        float _2407 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2408 = _2407 + cbSceneParam._m0[79u].w;
        float _2409 = cbSceneParam._m0[79u].w - _2403;
        float _2415 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2405 * _2405));
        float _2418 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2415;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2578;
        if (abs((_2404 - _2407) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2578 = ((((_2408 > 0.0) ? exp2(_2423 * _2408) : (2.0 - exp2(_2425 * _2408))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2418;
        }
        else
        {
            float _2538 = 1.0 / cbSceneParam._m0[80u].x;
            float _2539 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : max(_2408, _2409));
            float _2540 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : min(_2408, _2409));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            _2578 = ((abs(_2415 / _2404) * cbSceneParam._m0[80u].y) * ((((_2549 - _2550) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))))) * _2538)) - ((exp2(_2425 * _2549) - exp2(_2425 * _2550)) * _2538))) + (_2418 * cbSceneParam._m0[80u].z);
        }
        vec4 _2580 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2589 = exp2((_2578 * (-1.44269502162933349609375)) * (1.0 - _2580.w));
        float _2590 = log2(_2589);
        float _2606 = log2(_2335);
        _2427 = (exp2(_2606 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].x)) * _2580.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2429 = (exp2(_2606 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].y)) * _2580.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2431 = (exp2(_2606 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].z)) * _2580.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2433 = _2589 * _2335;
    }
    else
    {
        _2427 = _2332;
        _2429 = _2333;
        _2431 = _2334;
        _2433 = _2335;
    }
    float _2445 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2446 = _2445 == 3.0;
    float _2447 = log2(_2433);
    float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)));
    float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2465 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.y = _2465 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.z = _2465 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.w = _2310;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2310;
}


