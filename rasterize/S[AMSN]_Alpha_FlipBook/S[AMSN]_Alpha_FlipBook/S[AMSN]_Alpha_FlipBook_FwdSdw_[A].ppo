#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _972;
float _3650;
float _3651;
float _3652;
float _3653;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    uint _244 = uint(int(floor(cbMtdParam._m0[10u].y)));
    uint _245 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _247 = float(int(_244 - _245 * (_244 / _245)));
    float _257 = (fract(TEXCOORD_1.x) + (_247 - cbMtdParam._m0[10u].w * trunc(_247 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _259 = (fract(TEXCOORD_1.y) + floor(_247 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _272 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _257) + cbTextureTilingScale._m0[0u].z, (_259 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _279 = _272.x * cbMtdParam._m0[9u].x;
    float _280 = _272.y * cbMtdParam._m0[9u].y;
    float _281 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _293 = _291.x;
    float _316 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _293)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _293))) - POSITION_1.w) / cbMtdParam._m0[10u].z;
    float _3662 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _319 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _272.w;
    float _320 = (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * _319;
    float _321 = gl_FragCoord.x * 0.125;
    float _323 = gl_FragCoord.y * 0.125;
    vec4 _325 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_321, _323));
    float _333 = float(_319 >= ((_325.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _348 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _257) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _351 = _348.x + cbMtdParam._m0[10u].x;
    vec4 _363 = texture(sampler2D(S_AMSN_Alpha_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _257) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _367 = _363.z;
    float _371 = (_363.x * 2.0) + (-1.0);
    float _373 = (_363.y * 2.0) + (-1.0);
    float _374 = dot(vec2(_371, _373), vec2(_371, _373));
    float _3673 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _379 = sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))));
    float _382 = fma(_379, _222, fma(_373, _214 * TANGENT.x, (_200 * _192) * _371));
    float _385 = fma(_379, _223, fma(_373, _214 * TANGENT.y, (_200 * _193) * _371));
    float _388 = fma(_379, _224, fma(_373, _214 * TANGENT.z, (_200 * _194) * _371));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3684 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _396 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _397 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _3717 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3728 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _3739 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _401 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _466 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _456);
    float _467 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _456);
    float _468 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _456);
    float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
    float _473 = _466 * _472;
    float _474 = _467 * _472;
    float _475 = _468 * _472;
    vec4 _476 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_321, _323));
    float _478 = _476.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _653 = sqrt(((_466 * _466) + (_467 * _467)) + (_468 * _468));
        float _659 = (cbMatDynParam._m0[5u].x * _653) + cbMatDynParam._m0[5u].y;
        float _3750 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _664 = (cbMatDynParam._m0[5u].z * _653) + cbMatDynParam._m0[5u].w;
        float _3761 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) - _660)) + _660) < ((_478 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _489 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _490 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _510 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _513 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _516 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _529 = uint(roundEven(NORMAL.w)) * 13u;
    uint _531 = _529 + 9u;
    uint _532 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3772 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _544 = 1.0 - _401;
    float _545 = _541 * _544;
    float _546 = _542 * _544;
    float _547 = _543 * _544;
    float _552 = (_541 + (-0.039999999105930328369140625)) * _401;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _401;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _401;
    float _555 = _552 + 0.039999999105930328369140625;
    float _557 = _553 + 0.039999999105930328369140625;
    float _558 = _554 + 0.039999999105930328369140625;
    vec4 _567 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _489, cbSceneParam._m0[86u].y * _490));
    float _570 = _567.x * TEXCOORD_1.w;
    float _571 = dot(vec3(_393, _394, _395), vec3(_473, _474, _475));
    float _574 = _571 * 2.0;
    float _578 = (_574 * _393) - _473;
    float _579 = (_574 * _394) - _474;
    float _580 = (_574 * _395) - _475;
    float _584 = abs(dot(vec3(_473, _474, _475), vec3(_393, _394, _395)));
    float _3805 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _586 = sqrt(_397);
    float _599 = exp2((_586 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_586 * 3.0));
    float _605 = (1.0 - _599) * ((_586 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _606 = _599 * _586;
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _971;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _696 = fma(_642, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634));
        float _700 = fma(_642, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634));
        float _704 = fma(_642, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634));
        float _729 = _634 + _393;
        float _730 = _638 + _394;
        float _731 = _642 + _395;
        float _741 = fma(_731, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729)) - _696;
        float _742 = fma(_731, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729)) - _700;
        float _743 = fma(_731, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729)) - _704;
        float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
        float _760 = ((_747 * _741) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_696 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_747 * _742) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_700 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_747 * _743) / cbModelParam._m0[34u].z) + ((((((_704 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        float _799 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_765.x + (-0.5));
        float _801 = _799 * (_765.y + (-0.5));
        float _802 = _799 * (_765.z + (-0.5));
        float _809 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_772.x + (-0.5));
        float _811 = _809 * (_772.y + (-0.5));
        float _812 = _809 * (_772.z + (-0.5));
        float _819 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_779.x + (-0.5));
        float _821 = _819 * (_779.y + (-0.5));
        float _822 = _819 * (_779.z + (-0.5));
        float _829 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_786.x + (-0.5));
        float _831 = _829 * (_786.y + (-0.5));
        float _832 = _829 * (_786.z + (-0.5));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = _800 * 0.5;
        float _837 = _810 * 0.5;
        float _838 = _820 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _853 = (dot(vec3(_393, _394, _395), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _863 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3853 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_865 + 1.0))) + _870) * _833;
        float _880 = _801 * 0.5;
        float _881 = _811 * 0.5;
        float _882 = _821 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_393, _394, _395), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3886 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_907 + 1.0))) + _912) * _834;
        float _922 = _802 * 0.5;
        float _923 = _812 * 0.5;
        float _924 = _822 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_393, _394, _395), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3919 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_949 + 1.0))) + _954) * _835;
        _971 = _802;
        _973 = _801;
        _974 = _800;
        _975 = _812;
        _976 = _811;
        _977 = _810;
        _978 = _822;
        _979 = _821;
        _980 = _820;
        _981 = _835;
        _982 = _834;
        _983 = _833;
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
    }
    else
    {
        _971 = _972;
        _973 = _972;
        _974 = _972;
        _975 = _972;
        _976 = _972;
        _977 = _972;
        _978 = _972;
        _979 = _972;
        _980 = _972;
        _981 = _972;
        _982 = _972;
        _983 = _972;
        _984 = 0.0;
        _985 = 0.0;
        _986 = 0.0;
    }
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1015 = fma(_642, cbModelParam._m0[30u].z, fma(_638, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _634));
        float _1019 = fma(_642, cbModelParam._m0[31u].z, fma(_638, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _634));
        float _1023 = fma(_642, cbModelParam._m0[32u].z, fma(_638, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _634));
        float _1046 = _634 + _393;
        float _1047 = _638 + _394;
        float _1048 = _642 + _395;
        float _1058 = fma(_1048, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046)) - _1015;
        float _1059 = fma(_1048, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046)) - _1019;
        float _1060 = fma(_1048, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046)) - _1023;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1015 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1019 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[35u].z) + ((((((_1023 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1114 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1081.x + (-0.5));
        float _1116 = _1114 * (_1081.y + (-0.5));
        float _1117 = _1114 * (_1081.z + (-0.5));
        float _1124 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1088.x + (-0.5));
        float _1126 = _1124 * (_1088.y + (-0.5));
        float _1127 = _1124 * (_1088.z + (-0.5));
        float _1134 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1095.x + (-0.5));
        float _1136 = _1134 * (_1095.y + (-0.5));
        float _1137 = _1134 * (_1095.z + (-0.5));
        float _1144 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1102.x + (-0.5));
        float _1146 = _1144 * (_1102.y + (-0.5));
        float _1147 = _1144 * (_1102.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_393, _394, _395), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3982 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1178 + 1.0))) + _1183) * _1148;
        float _1193 = _1116 * 0.5;
        float _1194 = _1126 * 0.5;
        float _1195 = _1136 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_393, _394, _395), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4015 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1220 + 1.0))) + _1225) * _1149;
        float _1235 = _1117 * 0.5;
        float _1236 = _1127 * 0.5;
        float _1237 = _1137 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_393, _394, _395), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4048 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1262 + 1.0))) + _1267) * _1150;
        _1284 = _1117;
        _1285 = _1116;
        _1286 = _1115;
        _1287 = _1127;
        _1288 = _1126;
        _1289 = _1125;
        _1290 = _1137;
        _1291 = _1136;
        _1292 = _1135;
        _1293 = _1150;
        _1294 = _1149;
        _1295 = _1148;
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _972;
        _1285 = _972;
        _1286 = _972;
        _1287 = _972;
        _1288 = _972;
        _1289 = _972;
        _1290 = _972;
        _1291 = _972;
        _1292 = _972;
        _1293 = _972;
        _1294 = _972;
        _1295 = _972;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _984)) + _984;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _985)) + _985;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _986)) + _986;
    float _1331 = fma(_1310, cbSceneParam._m0[89u].z, fma(_1309, cbSceneParam._m0[89u].y, _1308 * cbSceneParam._m0[89u].x));
    float _1334 = fma(_1310, cbSceneParam._m0[90u].z, fma(_1309, cbSceneParam._m0[90u].y, _1308 * cbSceneParam._m0[90u].x));
    float _1337 = fma(_1310, cbSceneParam._m0[91u].z, fma(_1309, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1308));
    float _1352 = _578 * 0.5;
    float _1353 = _579 * 0.5;
    float _1354 = _580 * 0.5;
    float _1355 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1358 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1361 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1395;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1368 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_971, _975, _978, _981));
        float _1372 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_973, _976, _979, _982));
        float _1376 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_974, _977, _980, _983));
        float _1383 = dot(vec4(cbModelParam._m0[39u]), vec4(_1352, _1353, _1354, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1406;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1397 = dot(vec4(cbModelParam._m0[40u]), vec4(_1352, _1353, _1354, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1397) ? 0.0 : (isnan(0.0) ? _1397 : max(0.0, _1397))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1410 = (_1406 * cbModelParam._m0[1u].x) + (_1395 * (1.0 - cbModelParam._m0[1u].x));
    float _1420 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _397);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1420 : min(cbModelParam._m0[25u].z, _1420));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1470 = fma(_642, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634)) + cbModelParam._m0[13u].w;
        float _1474 = fma(_642, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634)) + cbModelParam._m0[14u].w;
        float _1478 = fma(_642, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634)) + cbModelParam._m0[15u].w;
        float _1481 = fma(_580, cbModelParam._m0[13u].z, fma(_579, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578));
        float _1484 = fma(_580, cbModelParam._m0[14u].z, fma(_579, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578));
        float _1487 = fma(_580, cbModelParam._m0[15u].z, fma(_579, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578));
        float _1515;
        if (_1481 > 0.0)
        {
            _1515 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1515 = frontier_phi_19_17_ladder;
        }
        float _1690;
        if (_1484 > 0.0)
        {
            _1690 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1690 = frontier_phi_28_24_ladder;
        }
        float _1986;
        if (_1487 > 0.0)
        {
            _1986 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1986 = frontier_phi_40_35_ladder;
        }
        float _1988 = isnan(_1690) ? _1515 : (isnan(_1515) ? _1690 : min(_1515, _1690));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1481) + _1470;
        float _1994 = (_1989 * _1484) + _1474;
        float _1995 = (_1989 * _1487) + _1478;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1998 = (-1.0) - _1996;
        float _2000 = _1996 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1995 > _2000) || ((_1995 < _1998) || ((_1994 > _2000) || ((_1994 < _1998) || ((_1993 < _1998) || (_1993 > _2000))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1995, cbModelParam._m0[9u].z, fma(_1994, cbModelParam._m0[9u].y, _1993 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1995, cbModelParam._m0[10u].z, fma(_1994, cbModelParam._m0[10u].y, _1993 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1995, cbModelParam._m0[11u].z, fma(_1994, cbModelParam._m0[11u].y, _1993 * cbModelParam._m0[11u].x))), _1421);
            frontier_phi_18_40_ladder = _2140.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2140.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2140.x * cbModelParam._m0[1u].y;
        }
        _1503 = frontier_phi_18_40_ladder_2;
        _1505 = frontier_phi_18_40_ladder_1;
        _1507 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_578, _579, _580), _1421);
        _1503 = _1491.x * cbModelParam._m0[1u].y;
        _1505 = _1491.y * cbModelParam._m0[1u].y;
        _1507 = _1491.z * cbModelParam._m0[1u].y;
    }
    float _1511 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _397);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1511 : min(cbModelParam._m0[25u].w, _1511));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1569 = fma(_642, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634)) + cbModelParam._m0[21u].w;
        float _1573 = fma(_642, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634)) + cbModelParam._m0[22u].w;
        float _1577 = fma(_642, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634)) + cbModelParam._m0[23u].w;
        float _1580 = fma(_580, cbModelParam._m0[21u].z, fma(_579, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578));
        float _1583 = fma(_580, cbModelParam._m0[22u].z, fma(_579, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578));
        float _1586 = fma(_580, cbModelParam._m0[23u].z, fma(_579, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578));
        float _1695;
        if (_1580 > 0.0)
        {
            _1695 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1695 = frontier_phi_30_26_ladder;
        }
        float _2013;
        if (_1583 > 0.0)
        {
            _2013 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2013 = frontier_phi_42_37_ladder;
        }
        float _2351;
        if (_1586 > 0.0)
        {
            _2351 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2351 = frontier_phi_52_49_ladder;
        }
        float _2353 = isnan(_2013) ? _1695 : (isnan(_1695) ? _2013 : min(_1695, _2013));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1580) + _1569;
        float _2359 = (_2354 * _1583) + _1573;
        float _2360 = (_2354 * _1586) + _1577;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1512);
            frontier_phi_27_52_ladder = _2482.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2482.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2482.x * cbModelParam._m0[1u].z;
        }
        _1605 = frontier_phi_27_52_ladder_2;
        _1607 = frontier_phi_27_52_ladder_1;
        _1609 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_578, _579, _580), _1512);
        _1605 = _1589.x * cbModelParam._m0[1u].z;
        _1607 = _1589.y * cbModelParam._m0[1u].z;
        _1609 = _1589.z * cbModelParam._m0[1u].z;
    }
    float _1622 = (((_605 * _555) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1624 = (((_605 * _557) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1626 = (((_605 * _558) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1629 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, _1622 * cbSceneParam._m0[91u].x));
    float _1669 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1673 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1681 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1682 = _1669 / _1681;
    float _1683 = _1673 / _1681;
    float _1684 = _1677 / _1681;
    float _1831;
    float _1832;
    float _1833;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1711 = ((uint(_1684 > cbSceneParam._m0[59u].y) + uint(_1684 > cbSceneParam._m0[59u].x)) + uint(_1684 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1712 = _1711 + 43u;
        uint _1720 = _1711 + 44u;
        uint _1728 = _1711 + 45u;
        uint _1736 = _1711 + 46u;
        float _1747 = fma(_1681, cbSceneParam._m0[_1712].w, fma(_1677, cbSceneParam._m0[_1712].z, fma(_1673, cbSceneParam._m0[_1712].y, _1669 * cbSceneParam._m0[_1712].x)));
        float _1751 = fma(_1681, cbSceneParam._m0[_1720].w, fma(_1677, cbSceneParam._m0[_1720].z, fma(_1673, cbSceneParam._m0[_1720].y, _1669 * cbSceneParam._m0[_1720].x)));
        float _1759 = fma(_1681, cbSceneParam._m0[_1736].w, fma(_1677, cbSceneParam._m0[_1736].z, fma(_1673, cbSceneParam._m0[_1736].y, _1669 * cbSceneParam._m0[_1736].x)));
        float _1764 = cbSceneParam._m0[33u].z * _1759;
        float _1766 = cbSceneParam._m0[33u].w * _1759;
        float _1769 = fma(_1681, cbSceneParam._m0[_1728].w, fma(_1677, cbSceneParam._m0[_1728].z, fma(_1673, cbSceneParam._m0[_1728].y, _1669 * cbSceneParam._m0[_1728].x))) / _1759;
        float _1817 = (cbSceneParam._m0[33u].x - sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684))) * cbSceneParam._m0[33u].y;
        float _4174 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1824 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1764 + _1747) / _1759, (_1766 + _1751) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 + _1747) / _1759, (_1751 - _1764) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 - _1764) / _1759, (_1751 - _1766) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 - _1766) / _1759, (_1764 + _1751) / _1759), _1769), 0.0)).x), vec4(0.25)));
        _1831 = 1.0 - (_1824 * cbSceneParam._m0[34u].x);
        _1832 = 1.0 - (_1824 * cbSceneParam._m0[34u].y);
        _1833 = 1.0 - (_1824 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1831 = 1.0;
        _1832 = 1.0;
        _1833 = 1.0;
    }
    float _1897;
    float _1899;
    float _1901;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1885 = fma(_1681, cbSceneParam._m0[63u].w, fma(_1677, cbSceneParam._m0[63u].z, fma(_1673, cbSceneParam._m0[63u].y, _1669 * cbSceneParam._m0[63u].x)));
        float _1886 = fma(_1681, cbSceneParam._m0[60u].w, fma(_1677, cbSceneParam._m0[60u].z, fma(_1673, cbSceneParam._m0[60u].y, _1669 * cbSceneParam._m0[60u].x))) / _1885;
        float _1887 = fma(_1681, cbSceneParam._m0[61u].w, fma(_1677, cbSceneParam._m0[61u].z, fma(_1673, cbSceneParam._m0[61u].y, _1669 * cbSceneParam._m0[61u].x))) / _1885;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1886 >= cbSceneParam._m0[64u].x) && (_1887 >= cbSceneParam._m0[64u].y)) && (_1886 <= cbSceneParam._m0[64u].z)) && (_1887 <= cbSceneParam._m0[64u].w))
        {
            float _2026 = fma(_1681, cbSceneParam._m0[62u].w, fma(_1677, cbSceneParam._m0[62u].z, fma(_1673, cbSceneParam._m0[62u].y, _1669 * cbSceneParam._m0[62u].x))) / _1885;
            float _2030 = isnan(cbSceneParam._m0[41u].w) ? _2026 : (isnan(_2026) ? cbSceneParam._m0[41u].w : max(_2026, cbSceneParam._m0[41u].w));
            float _2073 = (cbSceneParam._m0[33u].x - sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684))) * cbSceneParam._m0[33u].y;
            float _4190 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
            float _2080 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1886, cbSceneParam._m0[33u].w + _1887), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1886, _1887 - cbSceneParam._m0[33u].z), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1886 - cbSceneParam._m0[33u].z, _1887 - cbSceneParam._m0[33u].w), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1886 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1887), _2030), 0.0)).x), vec4(0.25)));
            float _2084 = 1.0 - (_2080 * cbSceneParam._m0[34u].x);
            float _2085 = 1.0 - (_2080 * cbSceneParam._m0[34u].y);
            float _2086 = 1.0 - (_2080 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2085) ? _1832 : (isnan(_1832) ? _2085 : min(_1832, _2085));
            frontier_phi_39_38_ladder_1 = isnan(_2084) ? _1831 : (isnan(_1831) ? _2084 : min(_1831, _2084));
            frontier_phi_39_38_ladder_2 = isnan(_2086) ? _1833 : (isnan(_1833) ? _2086 : min(_1833, _2086));
        }
        else
        {
            frontier_phi_39_38_ladder = _1832;
            frontier_phi_39_38_ladder_1 = _1831;
            frontier_phi_39_38_ladder_2 = _1833;
        }
        _1897 = frontier_phi_39_38_ladder_1;
        _1899 = frontier_phi_39_38_ladder;
        _1901 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1897 = _1831;
        _1899 = _1832;
        _1901 = _1833;
    }
    uvec4 _1906 = floatBitsToUint(cbInstanceData._m0[_529 + 5u]);
    uint _1908 = _1906.x * 14u;
    uint _1909 = _1908 + 13u;
    float _1916 = _570 + (-1.0);
    float _1921 = (cbLight._m0[_1909].x * _1916) + 1.0;
    float _1922 = (cbLight._m0[_1909].y * _1916) + 1.0;
    float _1923 = (cbLight._m0[_1909].z * _1916) + 1.0;
    float _1924 = (cbLight._m0[_1909].w * _1916) + 1.0;
    uint _1925 = _1908 + 5u;
    float _1931 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1935 = _1908 + 4u;
    float _1945 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1949 = _1908 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_393, _394, _395));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_393, _394, _395));
    float _4226 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _4237 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1925].x * _1931) * _1970) + (((cbLight._m0[_1935].x * _1897) * _1945) * _1968);
    float _1978 = ((_1931 * cbLight._m0[_1925].y) * _1970) + (((cbLight._m0[_1935].y * _1899) * _1945) * _1968);
    float _1979 = ((_1931 * cbLight._m0[_1925].z) * _1970) + (((cbLight._m0[_1935].z * _1901) * _1945) * _1968);
    uvec4 _1983 = floatBitsToUint(cbLight._m0[_1908 + 12u]);
    bool _1985 = _1983.x == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_1985)
    {
        _2087 = _1977;
        _2089 = _1978;
        _2091 = _1979;
    }
    else
    {
        uint _2095 = _1908 + 6u;
        float _2111 = (dot(vec3(cbLight._m0[_1908 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4248 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2114 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2087 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1977;
        _2089 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1978;
        _2091 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1979;
    }
    bool _2094 = _1983.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2094)
    {
        _2149 = _2087;
        _2151 = _2089;
        _2153 = _2091;
    }
    else
    {
        uint _2322 = _1908 + 7u;
        float _2338 = (dot(vec3(cbLight._m0[_1908 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4264 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2341 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2149 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2087;
        _2151 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2089;
        _2153 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2091;
    }
    uint _2156 = _1908 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _397) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_1908].x + _473;
    float _2172 = cbLight._m0[_1908].y + _474;
    float _2173 = cbLight._m0[_1908].z + _475;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1908].xyz));
    float _4280 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _2185 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2186 = dot(vec3(_393, _394, _395), vec3(_2178, _2179, _2180));
    float _4302 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2178, _2179, _2180));
    float _4313 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
    float _2207 = 0.959999978542327880859375 - _552;
    float _2209 = 0.959999978542327880859375 - _553;
    float _2210 = 0.959999978542327880859375 - _554;
    float _2217 = 1.0 - _2170;
    float _2228 = (0.5 / (((_2185 * ((_2184 * _2217) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2217) + _2170) * _2184))) * _2184;
    float _4324 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2244 = _1908 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _397) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_1949].x + _473;
    float _2258 = cbLight._m0[_1949].y + _474;
    float _2259 = cbLight._m0[_1949].z + _475;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1949].xyz));
    float _4335 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2271 = dot(vec3(_393, _394, _395), vec3(_2264, _2265, _2266));
    float _4346 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2264, _2265, _2266));
    float _4357 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
    float _2297 = 1.0 - _2256;
    float _2307 = (0.5 / (((_2185 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2297) + _2256) * _2270))) * _2270;
    float _4368 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2309 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2319 = (((((_2290 * _2207) + _555) * cbLight._m0[_2244].x) * _2309) * _1931) + ((((cbLight._m0[_2156].x * _1897) * ((_2206 * _2207) + _555)) * _2230) * _1945);
    float _2320 = (((((_2290 * _2209) + _557) * cbLight._m0[_2244].y) * _2309) * _1931) + ((((cbLight._m0[_2156].y * _1899) * ((_2206 * _2209) + _557)) * _2230) * _1945);
    float _2321 = (((((_2290 * _2210) + _558) * cbLight._m0[_2244].z) * _2309) * _1931) + ((((cbLight._m0[_2156].z * _1901) * ((_2206 * _2210) + _558)) * _2230) * _1945);
    float _2377;
    float _2379;
    float _2381;
    if (_1985)
    {
        _2377 = _2319;
        _2379 = _2320;
        _2381 = _2321;
    }
    else
    {
        uint _2383 = _1908 + 2u;
        uint _2387 = _1908 + 10u;
        float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _397) * 0.949999988079071044921875);
        float _2402 = _2401 * _2401;
        float _2403 = cbLight._m0[_2383].x + _473;
        float _2404 = cbLight._m0[_2383].y + _474;
        float _2405 = cbLight._m0[_2383].z + _475;
        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
        float _2410 = _2409 * _2403;
        float _2411 = _2409 * _2404;
        float _2412 = _2409 * _2405;
        float _2413 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2383].xyz));
        float _4379 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2417 = dot(vec3(_393, _394, _395), vec3(_2410, _2411, _2412));
        float _4390 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2421 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2410, _2411, _2412));
        float _4401 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2425 = _2402 * _2402;
        float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
        float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
        float _2443 = 1.0 - _2402;
        float _2453 = (0.5 / (((_2185 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2443) + _2402) * _2416))) * _2416;
        float _4412 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2455 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
        float _2456 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2377 = (((((_2436 * _2207) + _555) * cbLight._m0[_2387].x) * _2455) * _2456) + _2319;
        _2379 = (((((_2436 * _2209) + _557) * cbLight._m0[_2387].y) * _2455) * _2456) + _2320;
        _2381 = (((((_2436 * _2210) + _558) * cbLight._m0[_2387].z) * _2455) * _2456) + _2321;
    }
    float _2487;
    float _2489;
    float _2491;
    if (_2094)
    {
        _2487 = _2377;
        _2489 = _2379;
        _2491 = _2381;
    }
    else
    {
        uint _2498 = _1908 + 3u;
        uint _2502 = _1908 + 11u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _397) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _473;
        float _2519 = cbLight._m0[_2498].y + _474;
        float _2520 = cbLight._m0[_2498].z + _475;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2498].xyz));
        float _4428 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2532 = dot(vec3(_393, _394, _395), vec3(_2525, _2526, _2527));
        float _4439 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4450 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
        float _2558 = 1.0 - _2517;
        float _2568 = (0.5 / (((_2185 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2558) + _2517) * _2531))) * _2531;
        float _4461 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2487 = (((((_2551 * _2207) + _555) * cbLight._m0[_2502].x) * _2570) * _2571) + _2377;
        _2489 = (((((_2551 * _2209) + _557) * cbLight._m0[_2502].y) * _2570) * _2571) + _2379;
        _2491 = (((((_2551 * _2210) + _558) * cbLight._m0[_2502].z) * _2570) * _2571) + _2381;
    }
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_1906.y == 0u)
    {
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _490) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _489) / _2593)));
        float _2614 = (log2(_1684 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2876)
                {
                    frontier_phi_73_pred = _2865;
                    frontier_phi_73_pred_1 = _2864;
                    frontier_phi_73_pred_2 = _2863;
                    frontier_phi_73_pred_3 = _2862;
                    frontier_phi_73_pred_4 = _2861;
                    frontier_phi_73_pred_5 = _2860;
                }
                else
                {
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    uint _3011;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2875;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3015 = uint(findLSB(_3011)) + (_2866 << 5u);
                        uint _3012 = (_3011 + 4294967295u) & _3011;
                        uint _3017 = _3015 * 48u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3037 = (_3015 * 48u) + 4u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3056 = (_3015 * 48u) + 8u;
                        vec3 _3067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x));
                        float _3071 = _3031.x - _1682;
                        float _3072 = _3031.y - _1683;
                        float _3073 = _3031.z - _1684;
                        float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                        float _3077 = inversesqrt(_3074);
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3081 = dot(vec3(_510, _513, _516), vec3(_3078, _3079, _3080));
                        float _3086 = 1.0 - (_3074 * _3031.w);
                        float _4487 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3088 = sqrt(_3074) * _3050.w;
                        float _3091 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3081) + _3092;
                        float _3098 = _3088 * _3088;
                        float _3102 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3087) / ((_3098 * 0.699999988079071044921875) + 1.0);
                        float _3106 = (-0.0) - _1682;
                        float _3107 = (-0.0) - _1683;
                        float _3108 = (-0.0) - _1684;
                        float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3122 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                        float _3123 = 1.0 - _586;
                        float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                        float _3131 = _3130 * _3130;
                        float _3132 = _3131 * _3131;
                        float _3133 = _3113 + _3078;
                        float _3134 = _3114 + _3079;
                        float _3135 = _3115 + _3080;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3143 = dot(vec3(_510, _513, _516), vec3(_3113, _3114, _3115));
                        float _4503 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3147 = dot(vec3(_510, _513, _516), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                        float _4514 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                        float _3155 = _3091 * _3131;
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3081) + _3156;
                        float _4525 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3161 = 1.0 - _3131;
                        float _3171 = (0.5 / (((_3160 * ((_3146 * _3161) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3131) * _3146))) * _3160;
                        float _4536 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3182 = (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3154 * _3154) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125))) * _3087;
                        _2935 = (_3102 * _3050.x) + _3008;
                        _2936 = (_3102 * _3050.y) + _3009;
                        _2937 = (_3102 * _3050.z) + _3010;
                        _2932 = (_3182 * _3067.x) + _3005;
                        _2933 = (_3182 * _3067.y) + _3006;
                        _2934 = (_3182 * _3067.z) + _3007;
                        if (_3012 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _3012;
                        }
                    }
                    frontier_phi_73_pred = _2937;
                    frontier_phi_73_pred_1 = _2936;
                    frontier_phi_73_pred_2 = _2935;
                    frontier_phi_73_pred_3 = _2934;
                    frontier_phi_73_pred_4 = _2933;
                    frontier_phi_73_pred_5 = _2932;
                }
                _2719 = frontier_phi_73_pred;
                _2717 = frontier_phi_73_pred_1;
                _2715 = frontier_phi_73_pred_2;
                _2713 = frontier_phi_73_pred_3;
                _2711 = frontier_phi_73_pred_4;
                _2709 = frontier_phi_73_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2709;
                    _2861 = _2711;
                    _2862 = _2713;
                    _2863 = _2715;
                    _2864 = _2717;
                    _2865 = _2719;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2725) & _2624) == 0u)
        {
            _2828 = _2708;
            _2830 = _2710;
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
            float _2854 = _2853 * _1682;
            float _2855 = _2853 * _1683;
            float _2856 = _2853 * _1684;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2988 = _2708;
                float _2989 = _2710;
                float _2990 = _2712;
                float _2991 = _2714;
                float _2992 = _2716;
                float _2993 = _2718;
                uint _2994 = _2725;
                uint _3003;
                bool _3004;
                for (;;)
                {
                    _3003 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                    _3004 = _3003 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3004)
                    {
                        frontier_phi_84_pred = _2992;
                        frontier_phi_84_pred_1 = _2991;
                        frontier_phi_84_pred_2 = _2990;
                        frontier_phi_84_pred_3 = _2989;
                        frontier_phi_84_pred_4 = _2988;
                        frontier_phi_84_pred_5 = _2993;
                    }
                    else
                    {
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        float _3212 = _2991;
                        float _3213 = _2992;
                        float _3214 = _2993;
                        uint _3215 = _3003;
                        uint _3216;
                        vec4 _3241;
                        float _3242;
                        vec4 _3257;
                        vec3 _3269;
                        vec4 _3285;
                        vec4 _3301;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3226 = ((_2994 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3215));
                            _3216 = (_3215 + 4294967295u) & _3215;
                            uint _3228 = _3226 * 40u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3242 = _3241.w;
                            uint _3244 = (_3226 * 40u) + 4u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3226 * 40u) + 8u;
                            _3269 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x));
                            uint _3272 = (_3226 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3226 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3304 = (_3226 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3226 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_1684, _3336.z, fma(_1683, _3336.y, _3336.x * _1682)) + _3336.w;
                            _3349 = !((fma(_1684, _3317.z, fma(_1683, _3317.y, _3317.x * _1682)) + _3317.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3349)
                            {
                                float _3376 = _3241.x - _1682;
                                float _3377 = _3241.y - _1683;
                                float _3378 = _3241.z - _1684;
                                float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                                float _3382 = inversesqrt(_3379);
                                float _3383 = _3382 * _3376;
                                float _3384 = _3382 * _3377;
                                float _3385 = _3382 * _3378;
                                float _3389 = 1.0 - (_3379 / (_3242 * _3242));
                                float _4547 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3394 = sqrt(_3379) * _3257.w;
                                float _3396 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                                float _3397 = _3396 * _3396;
                                float _3400 = ((1.0 - _3397) * dot(vec3(_3383, _3384, _3385), vec3(_510, _513, _516))) + _3397;
                                float _3403 = _3394 * _3394;
                                float _3407 = (fma(_1684, _3285.z, fma(_1683, _3285.y, _3285.x * _1682)) + _3285.w) / _3348;
                                float _3408 = (fma(_1684, _3301.z, fma(_1683, _3301.y, _3301.x * _1682)) + _3301.w) / _3348;
                                float _3412 = 1.0 - dot(vec2(_3407, _3408), vec2(_3407, _3408));
                                float _4563 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3414 = _3413 * (((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3390) / ((_3403 * 0.699999988079071044921875) + 1.0));
                                float _3426 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                                float _3427 = 1.0 - _586;
                                float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                                float _3435 = _3434 * _3434;
                                float _3436 = _3435 * _3435;
                                float _3437 = _3383 - _2854;
                                float _3438 = _3384 - _2855;
                                float _3439 = _3385 - _2856;
                                float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                                float _3447 = dot(vec3(_510, _513, _516), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4574 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3451 = dot(vec3(_510, _513, _516), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                                float _4585 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                                float _3459 = _3396 * _3435;
                                float _3460 = _3459 * _3459;
                                float _3466 = ((1.0 - _3460) * dot(vec3(_510, _513, _516), vec3(_3383, _3384, _3385))) + _3460;
                                float _4596 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3468 = 1.0 - _3435;
                                float _3478 = (0.5 / (((_3467 * ((_3450 * _3468) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3435) * _3450))) * _3467;
                                float _4607 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3488 = (_3413 * _3390) * (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3458 * _3458) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3414 * _3257.y;
                                frontier_phi_90_pred_1 = _3414 * _3257.x;
                                frontier_phi_90_pred_2 = _3488 * _3269.z;
                                frontier_phi_90_pred_3 = _3488 * _3269.y;
                                frontier_phi_90_pred_4 = _3488 * _3269.x;
                                frontier_phi_90_pred_5 = _3414 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3496 = frontier_phi_90_pred;
                            _3495 = frontier_phi_90_pred_1;
                            _3494 = frontier_phi_90_pred_2;
                            _3493 = frontier_phi_90_pred_3;
                            _3492 = frontier_phi_90_pred_4;
                            _3497 = frontier_phi_90_pred_5;
                            _3199 = _3495 + _3212;
                            _3200 = _3496 + _3213;
                            _3201 = _3497 + _3214;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3198 = _3494 + _3211;
                            if (_3216 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3216;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3200;
                        frontier_phi_84_pred_1 = _3199;
                        frontier_phi_84_pred_2 = _3198;
                        frontier_phi_84_pred_3 = _3197;
                        frontier_phi_84_pred_4 = _3196;
                        frontier_phi_84_pred_5 = _3201;
                    }
                    _2837 = frontier_phi_84_pred;
                    _2835 = frontier_phi_84_pred_1;
                    _2833 = frontier_phi_84_pred_2;
                    _2831 = frontier_phi_84_pred_3;
                    _2829 = frontier_phi_84_pred_4;
                    _2839 = frontier_phi_84_pred_5;
                    uint _2995 = _2994 + 1u;
                    if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2988 = _2829;
                        _2989 = _2831;
                        _2990 = _2833;
                        _2991 = _2835;
                        _2992 = _2837;
                        _2993 = _2839;
                        _2994 = _2995;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2839;
                frontier_phi_65_66_ladder_1 = _2835;
                frontier_phi_65_66_ladder_2 = _2837;
                frontier_phi_65_66_ladder_3 = _2831;
                frontier_phi_65_66_ladder_4 = _2829;
                frontier_phi_65_66_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_65_66_ladder = _2718;
                frontier_phi_65_66_ladder_1 = _2714;
                frontier_phi_65_66_ladder_2 = _2716;
                frontier_phi_65_66_ladder_3 = _2710;
                frontier_phi_65_66_ladder_4 = _2708;
                frontier_phi_65_66_ladder_5 = _2712;
            }
            _2828 = frontier_phi_65_66_ladder_4;
            _2830 = frontier_phi_65_66_ladder_3;
            _2832 = frontier_phi_65_66_ladder_5;
            _2834 = frontier_phi_65_66_ladder_1;
            _2836 = frontier_phi_65_66_ladder_2;
            _2838 = frontier_phi_65_66_ladder;
        }
        float _2843 = isnan(1.0) ? _570 : (isnan(_570) ? 1.0 : min(_570, 1.0));
        _2636 = (_2843 * _2834) + _2149;
        _2638 = (_2843 * _2836) + _2151;
        _2640 = (_2843 * _2838) + _2153;
        _2642 = ((_2828 * _555) * _2843) + _2487;
        _2644 = ((_2830 * _557) * _2843) + _2489;
        _2646 = ((_2832 * _558) * _2843) + _2491;
    }
    else
    {
        _2636 = _2149;
        _2638 = _2151;
        _2640 = _2153;
        _2642 = _2487;
        _2644 = _2489;
        _2646 = _2491;
    }
    float _4623 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4634 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4645 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4656 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _2664 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2636 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _570))) + ((_2642 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    float _2665 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2638 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _570))) + ((_2644 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    float _2666 = ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2640 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _570))) + ((_2646 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    float _2667 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2668 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2674 = cbInstanceData._m0[_529 + 6u].w * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)));
    float _2679 = _489 / cbSceneParam._m0[86u].x;
    float _2680 = _490 / cbSceneParam._m0[86u].y;
    vec4 _2694 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2696 = _2694.x;
    float _2697 = _2694.y;
    float _2698 = _2694.z;
    float _2699 = _2694.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2734 = _2733 / _415;
        float _2745 = _2734 * _466;
        float _2746 = _467 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2748 = _2734 * _468;
        float _2750 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2746;
        float _2758 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2747 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2891 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2945 = ((abs(_2758 / _2747) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2768 * _2900) - exp2(_2768 * _2901)) * _2889))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2699);
        _2770 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2696;
        _2772 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2697;
        _2774 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2698;
        _2776 = _2956 * _2699;
    }
    else
    {
        _2770 = _2696;
        _2772 = _2697;
        _2774 = _2698;
        _2776 = _2699;
    }
    bool _2983;
    vec4 _2786;
    vec4 _2808;
    float _2810;
    float _2814;
    float _2815;
    float _2816;
    float _2817;
    bool _2827;
    for (;;)
    {
        _2786 = cbMatDynParam._m0[0u];
        float _2788 = roundEven(_2786.y);
        bool _2789 = _2788 == 3.0;
        float _2790 = log2(_2776);
        float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * _2667;
        float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * _2668;
        float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * _2669;
        float _2806 = _478 + (-0.5);
        _2808 = cbMtdParam._m0[1u];
        _2810 = _2808.y * _2806;
        float _2813 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2814 = _2813 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
        _2815 = _2813 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
        _2816 = _2813 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
        _2817 = _2806 * 0.999000012874603271484375;
        _2827 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2827)
        {
            if ((cbInstanceData._m0[_529 + 7u].x + _2817) < 0.5)
            {
                _2983 = true;
                break;
            }
        }
        uint _2924 = _531 + uint(_2786.w);
        if ((cbInstanceData._m0[_2924].w < 1.0) && ((cbInstanceData._m0[_2924].w + _2817) < 0.5))
        {
            _2983 = true;
            break;
        }
        if ((_2810 + _333) < _2808.x)
        {
            _2983 = true;
            break;
        }
        _2983 = false;
        break;
    }
    float _3187;
    if (_2983)
    {
        discard_state = true;
        _3187 = 0.0;
    }
    else
    {
        _3187 = _2674;
    }
    SV_Target.x = _2814;
    SV_Target.y = _2815;
    SV_Target.z = _2816;
    SV_Target.w = _3187;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2674;
    discard_exit();
}


