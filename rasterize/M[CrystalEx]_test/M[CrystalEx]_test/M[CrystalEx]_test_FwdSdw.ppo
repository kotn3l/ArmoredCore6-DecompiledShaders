#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test_snp_0_Screen_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _680;
uint _2404;
uint _2405;
uint _2406;
uint _2667;
uint _2668;
uint _2669;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _154 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _155 = _154 * NORMAL.x;
    float _156 = _154 * NORMAL.y;
    float _157 = _154 * NORMAL.z;
    float _162;
    float _163;
    float _164;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _162 = (-0.0) - _155;
        _163 = (-0.0) - _156;
        _164 = (-0.0) - _157;
    }
    else
    {
        _162 = _155;
        _163 = _156;
        _164 = _157;
    }
    float _209 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _219 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _209);
    float _220 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _209);
    float _221 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _209);
    float _235 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _236 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _242 = _235 / cbSceneParam._m0[86u].x;
    float _243 = _236 / cbSceneParam._m0[86u].y;
    float _250 = isnan(cbInstanceData._m0[8u].x) ? _242 : (isnan(_242) ? cbInstanceData._m0[8u].x : max(_242, cbInstanceData._m0[8u].x));
    float _251 = isnan(cbInstanceData._m0[8u].y) ? _243 : (isnan(_243) ? cbInstanceData._m0[8u].y : max(_243, cbInstanceData._m0[8u].y));
    vec4 _256 = texture(sampler2D(M_CrystalEx_test_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _250 : (isnan(_250) ? cbInstanceData._m0[8u].z : min(_250, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _251 : (isnan(_251) ? cbInstanceData._m0[8u].w : min(_251, cbInstanceData._m0[8u].w))));
    float _279 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _280 = _279 * _219;
    float _281 = _279 * _220;
    float _282 = _279 * _221;
    float _286 = abs(dot(vec4(_162, _163, _164, 0.0), vec4(_280, _281, _282, 0.0)));
    float _287 = log2(cbMtdParam._m0[10u].y);
    float _309 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _310 = _309 * _162;
    float _311 = _309 * _163;
    float _312 = _309 * _164;
    float _2944 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _314 = isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0));
    float _2955 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _315 = isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0));
    float _2966 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _316 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
    float _2977 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _317 = isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0));
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _357 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _360 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    float _361 = _314 * 3.3333332538604736328125;
    float _363 = _315 * 3.3333332538604736328125;
    float _364 = _316 * 3.3333332538604736328125;
    float _372 = ((isnan(1.0) ? _361 : (isnan(_361) ? 1.0 : min(_361, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _374 = ((isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _375 = ((isnan(1.0) ? _364 : (isnan(_364) ? 1.0 : min(_364, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _381 = (_314 + (-0.0599999986588954925537109375)) + (isnan(_372) ? 0.0 : (isnan(0.0) ? _372 : max(0.0, _372)));
    float _383 = (_315 + (-0.0599999986588954925537109375)) + (isnan(_374) ? 0.0 : (isnan(0.0) ? _374 : max(0.0, _374)));
    float _385 = (_316 + (-0.0599999986588954925537109375)) + (isnan(_375) ? 0.0 : (isnan(0.0) ? _375 : max(0.0, _375)));
    float _397 = (_381 * _381) - ((0.02999999932944774627685546875 - _314) * 0.119999997317790985107421875);
    float _398 = (_383 * _383) - ((0.02999999932944774627685546875 - _315) * 0.119999997317790985107421875);
    float _399 = (_385 * _385) - ((0.02999999932944774627685546875 - _316) * 0.119999997317790985107421875);
    float _409 = (sqrt(isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0))) - _381) * 16.666667938232421875;
    float _411 = (sqrt(isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0))) - _383) * 16.666667938232421875;
    float _412 = (sqrt(isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0))) - _385) * 16.666667938232421875;
    float _413 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _415 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _426 = (((isnan(1.0) ? _414 : (isnan(_414) ? 1.0 : min(_414, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0))) * 0.114000000059604644775390625);
    float _427 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    vec4 _432 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _235, cbSceneParam._m0[86u].y * _236));
    float _435 = _432.x * TEXCOORD.z;
    float _436 = dot(vec3(_310, _311, _312), vec3(_280, _281, _282));
    float _439 = _436 * 2.0;
    float _444 = (_439 * _310) - _280;
    float _445 = (_439 * _311) - _281;
    float _446 = (_439 * _312) - _282;
    float _450 = abs(dot(vec3(_280, _281, _282), vec3(_310, _311, _312)));
    float _3073 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
    float _457 = sqrt(_317);
    float _469 = exp2((_457 * 5.0) * log2(1.0 - (_451 * 0.999000012874603271484375))) / (4.0 - (_457 * 3.0));
    float _475 = (1.0 - _469) * ((_457 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _476 = _469 * _457;
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _679;
    float _681;
    float _682;
    float _683;
    float _684;
    float _685;
    float _686;
    float _687;
    float _688;
    float _689;
    float _690;
    float _691;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _539 = fma(_512, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _504));
        float _543 = fma(_512, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _504));
        float _547 = fma(_512, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _504));
        float _572 = _504 + _310;
        float _573 = _508 + _311;
        float _574 = _512 + _312;
        float _584 = fma(_574, cbModelParam._m0[26u].z, fma(_573, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572)) - _539;
        float _585 = fma(_574, cbModelParam._m0[27u].z, fma(_573, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572)) - _543;
        float _586 = fma(_574, cbModelParam._m0[28u].z, fma(_573, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572)) - _547;
        float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
        float _603 = ((_590 * _584) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_539 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _604 = ((_590 * _585) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_543 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _605 = ((_590 * _586) / cbModelParam._m0[34u].z) + ((((((_547 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        float _642 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _652 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _662 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _672 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_629.x + (-0.5));
        float _674 = _672 * (_629.y + (-0.5));
        float _675 = _672 * (_629.z + (-0.5));
        _679 = _642 * (_608.z + (-0.5));
        _681 = _642 * (_608.y + (-0.5));
        _682 = _642 * (_608.x + (-0.5));
        _683 = _652 * (_615.z + (-0.5));
        _684 = _652 * (_615.y + (-0.5));
        _685 = _652 * (_615.x + (-0.5));
        _686 = _662 * (_622.z + (-0.5));
        _687 = _662 * (_622.y + (-0.5));
        _688 = _662 * (_622.x + (-0.5));
        _689 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        _690 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        _691 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    }
    else
    {
        _679 = _680;
        _681 = _680;
        _682 = _680;
        _683 = _680;
        _684 = _680;
        _685 = _680;
        _686 = _680;
        _687 = _680;
        _688 = _680;
        _689 = _680;
        _690 = _680;
        _691 = _680;
    }
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _717 = fma(_512, cbModelParam._m0[30u].z, fma(_508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _504));
        float _721 = fma(_512, cbModelParam._m0[31u].z, fma(_508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _504));
        float _725 = fma(_512, cbModelParam._m0[32u].z, fma(_508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _504));
        float _748 = _504 + _310;
        float _749 = _508 + _311;
        float _750 = _512 + _312;
        float _760 = fma(_750, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _748)) - _717;
        float _761 = fma(_750, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _748)) - _721;
        float _762 = fma(_750, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _748)) - _725;
        float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
        float _779 = ((_766 * _760) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_717 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_766 * _761) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_721 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_766 * _762) / cbModelParam._m0[35u].z) + ((((((_725 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _816 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _826 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _836 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _846 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_804.x + (-0.5));
        float _848 = _846 * (_804.y + (-0.5));
        float _849 = _846 * (_804.z + (-0.5));
        _853 = _816 * (_783.z + (-0.5));
        _854 = _816 * (_783.y + (-0.5));
        _855 = _816 * (_783.x + (-0.5));
        _856 = _826 * (_790.z + (-0.5));
        _857 = _826 * (_790.y + (-0.5));
        _858 = _826 * (_790.x + (-0.5));
        _859 = _836 * (_797.z + (-0.5));
        _860 = _836 * (_797.y + (-0.5));
        _861 = _836 * (_797.x + (-0.5));
        _862 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        _863 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        _864 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    }
    else
    {
        _853 = _680;
        _854 = _680;
        _855 = _680;
        _856 = _680;
        _857 = _680;
        _858 = _680;
        _859 = _680;
        _860 = _680;
        _861 = _680;
        _862 = _680;
        _863 = _680;
        _864 = _680;
    }
    float _879 = _444 * 0.5;
    float _880 = _445 * 0.5;
    float _881 = _446 * 0.5;
    float _882 = dot(vec4(_879, _880, _881, 1.0), vec4(_855, _858, _861, _864));
    float _885 = dot(vec4(_879, _880, _881, 1.0), vec4(_854, _857, _860, _863));
    float _888 = dot(vec4(_879, _880, _881, 1.0), vec4(_853, _856, _859, _862));
    float _923;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _895 = dot(vec4(_879, _880, _881, 1.0), vec4(_679, _683, _686, _689));
        float _899 = dot(vec4(_879, _880, _881, 1.0), vec4(_681, _684, _687, _690));
        float _903 = dot(vec4(_879, _880, _881, 1.0), vec4(_682, _685, _688, _691));
        float _910 = dot(vec4(cbModelParam._m0[39u]), vec4(_879, _880, _881, 1.0));
        _923 = dot(vec3(isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)), isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)), isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_910) ? 0.0 : (isnan(0.0) ? _910 : max(0.0, _910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _923 = 1.0;
    }
    float _934;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _925 = dot(vec4(cbModelParam._m0[40u]), vec4(_879, _880, _881, 1.0));
        _934 = dot(vec3(isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)), isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)), isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_925) ? 0.0 : (isnan(0.0) ? _925 : max(0.0, _925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _934 = 1.0;
    }
    float _938 = (_934 * cbModelParam._m0[1u].x) + (_923 * (1.0 - cbModelParam._m0[1u].x));
    float _946 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _317);
    float _947 = isnan(_946) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _946 : min(cbModelParam._m0[25u].z, _946));
    float _1030;
    float _1032;
    float _1034;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _997 = fma(_512, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504)) + cbModelParam._m0[13u].w;
        float _1001 = fma(_512, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504)) + cbModelParam._m0[14u].w;
        float _1005 = fma(_512, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504)) + cbModelParam._m0[15u].w;
        float _1008 = fma(_446, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _444));
        float _1011 = fma(_446, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _444));
        float _1014 = fma(_446, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _444));
        float _1042;
        if (_1008 > 0.0)
        {
            _1042 = abs((1.0 - _997) / _1008);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1008 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_997 + 1.0) / _1008);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1042 = frontier_phi_16_14_ladder;
        }
        float _1235;
        if (_1011 > 0.0)
        {
            _1235 = abs((1.0 - _1001) / _1011);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1011 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1001 + 1.0) / _1011);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1235 = frontier_phi_25_21_ladder;
        }
        float _1654;
        if (_1014 > 0.0)
        {
            _1654 = abs((1.0 - _1005) / _1014);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1014 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1005 + 1.0) / _1014);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1654 = frontier_phi_37_32_ladder;
        }
        float _1656 = isnan(_1235) ? _1042 : (isnan(_1042) ? _1235 : min(_1042, _1235));
        float _1657 = isnan(_1654) ? _1656 : (isnan(_1656) ? _1654 : min(_1656, _1654));
        float _1661 = (_1657 * _1008) + _997;
        float _1662 = (_1657 * _1011) + _1001;
        float _1663 = (_1657 * _1014) + _1005;
        float _1664 = _1657 * 9.9999997473787516355514526367188e-05;
        float _1666 = (-1.0) - _1664;
        float _1668 = _1664 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1663 > _1668) || ((_1663 < _1666) || ((_1662 > _1668) || ((_1662 < _1666) || ((_1661 < _1666) || (_1661 > _1668))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1663, cbModelParam._m0[9u].z, fma(_1662, cbModelParam._m0[9u].y, _1661 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1663, cbModelParam._m0[10u].z, fma(_1662, cbModelParam._m0[10u].y, _1661 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1663, cbModelParam._m0[11u].z, fma(_1662, cbModelParam._m0[11u].y, _1661 * cbModelParam._m0[11u].x))), _947);
            frontier_phi_15_37_ladder = _1865.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1865.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1865.x * cbModelParam._m0[1u].y;
        }
        _1030 = frontier_phi_15_37_ladder_2;
        _1032 = frontier_phi_15_37_ladder_1;
        _1034 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_444, _445, _446), _947);
        _1030 = _1018.x * cbModelParam._m0[1u].y;
        _1032 = _1018.y * cbModelParam._m0[1u].y;
        _1034 = _1018.z * cbModelParam._m0[1u].y;
    }
    float _1038 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _317);
    float _1039 = isnan(_1038) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1038 : min(cbModelParam._m0[25u].w, _1038));
    float _1132;
    float _1134;
    float _1136;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1096 = fma(_512, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504)) + cbModelParam._m0[21u].w;
        float _1100 = fma(_512, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504)) + cbModelParam._m0[22u].w;
        float _1104 = fma(_512, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504)) + cbModelParam._m0[23u].w;
        float _1107 = fma(_446, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _444));
        float _1110 = fma(_446, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _444));
        float _1113 = fma(_446, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _444));
        float _1240;
        if (_1107 > 0.0)
        {
            _1240 = abs((1.0 - _1096) / _1107);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1107 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1096 + 1.0) / _1107);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1240 = frontier_phi_27_23_ladder;
        }
        float _1681;
        if (_1110 > 0.0)
        {
            _1681 = abs((1.0 - _1100) / _1110);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1110 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1100 + 1.0) / _1110);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1681 = frontier_phi_39_34_ladder;
        }
        float _1968;
        if (_1113 > 0.0)
        {
            _1968 = abs((1.0 - _1104) / _1113);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1113 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1104 + 1.0) / _1113);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1968 = frontier_phi_49_46_ladder;
        }
        float _1970 = isnan(_1681) ? _1240 : (isnan(_1240) ? _1681 : min(_1240, _1681));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1107) + _1096;
        float _1976 = (_1971 * _1110) + _1100;
        float _1977 = (_1971 * _1113) + _1104;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1978;
        float _1981 = _1978 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_1977 > _1981) || ((_1977 < _1979) || ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 < _1979) || (_1975 > _1981))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2126 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1977, cbModelParam._m0[17u].z, fma(_1976, cbModelParam._m0[17u].y, _1975 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1977, cbModelParam._m0[18u].z, fma(_1976, cbModelParam._m0[18u].y, _1975 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1977, cbModelParam._m0[19u].z, fma(_1976, cbModelParam._m0[19u].y, _1975 * cbModelParam._m0[19u].x))), _1039);
            frontier_phi_24_49_ladder = _2126.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2126.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2126.x * cbModelParam._m0[1u].z;
        }
        _1132 = frontier_phi_24_49_ladder_2;
        _1134 = frontier_phi_24_49_ladder_1;
        _1136 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_444, _445, _446), _1039);
        _1132 = _1116.x * cbModelParam._m0[1u].z;
        _1134 = _1116.y * cbModelParam._m0[1u].z;
        _1136 = _1116.z * cbModelParam._m0[1u].z;
    }
    float _1149 = (((_475 * _314) + _476) * _435) * ((cbModelParam._m0[1u].w * (_1132 - _1030)) + _1030);
    float _1151 = (((_475 * _315) + _476) * _435) * ((cbModelParam._m0[1u].w * (_1134 - _1032)) + _1032);
    float _1153 = (((_475 * _316) + _476) * _435) * ((cbModelParam._m0[1u].w * (_1136 - _1034)) + _1034);
    float _1174 = fma(_1153, cbSceneParam._m0[89u].z, fma(_1151, cbSceneParam._m0[89u].y, _1149 * cbSceneParam._m0[89u].x));
    float _1177 = fma(_1153, cbSceneParam._m0[90u].z, fma(_1151, cbSceneParam._m0[90u].y, _1149 * cbSceneParam._m0[90u].x));
    float _1180 = fma(_1153, cbSceneParam._m0[91u].z, fma(_1151, cbSceneParam._m0[91u].y, _1149 * cbSceneParam._m0[91u].x));
    float _1214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1227 = _1214 / _1226;
    float _1228 = _1218 / _1226;
    float _1229 = _1222 / _1226;
    float _1376;
    float _1377;
    float _1378;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1256 = ((uint(_1229 > cbSceneParam._m0[59u].y) + uint(_1229 > cbSceneParam._m0[59u].x)) + uint(_1229 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1257 = _1256 + 43u;
        uint _1265 = _1256 + 44u;
        uint _1273 = _1256 + 45u;
        uint _1281 = _1256 + 46u;
        float _1292 = fma(_1226, cbSceneParam._m0[_1257].w, fma(_1222, cbSceneParam._m0[_1257].z, fma(_1218, cbSceneParam._m0[_1257].y, _1214 * cbSceneParam._m0[_1257].x)));
        float _1296 = fma(_1226, cbSceneParam._m0[_1265].w, fma(_1222, cbSceneParam._m0[_1265].z, fma(_1218, cbSceneParam._m0[_1265].y, _1214 * cbSceneParam._m0[_1265].x)));
        float _1304 = fma(_1226, cbSceneParam._m0[_1281].w, fma(_1222, cbSceneParam._m0[_1281].z, fma(_1218, cbSceneParam._m0[_1281].y, _1214 * cbSceneParam._m0[_1281].x)));
        float _1309 = cbSceneParam._m0[33u].z * _1304;
        float _1311 = cbSceneParam._m0[33u].w * _1304;
        float _1314 = fma(_1226, cbSceneParam._m0[_1273].w, fma(_1222, cbSceneParam._m0[_1273].z, fma(_1218, cbSceneParam._m0[_1273].y, _1214 * cbSceneParam._m0[_1273].x))) / _1304;
        float _1362 = (cbSceneParam._m0[33u].x - sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229))) * cbSceneParam._m0[33u].y;
        float _3199 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1369 = (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1309 + _1292) / _1304, (_1311 + _1296) / _1304), _1314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1311 + _1292) / _1304, (_1296 - _1309) / _1304), _1314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1292 - _1309) / _1304, (_1296 - _1311) / _1304), _1314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1292 - _1311) / _1304, (_1309 + _1296) / _1304), _1314), 0.0)).x), vec4(0.25)));
        _1376 = 1.0 - (_1369 * cbSceneParam._m0[34u].x);
        _1377 = 1.0 - (_1369 * cbSceneParam._m0[34u].y);
        _1378 = 1.0 - (_1369 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1376 = 1.0;
        _1377 = 1.0;
        _1378 = 1.0;
    }
    float _1442;
    float _1444;
    float _1446;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1430 = fma(_1226, cbSceneParam._m0[63u].w, fma(_1222, cbSceneParam._m0[63u].z, fma(_1218, cbSceneParam._m0[63u].y, _1214 * cbSceneParam._m0[63u].x)));
        float _1431 = fma(_1226, cbSceneParam._m0[60u].w, fma(_1222, cbSceneParam._m0[60u].z, fma(_1218, cbSceneParam._m0[60u].y, _1214 * cbSceneParam._m0[60u].x))) / _1430;
        float _1432 = fma(_1226, cbSceneParam._m0[61u].w, fma(_1222, cbSceneParam._m0[61u].z, fma(_1218, cbSceneParam._m0[61u].y, _1214 * cbSceneParam._m0[61u].x))) / _1430;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1431 >= cbSceneParam._m0[64u].x) && (_1432 >= cbSceneParam._m0[64u].y)) && (_1431 <= cbSceneParam._m0[64u].z)) && (_1432 <= cbSceneParam._m0[64u].w))
        {
            float _1694 = fma(_1226, cbSceneParam._m0[62u].w, fma(_1222, cbSceneParam._m0[62u].z, fma(_1218, cbSceneParam._m0[62u].y, _1214 * cbSceneParam._m0[62u].x))) / _1430;
            float _1698 = isnan(cbSceneParam._m0[41u].w) ? _1694 : (isnan(_1694) ? cbSceneParam._m0[41u].w : max(_1694, cbSceneParam._m0[41u].w));
            float _1741 = (cbSceneParam._m0[33u].x - sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229))) * cbSceneParam._m0[33u].y;
            float _3215 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
            float _1748 = (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1431, cbSceneParam._m0[33u].w + _1432), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1431, _1432 - cbSceneParam._m0[33u].z), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1431 - cbSceneParam._m0[33u].z, _1432 - cbSceneParam._m0[33u].w), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1431 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1432), _1698), 0.0)).x), vec4(0.25)));
            float _1752 = 1.0 - (_1748 * cbSceneParam._m0[34u].x);
            float _1753 = 1.0 - (_1748 * cbSceneParam._m0[34u].y);
            float _1754 = 1.0 - (_1748 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1754) ? _1378 : (isnan(_1378) ? _1754 : min(_1378, _1754));
            frontier_phi_36_35_ladder_1 = isnan(_1752) ? _1376 : (isnan(_1376) ? _1752 : min(_1376, _1752));
            frontier_phi_36_35_ladder_2 = isnan(_1753) ? _1377 : (isnan(_1377) ? _1753 : min(_1377, _1753));
        }
        else
        {
            frontier_phi_36_35_ladder = _1378;
            frontier_phi_36_35_ladder_1 = _1376;
            frontier_phi_36_35_ladder_2 = _1377;
        }
        _1442 = frontier_phi_36_35_ladder_1;
        _1444 = frontier_phi_36_35_ladder_2;
        _1446 = frontier_phi_36_35_ladder;
    }
    else
    {
        _1442 = _1376;
        _1444 = _1377;
        _1446 = _1378;
    }
    uint _1448 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1452 = floatBitsToUint(cbInstanceData._m0[_1448 + 5u]);
    uint _1454 = _1452.x * 14u;
    uint _1455 = _1454 + 13u;
    float _1461 = _435 + (-1.0);
    float _1466 = (cbLight._m0[_1455].x * _1461) + 1.0;
    float _1467 = (cbLight._m0[_1455].y * _1461) + 1.0;
    float _1468 = (cbLight._m0[_1455].w * _1461) + 1.0;
    uint _1472 = _1454 + 8u;
    float _1488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1454].w)) * _317) * 0.949999988079071044921875);
    float _1489 = _1488 * _1488;
    float _1490 = cbLight._m0[_1454].x + _280;
    float _1491 = cbLight._m0[_1454].y + _281;
    float _1492 = cbLight._m0[_1454].z + _282;
    float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
    float _1497 = _1496 * _1490;
    float _1498 = _1496 * _1491;
    float _1499 = _1496 * _1492;
    float _1500 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1454].xyz));
    float _3241 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
    float _1503 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _3252 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _1504 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _1505 = dot(vec3(_310, _311, _312), vec3(_1497, _1498, _1499));
    float _3263 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
    float _1508 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _1509 = dot(vec3(cbLight._m0[_1454].xyz), vec3(_1497, _1498, _1499));
    float _3274 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1513 = _1489 * _1489;
    float _1517 = ((_1508 * _1508) * (_1513 + (-1.0))) + 1.0;
    float _1525 = exp2(log2(1.0 - (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * 5.0);
    float _1526 = 1.0 - _314;
    float _1527 = 1.0 - _315;
    float _1528 = 1.0 - _316;
    float _1535 = 1.0 - _1489;
    float _1546 = (0.5 / (((_1504 * ((_1503 * _1535) + _1489)) + 9.9999999392252902907785028219223e-09) + (((_1504 * _1535) + _1489) * _1503))) * _1503;
    float _3285 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1548 = (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_1513 / ((_1517 * _1517) * 3.141590118408203125));
    float _1549 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
    uint _1562 = _1454 | 1u;
    uint _1566 = _1454 + 9u;
    float _1580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _317) * 0.949999988079071044921875);
    float _1581 = _1580 * _1580;
    float _1582 = cbLight._m0[_1562].x + _280;
    float _1583 = cbLight._m0[_1562].y + _281;
    float _1584 = cbLight._m0[_1562].z + _282;
    float _1588 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
    float _1589 = _1588 * _1582;
    float _1590 = _1588 * _1583;
    float _1591 = _1588 * _1584;
    float _1592 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1562].xyz));
    float _3301 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1595 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _1596 = dot(vec3(_310, _311, _312), vec3(_1589, _1590, _1591));
    float _3312 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1599 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _1600 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1589, _1590, _1591));
    float _3323 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1604 = _1581 * _1581;
    float _1608 = ((_1599 * _1599) * (_1604 + (-1.0))) + 1.0;
    float _1615 = exp2(log2(1.0 - (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * 5.0);
    float _1622 = 1.0 - _1581;
    float _1632 = (0.5 / (((_1504 * ((_1595 * _1622) + _1581)) + 9.9999999392252902907785028219223e-09) + (((_1504 * _1622) + _1581) * _1595))) * _1595;
    float _3334 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1634 = (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_1604 / ((_1608 * _1608) * 3.141590118408203125));
    float _1635 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
    float _1645 = (((((_1615 * _1526) + _314) * cbLight._m0[_1566].x) * _1634) * _1635) + ((((cbLight._m0[_1472].x * _1442) * ((_1525 * _1526) + _314)) * _1548) * _1549);
    float _1646 = (((((_1615 * _1527) + _315) * cbLight._m0[_1566].y) * _1634) * _1635) + ((((cbLight._m0[_1472].y * _1444) * ((_1525 * _1527) + _315)) * _1548) * _1549);
    float _1647 = (((((_1615 * _1528) + _316) * cbLight._m0[_1566].z) * _1634) * _1635) + ((((cbLight._m0[_1472].z * _1446) * ((_1525 * _1528) + _316)) * _1548) * _1549);
    uvec4 _1651 = floatBitsToUint(cbLight._m0[_1454 + 12u]);
    float _1755;
    float _1757;
    float _1759;
    if (_1651.x == 0u)
    {
        _1755 = _1645;
        _1757 = _1646;
        _1759 = _1647;
    }
    else
    {
        float _1765 = (cbLight._m0[_1455].z * _1461) + 1.0;
        uint _1766 = _1454 + 2u;
        uint _1770 = _1454 + 10u;
        float _1784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _317) * 0.949999988079071044921875);
        float _1785 = _1784 * _1784;
        float _1786 = cbLight._m0[_1766].x + _280;
        float _1787 = cbLight._m0[_1766].y + _281;
        float _1788 = cbLight._m0[_1766].z + _282;
        float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
        float _1793 = _1792 * _1786;
        float _1794 = _1792 * _1787;
        float _1795 = _1792 * _1788;
        float _1796 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1766].xyz));
        float _3350 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1799 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _1800 = dot(vec3(_310, _311, _312), vec3(_1793, _1794, _1795));
        float _3361 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1803 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1804 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1793, _1794, _1795));
        float _3372 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1808 = _1785 * _1785;
        float _1812 = ((_1803 * _1803) * (_1808 + (-1.0))) + 1.0;
        float _1819 = exp2(log2(1.0 - (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * 5.0);
        float _1826 = 1.0 - _1785;
        float _1836 = (0.5 / (((_1504 * ((_1799 * _1826) + _1785)) + 9.9999999392252902907785028219223e-09) + (((_1504 * _1826) + _1785) * _1799))) * _1799;
        float _3383 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1838 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_1808 / ((_1812 * _1812) * 3.141590118408203125));
        float _1839 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1755 = (((((_1819 * _1526) + _314) * cbLight._m0[_1770].x) * _1838) * _1839) + _1645;
        _1757 = (((((_1819 * _1527) + _315) * cbLight._m0[_1770].y) * _1838) * _1839) + _1646;
        _1759 = (((((_1819 * _1528) + _316) * cbLight._m0[_1770].z) * _1838) * _1839) + _1647;
    }
    float _1874;
    float _1876;
    float _1878;
    if (_1651.y == 0u)
    {
        _1874 = _1755;
        _1876 = _1757;
        _1878 = _1759;
    }
    else
    {
        uint _1885 = _1454 + 3u;
        uint _1889 = _1454 + 11u;
        float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _317) * 0.949999988079071044921875);
        float _1904 = _1903 * _1903;
        float _1905 = cbLight._m0[_1885].x + _280;
        float _1906 = cbLight._m0[_1885].y + _281;
        float _1907 = cbLight._m0[_1885].z + _282;
        float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
        float _1912 = _1911 * _1905;
        float _1913 = _1911 * _1906;
        float _1914 = _1911 * _1907;
        float _1915 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1885].xyz));
        float _3399 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1918 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1919 = dot(vec3(_310, _311, _312), vec3(_1912, _1913, _1914));
        float _3410 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1922 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1923 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_1912, _1913, _1914));
        float _3421 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1927 = _1904 * _1904;
        float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
        float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * 5.0);
        float _1945 = 1.0 - _1904;
        float _1955 = (0.5 / (((_1504 * ((_1918 * _1945) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1504 * _1945) + _1904) * _1918))) * _1918;
        float _3432 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1957 = (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
        float _1958 = isnan(1.0) ? _1468 : (isnan(_1468) ? 1.0 : min(_1468, 1.0));
        _1874 = (((((_1938 * _1526) + _314) * cbLight._m0[_1889].x) * _1957) * _1958) + _1755;
        _1876 = (((((_1938 * _1527) + _315) * cbLight._m0[_1889].y) * _1957) * _1958) + _1757;
        _1878 = (((((_1938 * _1528) + _316) * cbLight._m0[_1889].z) * _1957) * _1958) + _1759;
    }
    float _2050;
    float _2052;
    float _2054;
    if (_1452.y == 0u)
    {
        uvec4 _2005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2006 = _2005.x;
        uint _2017 = uint((float(_2005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _236) / _2006))) + floor(float(uint(cbSceneParam._m0[85u].x * _235) / _2006)));
        float _2027 = (log2(_1229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2028 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        uint _2031 = uint(isnan(14.0) ? _2028 : (isnan(_2028) ? 14.0 : min(_2028, 14.0)));
        uvec4 _2036 = texelFetch(g_lightClusterGridBuffer, int(((_2031 << 2u) + (_2017 << 6u)) >> 2u));
        uint _2037 = _2036.x;
        uint _2038 = _2005.z;
        float _2131;
        float _2133;
        float _2135;
        if (((((1u << ((_2038 >> 4u) & 15u)) + 4294967295u) & _2037) == 0u) || ((_2038 & 240u) == 0u))
        {
            _2131 = 0.0;
            _2133 = 0.0;
            _2135 = 0.0;
        }
        else
        {
            float _2132;
            float _2134;
            float _2136;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            uint _2262 = 0u;
            uint _2271;
            bool _2272;
            for (;;)
            {
                _2271 = texelFetch(g_lightClassification, int((((_2031 << 5u) + (_2017 << 9u)) + (_2262 << 2u)) >> 2u)).x;
                _2272 = _2271 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2272)
                {
                    frontier_phi_64_pred = _2261;
                    frontier_phi_64_pred_1 = _2260;
                    frontier_phi_64_pred_2 = _2259;
                }
                else
                {
                    float _2374;
                    float _2375;
                    float _2376;
                    uint _2377;
                    _2374 = _2259;
                    _2375 = _2260;
                    _2376 = _2261;
                    _2377 = _2271;
                    float _2312;
                    float _2313;
                    float _2314;
                    for (;;)
                    {
                        uint _2381 = uint(findLSB(_2377)) + (_2262 << 5u);
                        uint _2378 = (_2377 + 4294967295u) & _2377;
                        uint _2383 = _2381 * 48u;
                        vec4 _2397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2383)).x, texelFetch(g_PointLightRenderingBuffer, int(_2383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2383 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2383 + 3u)).x));
                        uint _2414 = (_2381 * 48u) + 8u;
                        vec3 _2425 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2414)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 2u)).x));
                        float _2429 = _2397.x - _1227;
                        float _2430 = _2397.y - _1228;
                        float _2431 = _2397.z - _1229;
                        float _2432 = dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431));
                        float _2435 = inversesqrt(_2432);
                        float _2436 = _2435 * _2429;
                        float _2437 = _2435 * _2430;
                        float _2438 = _2435 * _2431;
                        float _2444 = 1.0 - (_2432 * _2397.w);
                        float _3458 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2446 = sqrt(_2432) * uintBitsToFloat(uvec4(_2404, _2405, _2406, texelFetch(g_PointLightRenderingBuffer, int(((_2381 * 48u) + 4u) + 3u)).x)).w;
                        float _2450 = _2446 * _2446;
                        float _2451 = (-0.0) - _1227;
                        float _2452 = (-0.0) - _1228;
                        float _2453 = (-0.0) - _1229;
                        float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
                        float _2458 = _2457 * _2451;
                        float _2459 = _2457 * _2452;
                        float _2460 = _2457 * _2453;
                        float _2467 = exp2(log2(1.0 / ((_2450 * 3.5) + 5.0)) * 0.25);
                        float _2468 = 1.0 - _457;
                        float _2475 = sqrt(1.0 - ((1.0 - (_2468 * _2468)) * (1.0 - (_2467 * _2467))));
                        float _2476 = _2475 * _2475;
                        float _2477 = _2476 * _2476;
                        float _2478 = _2458 + _2436;
                        float _2479 = _2459 + _2437;
                        float _2480 = _2460 + _2438;
                        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
                        float _2488 = dot(vec3(_354, _357, _360), vec3(_2458, _2459, _2460));
                        float _3469 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _2491 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
                        float _2492 = dot(vec3(_354, _357, _360), vec3(_2484 * _2478, _2484 * _2479, _2484 * _2480));
                        float _3480 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                        float _2495 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
                        float _2499 = ((_2495 * _2495) * (_2477 + (-1.0))) + 1.0;
                        float _2500 = (1.39999997615814208984375 / (_2446 + 1.39999997615814208984375)) * _2476;
                        float _2501 = _2500 * _2500;
                        float _2504 = ((1.0 - _2501) * dot(vec3(_354, _357, _360), vec3(_2436, _2437, _2438))) + _2501;
                        float _3491 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2505 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
                        float _2506 = 1.0 - _2476;
                        float _2516 = (0.5 / (((_2505 * ((_2491 * _2506) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2506) + _2476) * _2491))) * _2505;
                        float _3502 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
                        float _2527 = (((_2477 * 3.1415927410125732421875) * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) / ((_2499 * _2499) * ((_2450 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)));
                        _2312 = (_2527 * _2425.x) + _2374;
                        _2313 = (_2527 * _2425.y) + _2375;
                        _2314 = (_2527 * _2425.z) + _2376;
                        if (_2378 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2374 = _2312;
                            _2375 = _2313;
                            _2376 = _2314;
                            _2377 = _2378;
                        }
                    }
                    frontier_phi_64_pred = _2314;
                    frontier_phi_64_pred_1 = _2313;
                    frontier_phi_64_pred_2 = _2312;
                }
                _2136 = frontier_phi_64_pred;
                _2134 = frontier_phi_64_pred_1;
                _2132 = frontier_phi_64_pred_2;
                uint _2263 = _2262 + 1u;
                if (_2263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2259 = _2132;
                    _2260 = _2134;
                    _2261 = _2136;
                    _2262 = _2263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2131 = _2132;
            _2133 = _2134;
            _2135 = _2136;
        }
        uvec4 _2139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2140 = _2139.z;
        uint _2142 = (_2140 >> 8u) & 15u;
        float _2236;
        float _2238;
        float _2240;
        if (((4294967295u << _2142) & _2037) == 0u)
        {
            _2236 = _2131;
            _2238 = _2133;
            _2240 = _2135;
        }
        else
        {
            float _2252 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
            float _2253 = _2252 * _1227;
            float _2254 = _2252 * _1228;
            float _2255 = _2252 * _1229;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            if (_2142 < ((_2140 >> 12u) & 15u))
            {
                float _2237;
                float _2239;
                float _2241;
                float _2360 = _2131;
                float _2361 = _2133;
                float _2362 = _2135;
                uint _2363 = _2142;
                uint _2372;
                bool _2373;
                for (;;)
                {
                    _2372 = texelFetch(g_lightClassification, int((((_2031 << 5u) + (_2017 << 9u)) + (_2363 << 2u)) >> 2u)).x;
                    _2373 = _2372 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    if (_2373)
                    {
                        frontier_phi_70_pred = _2362;
                        frontier_phi_70_pred_1 = _2360;
                        frontier_phi_70_pred_2 = _2361;
                    }
                    else
                    {
                        float _2532;
                        float _2533;
                        float _2534;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2542 = _2360;
                        float _2543 = _2361;
                        float _2544 = _2362;
                        uint _2545 = _2372;
                        uint _2546;
                        uint _2556;
                        vec4 _2571;
                        float _2572;
                        vec3 _2584;
                        vec4 _2600;
                        vec4 _2616;
                        float _2663;
                        bool _2664;
                        for (;;)
                        {
                            _2556 = ((_2363 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2545));
                            _2546 = (_2545 + 4294967295u) & _2545;
                            uint _2558 = _2556 * 40u;
                            _2571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 3u)).x));
                            _2572 = _2571.w;
                            uint _2574 = (_2556 * 40u) + 8u;
                            _2584 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 2u)).x));
                            uint _2587 = (_2556 * 40u) + 16u;
                            _2600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 3u)).x));
                            uint _2603 = (_2556 * 40u) + 20u;
                            _2616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 3u)).x));
                            uint _2619 = (_2556 * 40u) + 24u;
                            vec4 _2632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 3u)).x));
                            uint _2638 = (_2556 * 40u) + 28u;
                            vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            _2663 = fma(_1229, _2651.z, fma(_1228, _2651.y, _2651.x * _1227)) + _2651.w;
                            _2664 = !((fma(_1229, _2632.z, fma(_1228, _2632.y, _2632.x * _1227)) + _2632.w) <= 0.0);
                            float frontier_phi_76_pred;
                            float frontier_phi_76_pred_1;
                            float frontier_phi_76_pred_2;
                            if (_2664)
                            {
                                float _2698 = _2571.x - _1227;
                                float _2699 = _2571.y - _1228;
                                float _2700 = _2571.z - _1229;
                                float _2701 = dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700));
                                float _2704 = inversesqrt(_2701);
                                float _2705 = _2704 * _2698;
                                float _2706 = _2704 * _2699;
                                float _2707 = _2704 * _2700;
                                float _2711 = 1.0 - (_2701 / (_2572 * _2572));
                                float _3513 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                                float _2713 = sqrt(_2701) * uintBitsToFloat(uvec4(_2667, _2668, _2669, texelFetch(g_SpotLightRenderingBuffer, int(((_2556 * 40u) + 4u) + 3u)).x)).w;
                                float _2716 = _2713 * _2713;
                                float _2717 = (fma(_1229, _2600.z, fma(_1228, _2600.y, _2600.x * _1227)) + _2600.w) / _2663;
                                float _2718 = (fma(_1229, _2616.z, fma(_1228, _2616.y, _2616.x * _1227)) + _2616.w) / _2663;
                                float _2722 = 1.0 - dot(vec2(_2717, _2718), vec2(_2717, _2718));
                                float _3524 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                                float _2732 = exp2(log2(1.0 / ((_2716 * 3.5) + 5.0)) * 0.25);
                                float _2733 = 1.0 - _457;
                                float _2740 = sqrt(1.0 - ((1.0 - (_2733 * _2733)) * (1.0 - (_2732 * _2732))));
                                float _2741 = _2740 * _2740;
                                float _2742 = _2741 * _2741;
                                float _2743 = _2705 - _2253;
                                float _2744 = _2706 - _2254;
                                float _2745 = _2707 - _2255;
                                float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                                float _2753 = dot(vec3(_354, _357, _360), vec3((-0.0) - _2253, (-0.0) - _2254, (-0.0) - _2255));
                                float _3535 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                                float _2756 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
                                float _2757 = dot(vec3(_354, _357, _360), vec3(_2749 * _2743, _2749 * _2744, _2749 * _2745));
                                float _3546 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2760 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
                                float _2764 = ((_2760 * _2760) * (_2742 + (-1.0))) + 1.0;
                                float _2765 = (1.39999997615814208984375 / (_2713 + 1.39999997615814208984375)) * _2741;
                                float _2766 = _2765 * _2765;
                                float _2772 = ((1.0 - _2766) * dot(vec3(_354, _357, _360), vec3(_2705, _2706, _2707))) + _2766;
                                float _3557 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                                float _2773 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
                                float _2774 = 1.0 - _2741;
                                float _2784 = (0.5 / (((_2773 * ((_2756 * _2774) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2773 * _2774) + _2741) * _2756))) * _2773;
                                float _3568 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                                float _2794 = ((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * (((_2742 * 3.1415927410125732421875) * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) / ((_2764 * _2764) * ((_2716 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_76_pred = _2794 * _2584.z;
                                frontier_phi_76_pred_1 = _2794 * _2584.y;
                                frontier_phi_76_pred_2 = _2794 * _2584.x;
                            }
                            else
                            {
                                frontier_phi_76_pred = 0.0;
                                frontier_phi_76_pred_1 = 0.0;
                                frontier_phi_76_pred_2 = 0.0;
                            }
                            _2800 = frontier_phi_76_pred;
                            _2799 = frontier_phi_76_pred_1;
                            _2798 = frontier_phi_76_pred_2;
                            _2532 = _2798 + _2542;
                            _2533 = _2799 + _2543;
                            _2534 = _2800 + _2544;
                            if (_2546 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2542 = _2532;
                                _2543 = _2533;
                                _2544 = _2534;
                                _2545 = _2546;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _2534;
                        frontier_phi_70_pred_1 = _2532;
                        frontier_phi_70_pred_2 = _2533;
                    }
                    _2241 = frontier_phi_70_pred;
                    _2237 = frontier_phi_70_pred_1;
                    _2239 = frontier_phi_70_pred_2;
                    uint _2364 = _2363 + 1u;
                    if (_2364 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2360 = _2237;
                        _2361 = _2239;
                        _2362 = _2241;
                        _2363 = _2364;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2241;
                frontier_phi_58_59_ladder_1 = _2239;
                frontier_phi_58_59_ladder_2 = _2237;
            }
            else
            {
                frontier_phi_58_59_ladder = _2135;
                frontier_phi_58_59_ladder_1 = _2133;
                frontier_phi_58_59_ladder_2 = _2131;
            }
            _2236 = frontier_phi_58_59_ladder_2;
            _2238 = frontier_phi_58_59_ladder_1;
            _2240 = frontier_phi_58_59_ladder;
        }
        float _2245 = isnan(1.0) ? _435 : (isnan(_435) ? 1.0 : min(_435, 1.0));
        _2050 = ((_2236 * _314) * _2245) + _1874;
        _2052 = ((_2238 * _315) * _2245) + _1876;
        _2054 = ((_2240 * _316) * _2245) + _1878;
    }
    else
    {
        _2050 = _1874;
        _2052 = _1876;
        _2054 = _1878;
    }
    float _2058 = 0.959999978542327880859375 - ((isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0))) * 0.959999978542327880859375);
    float _2066 = _2058 - (exp2(log2(1.0 - _451) * 5.0) * _2058);
    uint _2073 = _1448 + 6u;
    float _2081 = _235 / cbSceneParam._m0[86u].x;
    float _2082 = _236 / cbSceneParam._m0[86u].y;
    vec4 _2096 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2081, _2082, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2098 = _2096.x;
    float _2099 = _2096.y;
    float _2100 = _2096.z;
    float _2101 = _2096.w;
    float _2187;
    float _2189;
    float _2191;
    float _2193;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _2150 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _2151 = _2150 / _333;
        float _2162 = _2151 * _219;
        float _2163 = _220 * _2151;
        float _2164 = (-0.0) - _2163;
        float _2165 = _2151 * _221;
        float _2167 = (cbSceneParam._m0[77u].w * _2164) / _2150;
        float _2168 = _2167 + cbSceneParam._m0[79u].w;
        float _2169 = cbSceneParam._m0[79u].w - _2163;
        float _2175 = sqrt(((_2162 * _2162) + (_2163 * _2163)) + (_2165 * _2165));
        float _2178 = (1.0 - (cbSceneParam._m0[77u].w / _2150)) * _2175;
        float _2183 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2185 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2322;
        if (abs((_2164 - _2167) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2322 = ((((_2168 > 0.0) ? exp2(_2183 * _2168) : (2.0 - exp2(_2185 * _2168))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2178;
        }
        else
        {
            float _2285 = 1.0 / cbSceneParam._m0[80u].x;
            float _2286 = isnan(_2169) ? _2168 : (isnan(_2168) ? _2169 : max(_2168, _2169));
            float _2287 = isnan(_2169) ? _2168 : (isnan(_2168) ? _2169 : min(_2168, _2169));
            float _2296 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : min(_2286, 0.0));
            float _2297 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : min(_2287, 0.0));
            _2322 = ((abs(_2175 / _2164) * cbSceneParam._m0[80u].y) * ((((_2296 - _2297) * 2.0) - ((exp2(_2183 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)))) - exp2(_2183 * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))))) * _2285)) - ((exp2(_2185 * _2296) - exp2(_2185 * _2297)) * _2285))) + (_2178 * cbSceneParam._m0[80u].z);
        }
        vec4 _2324 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2081, _2082, 1.0), 0.0);
        float _2333 = exp2((_2322 * (-1.44269502162933349609375)) * (1.0 - _2324.w));
        float _2334 = log2(_2333);
        float _2350 = log2(_2101);
        _2187 = (exp2(_2350 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2334 * cbSceneParam._m0[78u].x)) * _2324.x) / cbSceneParam._m0[78u].x)) + _2098;
        _2189 = (exp2(_2350 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2334 * cbSceneParam._m0[78u].y)) * _2324.y) / cbSceneParam._m0[78u].y)) + _2099;
        _2191 = (exp2(_2350 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2334 * cbSceneParam._m0[78u].z)) * _2324.z) / cbSceneParam._m0[78u].z)) + _2100;
        _2193 = _2333 * _2101;
    }
    else
    {
        _2187 = _2098;
        _2189 = _2099;
        _2191 = _2100;
        _2193 = _2101;
    }
    float _2204 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2205 = _2204 == 3.0;
    float _2206 = log2(_2193);
    float _2213 = exp2(_2206 * cbSceneParam._m0[78u].x) * (((_2050 + ((isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))) * _938)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.x) * exp2((-0.0) - (((cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].x) * _286) * _287))) * _2066));
    float _2214 = exp2(_2206 * cbSceneParam._m0[78u].y) * (((_2052 + ((isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))) * _938)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.y) * exp2((-0.0) - (((cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x) * _286) * _287))) * _2066));
    float _2215 = exp2(_2206 * cbSceneParam._m0[78u].z) * (((_2054 + ((isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))) * _938)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _256.z) * exp2((-0.0) - (((cbMtdParam._m0[11u].y * cbMtdParam._m0[10u].x) * _286) * _287))) * _2066));
    float _2224 = (_2204 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2224 * (_2205 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2187)));
    SV_Target.y = _2224 * (_2205 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2189)));
    SV_Target.z = _2224 * (_2205 ? _2215 : (_2215 + (cbSceneParam._m0[72u].w * _2191)));
    SV_Target.w = cbInstanceData._m0[_2073].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2073].w;
}


