#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test_snp_0_Screen_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _676;
uint _2128;
uint _2129;
uint _2130;
uint _2392;
uint _2393;
uint _2394;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _150 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _151 = _150 * NORMAL.x;
    float _152 = _150 * NORMAL.y;
    float _153 = _150 * NORMAL.z;
    float _158;
    float _159;
    float _160;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _158 = (-0.0) - _151;
        _159 = (-0.0) - _152;
        _160 = (-0.0) - _153;
    }
    else
    {
        _158 = _151;
        _159 = _152;
        _160 = _153;
    }
    float _205 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _215 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _205);
    float _216 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _205);
    float _217 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _205);
    float _231 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _232 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _238 = _231 / cbSceneParam._m0[86u].x;
    float _239 = _232 / cbSceneParam._m0[86u].y;
    float _246 = isnan(cbInstanceData._m0[8u].x) ? _238 : (isnan(_238) ? cbInstanceData._m0[8u].x : max(_238, cbInstanceData._m0[8u].x));
    float _247 = isnan(cbInstanceData._m0[8u].y) ? _239 : (isnan(_239) ? cbInstanceData._m0[8u].y : max(_239, cbInstanceData._m0[8u].y));
    vec4 _252 = texture(sampler2D(M_CrystalEx_test_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _246 : (isnan(_246) ? cbInstanceData._m0[8u].z : min(_246, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _247 : (isnan(_247) ? cbInstanceData._m0[8u].w : min(_247, cbInstanceData._m0[8u].w))));
    float _275 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _276 = _275 * _215;
    float _277 = _275 * _216;
    float _278 = _275 * _217;
    float _282 = abs(dot(vec4(_158, _159, _160, 0.0), vec4(_276, _277, _278, 0.0)));
    float _283 = log2(cbMtdParam._m0[10u].y);
    float _305 = inversesqrt(dot(vec3(_158, _159, _160), vec3(_158, _159, _160)));
    float _306 = _305 * _158;
    float _307 = _305 * _159;
    float _308 = _305 * _160;
    float _2660 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _310 = isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0));
    float _2671 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _311 = isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0));
    float _2682 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _312 = isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0));
    float _2693 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _313 = isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0));
    float _329 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _353 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _356 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    float _357 = _310 * 3.3333332538604736328125;
    float _359 = _311 * 3.3333332538604736328125;
    float _360 = _312 * 3.3333332538604736328125;
    float _368 = ((isnan(1.0) ? _357 : (isnan(_357) ? 1.0 : min(_357, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _370 = ((isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _371 = ((isnan(1.0) ? _360 : (isnan(_360) ? 1.0 : min(_360, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _377 = (_310 + (-0.0599999986588954925537109375)) + (isnan(_368) ? 0.0 : (isnan(0.0) ? _368 : max(0.0, _368)));
    float _379 = (_311 + (-0.0599999986588954925537109375)) + (isnan(_370) ? 0.0 : (isnan(0.0) ? _370 : max(0.0, _370)));
    float _381 = (_312 + (-0.0599999986588954925537109375)) + (isnan(_371) ? 0.0 : (isnan(0.0) ? _371 : max(0.0, _371)));
    float _393 = (_377 * _377) - ((0.02999999932944774627685546875 - _310) * 0.119999997317790985107421875);
    float _394 = (_379 * _379) - ((0.02999999932944774627685546875 - _311) * 0.119999997317790985107421875);
    float _395 = (_381 * _381) - ((0.02999999932944774627685546875 - _312) * 0.119999997317790985107421875);
    float _405 = (sqrt(isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0))) - _377) * 16.666667938232421875;
    float _407 = (sqrt(isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0))) - _379) * 16.666667938232421875;
    float _408 = (sqrt(isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0))) - _381) * 16.666667938232421875;
    float _409 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _411 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _422 = (((isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0))) * 0.114000000059604644775390625);
    float _423 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    vec4 _428 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _231, cbSceneParam._m0[86u].y * _232));
    float _431 = _428.x * TEXCOORD.z;
    float _432 = dot(vec3(_306, _307, _308), vec3(_276, _277, _278));
    float _435 = _432 * 2.0;
    float _440 = (_435 * _306) - _276;
    float _441 = (_435 * _307) - _277;
    float _442 = (_435 * _308) - _278;
    float _446 = abs(dot(vec3(_276, _277, _278), vec3(_306, _307, _308)));
    float _2789 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _2789 : (isnan(_2789) ? 1.0 : min(_2789, 1.0));
    float _453 = sqrt(_313);
    float _465 = exp2((_453 * 5.0) * log2(1.0 - (_447 * 0.999000012874603271484375))) / (4.0 - (_453 * 3.0));
    float _471 = (1.0 - _465) * ((_453 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _472 = _465 * _453;
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _675;
    float _677;
    float _678;
    float _679;
    float _680;
    float _681;
    float _682;
    float _683;
    float _684;
    float _685;
    float _686;
    float _687;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _535 = fma(_508, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _500));
        float _539 = fma(_508, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _500));
        float _543 = fma(_508, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _500));
        float _568 = _500 + _306;
        float _569 = _504 + _307;
        float _570 = _508 + _308;
        float _580 = fma(_570, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568)) - _535;
        float _581 = fma(_570, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568)) - _539;
        float _582 = fma(_570, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568)) - _543;
        float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
        float _599 = ((_586 * _580) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_535 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _600 = ((_586 * _581) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_539 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _601 = ((_586 * _582) / cbModelParam._m0[34u].z) + ((((((_543 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        float _638 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _648 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _658 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _668 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_625.x + (-0.5));
        float _670 = _668 * (_625.y + (-0.5));
        float _671 = _668 * (_625.z + (-0.5));
        _675 = _638 * (_604.z + (-0.5));
        _677 = _638 * (_604.y + (-0.5));
        _678 = _638 * (_604.x + (-0.5));
        _679 = _648 * (_611.z + (-0.5));
        _680 = _648 * (_611.y + (-0.5));
        _681 = _648 * (_611.x + (-0.5));
        _682 = _658 * (_618.z + (-0.5));
        _683 = _658 * (_618.y + (-0.5));
        _684 = _658 * (_618.x + (-0.5));
        _685 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        _686 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        _687 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    }
    else
    {
        _675 = _676;
        _677 = _676;
        _678 = _676;
        _679 = _676;
        _680 = _676;
        _681 = _676;
        _682 = _676;
        _683 = _676;
        _684 = _676;
        _685 = _676;
        _686 = _676;
        _687 = _676;
    }
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _713 = fma(_508, cbModelParam._m0[30u].z, fma(_504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _500));
        float _717 = fma(_508, cbModelParam._m0[31u].z, fma(_504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _500));
        float _721 = fma(_508, cbModelParam._m0[32u].z, fma(_504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _500));
        float _744 = _500 + _306;
        float _745 = _504 + _307;
        float _746 = _508 + _308;
        float _756 = fma(_746, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744)) - _713;
        float _757 = fma(_746, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744)) - _717;
        float _758 = fma(_746, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744)) - _721;
        float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
        float _775 = ((_762 * _756) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_713 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_762 * _757) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_717 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_762 * _758) / cbModelParam._m0[35u].z) + ((((((_721 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        float _812 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _822 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _832 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _842 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_800.x + (-0.5));
        float _844 = _842 * (_800.y + (-0.5));
        float _845 = _842 * (_800.z + (-0.5));
        _849 = _812 * (_779.z + (-0.5));
        _850 = _812 * (_779.y + (-0.5));
        _851 = _812 * (_779.x + (-0.5));
        _852 = _822 * (_786.z + (-0.5));
        _853 = _822 * (_786.y + (-0.5));
        _854 = _822 * (_786.x + (-0.5));
        _855 = _832 * (_793.z + (-0.5));
        _856 = _832 * (_793.y + (-0.5));
        _857 = _832 * (_793.x + (-0.5));
        _858 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        _859 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        _860 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    }
    else
    {
        _849 = _676;
        _850 = _676;
        _851 = _676;
        _852 = _676;
        _853 = _676;
        _854 = _676;
        _855 = _676;
        _856 = _676;
        _857 = _676;
        _858 = _676;
        _859 = _676;
        _860 = _676;
    }
    float _875 = _440 * 0.5;
    float _876 = _441 * 0.5;
    float _877 = _442 * 0.5;
    float _878 = dot(vec4(_875, _876, _877, 1.0), vec4(_851, _854, _857, _860));
    float _881 = dot(vec4(_875, _876, _877, 1.0), vec4(_850, _853, _856, _859));
    float _884 = dot(vec4(_875, _876, _877, 1.0), vec4(_849, _852, _855, _858));
    float _919;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _891 = dot(vec4(_875, _876, _877, 1.0), vec4(_675, _679, _682, _685));
        float _895 = dot(vec4(_875, _876, _877, 1.0), vec4(_677, _680, _683, _686));
        float _899 = dot(vec4(_875, _876, _877, 1.0), vec4(_678, _681, _684, _687));
        float _906 = dot(vec4(cbModelParam._m0[39u]), vec4(_875, _876, _877, 1.0));
        _919 = dot(vec3(isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)), isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)), isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_906) ? 0.0 : (isnan(0.0) ? _906 : max(0.0, _906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _919 = 1.0;
    }
    float _930;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _921 = dot(vec4(cbModelParam._m0[40u]), vec4(_875, _876, _877, 1.0));
        _930 = dot(vec3(isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)), isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)), isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_921) ? 0.0 : (isnan(0.0) ? _921 : max(0.0, _921))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _930 = 1.0;
    }
    float _934 = (_930 * cbModelParam._m0[1u].x) + (_919 * (1.0 - cbModelParam._m0[1u].x));
    float _942 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _313);
    float _943 = isnan(_942) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _942 : min(cbModelParam._m0[25u].z, _942));
    float _1026;
    float _1028;
    float _1030;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _993 = fma(_508, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500)) + cbModelParam._m0[13u].w;
        float _997 = fma(_508, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500)) + cbModelParam._m0[14u].w;
        float _1001 = fma(_508, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500)) + cbModelParam._m0[15u].w;
        float _1004 = fma(_442, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _440));
        float _1007 = fma(_442, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _440));
        float _1010 = fma(_442, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _440));
        float _1038;
        if (_1004 > 0.0)
        {
            _1038 = abs((1.0 - _993) / _1004);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1004 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_993 + 1.0) / _1004);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1038 = frontier_phi_16_14_ladder;
        }
        float _1386;
        if (_1007 > 0.0)
        {
            _1386 = abs((1.0 - _997) / _1007);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1007 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_997 + 1.0) / _1007);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1386 = frontier_phi_25_21_ladder;
        }
        float _1592;
        if (_1010 > 0.0)
        {
            _1592 = abs((1.0 - _1001) / _1010);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1010 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1001 + 1.0) / _1010);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1592 = frontier_phi_37_32_ladder;
        }
        float _1594 = isnan(_1386) ? _1038 : (isnan(_1038) ? _1386 : min(_1038, _1386));
        float _1595 = isnan(_1592) ? _1594 : (isnan(_1594) ? _1592 : min(_1594, _1592));
        float _1599 = (_1595 * _1004) + _993;
        float _1600 = (_1595 * _1007) + _997;
        float _1601 = (_1595 * _1010) + _1001;
        float _1602 = _1595 * 9.9999997473787516355514526367188e-05;
        float _1604 = (-1.0) - _1602;
        float _1606 = _1602 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1601 > _1606) || ((_1601 < _1604) || ((_1600 > _1606) || ((_1600 < _1604) || ((_1599 < _1604) || (_1599 > _1606))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1601, cbModelParam._m0[9u].z, fma(_1600, cbModelParam._m0[9u].y, _1599 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1601, cbModelParam._m0[10u].z, fma(_1600, cbModelParam._m0[10u].y, _1599 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1601, cbModelParam._m0[11u].z, fma(_1600, cbModelParam._m0[11u].y, _1599 * cbModelParam._m0[11u].x))), _943);
            frontier_phi_15_37_ladder = _1799.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1799.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1799.x * cbModelParam._m0[1u].y;
        }
        _1026 = frontier_phi_15_37_ladder_2;
        _1028 = frontier_phi_15_37_ladder_1;
        _1030 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_440, _441, _442), _943);
        _1026 = _1014.x * cbModelParam._m0[1u].y;
        _1028 = _1014.y * cbModelParam._m0[1u].y;
        _1030 = _1014.z * cbModelParam._m0[1u].y;
    }
    float _1034 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _313);
    float _1035 = isnan(_1034) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1034 : min(cbModelParam._m0[25u].w, _1034));
    float _1128;
    float _1130;
    float _1132;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1092 = fma(_508, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500)) + cbModelParam._m0[21u].w;
        float _1096 = fma(_508, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500)) + cbModelParam._m0[22u].w;
        float _1100 = fma(_508, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500)) + cbModelParam._m0[23u].w;
        float _1103 = fma(_442, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _440));
        float _1106 = fma(_442, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _440));
        float _1109 = fma(_442, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _440));
        float _1391;
        if (_1103 > 0.0)
        {
            _1391 = abs((1.0 - _1092) / _1103);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1103 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1092 + 1.0) / _1103);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1391 = frontier_phi_27_23_ladder;
        }
        float _1619;
        if (_1106 > 0.0)
        {
            _1619 = abs((1.0 - _1096) / _1106);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1106 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1096 + 1.0) / _1106);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1619 = frontier_phi_39_34_ladder;
        }
        float _1913;
        if (_1109 > 0.0)
        {
            _1913 = abs((1.0 - _1100) / _1109);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1109 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1100 + 1.0) / _1109);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1913 = frontier_phi_50_45_ladder;
        }
        float _1915 = isnan(_1619) ? _1391 : (isnan(_1391) ? _1619 : min(_1391, _1619));
        float _1916 = isnan(_1913) ? _1915 : (isnan(_1915) ? _1913 : min(_1915, _1913));
        float _1920 = (_1916 * _1103) + _1092;
        float _1921 = (_1916 * _1106) + _1096;
        float _1922 = (_1916 * _1109) + _1100;
        float _1923 = _1916 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1923;
        float _1926 = _1923 + 1.0;
        float frontier_phi_24_50_ladder;
        float frontier_phi_24_50_ladder_1;
        float frontier_phi_24_50_ladder_2;
        if ((_1922 > _1926) || ((_1922 < _1924) || ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 < _1924) || (_1920 > _1926))))))
        {
            frontier_phi_24_50_ladder = 0.0;
            frontier_phi_24_50_ladder_1 = 0.0;
            frontier_phi_24_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2031 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1922, cbModelParam._m0[17u].z, fma(_1921, cbModelParam._m0[17u].y, _1920 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1922, cbModelParam._m0[18u].z, fma(_1921, cbModelParam._m0[18u].y, _1920 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1922, cbModelParam._m0[19u].z, fma(_1921, cbModelParam._m0[19u].y, _1920 * cbModelParam._m0[19u].x))), _1035);
            frontier_phi_24_50_ladder = _2031.x * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_1 = _2031.z * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_2 = _2031.y * cbModelParam._m0[1u].z;
        }
        _1128 = frontier_phi_24_50_ladder;
        _1130 = frontier_phi_24_50_ladder_2;
        _1132 = frontier_phi_24_50_ladder_1;
    }
    else
    {
        vec4 _1112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_440, _441, _442), _1035);
        _1128 = _1112.x * cbModelParam._m0[1u].z;
        _1130 = _1112.y * cbModelParam._m0[1u].z;
        _1132 = _1112.z * cbModelParam._m0[1u].z;
    }
    float _1145 = (((_471 * _310) + _472) * _431) * ((cbModelParam._m0[1u].w * (_1128 - _1026)) + _1026);
    float _1147 = (((_471 * _311) + _472) * _431) * ((cbModelParam._m0[1u].w * (_1130 - _1028)) + _1028);
    float _1149 = (((_471 * _312) + _472) * _431) * ((cbModelParam._m0[1u].w * (_1132 - _1030)) + _1030);
    float _1170 = fma(_1149, cbSceneParam._m0[89u].z, fma(_1147, cbSceneParam._m0[89u].y, _1145 * cbSceneParam._m0[89u].x));
    float _1173 = fma(_1149, cbSceneParam._m0[90u].z, fma(_1147, cbSceneParam._m0[90u].y, _1145 * cbSceneParam._m0[90u].x));
    float _1176 = fma(_1149, cbSceneParam._m0[91u].z, fma(_1147, cbSceneParam._m0[91u].y, _1145 * cbSceneParam._m0[91u].x));
    uint _1183 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1187 = floatBitsToUint(cbInstanceData._m0[_1183 + 5u]);
    uint _1189 = _1187.x * 14u;
    uint _1190 = _1189 + 13u;
    float _1196 = _431 + (-1.0);
    float _1201 = (cbLight._m0[_1190].x * _1196) + 1.0;
    float _1202 = (cbLight._m0[_1190].y * _1196) + 1.0;
    float _1203 = (cbLight._m0[_1190].w * _1196) + 1.0;
    uint _1207 = _1189 + 8u;
    float _1223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1189].w)) * _313) * 0.949999988079071044921875);
    float _1224 = _1223 * _1223;
    float _1225 = cbLight._m0[_1189].x + _276;
    float _1226 = cbLight._m0[_1189].y + _277;
    float _1227 = cbLight._m0[_1189].z + _278;
    float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
    float _1232 = _1231 * _1225;
    float _1233 = _1231 * _1226;
    float _1234 = _1231 * _1227;
    float _1235 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1189].xyz));
    float _2915 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1238 = isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0));
    float _2926 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _1239 = isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0));
    float _1240 = dot(vec3(_306, _307, _308), vec3(_1232, _1233, _1234));
    float _2937 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1243 = isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0));
    float _1244 = dot(vec3(cbLight._m0[_1189].xyz), vec3(_1232, _1233, _1234));
    float _2948 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1248 = _1224 * _1224;
    float _1252 = ((_1243 * _1243) * (_1248 + (-1.0))) + 1.0;
    float _1260 = exp2(log2(1.0 - (isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0)))) * 5.0);
    float _1261 = 1.0 - _310;
    float _1262 = 1.0 - _311;
    float _1263 = 1.0 - _312;
    float _1270 = 1.0 - _1224;
    float _1281 = (0.5 / (((_1239 * ((_1238 * _1270) + _1224)) + 9.9999999392252902907785028219223e-09) + (((_1239 * _1270) + _1224) * _1238))) * _1238;
    float _2959 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _1283 = (isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0))) * (_1248 / ((_1252 * _1252) * 3.141590118408203125));
    float _1284 = isnan(1.0) ? _1201 : (isnan(_1201) ? 1.0 : min(_1201, 1.0));
    uint _1294 = _1189 | 1u;
    uint _1298 = _1189 + 9u;
    float _1312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1294].w)) * _313) * 0.949999988079071044921875);
    float _1313 = _1312 * _1312;
    float _1314 = cbLight._m0[_1294].x + _276;
    float _1315 = cbLight._m0[_1294].y + _277;
    float _1316 = cbLight._m0[_1294].z + _278;
    float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
    float _1321 = _1320 * _1314;
    float _1322 = _1320 * _1315;
    float _1323 = _1320 * _1316;
    float _1324 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1294].xyz));
    float _2975 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _1327 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
    float _1328 = dot(vec3(_306, _307, _308), vec3(_1321, _1322, _1323));
    float _2986 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _1331 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
    float _1332 = dot(vec3(cbLight._m0[_1294].xyz), vec3(_1321, _1322, _1323));
    float _2997 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1336 = _1313 * _1313;
    float _1340 = ((_1331 * _1331) * (_1336 + (-1.0))) + 1.0;
    float _1347 = exp2(log2(1.0 - (isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0)))) * 5.0);
    float _1354 = 1.0 - _1313;
    float _1364 = (0.5 / (((_1239 * ((_1327 * _1354) + _1313)) + 9.9999999392252902907785028219223e-09) + (((_1239 * _1354) + _1313) * _1327))) * _1327;
    float _3008 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _1366 = (isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0))) * (_1336 / ((_1340 * _1340) * 3.141590118408203125));
    float _1367 = isnan(1.0) ? _1202 : (isnan(_1202) ? 1.0 : min(_1202, 1.0));
    float _1377 = (((((_1347 * _1261) + _310) * cbLight._m0[_1298].x) * _1366) * _1367) + (((((_1260 * _1261) + _310) * cbLight._m0[_1207].x) * _1283) * _1284);
    float _1378 = (((((_1347 * _1262) + _311) * cbLight._m0[_1298].y) * _1366) * _1367) + (((((_1260 * _1262) + _311) * cbLight._m0[_1207].y) * _1283) * _1284);
    float _1379 = (((((_1347 * _1263) + _312) * cbLight._m0[_1298].z) * _1366) * _1367) + (((((_1260 * _1263) + _312) * cbLight._m0[_1207].z) * _1283) * _1284);
    uvec4 _1383 = floatBitsToUint(cbLight._m0[_1189 + 12u]);
    float _1396;
    float _1398;
    float _1400;
    if (_1383.x == 0u)
    {
        _1396 = _1377;
        _1398 = _1378;
        _1400 = _1379;
    }
    else
    {
        float _1406 = (cbLight._m0[_1190].z * _1196) + 1.0;
        uint _1407 = _1189 + 2u;
        uint _1411 = _1189 + 10u;
        float _1425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1407].w)) * _313) * 0.949999988079071044921875);
        float _1426 = _1425 * _1425;
        float _1427 = cbLight._m0[_1407].x + _276;
        float _1428 = cbLight._m0[_1407].y + _277;
        float _1429 = cbLight._m0[_1407].z + _278;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1434 = _1433 * _1427;
        float _1435 = _1433 * _1428;
        float _1436 = _1433 * _1429;
        float _1437 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1407].xyz));
        float _3024 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1440 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
        float _1441 = dot(vec3(_306, _307, _308), vec3(_1434, _1435, _1436));
        float _3035 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1444 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _1445 = dot(vec3(cbLight._m0[_1407].xyz), vec3(_1434, _1435, _1436));
        float _3046 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1426 * _1426;
        float _1453 = ((_1444 * _1444) * (_1449 + (-1.0))) + 1.0;
        float _1460 = exp2(log2(1.0 - (isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0)))) * 5.0);
        float _1467 = 1.0 - _1426;
        float _1477 = (0.5 / (((_1239 * ((_1440 * _1467) + _1426)) + 9.9999999392252902907785028219223e-09) + (((_1239 * _1467) + _1426) * _1440))) * _1440;
        float _3057 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1479 = (isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0))) * (_1449 / ((_1453 * _1453) * 3.141590118408203125));
        float _1480 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
        _1396 = (((((_1460 * _1261) + _310) * cbLight._m0[_1411].x) * _1479) * _1480) + _1377;
        _1398 = (((((_1460 * _1262) + _311) * cbLight._m0[_1411].y) * _1479) * _1480) + _1378;
        _1400 = (((((_1460 * _1263) + _312) * cbLight._m0[_1411].z) * _1479) * _1480) + _1379;
    }
    float _1498;
    float _1500;
    float _1502;
    if (_1383.y == 0u)
    {
        _1498 = _1396;
        _1500 = _1398;
        _1502 = _1400;
    }
    else
    {
        uint _1509 = _1189 + 3u;
        uint _1513 = _1189 + 11u;
        float _1527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1509].w)) * _313) * 0.949999988079071044921875);
        float _1528 = _1527 * _1527;
        float _1529 = cbLight._m0[_1509].x + _276;
        float _1530 = cbLight._m0[_1509].y + _277;
        float _1531 = cbLight._m0[_1509].z + _278;
        float _1535 = inversesqrt(dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531)));
        float _1536 = _1535 * _1529;
        float _1537 = _1535 * _1530;
        float _1538 = _1535 * _1531;
        float _1539 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1509].xyz));
        float _3073 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1542 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _1543 = dot(vec3(_306, _307, _308), vec3(_1536, _1537, _1538));
        float _3084 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1546 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _1547 = dot(vec3(cbLight._m0[_1509].xyz), vec3(_1536, _1537, _1538));
        float _3095 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = _1528 * _1528;
        float _1555 = ((_1546 * _1546) * (_1551 + (-1.0))) + 1.0;
        float _1562 = exp2(log2(1.0 - (isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0)))) * 5.0);
        float _1569 = 1.0 - _1528;
        float _1579 = (0.5 / (((_1239 * ((_1542 * _1569) + _1528)) + 9.9999999392252902907785028219223e-09) + (((_1239 * _1569) + _1528) * _1542))) * _1542;
        float _3106 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1581 = (isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) * (_1551 / ((_1555 * _1555) * 3.141590118408203125));
        float _1582 = isnan(1.0) ? _1203 : (isnan(_1203) ? 1.0 : min(_1203, 1.0));
        _1498 = (((((_1562 * _1261) + _310) * cbLight._m0[_1513].x) * _1581) * _1582) + _1396;
        _1500 = (((((_1562 * _1262) + _311) * cbLight._m0[_1513].y) * _1581) * _1582) + _1398;
        _1502 = (((((_1562 * _1263) + _312) * cbLight._m0[_1513].z) * _1581) * _1582) + _1400;
    }
    float _1723;
    float _1725;
    float _1727;
    if (_1187.y == 0u)
    {
        float _1663 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1663;
        float _1665 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1663;
        float _1666 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1663;
        uvec4 _1678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1679 = _1678.x;
        uint _1690 = uint((float(_1678.y) * floor(float(uint(cbSceneParam._m0[85u].y * _232) / _1679))) + floor(float(uint(cbSceneParam._m0[85u].x * _231) / _1679)));
        float _1700 = (log2(_1666 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1701 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        uint _1704 = uint(isnan(14.0) ? _1701 : (isnan(_1701) ? 14.0 : min(_1701, 14.0)));
        uvec4 _1709 = texelFetch(g_lightClusterGridBuffer, int(((_1704 << 2u) + (_1690 << 6u)) >> 2u));
        uint _1710 = _1709.x;
        uint _1711 = _1678.z;
        float _1808;
        float _1810;
        float _1812;
        if (((((1u << ((_1711 >> 4u) & 15u)) + 4294967295u) & _1710) == 0u) || ((_1711 & 240u) == 0u))
        {
            _1808 = 0.0;
            _1810 = 0.0;
            _1812 = 0.0;
        }
        else
        {
            float _1809;
            float _1811;
            float _1813;
            float _1962 = 0.0;
            float _1963 = 0.0;
            float _1964 = 0.0;
            uint _1965 = 0u;
            uint _1974;
            bool _1975;
            for (;;)
            {
                _1974 = texelFetch(g_lightClassification, int((((_1704 << 5u) + (_1690 << 9u)) + (_1965 << 2u)) >> 2u)).x;
                _1975 = _1974 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                if (_1975)
                {
                    frontier_phi_59_pred = _1964;
                    frontier_phi_59_pred_1 = _1963;
                    frontier_phi_59_pred_2 = _1962;
                }
                else
                {
                    float _2098;
                    float _2099;
                    float _2100;
                    uint _2101;
                    _2098 = _1962;
                    _2099 = _1963;
                    _2100 = _1964;
                    _2101 = _1974;
                    float _2036;
                    float _2037;
                    float _2038;
                    for (;;)
                    {
                        uint _2105 = uint(findLSB(_2101)) + (_1965 << 5u);
                        uint _2102 = (_2101 + 4294967295u) & _2101;
                        uint _2107 = _2105 * 48u;
                        vec4 _2121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2107)).x, texelFetch(g_PointLightRenderingBuffer, int(_2107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2107 + 3u)).x));
                        uint _2138 = (_2105 * 48u) + 8u;
                        vec3 _2149 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2138)).x, texelFetch(g_PointLightRenderingBuffer, int(_2138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2138 + 2u)).x));
                        float _2153 = _2121.x - _1664;
                        float _2154 = _2121.y - _1665;
                        float _2155 = _2121.z - _1666;
                        float _2156 = dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155));
                        float _2159 = inversesqrt(_2156);
                        float _2160 = _2159 * _2153;
                        float _2161 = _2159 * _2154;
                        float _2162 = _2159 * _2155;
                        float _2168 = 1.0 - (_2156 * _2121.w);
                        float _3132 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
                        float _2170 = sqrt(_2156) * uintBitsToFloat(uvec4(_2128, _2129, _2130, texelFetch(g_PointLightRenderingBuffer, int(((_2105 * 48u) + 4u) + 3u)).x)).w;
                        float _2174 = _2170 * _2170;
                        float _2175 = (-0.0) - _1664;
                        float _2176 = (-0.0) - _1665;
                        float _2177 = (-0.0) - _1666;
                        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
                        float _2182 = _2181 * _2175;
                        float _2183 = _2181 * _2176;
                        float _2184 = _2181 * _2177;
                        float _2192 = exp2(log2(1.0 / ((_2174 * 3.5) + 5.0)) * 0.25);
                        float _2193 = 1.0 - _453;
                        float _2200 = sqrt(1.0 - ((1.0 - (_2193 * _2193)) * (1.0 - (_2192 * _2192))));
                        float _2201 = _2200 * _2200;
                        float _2202 = _2201 * _2201;
                        float _2203 = _2182 + _2160;
                        float _2204 = _2183 + _2161;
                        float _2205 = _2184 + _2162;
                        float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
                        float _2213 = dot(vec3(_350, _353, _356), vec3(_2182, _2183, _2184));
                        float _3143 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
                        float _2216 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
                        float _2217 = dot(vec3(_350, _353, _356), vec3(_2209 * _2203, _2209 * _2204, _2209 * _2205));
                        float _3154 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
                        float _2220 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
                        float _2224 = ((_2220 * _2220) * (_2202 + (-1.0))) + 1.0;
                        float _2225 = (1.39999997615814208984375 / (_2170 + 1.39999997615814208984375)) * _2201;
                        float _2226 = _2225 * _2225;
                        float _2229 = ((1.0 - _2226) * dot(vec3(_350, _353, _356), vec3(_2160, _2161, _2162))) + _2226;
                        float _3165 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
                        float _2230 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
                        float _2231 = 1.0 - _2201;
                        float _2241 = (0.5 / (((_2230 * ((_2216 * _2231) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2231) + _2201) * _2216))) * _2230;
                        float _3176 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
                        float _2252 = (((_2202 * 3.1415927410125732421875) * (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0)))) / ((_2224 * _2224) * ((_2174 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0)));
                        _2036 = (_2252 * _2149.x) + _2098;
                        _2037 = (_2252 * _2149.y) + _2099;
                        _2038 = (_2252 * _2149.z) + _2100;
                        if (_2102 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2098 = _2036;
                            _2099 = _2037;
                            _2100 = _2038;
                            _2101 = _2102;
                        }
                    }
                    frontier_phi_59_pred = _2038;
                    frontier_phi_59_pred_1 = _2037;
                    frontier_phi_59_pred_2 = _2036;
                }
                _1813 = frontier_phi_59_pred;
                _1811 = frontier_phi_59_pred_1;
                _1809 = frontier_phi_59_pred_2;
                uint _1966 = _1965 + 1u;
                if (_1966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1962 = _1809;
                    _1963 = _1811;
                    _1964 = _1813;
                    _1965 = _1966;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1808 = _1809;
            _1810 = _1811;
            _1812 = _1813;
        }
        uvec4 _1816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1817 = _1816.z;
        uint _1819 = (_1817 >> 8u) & 15u;
        float _1939;
        float _1941;
        float _1943;
        if (((4294967295u << _1819) & _1710) == 0u)
        {
            _1939 = _1808;
            _1941 = _1810;
            _1943 = _1812;
        }
        else
        {
            float _1955 = inversesqrt(dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666)));
            float _1956 = _1955 * _1664;
            float _1957 = _1955 * _1665;
            float _1958 = _1955 * _1666;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1819 < ((_1817 >> 12u) & 15u))
            {
                float _1940;
                float _1942;
                float _1944;
                float _2084 = _1808;
                float _2085 = _1810;
                float _2086 = _1812;
                uint _2087 = _1819;
                uint _2096;
                bool _2097;
                for (;;)
                {
                    _2096 = texelFetch(g_lightClassification, int((((_1704 << 5u) + (_1690 << 9u)) + (_2087 << 2u)) >> 2u)).x;
                    _2097 = _2096 == 0u;
                    float frontier_phi_65_pred;
                    float frontier_phi_65_pred_1;
                    float frontier_phi_65_pred_2;
                    if (_2097)
                    {
                        frontier_phi_65_pred = _2086;
                        frontier_phi_65_pred_1 = _2085;
                        frontier_phi_65_pred_2 = _2084;
                    }
                    else
                    {
                        float _2257;
                        float _2258;
                        float _2259;
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2267 = _2084;
                        float _2268 = _2085;
                        float _2269 = _2086;
                        uint _2270 = _2096;
                        uint _2271;
                        uint _2281;
                        vec4 _2296;
                        float _2297;
                        vec3 _2309;
                        vec4 _2325;
                        vec4 _2341;
                        float _2388;
                        bool _2389;
                        for (;;)
                        {
                            _2281 = ((_2087 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2270));
                            _2271 = (_2270 + 4294967295u) & _2270;
                            uint _2283 = _2281 * 40u;
                            _2296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2283 + 3u)).x));
                            _2297 = _2296.w;
                            uint _2299 = (_2281 * 40u) + 8u;
                            _2309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2299 + 2u)).x));
                            uint _2312 = (_2281 * 40u) + 16u;
                            _2325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2312 + 3u)).x));
                            uint _2328 = (_2281 * 40u) + 20u;
                            _2341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 3u)).x));
                            uint _2344 = (_2281 * 40u) + 24u;
                            vec4 _2357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2344 + 3u)).x));
                            uint _2363 = (_2281 * 40u) + 28u;
                            vec4 _2376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2363 + 3u)).x));
                            _2388 = fma(_1666, _2376.z, fma(_1665, _2376.y, _2376.x * _1664)) + _2376.w;
                            _2389 = !((fma(_1666, _2357.z, fma(_1665, _2357.y, _2357.x * _1664)) + _2357.w) <= 0.0);
                            float frontier_phi_71_pred;
                            float frontier_phi_71_pred_1;
                            float frontier_phi_71_pred_2;
                            if (_2389)
                            {
                                float _2423 = _2296.x - _1664;
                                float _2424 = _2296.y - _1665;
                                float _2425 = _2296.z - _1666;
                                float _2426 = dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425));
                                float _2429 = inversesqrt(_2426);
                                float _2430 = _2429 * _2423;
                                float _2431 = _2429 * _2424;
                                float _2432 = _2429 * _2425;
                                float _2436 = 1.0 - (_2426 / (_2297 * _2297));
                                float _3187 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
                                float _2438 = sqrt(_2426) * uintBitsToFloat(uvec4(_2392, _2393, _2394, texelFetch(g_SpotLightRenderingBuffer, int(((_2281 * 40u) + 4u) + 3u)).x)).w;
                                float _2441 = _2438 * _2438;
                                float _2442 = (fma(_1666, _2325.z, fma(_1665, _2325.y, _2325.x * _1664)) + _2325.w) / _2388;
                                float _2443 = (fma(_1666, _2341.z, fma(_1665, _2341.y, _2341.x * _1664)) + _2341.w) / _2388;
                                float _2447 = 1.0 - dot(vec2(_2442, _2443), vec2(_2442, _2443));
                                float _3198 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
                                float _2457 = exp2(log2(1.0 / ((_2441 * 3.5) + 5.0)) * 0.25);
                                float _2458 = 1.0 - _453;
                                float _2465 = sqrt(1.0 - ((1.0 - (_2458 * _2458)) * (1.0 - (_2457 * _2457))));
                                float _2466 = _2465 * _2465;
                                float _2467 = _2466 * _2466;
                                float _2468 = _2430 - _1956;
                                float _2469 = _2431 - _1957;
                                float _2470 = _2432 - _1958;
                                float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
                                float _2478 = dot(vec3(_350, _353, _356), vec3((-0.0) - _1956, (-0.0) - _1957, (-0.0) - _1958));
                                float _3209 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
                                float _2481 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
                                float _2482 = dot(vec3(_350, _353, _356), vec3(_2474 * _2468, _2474 * _2469, _2474 * _2470));
                                float _3220 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
                                float _2485 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
                                float _2489 = ((_2485 * _2485) * (_2467 + (-1.0))) + 1.0;
                                float _2490 = (1.39999997615814208984375 / (_2438 + 1.39999997615814208984375)) * _2466;
                                float _2491 = _2490 * _2490;
                                float _2497 = ((1.0 - _2491) * dot(vec3(_350, _353, _356), vec3(_2430, _2431, _2432))) + _2491;
                                float _3231 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                                float _2498 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
                                float _2499 = 1.0 - _2466;
                                float _2509 = (0.5 / (((_2498 * ((_2481 * _2499) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2499) + _2466) * _2481))) * _2498;
                                float _3242 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                                float _2519 = ((isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))) * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * (((_2467 * 3.1415927410125732421875) * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) / ((_2489 * _2489) * ((_2441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_71_pred = _2519 * _2309.z;
                                frontier_phi_71_pred_1 = _2519 * _2309.y;
                                frontier_phi_71_pred_2 = _2519 * _2309.x;
                            }
                            else
                            {
                                frontier_phi_71_pred = 0.0;
                                frontier_phi_71_pred_1 = 0.0;
                                frontier_phi_71_pred_2 = 0.0;
                            }
                            _2525 = frontier_phi_71_pred;
                            _2524 = frontier_phi_71_pred_1;
                            _2523 = frontier_phi_71_pred_2;
                            _2257 = _2523 + _2267;
                            _2258 = _2524 + _2268;
                            _2259 = _2525 + _2269;
                            if (_2271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2267 = _2257;
                                _2268 = _2258;
                                _2269 = _2259;
                                _2270 = _2271;
                                continue;
                            }
                        }
                        frontier_phi_65_pred = _2259;
                        frontier_phi_65_pred_1 = _2258;
                        frontier_phi_65_pred_2 = _2257;
                    }
                    _1944 = frontier_phi_65_pred;
                    _1942 = frontier_phi_65_pred_1;
                    _1940 = frontier_phi_65_pred_2;
                    uint _2088 = _2087 + 1u;
                    if (_2088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2084 = _1940;
                        _2085 = _1942;
                        _2086 = _1944;
                        _2087 = _2088;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1944;
                frontier_phi_52_53_ladder_1 = _1942;
                frontier_phi_52_53_ladder_2 = _1940;
            }
            else
            {
                frontier_phi_52_53_ladder = _1812;
                frontier_phi_52_53_ladder_1 = _1810;
                frontier_phi_52_53_ladder_2 = _1808;
            }
            _1939 = frontier_phi_52_53_ladder_2;
            _1941 = frontier_phi_52_53_ladder_1;
            _1943 = frontier_phi_52_53_ladder;
        }
        float _1948 = isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0));
        _1723 = ((_1939 * _310) * _1948) + _1498;
        _1725 = ((_1941 * _311) * _1948) + _1500;
        _1727 = ((_1943 * _312) * _1948) + _1502;
    }
    else
    {
        _1723 = _1498;
        _1725 = _1500;
        _1727 = _1502;
    }
    float _1731 = 0.959999978542327880859375 - ((isnan(1.0) ? _423 : (isnan(_423) ? 1.0 : min(_423, 1.0))) * 0.959999978542327880859375);
    float _1739 = _1731 - (exp2(log2(1.0 - _447) * 5.0) * _1731);
    uint _1746 = _1183 + 6u;
    float _1754 = _231 / cbSceneParam._m0[86u].x;
    float _1755 = _232 / cbSceneParam._m0[86u].y;
    vec4 _1769 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1754, _1755, (log2((isnan(cbSceneParam._m0[77u].w) ? _329 : (isnan(_329) ? cbSceneParam._m0[77u].w : min(_329, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1771 = _1769.x;
    float _1772 = _1769.y;
    float _1773 = _1769.z;
    float _1774 = _1769.w;
    float _1864;
    float _1866;
    float _1868;
    float _1870;
    if (_329 > cbSceneParam._m0[78u].w)
    {
        float _1827 = isnan(_329) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _329 : min(cbSceneParam._m0[80u].w, _329));
        float _1828 = _1827 / _329;
        float _1839 = _1828 * _215;
        float _1840 = _216 * _1828;
        float _1841 = (-0.0) - _1840;
        float _1842 = _1828 * _217;
        float _1844 = (cbSceneParam._m0[77u].w * _1841) / _1827;
        float _1845 = _1844 + cbSceneParam._m0[79u].w;
        float _1846 = cbSceneParam._m0[79u].w - _1840;
        float _1852 = sqrt(((_1839 * _1839) + (_1840 * _1840)) + (_1842 * _1842));
        float _1855 = (1.0 - (cbSceneParam._m0[77u].w / _1827)) * _1852;
        float _1860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2046;
        if (abs((_1841 - _1844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2046 = ((((_1845 > 0.0) ? exp2(_1860 * _1845) : (2.0 - exp2(_1862 * _1845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1855;
        }
        else
        {
            float _1988 = 1.0 / cbSceneParam._m0[80u].x;
            float _1989 = isnan(_1846) ? _1845 : (isnan(_1845) ? _1846 : max(_1845, _1846));
            float _1990 = isnan(_1846) ? _1845 : (isnan(_1845) ? _1846 : min(_1845, _1846));
            float _1999 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : min(_1989, 0.0));
            float _2000 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : min(_1990, 0.0));
            _2046 = ((abs(_1852 / _1841) * cbSceneParam._m0[80u].y) * ((((_1999 - _2000) * 2.0) - ((exp2(_1860 * (isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)))) - exp2(_1860 * (isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))))) * _1988)) - ((exp2(_1862 * _1999) - exp2(_1862 * _2000)) * _1988))) + (_1855 * cbSceneParam._m0[80u].z);
        }
        vec4 _2048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1754, _1755, 1.0), 0.0);
        float _2057 = exp2((_2046 * (-1.44269502162933349609375)) * (1.0 - _2048.w));
        float _2058 = log2(_2057);
        float _2074 = log2(_1774);
        _1864 = (exp2(_2074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2058 * cbSceneParam._m0[78u].x)) * _2048.x) / cbSceneParam._m0[78u].x)) + _1771;
        _1866 = (exp2(_2074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2058 * cbSceneParam._m0[78u].y)) * _2048.y) / cbSceneParam._m0[78u].y)) + _1772;
        _1868 = (exp2(_2074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2058 * cbSceneParam._m0[78u].z)) * _2048.z) / cbSceneParam._m0[78u].z)) + _1773;
        _1870 = _2057 * _1774;
    }
    else
    {
        _1864 = _1771;
        _1866 = _1772;
        _1868 = _1773;
        _1870 = _1774;
    }
    float _1881 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1882 = _1881 == 3.0;
    float _1883 = log2(_1870);
    float _1890 = exp2(_1883 * cbSceneParam._m0[78u].x) * (((_1723 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _934)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _252.x) * exp2((-0.0) - (((cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].x) * _282) * _283))) * _1739));
    float _1891 = exp2(_1883 * cbSceneParam._m0[78u].y) * (((_1725 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _934)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _252.y) * exp2((-0.0) - (((cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x) * _282) * _283))) * _1739));
    float _1892 = exp2(_1883 * cbSceneParam._m0[78u].z) * (((_1727 + ((isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))) * _934)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _252.z) * exp2((-0.0) - (((cbMtdParam._m0[11u].y * cbMtdParam._m0[10u].x) * _282) * _283))) * _1739));
    float _1901 = (_1881 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1901 * (_1882 ? _1890 : (_1890 + (cbSceneParam._m0[72u].w * _1864)));
    SV_Target.y = _1901 * (_1882 ? _1891 : (_1891 + (cbSceneParam._m0[72u].w * _1866)));
    SV_Target.z = _1901 * (_1882 ? _1892 : (_1892 + (cbSceneParam._m0[72u].w * _1868)));
    SV_Target.w = cbInstanceData._m0[_1746].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1746].w;
}


