#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D M_CrystalEx_test_snp_0_Screen_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _678;
uint _2151;
uint _2152;
uint _2153;
uint _2415;
uint _2416;
uint _2417;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _152 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _153 = _152 * NORMAL.x;
    float _154 = _152 * NORMAL.y;
    float _155 = _152 * NORMAL.z;
    float _160;
    float _161;
    float _162;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _160 = (-0.0) - _153;
        _161 = (-0.0) - _154;
        _162 = (-0.0) - _155;
    }
    else
    {
        _160 = _153;
        _161 = _154;
        _162 = _155;
    }
    float _207 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _217 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _207);
    float _218 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _207);
    float _219 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _207);
    float _233 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _234 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _240 = _233 / cbSceneParam._m0[86u].x;
    float _241 = _234 / cbSceneParam._m0[86u].y;
    float _248 = isnan(cbInstanceData._m0[8u].x) ? _240 : (isnan(_240) ? cbInstanceData._m0[8u].x : max(_240, cbInstanceData._m0[8u].x));
    float _249 = isnan(cbInstanceData._m0[8u].y) ? _241 : (isnan(_241) ? cbInstanceData._m0[8u].y : max(_241, cbInstanceData._m0[8u].y));
    vec4 _254 = texture(sampler2D(M_CrystalEx_test_snp_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _248 : (isnan(_248) ? cbInstanceData._m0[8u].z : min(_248, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _249 : (isnan(_249) ? cbInstanceData._m0[8u].w : min(_249, cbInstanceData._m0[8u].w))));
    float _277 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _278 = _277 * _217;
    float _279 = _277 * _218;
    float _280 = _277 * _219;
    float _284 = abs(dot(vec4(_160, _161, _162, 0.0), vec4(_278, _279, _280, 0.0)));
    float _285 = log2(cbMtdParam._m0[10u].y);
    float _307 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _308 = _307 * _160;
    float _309 = _307 * _161;
    float _310 = _307 * _162;
    float _2683 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _312 = isnan(1.0) ? _2683 : (isnan(_2683) ? 1.0 : min(_2683, 1.0));
    float _2694 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _313 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
    float _2705 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _314 = isnan(1.0) ? _2705 : (isnan(_2705) ? 1.0 : min(_2705, 1.0));
    float _2716 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _315 = isnan(1.0) ? _2716 : (isnan(_2716) ? 1.0 : min(_2716, 1.0));
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _355 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _358 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    float _359 = _312 * 3.3333332538604736328125;
    float _361 = _313 * 3.3333332538604736328125;
    float _362 = _314 * 3.3333332538604736328125;
    float _370 = ((isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _372 = ((isnan(1.0) ? _361 : (isnan(_361) ? 1.0 : min(_361, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _373 = ((isnan(1.0) ? _362 : (isnan(_362) ? 1.0 : min(_362, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _379 = (_312 + (-0.0599999986588954925537109375)) + (isnan(_370) ? 0.0 : (isnan(0.0) ? _370 : max(0.0, _370)));
    float _381 = (_313 + (-0.0599999986588954925537109375)) + (isnan(_372) ? 0.0 : (isnan(0.0) ? _372 : max(0.0, _372)));
    float _383 = (_314 + (-0.0599999986588954925537109375)) + (isnan(_373) ? 0.0 : (isnan(0.0) ? _373 : max(0.0, _373)));
    float _395 = (_379 * _379) - ((0.02999999932944774627685546875 - _312) * 0.119999997317790985107421875);
    float _396 = (_381 * _381) - ((0.02999999932944774627685546875 - _313) * 0.119999997317790985107421875);
    float _397 = (_383 * _383) - ((0.02999999932944774627685546875 - _314) * 0.119999997317790985107421875);
    float _407 = (sqrt(isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0))) - _379) * 16.666667938232421875;
    float _409 = (sqrt(isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0))) - _381) * 16.666667938232421875;
    float _410 = (sqrt(isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0))) - _383) * 16.666667938232421875;
    float _411 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _413 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _424 = (((isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0))) * 0.114000000059604644775390625);
    float _425 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    vec4 _430 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _233, cbSceneParam._m0[86u].y * _234));
    float _433 = _430.x * TEXCOORD.z;
    float _434 = dot(vec3(_308, _309, _310), vec3(_278, _279, _280));
    float _437 = _434 * 2.0;
    float _442 = (_437 * _308) - _278;
    float _443 = (_437 * _309) - _279;
    float _444 = (_437 * _310) - _280;
    float _448 = abs(dot(vec3(_278, _279, _280), vec3(_308, _309, _310)));
    float _2812 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0));
    float _455 = sqrt(_315);
    float _467 = exp2((_455 * 5.0) * log2(1.0 - (_449 * 0.999000012874603271484375))) / (4.0 - (_455 * 3.0));
    float _473 = (1.0 - _467) * ((_455 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _474 = _467 * _455;
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _677;
    float _679;
    float _680;
    float _681;
    float _682;
    float _683;
    float _684;
    float _685;
    float _686;
    float _687;
    float _688;
    float _689;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _537 = fma(_510, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502));
        float _541 = fma(_510, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502));
        float _545 = fma(_510, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502));
        float _570 = _502 + _308;
        float _571 = _506 + _309;
        float _572 = _510 + _310;
        float _582 = fma(_572, cbModelParam._m0[26u].z, fma(_571, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570)) - _537;
        float _583 = fma(_572, cbModelParam._m0[27u].z, fma(_571, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570)) - _541;
        float _584 = fma(_572, cbModelParam._m0[28u].z, fma(_571, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570)) - _545;
        float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
        float _601 = ((_588 * _582) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_537 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _602 = ((_588 * _583) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_541 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _603 = ((_588 * _584) / cbModelParam._m0[34u].z) + ((((((_545 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        float _640 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _650 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _660 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _670 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_627.x + (-0.5));
        float _672 = _670 * (_627.y + (-0.5));
        float _673 = _670 * (_627.z + (-0.5));
        _677 = _640 * (_606.z + (-0.5));
        _679 = _640 * (_606.y + (-0.5));
        _680 = _640 * (_606.x + (-0.5));
        _681 = _650 * (_613.z + (-0.5));
        _682 = _650 * (_613.y + (-0.5));
        _683 = _650 * (_613.x + (-0.5));
        _684 = _660 * (_620.z + (-0.5));
        _685 = _660 * (_620.y + (-0.5));
        _686 = _660 * (_620.x + (-0.5));
        _687 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        _688 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        _689 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    }
    else
    {
        _677 = _678;
        _679 = _678;
        _680 = _678;
        _681 = _678;
        _682 = _678;
        _683 = _678;
        _684 = _678;
        _685 = _678;
        _686 = _678;
        _687 = _678;
        _688 = _678;
        _689 = _678;
    }
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _715 = fma(_510, cbModelParam._m0[30u].z, fma(_506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _502));
        float _719 = fma(_510, cbModelParam._m0[31u].z, fma(_506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _502));
        float _723 = fma(_510, cbModelParam._m0[32u].z, fma(_506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _502));
        float _746 = _502 + _308;
        float _747 = _506 + _309;
        float _748 = _510 + _310;
        float _758 = fma(_748, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746)) - _715;
        float _759 = fma(_748, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746)) - _719;
        float _760 = fma(_748, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746)) - _723;
        float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
        float _777 = ((_764 * _758) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_715 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_764 * _759) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_719 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_764 * _760) / cbModelParam._m0[35u].z) + ((((((_723 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        float _814 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _824 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _834 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _844 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_802.x + (-0.5));
        float _846 = _844 * (_802.y + (-0.5));
        float _847 = _844 * (_802.z + (-0.5));
        _851 = _814 * (_781.z + (-0.5));
        _852 = _814 * (_781.y + (-0.5));
        _853 = _814 * (_781.x + (-0.5));
        _854 = _824 * (_788.z + (-0.5));
        _855 = _824 * (_788.y + (-0.5));
        _856 = _824 * (_788.x + (-0.5));
        _857 = _834 * (_795.z + (-0.5));
        _858 = _834 * (_795.y + (-0.5));
        _859 = _834 * (_795.x + (-0.5));
        _860 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        _861 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        _862 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    }
    else
    {
        _851 = _678;
        _852 = _678;
        _853 = _678;
        _854 = _678;
        _855 = _678;
        _856 = _678;
        _857 = _678;
        _858 = _678;
        _859 = _678;
        _860 = _678;
        _861 = _678;
        _862 = _678;
    }
    float _877 = _442 * 0.5;
    float _878 = _443 * 0.5;
    float _879 = _444 * 0.5;
    float _880 = dot(vec4(_877, _878, _879, 1.0), vec4(_853, _856, _859, _862));
    float _883 = dot(vec4(_877, _878, _879, 1.0), vec4(_852, _855, _858, _861));
    float _886 = dot(vec4(_877, _878, _879, 1.0), vec4(_851, _854, _857, _860));
    float _921;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _893 = dot(vec4(_877, _878, _879, 1.0), vec4(_677, _681, _684, _687));
        float _897 = dot(vec4(_877, _878, _879, 1.0), vec4(_679, _682, _685, _688));
        float _901 = dot(vec4(_877, _878, _879, 1.0), vec4(_680, _683, _686, _689));
        float _908 = dot(vec4(cbModelParam._m0[39u]), vec4(_877, _878, _879, 1.0));
        _921 = dot(vec3(isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)), isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)), isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_908) ? 0.0 : (isnan(0.0) ? _908 : max(0.0, _908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _921 = 1.0;
    }
    float _932;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _923 = dot(vec4(cbModelParam._m0[40u]), vec4(_877, _878, _879, 1.0));
        _932 = dot(vec3(isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)), isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)), isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_923) ? 0.0 : (isnan(0.0) ? _923 : max(0.0, _923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _932 = 1.0;
    }
    float _936 = (_932 * cbModelParam._m0[1u].x) + (_921 * (1.0 - cbModelParam._m0[1u].x));
    float _944 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _315);
    float _945 = isnan(_944) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _944 : min(cbModelParam._m0[25u].z, _944));
    float _1028;
    float _1030;
    float _1032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _995 = fma(_510, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502)) + cbModelParam._m0[13u].w;
        float _999 = fma(_510, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502)) + cbModelParam._m0[14u].w;
        float _1003 = fma(_510, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502)) + cbModelParam._m0[15u].w;
        float _1006 = fma(_444, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _442));
        float _1009 = fma(_444, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _442));
        float _1012 = fma(_444, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _442));
        float _1040;
        if (_1006 > 0.0)
        {
            _1040 = abs((1.0 - _995) / _1006);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1006 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_995 + 1.0) / _1006);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1040 = frontier_phi_16_14_ladder;
        }
        float _1409;
        if (_1009 > 0.0)
        {
            _1409 = abs((1.0 - _999) / _1009);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1009 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_999 + 1.0) / _1009);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1409 = frontier_phi_25_21_ladder;
        }
        float _1615;
        if (_1012 > 0.0)
        {
            _1615 = abs((1.0 - _1003) / _1012);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1012 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1003 + 1.0) / _1012);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1615 = frontier_phi_37_32_ladder;
        }
        float _1617 = isnan(_1409) ? _1040 : (isnan(_1040) ? _1409 : min(_1040, _1409));
        float _1618 = isnan(_1615) ? _1617 : (isnan(_1617) ? _1615 : min(_1617, _1615));
        float _1622 = (_1618 * _1006) + _995;
        float _1623 = (_1618 * _1009) + _999;
        float _1624 = (_1618 * _1012) + _1003;
        float _1625 = _1618 * 9.9999997473787516355514526367188e-05;
        float _1627 = (-1.0) - _1625;
        float _1629 = _1625 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1624 > _1629) || ((_1624 < _1627) || ((_1623 > _1629) || ((_1623 < _1627) || ((_1622 < _1627) || (_1622 > _1629))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1624, cbModelParam._m0[9u].z, fma(_1623, cbModelParam._m0[9u].y, _1622 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1624, cbModelParam._m0[10u].z, fma(_1623, cbModelParam._m0[10u].y, _1622 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1624, cbModelParam._m0[11u].z, fma(_1623, cbModelParam._m0[11u].y, _1622 * cbModelParam._m0[11u].x))), _945);
            frontier_phi_15_37_ladder = _1822.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1822.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1822.x * cbModelParam._m0[1u].y;
        }
        _1028 = frontier_phi_15_37_ladder_2;
        _1030 = frontier_phi_15_37_ladder_1;
        _1032 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_442, _443, _444), _945);
        _1028 = _1016.x * cbModelParam._m0[1u].y;
        _1030 = _1016.y * cbModelParam._m0[1u].y;
        _1032 = _1016.z * cbModelParam._m0[1u].y;
    }
    float _1036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _315);
    float _1037 = isnan(_1036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1036 : min(cbModelParam._m0[25u].w, _1036));
    float _1130;
    float _1132;
    float _1134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1094 = fma(_510, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502)) + cbModelParam._m0[21u].w;
        float _1098 = fma(_510, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502)) + cbModelParam._m0[22u].w;
        float _1102 = fma(_510, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502)) + cbModelParam._m0[23u].w;
        float _1105 = fma(_444, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _442));
        float _1108 = fma(_444, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _442));
        float _1111 = fma(_444, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _442));
        float _1414;
        if (_1105 > 0.0)
        {
            _1414 = abs((1.0 - _1094) / _1105);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1105 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1094 + 1.0) / _1105);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1414 = frontier_phi_27_23_ladder;
        }
        float _1642;
        if (_1108 > 0.0)
        {
            _1642 = abs((1.0 - _1098) / _1108);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1108 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1098 + 1.0) / _1108);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1642 = frontier_phi_39_34_ladder;
        }
        float _1936;
        if (_1111 > 0.0)
        {
            _1936 = abs((1.0 - _1102) / _1111);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1111 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1102 + 1.0) / _1111);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1936 = frontier_phi_50_45_ladder;
        }
        float _1938 = isnan(_1642) ? _1414 : (isnan(_1414) ? _1642 : min(_1414, _1642));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1105) + _1094;
        float _1944 = (_1939 * _1108) + _1098;
        float _1945 = (_1939 * _1111) + _1102;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1946;
        float _1949 = _1946 + 1.0;
        float frontier_phi_24_50_ladder;
        float frontier_phi_24_50_ladder_1;
        float frontier_phi_24_50_ladder_2;
        if ((_1945 > _1949) || ((_1945 < _1947) || ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 < _1947) || (_1943 > _1949))))))
        {
            frontier_phi_24_50_ladder = 0.0;
            frontier_phi_24_50_ladder_1 = 0.0;
            frontier_phi_24_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1945, cbModelParam._m0[17u].z, fma(_1944, cbModelParam._m0[17u].y, _1943 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1945, cbModelParam._m0[18u].z, fma(_1944, cbModelParam._m0[18u].y, _1943 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1945, cbModelParam._m0[19u].z, fma(_1944, cbModelParam._m0[19u].y, _1943 * cbModelParam._m0[19u].x))), _1037);
            frontier_phi_24_50_ladder = _2054.x * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_1 = _2054.z * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_2 = _2054.y * cbModelParam._m0[1u].z;
        }
        _1130 = frontier_phi_24_50_ladder;
        _1132 = frontier_phi_24_50_ladder_2;
        _1134 = frontier_phi_24_50_ladder_1;
    }
    else
    {
        vec4 _1114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_442, _443, _444), _1037);
        _1130 = _1114.x * cbModelParam._m0[1u].z;
        _1132 = _1114.y * cbModelParam._m0[1u].z;
        _1134 = _1114.z * cbModelParam._m0[1u].z;
    }
    float _1147 = (((_473 * _312) + _474) * _433) * ((cbModelParam._m0[1u].w * (_1130 - _1028)) + _1028);
    float _1149 = (((_473 * _313) + _474) * _433) * ((cbModelParam._m0[1u].w * (_1132 - _1030)) + _1030);
    float _1151 = (((_473 * _314) + _474) * _433) * ((cbModelParam._m0[1u].w * (_1134 - _1032)) + _1032);
    float _1172 = fma(_1151, cbSceneParam._m0[89u].z, fma(_1149, cbSceneParam._m0[89u].y, _1147 * cbSceneParam._m0[89u].x));
    float _1175 = fma(_1151, cbSceneParam._m0[90u].z, fma(_1149, cbSceneParam._m0[90u].y, _1147 * cbSceneParam._m0[90u].x));
    float _1178 = fma(_1151, cbSceneParam._m0[91u].z, fma(_1149, cbSceneParam._m0[91u].y, _1147 * cbSceneParam._m0[91u].x));
    vec4 _1186 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_233, _234));
    float _1188 = _1186.w;
    uint _1203 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1207 = floatBitsToUint(cbInstanceData._m0[_1203 + 5u]);
    uint _1209 = _1207.x * 14u;
    uint _1210 = _1209 + 13u;
    float _1216 = _433 + (-1.0);
    float _1221 = (cbLight._m0[_1210].x * _1216) + 1.0;
    float _1222 = (cbLight._m0[_1210].y * _1216) + 1.0;
    float _1223 = (cbLight._m0[_1210].w * _1216) + 1.0;
    uint _1227 = _1209 + 8u;
    float _1243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1209].w)) * _315) * 0.949999988079071044921875);
    float _1244 = _1243 * _1243;
    float _1245 = cbLight._m0[_1209].x + _278;
    float _1246 = cbLight._m0[_1209].y + _279;
    float _1247 = cbLight._m0[_1209].z + _280;
    float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
    float _1252 = _1251 * _1245;
    float _1253 = _1251 * _1246;
    float _1254 = _1251 * _1247;
    float _1255 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1209].xyz));
    float _2938 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    float _1258 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
    float _2949 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _1259 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
    float _1260 = dot(vec3(_308, _309, _310), vec3(_1252, _1253, _1254));
    float _2960 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1263 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
    float _1264 = dot(vec3(cbLight._m0[_1209].xyz), vec3(_1252, _1253, _1254));
    float _2971 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
    float _1268 = _1244 * _1244;
    float _1272 = ((_1263 * _1263) * (_1268 + (-1.0))) + 1.0;
    float _1280 = exp2(log2(1.0 - (isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0)))) * 5.0);
    float _1281 = 1.0 - _312;
    float _1282 = 1.0 - _313;
    float _1283 = 1.0 - _314;
    float _1290 = 1.0 - _1244;
    float _1301 = (0.5 / (((_1259 * ((_1258 * _1290) + _1244)) + 9.9999999392252902907785028219223e-09) + (((_1259 * _1290) + _1244) * _1258))) * _1258;
    float _2982 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    float _1303 = (isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0))) * (_1268 / ((_1272 * _1272) * 3.141590118408203125));
    float _1304 = isnan(1.0) ? _1221 : (isnan(_1221) ? 1.0 : min(_1221, 1.0));
    uint _1317 = _1209 | 1u;
    uint _1321 = _1209 + 9u;
    float _1335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1317].w)) * _315) * 0.949999988079071044921875);
    float _1336 = _1335 * _1335;
    float _1337 = cbLight._m0[_1317].x + _278;
    float _1338 = cbLight._m0[_1317].y + _279;
    float _1339 = cbLight._m0[_1317].z + _280;
    float _1343 = inversesqrt(dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339)));
    float _1344 = _1343 * _1337;
    float _1345 = _1343 * _1338;
    float _1346 = _1343 * _1339;
    float _1347 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1317].xyz));
    float _2998 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _1350 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
    float _1351 = dot(vec3(_308, _309, _310), vec3(_1344, _1345, _1346));
    float _3009 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    float _1354 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
    float _1355 = dot(vec3(cbLight._m0[_1317].xyz), vec3(_1344, _1345, _1346));
    float _3020 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
    float _1359 = _1336 * _1336;
    float _1363 = ((_1354 * _1354) * (_1359 + (-1.0))) + 1.0;
    float _1370 = exp2(log2(1.0 - (isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0)))) * 5.0);
    float _1377 = 1.0 - _1336;
    float _1387 = (0.5 / (((_1259 * ((_1350 * _1377) + _1336)) + 9.9999999392252902907785028219223e-09) + (((_1259 * _1377) + _1336) * _1350))) * _1350;
    float _3031 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    float _1389 = (isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0))) * (_1359 / ((_1363 * _1363) * 3.141590118408203125));
    float _1390 = isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0));
    float _1400 = (((((_1370 * _1281) + _312) * cbLight._m0[_1321].x) * _1389) * _1390) + ((((cbLight._m0[_1227].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1188))) * ((_1280 * _1281) + _312)) * _1303) * _1304);
    float _1401 = (((((_1370 * _1282) + _313) * cbLight._m0[_1321].y) * _1389) * _1390) + ((((cbLight._m0[_1227].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1188))) * ((_1280 * _1282) + _313)) * _1303) * _1304);
    float _1402 = (((((_1370 * _1283) + _314) * cbLight._m0[_1321].z) * _1389) * _1390) + ((((cbLight._m0[_1227].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1188))) * ((_1280 * _1283) + _314)) * _1303) * _1304);
    uvec4 _1406 = floatBitsToUint(cbLight._m0[_1209 + 12u]);
    float _1419;
    float _1421;
    float _1423;
    if (_1406.x == 0u)
    {
        _1419 = _1400;
        _1421 = _1401;
        _1423 = _1402;
    }
    else
    {
        float _1429 = (cbLight._m0[_1210].z * _1216) + 1.0;
        uint _1430 = _1209 + 2u;
        uint _1434 = _1209 + 10u;
        float _1448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1430].w)) * _315) * 0.949999988079071044921875);
        float _1449 = _1448 * _1448;
        float _1450 = cbLight._m0[_1430].x + _278;
        float _1451 = cbLight._m0[_1430].y + _279;
        float _1452 = cbLight._m0[_1430].z + _280;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1457 = _1456 * _1450;
        float _1458 = _1456 * _1451;
        float _1459 = _1456 * _1452;
        float _1460 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1430].xyz));
        float _3047 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1463 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
        float _1464 = dot(vec3(_308, _309, _310), vec3(_1457, _1458, _1459));
        float _3058 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1467 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
        float _1468 = dot(vec3(cbLight._m0[_1430].xyz), vec3(_1457, _1458, _1459));
        float _3069 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1449 * _1449;
        float _1476 = ((_1467 * _1467) * (_1472 + (-1.0))) + 1.0;
        float _1483 = exp2(log2(1.0 - (isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0)))) * 5.0);
        float _1490 = 1.0 - _1449;
        float _1500 = (0.5 / (((_1259 * ((_1463 * _1490) + _1449)) + 9.9999999392252902907785028219223e-09) + (((_1259 * _1490) + _1449) * _1463))) * _1463;
        float _3080 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1502 = (isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0))) * (_1472 / ((_1476 * _1476) * 3.141590118408203125));
        float _1503 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1419 = (((((_1483 * _1281) + _312) * cbLight._m0[_1434].x) * _1502) * _1503) + _1400;
        _1421 = (((((_1483 * _1282) + _313) * cbLight._m0[_1434].y) * _1502) * _1503) + _1401;
        _1423 = (((((_1483 * _1283) + _314) * cbLight._m0[_1434].z) * _1502) * _1503) + _1402;
    }
    float _1521;
    float _1523;
    float _1525;
    if (_1406.y == 0u)
    {
        _1521 = _1419;
        _1523 = _1421;
        _1525 = _1423;
    }
    else
    {
        uint _1532 = _1209 + 3u;
        uint _1536 = _1209 + 11u;
        float _1550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1532].w)) * _315) * 0.949999988079071044921875);
        float _1551 = _1550 * _1550;
        float _1552 = cbLight._m0[_1532].x + _278;
        float _1553 = cbLight._m0[_1532].y + _279;
        float _1554 = cbLight._m0[_1532].z + _280;
        float _1558 = inversesqrt(dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554)));
        float _1559 = _1558 * _1552;
        float _1560 = _1558 * _1553;
        float _1561 = _1558 * _1554;
        float _1562 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1532].xyz));
        float _3096 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1565 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _1566 = dot(vec3(_308, _309, _310), vec3(_1559, _1560, _1561));
        float _3107 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1569 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _1570 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1559, _1560, _1561));
        float _3118 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = _1551 * _1551;
        float _1578 = ((_1569 * _1569) * (_1574 + (-1.0))) + 1.0;
        float _1585 = exp2(log2(1.0 - (isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0)))) * 5.0);
        float _1592 = 1.0 - _1551;
        float _1602 = (0.5 / (((_1259 * ((_1565 * _1592) + _1551)) + 9.9999999392252902907785028219223e-09) + (((_1259 * _1592) + _1551) * _1565))) * _1565;
        float _3129 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1604 = (isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0))) * (_1574 / ((_1578 * _1578) * 3.141590118408203125));
        float _1605 = isnan(1.0) ? _1223 : (isnan(_1223) ? 1.0 : min(_1223, 1.0));
        _1521 = (((((_1585 * _1281) + _312) * cbLight._m0[_1536].x) * _1604) * _1605) + _1419;
        _1523 = (((((_1585 * _1282) + _313) * cbLight._m0[_1536].y) * _1604) * _1605) + _1421;
        _1525 = (((((_1585 * _1283) + _314) * cbLight._m0[_1536].z) * _1604) * _1605) + _1423;
    }
    float _1746;
    float _1748;
    float _1750;
    if (_1207.y == 0u)
    {
        float _1686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1686;
        float _1688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1686;
        float _1689 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1686;
        uvec4 _1701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1702 = _1701.x;
        uint _1713 = uint((float(_1701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _234) / _1702))) + floor(float(uint(cbSceneParam._m0[85u].x * _233) / _1702)));
        float _1723 = (log2(_1689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1724 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        uint _1727 = uint(isnan(14.0) ? _1724 : (isnan(_1724) ? 14.0 : min(_1724, 14.0)));
        uvec4 _1732 = texelFetch(g_lightClusterGridBuffer, int(((_1727 << 2u) + (_1713 << 6u)) >> 2u));
        uint _1733 = _1732.x;
        uint _1734 = _1701.z;
        float _1831;
        float _1833;
        float _1835;
        if (((((1u << ((_1734 >> 4u) & 15u)) + 4294967295u) & _1733) == 0u) || ((_1734 & 240u) == 0u))
        {
            _1831 = 0.0;
            _1833 = 0.0;
            _1835 = 0.0;
        }
        else
        {
            float _1832;
            float _1834;
            float _1836;
            float _1985 = 0.0;
            float _1986 = 0.0;
            float _1987 = 0.0;
            uint _1988 = 0u;
            uint _1997;
            bool _1998;
            for (;;)
            {
                _1997 = texelFetch(g_lightClassification, int((((_1727 << 5u) + (_1713 << 9u)) + (_1988 << 2u)) >> 2u)).x;
                _1998 = _1997 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                if (_1998)
                {
                    frontier_phi_59_pred = _1987;
                    frontier_phi_59_pred_1 = _1986;
                    frontier_phi_59_pred_2 = _1985;
                }
                else
                {
                    float _2121;
                    float _2122;
                    float _2123;
                    uint _2124;
                    _2121 = _1985;
                    _2122 = _1986;
                    _2123 = _1987;
                    _2124 = _1997;
                    float _2059;
                    float _2060;
                    float _2061;
                    for (;;)
                    {
                        uint _2128 = uint(findLSB(_2124)) + (_1988 << 5u);
                        uint _2125 = (_2124 + 4294967295u) & _2124;
                        uint _2130 = _2128 * 48u;
                        vec4 _2144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2130)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 3u)).x));
                        uint _2161 = (_2128 * 48u) + 8u;
                        vec3 _2172 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2161)).x, texelFetch(g_PointLightRenderingBuffer, int(_2161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2161 + 2u)).x));
                        float _2176 = _2144.x - _1687;
                        float _2177 = _2144.y - _1688;
                        float _2178 = _2144.z - _1689;
                        float _2179 = dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178));
                        float _2182 = inversesqrt(_2179);
                        float _2183 = _2182 * _2176;
                        float _2184 = _2182 * _2177;
                        float _2185 = _2182 * _2178;
                        float _2191 = 1.0 - (_2179 * _2144.w);
                        float _3155 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
                        float _2193 = sqrt(_2179) * uintBitsToFloat(uvec4(_2151, _2152, _2153, texelFetch(g_PointLightRenderingBuffer, int(((_2128 * 48u) + 4u) + 3u)).x)).w;
                        float _2197 = _2193 * _2193;
                        float _2198 = (-0.0) - _1687;
                        float _2199 = (-0.0) - _1688;
                        float _2200 = (-0.0) - _1689;
                        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
                        float _2205 = _2204 * _2198;
                        float _2206 = _2204 * _2199;
                        float _2207 = _2204 * _2200;
                        float _2215 = exp2(log2(1.0 / ((_2197 * 3.5) + 5.0)) * 0.25);
                        float _2216 = 1.0 - _455;
                        float _2223 = sqrt(1.0 - ((1.0 - (_2216 * _2216)) * (1.0 - (_2215 * _2215))));
                        float _2224 = _2223 * _2223;
                        float _2225 = _2224 * _2224;
                        float _2226 = _2205 + _2183;
                        float _2227 = _2206 + _2184;
                        float _2228 = _2207 + _2185;
                        float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
                        float _2236 = dot(vec3(_352, _355, _358), vec3(_2205, _2206, _2207));
                        float _3166 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
                        float _2239 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
                        float _2240 = dot(vec3(_352, _355, _358), vec3(_2232 * _2226, _2232 * _2227, _2232 * _2228));
                        float _3177 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
                        float _2243 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
                        float _2247 = ((_2243 * _2243) * (_2225 + (-1.0))) + 1.0;
                        float _2248 = (1.39999997615814208984375 / (_2193 + 1.39999997615814208984375)) * _2224;
                        float _2249 = _2248 * _2248;
                        float _2252 = ((1.0 - _2249) * dot(vec3(_352, _355, _358), vec3(_2183, _2184, _2185))) + _2249;
                        float _3188 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
                        float _2253 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
                        float _2254 = 1.0 - _2224;
                        float _2264 = (0.5 / (((_2253 * ((_2239 * _2254) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2254) + _2224) * _2239))) * _2253;
                        float _3199 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
                        float _2275 = (((_2225 * 3.1415927410125732421875) * (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0)))) / ((_2247 * _2247) * ((_2197 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0)));
                        _2059 = (_2275 * _2172.x) + _2121;
                        _2060 = (_2275 * _2172.y) + _2122;
                        _2061 = (_2275 * _2172.z) + _2123;
                        if (_2125 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2121 = _2059;
                            _2122 = _2060;
                            _2123 = _2061;
                            _2124 = _2125;
                        }
                    }
                    frontier_phi_59_pred = _2061;
                    frontier_phi_59_pred_1 = _2060;
                    frontier_phi_59_pred_2 = _2059;
                }
                _1836 = frontier_phi_59_pred;
                _1834 = frontier_phi_59_pred_1;
                _1832 = frontier_phi_59_pred_2;
                uint _1989 = _1988 + 1u;
                if (_1989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1985 = _1832;
                    _1986 = _1834;
                    _1987 = _1836;
                    _1988 = _1989;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1831 = _1832;
            _1833 = _1834;
            _1835 = _1836;
        }
        uvec4 _1839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1840 = _1839.z;
        uint _1842 = (_1840 >> 8u) & 15u;
        float _1962;
        float _1964;
        float _1966;
        if (((4294967295u << _1842) & _1733) == 0u)
        {
            _1962 = _1831;
            _1964 = _1833;
            _1966 = _1835;
        }
        else
        {
            float _1978 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
            float _1979 = _1978 * _1687;
            float _1980 = _1978 * _1688;
            float _1981 = _1978 * _1689;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1842 < ((_1840 >> 12u) & 15u))
            {
                float _1963;
                float _1965;
                float _1967;
                float _2107 = _1831;
                float _2108 = _1833;
                float _2109 = _1835;
                uint _2110 = _1842;
                uint _2119;
                bool _2120;
                for (;;)
                {
                    _2119 = texelFetch(g_lightClassification, int((((_1727 << 5u) + (_1713 << 9u)) + (_2110 << 2u)) >> 2u)).x;
                    _2120 = _2119 == 0u;
                    float frontier_phi_65_pred;
                    float frontier_phi_65_pred_1;
                    float frontier_phi_65_pred_2;
                    if (_2120)
                    {
                        frontier_phi_65_pred = _2109;
                        frontier_phi_65_pred_1 = _2108;
                        frontier_phi_65_pred_2 = _2107;
                    }
                    else
                    {
                        float _2280;
                        float _2281;
                        float _2282;
                        float _2546;
                        float _2547;
                        float _2548;
                        float _2290 = _2107;
                        float _2291 = _2108;
                        float _2292 = _2109;
                        uint _2293 = _2119;
                        uint _2294;
                        uint _2304;
                        vec4 _2319;
                        float _2320;
                        vec3 _2332;
                        vec4 _2348;
                        vec4 _2364;
                        float _2411;
                        bool _2412;
                        for (;;)
                        {
                            _2304 = ((_2110 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2293));
                            _2294 = (_2293 + 4294967295u) & _2293;
                            uint _2306 = _2304 * 40u;
                            _2319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 3u)).x));
                            _2320 = _2319.w;
                            uint _2322 = (_2304 * 40u) + 8u;
                            _2332 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2322 + 2u)).x));
                            uint _2335 = (_2304 * 40u) + 16u;
                            _2348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2335 + 3u)).x));
                            uint _2351 = (_2304 * 40u) + 20u;
                            _2364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2351 + 3u)).x));
                            uint _2367 = (_2304 * 40u) + 24u;
                            vec4 _2380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2367 + 3u)).x));
                            uint _2386 = (_2304 * 40u) + 28u;
                            vec4 _2399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2386 + 3u)).x));
                            _2411 = fma(_1689, _2399.z, fma(_1688, _2399.y, _2399.x * _1687)) + _2399.w;
                            _2412 = !((fma(_1689, _2380.z, fma(_1688, _2380.y, _2380.x * _1687)) + _2380.w) <= 0.0);
                            float frontier_phi_71_pred;
                            float frontier_phi_71_pred_1;
                            float frontier_phi_71_pred_2;
                            if (_2412)
                            {
                                float _2446 = _2319.x - _1687;
                                float _2447 = _2319.y - _1688;
                                float _2448 = _2319.z - _1689;
                                float _2449 = dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448));
                                float _2452 = inversesqrt(_2449);
                                float _2453 = _2452 * _2446;
                                float _2454 = _2452 * _2447;
                                float _2455 = _2452 * _2448;
                                float _2459 = 1.0 - (_2449 / (_2320 * _2320));
                                float _3210 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
                                float _2461 = sqrt(_2449) * uintBitsToFloat(uvec4(_2415, _2416, _2417, texelFetch(g_SpotLightRenderingBuffer, int(((_2304 * 40u) + 4u) + 3u)).x)).w;
                                float _2464 = _2461 * _2461;
                                float _2465 = (fma(_1689, _2348.z, fma(_1688, _2348.y, _2348.x * _1687)) + _2348.w) / _2411;
                                float _2466 = (fma(_1689, _2364.z, fma(_1688, _2364.y, _2364.x * _1687)) + _2364.w) / _2411;
                                float _2470 = 1.0 - dot(vec2(_2465, _2466), vec2(_2465, _2466));
                                float _3221 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
                                float _2480 = exp2(log2(1.0 / ((_2464 * 3.5) + 5.0)) * 0.25);
                                float _2481 = 1.0 - _455;
                                float _2488 = sqrt(1.0 - ((1.0 - (_2481 * _2481)) * (1.0 - (_2480 * _2480))));
                                float _2489 = _2488 * _2488;
                                float _2490 = _2489 * _2489;
                                float _2491 = _2453 - _1979;
                                float _2492 = _2454 - _1980;
                                float _2493 = _2455 - _1981;
                                float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
                                float _2501 = dot(vec3(_352, _355, _358), vec3((-0.0) - _1979, (-0.0) - _1980, (-0.0) - _1981));
                                float _3232 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                                float _2504 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
                                float _2505 = dot(vec3(_352, _355, _358), vec3(_2497 * _2491, _2497 * _2492, _2497 * _2493));
                                float _3243 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
                                float _2508 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
                                float _2512 = ((_2508 * _2508) * (_2490 + (-1.0))) + 1.0;
                                float _2513 = (1.39999997615814208984375 / (_2461 + 1.39999997615814208984375)) * _2489;
                                float _2514 = _2513 * _2513;
                                float _2520 = ((1.0 - _2514) * dot(vec3(_352, _355, _358), vec3(_2453, _2454, _2455))) + _2514;
                                float _3254 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
                                float _2521 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
                                float _2522 = 1.0 - _2489;
                                float _2532 = (0.5 / (((_2521 * ((_2504 * _2522) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2522) + _2489) * _2504))) * _2521;
                                float _3265 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
                                float _2542 = ((isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0))) * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * (((_2490 * 3.1415927410125732421875) * (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0)))) / ((_2512 * _2512) * ((_2464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_71_pred = _2542 * _2332.z;
                                frontier_phi_71_pred_1 = _2542 * _2332.y;
                                frontier_phi_71_pred_2 = _2542 * _2332.x;
                            }
                            else
                            {
                                frontier_phi_71_pred = 0.0;
                                frontier_phi_71_pred_1 = 0.0;
                                frontier_phi_71_pred_2 = 0.0;
                            }
                            _2548 = frontier_phi_71_pred;
                            _2547 = frontier_phi_71_pred_1;
                            _2546 = frontier_phi_71_pred_2;
                            _2280 = _2546 + _2290;
                            _2281 = _2547 + _2291;
                            _2282 = _2548 + _2292;
                            if (_2294 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2290 = _2280;
                                _2291 = _2281;
                                _2292 = _2282;
                                _2293 = _2294;
                                continue;
                            }
                        }
                        frontier_phi_65_pred = _2282;
                        frontier_phi_65_pred_1 = _2281;
                        frontier_phi_65_pred_2 = _2280;
                    }
                    _1967 = frontier_phi_65_pred;
                    _1965 = frontier_phi_65_pred_1;
                    _1963 = frontier_phi_65_pred_2;
                    uint _2111 = _2110 + 1u;
                    if (_2111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2107 = _1963;
                        _2108 = _1965;
                        _2109 = _1967;
                        _2110 = _2111;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1967;
                frontier_phi_52_53_ladder_1 = _1965;
                frontier_phi_52_53_ladder_2 = _1963;
            }
            else
            {
                frontier_phi_52_53_ladder = _1835;
                frontier_phi_52_53_ladder_1 = _1833;
                frontier_phi_52_53_ladder_2 = _1831;
            }
            _1962 = frontier_phi_52_53_ladder_2;
            _1964 = frontier_phi_52_53_ladder_1;
            _1966 = frontier_phi_52_53_ladder;
        }
        float _1971 = isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0));
        _1746 = ((_1962 * _312) * _1971) + _1521;
        _1748 = ((_1964 * _313) * _1971) + _1523;
        _1750 = ((_1966 * _314) * _1971) + _1525;
    }
    else
    {
        _1746 = _1521;
        _1748 = _1523;
        _1750 = _1525;
    }
    float _1754 = 0.959999978542327880859375 - ((isnan(1.0) ? _425 : (isnan(_425) ? 1.0 : min(_425, 1.0))) * 0.959999978542327880859375);
    float _1762 = _1754 - (exp2(log2(1.0 - _449) * 5.0) * _1754);
    uint _1769 = _1203 + 6u;
    float _1777 = _233 / cbSceneParam._m0[86u].x;
    float _1778 = _234 / cbSceneParam._m0[86u].y;
    vec4 _1792 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1777, _1778, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1794 = _1792.x;
    float _1795 = _1792.y;
    float _1796 = _1792.z;
    float _1797 = _1792.w;
    float _1887;
    float _1889;
    float _1891;
    float _1893;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _1850 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _1851 = _1850 / _331;
        float _1862 = _1851 * _217;
        float _1863 = _218 * _1851;
        float _1864 = (-0.0) - _1863;
        float _1865 = _1851 * _219;
        float _1867 = (cbSceneParam._m0[77u].w * _1864) / _1850;
        float _1868 = _1867 + cbSceneParam._m0[79u].w;
        float _1869 = cbSceneParam._m0[79u].w - _1863;
        float _1875 = sqrt(((_1862 * _1862) + (_1863 * _1863)) + (_1865 * _1865));
        float _1878 = (1.0 - (cbSceneParam._m0[77u].w / _1850)) * _1875;
        float _1883 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1885 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2069;
        if (abs((_1864 - _1867) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2069 = ((((_1868 > 0.0) ? exp2(_1883 * _1868) : (2.0 - exp2(_1885 * _1868))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1878;
        }
        else
        {
            float _2011 = 1.0 / cbSceneParam._m0[80u].x;
            float _2012 = isnan(_1869) ? _1868 : (isnan(_1868) ? _1869 : max(_1868, _1869));
            float _2013 = isnan(_1869) ? _1868 : (isnan(_1868) ? _1869 : min(_1868, _1869));
            float _2022 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : min(_2012, 0.0));
            float _2023 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : min(_2013, 0.0));
            _2069 = ((abs(_1875 / _1864) * cbSceneParam._m0[80u].y) * ((((_2022 - _2023) * 2.0) - ((exp2(_1883 * (isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)))) - exp2(_1883 * (isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))))) * _2011)) - ((exp2(_1885 * _2022) - exp2(_1885 * _2023)) * _2011))) + (_1878 * cbSceneParam._m0[80u].z);
        }
        vec4 _2071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1777, _1778, 1.0), 0.0);
        float _2080 = exp2((_2069 * (-1.44269502162933349609375)) * (1.0 - _2071.w));
        float _2081 = log2(_2080);
        float _2097 = log2(_1797);
        _1887 = (exp2(_2097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2081 * cbSceneParam._m0[78u].x)) * _2071.x) / cbSceneParam._m0[78u].x)) + _1794;
        _1889 = (exp2(_2097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2081 * cbSceneParam._m0[78u].y)) * _2071.y) / cbSceneParam._m0[78u].y)) + _1795;
        _1891 = (exp2(_2097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2081 * cbSceneParam._m0[78u].z)) * _2071.z) / cbSceneParam._m0[78u].z)) + _1796;
        _1893 = _2080 * _1797;
    }
    else
    {
        _1887 = _1794;
        _1889 = _1795;
        _1891 = _1796;
        _1893 = _1797;
    }
    float _1904 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1905 = _1904 == 3.0;
    float _1906 = log2(_1893);
    float _1913 = exp2(_1906 * cbSceneParam._m0[78u].x) * (((_1746 + ((isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))) * _936)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _254.x) * exp2((-0.0) - (((cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].x) * _284) * _285))) * _1762));
    float _1914 = exp2(_1906 * cbSceneParam._m0[78u].y) * (((_1748 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _936)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _254.y) * exp2((-0.0) - (((cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x) * _284) * _285))) * _1762));
    float _1915 = exp2(_1906 * cbSceneParam._m0[78u].z) * (((_1750 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _936)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _254.z) * exp2((-0.0) - (((cbMtdParam._m0[11u].y * cbMtdParam._m0[10u].x) * _284) * _285))) * _1762));
    float _1924 = (_1904 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1924 * (_1905 ? _1913 : (_1913 + (cbSceneParam._m0[72u].w * _1887)));
    SV_Target.y = _1924 * (_1905 ? _1914 : (_1914 + (cbSceneParam._m0[72u].w * _1889)));
    SV_Target.z = _1924 * (_1905 ? _1915 : (_1915 + (cbSceneParam._m0[72u].w * _1891)));
    SV_Target.w = cbInstanceData._m0[_1769].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1769].w;
}


